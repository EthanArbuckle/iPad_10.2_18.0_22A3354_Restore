void sub_1B5A0FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::WantsOwnedObjectPropertiesChanged(HALS_System *this)
{
  return 1;
}

void HALS_System::HandleOwnedObjectPropertiesChanged(HALS_System *this, const HALS_Object *a2, uint64_t a3, int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  const AudioObjectPropertyAddress *v17;
  int v18;
  int mSelector;
  int v20;
  int v21;
  HALS_PlatformBehaviors *v22;
  uint64_t *platform_behaviors;
  AudioObjectPropertyAddress *v24;
  HALS_NotificationManager *v25;
  uint64_t v26;
  AudioObjectPropertyAddress v27;
  void *__p[2];
  __int128 v29;

  if (!a4)
  {
    v24 = 0;
    *(_OWORD *)__p = 0u;
    v29 = 0u;
    goto LABEL_41;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1953526563;
  while (2)
  {
    v17 = &a5[v9];
    while (1)
    {
      mSelector = v17->mSelector;
      ++v17;
      v18 = mSelector;
      if (mSelector > 1886152482)
        break;
      if (v18 != 1684370979)
      {
        if (v18 == 1668049699)
          v20 = 1;
        else
          v20 = v13;
        if (v18 == 1651472419)
          v14 = 1;
        else
          v13 = v20;
        goto LABEL_25;
      }
LABEL_9:
      ++v9;
      v15 = 1;
      if (a4 == v9)
      {
        *(_OWORD *)__p = 0u;
        v29 = 0u;
LABEL_27:
        *(_QWORD *)&v27.mSelector = 0x676C6F6264657623;
        v27.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)0x74707323);
        platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v22);
        if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors) == 1)
        {
          *(_QWORD *)&v27.mSelector = 0x676C6F6272647623;
          v27.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
        }
        goto LABEL_29;
      }
    }
    if (v18 <= 1919186466)
    {
      if (v18 == 1886548771)
        v21 = 1;
      else
        v21 = v12;
      if (v18 == 1886152483)
        v10 = 1;
      else
        v12 = v21;
      goto LABEL_25;
    }
    if (v18 == 1919186467)
      goto LABEL_9;
    if (v18 == 1953526563)
      v11 = 1;
LABEL_25:
    if (++v9 != a4)
      continue;
    break;
  }
  *(_OWORD *)__p = 0u;
  v29 = 0u;
  if ((v15 & 1) != 0)
    goto LABEL_27;
LABEL_29:
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)&v27.mSelector = 0x676C6F62626F7823;
    v27.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if ((v13 & 1) != 0)
  {
    *(_QWORD *)&v27.mSelector = 0x676C6F62636C6B23;
    v27.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)&v27.mSelector = 0x676C6F6270727323;
    v27.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)&v27.mSelector = 0x676C6F6274707323;
    v27.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)&v27.mSelector = 0x676C6F62706C6723;
    v27.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  v24 = (AudioObjectPropertyAddress *)__p[0];
LABEL_41:
  if (v24 != __p[1])
  {
    v25 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v26 = -1431655765 * ((unint64_t)((char *)__p[1] - (char *)v24) >> 2);
    if (a6)
      HALS_Object::PropertiesChanged_Sync(this, v25, a3, v26, v24);
    else
      HALS_Object::PropertiesChanged(this, v25, a3, v26, v24);
  }
  if (v24)
    operator delete(v24);
}

void sub_1B5A0FF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_System::HandleOwnedObjectGroupPropertiesChanged(HALS_System *this, unsigned int a2, uint64_t a3, unsigned int a4, const unsigned int *a5, const unsigned int *a6, int a7, const AudioObjectPropertyAddress *a8, BOOL a9)
{
  uint64_t v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  AudioObjectPropertyAddress *v20;
  HALS_NotificationManager *v21;
  uint64_t v22;
  AudioObjectPropertyAddress v23;
  void *__p[2];
  __int128 v25;

  if (!a7)
  {
    v20 = 0;
    *(_OWORD *)__p = 0u;
    v25 = 0u;
    goto LABEL_35;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  while (2)
  {
    v17 = (uint64_t)&a8[v11];
    while (1)
    {
      v19 = *(_DWORD *)v17;
      v17 += 12;
      v18 = v19;
      if (v19 > 1886548770)
        break;
      if (v18 != 1684370979)
      {
        if (v18 == 1668049699)
          v17 = 1;
        else
          v17 = v14;
        if (v18 == 1651472419)
          v15 = 1;
        else
          v14 = v17;
        goto LABEL_22;
      }
LABEL_8:
      ++v11;
      v16 = 1;
      if (a7 == v11)
      {
        *(_OWORD *)__p = 0u;
        v25 = 0u;
LABEL_24:
        *(_QWORD *)&v23.mSelector = 0x676C6F6264657623;
        v23.mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
        goto LABEL_25;
      }
    }
    if (v18 == 1919186467)
      goto LABEL_8;
    if (v18 == 1886548771)
      v17 = 1;
    else
      v17 = v13;
    if (v18 == 1953526563)
      v12 = 1;
    else
      v13 = v17;
LABEL_22:
    if (++v11 != a7)
      continue;
    break;
  }
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  if ((v16 & 1) != 0)
    goto LABEL_24;
LABEL_25:
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)&v23.mSelector = 0x676C6F62626F7823;
    v23.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)&v23.mSelector = 0x676C6F62636C6B23;
    v23.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if ((v13 & 1) != 0)
  {
    *(_QWORD *)&v23.mSelector = 0x676C6F6270727323;
    v23.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)&v23.mSelector = 0x676C6F6274707323;
    v23.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  v20 = (AudioObjectPropertyAddress *)__p[0];
LABEL_35:
  if (v20 != __p[1])
  {
    v21 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v22 = -1431655765 * ((unint64_t)((char *)__p[1] - (char *)v20) >> 2);
    if (a9)
      HALS_Object::PropertiesChanged_Sync(this, v21, a3, v22, v20);
    else
      HALS_Object::PropertiesChanged(this, v21, a3, v22, v20);
  }
  if (v20)
    operator delete(v20);
}

void sub_1B5A101EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  BOOL v1;

  v1 = **(_DWORD **)(result + 48) != 0;
  *(_BYTE *)(*(_QWORD *)(result + 40) + 1224) = v1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v1;
  return result;
}

void ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_151(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char *shared_owners;
  int v9;
  int v10;
  unint64_t shared_weak_owners;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  int v20;
  unint64_t v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _QWORD block[5];
  std::__shared_weak_count *v29;
  int v30;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v27 = *(_DWORD *)(v1 + 284);
    v3 = (std::__shared_weak_count *)operator new(0x30uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = 0;
    v5 = (void **)&v3[1].__vftable;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
    v3[1].__shared_owners_ = 0;
    v3[1].__shared_weak_owners_ = 0;
    v6 = *(_QWORD *)(v2 + 1352);
    v7 = *(_QWORD *)(v2 + 1360);
    if (v6 != v7)
    {
      shared_owners = 0;
      v9 = *(_DWORD *)(v1 + 16);
      do
      {
        if (v9 == **(_DWORD **)(*(_QWORD *)v6 + 64))
        {
          v10 = *(_DWORD *)(*(_QWORD *)v6 + 16);
          shared_weak_owners = v3[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            v13 = (char *)*v5;
            v14 = (shared_owners - (_BYTE *)*v5) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v16 = shared_weak_owners - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              v13 = (char *)v3[1].__vftable;
              shared_owners = (char *)v3[1].__shared_owners_;
            }
            else
            {
              v18 = 0;
            }
            v19 = (std::__shared_weak_count_vtbl *)(v17 + 4 * v14);
            LODWORD(v19->~__shared_weak_count) = v10;
            v12 = (char *)&v19->~__shared_weak_count + 4;
            while (shared_owners != v13)
            {
              v20 = *((_DWORD *)shared_owners - 1);
              shared_owners -= 4;
              HIDWORD(v19[-1].__on_zero_shared_weak) = v20;
              v19 = (std::__shared_weak_count_vtbl *)((char *)v19 - 4);
            }
            v3[1].__vftable = v19;
            v3[1].__shared_owners_ = (uint64_t)v12;
            v3[1].__shared_weak_owners_ = v17 + 4 * v18;
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)shared_owners = v10;
            v12 = shared_owners + 4;
          }
          v3[1].__shared_owners_ = (uint64_t)v12;
          shared_owners = v12;
        }
        v6 += 8;
      }
      while (v6 != v7);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN11HALS_System41_TellAllIOContextsForClientAboutPowerHintEP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_135;
    block[4] = v3 + 1;
    v29 = v3;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v30 = v27;
    v22 = atomic_load((unsigned __int8 *)(v2 + 928));
    if ((v22 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v2 + 929));
    dispatch_async(*(dispatch_queue_t *)(v2 + 896), block);
    v23 = v29;
    if (v29)
    {
      v24 = (unint64_t *)&v29->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B5A1047C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_153(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *shared_owners;
  int v10;
  unint64_t shared_weak_owners;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  int v20;
  unint64_t v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD block[5];
  std::__shared_weak_count *v29;
  char v30;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v27 = *(_BYTE *)(v1 + 256);
    v3 = *(_DWORD *)(v1 + 16);
    v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = 0;
    v6 = (void **)&v4[1].__vftable;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
    v4[1].__shared_owners_ = 0;
    v4[1].__shared_weak_owners_ = 0;
    v7 = *(_QWORD *)(v2 + 1352);
    v8 = *(_QWORD *)(v2 + 1360);
    if (v7 != v8)
    {
      shared_owners = 0;
      do
      {
        if (v3 == **(_DWORD **)(*(_QWORD *)v7 + 64))
        {
          v10 = *(_DWORD *)(*(_QWORD *)v7 + 16);
          shared_weak_owners = v4[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            v13 = (char *)*v6;
            v14 = (shared_owners - (_BYTE *)*v6) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v16 = shared_weak_owners - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              v13 = (char *)v4[1].__vftable;
              shared_owners = (char *)v4[1].__shared_owners_;
            }
            else
            {
              v18 = 0;
            }
            v19 = (std::__shared_weak_count_vtbl *)(v17 + 4 * v14);
            LODWORD(v19->~__shared_weak_count) = v10;
            v12 = (char *)&v19->~__shared_weak_count + 4;
            while (shared_owners != v13)
            {
              v20 = *((_DWORD *)shared_owners - 1);
              shared_owners -= 4;
              HIDWORD(v19[-1].__on_zero_shared_weak) = v20;
              v19 = (std::__shared_weak_count_vtbl *)((char *)v19 - 4);
            }
            v4[1].__vftable = v19;
            v4[1].__shared_owners_ = (uint64_t)v12;
            v4[1].__shared_weak_owners_ = v17 + 4 * v18;
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)shared_owners = v10;
            v12 = shared_owners + 4;
          }
          v4[1].__shared_owners_ = (uint64_t)v12;
          shared_owners = v12;
        }
        v7 += 8;
      }
      while (v7 != v8);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN11HALS_System49_TellAllIOContextsForClientAboutSleepingIsAllowedEP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_111_5465;
    block[4] = v4 + 1;
    v29 = v4;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v30 = v27;
    v22 = atomic_load((unsigned __int8 *)(v2 + 928));
    if ((v22 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v2 + 929));
    dispatch_async(*(dispatch_queue_t *)(v2 + 896), block);
    v23 = v29;
    if (v29)
    {
      v24 = (unint64_t *)&v29->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B5A106F8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_System10DestroyTapEjP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_Tap ***v2;
  HALS_Tap **v3;
  HALS_Tap **v4;

  v2 = *(HALS_Tap ****)(a1 + 40);
  v3 = v2[164];
  v4 = v2[165];
  if (v3 != v4)
  {
    while (*((_DWORD *)*v3 + 4) != *(_DWORD *)(a1 + 56))
    {
      if (++v3 == v4)
        return;
    }
  }
  if (v3 != v4)
  {
    HALS_System::_DestroyTap(v2, *v3, *(HALS_Client **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void HALS_System::_DestroyTap(HALS_Tap ***this, HALS_Tap *a2, HALS_Client *a3)
{
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  HALS_Object *v10;
  uint64_t v11;
  unint64_t v12;
  HALS_Tap **v13;
  HALS_Tap **v14;
  HALS_Tap **v15;
  dispatch_queue_t *v16;
  unsigned __int8 v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  int v20;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  _QWORD block[5];
  uint8_t buf[8];
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v29 = 2080;
      *(_QWORD *)&v29[2] = "HALS_System.cpp";
      v30 = 1024;
      v31 = 2934;
      v32 = 2080;
      v33 = "client != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a client object", buf, 0x22u);
    }
    abort();
  }
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v29 = 2080;
      *(_QWORD *)&v29[2] = "HALS_System.cpp";
      v30 = 1024;
      v31 = 2935;
      v32 = 2080;
      v33 = "tap != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a tap object", buf, 0x22u);
    }
    abort();
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v6 = *(std::__shared_weak_count **)v29;
  v7 = **(NSObject ***)buf;
  if (*(_QWORD *)v29)
  {
    v8 = (unint64_t *)(*(_QWORD *)v29 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v18 = pthread_self();
    v19 = pthread_mach_thread_np(v18);
    v20 = *((_DWORD *)a2 + 4);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)v29 = 2080;
    *(_QWORD *)&v29[2] = "HALS_System.cpp";
    v30 = 1024;
    v31 = 2936;
    v32 = 1024;
    LODWORD(v33) = v20;
    _os_log_debug_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_System::_DestroyTap(%d)", buf, 0x1Eu);
  }
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFF00000000) != 0 && *((_DWORD *)a3 + 4) == (_DWORD)v11 || !*((_BYTE *)a2 + 83))
  {
    HALS_ObjectMap::RetainObject(a2, v10);
    do
      v12 = __ldaxr(&HALS_Tap::gPendingTapDelete);
    while (__stlxr(v12 + 1, &HALS_Tap::gPendingTapDelete));
    v13 = this[165];
    v14 = this[164];
    if (v14 != v13)
    {
      while (*v14 != a2)
      {
        if (++v14 == v13)
        {
          v14 = this[165];
          break;
        }
      }
    }
    if (v14 != v13)
    {
      v15 = v14 + 1;
      if (v14 + 1 != v13)
      {
        do
        {
          if (*v15 != a2)
            *v14++ = *v15;
          ++v15;
        }
        while (v15 != v13);
        v13 = this[165];
      }
    }
    if (v13 != v14)
      this[165] = v14;
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    v16 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN11HALS_System11_DestroyTapEP8HALS_TapP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_122;
    block[4] = a2;
    v17 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
    if ((v17 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    dispatch_async(*v16, block);
  }
}

void ___ZN11HALS_System11_DestroyTapEP8HALS_TapP11HALS_Client_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  HALS_Object *v3;
  HALS_Object *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8[2];
  uint64_t v9;
  std::__shared_weak_count *v10;

  v8[0] = 0;
  v8[1] = 0;
  HALS_System::GetInstance(&v9, 0, v8);
  if (v9)
  {
    v2 = *(_BYTE **)(a1 + 32);
    if (v2)
    {
      if (v2[240])
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 8))(v2);
        HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 32), v3);
        HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(a1 + 32), v4);
      }
    }
  }
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5A10C4C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A10C3CLL);
}

void ___ZN11HALS_System49_TellAllIOContextsForClientAboutSleepingIsAllowedEP11HALS_Client_block_invoke(uint64_t a1)
{
  unsigned int **v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  char v9;
  HALB_Mutex *v10;
  _QWORD v11[5];
  char v12;

  v1 = *(unsigned int ***)(a1 + 32);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      v8 = (HALS_ObjectMap *)v6;
      if (v6)
      {
        v9 = *(_BYTE *)(a1 + 48);
        v11[0] = v5;
        v11[1] = 0x40000000;
        v11[2] = ___ZN14HALS_IOContext24SleepingIsAllowedChangedEb_block_invoke;
        v11[3] = &__block_descriptor_tmp_14_8634;
        v11[4] = v6;
        v12 = v9;
        v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v11);
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t __copy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrINS_6vectorIjNS_9allocatorIjEEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrINS_6vectorIjNS_9allocatorIjEEEEEE(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void HALS_System::StartRunLoop(HALS_System *this)
{
  HALB_Guard *v2;
  int v3;

  v2 = (HALS_System *)((char *)this + 1528);
  v3 = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
  *((_BYTE *)this + 1800) = 0;
  CADeprecated::CAPThread::Start((HALS_System *)((char *)this + 1672));
  HALB_Guard::Wait(v2);
  HALB_Guard::Locker::~Locker(&v2);
}

void sub_1B5A10E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
  HALB_Guard::Locker::~Locker(&a9);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System41_TellAllIOContextsForClientAboutPowerHintEP11HALS_Client_block_invoke(uint64_t a1)
{
  unsigned int **v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  unsigned int *v8;
  int v9;
  HALB_Mutex *v10;
  HALS_NotificationManager *v11;
  _QWORD v12[6];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  AudioObjectPropertyAddress v18;

  v1 = *(unsigned int ***)(a1 + 32);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      v8 = (unsigned int *)v6;
      if (v6)
      {
        v9 = *(_DWORD *)(a1 + 48);
        v14 = 0;
        v15 = &v14;
        v16 = 0x2000000000;
        v17 = 0;
        v12[0] = v5;
        v12[1] = 0x40000000;
        v12[2] = ___ZN14HALS_IOContext16PowerHintChangedEj_block_invoke;
        v12[3] = &unk_1E698B0D0;
        v12[4] = &v14;
        v12[5] = v6;
        v13 = v9;
        v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v12);
        if (*((_BYTE *)v15 + 24))
        {
          v11 = (HALS_NotificationManager *)v8[18];
          if (!(_DWORD)v11)
            v11 = (HALS_NotificationManager *)v8[4];
          *(_QWORD *)&v18.mSelector = 0x676C6F626673697ALL;
          v18.mElement = 0;
          HALS_Object::PropertiesChanged((HALS_Object *)v8, v11, 0, 1, &v18);
        }
        _Block_object_dispose(&v14, 8);
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v7);
      ++v2;
    }
    while (v2 != v3);
  }
}

void ___ZNK11HALS_System21update_all_iocontextsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;

  v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
  v3 = (HALS_ObjectMap *)v1;
  if (v1)
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 264))(*(_QWORD *)(v1 + 96));
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1B5A11010(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  HALS_ObjectMap *v12;

  HALS_ObjectMap::ReleaseObject(v12, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_System::CopyDeviceByUID(HALS_System *this, const __CFString *a2, HALS_Client *a3)
{
  HALB_Mutex *v5;
  HALS_DeviceManager **v6;
  HALS_DeviceManager **v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v17[3];

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__5429;
  v16 = __Block_byref_object_dispose__5430;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK11HALS_System15CopyDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  v11[3] = &unk_1E697DBF0;
  v11[4] = &v12;
  v11[5] = this;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  v6 = (HALS_DeviceManager **)v13[5];
  v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    v8 = HALS_DeviceManager::CopyDeviceByUID(*v6, a2, a3);
    if (v8)
      goto LABEL_6;
    ++v6;
  }
  v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1B5A1113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_System::CopyPlugInByBundleID(HALS_System *this, const __CFString *a2)
{
  HALB_Mutex *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  const __CFString *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  HALS_Object *v16;
  const __CFString *v18;
  char v19;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  __n128 (*v24)(_QWORD *, uint64_t);
  void (*v25)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v26[3];

  v21 = 0;
  v22 = &v21;
  v23 = 0x4002000000;
  v24 = __Block_byref_object_copy__5429;
  v25 = __Block_byref_object_dispose__5430;
  memset(v26, 0, sizeof(v26));
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK11HALS_System20CopyPlugInByBundleIDEPK10__CFString_block_invoke;
  v20[3] = &unk_1E697D998;
  v20[4] = &v21;
  v20[5] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v20);
  v4 = (HALS_ObjectMap **)v22[5];
  for (i = (HALS_ObjectMap **)v22[6]; v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = *((_DWORD *)*v4 + 5);
    v8 = *((_DWORD *)*v4 + 6);
    if (v7 == v8)
    {
      if (v7 != 1953656941 && v7 != 1634757735)
        continue;
    }
    else if (v7 != 1634757735 && v7 != 1953656941 && v8 != 1634757735 && v8 != 1953656941)
    {
      continue;
    }
    v13 = (const __CFString *)*((_QWORD *)v6 + 6);
    if (v13)
    {
      CFRetain(v13);
      v13 = (const __CFString *)*((_QWORD *)v6 + 6);
    }
    v18 = v13;
    v19 = 1;
    if (CFStringCompare(v13, a2, 0) == kCFCompareEqualTo)
    {
      v15 = *v4;
      HALS_ObjectMap::RetainObject(*v4, v14);
      CACFString::~CACFString((CACFString *)&v18);
      goto LABEL_26;
    }
    CACFString::~CACFString((CACFString *)&v18);
  }
  v15 = 0;
LABEL_26:
  _Block_object_dispose(&v21, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v26, v16);
  return v15;
}

void sub_1B5A112DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap ***v17;
  HALS_Object *v19;

  CACFString::~CACFString((CACFString *)&a9);
  _Block_object_dispose(&a17, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v19);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::CopyTapByUID(uint64_t a1, const void *a2, uint64_t a3)
{
  HALB_Mutex *v6;
  uint64_t v7;
  _QWORD v9[6];
  CFTypeRef cf;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZNK11HALS_System12CopyTapByUIDEN10applesauce2CF9StringRefEP11HALS_Client_block_invoke;
  v9[3] = &unk_1E697E0B0;
  v9[4] = &v12;
  v9[5] = a1;
  if (a2)
    CFRetain(a2);
  cf = a2;
  v11 = a3;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  v7 = v13[3];
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1B5A113EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  const void **v17;

  applesauce::CF::StringRef::~StringRef(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_System::CopyClockDeviceByUID(HALS_System *this, const __CFString *a2, HALS_Client *a3)
{
  HALB_Mutex *v4;
  HALS_Client *v5;
  HALS_DeviceManager **v6;
  HALS_DeviceManager **v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v17[3];

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__5429;
  v16 = __Block_byref_object_dispose__5430;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK11HALS_System20CopyClockDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  v11[3] = &unk_1E697DB28;
  v11[4] = &v12;
  v11[5] = this;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *, const __CFString *, HALS_Client *))(*(_QWORD *)this + 56))(this, a2, a3);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
  v6 = (HALS_DeviceManager **)v13[5];
  v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    v8 = HALS_DeviceManager::CopyClockDeviceByUID(*v6, a2, v5);
    if (v8)
      goto LABEL_6;
    ++v6;
  }
  v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1B5A11500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 1224);
  return result;
}

void ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_147(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A11558(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::GetNumberProcessObjects(HALS_System *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_System23GetNumberProcessObjectsEv_block_invoke;
  v4[3] = &unk_1E697DF08;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5A115F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_System::GetProcessObjectList(HALS_System *this, uint64_t a2)
{
  HALB_Mutex *v3;
  uint64_t *v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(_QWORD *, uint64_t);
  void (*v10)(uint64_t);
  void *__p;
  void *v12;
  uint64_t v13;

  v6 = 0;
  v7 = &v6;
  v8 = 0x4002000000;
  v9 = __Block_byref_object_copy__102;
  v10 = __Block_byref_object_dispose__103;
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System20GetProcessObjectListEv_block_invoke;
  v5[3] = &unk_1E697DEE0;
  v5[4] = &v6;
  v5[5] = a2;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  v4 = v7;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this, (const void *)v4[5], v4[6], (v4[6] - v4[5]) >> 2);
  _Block_object_dispose(&v6, 8);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_1B5A116E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFNumberRef *applesauce::CF::NumberRef::NumberRef<unsigned int,void>(CFNumberRef *a1, int a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B5A11790(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_System9CreateTapEPK14__CFDictionaryP11HALS_Client_block_invoke(_QWORD *a1)
{
  const void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  HALS_Object *v5;
  char v6;
  HALB_Mutex *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  HALS_MultiTap **v18;
  const void *v19;
  const __CFDictionary *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  HALS_Object *v35;
  HALS_ObjectMap *v36;
  double v37;
  HALS_MultiTap *v38;
  __int128 v39;
  HALS_ObjectMap *v40;
  HALS_Object *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  AMCP::Log::Scope_Registry *v63;
  std::__shared_weak_count *v64;
  NSObject *v65;
  unint64_t *v66;
  unint64_t v67;
  NSObject **v68;
  unsigned __int8 v69;
  NSObject *v70;
  _DWORD *v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  const void *v74;
  void *p_cf;
  std::runtime_error *exception;
  std::runtime_error *v77;
  CFTypeRef cf;
  std::__shared_weak_count *v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unsigned int v84[2];
  std::__shared_weak_count *v85;
  const __CFDictionary *v86;
  __int16 v87;
  CFTypeRef v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  HALS_ObjectMap *v93;
  uint64_t v94;
  int v95;
  _BYTE buf[40];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[5];
  v1 = (const void *)a1[6];
  v3 = a1[7];
  v4 = operator new();
  v82 = 0;
  v83 = 0;
  HALS_System::GetInstance(v84, 0, &v82);
  HALS_Object::HALS_Object((HALS_Object *)v4, 1952672883, 0, *(uint64_t *)v84, v5);
  *(_QWORD *)v4 = off_1E6975A30;
  if (v3)
  {
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(v3 + 16);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(v4 + 48) = 0;
  }
  *(_QWORD *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 52) = v6;
  *(_QWORD *)(v4 + 64) = 0;
  v7 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v7);
  *(_OWORD *)(v4 + 128) = 0u;
  *(_QWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 112) = 0;
  *(_DWORD *)(v4 + 120) = 1065353216;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_DWORD *)(v4 + 160) = 1065353216;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_DWORD *)(v4 + 200) = 1065353216;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_BYTE *)(v4 + 240) = 0;
  v8 = (std::__shared_weak_count *)operator new(0x240uLL);
  *(_OWORD *)&v8->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8[1].std::__shared_count = 0u;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975C30;
  LODWORD(v8[1].__shared_weak_owners_) = 0;
  v8[3].__shared_owners_ = 32;
  v8[2].std::__shared_count = (std::__shared_count)k_default_multitap_format;
  *(_OWORD *)&v8[2].__shared_weak_owners_ = unk_1B5D60538;
  v8[3].__shared_weak_owners_ = 0x40000000001;
  LODWORD(v8[4].__vftable) = 0;
  *(_OWORD *)&v8[4].__shared_owners_ = 0u;
  v8[5].std::__shared_count = 0u;
  LODWORD(v8[5].__shared_weak_owners_) = 1065353216;
  LODWORD(v8[6].__vftable) = 0;
  v8[7].__vftable = (std::__shared_weak_count_vtbl *)0x407F400000000000;
  *(_OWORD *)&v8[6].__shared_owners_ = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v8[7].__shared_owners_);
  LODWORD(v8[14].__shared_owners_) = 0;
  v8[15].__vftable = 0;
  v8[15].__shared_owners_ = 0;
  v8[14].__shared_weak_owners_ = 0;
  LODWORD(v8[16].__vftable) = 0;
  *(_OWORD *)&v8[16].__shared_owners_ = 0u;
  v8[17].std::__shared_count = 0u;
  LODWORD(v8[17].__shared_weak_owners_) = 1065353216;
  LODWORD(v8[18].__vftable) = 0;
  LOBYTE(v8[20].__shared_owners_) = 0;
  *(_OWORD *)&v8[20].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[21].__shared_owners_ = 0u;
  v8[18].__shared_owners_ = 0;
  v8[18].__shared_weak_owners_ = 0;
  LOBYTE(v8[19].__vftable) = 0;
  LODWORD(v8[22].__vftable) = 1065353216;
  LODWORD(v8[22].__shared_owners_) = 0;
  *(_OWORD *)&v8[22].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[23].__shared_owners_ = 0u;
  *(_QWORD *)(v4 + 248) = v8 + 1;
  *(_QWORD *)(v4 + 256) = v8;
  shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
LABEL_16:
    if (!v1)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (v1)
LABEL_17:
    CFRetain(v1);
LABEL_18:
  v18 = (HALS_MultiTap **)(v4 + 248);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v88, v1);
  if (!v88)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[8]>(buf, (const __CFDictionary *)v88, "TapUUID", &cf);
  v19 = *(const void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)buf;
  *(_QWORD *)buf = v19;
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  v87 = 0;
  v20 = (const __CFDictionary *)v88;
  if (v88)
    CFRetain(v88);
  v86 = v20;
  HALS_Tap::_UpdateFromDescription(v4, &v86, (BOOL *)&v87 + 1, (BOOL *)&v87);
  if (v20)
    CFRelease(v20);
  HALS_Tap::UpdateFilteredProcesses((HALS_Tap *)v4);
  v94 = 0x676C6F62644F7574;
  v95 = 0;
  v93 = (HALS_ObjectMap *)0x400000000;
  v91 = 0;
  v92 = 0;
  HALS_System::GetInstance(buf, 0, &v91);
  v21 = *(_QWORD *)buf;
  v89 = 0;
  v90 = 0;
  HALS_System::GetInstance(&cf, 0, &v89);
  (*(void (**)(uint64_t, _QWORD, uint64_t *, uint64_t, char *, HALS_ObjectMap **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v21 + 112))(v21, *((unsigned int *)cf + 4), &v94, 4, (char *)&v93 + 4, &v93, 0, 0, 0);
  v22 = v80;
  if (v80)
  {
    v23 = (unint64_t *)&v80->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v90;
  if (v90)
  {
    v26 = (unint64_t *)&v90->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v92;
  if (v92)
  {
    v32 = (unint64_t *)&v92->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v93);
  v36 = (HALS_ObjectMap *)v34;
  if (v34)
    v37 = (*(double (**)(uint64_t))(*(_QWORD *)v34 + 264))(v34);
  else
    v37 = 48000.0;
  HALS_ObjectMap::ReleaseObject(v36, v35);
  if (v37 != 0.0)
  {
    v38 = *v18;
    v39 = *(_OWORD *)((char *)*v18 + 40);
    *(_OWORD *)buf = *(_OWORD *)((char *)*v18 + 24);
    *(_OWORD *)&buf[16] = v39;
    *(_QWORD *)&buf[32] = *((_QWORD *)v38 + 7);
    *(double *)buf = v37;
    HALS_MultiTap::set_format(v38, (__int128 *)buf, 0);
  }
  v40 = (HALS_ObjectMap *)HALS_MultiTap::copy_engine(*v18);
  HALS_ObjectMap::ReleaseObject(v40, v41);
  *(_BYTE *)(v4 + 240) = 1;
  if (v88)
    CFRelease(v88);
  v42 = v85;
  if (v85)
  {
    v43 = (unint64_t *)&v85->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v83;
  if (v83)
  {
    v46 = (unint64_t *)&v83->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (*(_BYTE *)(v4 + 240))
  {
    v48 = (uint64_t *)v2[165];
    v49 = v2[166];
    if ((unint64_t)v48 >= v49)
    {
      v52 = v2[164];
      v53 = ((uint64_t)v48 - v52) >> 3;
      if ((unint64_t)(v53 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v54 = v49 - v52;
      v55 = v54 >> 2;
      if (v54 >> 2 <= (unint64_t)(v53 + 1))
        v55 = v53 + 1;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56)
        v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v56);
      else
        v57 = 0;
      v58 = (uint64_t *)(v56 + 8 * v53);
      v59 = v56 + 8 * v57;
      *v58 = v4;
      v50 = v58 + 1;
      v60 = (char *)v2[165];
      v61 = (char *)v2[164];
      if (v60 != v61)
      {
        do
        {
          v62 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *--v58 = v62;
        }
        while (v60 != v61);
        v60 = (char *)v2[164];
      }
      v2[164] = v58;
      v2[165] = v50;
      v2[166] = v59;
      if (v60)
        operator delete(v60);
    }
    else
    {
      *v48 = v4;
      v50 = v48 + 1;
    }
    v2[165] = v50;
    v63 = (AMCP::Log::Scope_Registry *)(**(uint64_t (***)(uint64_t))v4)(v4);
    v51 = *(_DWORD *)(v4 + 16);
    AMCP::Log::Scope_Registry::get(v63);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v64 = *(std::__shared_weak_count **)&buf[8];
    v65 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v66 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      v72 = pthread_self();
      v73 = pthread_mach_thread_np(v72);
      HALS_Tap::GetUID(v84, *(const void **)(v4 + 64));
      v74 = *(const void **)v84;
      if (!*(_QWORD *)v84)
      {
        v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
        __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&cf, *(const __CFString **)v84);
      if (v81 >= 0)
        p_cf = &cf;
      else
        p_cf = (void *)cf;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_System.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 2915;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = p_cf;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v51;
      _os_log_debug_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_System::_CreateTap(%s) -> %d", buf, 0x28u);
      if (v81 < 0)
        operator delete((void *)cf);
      CFRelease(v74);
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    v68 = (NSObject **)HALS_ObjectMap::sNormalPriorityQueue;
    v69 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
    if ((v69 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    v70 = *v68;
    v71 = (_DWORD *)operator new();
    *v71 = v51;
    dispatch_async_f(v70, v71, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &>(dispatch_queue_s *,HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &)::{lambda(void *)#1}::__invoke);
  }
  else
  {
    v51 = 0;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v51;
}

void sub_1B5A12078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void applesauce::dispatch::v1::async<HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &>(dispatch_queue_s *,HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  HALS_Tap *v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unsigned int *v4[3];

  v1 = (HALS_Tap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  v3 = v1;
  if (v1)
  {
    memset(v4, 0, sizeof(v4));
    HALS_Tap::UpdateReadingContexts(v1, v4);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  JUMPOUT(0x1B5E50688);
}

void sub_1B5A12478(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A12450);
}

void sub_1B5A124A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__102(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__103(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNK11HALS_System10GetTapListEjRjPjP11HALS_Client_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v1 = a1[5];
  v2 = *(_QWORD **)(a1[4] + 8);
  v3 = a1[6];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  HALS_System::_GetVisibleTapList(v1, (void **)&v18, v3);
  v4 = v18;
  v5 = v19;
  if (v18 != v19)
  {
    v6 = (char *)v2[6];
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)v4 + 16);
      v8 = v2[7];
      if ((unint64_t)v6 >= v8)
      {
        v10 = (char *)v2[5];
        v11 = (v6 - v10) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
          v10 = (char *)v2[5];
          v6 = (char *)v2[6];
        }
        else
        {
          v15 = 0;
        }
        v16 = (_DWORD *)(v14 + 4 * v11);
        *v16 = v7;
        v9 = (char *)(v16 + 1);
        while (v6 != v10)
        {
          v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v16 = v17;
        }
        v2[5] = v16;
        v2[6] = v9;
        v2[7] = v14 + 4 * v15;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v6 = v7;
        v9 = v6 + 4;
      }
      v2[6] = v9;
      v4 += 8;
      v6 = v9;
    }
    while (v4 != v5);
    v4 = v18;
  }
  if (v4)
  {
    v19 = v4;
    operator delete(v4);
  }
}

void sub_1B5A12644(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A1260CLL);
}

void sub_1B5A12654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_System::_GetVisibleTapList(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  char *v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  void *v35;
  char *v36;

  if (!a3)
  {
    if ((void **)(a1 + 1312) == a2)
      return;
    v22 = *(char **)(a1 + 1312);
    v23 = *(_BYTE **)(a1 + 1320);
    v24 = v23 - v22;
    v25 = (v23 - v22) >> 3;
    v26 = (uint64_t)a2[2];
    v27 = (char *)*a2;
    if (v25 <= (v26 - (uint64_t)*a2) >> 3)
    {
      v30 = a2 + 1;
      v32 = a2[1];
      v33 = (v32 - v27) >> 3;
      if (v33 < v25)
      {
        v34 = &v22[8 * v33];
        if (v32 != v27)
        {
          memmove(v27, v22, v32 - v27);
          v27 = (char *)*v30;
        }
        v24 = v23 - v34;
        if (v23 == v34)
          goto LABEL_46;
        v35 = v27;
        v36 = v34;
        goto LABEL_45;
      }
    }
    else
    {
      if (v27)
      {
        a2[1] = v27;
        operator delete(v27);
        v26 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v24 & 0x8000000000000000) != 0)
LABEL_48:
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v28 = v26 >> 2;
      if (v26 >> 2 <= v25)
        v28 = (v23 - v22) >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      std::vector<void const*>::__vallocate[abi:ne180100](a2, v29);
      v31 = (char *)a2[1];
      v30 = a2 + 1;
      v27 = v31;
    }
    if (v23 == v22)
    {
LABEL_46:
      *v30 = &v27[v24];
      return;
    }
    v35 = v27;
    v36 = v22;
LABEL_45:
    memmove(v35, v36, v24);
    goto LABEL_46;
  }
  v4 = *(uint64_t **)(a1 + 1312);
  for (i = *(uint64_t **)(a1 + 1320); v4 != i; ++v4)
  {
    v7 = *v4;
    v8 = *(_QWORD *)(*v4 + 48);
    v9 = (v8 & 0xFF00000000) != 0 && *(_DWORD *)(a3 + 16) == (_DWORD)v8;
    if (v9 || !*(_BYTE *)(v7 + 83))
    {
      v11 = a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          goto LABEL_48;
        v14 = v10 - (_QWORD)*a2;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          v7 = *v4;
        }
        else
        {
          v17 = 0;
        }
        v18 = (_QWORD *)(v16 + 8 * v13);
        *v18 = v7;
        v12 = v18 + 1;
        v20 = (char *)*a2;
        v19 = (char *)a2[1];
        if (v19 != *a2)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = (void *)(v16 + 8 * v17);
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v7;
        v12 = v11 + 1;
      }
      a2[1] = v12;
    }
  }
}

void ___ZNK11HALS_System36CopyNonMetaDeviceByIsolatedUseCaseIDE22IsolatedAudioUseCaseIDP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A128A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double ___ZNK11HALS_System20GetProcessObjectListEv_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  HALS_System::_GetProcessObjectList((HALS_System *)&v5, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1288), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1296));
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (void *)v2[5];
  if (v3)
  {
    v2[6] = v3;
    operator delete(v3);
  }
  result = *(double *)&v5;
  *(_OWORD *)(v2 + 5) = v5;
  v2[7] = v6;
  return result;
}

void HALS_System::_GetProcessObjectList(HALS_System *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v6;
  unint64_t v7;
  char *v8;
  int v9;
  HALS_PlatformBehaviors *v10;
  uint64_t *platform_behaviors;
  int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(*(_QWORD *)v4 + 232);
      v10 = (HALS_PlatformBehaviors *)getpid();
      if (v9 != (_DWORD)v10
        || (platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v10),
            (*(unsigned int (**)(uint64_t *))(*platform_behaviors + 96))(platform_behaviors)))
      {
        v12 = *(_DWORD *)(*(_QWORD *)v4 + 16);
        if ((unint64_t)v8 >= v7)
        {
          v14 = (v8 - v6) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v7 - (_QWORD)v6) >> 1 > v15)
            v15 = (uint64_t)(v7 - (_QWORD)v6) >> 1;
          if (v7 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          else
            v17 = 0;
          v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)v18 = v12;
          v13 = v18 + 4;
          while (v8 != v6)
          {
            v19 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v7 = v16 + 4 * v17;
          *(_QWORD *)this = v18;
          *((_QWORD *)this + 1) = v13;
          *((_QWORD *)this + 2) = v7;
          if (v6)
            operator delete(v6);
          v6 = v18;
        }
        else
        {
          *(_DWORD *)v8 = v12;
          v13 = v8 + 4;
        }
        *((_QWORD *)this + 1) = v13;
        v8 = v13;
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

void sub_1B5A12A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System23GetNumberProcessObjectsEv_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  void *v4[3];

  HALS_System::_GetProcessObjectList((HALS_System *)v4, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1288), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1296));
  v2 = v4[0];
  v3 = v4[1];
  if (v4[0])
    operator delete(v4[0]);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (unint64_t)(v3 - v2) >> 2;
}

void ___ZNK11HALS_System20CopyClockDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12AF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System18GetClockDeviceListEjRjPjP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12B28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System12CopyTapByUIDEN10applesauce2CF9StringRefEP11HALS_Client_block_invoke(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  const __CFString *v4;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(const __CFString **)(a1 + 48);
  if (v2)
    CFRetain(*(CFTypeRef *)(a1 + 48));
  v4 = v2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_System::_CopyTapByUID(v3, &v4, *(_QWORD *)(a1 + 56));
  if (v2)
    CFRelease(v2);
}

void sub_1B5A12BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c31_ZTSN10applesauce2CF9StringRefE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(a2 + 48));
  v2[6] = v3;
  return result;
}

void __destroy_helper_block_e8_48c31_ZTSN10applesauce2CF9StringRefE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    CFRelease(v1);
}

HALS_ObjectMap *HALS_System::_CopyTapByUID(uint64_t a1, const __CFString **a2, uint64_t a3)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  CFTypeRef v8;
  CFComparisonResult v9;
  CFTypeRef cf;
  void *__p;
  HALS_ObjectMap **v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  HALS_System::_GetVisibleTapList(a1, &__p, a3);
  v5 = (HALS_ObjectMap **)__p;
  v6 = v13;
  while (v5 != v6)
  {
    v7 = *v5;
    HALS_Tap::GetUID(&cf, *((const void **)*v5 + 8));
    v8 = cf;
    v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a2);
    if (v8)
      CFRelease(v8);
    if (v9 == kCFCompareEqualTo)
      goto LABEL_8;
    ++v5;
  }
  v7 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v7, v4);
  if (__p)
  {
    v13 = (HALS_ObjectMap **)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_1B5A12CB8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A12C8CLL);
}

void sub_1B5A12CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System12CopyBoxByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12D0C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System10GetBoxListEjRjPjP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12D3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System30CopyTransportManagerByBundleIDEPK10__CFString_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12D6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System23GetTransportManagerListEjRjPj_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12D9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System20CopyPlugInByBundleIDEPK10__CFString_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12DCC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System13GetPlugInListEjRjPj_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12DFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System15CopyDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A12E2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::GetNumberPlugIns(HALS_System *this)
{
  HALB_Mutex *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v13;
  HALS_Object *v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __n128 (*v21)(_QWORD *, uint64_t);
  void (*v22)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v23[3];

  v18 = 0;
  v19 = &v18;
  v20 = 0x4002000000;
  v21 = __Block_byref_object_copy__5429;
  v22 = __Block_byref_object_dispose__5430;
  memset(v23, 0, sizeof(v23));
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK11HALS_System16GetNumberPlugInsEv_block_invoke;
  v17[3] = &unk_1E697D970;
  v17[4] = &v18;
  v17[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v17);
  v2 = (uint64_t *)v19[5];
  v3 = (uint64_t *)v19[6];
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      v5 = *v2++;
      v7 = *(_DWORD *)(v5 + 20);
      v6 = *(_DWORD *)(v5 + 24);
      v9 = v7 == 1634757735 || v7 == 1953656941;
      v10 = v7 == v6;
      v11 = v9 || v7 != v6;
      v13 = v6 == 1634757735 || v6 == 1953656941;
      if (v7 == 1634757735 || v7 == 1953656941)
        v13 = v11;
      if (v10)
        v13 = v11;
      v4 = v4 + v13;
    }
    while (v2 != v3);
  }
  _Block_object_dispose(&v18, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v23, v15);
  return v4;
}

void sub_1B5A12F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System14GetTapListSizeEP11HALS_Client_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  v2 = a1[5];
  v3 = a1[6];
  v6 = 0;
  v7 = 0;
  v8 = 0;
  HALS_System::_GetVisibleTapList(v2, (void **)&v6, v3);
  v4 = v6;
  v5 = v7;
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = (unint64_t)(v5 - v4) >> 3;
}

void sub_1B5A12FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System21GetNumberClockDevicesEP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A13034(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System14GetNumberBoxesEP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A13064(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System26GetNumberTransportManagersEv_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A13094(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System16GetNumberPlugInsEv_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A130C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::DeviceManagerDestroyed(HALS_System *this, HALS_DeviceManager *a2)
{
  HALB_Mutex *v4;
  _QWORD v5[6];

  (*(void (**)(HALS_DeviceManager *))(*(_QWORD *)a2 + 8))(a2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_System22DeviceManagerDestroyedEP18HALS_DeviceManager_block_invoke;
  v5[3] = &__block_descriptor_tmp_89_5542;
  v5[4] = this;
  v5[5] = a2;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
}

void sub_1B5A13150(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A13140);
}

void ___ZN11HALS_System22DeviceManagerDestroyedEP18HALS_DeviceManager_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  void *v5;
  int64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 1232);
  v4 = *(char **)(v2 + 1240);
  if (v3 != (_QWORD *)v4)
  {
    while (*v3 != *(_QWORD *)(a1 + 40))
    {
      if (++v3 == (_QWORD *)v4)
      {
        v3 = *(_QWORD **)(v2 + 1240);
        break;
      }
    }
  }
  if (v3 == (_QWORD *)v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315394;
      v8 = "HALS_System.cpp";
      v9 = 1024;
      v10 = 2283;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::DeviceManagerDestroyed: unable to destroy old device manager.", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    v5 = v3 + 1;
    v6 = v4 - (char *)(v3 + 1);
    if (v4 != (char *)(v3 + 1))
      memmove(v3, v5, v4 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 1240) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), (HALS_Object *)v5);
  }
}

void HALS_System::_DestroyIOContext(HALS_System *this, HALS_Client *a2, int a3)
{
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap *v5;
  _DWORD *exception;
  HALS_ObjectMap **v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 169);
  v4 = (HALS_ObjectMap **)*((_QWORD *)this + 170);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *v3;
      if (*((_DWORD *)*v3 + 4) == a3)
        break;
      if (++v3 == v4)
        return;
    }
    v7 = v3;
    if (v3 != v4)
    {
      if (a2 && **((_DWORD **)v5 + 8) != *((_DWORD *)a2 + 4))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v9 = "HALS_System.cpp";
          v10 = 1024;
          v11 = 3311;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOEngine::_DestroyIOContext: the client does not own the IO context being destroyed", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560492391;
      }
      remove_context_helper(a3, (HALS_System *)((char *)this + 1352), &v7);
    }
  }
}

void ___ZN11HALS_System12RemoveClientEi_block_invoke(uint64_t a1)
{
  uint64_t v2;
  HALS_Object *v3;
  HALS_Client *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  HALS_ObjectMap **v11;
  HALS_ObjectMap *v12;
  int v13;
  HALB_Mutex *v14;
  uint64_t v15;
  BOOL v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  HALS_Object *v23;
  int v24;
  HALS_ObjectMap **v25;
  HALS_ObjectMap **v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  HALS_ObjectMap **v30;
  HALS_Object *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  char *shared_owners;
  int v38;
  unint64_t shared_weak_owners;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  int v47;
  HALS_ObjectMap **v48;
  unint64_t v49;
  unsigned __int8 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  HALS_Object *v55;
  HALS_ObjectMap **v56;
  HALS_ObjectMap **v57;
  HALS_ObjectMap *v58;
  dispatch_queue_t *v59;
  unsigned __int8 v60;
  HALS_ObjectMap **v61;
  HALS_ObjectMap *v62;
  HALS_ObjectMap **block;
  uint64_t v64;
  void *v65;
  void *v66;
  HALS_ObjectMap *v67;
  std::__shared_weak_count *v68;
  HALS_ObjectMap *v69;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = (HALS_Client *)HALS_System::CopyClientByProcessID((HALS_System *)v2, *(_DWORD *)(a1 + 40));
  if (v4)
  {
    v5 = *(_BYTE **)(v2 + 1312);
    v6 = *(_BYTE **)(v2 + 1320);
    v7 = v6 - v5;
    if (v6 != v5)
    {
      if (v7 < 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7 >> 3);
      memmove(v8, v5, v7);
      v9 = 8 * (v7 >> 3);
      if (v9)
      {
        v10 = 0;
        v11 = (HALS_ObjectMap **)MEMORY[0x1E0C809B0];
        do
        {
          v12 = *(HALS_ObjectMap **)&v8[v10];
          v13 = *((_DWORD *)v4 + 4);
          block = v11;
          v64 = 0x40000000;
          v65 = ___ZN8HALS_Tap16HandleClientExitEj_block_invoke;
          v66 = &__block_descriptor_tmp_31_3105;
          v67 = v12;
          LODWORD(v68) = v13;
          v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v12 + 56))(v12);
          HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&block);
          v15 = *((_QWORD *)v12 + 6);
          v16 = (v15 & 0xFF00000000) != 0 && *((_DWORD *)v4 + 4) == (_DWORD)v15;
          if (v16 && *((_BYTE *)v12 + 83))
            HALS_System::_DestroyTap((HALS_Tap ***)v2, v12, v4);
          v10 += 8;
        }
        while (v9 != v10);
      }
      if (v8)
        operator delete(v8);
    }
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  v18 = (HALS_ObjectMap *)HALS_System::CopyClientByProcessID((HALS_System *)v2, *(_DWORD *)(a1 + 40));
  if (v18)
  {
    v19 = *(_QWORD *)(v2 + 1360);
    v20 = *(_QWORD *)(v2 + 1352);
    if (v19 != v20)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        block = (HALS_ObjectMap **)(v20 + 8 * v21);
        if (**((_DWORD **)*block + 8) == *((_DWORD *)v18 + 4))
        {
          remove_context_helper(*((_DWORD *)*block + 4), (HALS_Object *)(v2 + 1352), &block);
          v19 = *(_QWORD *)(v2 + 1360);
          v20 = *(_QWORD *)(v2 + 1352);
        }
        else
        {
          ++v22;
        }
        v21 = v22;
      }
      while (v22 < (unint64_t)((v19 - v20) >> 3));
    }
  }
  HALS_ObjectMap::ReleaseObject(v18, v17);
  v24 = *(_DWORD *)(a1 + 40);
  v25 = *(HALS_ObjectMap ***)(v2 + 1288);
  v26 = *(HALS_ObjectMap ***)(v2 + 1296);
  while (v25 != v26)
  {
    v27 = (uint64_t)*v25++;
    v28 = *(_DWORD *)(v27 + 232);
    v29 = v28 != v24;
    if (v28 == v24)
    {
      v30 = &v25[(v28 != v24) - 1];
      if (v30 != v26)
      {
        v61 = &v25[v29 - 1];
        v62 = *v30;
        HALS_ObjectMap::RetainObject(*v30, v23);
        v32 = (std::__shared_weak_count *)operator new(0x30uLL);
        v32->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        v32->__shared_weak_owners_ = 0;
        v32[1].__vftable = 0;
        v34 = (void **)&v32[1].__vftable;
        v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6999E58;
        v32[1].__shared_owners_ = 0;
        v32[1].__shared_weak_owners_ = 0;
        v35 = *(_QWORD *)(v2 + 1232);
        v36 = *(_QWORD *)(v2 + 1240);
        if (v35 != v36)
        {
          shared_owners = 0;
          do
          {
            v38 = *(_DWORD *)(*(_QWORD *)v35 + 16);
            shared_weak_owners = v32[1].__shared_weak_owners_;
            if ((unint64_t)shared_owners >= shared_weak_owners)
            {
              v41 = (char *)*v34;
              v42 = (shared_owners - (_BYTE *)*v34) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v44 = shared_weak_owners - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v45);
                v41 = (char *)v32[1].__vftable;
                shared_owners = (char *)v32[1].__shared_owners_;
              }
              else
              {
                v31 = 0;
              }
              v46 = (std::__shared_weak_count_vtbl *)(v45 + 4 * v42);
              LODWORD(v46->~__shared_weak_count) = v38;
              v40 = (char *)&v46->~__shared_weak_count + 4;
              while (shared_owners != v41)
              {
                v47 = *((_DWORD *)shared_owners - 1);
                shared_owners -= 4;
                HIDWORD(v46[-1].__on_zero_shared_weak) = v47;
                v46 = (std::__shared_weak_count_vtbl *)((char *)v46 - 4);
              }
              v32[1].__vftable = v46;
              v32[1].__shared_owners_ = (uint64_t)v40;
              v32[1].__shared_weak_owners_ = v45 + 4 * (_QWORD)v31;
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)shared_owners = v38;
              v40 = shared_owners + 4;
            }
            v32[1].__shared_owners_ = (uint64_t)v40;
            v35 += 8;
            shared_owners = v40;
          }
          while (v35 != v36);
        }
        HALS_ObjectMap::RetainObject(v62, v31);
        v48 = (HALS_ObjectMap **)MEMORY[0x1E0C809B0];
        block = (HALS_ObjectMap **)MEMORY[0x1E0C809B0];
        v64 = 1174405120;
        v65 = ___ZNK11HALS_System27_TellDevicesAboutDeadClientEP11HALS_Client_block_invoke;
        v66 = &__block_descriptor_tmp_110;
        v67 = (HALS_ObjectMap *)&v32[1];
        v68 = v32;
        do
          v49 = __ldxr(p_shared_owners);
        while (__stxr(v49 + 1, p_shared_owners));
        v69 = v62;
        v50 = atomic_load((unsigned __int8 *)(v2 + 928));
        if ((v50 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v2 + 929));
        dispatch_async(*(dispatch_queue_t *)(v2 + 896), &block);
        v51 = v68;
        if (v68)
        {
          v52 = (unint64_t *)&v68->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        v55 = (HALS_Object *)v61;
        v56 = v61 + 1;
        v57 = *(HALS_ObjectMap ***)(v2 + 1296);
        if (v61 + 1 != v57)
        {
          v58 = *v61;
          do
          {
            *(v56 - 1) = *v56;
            *v56++ = v58;
          }
          while (v56 != v57);
          v55 = (HALS_Object *)(v56 - 1);
        }
        std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](v2 + 1288, v55);
        pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
        v59 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
        block = v48;
        v64 = 0x40000000;
        v65 = ___ZN11HALS_System13_RemoveClientEi_block_invoke;
        v66 = &__block_descriptor_tmp_109_5547;
        v67 = v62;
        v60 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
        if ((v60 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
        dispatch_async(*v59, &block);
      }
      return;
    }
  }
}

void sub_1B5A138B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_System13_RemoveClientEi_block_invoke(uint64_t a1)
{
  HALS_Object *v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32));
  HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(a1 + 32), v2);
}

void sub_1B5A13970(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System27_TellDevicesAboutDeadClientEP11HALS_Client_block_invoke(uint64_t a1, HALS_Object *a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;

  v3 = *(unsigned int ***)(a1 + 32);
  v4 = *v3;
  v5 = v3[1];
  while (v4 != v5)
  {
    v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v4);
    v8 = (HALS_ObjectMap *)v6;
    if (v6)
    {
      v7 = *(HALS_Object **)(a1 + 48);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
    }
    HALS_ObjectMap::ReleaseObject(v8, v7);
    ++v4;
  }
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 48), a2);
}

uint64_t HALS_System::CopyClientByProcessID(HALS_System *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System21CopyClientByProcessIDEi_block_invoke;
  v5[3] = &unk_1E697DE68;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5A13ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void remove_context_helper(int a1, HALS_Object *a2, HALS_ObjectMap ***a3)
{
  HALS_ObjectMap **v6;
  HALS_ObjectMap **v7;
  HALS_ObjectMap **v8;
  HALS_ObjectMap *v9;
  NSObject **v10;
  unsigned __int8 v11;
  NSObject *v12;
  _DWORD *v13;

  HALS_ObjectMap::RetainObject(**a3, a2);
  v6 = *a3;
  v7 = *a3 + 1;
  v8 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
  if (v7 != v8)
  {
    v9 = *v6;
    do
    {
      *(v7 - 1) = *v7;
      *v7++ = v9;
    }
    while (v7 != v8);
    v6 = v7 - 1;
  }
  std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a2, (HALS_Object *)v6);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  v10 = (NSObject **)HALS_ObjectMap::sNormalPriorityQueue;
  v11 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
  if ((v11 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
  v12 = *v10;
  v13 = (_DWORD *)operator new();
  *v13 = a1;
  dispatch_async_f(v12, v13, (dispatch_function_t)applesauce::dispatch::v1::async<remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &>(dispatch_queue_s *,remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &)::{lambda(void *)#1}::__invoke);
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  HALS_Object *i;
  HALS_ObjectMap *v5;

  for (i = *(HALS_Object **)(a1 + 8); i != a2; i = (HALS_Object *)((char *)i - 8))
  {
    v5 = (HALS_ObjectMap *)*((_QWORD *)i - 1);
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void applesauce::dispatch::v1::async<remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &>(dispatch_queue_s *,remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v1;
  HALS_ObjectMap *v2;
  HALS_Object *v3;
  HALS_Object *v4;

  v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  v2 = (HALS_ObjectMap *)v1;
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    HALS_ObjectMap::ReleaseObject(v2, v3);
    HALS_ObjectMap::ObjectIsDead(v2, v4);
  }
  JUMPOUT(0x1B5E50688);
}

void sub_1B5A13C54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A13C34);
}

void sub_1B5A13C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System21CopyClientByProcessIDEi_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(HALS_ObjectMap ***)(v3 + 1288);
  v5 = *(HALS_ObjectMap ***)(v3 + 1296);
  if (v4 == v5)
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while (1)
    {
      v6 = *v4;
      if (*((_DWORD *)*v4 + 58) == *(_DWORD *)(a1 + 48))
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
    HALS_ObjectMap::RetainObject(*v4, a2);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (HALS_Object *)*v2);
    operator delete(**a1);
  }
}

uint64_t *std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void *i;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    atomic_store(0, (unsigned __int8 *)(v1 + 32));
    ca::concurrent::details::service_thread::drain(*(ca::concurrent::details::service_thread **)v1);
    for (i = OSAtomicDequeue((OSQueueHead *)(v1 + 16), 0x150uLL);
          i;
          i = OSAtomicDequeue((OSQueueHead *)(v1 + 16), 0x150uLL))
    {
      (*(void (**)(void *))(*(_QWORD *)i + 8))(i);
    }
    ca::concurrent::messenger::~messenger((ca::concurrent::details::service_thread **)v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void load_mcp_server_settings(void)
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  uint64_t *v2;
  CFDictionaryRef v3;
  const void **p_shared_weak_owners;
  const char *v5;
  FILE *v6;
  FILE *v7;
  uint64_t v8;
  size_t v9;
  const __CFData *v10;
  CFPropertyListRef v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  std::__shared_weak_count *shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  CFTypeRef v24;
  _BOOL4 v25;
  CFTypeRef v26;
  _BOOL4 v27;
  CFTypeRef v28;
  _BOOL4 v29;
  CFTypeRef v30;
  _BOOL4 v31;
  CFTypeRef v32;
  _BOOL4 v33;
  CFTypeRef v34;
  _BOOL4 v35;
  CFTypeRef v36;
  _BOOL4 v37;
  AMCP::Logging_Settings *v38;
  void *v39;
  BOOL v40;
  void *v41;
  BOOL v42;
  CFTypeRef v43;
  CFTypeRef v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *exception;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  std::__shared_weak_count_vtbl *v64;
  void *__ptr;
  _BYTE *v66;
  CFTypeRef v67;
  CFTypeRef cf;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  const void *v73;
  const void *v74;

  v0 = (std::__shared_weak_count *)operator new(0x98uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E930;
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Preferences/Audio/com.apple.audio.ServerSettings.plist");
  v0[1].__vftable = 0;
  v0[1].__shared_owners_ = 0;
  v0[1].__shared_weak_owners_ = 850045863;
  v0[2].std::__shared_count = 0u;
  *(_OWORD *)&v0[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v0[3].__shared_owners_ = 0u;
  v0[4].__vftable = 0;
  v2 = &v0[4].__shared_owners_;
  if (SHIBYTE(v64) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v0[4].__shared_owners_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    v0[5].__vftable = v64;
  }
  LOWORD(v0[5].__shared_owners_) = 436;
  v3 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  p_shared_weak_owners = (const void **)&v0[5].__shared_weak_owners_;
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v0[5].__shared_weak_owners_, v3);
  LOBYTE(v0[6].__vftable) = 0;
  HIDWORD(v0[6].__vftable) = 2;
  v5 = (const char *)&v0[4].__shared_owners_;
  if (SHIBYTE(v0[5].__vftable) < 0)
    v5 = (const char *)*v2;
  v6 = fopen(v5, "r");
  v7 = v6;
  if (v6)
  {
    if ((fseek(v6, 0, 2) & 0x80000000) == 0)
    {
      v8 = MEMORY[0x1B5E50B08](v7);
      if (v8 >= 1)
      {
        v9 = v8;
        if ((fseek(v7, 0, 0) & 0x80000000) == 0)
        {
          std::vector<unsigned char>::vector(&__ptr, v9);
          if (fread(__ptr, 1uLL, v9, v7) == v9)
          {
            v10 = CFDataCreate(0, (const UInt8 *)__ptr, v66 - (_BYTE *)__ptr);
            if (!v10)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v11 = CFPropertyListCreateWithData(0, v10, 0, 0, 0);
            v12 = v11;
            if (v11)
            {
              v13 = CFGetTypeID(v11);
              if (v13 == CFDictionaryGetTypeID())
              {
                CFRetain(v12);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v74, v12);
                v14 = *p_shared_weak_owners;
                *p_shared_weak_owners = v74;
                v74 = v14;
                if (v14)
                  CFRelease(v14);
              }
              CFRelease(v12);
            }
            CFRelease(v10);
          }
          if (__ptr)
          {
            v66 = __ptr;
            operator delete(__ptr);
          }
        }
      }
    }
    fclose(v7);
  }
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  v61 = (uint64_t)&v0[1];
  v62 = v0;
  shared_owners = (std::__shared_weak_count *)v0[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_36;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v0->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v0[1].__vftable = (std::__shared_weak_count_vtbl *)&v0[1];
    v0[1].__shared_owners_ = (uint64_t)v0;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = (unint64_t *)&v0->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v0[1].__vftable = (std::__shared_weak_count_vtbl *)&v0[1];
    v0[1].__shared_owners_ = (uint64_t)v0;
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
LABEL_36:
  AMCP::Graph::File_Capture_Settings::instance((AMCP::Graph::File_Capture_Settings *)shared_owners);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__ptr, "DataTapsEnabled");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, "mcp_enable_all_file_captures");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v74, "mcp_enable_post_mix_captures");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v73, "mcp_enable_graph_wire_captures");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v72, "mcp_enable_input_device_captures");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v71, "mcp_enable_converter_captures");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v70, "mcp_enable_manifest_dot_file");
  v23 = (const void *)*MEMORY[0x1E0C9AE48];
  cf = (CFTypeRef)*MEMORY[0x1E0C9AE48];
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, (const void **)&__ptr, &cf);
  v24 = v69;
  if (!v69)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v24);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, (const void **)__p, &cf);
  v26 = v69;
  if (!v69)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v26);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v73, &cf);
  v28 = v69;
  if (!v69)
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v29 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v28);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v72, &cf);
  v30 = v69;
  if (!v69)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v31 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v30);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v74, &cf);
  v32 = v69;
  if (!v69)
  {
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v33 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v32);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v71, &cf);
  v34 = v69;
  if (!v69)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v35 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v34);
  if (cf)
    CFRelease(cf);
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v70, &cf);
  v36 = v69;
  if (!v69)
  {
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v37 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v36);
  if (cf)
    CFRelease(cf);
  if (v27 || v29)
    BYTE1(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  if (v27 || v31 || v25)
    BYTE2(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  if (v27 || v33 || v25)
    LOBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  if (v27 || v35)
    HIBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  if (v37)
    byte_1EF12F85C = 1;
  if (v70)
    CFRelease(v70);
  if (v71)
    CFRelease(v71);
  if (v72)
    CFRelease(v72);
  if (v73)
    CFRelease(v73);
  if (v74)
    CFRelease(v74);
  if (__p[0])
    CFRelease(__p[0]);
  v38 = (AMCP::Logging_Settings *)__ptr;
  if (__ptr)
    CFRelease(__ptr);
  AMCP::Logging_Settings::instance(v38);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v74, "PowerManagementLogging");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v73, "power_logging");
  __p[0] = (void *)v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v61, &v73, __p);
  v39 = __ptr;
  if (!__ptr)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v40 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  CFRelease(v39);
  if (__p[0])
    CFRelease(__p[0]);
  __p[0] = (void *)v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v61, &v74, __p);
  v41 = __ptr;
  if (!__ptr)
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v42 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  CFRelease(v41);
  if (__p[0])
    CFRelease(__p[0]);
  BYTE1(AMCP::Logging_Settings::instance(void)::s_instance) = v42 || v40;
  LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = 1;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v72, "DefaultDeviceLogging");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v71, "default_device_logging");
  AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v61, &v72);
  AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(__p, v61, &v71);
  if ((_BYTE)v66)
  {
    if (!__ptr)
    {
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Could not construct");
      __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  }
  if (LOBYTE(__p[1]))
  {
    if (!__p[0])
    {
      v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v59, "Could not construct");
      __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__p[0]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v70, "start_stop_logging");
  cf = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v69, v61, &v70, &cf);
  v43 = v69;
  if (!v69)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  BYTE2(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v69);
  CFRelease(v43);
  if (cf)
    CFRelease(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v69, "start_stop_verbose_logging");
  v67 = v23;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&cf, v61, &v69, &v67);
  v44 = cf;
  if (!cf)
  {
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)cf);
  CFRelease(v44);
  if (v67)
    CFRelease(v67);
  if (v69)
    CFRelease(v69);
  if (v70)
    CFRelease(v70);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__ptr);
  if (v71)
    CFRelease(v71);
  if (v72)
    CFRelease(v72);
  if (v73)
    CFRelease(v73);
  if (v74)
    CFRelease(v74);
  if (v62)
  {
    v45 = (unint64_t *)&v62->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_1B5A14A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  const void *v40;
  uint64_t v41;
  std::mutex *v42;
  void **v43;
  FILE *v44;
  CFTypeRef *v45;
  const void *v46;
  const void *v47;
  std::__shared_weak_count *v49;
  void *v50;

  v47 = v40;
  CFRelease(v47);
  CFRelease(v46);
  if (__p)
    operator delete(__p);
  fclose(v44);
  if (*v45)
    CFRelease(*v45);
  if (*(char *)(v41 + 127) < 0)
    operator delete(*v43);
  std::mutex::~mutex(v42);
  v49 = *(std::__shared_weak_count **)(v41 + 32);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  if (a16 < 0)
    operator delete(a11);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v41);
  operator delete(v50);
  _Unwind_Resume(a1);
}

void sub_1B5A14D74()
{
  JUMPOUT(0x1B5A14D64);
}

void std::allocate_shared[abi:ne180100]<DSP_Host,std::allocator<DSP_Host>,decltype(nullptr),DSP_Host::DefaultConstruction,void>(_QWORD *a1, int a2)
{
  _QWORD *v4;

  v4 = operator new(0x98uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E697E890;
  DSP_Host::DSP_Host((uint64_t)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)a1, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1B5A14DE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DSP_Host>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<DSP_Host>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;

  v2 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  v12 = 0uLL;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 136, &v12);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::mutex::unlock(v2);
  v12 = 0uLL;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 56, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 136);
  std::mutex::~mutex(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::__on_zero_shared(uint64_t a1)
{
  CFDataRef Data;
  const char *v3;
  FILE *v4;
  FILE *v5;
  int v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  const void *v9;
  std::__shared_weak_count *v10;
  std::runtime_error *exception;
  CFDataRef theData;

  if (*(_DWORD *)(a1 + 148) != 2)
  {
    std::mutex::lock((std::mutex *)(a1 + 40));
    Data = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 136), kCFPropertyListXMLFormat_v1_0, 0, 0);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, Data);
    if (theData)
    {
      v3 = (const char *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0)
        v3 = *(const char **)v3;
      v4 = fopen(v3, "w+");
      v5 = v4;
      if (v4)
      {
        if (*(_WORD *)(a1 + 128))
        {
          v6 = fileno(v4);
          fchmod(v6, *(_WORD *)(a1 + 128));
        }
        if (!theData || (BytePtr = CFDataGetBytePtr(theData), !theData))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        Length = CFDataGetLength(theData);
        fwrite(BytePtr, Length, 1uLL, v5);
        fflush(v5);
        fclose(v5);
      }
      if (theData)
        CFRelease(theData);
    }
    std::mutex::unlock((std::mutex *)(a1 + 40));
  }
  v9 = *(const void **)(a1 + 136);
  if (v9)
    CFRelease(v9);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1B5A1515C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100I13HALB_TailspinNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E697E840;
  v3 = operator new();
  result = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v3, "com.apple.audio.HALS_IOContext-tailspinDumper");
  v2[3] = result;
  v2[4] = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B5A15200(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HALB_Tailspin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALB_Tailspin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

AMCP::Utility::Dispatch_Queue *std::__shared_ptr_emplace<HALB_Tailspin>::__on_zero_shared(uint64_t a1)
{
  AMCP::Utility::Dispatch_Queue **v1;
  unsigned __int8 v2;

  v1 = (AMCP::Utility::Dispatch_Queue **)(a1 + 24);
  do
  {
    if (!*v1)
      break;
    AMCP::Utility::Dispatch_Queue::flush_all_work(*v1);
    if (!*v1)
      break;
    v2 = atomic_load((unsigned __int8 *)*v1 + 33);
  }
  while ((v2 & 1) != 0);
  return std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v1, 0);
}

void CreateAndInsert<HALS_MetaManager>(HALS_System *a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_Object *v4;
  AMCP::Log::Scope_Registry *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)v2, a1, CFSTR("com.apple.audio.V5"), v3, v4);
  *(_QWORD *)v2 = off_1E6975450;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v2 + 328));
  v5 = (AMCP::Log::Scope_Registry *)AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v2 + 424, "com.apple.audio.manager.Meta.event");
  *(_QWORD *)(v2 + 760) = 0;
  *(_OWORD *)(v2 + 744) = 0u;
  if (HALS_MetaManager::sInstance)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v14;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v14)
    {
      v8 = (unint64_t *)(*(_QWORD *)v14 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        v10 = v6;
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v14 = 2080;
      *(_QWORD *)&v14[2] = "HALS_MetaManager.cpp";
      v15 = 1024;
      v16 = 43;
      v17 = 2080;
      v18 = "sInstance == NULL";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s HALS_MetaManager::HALS_MetaManager: there can be only one", buf, 0x22u);
    }
    abort();
  }
  HALS_MetaManager::sInstance = v2;
  HALS_System::DeviceManagerCreated(a1, (HALS_DeviceManager *)v2);
}

void HALS_System::DeviceManagerCreated(HALS_System *this, HALS_DeviceManager *a2)
{
  HALB_Mutex *v3;
  AMCP::Log::Scope_Registry *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *exception;
  __int128 v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  std::runtime_error v14;
  std::runtime_error v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke;
  v22[3] = &unk_1E697DD80;
  v22[5] = this;
  v22[6] = a2;
  v22[4] = &v23;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v22);
  if (!*((_BYTE *)v24 + 24))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2080;
      v29 = "HALS_System.cpp";
      v30 = 1024;
      v31 = 2247;
      v32 = 2080;
      *(_QWORD *)v33 = "inserted == false";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to insert device manager", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v14, "Failed to insert device manager");
    std::runtime_error::runtime_error(&v15, &v14);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v15.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v16 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(_QWORD *)&v33[6] = "void HALS_System::DeviceManagerCreated(HALS_DeviceManager *)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_System.cpp";
    v35 = 2247;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    v12 = v9;
    v13 = v10;
    v9 = 0uLL;
    v10 = 0;
    v11 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v11);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  (**(void (***)(HALS_DeviceManager *))a2)(a2);
  _Block_object_dispose(&v23, 8);
}

void sub_1B5A157C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1), void *a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t (**a17)(), __int128 a18, uint64_t a19, std::runtime_error a20,std::runtime_error a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  HALB_Mutex *v35;
  AMCP::Log::Scope_Registry *v36;
  NSObject *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *exception;

  if (a2)
  {
    __cxa_begin_catch(a1);
    a10 = v34;
    a11 = ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke_86;
    a12 = &__block_descriptor_tmp_87_5586;
    v35 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 56))(v31);
    HALB_CommandGate::ExecuteCommand(v35, (uint64_t)&a9);
    AMCP::Log::Scope_Registry::get(v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v33 - 144), "com.apple.coreaudio", "AMCP");
    v37 = **(NSObject ***)(v33 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33 - 144);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)(v33 - 144) = 67109634;
      *(_DWORD *)(v33 - 140) = v39;
      *(_WORD *)(v33 - 136) = 2080;
      *(_QWORD *)(v32 + 10) = "HALS_System.cpp";
      *(_WORD *)(v33 - 126) = 1024;
      *(_DWORD *)(v33 - 124) = 2265;
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to activate device manager", (uint8_t *)(v33 - 144), 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a31);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&a20, "Failed to activate device manager");
    std::runtime_error::runtime_error(&a21, &a20);
    a23 = 0;
    a24 = 0;
    a25 = 0;
    a26 = -1;
    a21.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    a22 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(v33 - 144, (uint64_t)&a21);
    *(_QWORD *)(v33 - 112) = "void HALS_System::DeviceManagerCreated(HALS_DeviceManager *)";
    *(_QWORD *)(v33 - 104) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_System.cpp";
    *(_DWORD *)(v33 - 96) = 2265;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&a15);
    a18 = a15;
    a19 = a16;
    a15 = 0uLL;
    a16 = 0;
    a17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>(v33 - 144, (uint64_t)&a17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, v33 - 144);
  }
  JUMPOUT(0x1B5A15B44);
}

void sub_1B5A15984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_end_catch();
  JUMPOUT(0x1B5A15B38);
}

void sub_1B5A15A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  *(_QWORD *)(v34 - 128) = &unk_1E69A2000;
  v35 = *(_QWORD *)(v34 - 120);
  if (v35 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35))
    *(_QWORD *)(v34 - 120) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v34 - 144));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (v33)
    __cxa_free_exception(v32);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a32);
  JUMPOUT(0x1B5A15B38);
}

void sub_1B5A15B0C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5A15B44);
}

void sub_1B5A15B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke(uint64_t a1, HALS_Object *a2)
{
  _QWORD *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  unint64_t v7;
  HALS_ObjectMap **v8;
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  const __CFString *v11;
  const __CFString *v12;
  CFComparisonResult v13;
  char *v14;
  unint64_t v15;
  char *v16;
  HALS_ObjectMap **v17;
  HALS_ObjectMap **v18;
  HALS_ObjectMap *v19;
  HALS_ObjectMap **v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  HALS_ObjectMap **v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  HALS_ObjectMap **v33;
  HALS_ObjectMap **v34;
  HALS_ObjectMap *v35;
  char *v36;
  int64_t v37;
  void *v38;
  const __CFString *v39;
  char v40;
  const __CFString *v41;
  char v42;

  v3 = *(_QWORD **)(a1 + 40);
  v4 = (HALS_ObjectMap **)v3[154];
  v5 = (HALS_ObjectMap **)v3[155];
  v6 = (HALS_ObjectMap **)(a1 + 48);
  if (v5 == v4)
  {
    v14 = (char *)v3[154];
  }
  else
  {
    v7 = v5 - v4;
    do
    {
      v8 = &v4[v7 >> 1];
      v9 = *v8;
      v10 = *v6;
      v11 = (const __CFString *)*((_QWORD *)*v8 + 6);
      if (v11)
      {
        CFRetain(v11);
        v11 = (const __CFString *)*((_QWORD *)v9 + 6);
      }
      v41 = v11;
      v42 = 1;
      if (*((_QWORD *)v10 + 6))
      {
        CFRetain(*((CFTypeRef *)v10 + 6));
        v12 = (const __CFString *)*((_QWORD *)v10 + 6);
        v11 = v41;
      }
      else
      {
        v12 = 0;
      }
      v39 = v12;
      v40 = 1;
      v13 = CFStringCompare(v11, v12, 0);
      CACFString::~CACFString((CACFString *)&v39);
      CACFString::~CACFString((CACFString *)&v41);
      if (v13 == kCFCompareLessThan)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v13 == kCFCompareLessThan)
        v4 = v8 + 1;
    }
    while (v7);
    v5 = v4;
    v14 = (char *)v3[154];
    v4 = (HALS_ObjectMap **)v3[155];
  }
  v15 = v3[156];
  if ((unint64_t)v4 >= v15)
  {
    v21 = (((char *)v4 - v14) >> 3) + 1;
    if (v21 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v22 = v15 - (_QWORD)v14;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v23);
    }
    else
    {
      v24 = 0;
      a2 = 0;
    }
    v25 = (char *)v5 - v14;
    v26 = ((char *)v5 - v14) >> 3;
    v27 = (HALS_ObjectMap **)&v24[8 * v26];
    v28 = &v24[8 * (_QWORD)a2];
    if ((HALS_Object *)v26 == a2)
    {
      if (v25 < 1)
      {
        if (v5 == (HALS_ObjectMap **)v14)
          v30 = 1;
        else
          v30 = v25 >> 2;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v30);
        v27 = (HALS_ObjectMap **)&v31[8 * (v30 >> 2)];
        v28 = &v31[8 * (_QWORD)a2];
        if (v24)
          operator delete(v24);
      }
      else
      {
        if (v26 >= -1)
          v29 = v26 + 1;
        else
          v29 = v26 + 2;
        v27 -= v29 >> 1;
      }
    }
    *v27 = *v6;
    v32 = (char *)(v27 + 1);
    v33 = (HALS_ObjectMap **)v3[154];
    if (v33 != v5)
    {
      v34 = v5;
      do
      {
        v35 = *--v34;
        *--v27 = v35;
      }
      while (v34 != v33);
    }
    v36 = (char *)v3[155];
    v37 = v36 - (char *)v5;
    if (v36 != (char *)v5)
      memmove(v32, v5, v36 - (char *)v5);
    v38 = (void *)v3[154];
    v3[154] = v27;
    v3[155] = &v32[v37];
    v3[156] = v28;
    if (v38)
      operator delete(v38);
  }
  else if (v5 == v4)
  {
    *v4 = *v6;
    v3[155] = v4 + 1;
  }
  else
  {
    v16 = (char *)(v5 + 1);
    v17 = v4 - 1;
    v18 = v4;
    if ((unint64_t)v4 >= 8)
    {
      v18 = v4;
      do
      {
        v19 = *v17++;
        *v18++ = v19;
      }
      while (v17 < v4);
    }
    v3[155] = v18;
    if (v4 != (HALS_ObjectMap **)v16)
      memmove(&v4[-(((char *)v4 - v16) >> 3)], v5, (char *)v4 - v16);
    v20 = v6;
    if (v5 <= v6)
      v20 = &v6[v3[155] > (unint64_t)v6];
    *v5 = *v20;
  }
  HALS_ObjectMap::RetainObject(*v6, a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

void sub_1B5A15E14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A15DECLL);
}

void ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke_86(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  int64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(char **)(v2 + 1232);
  v4 = *(char **)(v2 + 1240);
  if (v3 == v4)
  {
    v4 = *(char **)(v2 + 1232);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    while (*(_QWORD *)v3 != v5)
    {
      v3 += 8;
      if (v3 == v4)
      {
        v3 = *(char **)(v2 + 1240);
        goto LABEL_13;
      }
    }
    if (v3 != v4)
    {
      v6 = v3 + 8;
      if (v3 + 8 != v4)
      {
        do
        {
          if (*(_QWORD *)v6 != v5)
          {
            *(_QWORD *)v3 = *(_QWORD *)v6;
            v3 += 8;
          }
          v6 += 8;
        }
        while (v6 != v4);
        v4 = *(char **)(v2 + 1240);
      }
    }
  }
LABEL_13:
  v7 = v3 + 8;
  v8 = v4 - (v3 + 8);
  if (v4 != v3 + 8)
    memmove(v3, v7, v4 - (v3 + 8));
  *(_QWORD *)(v2 + 1240) = &v3[v8];
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), (HALS_Object *)v7);
}

void sub_1B5A15F24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::HALS_System(uint64_t a1, int a2, HALS_Object *a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  char *v9;
  HALS_PlatformBehaviors *v10;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v12;
  int v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  uint64_t v25;
  std::__shared_weak_count *shared_owners;
  unint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _opaque_pthread_t *v46;
  _opaque_pthread_t *v47;
  thread_inspect_t v48;
  thread_inspect_t v49;
  int data;
  thread_inspect_t v51;
  thread_inspect_t v52;
  _BOOL8 v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  HALS_PlatformBehaviors *v61;
  uint64_t v62;
  std::string::size_type v63;
  unsigned __int8 v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  CFTypeRef *v68;
  CFTypeRef v69;
  std::locale *v70;
  uint64_t v71;
  char *v72;
  std::locale *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::string::size_type size;
  std::string::size_type v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int64_t v83;
  std::sub_match<const char *> *v84;
  uint64_t v85;
  int v86;
  _BOOL4 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  char v92;
  CFTypeRef *v93;
  uint64_t *v94;
  HALS_PlatformBehaviors *v95;
  uint64_t *v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  std::__shared_weak_count *v105;
  _QWORD *v106;
  __int128 v107;
  unint64_t v108;
  char v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string::pointer v115;
  uint64_t v116;
  std::string *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const void *v128;
  CFPropertyListRef Setting;
  CFTypeID v130;
  BOOL v131;
  CFTypeID v132;
  char v133;
  _QWORD *v134;
  _BYTE *v135;
  _BYTE *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  HALS_Object *v144;
  std::string::size_type v145;
  HALS_ObjectMap *v146;
  std::string::size_type v147;
  __int128 v148;
  __int128 v149;
  HALS_Object *v150;
  uint64_t v151;
  uint64_t v152;
  HALS_Object *v153;
  AMCP::Feature_Flags *v154;
  const BOOL *v155;
  os_unfair_lock_s *v156;
  os_unfair_lock_s *v157;
  char *v158;
  _QWORD *v159;
  _QWORD *v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  NSObject *v165;
  NSObject **v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v175;
  NSObject *v176;
  unint64_t *v177;
  unint64_t v178;
  _opaque_pthread_t *v179;
  mach_port_t v180;
  std::runtime_error *exception;
  os_unfair_lock_s **v182;
  HALS_SettingsManager **v183;
  _OWORD *v184;
  __int128 *v185;
  HALS_SettingsManager *v186;
  CFTypeRef *v187;
  uint64_t v188;
  CFTypeRef *v189;
  CFTypeRef v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  CFTypeRef cf;
  int v195;
  CFTypeRef *v196;
  CFTypeRef *v197;
  void *__p[2];
  unsigned __int8 v199;
  std::string thread_info_outCnt;
  __int128 v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::string v205;
  dispatch_object_t object[40];
  _QWORD v207[3];
  _QWORD *v208;
  std::string __s[2];
  _QWORD v210[2];
  char v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE v214[16];
  uint64_t v215;
  std::string block[2];
  CFTypeRef *v217;
  uint64_t v218;
  std::regex_traits<char> v219;
  char v220;
  char v221;
  uint64_t v222;
  std::regex_traits<char> v223[2];
  std::regex_traits<char> v224[2];
  std::regex_traits<char> v225[3];
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  g_static_start_options = a2;
  *(_QWORD *)a1 = off_1E69976A8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B5D68D70;
  *(_QWORD *)(a1 + 32) = &stru_1E69A2360;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  HALS_ObjectMap::MapObject((HALS_ObjectMap *)1, a1, a3);
  *(_QWORD *)a1 = off_1E697D838;
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v188 = a1;
  *(_QWORD *)(a1 + 136) = 0;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(a1 + 144));
  v4 = operator new(0x158uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E697E510;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v4 + 3), "com.apple.audio.system-event");
  *(_QWORD *)(v188 + 240) = v4 + 3;
  *(_QWORD *)(v188 + 248) = v4;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>(v188 + 240, v4 + 4, (uint64_t)(v4 + 3));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v188 + 256, "HALS_System IO Context Running Queue");
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v188 + 576, "Power Manager Queue");
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)(v188 + 896), "HALS_System Concurrent Queue");
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__s, "HAL Async Logger");
  if (SHIBYTE(__s[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(block, __s[0].__r_.__value_.__l.__data_, __s[0].__r_.__value_.__l.__size_);
  else
    block[0] = __s[0];
  block[1].__r_.__value_.__s.__data_[0] = 1;
  block[1].__r_.__value_.__s.__data_[8] = 0;
  BYTE4(v217) = 0;
  ca::concurrent::messenger::messenger((uint64_t *)v5, (__int128 *)block);
  if (SHIBYTE(block[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(block[0].__r_.__value_.__l.__data_);
  v185 = (__int128 *)(v188 + 1288);
  if (SHIBYTE(__s[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s[0].__r_.__value_.__l.__data_);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  v6 = -32;
  do
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E6996340;
    v7[1] = 0;
    *((_OWORD *)v7 + 17) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_DWORD *)v7 + 80) = 0;
    v7[41] = v5;
    v7[42] = 0;
    *((_OWORD *)v7 + 1) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 12) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((_OWORD *)v7 + 14) = 0u;
    *((_OWORD *)v7 + 15) = 0u;
    *((_OWORD *)v7 + 16) = 0u;
    *((_OWORD *)v7 + 18) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    *((_OWORD *)v7 + 19) = 0u;
    OSAtomicEnqueue((OSQueueHead *)(v5 + 16), v7, 0x150uLL);
  }
  while (!__CFADD__(v6++, 1));
  atomic_store(1u, (unsigned __int8 *)(v5 + 32));
  *(_QWORD *)(v188 + 1216) = v5;
  *(_BYTE *)(v188 + 1224) = 0;
  *(_OWORD *)(v188 + 1232) = 0u;
  *(_OWORD *)(v188 + 1248) = 0u;
  v9 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1E697E560;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v9 + 24));
  if (g_static_start_options == 1)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v10);
    v12 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 56))(platform_behaviors);
    v13 = g_static_start_options;
    v9[120] = (_DWORD)v12 == 1;
    if (v13 == 1)
    {
      v14 = HALS_PlatformBehaviors::get_platform_behaviors(v12);
      v15 = (*(unsigned int (**)(uint64_t *))(*v14 + 56))(v14) == 1;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0;
    v9[120] = 0;
  }
  v16 = 0;
  v9[121] = v15;
  *((_WORD *)v9 + 61) = 256;
  v9[124] = 1;
  *((_DWORD *)v9 + 32) = 0;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *((_QWORD *)v9 + 25) = 0;
  do
  {
    v17 = &v9[v16];
    *((_QWORD *)v17 + 17) = &off_1E69A0F60;
    *((_QWORD *)v17 + 18) = 0;
    *((_DWORD *)v17 + 38) = 0;
    v16 += 24;
  }
  while (v16 != 72);
  v18 = 0;
  *((_QWORD *)v9 + 26) = &off_1E69A0F60;
  *((_QWORD *)v9 + 27) = 0;
  *((_DWORD *)v9 + 56) = 0;
  *((_DWORD *)v9 + 58) = 0;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  *((_OWORD *)v9 + 17) = 0u;
  *((_OWORD *)v9 + 18) = 0u;
  *((_QWORD *)v9 + 38) = 0;
  do
  {
    v19 = &v9[v18];
    *((_QWORD *)v19 + 30) = &off_1E69A0F60;
    *((_QWORD *)v19 + 31) = 0;
    *((_DWORD *)v19 + 64) = 0;
    v18 += 24;
  }
  while (v18 != 72);
  v20 = 0;
  *((_QWORD *)v9 + 39) = &off_1E69A0F60;
  *((_QWORD *)v9 + 40) = 0;
  *((_DWORD *)v9 + 82) = 0;
  *((_DWORD *)v9 + 84) = 0;
  *((_QWORD *)v9 + 51) = 0;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  do
  {
    v21 = &v9[v20];
    *((_QWORD *)v21 + 43) = &off_1E69A0F60;
    *((_QWORD *)v21 + 44) = 0;
    *((_DWORD *)v21 + 90) = 0;
    v20 += 24;
  }
  while (v20 != 72);
  *((_QWORD *)v9 + 52) = &off_1E69A0F60;
  *((_QWORD *)v9 + 53) = 0;
  *((_DWORD *)v9 + 108) = 0;
  *((_DWORD *)v9 + 110) = 0;
  *((_QWORD *)v9 + 56) = &off_1E69A0F60;
  *((_QWORD *)v9 + 57) = 0;
  *((_DWORD *)v9 + 116) = 0;
  *(_QWORD *)(v188 + 1264) = v9 + 24;
  *(_QWORD *)(v188 + 1272) = v9;
  *(_BYTE *)(v188 + 1280) = 0;
  *v185 = 0u;
  *(_OWORD *)(v188 + 1304) = 0u;
  *(_OWORD *)(v188 + 1320) = 0u;
  v22 = (char *)operator new(0x68uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_1E699CF08;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *((_DWORD *)v22 + 14) = 1065353216;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  *((_DWORD *)v22 + 24) = 1065353216;
  *(_QWORD *)(v188 + 1336) = v22 + 24;
  *(_QWORD *)(v188 + 1344) = v22;
  *(_BYTE *)(v188 + 1384) = 0;
  *(_OWORD *)(v188 + 1352) = 0u;
  *(_OWORD *)(v188 + 1368) = 0u;
  *(_DWORD *)(v188 + 1388) = 4;
  v23 = (std::__shared_weak_count *)operator new(0x120uLL);
  *(_OWORD *)&v23->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E5B0;
  v23[1].std::__shared_count = 0u;
  v23[2].std::__shared_count = 0u;
  LODWORD(v23[1].__shared_weak_owners_) = 0;
  *(_OWORD *)&v23[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v23[3].__shared_owners_ = 0u;
  LODWORD(v23[4].__vftable) = 1065353216;
  *(_OWORD *)&v23[4].__shared_owners_ = 0u;
  LODWORD(v23[5].__shared_weak_owners_) = 1065353216;
  v23[5].std::__shared_count = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP4Core6BrokerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v23[6].__vftable);
  v23[9].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v23[6].__shared_weak_owners_ = 0u;
  v23[8].std::__shared_count = 0u;
  *(_OWORD *)&v23[7].__shared_owners_ = 0u;
  LODWORD(v23[8].__shared_weak_owners_) = 1065353216;
  *(_OWORD *)&v23[9].__shared_owners_ = 0u;
  v23[10].std::__shared_count = 0u;
  *(_OWORD *)&v23[10].__shared_weak_owners_ = 0u;
  v23[11].__shared_owners_ = 0;
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)block, "HALS_IOContext_Manager_Impl Concurrent Queue");
  v25 = operator new();
  v23[11].__shared_weak_owners_ = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v25, block[0].__r_.__value_.__l.__data_);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)block);
  *(_QWORD *)(v188 + 1392) = v23 + 1;
  *(_QWORD *)(v188 + 1400) = v23;
  shared_owners = (std::__shared_weak_count *)v23[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_35;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)&v23[1];
    v23[1].__shared_owners_ = (uint64_t)v23;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v31 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)&v23[1];
    v23[1].__shared_owners_ = (uint64_t)v23;
  }
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_35:
  v182 = (os_unfair_lock_s **)(v188 + 1392);
  v34 = (std::__shared_weak_count *)operator new(0x50uLL);
  *(_OWORD *)&v34->__shared_owners_ = 0u;
  v35 = (unint64_t *)&v34->__shared_owners_;
  v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E600;
  v34[1].std::__shared_count = 0u;
  v36 = operator new();
  v34[1].__shared_weak_owners_ = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v36, "com.apple.audio.HALSettingsManager");
  v34[2].std::__shared_count = 0u;
  *(_OWORD *)&v34[2].__shared_weak_owners_ = 0u;
  *(_QWORD *)(v188 + 1408) = v34 + 1;
  *(_QWORD *)(v188 + 1416) = v34;
  v37 = (std::__shared_weak_count *)v34[1].__shared_owners_;
  if (!v37)
  {
    do
      v41 = __ldxr(v35);
    while (__stxr(v41 + 1, v35));
    v42 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v34[1].__vftable = (std::__shared_weak_count_vtbl *)&v34[1];
    v34[1].__shared_owners_ = (uint64_t)v34;
    do
LABEL_45:
      v44 = __ldaxr(v35);
    while (__stlxr(v44 - 1, v35));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    goto LABEL_48;
  }
  if (v37->__shared_owners_ == -1)
  {
    do
      v38 = __ldxr(v35);
    while (__stxr(v38 + 1, v35));
    v39 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v34[1].__vftable = (std::__shared_weak_count_vtbl *)&v34[1];
    v34[1].__shared_owners_ = (uint64_t)v34;
    std::__shared_weak_count::__release_weak(v37);
    goto LABEL_45;
  }
LABEL_48:
  *(_BYTE *)(v188 + 1424) = 1;
  *(_QWORD *)(v188 + 1432) = 0;
  v183 = (HALS_SettingsManager **)(v188 + 1408);
  v184 = (_OWORD *)(v188 + 1432);
  *(_QWORD *)(v188 + 1440) = 0;
  v45 = (char *)operator new(0x158uLL);
  *(_OWORD *)(v45 + 8) = 0u;
  *(_QWORD *)v45 = &off_1E697E510;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v45 + 24), "com.apple.audio.HALS_IOContext-assertion");
  *(_QWORD *)(v188 + 1448) = v45 + 24;
  *(_QWORD *)(v188 + 1456) = v45;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>(v188 + 1448, (_QWORD *)v45 + 4, (uint64_t)(v45 + 24));
  *(_WORD *)(v188 + 1464) = 0;
  *(_DWORD *)(v188 + 1468) = 0;
  *(_BYTE *)(v188 + 1472) = 0;
  *(_OWORD *)(v188 + 1480) = 0u;
  *(_BYTE *)(v188 + 1496) = 0;
  *(_QWORD *)(v188 + 1504) = 0;
  *(_OWORD *)(v188 + 1512) = 0u;
  HALB_Guard::HALB_Guard((HALB_Guard *)(v188 + 1528));
  *(_QWORD *)(v188 + 1672) = &off_1E698A908;
  *(_QWORD *)(v188 + 1680) = 0;
  v46 = pthread_self();
  v47 = v46;
  if (!v46)
    goto LABEL_53;
  LODWORD(thread_info_outCnt.__r_.__value_.__l.__data_) = 10;
  v48 = pthread_mach_thread_np(v46);
  thread_info(v48, 3u, (thread_info_t)__s, (mach_msg_type_number_t *)&thread_info_outCnt);
  switch(HIDWORD(__s[0].__r_.__value_.__r.__words[2]))
  {
    case 4:
      LODWORD(thread_info_outCnt.__r_.__value_.__l.__data_) = 4;
      v52 = pthread_mach_thread_np(v47);
      thread_info(v52, 0xCu, (thread_info_t)&block[1].__r_.__value_.__r.__words[2], (mach_msg_type_number_t *)&thread_info_outCnt);
      data = HIDWORD(block[1].__r_.__value_.__r.__words[2]);
      break;
    case 2:
      LODWORD(thread_info_outCnt.__r_.__value_.__l.__data_) = 5;
      v51 = pthread_mach_thread_np(v47);
      thread_info(v51, 0xBu, (thread_info_t)&block[0].__r_.__value_.__r.__words[2] + 1, (mach_msg_type_number_t *)&thread_info_outCnt);
      data = (int)block[1].__r_.__value_.__l.__data_;
      break;
    case 1:
      LODWORD(thread_info_outCnt.__r_.__value_.__l.__data_) = 5;
      v49 = pthread_mach_thread_np(v47);
      thread_info(v49, 0xAu, (thread_info_t)block, (mach_msg_type_number_t *)&thread_info_outCnt);
      data = HIDWORD(block[0].__r_.__value_.__r.__words[0]);
      break;
    default:
LABEL_53:
      data = 0;
      break;
  }
  *(_DWORD *)(v188 + 1792) = 65537;
  strcpy((char *)(v188 + 1712), "com.apple.audio.hal.notification");
  *(_DWORD *)(v188 + 1688) = data;
  *(_QWORD *)(v188 + 1696) = HALS_System::RunLoopThread;
  *(_QWORD *)(v188 + 1704) = 0;
  *(_DWORD *)(v188 + 1776) = 51;
  *(_DWORD *)(v188 + 1784) = 0;
  *(_DWORD *)(v188 + 1780) = 0;
  *(_DWORD *)(v188 + 1788) = 0;
  *(_BYTE *)(v188 + 1800) = 0;
  *(_QWORD *)(v188 + 1808) = 0;
  *(_QWORD *)(v188 + 1824) = 0;
  *(_QWORD *)(v188 + 1816) = 0;
  v192 = 0;
  v193 = 0;
  HALS_System::GetInstance(block, 0, &v192);
  v54 = *(_OWORD *)&block[0].__r_.__value_.__l.__data_;
  if (block[0].__r_.__value_.__l.__size_)
  {
    v55 = (unint64_t *)(block[0].__r_.__value_.__l.__size_ + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
    }
  }
  v57 = v193;
  if (v193)
  {
    v58 = (unint64_t *)&v193->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if ((_QWORD)v54)
  {
    v53 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v53)
    {
      LODWORD(block[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)block[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_System.cpp";
      WORD2(block[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&block[0].__r_.__value_.__r.__words[1] + 6) = 510;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::HALS_System: there can be only one", (uint8_t *)block, 0x12u);
    }
  }
  v186 = *v183;
  v60 = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)v53);
  v61 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*v60 + 48))(v60);
  if ((_DWORD)v61 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(block, "/Library/Preferences/Audio/com.apple.audio.SystemSettings.plist");
    std::string::basic_string[abi:ne180100]<0>(__s, "/Library/Preferences/Audio/com.apple.audio.ServerSettings.plist");
    std::string::basic_string[abi:ne180100]<0>(&thread_info_outCnt, "/Library/Preferences/Audio/Data/com.apple.audio.ServerSettings.plist");
    HALS_SettingsManager::_InitSettings(v186, (uint64_t)block, (const char *)__s, (const char *)&thread_info_outCnt);
    if (SHIBYTE(thread_info_outCnt.__r_.__value_.__r.__words[2]) < 0)
      operator delete(thread_info_outCnt.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(block[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(block[0].__r_.__value_.__l.__data_);
    __s[0].__r_.__value_.__r.__words[0] = 0;
    __s[0].__r_.__value_.__l.__size_ = (std::string::size_type)__s;
    __s[0].__r_.__value_.__r.__words[2] = 0x2000000000;
    LODWORD(__s[1].__r_.__value_.__l.__data_) = 0;
    v62 = *((_QWORD *)v186 + 2);
    v63 = MEMORY[0x1E0C809B0];
    block[0].__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    block[0].__r_.__value_.__l.__size_ = 0x40000000;
    block[0].__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK20HALS_SettingsManager21GetNumberSettingsKeysEv_block_invoke;
    block[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E6974518;
    block[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v186;
    block[1].__r_.__value_.__l.__size_ = (std::string::size_type)__s;
    v64 = atomic_load((unsigned __int8 *)(v62 + 32));
    if ((v64 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v62 + 33));
    dispatch_sync(*(dispatch_queue_t *)v62, block);
    v65 = *(unsigned int *)(__s[0].__r_.__value_.__l.__size_ + 24);
    _Block_object_dispose(__s, 8);
    std::vector<__CFString const*>::vector(&v196, v65);
    v195 = 0;
    v66 = *((_QWORD *)v186 + 2);
    block[0].__r_.__value_.__r.__words[0] = v63;
    block[0].__r_.__value_.__l.__size_ = 0x40000000;
    block[0].__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK20HALS_SettingsManager16CopySettingsKeysEjRjPPK10__CFString_block_invoke;
    block[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&__block_descriptor_tmp_13_2571;
    LODWORD(v218) = v65;
    block[1].__r_.__value_.__l.__size_ = (std::string::size_type)v186;
    block[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v195;
    v217 = v196;
    v67 = atomic_load((unsigned __int8 *)(v66 + 32));
    if ((v67 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v66 + 33));
    dispatch_sync(*(dispatch_queue_t *)v66, block);
    v68 = v196;
    v187 = v197;
    if (v196 != v197)
    {
      do
      {
        v69 = *v68;
        if (*v68)
          CFRetain(*v68);
        v190 = v69;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v69);
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)block, ".*CADefaultDeviceAggregate.*");
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v219, ".*AVVCAggregateDevice.*");
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v223, ".*AudioTap-.*");
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v224, ".*iOSSimulatorAudioDevice.*");
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v225, ".*VPAUAggregateAudioDevice.*");
        memset(&v205, 0, sizeof(v205));
        __s[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
        __s[0].__r_.__value_.__s.__data_[8] = 0;
        v70 = (std::locale *)operator new(0x140uLL);
        v71 = 0;
        v205.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        v205.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
        v205.__r_.__value_.__r.__words[2] = (std::string::size_type)&v70[40];
        do
        {
          v72 = (char *)block + 64 * v71;
          v73 = std::locale::locale(v70, (const std::locale *)v72);
          *(_OWORD *)&v73[1].__locale_ = *(_OWORD *)(v72 + 8);
          *(_OWORD *)&v73[3].__locale_ = *(_OWORD *)(v72 + 24);
          v74 = (unint64_t *)*((_QWORD *)v72 + 6);
          v73[5].__locale_ = *(std::locale::__imp **)(v72 + 40);
          v73[6].__locale_ = (std::locale::__imp *)v74;
          if (v74)
          {
            v75 = v74 + 1;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          v73[7].__locale_ = *(std::locale::__imp **)(v72 + 56);
          ++v71;
          v70 = v73 + 8;
        }
        while (v71 != 5);
        v189 = v68;
        v205.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
        v77 = 40;
        do
        {
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v214[v77 * 8]);
          std::locale::~locale((std::locale *)&v210[v77]);
          v77 -= 8;
        }
        while (v77 * 8);
        size = v205.__r_.__value_.__l.__size_;
        v79 = v205.__r_.__value_.__r.__words[0];
        if (v205.__r_.__value_.__r.__words[0] == v205.__r_.__value_.__l.__size_)
        {
          v91 = 0;
        }
        else
        {
          do
          {
            std::locale::locale((std::locale *)&thread_info_outCnt, (const std::locale *)v79);
            *(_OWORD *)&thread_info_outCnt.__r_.__value_.__r.__words[1] = *(_OWORD *)(v79 + 8);
            v201 = *(_OWORD *)(v79 + 24);
            v80 = *(std::__shared_weak_count **)(v79 + 48);
            v202 = *(_QWORD *)(v79 + 40);
            v203 = v80;
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }
            v204 = *(_QWORD *)(v79 + 56);
            if (!cf)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
            v83 = v199;
            if ((v199 & 0x80u) == 0)
              v84 = (std::sub_match<const char *> *)__p;
            else
              v84 = (std::sub_match<const char *> *)__p[0];
            if ((v199 & 0x80u) != 0)
              v83 = (int64_t)__p[1];
            v85 = (uint64_t)v84 + v83;
            v210[0] = 0;
            v210[1] = 0;
            v211 = 0;
            v212 = 0;
            v213 = 0;
            v214[0] = 0;
            v214[8] = 0;
            v215 = 0;
            memset(__s, 0, 41);
            v217 = 0;
            v218 = 0;
            LOBYTE(v219.__loc_.__locale_) = 0;
            v219.__ct_ = 0;
            v219.__col_ = 0;
            v220 = 0;
            v221 = 0;
            v222 = 0;
            memset(block, 0, 41);
            v86 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&thread_info_outCnt, v84, (std::sub_match<const char *> *)((char *)v84 + v83), (std::vector<std::csub_match> *)block, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__s, (uint64_t)v84, v85, (uint64_t *)block, 0);
            if (block[0].__r_.__value_.__r.__words[0])
              operator delete(block[0].__r_.__value_.__l.__data_);
            v87 = v214[0] == 0;
            if (__s[0].__r_.__value_.__r.__words[0])
              operator delete(__s[0].__r_.__value_.__l.__data_);
            if ((char)v199 < 0)
              operator delete(__p[0]);
            v88 = v203;
            if (v203)
            {
              v89 = (unint64_t *)&v203->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v91 = (v87 | ~v86) & v86;
            std::locale::~locale((std::locale *)&thread_info_outCnt);
            v79 += 64;
            if (v79 == size)
              v92 = 1;
            else
              v92 = (v87 | ~(_BYTE)v86) & v86;
          }
          while ((v92 & 1) == 0);
        }
        block[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
        std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)block);
        if (cf)
          CFRelease(cf);
        if (v91)
        {
          HALS_SettingsManager::DeleteSetting(v186, v190);
          CFRelease(v190);
        }
        v68 = v189 + 1;
      }
      while (v189 + 1 != v187);
      v68 = v196;
    }
    if (v68)
    {
      v197 = v68;
      v93 = v68;
LABEL_139:
      operator delete(v93);
    }
  }
  else
  {
    v94 = HALS_PlatformBehaviors::get_platform_behaviors(v61);
    v95 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*v94 + 48))(v94);
    if ((_DWORD)v95 == 2
      || (v96 = HALS_PlatformBehaviors::get_platform_behaviors(v95),
          (*(unsigned int (**)(uint64_t *))(*v96 + 48))(v96) == 3))
    {
      get_temporary_folder(__s);
      v97 = std::string::append(__s, "com.apple.audio.SystemSettings.plist", 0x24uLL);
      v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      block[0].__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
      *(_OWORD *)&block[0].__r_.__value_.__l.__data_ = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__s[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s[0].__r_.__value_.__l.__data_);
      get_temporary_folder(&thread_info_outCnt);
      v99 = std::string::append(&thread_info_outCnt, "com.apple.audio.ServerSettings.plist", 0x24uLL);
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      __s[0].__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s[0].__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(thread_info_outCnt.__r_.__value_.__r.__words[2]) < 0)
        operator delete(thread_info_outCnt.__r_.__value_.__l.__data_);
      get_temporary_folder(&v205);
      v101 = std::string::append(&v205, "com.apple.audio.ServerSettings.plist", 0x24uLL);
      v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      thread_info_outCnt.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&thread_info_outCnt.__r_.__value_.__l.__data_ = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
      HALS_SettingsManager::_InitSettings(v186, (uint64_t)block, (const char *)__s, (const char *)&thread_info_outCnt);
      if (SHIBYTE(thread_info_outCnt.__r_.__value_.__r.__words[2]) < 0)
        operator delete(thread_info_outCnt.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(block[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v93 = (CFTypeRef *)block[0].__r_.__value_.__r.__words[0];
        goto LABEL_139;
      }
    }
  }
  v103 = (std::__shared_weak_count *)operator new(0x20uLL);
  v103->__shared_owners_ = 0;
  v104 = (unint64_t *)&v103->__shared_owners_;
  v103->__shared_weak_owners_ = 0;
  v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E650;
  v103[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A1A58;
  v105 = v103 + 1;
  __p[0] = &v103[1];
  __p[1] = v103;
  if (g_static_start_options == 1)
  {
    v106 = operator new(0x58uLL);
    v106[1] = 0;
    v106[2] = 0;
    v106[3] = &off_1E699B5C0;
    *v106 = &off_1E697E6A0;
    v106[4] = 0;
    v106[5] = 1;
    *((_OWORD *)v106 + 3) = 0u;
    *((_OWORD *)v106 + 4) = 0u;
    v106[10] = 0;
    *(_QWORD *)&v107 = v106 + 3;
    *((_QWORD *)&v107 + 1) = v106;
    *(_OWORD *)__p = v107;
    do
      v108 = __ldaxr(v104);
    while (__stlxr(v108 - 1, v104));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
    v105 = (std::__shared_weak_count *)__p[0];
    v103 = (std::__shared_weak_count *)__p[1];
  }
  v207[0] = &off_1E697E6F0;
  v207[1] = HALS_System::PowerStateChangedCallback;
  v208 = v207;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object, *(dispatch_object_t *)(v188 + 576));
  v109 = *(_BYTE *)(v188 + 1424);
  v191 = v103;
  if (v103)
  {
    v110 = (unint64_t *)&v103->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = operator new(0x1B8uLL);
  v112[1] = 0;
  v112[2] = 0;
  *v112 = &off_1E697E8E0;
  __s[1].__r_.__value_.__r.__words[0] = 0;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)block, object[0]);
  thread_info_outCnt.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
  thread_info_outCnt.__r_.__value_.__l.__size_ = (std::string::size_type)v191;
  if (v191)
  {
    v113 = (unint64_t *)&v191->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  *((_OWORD *)v112 + 2) = *(_OWORD *)&thread_info_outCnt.__r_.__value_.__l.__data_;
  v112[3] = &off_1E69A19B8;
  *(_OWORD *)&thread_info_outCnt.__r_.__value_.__l.__data_ = 0uLL;
  v112[6] = v188;
  v115 = __s[1].__r_.__value_.__l.__data_;
  if (!__s[1].__r_.__value_.__r.__words[0])
    goto LABEL_155;
  if ((std::string *)__s[1].__r_.__value_.__l.__data_ != __s)
  {
    v115 = (std::string::pointer)(*(uint64_t (**)(void))(*(_QWORD *)__s[1].__r_.__value_.__l.__data_ + 16))();
LABEL_155:
    v112[10] = v115;
    goto LABEL_157;
  }
  v112[10] = v112 + 7;
  (*(void (**)(std::string *))(__s[0].__r_.__value_.__r.__words[0] + 24))(__s);
LABEL_157:
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v112 + 11), (dispatch_object_t)block[0].__r_.__value_.__l.__data_);
  *((_BYTE *)v112 + 408) = v109;
  v116 = 4;
  *((_DWORD *)v112 + 103) = 4;
  v112[52] = 0;
  v112[53] = 0;
  *((_BYTE *)v112 + 432) = 0;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)block);
  v117 = (std::string *)__s[1].__r_.__value_.__l.__data_;
  if ((std::string *)__s[1].__r_.__value_.__l.__data_ == __s)
  {
    v117 = __s;
    goto LABEL_161;
  }
  if (__s[1].__r_.__value_.__r.__words[0])
  {
    v116 = 5;
LABEL_161:
    (*(void (**)(void))(v117->__r_.__value_.__r.__words[0] + 8 * v116))();
  }
  *(_QWORD *)&v118 = v112 + 3;
  *((_QWORD *)&v118 + 1) = v112;
  v119 = *(std::__shared_weak_count **)(v188 + 1440);
  *v184 = v118;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v191)
  {
    v122 = (unint64_t *)&v191->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
  v124 = v208;
  if (v208 == v207)
  {
    v125 = 4;
    v124 = v207;
    goto LABEL_176;
  }
  if (v208)
  {
    v125 = 5;
LABEL_176:
    (*(void (**)(void))(*v124 + 8 * v125))();
  }
  v126 = *(_QWORD *)v184;
  if (!*(_QWORD *)v184)
  {
    LODWORD(block[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)block[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_System.cpp";
    WORD2(block[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&block[0].__r_.__value_.__r.__words[1] + 6) = 3686;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_InitPowerManagement: PowerManager is null", (uint8_t *)block, 0x12u);
    v126 = *(_QWORD *)v184;
  }
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v126 + 16))(v126, g_static_start_options == 1);
  Setting = HALS_SettingsManager::_ReadSetting(*((CFDictionaryRef **)*v183 + 3), CFSTR("System_MixStereoToMono"), v127, v128);
  block[0].__r_.__value_.__r.__words[0] = (std::string::size_type)Setting;
  block[0].__r_.__value_.__s.__data_[8] = 1;
  if (!Setting)
    goto LABEL_187;
  v130 = CFGetTypeID(Setting);
  if (v130 == CFBooleanGetTypeID())
  {
    v131 = CFBooleanGetValue((CFBooleanRef)block[0].__r_.__value_.__l.__data_) == 0;
    goto LABEL_184;
  }
  v132 = CFGetTypeID(block[0].__r_.__value_.__l.__data_);
  if (v132 != CFNumberGetTypeID())
  {
LABEL_187:
    v133 = 0;
    goto LABEL_188;
  }
  __s[0].__r_.__value_.__r.__words[0] = 0;
  CFNumberGetValue((CFNumberRef)block[0].__r_.__value_.__l.__data_, kCFNumberSInt64Type, __s);
  v131 = __s[0].__r_.__value_.__r.__words[0] == 0;
LABEL_184:
  v133 = !v131;
LABEL_188:
  CACFObject<void const*>::~CACFObject((uint64_t)block);
  v134 = (_QWORD *)v188;
  *(_BYTE *)(v188 + 1224) = v133;
  v135 = *(_BYTE **)(v188 + 1232);
  if (*(_QWORD *)(v188 + 1248) - (_QWORD)v135 <= 0x3FuLL)
  {
    v136 = *(_BYTE **)(v188 + 1240);
    v137 = (char *)operator new(0x40uLL);
    v138 = &v137[(v136 - v135) & 0xFFFFFFFFFFFFFFF8];
    v139 = v138;
    if (v136 != v135)
    {
      v139 = &v137[(v136 - v135) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v140 = *((_QWORD *)v136 - 1);
        v136 -= 8;
        *((_QWORD *)v139 - 1) = v140;
        v139 -= 8;
      }
      while (v136 != v135);
    }
    v134 = (_QWORD *)v188;
    *(_QWORD *)(v188 + 1232) = v139;
    *(_QWORD *)(v188 + 1240) = v138;
    *(_QWORD *)(v188 + 1248) = v137 + 64;
    if (v135)
      operator delete(v135);
  }
  v141 = v134[161];
  if ((unint64_t)(v134[163] - v141) <= 0x1FF)
  {
    v142 = v134[162];
    block[1].__r_.__value_.__l.__size_ = (std::string::size_type)(v134 + 163);
    v143 = operator new(0x200uLL);
    __s[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v134 + 163);
    __s[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v205;
    __s[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&thread_info_outCnt;
    __s[1].__r_.__value_.__s.__data_[0] = 0;
    v145 = (std::string::size_type)v143 + v142 - v141;
    block[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    block[0].__r_.__value_.__l.__size_ = v145;
    block[0].__r_.__value_.__r.__words[2] = v145;
    block[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v143 + 512;
    thread_info_outCnt.__r_.__value_.__r.__words[0] = v145;
    thread_info_outCnt.__r_.__value_.__l.__size_ = v145;
    for (*(_OWORD *)&v205.__r_.__value_.__l.__data_ = *(_OWORD *)&thread_info_outCnt.__r_.__value_.__l.__data_;
          v142 != v141;
          thread_info_outCnt.__r_.__value_.__l.__size_ -= 8)
    {
      v146 = *(HALS_ObjectMap **)(v142 - 8);
      v142 -= 8;
      *(_QWORD *)(v145 - 8) = v146;
      HALS_ObjectMap::RetainObject(v146, v144);
      v145 = thread_info_outCnt.__r_.__value_.__l.__size_ - 8;
    }
    __s[1].__r_.__value_.__s.__data_[0] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,std::reverse_iterator<HALS_Releaser<HALS_Client>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)__s, v144);
    v134 = (_QWORD *)v188;
    v147 = *(_QWORD *)(v188 + 1304);
    v148 = *(_OWORD *)&block[0].__r_.__value_.__r.__words[2];
    v149 = *v185;
    *(_QWORD *)(v188 + 1288) = v145;
    *(_OWORD *)&block[0].__r_.__value_.__r.__words[1] = v149;
    *(_OWORD *)(v188 + 1296) = v148;
    block[1].__r_.__value_.__r.__words[0] = v147;
    block[0].__r_.__value_.__r.__words[0] = v149;
    std::__split_buffer<HALS_Releaser<HALS_Client>>::~__split_buffer((uint64_t)block, v150);
  }
  v151 = v134[169];
  if ((unint64_t)(v134[171] - v151) <= 0xFFF)
  {
    v152 = *(_QWORD *)(v188 + 1360);
    block[1].__r_.__value_.__l.__size_ = v188 + 1368;
    block[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
    block[0].__r_.__value_.__l.__size_ = block[0].__r_.__value_.__r.__words[0] + v152 - v151;
    block[0].__r_.__value_.__r.__words[2] = block[0].__r_.__value_.__l.__size_;
    block[1].__r_.__value_.__r.__words[0] = block[0].__r_.__value_.__r.__words[0] + 4096;
    std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer((uint64_t *)(v188 + 1352), (HALS_Object *)block);
    std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer((uint64_t)block, v153);
  }
  TellKernelAudioIOIsRunning(0);
  if (AMCP::Feature_Flags::run_hybrid_hal(v154, v155))
  {
    v156 = *v182;
    v157 = *v182 + 4;
    os_unfair_lock_lock(v157);
    v158 = (char *)operator new(0x310uLL);
    *((_QWORD *)v158 + 1) = 0;
    *((_QWORD *)v158 + 2) = 0;
    *(_QWORD *)v158 = &off_1E699BAF0;
    AMCP::IO_Core::Graph_Manager::Graph_Manager((AMCP::IO_Core::Graph_Manager *)(v158 + 24));
    *((_QWORD *)v158 + 3) = &off_1E699B998;
    *((_QWORD *)v158 + 63) = 0;
    *((_QWORD *)v158 + 64) = 0;
    *((_WORD *)v158 + 248) = 0;
    *((_OWORD *)v158 + 28) = 0u;
    *((_OWORD *)v158 + 29) = 0u;
    *((_OWORD *)v158 + 30) = 0u;
    *((_QWORD *)v158 + 65) = 0;
    *((_QWORD *)v158 + 66) = 850045863;
    *(_OWORD *)(v158 + 536) = 0u;
    *(_OWORD *)(v158 + 552) = 0u;
    *(_OWORD *)(v158 + 568) = 0u;
    *(_OWORD *)(v158 + 584) = 0u;
    *(_OWORD *)(v158 + 600) = 0u;
    *((_QWORD *)v158 + 77) = 850045863;
    *((_OWORD *)v158 + 39) = 0u;
    *((_OWORD *)v158 + 40) = 0u;
    *((_OWORD *)v158 + 41) = 0u;
    *((_OWORD *)v158 + 42) = 0u;
    *((_OWORD *)v158 + 43) = 0u;
    *((_QWORD *)v158 + 88) = 850045863;
    *(_OWORD *)(v158 + 712) = 0u;
    *(_OWORD *)(v158 + 728) = 0u;
    *(_OWORD *)(v158 + 744) = 0u;
    *(_OWORD *)(v158 + 760) = 0u;
    *((_QWORD *)v158 + 97) = dispatch_semaphore_create(0);
    v159 = (_QWORD *)operator new();
    *v159 = &off_1E699BA18;
    v159[1] = v156 + 6;
    v160 = (_QWORD *)operator new();
    *v160 = &off_1E699C148;
    v160[1] = 0;
    v160[2] = 0;
    v160[3] = v159;
    *(_QWORD *)&v161 = v159;
    *((_QWORD *)&v161 + 1) = v160;
    v162 = (std::__shared_weak_count *)*((_QWORD *)v158 + 57);
    *((_OWORD *)v158 + 28) = v161;
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    v165 = dispatch_queue_create("AMCP Work Queue", 0);
    v166 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)v158 + 58, v165);
    if (v165)
      dispatch_release(v165);
    if (!*((_QWORD *)v158 + 58))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v166);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)block, "com.apple.coreaudio", "AMCP");
      v175 = (std::__shared_weak_count *)block[0].__r_.__value_.__l.__size_;
      v176 = *(NSObject **)block[0].__r_.__value_.__l.__data_;
      if (block[0].__r_.__value_.__l.__size_)
      {
        v177 = (unint64_t *)(block[0].__r_.__value_.__l.__size_ + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
      {
        v179 = pthread_self();
        v180 = pthread_mach_thread_np(v179);
        LODWORD(block[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(block[0].__r_.__value_.__r.__words[0]) = v180;
        LOWORD(block[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&block[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOContext_Manager_Impl.cpp";
        WORD1(block[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(block[0].__r_.__value_.__r.__words[2]) = 688;
        LOWORD(block[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)block[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"m_work_queue.operator BOOL() == true";
        _os_log_error_impl(&dword_1B57BA000, v176, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)block, 0x22u);
      }
      abort();
    }
    *(_QWORD *)&v167 = v158 + 24;
    *((_QWORD *)&v167 + 1) = v158;
    v168 = *(std::__shared_weak_count **)&v156[36]._os_unfair_lock_opaque;
    *(_OWORD *)&v156[34]._os_unfair_lock_opaque = v167;
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    os_unfair_lock_unlock(v157);
  }
  v171 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v172 = (unint64_t *)((char *)__p[1] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  return v188;
}

void sub_1B5A178C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pthread_cond_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, AMCP::Utility::Dispatch_Queue *a16, AMCP::Utility::Dispatch_Queue *a17, AMCP::Utility::Dispatch_Queue *a18, uint64_t a19, std::mutex *a20,HALB_Mutex *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,HALS_Object *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef cf,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  os_unfair_lock_s *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  AMCP::Utility::Dispatch_Queue *v62;
  AMCP::IO_Core::Graph_Manager *v63;
  void *v65;
  void *v66;
  void *v67;
  HALS_Object *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v62);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v61);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(v63);
  std::__shared_weak_count::~__shared_weak_count(v60);
  operator delete(v65);
  os_unfair_lock_unlock(v59);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  v66 = (void *)*((_QWORD *)a33 + 226);
  if (v66)
  {
    *((_QWORD *)a33 + 227) = v66;
    operator delete(v66);
  }
  HALB_Guard::~HALB_Guard(a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a25);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a22);
  a59 = a23;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a33 + 1336);
  v67 = (void *)*((_QWORD *)a33 + 164);
  if (v67)
  {
    *((_QWORD *)a33 + 165) = v67;
    operator delete(v67);
  }
  a59 = a26;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a14);
  v69 = *((_QWORD *)a33 + 157);
  *((_QWORD *)a33 + 157) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)a33 + 154, v68);
  std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100](a15);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a16);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a17);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a18);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a19);
  HALB_Mutex::~HALB_Mutex(a21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a33 + 128);
  v70 = (std::__shared_weak_count *)*((_QWORD *)a33 + 15);
  if (v70)
    std::__shared_weak_count::__release_weak(v70);
  std::mutex::~mutex(a20);
  HALS_Object::~HALS_Object(a33);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::RunLoopThread(HALS_System *this, void *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  CFRunLoopRef Current;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const __CFString *v27;
  std::__shared_weak_count *v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;

  v102 = 0;
  v103 = 0;
  HALS_System::GetInstance(&v104, 0, &v102);
  HALB_Mutex::Lock((HALB_Mutex *)(v104 + 1528));
  v2 = v105;
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v103;
  if (v103)
  {
    v6 = (unint64_t *)&v103->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Current = CFRunLoopGetCurrent();
  v100 = 0;
  v101 = 0;
  HALS_System::GetInstance(&v104, 0, &v100);
  v9 = v105;
  *(_QWORD *)(v104 + 1520) = Current;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v101;
  if (v101)
  {
    v13 = (unint64_t *)&v101->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v98 = 0;
  v99 = 0;
  HALS_System::GetInstance(&v104, 0, &v98);
  CFRetain(*(CFTypeRef *)(v104 + 1520));
  v15 = v105;
  if (v105)
  {
    v16 = (unint64_t *)&v105->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v99;
  if (v99)
  {
    v19 = (unint64_t *)&v99->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v96 = 0;
  v97 = 0;
  HALS_System::GetInstance(&v104, 0, &v96);
  HALB_Guard::NotifyAll((pthread_cond_t *)(v104 + 1528));
  v21 = v105;
  if (v105)
  {
    v22 = (unint64_t *)&v105->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v97;
  if (v97)
  {
    v25 = (unint64_t *)&v97->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (const __CFString *)*MEMORY[0x1E0C9B288];
  while (1)
  {
    v94 = 0;
    v95 = 0;
    HALS_System::GetInstance(&v104, 0, &v94);
    v28 = v105;
    v29 = *(unsigned __int8 *)(v104 + 1800);
    if (v105)
    {
      v30 = (unint64_t *)&v105->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v32 = v95;
    if (v95)
    {
      v33 = (unint64_t *)&v95->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v29)
      break;
    v92 = 0;
    v93 = 0;
    HALS_System::GetInstance(&v104, 0, &v92);
    HALB_Mutex::Unlock((HALB_Mutex *)(v104 + 1528));
    v35 = v105;
    if (v105)
    {
      v36 = (unint64_t *)&v105->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v93;
    if (v93)
    {
      v39 = (unint64_t *)&v93->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v90 = 0;
    v91 = 0;
    HALS_System::GetInstance(&v104, 0, &v90);
    v41 = v105;
    v42 = *(_QWORD *)(v104 + 1816);
    v43 = *(_QWORD *)(v104 + 1808);
    if (v105)
    {
      v44 = (unint64_t *)&v105->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v46 = v91;
    if (v91)
    {
      v47 = (unint64_t *)&v91->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v42 == v43)
    {
      usleep(0x4C4B40u);
    }
    else if (CFRunLoopRunInMode(v27, 1.0e10, 0) != kCFRunLoopRunTimedOut)
    {
      usleep(0xF4240u);
    }
    v88 = 0;
    v89 = 0;
    HALS_System::GetInstance(&v104, 0, &v88);
    HALB_Mutex::Lock((HALB_Mutex *)(v104 + 1528));
    v49 = v105;
    if (v105)
    {
      v50 = (unint64_t *)&v105->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v89;
    if (v89)
    {
      v53 = (unint64_t *)&v89->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  v86 = 0;
  v87 = 0;
  HALS_System::GetInstance(&v104, 0, &v86);
  CFRelease(*(CFTypeRef *)(v104 + 1520));
  v55 = v105;
  if (v105)
  {
    v56 = (unint64_t *)&v105->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v87;
  if (v87)
  {
    v59 = (unint64_t *)&v87->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v84 = 0;
  v85 = 0;
  HALS_System::GetInstance(&v104, 0, &v84);
  v61 = v105;
  *(_QWORD *)(v104 + 1520) = 0;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v82 = 0;
  v83 = 0;
  HALS_System::GetInstance(&v104, 0, &v82);
  HALB_Guard::NotifyAll((pthread_cond_t *)(v104 + 1528));
  v67 = v105;
  if (v105)
  {
    v68 = (unint64_t *)&v105->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v83;
  if (v83)
  {
    v71 = (unint64_t *)&v83->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v80 = 0;
  v81 = 0;
  HALS_System::GetInstance(&v104, 0, &v80);
  HALB_Mutex::Unlock((HALB_Mutex *)(v104 + 1528));
  v73 = v105;
  if (v105)
  {
    v74 = (unint64_t *)&v105->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v81;
  if (v81)
  {
    v77 = (unint64_t *)&v81->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  return 0;
}

void sub_1B5A185DC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    a13 = 0;
    a14 = 0;
    HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a13);
    v24 = *(_QWORD *)(*(_QWORD *)(v21 - 80) + 1520);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    if (v24)
    {
      a11 = 0;
      a12 = 0;
      HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a11);
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(v21 - 80) + 1520));
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      a9 = 0;
      a10 = 0;
      HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a9);
      *(_QWORD *)(*(_QWORD *)(v21 - 80) + 1520) = 0;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
      v25 = &a9;
LABEL_6:
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v25);
    }
  }
  else
  {
    a19 = 0;
    a20 = 0;
    HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a19);
    v26 = *(_QWORD *)(*(_QWORD *)(v21 - 80) + 1520);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    if (v26)
    {
      a17 = 0;
      a18 = 0;
      HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a17);
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(v21 - 80) + 1520));
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
      a15 = 0;
      a16 = 0;
      HALS_System::GetInstance((_QWORD *)(v21 - 80), 0, &a15);
      *(_QWORD *)(*(_QWORD *)(v21 - 80) + 1520) = 0;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 80);
      v25 = &a15;
      goto LABEL_6;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B5A185BCLL);
}

void sub_1B5A18880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void HALS_System::PowerStateChangedCallback(_DWORD *a1, int a2)
{
  HALB_Mutex *v4;
  _BYTE buf[24];
  void *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_System.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3700;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::PowerStateChangedCallback: HALS_System object is null", buf, 0x12u);
  }
  if (a1[347] != a2)
  {
    a1[347] = a2;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN11HALS_System33TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke;
    v6 = &__block_descriptor_tmp_126_5601;
    v7 = a1;
    v8 = a2;
    v4 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)buf);
  }
}

void sub_1B5A18A18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  int *v11;
  _BOOL4 v12;
  uint64_t v13;

  if (a2)
  {
    v11 = (int *)__cxa_begin_catch(a1);
    v12 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v12)
      {
        v13 = v11[2];
        LODWORD(a9) = 136315650;
        *(_QWORD *)((char *)&a9 + 4) = "HALS_System.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3716;
        WORD1(a10) = 2048;
        *(_QWORD *)((char *)&a10 + 4) = v13;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::PowerStateChangedCallback: Uncaught exception: %ld", (uint8_t *)&a9, 0x1Cu);
      }
    }
    else if (v12)
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_System.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3720;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::PowerStateChangedCallback: Uncaught exception", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5A189ECLL);
  }
  _Unwind_Resume(a1);
}

void TellKernelAudioIOIsRunning(int a1)
{
  int v2;
  int *v3;
  char *v4;
  int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (TellKernelAudioIOIsRunning(BOOL)::isInitialized != -1)
    dispatch_once(&TellKernelAudioIOIsRunning(BOOL)::isInitialized, &__block_literal_global_167);
  if (TellKernelAudioIOIsRunning(BOOL)::theMIBLength)
  {
    v5 = a1;
    if (sysctl(TellKernelAudioIOIsRunning(BOOL)::theMIB, TellKernelAudioIOIsRunning(BOOL)::theMIBLength, 0, 0, &v5, 4uLL))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v2 = *__error();
        v3 = __error();
        v4 = strerror(*v3);
        *(_DWORD *)buf = 136315906;
        v7 = "HALS_System.cpp";
        v8 = 1024;
        v9 = 445;
        v10 = 1024;
        v11 = v2;
        v12 = 2080;
        v13 = v4;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  TellKernelAudioIOIsRunning: sysctl for security.mac.sandbox.audio_active failed: %d %s", buf, 0x22u);
      }
    }
  }
}

void ___ZL26TellKernelAudioIOIsRunningb_block_invoke()
{
  BOOL v0;
  int v1;
  int *v2;
  char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sysctlnametomib("security.mac.sandbox.audio_active", TellKernelAudioIOIsRunning(BOOL)::theMIB, (size_t *)&TellKernelAudioIOIsRunning(BOOL)::theMIBLength))
  {
    v0 = 1;
  }
  else
  {
    v0 = TellKernelAudioIOIsRunning(BOOL)::theMIBLength == 0;
  }
  if (v0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v1 = *__error();
      v2 = __error();
      v3 = strerror(*v2);
      v4 = 136315906;
      v5 = "HALS_System.cpp";
      v6 = 1024;
      v7 = 430;
      v8 = 1024;
      v9 = v1;
      v10 = 2080;
      v11 = v3;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  TellKernelAudioIOIsRunning: sysctlnametomib for security.mac.sandbox.audio_active failed: %d %s", (uint8_t *)&v4, 0x22u);
    }
    TellKernelAudioIOIsRunning(BOOL)::theMIBLength = 0;
  }
}

uint64_t std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer(uint64_t *a1, HALS_Object *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  HALS_ObjectMap *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v5 = *a1;
  v4 = a1[1];
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v15 = v6;
  *((_QWORD *)&v15 + 1) = v6;
  v14 = v15;
  v12[0] = a1 + 2;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  while (v4 != v5)
  {
    v7 = *(HALS_ObjectMap **)(v4 - 8);
    v4 -= 8;
    *(_QWORD *)(v6 - 8) = v7;
    HALS_ObjectMap::RetainObject(v7, a2);
    v6 = *((_QWORD *)&v15 + 1) - 8;
    *((_QWORD *)&v15 + 1) -= 8;
  }
  v13 = 1;
  result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,std::reverse_iterator<HALS_Releaser<HALS_IOContext>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12, a2);
  *((_QWORD *)a2 + 1) = v6;
  v9 = *a1;
  *a1 = v6;
  *((_QWORD *)a2 + 1) = v9;
  v10 = a1[1];
  a1[1] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = a1[2];
  a1[2] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  *(_QWORD *)a2 = *((_QWORD *)a2 + 1);
  return result;
}

void sub_1B5A18E20(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,std::reverse_iterator<HALS_Releaser<HALS_IOContext>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;

  v3 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == v3)
      break;
    v5 = *(HALS_ObjectMap **)(v4 - 8);
    *(_QWORD *)(a1 + 16) = v4 - 8;
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,std::reverse_iterator<HALS_Releaser<HALS_IOContext>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 16) + 8);
    v5 = *(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 8) + 8);
    while (v4 != v5)
      HALS_ObjectMap::ReleaseObject(*v4++, a2);
  }
  return a1;
}

uint64_t std::__split_buffer<HALS_Releaser<HALS_Client>>::~__split_buffer(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap *v5;

  v3 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == v3)
      break;
    v5 = *(HALS_ObjectMap **)(v4 - 8);
    *(_QWORD *)(a1 + 16) = v4 - 8;
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,std::reverse_iterator<HALS_Releaser<HALS_Client>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 16) + 8);
    v5 = *(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 8) + 8);
    while (v4 != v5)
      HALS_ObjectMap::ReleaseObject(*v4++, a2);
  }
  return a1;
}

void std::__shared_ptr_emplace<HALS_PowerManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_PowerManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_PowerManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697E6F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697E6F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFvPvN4AMCP11Power_StateEE"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::target_type()
{
}

void ___ZN11HALS_System33TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  std::vector<unsigned int> *v3;
  unint64_t *p_end;
  void **p_begin;
  uint64_t v6;
  uint64_t v7;
  char *end;
  unsigned int v9;
  unsigned int *value;
  unsigned int *v11;
  char *begin;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int8 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  _QWORD block[5];
  std::__shared_weak_count *v30;
  int v31;
  std::vector<unsigned int> *v32;
  std::__shared_weak_count *v33;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  v3 = (std::vector<unsigned int> *)operator new(0x30uLL);
  v28 = v2;
  v3->__end_ = 0;
  p_end = (unint64_t *)&v3->__end_;
  v3->__end_cap_.__value_ = 0;
  v3->__begin_ = (std::vector<unsigned int>::pointer)&off_1E6999E58;
  v3[1].__begin_ = 0;
  p_begin = (void **)&v3[1].__begin_;
  v3[1].__end_ = 0;
  v3[1].__end_cap_.__value_ = 0;
  v32 = v3 + 1;
  v33 = (std::__shared_weak_count *)v3;
  std::vector<unsigned int>::reserve(v3 + 1, (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
  v6 = *(_QWORD *)(v1 + 1352);
  v7 = *(_QWORD *)(v1 + 1360);
  if (v6 != v7)
  {
    end = (char *)v3[1].__end_;
    do
    {
      v9 = *(_DWORD *)(*(_QWORD *)v6 + 16);
      value = v3[1].__end_cap_.__value_;
      if (end >= (char *)value)
      {
        begin = (char *)*p_begin;
        v13 = (end - (_BYTE *)*p_begin) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v15 = (char *)value - begin;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          begin = (char *)v3[1].__begin_;
          end = (char *)v3[1].__end_;
        }
        else
        {
          v17 = 0;
        }
        v18 = (unsigned int *)(v16 + 4 * v13);
        *v18 = v9;
        v11 = v18 + 1;
        while (end != begin)
        {
          v19 = *((_DWORD *)end - 1);
          end -= 4;
          *--v18 = v19;
        }
        v3[1].__begin_ = v18;
        v3[1].__end_ = v11;
        v3[1].__end_cap_.__value_ = (unsigned int *)(v16 + 4 * v17);
        if (begin)
          operator delete(begin);
      }
      else
      {
        *(_DWORD *)end = v9;
        v11 = (unsigned int *)(end + 4);
      }
      v3[1].__end_ = v11;
      v6 += 8;
      end = (char *)v11;
    }
    while (v6 != v7);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN11HALS_System34_TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke;
  block[3] = &__block_descriptor_tmp_134;
  block[4] = v3 + 1;
  v30 = (std::__shared_weak_count *)v3;
  do
    v20 = __ldxr(p_end);
  while (__stxr(v20 + 1, p_end));
  v31 = v28;
  v21 = atomic_load((unsigned __int8 *)(v1 + 928));
  if ((v21 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v1 + 929));
  dispatch_async(*(dispatch_queue_t *)(v1 + 896), block);
  v22 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B5A192DC(void *a1)
{
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_System34_TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  unsigned int **v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  int v9;
  HALB_Mutex *v10;
  _QWORD v11[5];
  int v12;

  v1 = *(unsigned int ***)(a1 + 32);
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      v8 = (HALS_ObjectMap *)v6;
      if (v6)
      {
        v9 = *(_DWORD *)(a1 + 48);
        v11[0] = v5;
        v11[1] = 0x40000000;
        v11[2] = ___ZN14HALS_IOContext12PowerChangedEN4AMCP11Power_StateE_block_invoke;
        v11[3] = &__block_descriptor_tmp_12_8628;
        v11[4] = v6;
        v12 = v9;
        v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v11);
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
      ++v2;
    }
    while (v2 != v3);
  }
}

void std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::__on_zero_shared(uint64_t a1)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 24));
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((_QWORD *)(a1 + 64), 0);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((_QWORD *)(a1 + 56), 0);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((_QWORD *)(a1 + 48), 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)(a1 + 40), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1 + 48;
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)(a1 + 280), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 216));
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(a1 + 176);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 160);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 144);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 104);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699CF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699CF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[10];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[8];
  a1[8] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[5];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>((uint64_t)(v5 + 2));
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 448));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 416));
  for (i = 0; i != -72; i -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 392 + i));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 312));
  for (j = 0; j != -72; j -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 288 + j));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 208));
  for (k = 184; k != 112; k -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + k));
  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)(a1 + 24));
}

void HALS_System::StartServer(uint64_t *a1, int a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *d_seekoff;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  _QWORD *v25;
  HALS_Object *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __uint64_t d_ino;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  HALS_PlatformBehaviors *v48;
  uint64_t *platform_behaviors;
  CFURLRef v50;
  DIR *v51;
  int i;
  char *d_name;
  char *v54;
  char *v55;
  int v56;
  int v57;
  CFStringRef v58;
  const __CFArray *Copy;
  const __CFArray *Size;
  const __CFArray *v61;
  CFIndex j;
  uint64_t v63;
  HALS_PDPlugIn *v64;
  HALS_System *v65;
  uint64_t v66;
  HALS_Object *v67;
  _DWORD *exception;
  _DWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t k;
  const void *v76;
  CFStringRef *m;
  const char *p_buf;
  int v79;
  int v80;
  const char *v81;
  DIR *v82;
  DIR *v83;
  int n;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  dirent *v90;
  uint64_t v91;
  HALS_System *v92;
  const __CFURL *v93;
  uint64_t v94;
  HALS_Object *v95;
  CFPlugInRef v96;
  const __CFUUID *v97;
  __CFBundle *v98;
  HALS_System *FactoriesForPlugInTypeInPlugIn;
  const __CFUUID *v100;
  const __CFUUID *v101;
  void *v102;
  void *v103;
  void (*v104)(void *, _QWORD, _QWORD, uint64_t);
  const __CFUUID *v105;
  CFUUIDBytes v106;
  NSObject *v107;
  const char *v108;
  CFStringRef BundleID;
  unsigned int *v110;
  int v111;
  char *v112;
  size_t v113;
  HALB_Mutex *v114;
  uint64_t v115;
  _DWORD *v116;
  _DWORD *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  HALS_NotificationManager *v121;
  const AudioObjectPropertyAddress *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::runtime_error *v132;
  std::runtime_error *v133;
  CFStringRef *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __uint64_t v137;
  __uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void **v143;
  uint64_t v144;
  uint64_t v145[2];
  __int128 v146;
  uint64_t v147;
  char v148;
  dirent *v149;
  char v150;
  dirent *v151;
  CFURLRef v152;
  const __CFArray *v153;
  void (**v154)(OS::CF::URL *__hidden);
  CFURLRef v155;
  HALS_System *v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  char *v159;
  HALS_System *v160;
  std::__shared_weak_count *v161;
  void *v162;
  dirent buf;
  _BYTE v164[18];
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v145[0] = 0;
  v145[1] = 0;
  HALS_System::GetInstance(&v146, 0, v145);
  v4 = v146;
  if ((_QWORD)v146)
  {
    *a1 = 0;
    a1[1] = 0;
    v5 = *(std::__shared_weak_count **)(v4 + 120);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      a1[1] = (uint64_t)v6;
      if (v6)
      {
        v7 = *(_QWORD *)(v4 + 112);
        *a1 = v7;
        if (v7)
          goto LABEL_183;
      }
      else if (*a1)
      {
        goto LABEL_183;
      }
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1);
  }
  v143 = (void **)&v144;
  v144 = os_transaction_create();
  v8 = pthread_mutex_lock(&HALS_System::sInitializationMutex);
  *a1 = 0;
  a1[1] = 0;
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.d_ino) = 136315650;
      *(__uint64_t *)((char *)&buf.d_ino + 4) = (__uint64_t)"HALS_System.cpp";
      WORD2(buf.d_seekoff) = 1024;
      *(_DWORD *)((char *)&buf.d_seekoff + 6) = 592;
      buf.d_namlen = 1024;
      *(_DWORD *)&buf.d_type = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::StartServer: failed to lock the mutex, Error: 0x%X", (uint8_t *)&buf, 0x18u);
    }
    goto LABEL_182;
  }
  v141 = 0;
  v142 = 0;
  HALS_System::GetInstance(&buf, 0, &v141);
  v9 = *(_OWORD *)&buf.d_ino;
  buf.d_ino = 0;
  buf.d_seekoff = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  v146 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  d_seekoff = (std::__shared_weak_count *)buf.d_seekoff;
  if (buf.d_seekoff)
  {
    v14 = (unint64_t *)(buf.d_seekoff + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))d_seekoff->__on_zero_shared)(d_seekoff);
      std::__shared_weak_count::__release_weak(d_seekoff);
    }
  }
  v16 = v142;
  if (v142)
  {
    v17 = (unint64_t *)&v142->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v146;
  if (!(_QWORD)v146)
    goto LABEL_39;
  buf.d_ino = 0;
  buf.d_seekoff = 0;
  v20 = *(std::__shared_weak_count **)(v146 + 120);
  if (v20)
  {
    buf.d_seekoff = (__uint64_t)std::__shared_weak_count::lock(v20);
    if (buf.d_seekoff)
      buf.d_ino = *(_QWORD *)(v19 + 112);
  }
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&buf);
  v21 = (std::__shared_weak_count *)buf.d_seekoff;
  if (buf.d_seekoff)
  {
    v22 = (unint64_t *)(buf.d_seekoff + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (!*a1)
  {
    if ((_QWORD)v146)
    {
      v24 = 0;
      goto LABEL_68;
    }
LABEL_39:
    kdebug_trace();
    v25 = operator new(0x740uLL);
    v25[1] = 0;
    v25[2] = 0;
    *v25 = &off_1E697E7A0;
    buf.d_ino = HALS_System::HALS_System((uint64_t)(v25 + 3), a2, v26);
    buf.d_seekoff = (__uint64_t)v25;
    v27 = operator new(0x28uLL);
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_1E697E7F0;
    v27[3] = &off_1E697D818;
    *((_DWORD *)v27 + 8) = a2;
    *(_QWORD *)&v158 = v27 + 3;
    *((_QWORD *)&v158 + 1) = v27;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)a1, &v158);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    d_ino = buf.d_ino;
    v33 = *a1;
    v32 = a1[1];
    if (v32)
    {
      v34 = (unint64_t *)(v32 + 16);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(std::__shared_weak_count **)(d_ino + 120);
    *(_QWORD *)(d_ino + 112) = v33;
    *(_QWORD *)(d_ino + 120) = v32;
    if (v36)
    {
      std::__shared_weak_count::__release_weak(v36);
      d_ino = buf.d_ino;
    }
    v137 = d_ino;
    v138 = buf.d_seekoff;
    if (buf.d_seekoff)
    {
      v37 = (unint64_t *)(buf.d_seekoff + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    HALS_System::GetInstance(&v139, 1, (uint64_t *)&v137);
    v39 = v140;
    if (v140)
    {
      v40 = (unint64_t *)&v140->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)v138;
    if (v138)
    {
      v43 = (unint64_t *)(v138 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    (**(void (***)(__uint64_t))buf.d_ino)(buf.d_ino);
    HALS_System::sIsInitialized = 1;
    HALS_System::CheckForDefaultDeviceChanges((HALS_System *)buf.d_ino);
    v45 = (std::__shared_weak_count *)buf.d_seekoff;
    if (buf.d_seekoff)
    {
      v46 = (unint64_t *)(buf.d_seekoff + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v24 = 1;
LABEL_68:
    v48 = (HALS_PlatformBehaviors *)pthread_mutex_unlock(&HALS_System::sInitializationMutex);
    if (!v24)
      goto LABEL_182;
    if (a2 == 1)
    {
      platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v48);
      if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 40))(platform_behaviors))
        goto LABEL_171;
    }
    else
    {
      v156 = 0;
      v157 = 0;
      HALS_System::GetInstance(&v160, 0, (uint64_t *)&v156);
      v50 = CFURLCreateWithFileSystemPath(0, CFSTR("/Library/Audio/Plug-Ins/HAL"), kCFURLPOSIXPathStyle, 1u);
      v154 = &off_1E6977FD8;
      v155 = v50;
      if (v50)
      {
        OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v158);
        if (!access("/Library/Audio/Plug-Ins/HAL", 5))
        {
          v51 = opendir("/Library/Audio/Plug-Ins/HAL");
          if (v51)
          {
            v149 = 0;
            bzero(&buf, 0x418uLL);
            for (i = readdir_r(v51, &buf, &v149); !i && v149; i = readdir_r(v51, &buf, &v149))
            {
              d_name = v149->d_name;
              v54 = &v149->d_name[strlen(v149->d_name) - 1];
              do
              {
                v55 = v54;
                v57 = *v54--;
                v56 = v57;
              }
              while (v55 >= d_name && v56 != 46);
              if (v55 >= d_name && !strcmp(v54 + 1, ".pdev"))
              {
                v58 = CFStringCreateWithFileSystemRepresentation(0, d_name);
                *(_QWORD *)v164 = &off_1E69A0F60;
                *(_QWORD *)&v164[8] = v58;
                OS::CF::MutableArray::AppendValue<OS::CF::String>(*((__CFArray **)&v158 + 1), v58);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v164);
              }
            }
            closedir(v51);
          }
        }
        if (*((_QWORD *)&v158 + 1))
          Copy = CFArrayCreateCopy(0, *((CFArrayRef *)&v158 + 1));
        else
          Copy = 0;
        v152 = (CFURLRef)&off_1E69A0EA8;
        v153 = Copy;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v158);
        Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v153);
        if (Size)
        {
          v61 = Size;
          for (j = 0; (const __CFArray *)j != v61; ++j)
          {
            OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>((const __CFArray *)&v158, (uint64_t)&v152, j);
            if (!*((_QWORD *)&v158 + 1))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.d_ino) = 136315394;
                *(__uint64_t *)((char *)&buf.d_ino + 4) = (__uint64_t)"HALS_PDPlugIn.cpp";
                WORD2(buf.d_seekoff) = 1024;
                *(_DWORD *)((char *)&buf.d_seekoff + 6) = 419;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::LoadPlugIns: failed to get the name of the plug-in", (uint8_t *)&buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E69A1B30;
              exception[2] = 1852797029;
            }
            v63 = MEMORY[0x1B5E4F980](0, *((_QWORD *)&v158 + 1), 0, 1, v155);
            *(_QWORD *)v164 = &off_1E6977FD8;
            *(_QWORD *)&v164[8] = v63;
            if (!v63)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.d_ino) = 136315394;
                *(__uint64_t *)((char *)&buf.d_ino + 4) = (__uint64_t)"HALS_PDPlugIn.cpp";
                WORD2(buf.d_seekoff) = 1024;
                *(_DWORD *)((char *)&buf.d_seekoff + 6) = 423;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::LoadPlugIns: failed to create a URL for the plug-in", (uint8_t *)&buf, 0x12u);
              }
              v69 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v69 = &off_1E69A1B30;
              v69[2] = 1852797029;
            }
            v64 = (HALS_PDPlugIn *)operator new();
            v65 = v160;
            HALS_PDPlugIn::HALS_PDPlugIn(v64, v160, *(const __CFURL **)&v164[8], v66, v67);
            HALS_System::DeviceManagerCreated(v65, v64);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v164);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v158);
          }
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v152);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v154);
      v70 = v161;
      if (v161)
      {
        v71 = (unint64_t *)&v161->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v164, "/Library/Audio/Plug-Ins/HAL");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v164[8], "/System/Library/Audio/Plug-Ins/HAL");
    v158 = 0uLL;
    v159 = 0;
    buf.d_ino = (__uint64_t)&v158;
    LOBYTE(buf.d_seekoff) = 0;
    v73 = (char *)operator new(0x10uLL);
    v74 = 0;
    *(_QWORD *)&v158 = v73;
    *((_QWORD *)&v158 + 1) = v73;
    v159 = v73 + 16;
    do
    {
      std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v73[v74], *(CFTypeRef *)&v164[v74]);
      v74 += 8;
    }
    while (v74 != 16);
    *((_QWORD *)&v158 + 1) = v73 + 16;
    for (k = 8; k != -8; k -= 8)
    {
      v76 = *(const void **)&v164[k];
      if (v76)
        CFRelease(v76);
    }
    v154 = 0;
    v155 = 0;
    HALS_System::GetInstance(&v156, 0, (uint64_t *)&v154);
    v134 = (CFStringRef *)*((_QWORD *)&v158 + 1);
    for (m = (CFStringRef *)v158; m != v134; ++m)
    {
      v152 = CFURLCreateWithFileSystemPath(0, *m, kCFURLPOSIXPathStyle, 1u);
      LOBYTE(v153) = 1;
      if (!*m)
      {
        v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v132, "Could not construct");
        __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&buf, *m);
      if (buf.d_name[2] >= 0)
        p_buf = (const char *)&buf;
      else
        p_buf = (const char *)buf.d_ino;
      v79 = access(p_buf, 5);
      v80 = v79;
      if (buf.d_name[2] < 0)
      {
        operator delete((void *)buf.d_ino);
        if (v80)
          goto LABEL_164;
      }
      else if (v79)
      {
        goto LABEL_164;
      }
      if (!*m)
      {
        v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v133, "Could not construct");
        __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&buf, *m);
      if (buf.d_name[2] >= 0)
        v81 = (const char *)&buf;
      else
        v81 = (const char *)buf.d_ino;
      v82 = opendir(v81);
      v83 = v82;
      if (buf.d_name[2] < 0)
      {
        operator delete((void *)buf.d_ino);
        if (v83)
        {
LABEL_130:
          v151 = 0;
          bzero(&buf, 0x418uLL);
          for (n = readdir_r(v83, &buf, &v151); !n && v151; n = readdir_r(v83, &buf, &v151))
          {
            v85 = v151->d_name;
            v86 = &v151->d_name[strlen(v151->d_name) - 1];
            do
            {
              v87 = v86;
              v89 = *v86--;
              v88 = v89;
            }
            while (v87 >= v85 && v88 != 46);
            if (v87 >= v85 && !strcmp(v86 + 1, ".plugin"))
            {
              v90 = (dirent *)CFStringCreateWithFileSystemRepresentation(0, v85);
              v149 = v90;
              v150 = 1;
              if (v90)
              {
                v147 = MEMORY[0x1B5E4F980](0, v90, 0, 1, v152);
                v148 = 1;
                if (v147)
                {
                  v91 = operator new();
                  v92 = v156;
                  v93 = (const __CFURL *)v147;
                  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)v91, v156, CFSTR("temporary"), v94, v95);
                  *(_QWORD *)v91 = off_1E698EC08;
                  *(_QWORD *)(v91 + 344) = &off_1E6994FC0;
                  *(_QWORD *)(v91 + 352) = &off_1E6993858;
                  v96 = CFPlugInCreate(0, v93);
                  *(_QWORD *)(v91 + 360) = v96;
                  *(_BYTE *)(v91 + 368) = 1;
                  *(_QWORD *)(v91 + 376) = 0;
                  if (!v96)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v164 = 136315394;
                      *(_QWORD *)&v164[4] = "HALS_AHPPlugIn.cpp";
                      *(_WORD *)&v164[12] = 1024;
                      *(_DWORD *)&v164[14] = 35;
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::HALS_AHPPlugIn: failed to create the plug-in", v164, 0x12u);
                    }
                    v116 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v116 = &off_1E69A1B30;
                    v116[2] = 1852797029;
                  }
                  v162 = 0;
                  v97 = CFUUIDGetConstantUUIDWithBytes(0, 0xF8u, 0xBBu, 0x1Cu, 0x28u, 0xBAu, 0xE8u, 0x11u, 0xD6u, 0x9Cu, 0x31u, 0, 3u, 0x93u, 0x15u, 0xCDu, 0x46u);
                  v98 = *(__CFBundle **)(v91 + 360);
                  if (v98)
                  {
                    FactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn(v97, v98);
                    v160 = FactoriesForPlugInTypeInPlugIn;
                    LOWORD(v161) = 1;
                    if (FactoriesForPlugInTypeInPlugIn && CFArrayGetCount(FactoriesForPlugInTypeInPlugIn))
                    {
                      CACFArray::GetCFType(&v160, 0, (const void **)&v162);
                      v100 = (const __CFUUID *)v162;
                      if (!v162)
                      {
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_162;
                        *(_DWORD *)v164 = 136315394;
                        *(_QWORD *)&v164[4] = "HALS_AHPPlugIn.cpp";
                        *(_WORD *)&v164[12] = 1024;
                        *(_DWORD *)&v164[14] = 47;
                        v107 = MEMORY[0x1E0C81028];
                        v108 = "%25s:%-5d  HALS_AHPPlugIn::HALS_AHPPlugIn: it said there was at least one factory but there wasn't";
LABEL_161:
                        _os_log_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_ERROR, v108, v164, 0x12u);
                        goto LABEL_162;
                      }
                      v101 = CFUUIDGetConstantUUIDWithBytes(0, 0xF8u, 0xBBu, 0x1Cu, 0x28u, 0xBAu, 0xE8u, 0x11u, 0xD6u, 0x9Cu, 0x31u, 0, 3u, 0x93u, 0x15u, 0xCDu, 0x46u);
                      v102 = CFPlugInInstanceCreate(0, v100, v101);
                      v103 = v102;
                      if (!v102)
                      {
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_162;
                        *(_DWORD *)v164 = 136315394;
                        *(_QWORD *)&v164[4] = "HALS_AHPPlugIn.cpp";
                        *(_WORD *)&v164[12] = 1024;
                        *(_DWORD *)&v164[14] = 51;
                        v107 = MEMORY[0x1E0C81028];
                        v108 = "%25s:%-5d  HALS_AHPPlugIn::HALS_AHPPlugIn: couldn't create the IUnknown interface";
                        goto LABEL_161;
                      }
                      v104 = *(void (**)(void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v102 + 8);
                      v105 = CFUUIDGetConstantUUIDWithBytes(0, 0x40u, 0x67u, 0x8Cu, 0x4Bu, 0x3Fu, 0, 0x41u, 0xF7u, 0xB1u, 0xD4u, 0xCAu, 0xF9u, 0xCEu, 0xBu, 0xB4u, 0xCFu);
                      v106 = CFUUIDGetUUIDBytes(v105);
                      v104(v103, *(_QWORD *)&v106.byte0, *(_QWORD *)&v106.byte8, v91 + 376);
                      (*(void (**)(void *))(*(_QWORD *)v103 + 24))(v103);
                      if (!*(_QWORD *)(v91 + 376))
                      {
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v164 = 136315394;
                          *(_QWORD *)&v164[4] = "HALS_AHPPlugIn.cpp";
                          *(_WORD *)&v164[12] = 1024;
                          *(_DWORD *)&v164[14] = 60;
                          v107 = MEMORY[0x1E0C81028];
                          v108 = "%25s:%-5d  HALS_AHPPlugIn::HALS_AHPPlugIn: couldn't find the driver interface or the nu"
                                 "b interface in something claiming to be a server plug-in";
                          goto LABEL_161;
                        }
LABEL_162:
                        v117 = __cxa_allocate_exception(0x10uLL);
                        *(_QWORD *)v117 = &off_1E69A1B30;
                        v117[2] = 1852797029;
                      }
                    }
                  }
                  else
                  {
                    v160 = 0;
                    LOWORD(v161) = 1;
                  }
                  CACFArray::~CACFArray((CACFArray *)&v160);
                  *(_QWORD *)(v91 + 448) = 0;
                  *(_OWORD *)(v91 + 416) = 0u;
                  *(_OWORD *)(v91 + 432) = 0u;
                  *(_OWORD *)(v91 + 384) = 0u;
                  *(_OWORD *)(v91 + 400) = 0u;
                  BundleID = HALB_CFPlugIn::GetBundleID(*(HALB_CFPlugIn **)(v91 + 360));
                  CACFString::operator=(v91 + 48, BundleID);
                  *(_DWORD *)v164 = 256;
                  CACFString::GetCString(*(const __CFString **)(v91 + 48), (__CFString *)(v91 + 64), v164, v110);
                  v111 = *(_DWORD *)v164;
                  v112 = (char *)operator new[]();
                  v113 = (v111 + 31);
                  snprintf(v112, v113, "com.apple.audio.manager.%s", (const char *)(v91 + 64));
                  v114 = (HALB_Mutex *)operator new();
                  HALB_Mutex::HALB_Mutex(v114);
                  *(_QWORD *)(v91 + 328) = v114;
                  snprintf(v112, v113, "com.apple.audio.manager.%s.event", (const char *)(v91 + 64));
                  v115 = operator new();
                  *(_QWORD *)(v91 + 336) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v115, v112);
                  MEMORY[0x1B5E50664](v112, 0x1000C8077774924);
                  HALS_System::DeviceManagerCreated(v92, (HALS_DeviceManager *)v91);
                }
                CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v147);
              }
              CACFString::~CACFString((CACFString *)&v149);
            }
          }
          closedir(v83);
        }
      }
      else if (v82)
      {
        goto LABEL_130;
      }
LABEL_164:
      CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v152);
    }
    v118 = v157;
    if (v157)
    {
      v119 = (unint64_t *)&v157->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    buf.d_ino = (__uint64_t)&v158;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_171:
    v135 = 0;
    v136 = 0;
    HALS_System::GetInstance(&buf, 0, &v135);
    v121 = (HALS_NotificationManager *)*(unsigned int *)(buf.d_ino + 16);
    *(_QWORD *)&v158 = 0x676C6F62696E6F74;
    DWORD2(v158) = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v121, 0, 1u, (const AudioObjectPropertyAddress *)&v158, v122);
    v123 = (std::__shared_weak_count *)buf.d_seekoff;
    if (buf.d_seekoff)
    {
      v124 = (unint64_t *)(buf.d_seekoff + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = v136;
    if (v136)
    {
      v127 = (unint64_t *)&v136->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    CACentralStateDumpRegisterSubsystem();
    kdebug_trace();
    goto LABEL_182;
  }
  pthread_mutex_unlock(&HALS_System::sInitializationMutex);
LABEL_182:
  applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&v143);
LABEL_183:
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
}

void sub_1B5A1AB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void **a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a14);
  applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a25);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void HALS_System::CheckForDefaultDeviceChanges(HALS_System *this)
{
  uint64_t *platform_behaviors;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[5];
  std::__shared_weak_count *v12;

  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 56))(platform_behaviors) == 1
    && HALS_System::sIsInitialized != 0)
  {
    v4 = *((_QWORD *)this + 158);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 159);
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = *((_QWORD *)this + 30);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZN11HALS_System28CheckForDefaultDeviceChangesEv_block_invoke;
    v11[3] = &__block_descriptor_tmp_92_5621;
    v11[4] = v4;
    v12 = v5;
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    AMCP::Utility::Dispatch_Queue::after(v8, (uint64_t)v11);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
  }
}

void ***applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(void ***a1)
{
  void *v2;

  v2 = **a1;
  if (v2)
  {
    os_release(v2);
    **a1 = 0;
  }
  return a1;
}

void ___ZN11HALS_System11StartServerENS_20Server_Start_OptionsE_block_invoke(uint64_t a1, __sFILE *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  HALS_System *v11;
  std::__shared_weak_count *v12;

  v9 = 0;
  v10 = 0;
  HALS_System::GetInstance(&v11, 0, &v9);
  HALS_System::LogState(v11, a2);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B5A1AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_System::LogState(HALS_System *this, __sFILE *a2)
{
  HALB_Mutex *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  HALB_Mutex *v8;
  int v9;
  HALS_Device *v10;
  unsigned int **v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int begin;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  std::vector<unsigned int>::pointer v44;
  std::vector<unsigned int>::pointer end;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  std::vector<unsigned int>::pointer v53;
  std::vector<unsigned int>::pointer v54;
  int v55;
  unsigned int v56;
  int v57;
  HALS_Device **v58;
  HALS_Device **v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BOOL4 IsHidden;
  int v66;
  const char *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  double v76;
  int v77;
  char v78;
  char v79;
  char v80;
  int v81;
  const char *v82;
  HALS_Object *v83;
  unsigned int **v84;
  unsigned int **v85;
  unsigned int *v86;
  unsigned int v87;
  _BYTE *v88;
  const std::string::value_type *v89;
  int v90;
  int v91;
  std::string *v92;
  int v93;
  int v94;
  int v95;
  _BOOL4 IsActive;
  const char *v97;
  double v98;
  int16x8_t v99;
  int v100;
  uint64_t v101;
  double v102;
  int16x8_t v103;
  int v104;
  int v105;
  Float64 mSampleRate;
  void *v107;
  unsigned int *v108;
  int v109;
  HALB_Info *v110;
  unsigned int BaseClass;
  int v112;
  int v113;
  uint8x8_t v114;
  int16x8_t v115;
  int v116;
  int v117;
  int v118;
  HALB_Info *v119;
  BOOL v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  float v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  BOOL IsSubClass;
  int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  int v148;
  std::vector<unsigned int>::pointer v149;
  std::vector<unsigned int>::pointer v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  float v155;
  int v156;
  int v157;
  int v158;
  int v159;
  HALS_Object *v160;
  HALB_Mutex *v161;
  int v162;
  HALS_Object *v163;
  std::vector<unsigned int>::pointer v164;
  std::vector<unsigned int>::pointer v165;
  unsigned int *v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  int TransportType;
  int v172;
  uint64_t v173;
  int data;
  int v175;
  const char *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  double v182;
  int v183;
  HALS_Object *v184;
  HALS_Object *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *i;
  uint64_t v190;
  int v191;
  unsigned int *v192;
  int v193;
  const __CFDictionary *v194;
  HALS_Object *v195;
  io_registry_entry_t v196;
  const __CFNumber *CFProperty;
  const __CFNumber *v198;
  const __CFNumber *v199;
  const __CFNumber *v200;
  CFTypeID v201;
  CFIndex Count;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t j;
  void *v207;
  uint64_t v208;
  uint64_t k;
  void *v210;
  int64_t v211;
  CFIndex v212;
  int64_t v213;
  BOOL v214;
  unsigned int v215;
  const __CFNumber *ValueAtIndex;
  unsigned int isa;
  const __CFData *v218;
  int v219;
  int value;
  int v221;
  CFIndex Length;
  unint64_t v223;
  int v224;
  char *p_valuePtr;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  _QWORD *v235;
  _QWORD *v236;
  HALS_DeviceManager *v237;
  _QWORD v238[9];
  HALS_Device **v239;
  _QWORD v240[2];
  HALS_Device **v241;
  uint64_t v242;
  void *v243;
  HALS_Device *v244;
  CFAllocatorRef allocator;
  CFTypeRef cf;
  _QWORD v247[8];
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  __n128 (*v251)(_QWORD *, uint64_t);
  void (*v252)(uint64_t);
  _QWORD v253[3];
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  __n128 (*v257)(_QWORD *, uint64_t);
  void (*v258)(uint64_t);
  _QWORD v259[3];
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  __n128 (*v263)(_QWORD *, uint64_t);
  void (*v264)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v265[3];
  HALS_ObjectMap **v266;
  HALS_Device **v267;
  uint64_t v268;
  HALS_ObjectMap **v269;
  HALS_Device *v270;
  uint64_t v271;
  char v272[4];
  unsigned int **v273;
  unsigned int **v274;
  uint64_t v275;
  char v276[5];
  _QWORD v277[2];
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  AudioStreamBasicDescription existing;
  std::string v282;
  uint64_t v283;
  int v284;
  int v285;
  unsigned __int32 v286;
  char v287;
  int v288;
  int v289;
  int v290;
  float v291;
  int v292;
  float v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  __CFString v300;
  std::vector<unsigned int> __x[5];
  std::vector<unsigned int> v302;
  unsigned __int8 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __CFString valuePtr;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;

  v314 = *MEMORY[0x1E0C80C00];
  v260 = 0;
  v261 = &v260;
  v262 = 0x4002000000;
  v263 = __Block_byref_object_copy__5429;
  v264 = __Block_byref_object_dispose__5430;
  memset(v265, 0, sizeof(v265));
  v254 = 0;
  v255 = &v254;
  v256 = 0x4002000000;
  v257 = __Block_byref_object_copy__35;
  v258 = __Block_byref_object_dispose__36;
  memset(v259, 0, sizeof(v259));
  v248 = 0;
  v249 = &v248;
  v250 = 0x4002000000;
  v251 = __Block_byref_object_copy__37;
  v252 = __Block_byref_object_dispose__38;
  memset(v253, 0, sizeof(v253));
  v247[0] = MEMORY[0x1E0C809B0];
  v247[1] = 0x40000000;
  v247[2] = ___ZNK11HALS_System8LogStateEP7__sFILE_block_invoke;
  v247[3] = &unk_1E697D948;
  v247[4] = &v260;
  v247[5] = &v254;
  v247[6] = &v248;
  v247[7] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v247);
  fprintf(a2, "Number of Device Managers: %lu\n", (v261[6] - v261[5]) >> 3);
  v4 = (_QWORD *)v261[5];
  v235 = (_QWORD *)v261[6];
  if (v4 != v235)
  {
    allocator = (CFAllocatorRef)((char *)&v282.__r_.__value_.__r.__words[1] + 1);
    cf = (char *)v282.__r_.__value_.__r.__words + 3;
    v242 = 0x676C6F626C6E616DLL;
    qmemcpy(v238, "lvcbbolgiccsbolgndihbolgnoxbbolgorpbbolgimhbbolgivhbbolguahbbolgnartbolg", sizeof(v238));
    qmemcpy(v240, "#lcbbolg#vdbbolg", sizeof(v240));
    while (1)
    {
      v5 = *v4;
      fwrite("    ", 4uLL, 1uLL, a2);
      fprintf(a2, "Device Manager %u\n", *(_DWORD *)(v5 + 16));
      *(_DWORD *)v272 = 128;
      v237 = (HALS_DeviceManager *)v5;
      CACFString::GetCString(*(const __CFString **)(v5 + 48), &v300, v272, v6);
      v7 = 2;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v7;
      }
      while (v7);
      fprintf(a2, "Bundle ID:               %s\n", (const char *)&v300);
      v269 = 0;
      v270 = 0;
      v271 = 0;
      valuePtr.isa = (void *)MEMORY[0x1E0C809B0];
      valuePtr.info = 0x40000000;
      valuePtr.data = (char *)___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
      valuePtr.length = (uint64_t)&__block_descriptor_tmp_8181;
      *(_QWORD *)&v308 = v237;
      *((_QWORD *)&v308 + 1) = &v269;
      *(_QWORD *)&v309 = 0;
      v8 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)v237 + 56))(v237);
      HALB_CommandGate::ExecuteCommand(v8, (uint64_t)&valuePtr);
      v236 = v4;
      v9 = 2;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v9;
      }
      while (v9);
      fprintf(a2, "Number of Boxes:         %lu\n", (v270 - (HALS_Device *)v269) >> 3);
      v11 = (unsigned int **)v269;
      v10 = v270;
      v244 = v270;
      while (v11 != (unsigned int **)v10)
      {
        v12 = *v11;
        v13 = 3;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v13;
        }
        while (v13);
        fprintf(a2, "Box %u\n", v12[4]);
        v14 = v12[4];
        valuePtr.isa = (void *)v242;
        LODWORD(valuePtr.info) = 0;
        v302.__begin_ = 0;
        LODWORD(__x[0].__begin_) = 0;
        (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, std::vector<unsigned int> *, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v14, &valuePtr, 8, __x, &v302, 0, 0, 0);
        *(_QWORD *)&existing.mFormatID = v302.__begin_;
        *(_QWORD *)&existing.mSampleRate = &off_1E69A0F60;
        OS::CF::String::AsCString((CFIndex)&existing, (UInt8 *)&valuePtr, 128);
        v15 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v15;
        }
        while (v15);
        fprintf(a2, "Name:                 %s\n", (const char *)&valuePtr);
        v16 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v16;
        }
        while (v16);
        fprintf(a2, "UID:                  %s\n", (const char *)v12 + 80);
        v17 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[8];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v282.__r_.__value_.__l.__data_) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, std::string *, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v17, &v302, 4, &v282, __x, 0, 0, 0);
        v282.__r_.__value_.__s.__data_[0] = BYTE3(__x[0].__begin_);
        v282.__r_.__value_.__s.__data_[1] = BYTE2(__x[0].__begin_);
        v282.__r_.__value_.__s.__data_[2] = BYTE1(__x[0].__begin_);
        *(_WORD *)((char *)v282.__r_.__value_.__r.__words + 3) = LOBYTE(__x[0].__begin_);
        v18 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v18;
        }
        while (v18);
        fprintf(a2, "Transport Type:       '%s'\n", (const char *)&v282);
        v19 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[7];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, unsigned int ***, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v19, &v302, 4, &v273, __x, 0, 0, 0);
        begin = (int)__x[0].__begin_;
        v21 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v21;
        }
        while (v21);
        v22 = "yes";
        if (!begin)
          v22 = "no";
        fprintf(a2, "Has Audio:            %s\n", v22);
        v23 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[6];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, unsigned int ***, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v23, &v302, 4, &v273, __x, 0, 0, 0);
        v24 = (int)__x[0].__begin_;
        v25 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v25;
        }
        while (v25);
        v26 = "yes";
        if (!v24)
          v26 = "no";
        fprintf(a2, "Has Video:            %s\n", v26);
        v27 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[5];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, unsigned int ***, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v27, &v302, 4, &v273, __x, 0, 0, 0);
        v28 = (int)__x[0].__begin_;
        v29 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v29;
        }
        while (v29);
        v30 = "yes";
        if (!v28)
          v30 = "no";
        fprintf(a2, "Has MIDI:             %s\n", v30);
        v31 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[4];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, unsigned int ***, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v31, &v302, 4, &v273, __x, 0, 0, 0);
        v32 = (int)__x[0].__begin_;
        v33 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v33;
        }
        while (v33);
        v34 = "yes";
        if (!v32)
          v34 = "no";
        fprintf(a2, "Is Protected:         %s\n", v34);
        v35 = v12[4];
        v302.__begin_ = (std::vector<unsigned int>::pointer)v238[3];
        LODWORD(v302.__end_) = 0;
        LODWORD(__x[0].__begin_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, unsigned int ***, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v35, &v302, 4, &v273, __x, 0, 0, 0);
        v36 = (int)__x[0].__begin_;
        v37 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v37;
        }
        while (v37);
        v38 = "yes";
        if (!v36)
          v38 = "no";
        fprintf(a2, "Is Acquired:          %s\n", v38);
        if (v36)
        {
          v39 = v12[4];
          v302.__begin_ = (std::vector<unsigned int>::pointer)v240[1];
          LODWORD(v302.__end_) = 0;
          v40 = (*(uint64_t (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 104))(v12, v39, &v302, 0, 0, 0);
          LODWORD(__x[0].__begin_) = 0;
          std::vector<unsigned int>::vector(&v302, v40 >> 2, (const std::vector<unsigned int>::value_type *)__x);
          v41 = v12[4];
          __x[0].__begin_ = (std::vector<unsigned int>::pointer)v240[1];
          LODWORD(__x[0].__end_) = 0;
          LODWORD(v273) = 0;
          (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, _QWORD, unsigned int ***, std::vector<unsigned int>::pointer, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v41, __x, v40 & 0xFFFFFFFC, &v273, v302.__begin_, 0, 0, 0);
          v42 = v273;
          v43 = 4;
          do
          {
            fwrite("    ", 4uLL, 1uLL, a2);
            --v43;
          }
          while (v43);
          fprintf(a2, "Number Devices:       %u\n", v42 >> 2);
          v44 = v302.__begin_;
          end = v302.__end_;
          while (v44 != end)
          {
            v46 = 5;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v46;
            }
            while (v46);
            v47 = *v44++;
            fprintf(a2, "Device: %u\n", v47);
          }
          v48 = v12[4];
          __x[0].__begin_ = (std::vector<unsigned int>::pointer)v240[0];
          LODWORD(__x[0].__end_) = 0;
          v49 = (*(uint64_t (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 104))(v12, v48, __x, 0, 0, 0);
          LODWORD(v278) = 0;
          std::vector<unsigned int>::vector(__x, v49 >> 2, (const std::vector<unsigned int>::value_type *)&v278);
          v50 = v12[4];
          *(_QWORD *)&v278 = v240[0];
          DWORD2(v278) = 0;
          LODWORD(v273) = 0;
          (*(void (**)(unsigned int *, uint64_t, __int128 *, _QWORD, unsigned int ***, std::vector<unsigned int>::pointer, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 112))(v12, v50, &v278, v49 & 0xFFFFFFFC, &v273, __x[0].__begin_, 0, 0, 0);
          v51 = v273;
          v52 = 4;
          do
          {
            fwrite("    ", 4uLL, 1uLL, a2);
            --v52;
          }
          while (v52);
          fprintf(a2, "Number Clock Devices: %u\n", v51 >> 2);
          v53 = __x[0].__begin_;
          v54 = __x[0].__end_;
          if (__x[0].__begin_ != __x[0].__end_)
          {
            do
            {
              v55 = 5;
              do
              {
                fwrite("    ", 4uLL, 1uLL, a2);
                --v55;
              }
              while (v55);
              v56 = *v53++;
              fprintf(a2, "Device: %u\n", v56);
            }
            while (v53 != v54);
            v53 = __x[0].__begin_;
          }
          if (v53)
          {
            __x[0].__end_ = v53;
            operator delete(v53);
          }
          if (v302.__begin_)
          {
            v302.__end_ = v302.__begin_;
            operator delete(v302.__begin_);
          }
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&existing);
        ++v11;
        v10 = v244;
      }
      v266 = 0;
      v267 = 0;
      v268 = 0;
      HALS_DeviceManager::CopyDeviceList(v237, (HALS_DeviceManager::BasicDeviceList *)&v266, 1, 0);
      v57 = 2;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v57;
      }
      while (v57);
      fprintf(a2, "Number of Devices:       %lu\n", v267 - v266);
      v58 = v266;
      v59 = v267;
      v239 = v267;
LABEL_60:
      if (v58 != v59)
        break;
      memset(&v302, 0, sizeof(v302));
      valuePtr.isa = (void *)MEMORY[0x1E0C809B0];
      valuePtr.info = 0x40000000;
      valuePtr.data = (char *)___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
      valuePtr.length = (uint64_t)&__block_descriptor_tmp_7_8182;
      *(_QWORD *)&v308 = v237;
      *((_QWORD *)&v308 + 1) = &v302;
      v161 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)v237 + 56))(v237);
      HALB_CommandGate::ExecuteCommand(v161, (uint64_t)&valuePtr);
      v162 = 2;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v162;
      }
      while (v162);
      fprintf(a2, "Number of Clock Devices: %lu\n", ((char *)v302.__end_ - (char *)v302.__begin_) >> 3);
      v164 = v302.__begin_;
      v165 = v302.__end_;
      v244 = (HALS_Device *)v302.__end_;
      while (v164 != v165)
      {
        v166 = *(unsigned int **)v164;
        fputc(10, a2);
        v167 = 3;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v167;
        }
        while (v167);
        fprintf(a2, "Clock Device %u\n", v166[4]);
        v168 = v166[4];
        valuePtr.isa = (void *)v242;
        LODWORD(valuePtr.info) = 0;
        existing.mSampleRate = 0.0;
        LODWORD(v282.__r_.__value_.__l.__data_) = 0;
        (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, std::string *, AudioStreamBasicDescription *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v166 + 112))(v166, v168, &valuePtr, 8, &v282, &existing, 0, 0, 0);
        __x[0].__end_ = *(std::vector<unsigned int>::pointer *)&existing.mSampleRate;
        __x[0].__begin_ = (std::vector<unsigned int>::pointer)&off_1E69A0F60;
        OS::CF::String::AsCString((CFIndex)__x, (UInt8 *)&valuePtr, 128);
        v169 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v169;
        }
        while (v169);
        fprintf(a2, "Name:                %s\n", (const char *)&valuePtr);
        v170 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v170;
        }
        while (v170);
        fprintf(a2, "UID:                 %s\n", (const char *)v166 + 112);
        TransportType = HALS_IODevice::GetTransportType((HALS_IODevice *)v166);
        LOBYTE(v278) = HIBYTE(TransportType);
        BYTE1(v278) = BYTE2(TransportType);
        BYTE2(v278) = BYTE1(TransportType);
        *(_WORD *)((char *)&v278 + 3) = TransportType;
        v172 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v172;
        }
        while (v172);
        fprintf(a2, "Transport Type:      '%s'\n", (const char *)&v278);
        v173 = v166[4];
        *(_QWORD *)&existing.mSampleRate = v238[2];
        existing.mFormatID = 0;
        LODWORD(v282.__r_.__value_.__l.__data_) = 0;
        LODWORD(v273) = 0;
        (*(void (**)(unsigned int *, uint64_t, AudioStreamBasicDescription *, uint64_t, unsigned int ***, std::string *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v166 + 112))(v166, v173, &existing, 4, &v273, &v282, 0, 0, 0);
        data = (int)v282.__r_.__value_.__l.__data_;
        v175 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v175;
        }
        while (v175);
        v176 = "yes";
        if (!data)
          v176 = "no";
        fprintf(a2, "Is Hidden:           %s\n", v176);
        v177 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v166 + 320))(v166);
        v178 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v178;
        }
        while (v178);
        fprintf(a2, "Clock Domain:        %u\n", v177);
        v179 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v166 + 304))(v166, 1);
        v180 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v166 + 304))(v166, 0);
        v181 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v181;
        }
        while (v181);
        fprintf(a2, "Latency              In: %u Out: %u\n", v179, v180);
        v182 = (*(double (**)(unsigned int *))(*(_QWORD *)v166 + 264))(v166);
        v183 = 4;
        do
        {
          fwrite("    ", 4uLL, 1uLL, a2);
          --v183;
        }
        while (v183);
        fprintf(a2, "Nominal Sample Rate: %.3f\n", v182);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__x);
        v164 += 2;
        v165 = (std::vector<unsigned int>::pointer)v244;
      }
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)&v302, v163);
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v266, v184);
      HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v269, v185);
      v4 = v236 + 1;
      if (v236 + 1 == v235)
        goto LABEL_244;
    }
    v241 = v58;
    v244 = *v58;
    v60 = 3;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v60;
    }
    while (v60);
    fprintf(a2, "Device %u\n", *((_DWORD *)v244 + 4));
    v277[1] = HALS_Device::CopyServerLocalizedName(v244);
    v277[0] = &off_1E69A0F60;
    OS::CF::String::AsCString((CFIndex)v277, (UInt8 *)__x, 128);
    v61 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v61;
    }
    while (v61);
    fprintf(a2, "Name:                  %s\n", (const char *)__x);
    v62 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v62;
    }
    while (v62);
    fprintf(a2, "UID:                   %s\n", (const char *)v244 + 156);
    v63 = HALS_IODevice::GetTransportType(v244);
    v276[0] = HIBYTE(v63);
    v276[1] = BYTE2(v63);
    v276[2] = BYTE1(v63);
    v276[3] = v63;
    v64 = 4;
    v276[4] = 0;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v64;
    }
    while (v64);
    fprintf(a2, "Transport Type:        '%s'\n", v276);
    IsHidden = HALS_Device::IsHidden(v244);
    v66 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v66;
    }
    while (v66);
    v67 = "yes";
    if (!IsHidden)
      v67 = "no";
    fprintf(a2, "Is Hidden:             %s\n", v67);
    v68 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v244 + 320))(v244);
    v69 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v69;
    }
    while (v69);
    fprintf(a2, "Clock Domain:          %u\n", v68);
    v70 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)v244 + 304))(v244, 1);
    v71 = (*(uint64_t (**)(HALS_Device *, _QWORD))(*(_QWORD *)v244 + 304))(v244, 0);
    v72 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v72;
    }
    while (v72);
    fprintf(a2, "Latency                In: %u Out: %u\n", v70, v71);
    v73 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(_QWORD *)v244 + 312))(v244, 1);
    v74 = (*(uint64_t (**)(HALS_Device *, _QWORD))(*(_QWORD *)v244 + 312))(v244, 0);
    v75 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v75;
    }
    while (v75);
    fprintf(a2, "Safety Offset          In: %u Out: %u\n", v73, v74);
    v76 = (*(double (**)(HALS_Device *))(*(_QWORD *)v244 + 264))(v244);
    v77 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v77;
    }
    while (v77);
    fprintf(a2, "Nominal Sample Rate:   %.3f\n", v76);
    v78 = 0;
    v79 = 1;
LABEL_82:
    v80 = v79;
    v274 = 0;
    v273 = 0;
    v275 = 0;
    HALS_Device::CopyStreamList((uint64_t)v244, v78 & 1, (char **)&v273);
    v81 = 4;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v81;
    }
    while (v81);
    v82 = "Input Streams: ";
    if ((v80 & 1) != 0)
      v82 = "Output Streams:";
    fprintf(a2, "Number %s %lu\n", v82, v274 - v273);
    v84 = v273;
    v85 = v274;
    while (1)
    {
      if (v84 == v85)
      {
        HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v273, v83);
        v79 = 0;
        v78 = 1;
        if ((v80 & 1) == 0)
        {
          memset(&existing, 0, 24);
          (*(void (**)(HALS_Device *, AudioStreamBasicDescription *))(*(_QWORD *)v244 + 616))(v244, &existing);
          v105 = 4;
          do
          {
            fwrite("    ", 4uLL, 1uLL, a2);
            --v105;
          }
          while (v105);
          fprintf(a2, "Number Controls:       %lu\n", (uint64_t)(*(_QWORD *)&existing.mFormatID - *(_QWORD *)&existing.mSampleRate) >> 3);
          mSampleRate = existing.mSampleRate;
          v107 = *(void **)&existing.mFormatID;
          v243 = *(void **)&existing.mFormatID;
          while (2)
          {
            if (*(void **)&mSampleRate == v107)
            {
              HALS_Device::DumpDuckHistory(v244, 1, a2, 4);
              HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)&existing, v160);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v277);
              v58 = v241 + 1;
              v59 = v239;
              goto LABEL_60;
            }
            v108 = **(unsigned int ***)&mSampleRate;
            v109 = 5;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v109;
            }
            while (v109);
            fprintf(a2, "Control %u\n", v108[4]);
            v110 = (HALB_Info *)v108[5];
            BaseClass = v108[6];
            v282.__r_.__value_.__s.__data_[0] = HIBYTE(v108[5]);
            v282.__r_.__value_.__s.__data_[1] = BYTE2(v110);
            v282.__r_.__value_.__s.__data_[2] = BYTE1(v110);
            *(_WORD *)((char *)v282.__r_.__value_.__r.__words + 3) = v110;
            if (BaseClass == (_DWORD)v110)
              BaseClass = HALB_Info::GetBaseClass(v110);
            LOBYTE(v273) = HIBYTE(BaseClass);
            BYTE1(v273) = BYTE2(BaseClass);
            BYTE2(v273) = BYTE1(BaseClass);
            *(_WORD *)((char *)&v273 + 3) = BaseClass;
            v112 = 6;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v112;
            }
            while (v112);
            fprintf(a2, "Class:                  '%s'\n", (const char *)&v282);
            v113 = 6;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v113;
            }
            while (v113);
            fprintf(a2, "Base Class:             '%s'\n", (const char *)&v273);
            v114.i32[0] = v108[12];
            v115 = (int16x8_t)vmovl_u8(v114);
            *(int16x4_t *)v115.i8 = vrev64_s16(*(int16x4_t *)v115.i8);
            v286 = vmovn_s16(v115).u32[0];
            v287 = 0;
            v116 = 6;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v116;
            }
            while (v116);
            fprintf(a2, "Scope:                  '%s'\n", (const char *)&v286);
            v117 = 6;
            do
            {
              fwrite("    ", 4uLL, 1uLL, a2);
              --v117;
            }
            while (v117);
            fprintf(a2, "Element:                %d\n", v108[13]);
            v118 = v108[5];
            v119 = (HALB_Info *)v108[6];
            if (v118 == (_DWORD)v119 || v118 == 1936483442)
            {
              v121 = v118 == (_DWORD)v119;
              if (v118 == 1936483442)
                v121 = 0;
              if (v121)
                goto LABEL_141;
LABEL_146:
              v123 = v108[4];
              valuePtr.isa = (void *)0x676C6F6273647276;
              LODWORD(valuePtr.info) = 0;
              v289 = 0;
              v288 = 0;
              (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v123, &valuePtr, 4, &v288, &v289, 0, 0, 0);
              v124 = v289;
              v302.__begin_ = 0;
              LODWORD(v278) = 8;
              v125 = v108[4];
              valuePtr.isa = (void *)0x676C6F6273647272;
              LODWORD(valuePtr.info) = 0;
              (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, __int128 *, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v125, &valuePtr, 8, &v278, &v302, 0, 0, 0);
              v126 = 6;
              do
              {
                fwrite("    ", 4uLL, 1uLL, a2);
                --v126;
              }
              while (v126);
              fprintf(a2, "Value:                  %u\n", v124);
              v127 = 6;
              do
              {
                fwrite("    ", 4uLL, 1uLL, a2);
                --v127;
              }
              while (v127);
              fprintf(a2, "Min Value:              %u\n", LODWORD(v302.__begin_));
              v128 = 6;
              do
              {
                fwrite("    ", 4uLL, 1uLL, a2);
                --v128;
              }
              while (v128);
              fprintf(a2, "Max Value:              %u\n");
            }
            else
            {
              if ((_DWORD)v119 == 1936483442)
                goto LABEL_146;
LABEL_141:
              if (v118 > 1936028006)
              {
                if (v118 != 1936028007 && v118 != 1937072758)
                {
                  v122 = 1986817381;
                  goto LABEL_155;
                }
                goto LABEL_156;
              }
              if (v118 == 1818588780)
                goto LABEL_156;
              v122 = 1886544237;
LABEL_155:
              if (v118 == v122)
              {
LABEL_156:
                v129 = v108[4];
                valuePtr.isa = (void *)0x676C6F626C637376;
                LODWORD(valuePtr.info) = 0;
                v291 = 0.0;
                v290 = 0;
                (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, int *, float *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v129, &valuePtr, 4, &v290, &v291, 0, 0, 0);
                v130 = v291;
                v131 = v108[4];
                valuePtr.isa = (void *)0x676C6F626C636476;
                LODWORD(valuePtr.info) = 0;
                v293 = 0.0;
                v292 = 0;
                (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, int *, float *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v131, &valuePtr, 4, &v292, &v293, 0, 0, 0);
                v132 = v293;
                valuePtr.info = 0;
                valuePtr.isa = 0;
                v133 = v108[4];
                v302.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F626C636476;
                LODWORD(v302.__end_) = 0;
                v294 = 0;
                (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, int *, __CFString *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v133, &v302, 16, &v294, &valuePtr, 0, 0, 0);
                v134 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v134;
                }
                while (v134);
                fprintf(a2, "Scalar Value:           %.5f\n", v130);
                v135 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v135;
                }
                while (v135);
                fprintf(a2, "dB Value:               %.5f\n", v132);
                v136 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v136;
                }
                while (v136);
                fprintf(a2, "Min dB Value:           %.5f\n", *(double *)&valuePtr.isa);
                v137 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v137;
                }
                while (v137);
                fprintf(a2, "Max dB Value:           %.5f\n");
                goto LABEL_165;
              }
              if (v118 == (_DWORD)v119)
              {
                if (((v118 != (_DWORD)v119) | HALB_Info::IsSubClass((HALB_Info *)v108[5], 1953458028)) == 1)
                {
LABEL_168:
                  v138 = v108[4];
                  valuePtr.isa = (void *)v238[0];
                  LODWORD(valuePtr.info) = 0;
                  v295 = 0;
                  (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v138, &valuePtr, 4, &v295, (char *)&v295 + 4, 0, 0, 0);
                  v139 = 6;
                  do
                  {
                    fwrite("    ", 4uLL, 1uLL, a2);
                    --v139;
                  }
                  while (v139);
                  fprintf(a2, "Value:                  %s\n");
                  goto LABEL_165;
                }
              }
              else
              {
                if ((int)v119 <= 1936028006)
                {
                  if ((_DWORD)v119 == 1818588780)
                    goto LABEL_156;
                  v140 = 1886544237;
                }
                else
                {
                  if ((_DWORD)v119 == 1936028007 || (_DWORD)v119 == 1986817381)
                    goto LABEL_156;
                  v140 = 1937072758;
                }
                if ((_DWORD)v119 == v140)
                  goto LABEL_156;
                IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v108[5], 1953458028);
                if (v118 == (_DWORD)v119 || IsSubClass || HALB_Info::IsSubClass(v119, 1953458028))
                  goto LABEL_168;
              }
              if (v118 <= 1751740517)
              {
                if (v118 != 1668047723 && v118 != 1684370292)
                {
                  v142 = 1685287523;
                  goto LABEL_188;
                }
                goto LABEL_189;
              }
              if (v118 == 1751740518 || v118 == 1852601964)
                goto LABEL_189;
              v142 = 1936483188;
LABEL_188:
              if (v118 == v142)
              {
LABEL_189:
                v143 = v108[4];
                valuePtr.isa = (void *)v238[1];
                LODWORD(valuePtr.info) = 0;
                v144 = (*(uint64_t (**)(unsigned int *, uint64_t, __CFString *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 104))(v108, v143, &valuePtr, 0, 0, 0);
                LODWORD(valuePtr.isa) = 0;
                std::vector<unsigned int>::vector(&v302, v144 >> 2, (const std::vector<unsigned int>::value_type *)&valuePtr);
                v145 = v108[4];
                valuePtr.isa = (void *)v238[1];
                LODWORD(valuePtr.info) = 0;
                v296 = 0;
                (*(void (**)(unsigned int *, uint64_t, __CFString *, _QWORD, unsigned int *, std::vector<unsigned int>::pointer, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v145, &valuePtr, v144 & 0xFFFFFFFC, &v296, v302.__begin_, 0, 0, 0);
                v146 = v296;
                v147 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v147;
                }
                while (v147);
                fprintf(a2, "Number Selector Values: %u\n", v146 >> 2);
                v148 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v148;
                }
                while (v148);
                fwrite("Selector Value:        ", 0x17uLL, 1uLL, a2);
                v149 = v302.__begin_;
                v150 = v302.__end_;
                while (v149 != v150)
                {
                  v151 = v108[4];
                  valuePtr.isa = (void *)0x676C6F626E696373;
                  LODWORD(valuePtr.info) = 0;
                  v298 = 0;
                  v297 = 0;
                  (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, int *, uint64_t *, uint64_t, std::vector<unsigned int>::pointer, _QWORD))(*(_QWORD *)v108 + 112))(v108, v151, &valuePtr, 8, &v297, &v298, 4, v149, 0);
                  *((_QWORD *)&v278 + 1) = v298;
                  *(_QWORD *)&v278 = &off_1E69A0F60;
                  OS::CF::String::AsCString((CFIndex)&v278, (UInt8 *)&valuePtr, 128);
                  fprintf(a2, " %u->%s", *v149, (const char *)&valuePtr);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v278);
                  ++v149;
                }
                fputc(10, a2);
                if (v302.__begin_)
                {
                  v302.__end_ = v302.__begin_;
                  operator delete(v302.__begin_);
                }
                goto LABEL_165;
              }
              if (v118 != (_DWORD)v119)
              {
                if ((int)v119 > 1751740517)
                {
                  if ((_DWORD)v119 == 1751740518 || (_DWORD)v119 == 1936483188)
                    goto LABEL_189;
                  v159 = 1852601964;
                }
                else
                {
                  if ((_DWORD)v119 == 1668047723 || (_DWORD)v119 == 1684370292)
                    goto LABEL_189;
                  v159 = 1685287523;
                }
                if ((_DWORD)v119 == v159)
                  goto LABEL_189;
                if (v118 != (_DWORD)v119 && v118 != 1936744814 && (_DWORD)v119 != 1936744814)
                  goto LABEL_165;
LABEL_200:
                v152 = v108[4];
                valuePtr.isa = (void *)0x676C6F6273647276;
                LODWORD(valuePtr.info) = 0;
                v299 = 0;
                (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v152, &valuePtr, 4, &v299, (char *)&v299 + 4, 0, 0, 0);
                v153 = HIDWORD(v299);
                v302.__begin_ = 0;
                LODWORD(v278) = 8;
                v154 = v108[4];
                valuePtr.isa = (void *)0x676C6F6273647272;
                LODWORD(valuePtr.info) = 0;
                (*(void (**)(unsigned int *, uint64_t, __CFString *, uint64_t, __int128 *, std::vector<unsigned int> *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v108 + 112))(v108, v154, &valuePtr, 8, &v278, &v302, 0, 0, 0);
                v155 = (float)v153;
                v156 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v156;
                }
                while (v156);
                fprintf(a2, "Value:                  %.5f\n", v155);
                v157 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v157;
                }
                while (v157);
                fprintf(a2, "Left Channel:           %u\n", LODWORD(v302.__begin_));
                v158 = 6;
                do
                {
                  fwrite("    ", 4uLL, 1uLL, a2);
                  --v158;
                }
                while (v158);
                fprintf(a2, "Right Channel:          %u\n");
                goto LABEL_165;
              }
              if (v118 == 1936744814)
                goto LABEL_200;
            }
LABEL_165:
            *(_QWORD *)&mSampleRate += 8;
            v107 = v243;
            continue;
          }
        }
        goto LABEL_82;
      }
      v86 = *v84;
      memset(&v282, 0, sizeof(v282));
      v87 = v86[14];
      if (v87 == 2)
        break;
      if (v87 == 1)
      {
        *((_BYTE *)&v282.__r_.__value_.__s + 23) = 9;
        v282.__r_.__value_.__s.__data_[8] = 101;
        v282.__r_.__value_.__r.__words[0] = *(_QWORD *)"reference";
        v88 = allocator;
LABEL_92:
        *v88 = 0;
        goto LABEL_97;
      }
      if (*((_BYTE *)v86 + 52))
        v89 = "input";
      else
        v89 = "output";
      std::string::__assign_external(&v282, v89);
LABEL_97:
      v90 = 5;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v90;
      }
      while (v90);
      fprintf(a2, "Stream %u\n", v86[4]);
      v91 = 6;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v91;
      }
      while (v91);
      v92 = &v282;
      if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v92 = (std::string *)v282.__r_.__value_.__r.__words[0];
      fprintf(a2, "Direction:               %s\n", (const char *)v92);
      v93 = 6;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v93;
      }
      while (v93);
      v94 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v86 + 200))(v86);
      fprintf(a2, "Starting Channel:        %u\n", v94);
      v95 = 6;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v95;
      }
      while (v95);
      IsActive = HALS_Stream::GetStreamIsActive(v86);
      v97 = "yes";
      if (!IsActive)
        v97 = "no";
      fprintf(a2, "Is Active:               %s\n", v97);
      memset(&existing, 0, sizeof(existing));
      HALS_Stream::GetCurrentVirtualFormat((HALS_Stream *)v86, &existing);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&existing, (char *)&valuePtr, 0x80uLL, v98, v99);
      v100 = 6;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v100;
      }
      while (v100);
      fprintf(a2, "Current Virtual Format:  %s\n", (const char *)&valuePtr);
      v280 = 0;
      v278 = 0u;
      v279 = 0u;
      v101 = v86[4];
      v283 = 0x676C6F6270667420;
      v284 = 0;
      v285 = 0;
      v102 = (*(double (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v86 + 112))(v86, v101, &v283, 40, &v285, &v278, 0, 0, 0);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&v278, (char *)&v302, 0x80uLL, v102, v103);
      v104 = 6;
      do
      {
        fwrite("    ", 4uLL, 1uLL, a2);
        --v104;
      }
      while (v104);
      fprintf(a2, "Current Physical Format: %s\n", (const char *)&v302);
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      ++v84;
    }
    *((_BYTE *)&v282.__r_.__value_.__s + 23) = 3;
    qmemcpy(&v282, "DSP", 3);
    v88 = cf;
    goto LABEL_92;
  }
LABEL_244:
  fprintf(a2, "Number of IO Contexts: %lu\n", (v255[6] - v255[5]) >> 3);
  v186 = v255[5];
  v187 = v255[6];
  while (v186 != v187)
  {
    (*(void (**)(_QWORD, __sFILE *, uint64_t))(**(_QWORD **)(*(_QWORD *)v186 + 96) + 368))(*(_QWORD *)(*(_QWORD *)v186 + 96), a2, 1);
    v186 += 8;
  }
  fprintf(a2, "Number of Clients: %lu\n", (v249[6] - v249[5]) >> 3);
  v188 = (uint64_t *)v249[5];
  for (i = (uint64_t *)v249[6]; v188 != i; ++v188)
  {
    v190 = *v188;
    fwrite("    ", 4uLL, 1uLL, a2);
    fprintf(a2, "Client %u\n", *(_DWORD *)(v190 + 16));
    v191 = 2;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v191;
    }
    while (v191);
    fprintf(a2, "PID:       %u\n", *(_DWORD *)(v190 + 232));
    LODWORD(v302.__begin_) = 128;
    CACFString::GetCString(*(const __CFString **)(v190 + 240), &valuePtr, (char *)&v302, v192);
    v193 = 2;
    do
    {
      fwrite("    ", 4uLL, 1uLL, a2);
      --v193;
    }
    while (v193);
    fprintf(a2, "Bundle ID: %s\n", (const char *)&valuePtr);
  }
  v302.__end_cap_.__value_ = (unsigned int *)0x1000000000;
  v303 = 0;
  v244 = (HALS_Device *)&v304;
  v306 = 0;
  v304 = 0;
  v305 = 0;
  v302.__begin_ = (std::vector<unsigned int>::pointer)a2;
  v302.__end_ = (std::vector<unsigned int>::pointer)1;
  LODWORD(existing.mSampleRate) = 0;
  v194 = IOServiceMatching("AppleEmbeddedAudio");
  if (!IOServiceGetMatchingServices(*MEMORY[0x1E0CBBAA8], v194, (io_iterator_t *)&existing))
  {
    v243 = (char *)&v302.__end_cap_.__value_ + 4;
    HIDWORD(v302.__end_) = 0;
    allocator = (CFAllocatorRef)*MEMORY[0x1E0C9AE08];
    while (1)
    {
      do
      {
        v196 = IOIteratorNext(LODWORD(existing.mSampleRate));
        HIDWORD(v302.__end_) = v196;
        if (!v196)
          goto LABEL_254;
        cf = IORegistryEntryCreateCFProperty(v196, CFSTR("CodecRegisterData"), allocator, 0);
      }
      while (!cf);
      CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(HIDWORD(v302.__end_), CFSTR("CodecRegisterStartIndex"), allocator, 0);
      v198 = CFProperty;
      if (CFProperty)
      {
        LODWORD(valuePtr.isa) = 0;
        if (CFNumberGetValue(CFProperty, kCFNumberSInt32Type, &valuePtr))
          LODWORD(v302.__end_cap_.__value_) = valuePtr.isa;
        CFRelease(v198);
      }
      v199 = (const __CFNumber *)IORegistryEntryCreateCFProperty(HIDWORD(v302.__end_), CFSTR("CodecRegisterDisplayBase"), allocator, 0);
      v200 = v199;
      if (v199)
      {
        if (!CFNumberGetValue(v199, kCFNumberSInt32Type, v243))
          HIDWORD(v302.__end_cap_.__value_) = 16;
        CFRelease(v200);
      }
      v201 = CFGetTypeID(cf);
      if (v201 != CFArrayGetTypeID())
        break;
      Count = CFArrayGetCount((CFArrayRef)cf);
      v203 = Count;
      if (Count >= 0)
        v204 = Count;
      else
        v204 = Count + 1;
      v205 = v304;
      for (j = v305; j != v205; j -= 32)
      {
        v207 = *(void **)(j - 24);
        if (v207)
        {
          *(_QWORD *)(j - 16) = v207;
          operator delete(v207);
        }
      }
      v211 = v204 >> 1;
      v305 = v205;
      std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve((uint64_t *)v244, v211);
      if (v203 < 2)
        goto LABEL_304;
      v212 = 0;
      v213 = 0;
      v214 = 0;
      v215 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)cf, v212);
        LODWORD(valuePtr.isa) = 0;
        if (ValueAtIndex)
        {
          if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr))
          {
            isa = valuePtr.isa;
            if (LODWORD(valuePtr.isa) < v215)
              v303 = 1;
            v218 = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)cf, v212 + 1);
            v219 = v303 ? 4 : 1;
            v215 = isa;
            if (!CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>((uint64_t *)v244, v218, (int)valuePtr.isa, v219))break;
          }
        }
        ++v213;
        v212 += 2;
        v214 = v211 <= v213;
        if (v211 == v213)
          goto LABEL_304;
      }
      fprintf((FILE *)v302.__begin_, "Error encountered while reading register data for register address %x\n", LODWORD(valuePtr.isa));
      if (v214)
        goto LABEL_304;
LABEL_323:
      CFRelease(cf);
    }
    if (v201 == CFDataGetTypeID())
    {
      v208 = v304;
      for (k = v305; k != v208; k -= 32)
      {
        v210 = *(void **)(k - 24);
        if (v210)
        {
          *(_QWORD *)(k - 16) = v210;
          operator delete(v210);
        }
      }
      v305 = v208;
      value = (int)v302.__end_cap_.__value_;
      v221 = v303;
      Length = CFDataGetLength((CFDataRef)cf);
      v223 = v221 ? Length / 4 : Length;
      std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve((uint64_t *)v244, v223);
      v224 = v303 ? 4 : 2;
      if (!CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>((uint64_t *)v244, (CFDataRef)cf, value, v224))
      {
        fprintf((FILE *)v302.__begin_, "Error encountered while reading register data for register address %x\n", value);
        goto LABEL_323;
      }
    }
LABEL_304:
    v312 = 0u;
    v313 = 0u;
    v310 = 0u;
    v311 = 0u;
    v308 = 0u;
    v309 = 0u;
    memset(&valuePtr, 0, sizeof(valuePtr));
    if (MEMORY[0x1B5E4FBF0](HIDWORD(v302.__end_), &valuePtr))
      p_valuePtr = "";
    else
      p_valuePtr = (char *)&valuePtr;
    std::string::basic_string[abi:ne180100]<0>(__x, p_valuePtr);
    v226 = (const char *)__x;
    if (SHIBYTE(__x[0].__end_cap_.__value_) < 0)
      v226 = (const char *)__x[0].__begin_;
    fprintf((FILE *)v302.__begin_, "Codec Device: %s\n", v226);
    v227 = v304;
    v228 = v305;
    while (v227 != v228)
    {
      v229 = *(_QWORD *)(v227 + 8);
      v230 = *(_QWORD *)(v227 + 16);
      v231 = v230 - v229;
      if (v230 != v229)
      {
        LODWORD(v232) = 0;
        v233 = v231 >> 2;
        do
        {
          v234 = v232;
          if (v233 > v232)
          {
            LODWORD(v312) = 0;
            v310 = 0u;
            v311 = 0u;
            v308 = 0u;
            v309 = 0u;
            memset(&valuePtr, 0, sizeof(valuePtr));
            if (HIDWORD(v302.__end_cap_.__value_) == 16)
            {
              snprintf((char *)&valuePtr, 0x64uLL, "%8Xh: 0x%02x");
            }
            else if (HIDWORD(v302.__end_cap_.__value_) == 10)
            {
              snprintf((char *)&valuePtr, 0x64uLL, "R%06ud: %04d");
            }
            fputs((const char *)&valuePtr, (FILE *)v302.__begin_);
          }
          fputc(10, (FILE *)v302.__begin_);
          v232 = (v234 + 1);
          v233 = (uint64_t)(*(_QWORD *)(v227 + 16) - *(_QWORD *)(v227 + 8)) >> 2;
        }
        while (v233 > v232);
      }
      fputc(10, (FILE *)v302.__begin_);
      v227 += 32;
    }
    if (SHIBYTE(__x[0].__end_cap_.__value_) < 0)
      operator delete(__x[0].__begin_);
    goto LABEL_323;
  }
LABEL_254:
  if (LODWORD(existing.mSampleRate))
    IOObjectRelease(LODWORD(existing.mSampleRate));
  valuePtr.isa = v244;
  std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
  fputc(10, a2);
  _Block_object_dispose(&v248, 8);
  valuePtr.isa = v253;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
  _Block_object_dispose(&v254, 8);
  valuePtr.isa = v259;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
  _Block_object_dispose(&v260, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v265, v195);
}

void sub_1B5A1D71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, HALS_ObjectMap ***a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  HALS_ObjectMap **a68;
  HALS_ObjectMap **a71;
  HALS_Object *v71;
  HALS_Object *v72;
  HALS_Object *v73;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x230]);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a68, v71);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a71, v72);
  _Block_object_dispose(&a44, 8);
  STACK[0x240] = a12;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Block_object_dispose(&a52, 8);
  a44 = a13;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  _Block_object_dispose(&a60, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a11, v73);
  JUMPOUT(0x1B5A1D8D0);
}

__n128 __Block_byref_object_copy__35(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK11HALS_System8LogStateEP7__sFILE_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v3;
  uint64_t v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[7];
  v4 = *(_QWORD *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(_QWORD *)(v3 + 1240), (uint64_t)(*(_QWORD *)(v3 + 1240) - *(_QWORD *)(v3 + 1232)) >> 3);
    v4 = *(_QWORD *)(a1[4] + 8);
  }
  v5 = *(HALS_ObjectMap ***)(v4 + 40);
  v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
  {
    v7 = *v5++;
    HALS_ObjectMap::RetainObject(v7, a2);
  }
  v8 = *(_QWORD *)(a1[5] + 8) + 40;
  if (v8 != v3 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v8, *(HALS_Object **)(v3 + 1352), *(HALS_ObjectMap ***)(v3 + 1360), (uint64_t)(*(_QWORD *)(v3 + 1360) - *(_QWORD *)(v3 + 1352)) >> 3);
  v9 = *(_QWORD *)(a1[6] + 8) + 40;
  if (v9 != v3 + 1288)
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v9, *(HALS_Object **)(v3 + 1288), *(HALS_ObjectMap ***)(v3 + 1296), (uint64_t)(*(_QWORD *)(v3 + 1296) - *(_QWORD *)(v3 + 1288)) >> 3);
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  HALS_Object *v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  uint64_t v14;
  HALS_ObjectMap **v15;
  unint64_t v16;
  HALS_Object *v17;
  HALS_ObjectMap **v18;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(HALS_Object **)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](a1, *(HALS_Object **)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      goto LABEL_16;
    v11 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v11 = a4;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61)
LABEL_16:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = &v13[v14];
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v9, a2, a3, v13);
    goto LABEL_14;
  }
  v16 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3;
  if (v16 < a4)
  {
    v17 = (HALS_Object *)((char *)a2 + 8 * v16);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, v17, (HALS_ObjectMap **)v10);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v9, v17, a3, *(HALS_ObjectMap ***)(a1 + 8));
LABEL_14:
    *(_QWORD *)(a1 + 8) = v15;
    return;
  }
  v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, (HALS_Object *)a3, (HALS_ObjectMap **)v10);
  std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](a1, (HALS_Object *)v18);
}

void sub_1B5A1DB34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B5A1DB3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

HALS_ObjectMap **std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, HALS_ObjectMap **a4)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  _QWORD v9[3];
  char v10;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != (HALS_Object *)a3)
  {
    v6 = (HALS_ObjectMap **)a2;
    do
    {
      v7 = *v6;
      *v4 = *v6;
      HALS_ObjectMap::RetainObject(v7, a2);
      ++v6;
      v4 = ++v12;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9, a2);
  return v4;
}

void sub_1B5A1DBD0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = **(_QWORD **)(a1 + 16);
    v5 = **(_QWORD **)(a1 + 8);
    while (v4 != v5)
    {
      v6 = *(HALS_ObjectMap **)(v4 - 8);
      v4 -= 8;
      HALS_ObjectMap::ReleaseObject(v6, a2);
    }
  }
  return a1;
}

void ___ZN11HALS_System28CheckForDefaultDeviceChangesEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::mutex *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  HALS_DefaultDeviceManager *v26;
  std::__shared_weak_count *v27;

  v26 = 0;
  v27 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v27 = std::__shared_weak_count::lock(v2);
    if (v27)
    {
      v26 = *(HALS_DefaultDeviceManager **)(a1 + 32);
      if (v26)
      {
        v22 = 0;
        v23 = 0;
        HALS_System::GetInstance(&v24, 0, &v22);
        v4 = v24;
        v3 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        v7 = v23;
        if (!v23)
          goto LABEL_13;
        v8 = (unint64_t *)&v23->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          if (!v4)
            goto LABEL_25;
        }
        else
        {
LABEL_13:
          if (!v4)
            goto LABEL_25;
        }
        v20 = 0;
        v21 = 0;
        HALS_System::GetInstance(&v24, 0, &v20);
        v10 = (std::mutex *)(v24 + 48);
        std::mutex::lock((std::mutex *)(v24 + 48));
        v11 = v25;
        if (v25)
        {
          v12 = (unint64_t *)&v25->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v14 = v21;
        if (v21)
        {
          v15 = (unint64_t *)&v21->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        HALS_DefaultDeviceManager::CheckForChanges(v26);
        std::mutex::unlock(v10);
      }
    }
  }
LABEL_25:
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B5A1DDEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::mutex *v13;
  uint64_t v14;

  std::mutex::unlock(v13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v14 - 32);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A1DDBCLL);
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__shared_ptr_emplace<HALS_System::StartScope>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_System::StartScope>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_System::StartScope>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<HALS_System>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_System>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_System>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t ___ZN11HALS_System20ReloadServerSettingsEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  HALS_IOContext **v2;
  HALS_IOContext **v3;
  HALS_IOContext *v4;
  uint64_t v5;
  uint64_t AudioCaptureMode;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(HALS_IOContext ***)(v1 + 1352);
  v3 = *(HALS_IOContext ***)(v1 + 1360);
  while (v2 != v3)
  {
    v4 = *v2++;
    v5 = *((_QWORD *)v4 + 12);
    AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 520))(v5, AudioCaptureMode);
  }
  return result;
}

HALS_ObjectMap *HALS_System::CopyPlugInByReferenceID(HALS_System *this, HALS_ObjectMap *a2)
{
  HALS_ObjectMap *v2;
  HALB_Mutex *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  int v6;
  int v7;
  HALS_Object *v12;
  uint64_t v13;
  HALS_ObjectMap *v14;
  const void *v15;
  uint64_t v16;
  HALS_Object *v17;
  uint64_t v19;
  char v20;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 (*v25)(_QWORD *, uint64_t);
  void (*v26)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v27[3];

  v2 = a2;
  if (!a2)
    return v2;
  v22 = 0;
  v23 = &v22;
  v24 = 0x4002000000;
  v25 = __Block_byref_object_copy__5429;
  v26 = __Block_byref_object_dispose__5430;
  memset(v27, 0, sizeof(v27));
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = ___ZNK11HALS_System23CopyPlugInByReferenceIDEPv_block_invoke;
  v21[3] = &unk_1E697D9C0;
  v21[4] = &v22;
  v21[5] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v21);
  v4 = (HALS_ObjectMap **)v23[5];
  v5 = (HALS_ObjectMap **)v23[6];
  if (v4 == v5)
  {
LABEL_26:
    v2 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    v6 = *((_DWORD *)*v4 + 5);
    v7 = *((_DWORD *)*v4 + 6);
    if (v6 == v7)
    {
      if (v6 != 1953656941 && v6 != 1634757735)
        goto LABEL_25;
    }
    else if (v6 != 1634757735 && v6 != 1953656941 && v7 != 1634757735 && v7 != 1953656941)
    {
      goto LABEL_25;
    }
    v13 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v4 + 200))(*v4);
    v14 = *v4;
    v15 = (const void *)*((_QWORD *)*v4 + 6);
    if (v15)
    {
      CFRetain(v15);
      v16 = *((_QWORD *)v14 + 6);
    }
    else
    {
      v16 = 0;
    }
    v19 = v16;
    v20 = 1;
    if ((HALS_ObjectMap *)v13 == v2)
      break;
    CACFString::~CACFString((CACFString *)&v19);
LABEL_25:
    if (++v4 == v5)
      goto LABEL_26;
  }
  v2 = *v4;
  HALS_ObjectMap::RetainObject(*v4, v12);
  CACFString::~CACFString((CACFString *)&v19);
LABEL_28:
  _Block_object_dispose(&v22, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v27, v17);
  return v2;
}

void sub_1B5A1E104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap ***v17;
  HALS_Object *v19;

  CACFString::~CACFString((CACFString *)&a9);
  _Block_object_dispose(&a17, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v19);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System23CopyPlugInByReferenceIDEPv_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A1E160(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System17CopyIODeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A1E190(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System17CopyDeviceByIndexEjNS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A1E1C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_System::CopyDeviceByObjectID(HALS_System *this, int a2, HALS_Client *a3)
{
  HALB_Mutex *v5;
  HALS_DeviceManager **v6;
  HALS_DeviceManager **v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(_QWORD *, uint64_t);
  void (*v16)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v17[3];

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__5429;
  v16 = __Block_byref_object_dispose__5430;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK11HALS_System20CopyDeviceByObjectIDEjP11HALS_Client_block_invoke;
  v11[3] = &unk_1E697DC18;
  v11[4] = &v12;
  v11[5] = this;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  v6 = (HALS_DeviceManager **)v13[5];
  v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    v8 = HALS_DeviceManager::CopyDeviceByObjectID(*v6, a2, a3);
    if (v8)
      goto LABEL_6;
    ++v6;
  }
  v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1B5A1E2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  HALS_ObjectMap ***v7;
  HALS_Object *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System20CopyDeviceByObjectIDEjP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A1E310(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::GetRawDeviceListUsingClockDevice(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  HALB_Mutex *v5;
  HALS_DeviceManager **v6;
  HALS_DeviceManager **i;
  HALS_Object *v8;
  HALS_ObjectMap **v9;
  HALS_ObjectMap **v10;
  HALS_ObjectMap *v11;
  CFTypeRef v12;
  int v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  HALS_Object *v25;
  CFTypeRef cf;
  HALS_ObjectMap **v27;
  HALS_ObjectMap **v28;
  uint64_t v29;
  _QWORD v30[6];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(_QWORD *, uint64_t);
  void (*v35)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v36[4];

  v31 = 0;
  v32 = &v31;
  v33 = 0x4002000000;
  v34 = __Block_byref_object_copy__5429;
  v35 = __Block_byref_object_dispose__5430;
  memset(v36, 0, 24);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 0x40000000;
  v30[2] = ___ZNK11HALS_System32GetRawDeviceListUsingClockDeviceERNSt3__16vectorIjNS0_9allocatorIjEEEEN10applesauce2CF9StringRefE_block_invoke;
  v30[3] = &unk_1E697DC90;
  v30[4] = &v31;
  v30[5] = a1;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v30);
  v6 = (HALS_DeviceManager **)v32[5];
  for (i = (HALS_DeviceManager **)v32[6]; v6 != i; ++v6)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    HALS_DeviceManager::CopyRawDeviceList(*v6, (HALS_DeviceManager::BasicDeviceList *)&v27);
    v10 = v27;
    v9 = v28;
    while (v10 != v9)
    {
      v11 = *v10;
      if (*v10)
      {
        v12 = *a3;
        if (*a3)
          CFRetain(*a3);
        cf = v12;
        v13 = (*(uint64_t (**)(HALS_ObjectMap *, CFTypeRef *))(*(_QWORD *)v11 + 688))(v11, &cf);
        if (cf)
          CFRelease(cf);
        if (v13)
        {
          v14 = *((_DWORD *)*v10 + 4);
          v16 = *(_DWORD **)(a2 + 8);
          v15 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v16 >= v15)
          {
            v18 = *(_DWORD **)a2;
            v19 = ((uint64_t)v16 - *(_QWORD *)a2) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
              v18 = *(_DWORD **)a2;
              v16 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              v8 = 0;
            }
            v23 = (_DWORD *)(v22 + 4 * v19);
            *v23 = v14;
            v17 = v23 + 1;
            while (v16 != v18)
            {
              v24 = *--v16;
              *--v23 = v24;
            }
            *(_QWORD *)a2 = v23;
            *(_QWORD *)(a2 + 8) = v17;
            *(_QWORD *)(a2 + 16) = v22 + 4 * (_QWORD)v8;
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v16 = v14;
            v17 = v16 + 1;
          }
          *(_QWORD *)(a2 + 8) = v17;
        }
      }
      ++v10;
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v27, v8);
  }
  _Block_object_dispose(&v31, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v36, v25);
}

void sub_1B5A1E538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap ***a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  HALS_Object *v24;

  _Block_object_dispose(&a23, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a9, v24);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System32GetRawDeviceListUsingClockDeviceERNSt3__16vectorIjNS0_9allocatorIjEEEEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  HALS_System::_CopyDeviceManagerList(*(HALS_System **)(a1 + 40), (HALS_System::BasicDeviceManagerList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5A1E5AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::ClockDeviceArrived(HALS_System *this, const BOOL *a2, unsigned int a3, const __CFString *a4)
{
  unsigned int v6;
  os_unfair_lock_s *v8;
  HALB_Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];
  const __CFString *v19;
  void **v20;

  v6 = a2;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, a2))
  {
    v8 = (os_unfair_lock_s *)*((_QWORD *)this + 174);
    if (a4)
    {
      CFRetain(a4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, a4);
    }
    else
    {
      v19 = 0;
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    HALS_IOContext_Manager::device_arrived(v8, v6, a3, &v19, (uint64_t)&v13, 0);
    if (v19)
      CFRelease(v19);
  }
  v13 = 0;
  v14 = &v13;
  v15 = 0x4002000000;
  v16 = __Block_byref_object_copy__35;
  v17 = __Block_byref_object_dispose__36;
  memset(v18, 0, sizeof(v18));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN11HALS_System18ClockDeviceArrivedEjjPK10__CFString_block_invoke;
  v12[3] = &unk_1E697DCB8;
  v12[4] = &v13;
  v12[5] = this;
  v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v12);
  v10 = v14[5];
  v11 = v14[6];
  while (v10 != v11)
  {
    (*(void (**)(_QWORD, const __CFString *))(**(_QWORD **)(*(_QWORD *)v10 + 96) + 104))(*(_QWORD *)(*(_QWORD *)v10 + 96), a4);
    v10 += 8;
  }
  _Block_object_dispose(&v13, 8);
  v20 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1B5A1E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v8 - 56) = v7;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 56));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System18ClockDeviceArrivedEjjPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void HALS_System::ClockDeviceDied(HALS_System *this, const BOOL *a2, unsigned int a3, const __CFString *a4)
{
  unsigned int v6;
  uint64_t v8;
  HALB_Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];
  const __CFString *v19;
  void **v20;

  v6 = a2;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, a2))
  {
    v8 = *((_QWORD *)this + 174);
    if (a4)
    {
      CFRetain(a4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, a4);
    }
    else
    {
      v19 = 0;
    }
    HALS_IOContext_Manager::device_died(v8, v6, a3, &v19);
    if (v19)
      CFRelease(v19);
  }
  v13 = 0;
  v14 = &v13;
  v15 = 0x4002000000;
  v16 = __Block_byref_object_copy__35;
  v17 = __Block_byref_object_dispose__36;
  memset(v18, 0, sizeof(v18));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN11HALS_System15ClockDeviceDiedEjjPK10__CFString_block_invoke;
  v12[3] = &unk_1E697DCE0;
  v12[4] = &v13;
  v12[5] = this;
  v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v12);
  v10 = v14[5];
  v11 = v14[6];
  while (v10 != v11)
  {
    (*(void (**)(_QWORD, const __CFString *))(**(_QWORD **)(*(_QWORD *)v10 + 96) + 112))(*(_QWORD *)(*(_QWORD *)v10 + 96), a4);
    v10 += 8;
  }
  _Block_object_dispose(&v13, 8);
  v20 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1B5A1E8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v8 - 56) = v7;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 56));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System15ClockDeviceDiedEjjPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void ___ZN11HALS_System23ProcessMuteStateChangedEPK11HALS_DeviceP11HALS_Clientb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[6];
  v3 = *(_QWORD *)(a1[4] + 8) + 40;
  if (v3 != v2 + 1288)
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v3, *(HALS_Object **)(v2 + 1288), *(HALS_ObjectMap ***)(v2 + 1296), (uint64_t)(*(_QWORD *)(v2 + 1296) - *(_QWORD *)(v2 + 1288)) >> 3);
  v4 = *(_QWORD *)(a1[5] + 8) + 40;
  if (v4 != v2 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v4, *(HALS_Object **)(v2 + 1352), *(HALS_ObjectMap ***)(v2 + 1360), (uint64_t)(*(_QWORD *)(v2 + 1360) - *(_QWORD *)(v2 + 1352)) >> 3);
}

void HALS_System::DeviceArrived(os_unfair_lock_s **this, HALS_Device *a2)
{
  os_unfair_lock_s *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  char v7;
  int NumberStreamsExcludingReferenceStreams;
  void **v9;
  unsigned int v10;
  NSObject *v11;
  NSObject *v12;
  HALB_Mutex *v13;
  HALS_DeviceManager **v14;
  HALS_DeviceManager **v15;
  unsigned int v16;
  HALS_Object *v17;
  HALS_ObjectMap **v18;
  HALS_ObjectMap **v19;
  HALS_ObjectMap *v20;
  HALS_Object *v21;
  HALS_Object *v22;
  HALS_ObjectMap *v23;
  HALB_Mutex *v24;
  unint64_t v25;
  uint64_t *i;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t **v30;
  uint64_t *j;
  unint64_t v32;
  _QWORD *v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  uint64_t **v43;
  void **v44;
  HALS_ObjectMap *v45;
  HALB_Mutex *v46;
  HALS_Object *v47;
  _QWORD **v48;
  void *v49;
  HALS_Object *v50;
  unsigned int **v51;
  unsigned int *v52;
  HALB_Mutex *v53;
  const AudioObjectPropertyAddress *v54;
  const AudioObjectPropertyAddress *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  HALS_Object *v62;
  HALS_ObjectMap *v63;
  uint64_t v64;
  uint64_t v66;
  HALB_Mutex *v67;
  uint64_t v68;
  uint64_t v69;
  HALS_ObjectMap *v70;
  int NumberDevices;
  unsigned int **v73;
  _QWORD v74[6];
  CFTypeRef cf;
  void **v76[4];
  HALS_ObjectMap **v77;
  HALS_ObjectMap ***v78;
  uint64_t v79;
  char v80;
  void *__p[2];
  __int128 v82;
  _BYTE *v83;
  void ***v84;
  unsigned int *v85;
  HALS_Device *v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  void (*v91)(uint64_t);
  void ***v92;
  _BYTE *v93;
  HALS_Device *v94;
  _BYTE buf[24];
  void *v96;
  void *v97;
  __int128 v98;
  __int128 v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)this, (const BOOL *)a2)
    && ((*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 832))(a2) & 1) == 0)
  {
    HALS_IOContext_Manager::create_stream_info_for_device((HALS_IOContext_Manager *)buf, this[174], a2);
    v3 = this[174];
    v4 = *((_DWORD *)a2 + 4);
    v5 = *((_DWORD *)a2 + 7);
    v6 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
    v7 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 224))(a2);
    HALS_IOContext_Manager::device_arrived(v3, v4, v5, (const __CFString **)&cf, (uint64_t)buf, v7 ^ 1);
    if (cf)
      CFRelease(cf);
    if (*(_QWORD *)buf)
      operator delete(*(void **)buf);
  }
  NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 1);
  v9 = (void **)MEMORY[0x1E0C809B0];
  if (NumberStreamsExcludingReferenceStreams)
  {
    NumberDevices = HALS_System::GetNumberDevices((uint64_t)this, 0, 0, 0);
    if (NumberDevices)
    {
      v10 = 0;
      v11 = MEMORY[0x1E0C81028];
      do
      {
        v12 = v11;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4002000000;
        v96 = __Block_byref_object_copy__5429;
        v97 = __Block_byref_object_dispose__5430;
        *(_QWORD *)&v99 = 0;
        v98 = 0uLL;
        v87 = v9;
        v88 = 0x40000000;
        v89 = (uint64_t)___ZNK11HALS_System17CopyDeviceByIndexEjNS_14DeviceListKindEbP11HALS_Client_block_invoke;
        v90 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E697DBC8;
        v91 = (void (*)(uint64_t))buf;
        v92 = (void ***)this;
        v13 = (HALB_Mutex *)(*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
        HALB_CommandGate::ExecuteCommand(v13, (uint64_t)&v87);
        v14 = *(HALS_DeviceManager ***)(*(_QWORD *)&buf[8] + 40);
        v15 = *(HALS_DeviceManager ***)(*(_QWORD *)&buf[8] + 48);
        if (v14 == v15)
        {
          v20 = 0;
        }
        else
        {
          v16 = 0;
          while (2)
          {
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v82 = 0;
            HALS_DeviceManager::CopyDeviceList(*v14, (HALS_DeviceManager::BasicDeviceList *)__p, 0, 0);
            v18 = (HALS_ObjectMap **)__p[0];
            v19 = (HALS_ObjectMap **)__p[1];
            while (v18 != v19)
            {
              if (((*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v18 + 224))(*v18) & 1) != 0)
              {
                if (v16 == v10)
                {
                  v20 = *v18;
                  HALS_ObjectMap::RetainObject(*v18, v17);
LABEL_22:
                  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)__p, v17);
                  goto LABEL_23;
                }
                ++v16;
              }
              ++v18;
            }
            if (v16 >= v10)
            {
              v20 = 0;
              goto LABEL_22;
            }
            HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)__p, v17);
            if (++v14 != v15)
              continue;
            break;
          }
          v20 = 0;
LABEL_23:
          v9 = (void **)MEMORY[0x1E0C809B0];
        }
        v11 = v12;
        _Block_object_dispose(buf, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)&v98, v21);
        v23 = v20;
        if (v20 && *((_DWORD *)a2 + 4) != *((_DWORD *)v20 + 4))
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x5002000000;
          v96 = __Block_byref_object_copy__267;
          v97 = __Block_byref_object_dispose__268;
          v98 = 0u;
          v99 = 0u;
          v100 = 1065353216;
          v87 = v9;
          v88 = 0x40000000;
          v89 = (uint64_t)___ZNK11HALS_Device16CopyClientDSPMapEb_block_invoke;
          v90 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E699E348;
          v91 = (void (*)(uint64_t))buf;
          v92 = (void ***)v20;
          LOBYTE(v93) = 1;
          v70 = v20;
          v24 = (HALB_Mutex *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 56))();
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)&v87);
          v25 = *(_QWORD *)&buf[8];
          *(_OWORD *)__p = 0u;
          v82 = 0u;
          LODWORD(v83) = *(_DWORD *)(*(_QWORD *)&buf[8] + 72);
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, *(_QWORD *)(*(_QWORD *)&buf[8] + 48));
          for (i = *(uint64_t **)(v25 + 56); i; i = (uint64_t *)*i)
          {
            v27 = *((unsigned int *)i + 4);
            v28 = (unint64_t)__p[1];
            if (__p[1])
            {
              v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v29.i16[0] = vaddlv_u8(v29);
              if (v29.u32[0] > 1uLL)
              {
                v25 = *((unsigned int *)i + 4);
                if (__p[1] <= (void *)v27)
                  v25 = v27 % (unint64_t)__p[1];
              }
              else
              {
                v25 = (LODWORD(__p[1]) - 1) & v27;
              }
              v30 = (uint64_t **)*((_QWORD *)__p[0] + v25);
              if (v30)
              {
                for (j = *v30; j; j = (uint64_t *)*j)
                {
                  v32 = j[1];
                  if (v32 == v27)
                  {
                    if (*((_DWORD *)j + 4) == (_DWORD)v27)
                      goto LABEL_66;
                  }
                  else
                  {
                    if (v29.u32[0] > 1uLL)
                    {
                      if ((void *)v32 >= __p[1])
                        v32 %= (unint64_t)__p[1];
                    }
                    else
                    {
                      v32 &= (unint64_t)__p[1] - 1;
                    }
                    if (v32 != v25)
                      break;
                  }
                }
              }
            }
            v33 = operator new(0x30uLL);
            *v33 = 0;
            v33[1] = v27;
            *((_DWORD *)v33 + 4) = *((_DWORD *)i + 4);
            std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v33 + 3, i + 3);
            v34 = (float)(unint64_t)(*((_QWORD *)&v82 + 1) + 1);
            if (!v28 || (float)(*(float *)&v83 * (float)v28) < v34)
            {
              v35 = (v28 & (v28 - 1)) != 0;
              if (v28 < 3)
                v35 = 1;
              v36 = v35 | (2 * v28);
              v37 = vcvtps_u32_f32(v34 / *(float *)&v83);
              if (v36 <= v37)
                v38 = v37;
              else
                v38 = v36;
              std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v38);
              v28 = (unint64_t)__p[1];
              if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
              {
                if (__p[1] <= (void *)v27)
                  v25 = v27 % (unint64_t)__p[1];
                else
                  v25 = v27;
              }
              else
              {
                v25 = (LODWORD(__p[1]) - 1) & v27;
              }
            }
            v39 = __p[0];
            v40 = (_QWORD *)*((_QWORD *)__p[0] + v25);
            if (v40)
            {
              *v33 = *v40;
            }
            else
            {
              *v33 = v82;
              *(_QWORD *)&v82 = v33;
              v39[v25] = &v82;
              if (!*v33)
                goto LABEL_65;
              v41 = *(_QWORD *)(*v33 + 8);
              if ((v28 & (v28 - 1)) != 0)
              {
                if (v41 >= v28)
                  v41 %= v28;
              }
              else
              {
                v41 &= v28 - 1;
              }
              v40 = (char *)__p[0] + 8 * v41;
            }
            *v40 = v33;
LABEL_65:
            ++*((_QWORD *)&v82 + 1);
LABEL_66:
            ;
          }
          _Block_object_dispose(buf, 8);
          std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node((_QWORD **)v99);
          v42 = (void *)v98;
          *(_QWORD *)&v98 = 0;
          if (v42)
            operator delete(v42);
          v43 = (uint64_t **)v82;
          v9 = (void **)MEMORY[0x1E0C809B0];
          v11 = v12;
          if ((_QWORD)v82)
          {
            do
            {
              v44 = (void **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v43 + 4));
              v45 = (HALS_ObjectMap *)v44;
              if (v44)
              {
                v77 = 0;
                v78 = &v77;
                v79 = 0x2000000000;
                v80 = 1;
                v76[0] = 0;
                v76[1] = (void **)v76;
                v76[2] = (void **)0x2000000000;
                v76[3] = v44;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = buf;
                *(_QWORD *)&buf[16] = 0x4002000000;
                v96 = __Block_byref_object_copy__264;
                v97 = __Block_byref_object_dispose__265;
                std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)&v98, v43 + 3);
                v87 = v9;
                v88 = 0x40000000;
                v89 = (uint64_t)___ZN11HALS_Device26MirrorOtherDeviceClientDSPEbPKS__block_invoke;
                v90 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E699E320;
                v91 = (void (*)(uint64_t))&v77;
                v92 = v76;
                v93 = buf;
                v94 = a2;
                v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 56))(a2);
                HALB_CommandGate::ExecuteCommand(v46, (uint64_t)&v87);
                _Block_object_dispose(buf, 8);
                std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)&v98 + 1));
                _Block_object_dispose(v76, 8);
                _Block_object_dispose(&v77, 8);
              }
              else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5615;
                _os_log_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Can't add invalid client DSP to device.", buf, 0x12u);
              }
              HALS_ObjectMap::ReleaseObject(v45, v47);
              v43 = (uint64_t **)*v43;
            }
            while (v43);
            v48 = (_QWORD **)v82;
          }
          else
          {
            v48 = 0;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(v48);
          v49 = __p[0];
          __p[0] = 0;
          if (v49)
            operator delete(v49);
          v23 = v70;
        }
        HALS_ObjectMap::ReleaseObject(v23, v22);
        ++v10;
      }
      while (v10 != NumberDevices);
    }
  }
  if ((*(unsigned int (**)(HALS_Device *))(*(_QWORD *)a2 + 224))(a2)
    && HALS_MetaManager::sInstance
    && *((_DWORD *)a2 + 5) != 1633773415)
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
    HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)HALS_MetaManager::sInstance, (HALS_DeviceManager::BasicDeviceList *)&v77, 1, 0);
    v51 = (unsigned int **)v77;
    v73 = (unsigned int **)v78;
    if (v77 != (HALS_ObjectMap **)v78)
    {
      do
      {
        v52 = *v51;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4802000000;
        v96 = __Block_byref_object_copy__4100;
        v97 = __Block_byref_object_dispose__4101;
        v98 = 0u;
        v99 = 0u;
        v87 = 0;
        v88 = (uint64_t)&v87;
        v89 = 0x4002000000;
        v90 = __Block_byref_object_copy__1;
        v91 = __Block_byref_object_dispose__2;
        v93 = 0;
        v94 = 0;
        v92 = 0;
        __p[0] = v9;
        __p[1] = (void *)0x40000000;
        *(_QWORD *)&v82 = ___ZN15HALS_MetaDevice17RealDeviceArrivedEP11HALS_Device_block_invoke;
        *((_QWORD *)&v82 + 1) = &unk_1E6979CE0;
        v85 = v52;
        v86 = a2;
        v83 = buf;
        v84 = &v87;
        v53 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v52 + 56))(v52);
        HALB_CommandGate::ExecuteCommand(v53, (uint64_t)__p);
        v54 = *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 40);
        v55 = *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 48);
        if (v54 != v55)
          HALS_Object::PropertiesChanged((HALS_Object *)v52, (HALS_NotificationManager *)v52[4], 0, -1431655765 * ((unint64_t)((char *)v55 - (char *)v54) >> 2), v54);
        v56 = *(_QWORD *)(v88 + 40);
        v57 = *(_QWORD *)(v88 + 48);
        if (((v57 - v56) & 0x1FFFFFFFE0) != 0)
        {
          if (v57 == v56)
LABEL_108:
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v58 = 0;
          v59 = 0;
          while (1)
          {
            v60 = v56 + v58;
            v61 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v56 + v58 + 24));
            v63 = (HALS_ObjectMap *)v61;
            v64 = *(_QWORD *)(v60 + 8);
            if (*(_QWORD *)v60 != v64 && v61 != 0)
              HALS_Object::PropertiesChanged((HALS_Object *)v52, (HALS_NotificationManager *)*(unsigned int *)(v61 + 16), 0, -1431655765 * ((unint64_t)(v64 - *(_QWORD *)v60) >> 2), *(const AudioObjectPropertyAddress **)v60);
            HALS_ObjectMap::ReleaseObject(v63, v62);
            ++v59;
            v56 = *(_QWORD *)(v88 + 40);
            v66 = *(_QWORD *)(v88 + 48) - v56;
            if (v59 >= ((unint64_t)v66 >> 5))
              break;
            v58 += 32;
            if (v59 >= v66 >> 5)
              goto LABEL_108;
          }
        }
        _Block_object_dispose(&v87, 8);
        v76[0] = (void **)&v92;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](v76);
        _Block_object_dispose(buf, 8);
        if ((_QWORD)v98)
        {
          *((_QWORD *)&v98 + 1) = v98;
          operator delete((void *)v98);
        }
        ++v51;
        v9 = (void **)MEMORY[0x1E0C809B0];
      }
      while (v51 != v73);
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v77, v50);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  v96 = __Block_byref_object_copy__35;
  v97 = __Block_byref_object_dispose__36;
  *(_QWORD *)&v99 = 0;
  v98 = 0uLL;
  v74[0] = v9;
  v74[1] = 0x40000000;
  v74[2] = ___ZN11HALS_System13DeviceArrivedEP11HALS_Device_block_invoke;
  v74[3] = &unk_1E697DD30;
  v74[4] = buf;
  v74[5] = this;
  v67 = (HALB_Mutex *)(*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
  HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v74);
  v68 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
  v69 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  while (v68 != v69)
  {
    (*(void (**)(_QWORD, HALS_Device *))(**(_QWORD **)(*(_QWORD *)v68 + 96) + 120))(*(_QWORD *)(*(_QWORD *)v68 + 96), a2);
    v68 += 8;
  }
  _Block_object_dispose(buf, 8);
  v87 = (void **)&v98;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v87);
}

void sub_1B5A1F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 224), 8);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

void sub_1B5A1F454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B5A1F464()
{
  JUMPOUT(0x1B5A1F514);
}

void sub_1B5A1F46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,HALS_ObjectMap **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  HALS_Object *v40;
  void *v41;

  _Block_object_dispose(&a39, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  v41 = *(void **)(v39 - 184);
  if (v41)
  {
    *(_QWORD *)(v39 - 176) = v41;
    operator delete(v41);
  }
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a27, v40);
  JUMPOUT(0x1B5A1F5B4);
}

void sub_1B5A1F4F4()
{
  JUMPOUT(0x1B5A1F4FCLL);
}

void sub_1B5A1F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  HALS_Object *v34;

  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table((uint64_t)&a31);
  _Block_object_dispose((const void *)(v32 - 224), 8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(v31);
  HALS_ObjectMap::ReleaseObject(a9, v34);
  _Unwind_Resume(a1);
}

void sub_1B5A1F580(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5A1F5B4);
}

void sub_1B5A1F594(uint64_t a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,HALS_ObjectMap **a31)
{
  HALS_ObjectMap ***v31;
  uint64_t v32;
  HALS_Object *v33;

  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a31, a2);
  _Block_object_dispose((const void *)(v32 - 224), 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v31, v33);
  JUMPOUT(0x1B5A1F5B4);
}

void ___ZN11HALS_System13DeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void HALS_System::DeviceDied(HALS_System *this, HALS_Device *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  int v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  HALS_Object *v12;
  unsigned int **v13;
  unsigned int *v14;
  HALB_Mutex *v15;
  const AudioObjectPropertyAddress *v16;
  const AudioObjectPropertyAddress *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  HALS_Object *v24;
  HALS_ObjectMap *v25;
  _BYTE *v26;
  uint64_t v28;
  uint64_t v29;
  HALB_Mutex *v30;
  HALS_PlatformBehaviors *InternalIOContextID;
  uint64_t **v32;
  uint64_t **i;
  uint64_t *v34;
  int v35;
  HALB_Mutex *v36;
  void **v37;
  void **v38;
  uint64_t *platform_behaviors;
  _QWORD **v40;
  uint64_t v41;
  unsigned int **v42;
  _QWORD v43[7];
  CFTypeRef cf;
  HALS_ObjectMap **v45;
  HALS_ObjectMap **v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t *v52;
  void ***v53;
  unsigned int *v54;
  HALS_Device *v55;
  void **v56;
  void ***v57;
  uint64_t v58;
  void *v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  void (*v68)(uint64_t);
  __int128 v69;
  __int128 v70;
  void **v71;

  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    v4 = *((_QWORD *)this + 174);
    v5 = *((_DWORD *)a2 + 4);
    v6 = *((_DWORD *)a2 + 7);
    v7 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
    HALS_IOContext_Manager::device_died(v4, v5, v6, (const __CFString **)&cf);
    if (cf)
      CFRelease(cf);
  }
  v8 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 224))(a2);
  v9 = (_QWORD *)&unk_1B5D17000;
  v10 = (void **)MEMORY[0x1E0C809B0];
  v11 = (_QWORD *)&unk_1B5D17000;
  if (v8 && HALS_MetaManager::sInstance && *((_DWORD *)a2 + 5) != 1633773415)
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)HALS_MetaManager::sInstance, (HALS_DeviceManager::BasicDeviceList *)&v45, 1, 0);
    v13 = (unsigned int **)v45;
    v42 = (unsigned int **)v46;
    if (v45 != v46)
    {
      do
      {
        v14 = *v13;
        v64 = 0;
        v65 = &v64;
        v66 = 0x4802000000;
        v67 = __Block_byref_object_copy__4100;
        v68 = __Block_byref_object_dispose__4101;
        v69 = 0u;
        v70 = 0u;
        v56 = 0;
        v57 = &v56;
        v58 = 0x4002000000;
        v59 = __Block_byref_object_copy__1;
        v60 = __Block_byref_object_dispose__2;
        v62 = 0;
        v63 = 0;
        v61 = 0;
        v48 = v10;
        v49 = 0x40000000;
        v50 = ___ZN15HALS_MetaDevice14RealDeviceDiedEP11HALS_Device_block_invoke;
        v51 = &unk_1E6979D08;
        v54 = v14;
        v55 = a2;
        v52 = &v64;
        v53 = &v56;
        v15 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 56))(v14);
        HALB_CommandGate::ExecuteCommand(v15, (uint64_t)&v48);
        v16 = (const AudioObjectPropertyAddress *)v65[5];
        v17 = (const AudioObjectPropertyAddress *)v65[6];
        if (v16 != v17)
          HALS_Object::PropertiesChanged((HALS_Object *)v14, (HALS_NotificationManager *)v14[4], 0, -1431655765 * ((unint64_t)((char *)v17 - (char *)v16) >> 2), v16);
        v18 = v57[5];
        v19 = v57[6];
        if ((((char *)v19 - (char *)v18) & 0x1FFFFFFFE0) != 0)
        {
          if (v19 == v18)
LABEL_36:
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = &v18[v20];
            v23 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)LODWORD(v18[v20 + 3]));
            v25 = (HALS_ObjectMap *)v23;
            v26 = v22[1];
            if (*v22 != v26 && v23 != 0)
              HALS_Object::PropertiesChanged((HALS_Object *)v14, (HALS_NotificationManager *)*(unsigned int *)(v23 + 16), 0, -1431655765 * ((unint64_t)(v26 - (_BYTE *)*v22) >> 2), (const AudioObjectPropertyAddress *)*v22);
            HALS_ObjectMap::ReleaseObject(v25, v24);
            ++v21;
            v18 = v57[5];
            v28 = (char *)v57[6] - (char *)v18;
            if (v21 >= ((unint64_t)v28 >> 5))
              break;
            v20 += 4;
            if (v21 >= v28 >> 5)
              goto LABEL_36;
          }
        }
        _Block_object_dispose(&v56, 8);
        v71 = (void **)&v61;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v71);
        _Block_object_dispose(&v64, 8);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        ++v13;
      }
      while (v13 != v42);
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v45, v12);
    v11 = &unk_1B5D17000;
    v9 = &unk_1B5D17000;
  }
  v64 = 0;
  v65 = &v64;
  v66 = v9[41];
  v67 = __Block_byref_object_copy__37;
  v68 = __Block_byref_object_dispose__38;
  *(_QWORD *)&v70 = 0;
  v69 = 0uLL;
  v56 = 0;
  v57 = &v56;
  v58 = v66;
  v59 = __Block_byref_object_copy__35;
  v60 = __Block_byref_object_dispose__36;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v43[0] = v10;
  v29 = v11[7];
  v43[1] = v29;
  v43[2] = ___ZN11HALS_System10DeviceDiedEP11HALS_Device_block_invoke;
  v43[3] = &unk_1E697DD58;
  v43[5] = &v56;
  v43[6] = this;
  v43[4] = &v64;
  v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v43);
  v32 = (uint64_t **)v65[5];
  for (i = (uint64_t **)v65[6]; v32 != i; ++v32)
  {
    v34 = *v32;
    v35 = *((_DWORD *)a2 + 4);
    v48 = v10;
    v49 = v29;
    v50 = ___ZN11HALS_Client28StopListeningToAllPropertiesEj_block_invoke;
    v51 = &__block_descriptor_tmp_12_2050;
    v52 = v34;
    LODWORD(v53) = v35;
    v36 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v34 + 56))(v34);
    HALB_CommandGate::ExecuteCommand(v36, (uint64_t)&v48);
  }
  v37 = v57[5];
  v38 = v57[6];
  while (v37 != v38)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(InternalIOContextID);
    if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors) != 2)
    {
      v40 = (_QWORD **)*v37;
LABEL_33:
      v41 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 200))(a2);
      InternalIOContextID = (HALS_PlatformBehaviors *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v40[12] + 128))(v40[12], v41);
      goto LABEL_34;
    }
    InternalIOContextID = (HALS_PlatformBehaviors *)HALS_Device::GetInternalIOContextID(a2);
    v40 = (_QWORD **)*v37;
    if ((_DWORD)InternalIOContextID != *((_DWORD *)*v37 + 4))
      goto LABEL_33;
LABEL_34:
    ++v37;
  }
  _Block_object_dispose(&v56, 8);
  v48 = (void **)&v61;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v48);
  _Block_object_dispose(&v64, 8);
  v56 = (void **)&v69;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v56);
}

void sub_1B5A1FA94(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System10DeviceDiedEP11HALS_Device_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[6];
  v3 = *(_QWORD *)(a1[4] + 8) + 40;
  if (v3 != v2 + 1288)
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v3, *(HALS_Object **)(v2 + 1288), *(HALS_ObjectMap ***)(v2 + 1296), (uint64_t)(*(_QWORD *)(v2 + 1296) - *(_QWORD *)(v2 + 1288)) >> 3);
  v4 = *(_QWORD *)(a1[5] + 8) + 40;
  if (v4 != v2 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v4, *(HALS_Object **)(v2 + 1352), *(HALS_ObjectMap ***)(v2 + 1360), (uint64_t)(*(_QWORD *)(v2 + 1360) - *(_QWORD *)(v2 + 1352)) >> 3);
}

uint64_t HALS_System::GetCurrentDeviceArrivalTime(HALS_System *this)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = 0;
  v18 = 0;
  HALS_System::GetInstance(&v19, 0, &v17);
  v1 = v20;
  v2 = *(_QWORD *)(*(_QWORD *)(v19 + 1408) + 48);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = v18;
  if (v18)
  {
    v6 = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (HALS_System::sIsInitialized == 1)
  {
    mach_absolute_time();
    v15 = 0;
    v16 = 0;
    HALS_System::GetInstance(&v19, 0, &v15);
    v8 = v20;
    v2 = *(_QWORD *)(*(_QWORD *)(v19 + 1408) + 48);
    if (v20)
    {
      v9 = (unint64_t *)&v20->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v16;
    if (v16)
    {
      v12 = (unint64_t *)&v16->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return v2;
}

void sub_1B5A1FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_System::CheckForDefaultDeviceChanges(HALS_PlatformBehaviors *a1, uint64_t a2)
{
  uint64_t *platform_behaviors;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _QWORD v14[5];
  std::__shared_weak_count *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(a1);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 56))(platform_behaviors) == 1
    && HALS_System::sIsInitialized != 0)
  {
    v6 = *((_QWORD *)a1 + 158);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 159);
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v10 = *((_QWORD *)a1 + 30);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN11HALS_System28CheckForDefaultDeviceChangesERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_93_5658;
    v14[4] = v6;
    v15 = v7;
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    __p = 0;
    v17 = 0;
    v18 = 0;
    v13 = v19;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, v20, (v20 - (uint64_t)v19) >> 2);
    AMCP::Utility::Dispatch_Queue::after(v10, (uint64_t)v14);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    if (v13)
      operator delete(v13);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5A1FEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;
  void *v15;

  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v15)
    {
LABEL_3:
      if (!v14)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if (!v14)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_weak(v14);
  goto LABEL_5;
}

void sub_1B5A1FF04()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1B5A1FEE4);
  JUMPOUT(0x1B5A1FEDCLL);
}

void ___ZN11HALS_System28CheckForDefaultDeviceChangesERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::mutex *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  HALS_DefaultDeviceManager *v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  int v22;
  CFTypeRef v23;
  uint64_t i;
  char *v25;
  uint64_t m;
  CFTypeRef *v27;
  int *v28;
  uint64_t k;
  uint64_t j;
  HALS_ObjectMap *PreferredDefaultDevice;
  int v32;
  BOOL v33;
  BOOL v34;
  uint64_t n;
  int DefaultDevice;
  int *v37;
  int v38;
  CFTypeRef v39;
  int v40;
  CFTypeRef v41;
  int v42;
  CFTypeRef v43;
  CFTypeRef v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::mutex *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  HALS_DefaultDeviceManager *v62;
  std::__shared_weak_count *v63;
  void (**v64)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v65;
  int v66;
  HALB_Mutex *v67;
  int v68;
  _BYTE v69[5];
  _BYTE v70[5];
  int v71;
  void (**v72)(OS::CF::String *__hidden);
  CFTypeRef cf;
  _DWORD v74[76];
  _QWORD buf[44];

  v1 = a1;
  buf[41] = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v63 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_141;
  v63 = std::__shared_weak_count::lock(v2);
  if (!v63)
    goto LABEL_141;
  v62 = *(HALS_DefaultDeviceManager **)(v1 + 32);
  if (!v62)
    goto LABEL_141;
  v60 = 0;
  v61 = 0;
  HALS_System::GetInstance(buf, 0, &v60);
  v3 = buf[0];
  v4 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v5 = (unint64_t *)(buf[1] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v61;
  if (!v61)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v61->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v3)
      goto LABEL_141;
  }
  else
  {
LABEL_13:
    if (!v3)
      goto LABEL_141;
  }
  v58 = 0;
  v59 = 0;
  HALS_System::GetInstance(buf, 0, &v58);
  v10 = (std::mutex *)(buf[0] + 48);
  std::mutex::lock((std::mutex *)(buf[0] + 48));
  v11 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v12 = (unint64_t *)(buf[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v59;
  if (v59)
  {
    v15 = (unint64_t *)&v59->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v62;
  if (*(_QWORD *)(v1 + 48) == *(_QWORD *)(v1 + 56))
  {
    HALS_DefaultDeviceManager::CheckForChanges(v62);
    goto LABEL_140;
  }
  v53 = v10;
  if (*((_BYTE *)v62 + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (LODWORD(buf[0]) = 136315394,
          *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
          WORD2(buf[1]) = 1024,
          *(_DWORD *)((char *)&buf[1] + 6) = 1226,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u), *((_BYTE *)v17 + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 1227;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges(newdevices):     --->>>", (uint8_t *)buf, 0x12u);
      }
    }
  }
  v18 = 0;
  v56 = (uint64_t *)((char *)v17 + 400);
  v55 = (uint64_t *)((char *)v17 + 296);
  v54 = (uint64_t *)((char *)v17 + 192);
  v57 = v1;
  do
  {
    v19 = dword_1B5D68E90[v18];
    v71 = 0;
    v72 = &off_1E69A0F60;
    cf = 0;
    memset(v74, 0, 284);
    *(_QWORD *)&v74[71] = 0x600000005;
    LOWORD(v74[73]) = 0;
    BYTE2(v74[73]) = 0;
    LOWORD(v74[74]) = 0;
    v21 = *(unsigned int **)(v1 + 48);
    v20 = *(unsigned int **)(v1 + 56);
    if (v21 == v20)
      goto LABEL_130;
    do
    {
      DeviceInfo::DeviceInfo((DeviceInfo *)buf, (HALS_ObjectMap *)*v21);
      if (v19 > 1934587251)
      {
        if (v19 == 1936224868)
          goto LABEL_38;
        v22 = 1934587252;
LABEL_37:
        if (v19 != v22)
          goto LABEL_40;
LABEL_38:
        if (LODWORD(buf[39]))
          goto LABEL_40;
LABEL_39:
        v71 = buf[0];
        v23 = cf;
        cf = (CFTypeRef)buf[2];
        buf[2] = v23;
        memcpy(v74, &buf[3], 0x12AuLL);
        goto LABEL_40;
      }
      if (v19 != 1682533920)
      {
        v22 = 1682929012;
        goto LABEL_37;
      }
      if (!HIDWORD(buf[38]))
        goto LABEL_39;
LABEL_40:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[1]);
      ++v21;
    }
    while (v21 != v20);
    if (!v71 || BYTE1(v74[74]))
      goto LABEL_130;
    for (i = 0; i != 72; i += 24)
    {
      v25 = (char *)&v67 + i;
      *(_QWORD *)v25 = &off_1E69A0F60;
      *((_QWORD *)v25 + 1) = 0;
      *((_DWORD *)v25 + 4) = 0;
    }
    v64 = &off_1E69A0F60;
    v65 = 0;
    v66 = 0;
    buf[0] = v17;
    LODWORD(buf[1]) = HALB_Mutex::Lock(v17);
    switch(v19)
    {
      case 1682533920:
        for (j = 0; j != 72; j += 24)
          *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v67 + j, *(CFTypeRef *)((char *)v17 + j + 120)) + 16) = *(_DWORD *)((char *)v17 + j + 128);
        v28 = (int *)((char *)v17 + 200);
        v27 = (CFTypeRef *)((char *)v17 + 192);
        goto LABEL_60;
      case 1682929012:
        for (k = 0; k != 72; k += 24)
          *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v67 + k, *(CFTypeRef *)((char *)v17 + k + 224)) + 16) = *(_DWORD *)((char *)v17 + k + 232);
        v28 = (int *)((char *)v17 + 304);
        v27 = (CFTypeRef *)((char *)v17 + 296);
LABEL_60:
        OS::CF::UntypedObject::operator=((uint64_t)&v64, *v27);
        v66 = *v28;
        break;
      case 1934587252:
        for (m = 0; m != 72; m += 24)
          *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v67 + m, *(CFTypeRef *)((char *)v17 + m + 328)) + 16) = *(_DWORD *)((char *)v17 + m + 336);
        v28 = (int *)((char *)v17 + 408);
        v27 = (CFTypeRef *)((char *)v17 + 400);
        goto LABEL_60;
    }
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
    PreferredDefaultDevice = (HALS_ObjectMap *)HALS_DefaultDeviceManager::FindPreferredDefaultDevice((uint64_t)v17, (uint64_t)&v64, (uint64_t)&v67, v19);
    v32 = (int)PreferredDefaultDevice;
    v33 = v65 != 0;
    if (!v65 && (_DWORD)PreferredDefaultDevice)
    {
      DeviceInfo::DeviceInfo((DeviceInfo *)buf, PreferredDefaultDevice);
      if (v19 == 1934587252 || v19 == 1682929012)
      {
        v34 = SLODWORD(buf[39]) < 4;
        goto LABEL_68;
      }
      if (v19 == 1682533920)
      {
        v34 = SHIDWORD(buf[38]) < 3;
LABEL_68:
        v33 = v34;
      }
      else
      {
        v33 = 0;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[1]);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v64);
    for (n = 48; n != -24; n -= 24)
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v67 + n));
    v1 = v57;
    if (v32)
    {
      if (v71 != v32)
      {
        DefaultDevice = HALS_DefaultDeviceManager::GetDefaultDevice(v17, v19);
        if (v33 || v74[68] == 1651274862 && DefaultDevice == v71)
        {
          if (cf)
          {
            if (v19 > 1934587251)
            {
              if (v19 == 1934587252)
              {
                if (!BYTE2(v74[73]))
                  goto LABEL_130;
                goto LABEL_93;
              }
              if (v19 == 1936224868 && HIBYTE(v74[73]))
                goto LABEL_93;
            }
            else
            {
              if (v19 == 1682533920)
              {
                if (!LOBYTE(v74[73]))
                  goto LABEL_130;
              }
              else if (v19 != 1682929012 || !BYTE1(v74[73]))
              {
                goto LABEL_130;
              }
LABEL_93:
              if (!v71)
                goto LABEL_130;
              v70[0] = HIBYTE(v19);
              v70[1] = BYTE2(v19);
              v70[2] = BYTE1(v19);
              v70[3] = v19;
              v70[4] = 0;
              v37 = &v74[69];
              if (v19 != 1682533920)
                v37 = &v74[70];
              v38 = *v37;
              v69[0] = HIBYTE(v38);
              v69[1] = BYTE2(v38);
              v69[2] = BYTE1(v38);
              v69[3] = v38;
              v69[4] = 0;
              if (*((_BYTE *)v17 + 98))
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
                  || (LODWORD(buf[0]) = 136315394,
                      *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                      WORD2(buf[1]) = 1024,
                      *(_DWORD *)((char *)&buf[1] + 6) = 1474,
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u), *((_BYTE *)v17 + 98)))
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0]) = 136315650;
                    *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                    WORD2(buf[1]) = 1024;
                    *(_DWORD *)((char *)&buf[1] + 6) = 1475;
                    WORD1(buf[2]) = 2082;
                    *(_QWORD *)((char *)&buf[2] + 4) = v70;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' --->>>", (uint8_t *)buf, 0x1Cu);
                  }
                }
              }
              if (*((_BYTE *)v17 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0]) = 136316418;
                *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                WORD2(buf[1]) = 1024;
                *(_DWORD *)((char *)&buf[1] + 6) = 1476;
                WORD1(buf[2]) = 2082;
                *(_QWORD *)((char *)&buf[2] + 4) = v70;
                WORD2(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 6) = v71;
                WORD1(buf[4]) = 2082;
                *(_QWORD *)((char *)&buf[4] + 4) = v74;
                WORD2(buf[5]) = 2082;
                *(_QWORD *)((char *)&buf[5] + 6) = v69;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' | %d: '%{public}s'/'%{public}s'", (uint8_t *)buf, 0x36u);
              }
              v67 = v17;
              v68 = HALB_Mutex::Lock(v17);
              if (v19 <= 1934587251)
              {
                if (v19 == 1682533920)
                {
                  v64 = &off_1E69A0E58;
                  v43 = cf;
                  if (cf)
                  {
                    CFRetain(cf);
                    v64 = &off_1E69A0F60;
                    v65 = v43;
                    v40 = v74[69];
                    buf[0] = &off_1E69A0E58;
                    CFRetain(v43);
                  }
                  else
                  {
                    v64 = &off_1E69A0F60;
                    v65 = 0;
                    v40 = v74[69];
                  }
                  buf[0] = &off_1E69A0F60;
                  LODWORD(buf[2]) = v40;
                  v48 = *v54;
                  *v54 = (uint64_t)v43;
                  buf[1] = v48;
                  v46 = (_DWORD *)((char *)v17 + 200);
                }
                else
                {
                  v64 = &off_1E69A0E58;
                  v39 = cf;
                  if (cf)
                  {
                    CFRetain(cf);
                    v64 = &off_1E69A0F60;
                    v65 = v39;
                    v40 = v74[70];
                    buf[0] = &off_1E69A0E58;
                    CFRetain(v39);
                  }
                  else
                  {
                    v64 = &off_1E69A0F60;
                    v65 = 0;
                    v40 = v74[70];
                  }
                  buf[0] = &off_1E69A0F60;
                  LODWORD(buf[2]) = v40;
                  v45 = *v55;
                  *v55 = (uint64_t)v39;
                  buf[1] = v45;
                  v46 = (_DWORD *)((char *)v17 + 304);
                }
                goto LABEL_123;
              }
              if (v19 == 1934587252)
              {
                v64 = &off_1E69A0E58;
                v44 = cf;
                if (cf)
                {
                  CFRetain(cf);
                  v64 = &off_1E69A0F60;
                  v65 = v44;
                  v40 = v74[70];
                  buf[0] = &off_1E69A0E58;
                  CFRetain(v44);
                }
                else
                {
                  v64 = &off_1E69A0F60;
                  v65 = 0;
                  v40 = v74[70];
                }
                buf[0] = &off_1E69A0F60;
                LODWORD(buf[2]) = v40;
                v49 = *v56;
                *v56 = (uint64_t)v44;
                buf[1] = v49;
                v46 = (_DWORD *)((char *)v17 + 408);
LABEL_123:
                *v46 = v40;
              }
              else
              {
                v64 = &off_1E69A0E58;
                v41 = cf;
                if (cf)
                {
                  CFRetain(cf);
                  v64 = &off_1E69A0F60;
                  v65 = v41;
                  v42 = v74[70];
                  buf[0] = &off_1E69A0E58;
                  CFRetain(v41);
                }
                else
                {
                  v64 = &off_1E69A0F60;
                  v65 = 0;
                  v42 = v74[70];
                }
                LODWORD(buf[2]) = v42;
                v47 = *((_QWORD *)v17 + 54);
                *((_QWORD *)v17 + 54) = v41;
                buf[0] = &off_1E69A0F60;
                buf[1] = v47;
                *((_DWORD *)v17 + 110) = v42;
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v64);
              if (*((_BYTE *)v17 + 98))
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
                  || (LODWORD(buf[0]) = 136315650,
                      *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                      WORD2(buf[1]) = 1024,
                      *(_DWORD *)((char *)&buf[1] + 6) = 1498,
                      WORD1(buf[2]) = 2082,
                      *(_QWORD *)((char *)&buf[2] + 4) = v70,
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' <<<---", (uint8_t *)buf, 0x1Cu), *((_BYTE *)v17 + 98)))
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0]) = 136315394;
                    *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                    WORD2(buf[1]) = 1024;
                    *(_DWORD *)((char *)&buf[1] + 6) = 1499;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u);
                  }
                }
              }
              HALB_Mutex::Locker::~Locker(&v67);
            }
          }
        }
      }
    }
LABEL_130:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v72);
    ++v18;
  }
  while (v18 != 4);
  if (*((_BYTE *)v17 + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (LODWORD(buf[0]) = 136315394,
          *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
          WORD2(buf[1]) = 1024,
          *(_DWORD *)((char *)&buf[1] + 6) = 1269,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges(newdevices):     <<<---", (uint8_t *)buf, 0x12u), *((_BYTE *)v17 + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315394;
        *(_QWORD *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 1270;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u);
      }
    }
  }
  v10 = v53;
  HALS_DefaultDeviceManager::CheckForChanges(v17);
LABEL_140:
  std::mutex::unlock(v10);
LABEL_141:
  v50 = v63;
  if (v63)
  {
    v51 = (unint64_t *)&v63->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_1B5A20C5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5A20C90(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,OS::CF::UntypedObject *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::mutex *v30;

  if (a2)
  {
    std::mutex::unlock(v30);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5A20C20);
  }
  JUMPOUT(0x1B5A20C80);
}

void sub_1B5A20D44()
{
  JUMPOUT(0x1B5A20C80);
}

_QWORD *__copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
}

void sub_1B5A20DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZNK11HALS_System20CopyClientByBundleIDERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap *v5;
  const void *v6;
  const void *v7;
  void **v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  _BOOL4 v21;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v24;
  CFTypeRef cf;

  v2 = a1[5];
  v3 = (unsigned __int8 *)a1[6];
  v4 = *(HALS_ObjectMap ***)(v2 + 1288);
  while (v4 != *(HALS_ObjectMap ***)(v2 + 1296))
  {
    v5 = *v4;
    v6 = (const void *)*((_QWORD *)*v4 + 30);
    if (v6)
    {
      CFRetain(v6);
      v7 = (const void *)*((_QWORD *)v5 + 30);
    }
    else
    {
      v7 = 0;
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    v9 = v3[23];
    if ((v9 & 0x80u) == 0)
      v10 = (void *)v3[23];
    else
      v10 = (void *)*((_QWORD *)v3 + 1);
    v11 = v24;
    v12 = (char)v24;
    if ((v24 & 0x80u) != 0)
      v11 = (unint64_t)__p[1];
    if (v10 == (void *)v11)
    {
      if ((v24 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v9 & 0x80) != 0)
      {
        v21 = memcmp(*(const void **)v3, v8, *((_QWORD *)v3 + 1)) == 0;
        if ((v12 & 0x80000000) == 0)
          goto LABEL_25;
      }
      else if (v3[23])
      {
        v13 = v9 - 1;
        v14 = v3;
        do
        {
          v16 = *v14++;
          v15 = v16;
          v18 = *(unsigned __int8 *)v8;
          v8 = (void **)((char *)v8 + 1);
          v17 = v18;
          v20 = v13-- != 0;
          v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
        if (((char)v24 & 0x80000000) == 0)
        {
LABEL_25:
          if (!v21)
            goto LABEL_29;
          goto LABEL_26;
        }
      }
      else
      {
        v21 = 1;
        if (((char)v24 & 0x80000000) == 0)
          goto LABEL_25;
      }
    }
    else
    {
      v21 = 0;
      if (((char)v24 & 0x80000000) == 0)
        goto LABEL_25;
    }
    operator delete(__p[0]);
    if (!v21)
    {
LABEL_29:
      v5 = 0;
      ++v4;
      goto LABEL_30;
    }
LABEL_26:
    HALS_ObjectMap::RetainObject(v5, (HALS_Object *)v8);
LABEL_30:
    if (cf)
      CFRelease(cf);
    if (v5)
      goto LABEL_39;
  }
  v5 = 0;
LABEL_39:
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
}

void sub_1B5A20FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_System::CopyClientByObjectID(HALS_System *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System20CopyClientByObjectIDEj_block_invoke;
  v5[3] = &unk_1E697DEB8;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5A21070(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System20CopyClientByObjectIDEj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(HALS_ObjectMap ***)(v3 + 1288);
  v5 = *(HALS_ObjectMap ***)(v3 + 1296);
  if (v4 == v5)
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while (1)
    {
      v6 = *v4;
      if (*((_DWORD *)*v4 + 4) == *(_DWORD *)(a1 + 48))
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1B5A210F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A210D8);
}

void HALS_System::ProcessPropertyChanged(HALS_System *this, int a2, int a3, int a4, int a5)
{
  HALB_Mutex *v5;
  unsigned __int8 v6;
  _QWORD v7[5];
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[5];
  int v13;
  int v14;
  int v15;
  int v16;

  if (a5)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
    v12[3] = &__block_descriptor_tmp_106;
    v12[4] = this;
    v13 = a2;
    v14 = a3;
    v15 = a4;
    v16 = 0;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
  }
  else
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_108;
    v7[4] = this;
    v8 = a2;
    v9 = a3;
    v10 = a4;
    v11 = 0;
    v6 = atomic_load((unsigned __int8 *)this + 928);
    if ((v6 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 929);
    dispatch_async(*((dispatch_queue_t *)this + 112), v7);
  }
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke(uint64_t a1)
{
  HALS_System::_ProcessPropertyChanged(*(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 32) + 1288), *(HALS_Object **)(*(_QWORD *)(a1 + 32) + 1296), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  HALB_Mutex *v2;
  _QWORD v3[5];
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_3;
  v3[3] = &__block_descriptor_tmp_107;
  v3[4] = v1;
  v4 = *(_OWORD *)(a1 + 40);
  v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_3(uint64_t a1)
{
  HALS_System::_ProcessPropertyChanged(*(HALS_ObjectMap ***)(*(_QWORD *)(a1 + 32) + 1288), *(HALS_Object **)(*(_QWORD *)(a1 + 32) + 1296), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

void HALS_System::_ProcessPropertyChanged(HALS_ObjectMap **this, HALS_Object *a2, int a3, int a4, int a5, int a6)
{
  HALS_ObjectMap **v10;
  HALS_System *v11;
  uint64_t v12;
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  _DWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (this != (HALS_ObjectMap **)a2)
  {
    v10 = this;
    v11 = (HALS_System *)this;
    while (1)
    {
      v12 = *(_QWORD *)v11;
      if (*(_DWORD *)(*(_QWORD *)v11 + 16) == a3)
        break;
      v11 = (HALS_System *)((char *)v11 + 8);
      if (v11 == a2)
        return;
    }
    do
    {
      v13 = *v10;
      HALS_ObjectMap::RetainObject(*v10, a2);
      v15[0] = a4;
      v15[1] = a5;
      v15[2] = a6;
      (*(void (**)(HALS_ObjectMap *, uint64_t, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)v13 + 160))(v13, v12, 0, 1, v15);
      HALS_ObjectMap::ReleaseObject(v13, v14);
      ++v10;
    }
    while (v10 != (HALS_ObjectMap **)a2);
  }
}

void sub_1B5A21344(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_System::CopyTapByUUID(HALS_System *this, const __CFString *a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System13CopyTapByUUIDEPK10__CFString_block_invoke;
  v5[3] = &unk_1E697E0E8;
  v5[4] = &v6;
  v5[5] = this;
  v5[6] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B5A2140C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System13CopyTapByUUIDEPK10__CFString_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const __CFString *v4;
  HALS_ObjectMap *v5;
  const __CFString *v6;
  CFTypeRef cf;

  v2 = *(const void **)(a1 + 48);
  if (v2
    && (v3 = *(_QWORD *)(a1 + 40),
        CFRetain(*(CFTypeRef *)(a1 + 48)),
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v2),
        (v4 = (const __CFString *)cf) != 0))
  {
    CFRetain(cf);
    v6 = v4;
    v5 = HALS_System::_CopyTapByUID(v3, &v6, 0);
    CFRelease(v4);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
}

void sub_1B5A214C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_System15CreateIOContextEP11HALS_ClientPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_Object *v5;
  HALS_Object *v6;
  int v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t HasEntitlementWithBooleanValue;
  const BOOL *v13;
  _BYTE *v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  int v26;
  char v27;
  uint64_t v28;
  AMCP::Utility::Dispatch_Queue *v29;
  AMCP::Utility::Dispatch_Queue *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count_vtbl *v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  int *v57;
  int v58;
  char v59;
  uint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v61;
  uint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  void **p_shared_weak_owners;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  int shared_owners_high;
  char *v69;
  uint64_t v70;
  HALS_Object *v71;
  HALS_ObjectMap *v72;
  const void *v73;
  const void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  int v92;
  uint64_t data_low;
  HALB_Mutex *v94;
  uint64_t v95;
  std::string *p_valuePtr;
  const void *ServerSetting;
  std::__shared_weak_count *size;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  CFTypeID v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  HALS_Object **v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  HALS_Object **v118;
  HALS_Object *v119;
  uint64_t result;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  std::string v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  char v137;
  char v138;
  void *__p;
  char v140;
  uint64_t v141;
  _QWORD v142[5];
  _QWORD v143[5];
  std::string valuePtr;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v4 = (HALS_Object *)operator new();
  v6 = v4;
  v7 = *(_DWORD *)(v3 + 1388);
  v8 = *(std::__shared_weak_count_vtbl **)(v3 + 1448);
  v9 = *(std::__shared_weak_count **)(v3 + 1456);
  v129 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  HALS_Object::HALS_Object(v4, 1768907636, 0, v3, v5);
  v128 = v9;
  *(_QWORD *)v6 = off_1E698AF28;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  HasEntitlementWithBooleanValue = operator new();
  v14 = (_BYTE *)HasEntitlementWithBooleanValue;
  if (v2)
  {
    *(_DWORD *)HasEntitlementWithBooleanValue = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(HasEntitlementWithBooleanValue + 4) = *(_DWORD *)(v2 + 232);
    v15 = *(_OWORD *)(v2 + 200);
    *(_OWORD *)(HasEntitlementWithBooleanValue + 24) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)(HasEntitlementWithBooleanValue + 8) = v15;
    *(_WORD *)(HasEntitlementWithBooleanValue + 40) = *(_WORD *)(v2 + 258);
    *(_BYTE *)(HasEntitlementWithBooleanValue + 42) = HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_ClientEntitlements *)(v2 + 288), CFSTR("com.apple.private.audio.notification-wake-audio"));
    HasEntitlementWithBooleanValue = HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_ClientEntitlements *)(v2 + 288), CFSTR("com.apple.private.audio.dark-wake-audio"));
    v14[43] = HasEntitlementWithBooleanValue;
    v14[44] = *(_BYTE *)(v2 + 256);
    v16 = *(_BYTE *)(v2 + 283);
    v17 = *(_BYTE *)(v2 + 261);
    v18 = *(_BYTE *)(v2 + 262);
    v19 = *(_BYTE *)(v2 + 281);
    v20 = *(_BYTE *)(v2 + 282) != 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    *(_OWORD *)(HasEntitlementWithBooleanValue + 29) = 0u;
    *(_OWORD *)HasEntitlementWithBooleanValue = 0u;
    *(_OWORD *)(HasEntitlementWithBooleanValue + 16) = 0u;
  }
  v14[45] = v16;
  v14[46] = v17;
  v14[47] = v18;
  v14[48] = v19;
  v14[49] = v20;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 8) = v14;
  *((_DWORD *)v6 + 18) = 0;
  *((_QWORD *)v6 + 11) = 0;
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v126 = a1;
  v127 = (uint64_t *)v3;
  if (!AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)HasEntitlementWithBooleanValue, v13))
  {
    v37 = (char *)operator new(0x840uLL);
    v38 = (std::__shared_weak_count *)v37;
    *((_QWORD *)v37 + 1) = 0;
    v39 = (unint64_t *)(v37 + 8);
    *((_QWORD *)v37 + 2) = 0;
    *(_QWORD *)v37 = &off_1E698B850;
    if (v128)
    {
      v40 = (unint64_t *)&v128->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    *((_QWORD *)v37 + 3) = &off_1E698EFD0;
    *((_QWORD *)v37 + 4) = 0;
    *((_QWORD *)v37 + 5) = 0;
    *((_QWORD *)v37 + 6) = v6;
    v37[56] = 0;
    *((_DWORD *)v37 + 16) = 0;
    *(_OWORD *)(v37 + 120) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 88) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *((_DWORD *)v37 + 32) = 7;
    *(_OWORD *)(v37 + 184) = 0u;
    *(_OWORD *)(v37 + 136) = 0u;
    *(_OWORD *)(v37 + 152) = 0u;
    *(_OWORD *)(v37 + 168) = 0u;
    *((_DWORD *)v37 + 48) = 3;
    *(_OWORD *)(v37 + 200) = 0u;
    *(_OWORD *)(v37 + 216) = 0u;
    *(_OWORD *)(v37 + 232) = 0u;
    *(_OWORD *)(v37 + 248) = 0u;
    *((_DWORD *)v37 + 64) = 3;
    *((_DWORD *)v37 + 66) = 0;
    *((_QWORD *)v37 + 34) = 0;
    *((_QWORD *)v37 + 35) = 0x100000000;
    *((_DWORD *)v37 + 72) = 0;
    *((_QWORD *)v37 + 37) = 0;
    *((_QWORD *)v37 + 38) = 0;
    *((_WORD *)v37 + 156) = 0;
    *((_QWORD *)v37 + 40) = 0;
    v37[328] = 0;
    v142[4] = v37 + 24;
    v143[0] = MEMORY[0x1E0C809B0];
    v143[1] = 0x40000000;
    v143[2] = ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke;
    v143[3] = &__block_descriptor_tmp_34_9791;
    v143[4] = v37 + 24;
    v142[0] = MEMORY[0x1E0C809B0];
    v142[1] = 0x40000000;
    v142[2] = ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke_2;
    v142[3] = &__block_descriptor_tmp_36_9792;
    v121 = v37 + 24;
    v42 = v143;
    v43 = v142;
    v38[14].__vftable = (std::__shared_weak_count_vtbl *)off_1E699B578;
    v38[14].__shared_owners_ = 0;
    HALB_Guard::HALB_Guard((HALB_Guard *)&v38[14].__shared_weak_owners_);
    LODWORD(v38[20].__shared_weak_owners_) = 1735552612;
    HIDWORD(v38[20].__shared_weak_owners_) = 0;
    strcpy((char *)&v38[21], "dnrg");
    BYTE5(v38[21].__vftable) = 0;
    LODWORD(v38[21].__shared_owners_) = 0;
    v38[14].__vftable = (std::__shared_weak_count_vtbl *)&off_1E696EC50;
    v38[24].__shared_owners_ = 0;
    v38[28].__vftable = 0;
    LOBYTE(v38[28].__shared_owners_) = 0;
    v38[28].__shared_weak_owners_ = (uint64_t)_Block_copy(v42);
    v38[29].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(v43);
    v38[33].__vftable = 0;
    v38[33].__shared_weak_owners_ = 0;
    v38[33].__shared_owners_ = 0;
    *(_OWORD *)&v38[29].__shared_owners_ = 0u;
    v38[30].std::__shared_count = 0u;
    *(_OWORD *)&v38[30].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v38[31].__shared_owners_ = 0u;
    v38[32].std::__shared_count = 0u;
    LOWORD(v38[32].__shared_weak_owners_) = 0;
    v38[34].__vftable = (std::__shared_weak_count_vtbl *)850045863;
    *(_OWORD *)&v38[34].__shared_owners_ = 0u;
    v38[35].std::__shared_count = 0u;
    *(_OWORD *)&v38[35].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v38[36].__shared_owners_ = 0u;
    v38[37].std::__shared_count = 0u;
    v38[37].__shared_weak_owners_ = 850045863;
    v38[40].std::__shared_count = 0u;
    *(_OWORD *)&v38[40].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v38[38].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v38[39].__shared_owners_ = 0u;
    v38[38].std::__shared_count = 0u;
    v38[41].__shared_owners_ = 850045863;
    *(_OWORD *)&v38[41].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v38[42].__shared_owners_ = 0u;
    v38[43].std::__shared_count = 0u;
    *(_OWORD *)&v38[43].__shared_weak_owners_ = 0u;
    v38[44].__shared_owners_ = (uint64_t)dispatch_semaphore_create(0);
    LODWORD(v38[44].__shared_weak_owners_) = 0;
    strlcpy((char *)&v38[21].__shared_owners_ + 4, "com.apple.audio.IOThread.server", 0x40uLL);

    LODWORD(v38[45].__vftable) = 0;
    *(_OWORD *)&v38[46].__shared_owners_ = 0u;
    LODWORD(v38[55].__vftable) = 0;
    BYTE4(v38[55].__vftable) = 0;
    BYTE5(v38[55].__vftable) = 0;
    LODWORD(v38[55].__shared_owners_) = 0;
    v38[55].__shared_weak_owners_ = 0;
    LODWORD(v38[56].__vftable) = 1024;
    WORD2(v38[56].__vftable) = 0;
    LODWORD(v38[56].__shared_owners_) = 1065353216;
    HIDWORD(v38[56].__shared_owners_) = v7;
    LOBYTE(v38[56].__shared_weak_owners_) = 0;
    if ((v7 & 0xFFFFFFFD) == 0)
    {
      v47 = 1;
      v45 = v8;
      goto LABEL_36;
    }
    v44 = v38[2].__vftable;
    v45 = v8;
    if (v7 == 1)
    {
      v46 = *((unsigned __int8 *)v44[1].__get_deleter + 43);
    }
    else
    {
      if (v7 != 3)
      {
        v47 = 0;
LABEL_36:
        BYTE1(v38[56].__shared_weak_owners_) = v47;
        v38[57].__vftable = v45;
        v38[57].__shared_owners_ = (uint64_t)v128;
        if (v128)
        {
          v52 = (unint64_t *)&v128->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = (_QWORD *)operator new();
        *v54 = 0;
        v54[1] = 0;
        v38[57].__shared_weak_owners_ = (uint64_t)v54;
        v55 = operator new();
        *(_OWORD *)(v55 + 8) = 0u;
        *(_QWORD *)v55 = &off_1E6991B68;
        *(_QWORD *)(v55 + 24) = v54;
        v38[58].__vftable = (std::__shared_weak_count_vtbl *)v55;
        LOWORD(v38[58].__shared_owners_) = 257;
        *(uint64_t *)((char *)&v38[58].__shared_owners_ + 4) = 0;
        v38[60].std::__shared_count = 0u;
        *(_OWORD *)&v38[60].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v38[61].__shared_owners_ = 0u;
        *(uint64_t *)((char *)&v38[61].__shared_weak_owners_ + 6) = 0;
        LODWORD(v38[63].__vftable) = 0;
        *(_OWORD *)&v38[62].__shared_owners_ = 0u;
        v56 = *((_DWORD *)v6 + 4);
        v57 = (int *)*((_QWORD *)v6 + 8);
        v58 = *v57;
        v59 = *((_BYTE *)v57 + 45);
        v38[63].__shared_owners_ = (uint64_t)&off_1E69964A8;
        v38[63].__shared_weak_owners_ = 0;
        LODWORD(v38[64].__vftable) = 0;
        *(_OWORD *)&v38[64].__shared_owners_ = 0u;
        v38[65].std::__shared_count = 0u;
        *(_OWORD *)&v38[65].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v38[66].__shared_owners_ = 0u;
        v38[67].std::__shared_count = 0u;
        *(_OWORD *)&v38[67].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v38[68].__shared_owners_ = 0u;
        v38[69].std::__shared_count = 0u;
        std::vector<BOOL>::reserve((uint64_t)&v38[68].__shared_weak_owners_, 0x10uLL);
        std::vector<BOOL>::reserve((uint64_t)&v38[67].__shared_weak_owners_, 0x10uLL);
        LODWORD(v38[69].__shared_weak_owners_) = v56;
        BYTE4(v38[69].__shared_weak_owners_) = v59;
        HIDWORD(v38[72].__shared_owners_) = 0;
        v38[70].std::__shared_count = 0u;
        *(_OWORD *)&v38[70].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v38[71].__shared_owners_ = 0u;
        *(_OWORD *)((char *)&v38[71].__shared_weak_owners_ + 3) = 0u;
        v38[72].__shared_weak_owners_ = (uint64_t)&v38[65].__shared_weak_owners_;
        v38[73].__vftable = (std::__shared_weak_count_vtbl *)&v38[66].__shared_weak_owners_;
        v38[73].__shared_owners_ = (uint64_t)&v38[69].__shared_weak_owners_;
        LOBYTE(v38[73].__shared_weak_owners_) = 0;
        LOBYTE(v38[77].__vftable) = 0;
        LOBYTE(v38[77].__shared_owners_) = 0;
        BYTE4(v38[77].__shared_owners_) = 0;
        v38[78].std::__shared_count = 0u;
        v38[74].__vftable = 0;
        LOBYTE(v38[75].__vftable) = 0;
        *(_OWORD *)&v38[74].__shared_owners_ = 0u;
        v38[77].__shared_weak_owners_ = (uint64_t)&v38[78];
        v38[78].__shared_weak_owners_ = 0;
        *(_OWORD *)&v38[79].__shared_owners_ = 0u;
        v38[79].__vftable = (std::__shared_weak_count_vtbl *)&v38[79].__shared_owners_;
        LOBYTE(v38[80].__vftable) = 0;
        LOBYTE(v38[81].__vftable) = 0;
        LOBYTE(v38[81].__shared_owners_) = 0;
        BYTE4(v38[81].__shared_owners_) = 0;
        LODWORD(v38[81].__shared_weak_owners_) = v56;
        HIDWORD(v38[81].__shared_weak_owners_) = v58;
        std::string::basic_string[abi:ne180100]<0>(&v38[82].__vftable, "");
        shared_weak_owners = v38[65].__shared_weak_owners_;
        if ((unint64_t)(0x21CFB2B78C13521DLL * ((v38[66].__shared_owners_ - shared_weak_owners) >> 3)) <= 0xF)
        {
          v61 = v38[66].__vftable;
          v134 = (uint64_t)&v38[66].__shared_owners_;
          v132.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1A80uLL);
          v132.__r_.__value_.__l.__size_ = (std::string::size_type)v61
                                         + v132.__r_.__value_.__r.__words[0]
                                         - shared_weak_owners;
          v132.__r_.__value_.__r.__words[2] = v132.__r_.__value_.__l.__size_;
          v133 = v132.__r_.__value_.__r.__words[0] + 6784;
          std::vector<HALS_IOStreamInfo>::__swap_out_circular_buffer(&v38[65].__shared_weak_owners_, &v132);
          std::__split_buffer<HALS_IOStreamInfo>::~__split_buffer((uint64_t)&v132);
        }
        v62 = v38[66].__shared_weak_owners_;
        if ((unint64_t)(v38[67].__shared_owners_ - v62) <= 0x1FF)
        {
          v63 = v38[67].__vftable;
          v134 = (uint64_t)&v38[67].__shared_owners_;
          v132.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x200uLL);
          v132.__r_.__value_.__l.__size_ = (std::string::size_type)v63 + v132.__r_.__value_.__r.__words[0] - v62;
          v132.__r_.__value_.__r.__words[2] = v132.__r_.__value_.__l.__size_;
          v133 = v132.__r_.__value_.__r.__words[0] + 512;
          std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(&v38[66].__shared_weak_owners_, &v132);
          std::__split_buffer<HALS_IOStackDescription>::~__split_buffer((uint64_t)&v132);
        }
        v38[84].__shared_owners_ = 0;
        *(_OWORD *)&v38[83].__shared_weak_owners_ = 0u;
        v38[83].std::__shared_count = 0u;
        LODWORD(v38[84].__shared_weak_owners_) = 1065353216;
        v38[85].__vftable = 0;
        LOBYTE(v38[85].__shared_owners_) = 0;
        LOBYTE(v38[85].__shared_weak_owners_) = 0;
        p_shared_weak_owners = (void **)&v38[86].__shared_weak_owners_;
        v38[86].std::__shared_count = 0u;
        *(_OWORD *)&v38[86].__shared_weak_owners_ = 0u;
        v38[87].__shared_owners_ = 0;
        v65 = operator new();
        *(_QWORD *)(v65 + 32) = 0;
        *(_OWORD *)v65 = 0u;
        *(_OWORD *)(v65 + 16) = 0u;
        v66 = operator new(0x30uLL);
        *(_OWORD *)((char *)v66 + 8) = 0u;
        *(_QWORD *)v66 = &off_1E69940E8;
        v66[2] = 0u;
        *((_QWORD *)v66 + 3) = 0;
        *(_QWORD *)&v67 = (char *)v66 + 24;
        *((_QWORD *)&v67 + 1) = v66;
        *(_OWORD *)(v65 + 24) = v67;
        shared_owners_high = SHIBYTE(v38[87].__shared_owners_);
        v38[87].__shared_weak_owners_ = v65;
        WORD1(v38[58].__shared_owners_) = 0;
        if (shared_owners_high < 0)
        {
          v38[87].__vftable = (std::__shared_weak_count_vtbl *)7;
          v69 = (char *)v38[86].__shared_weak_owners_;
        }
        else
        {
          HIBYTE(v38[87].__shared_owners_) = 7;
          v69 = (char *)&v38[86].__shared_weak_owners_;
        }
        strcpy(v69, "Unknown");
        v70 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v38[2].__vftable[1].__get_deleter);
        v72 = (HALS_ObjectMap *)v70;
        if (v70)
        {
          v73 = *(const void **)(v70 + 240);
          if (v73)
          {
            CFRetain(v73);
            v74 = (const void *)*((_QWORD *)v72 + 30);
          }
          else
          {
            v74 = 0;
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, v74);
          v71 = (HALS_Object *)valuePtr.__r_.__value_.__r.__words[0];
          if (valuePtr.__r_.__value_.__r.__words[0])
          {
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v132, (const __CFString *)valuePtr.__r_.__value_.__l.__data_);
            if (SHIBYTE(v38[87].__shared_owners_) < 0)
              operator delete(*p_shared_weak_owners);
            *(_OWORD *)p_shared_weak_owners = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
            v38[87].__shared_owners_ = v132.__r_.__value_.__r.__words[2];
            if (valuePtr.__r_.__value_.__r.__words[0])
              CFRelease(valuePtr.__r_.__value_.__l.__data_);
          }
        }
        HALS_ObjectMap::ReleaseObject(v72, v71);
        if (v128)
        {
          v75 = (unint64_t *)&v128->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        *(_QWORD *)&v31 = v121;
        *((_QWORD *)&v31 + 1) = v38;
        v77 = (std::__shared_weak_count *)v38[1].__shared_weak_owners_;
        if (v77)
        {
          if (v77->__shared_owners_ != -1)
          {
LABEL_73:
            v33 = v128;
            goto LABEL_74;
          }
          do
            v78 = __ldxr(v39);
          while (__stxr(v78 + 1, v39));
          v124 = v31;
          v79 = (unint64_t *)&v38->__shared_weak_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
          v38[1].__shared_owners_ = (uint64_t)v121;
          v38[1].__shared_weak_owners_ = (uint64_t)v38;
          std::__shared_weak_count::__release_weak(v77);
          v31 = v124;
        }
        else
        {
          do
            v81 = __ldxr(v39);
          while (__stxr(v81 + 1, v39));
          v82 = (unint64_t *)&v38->__shared_weak_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
          v38[1].__shared_owners_ = (uint64_t)v121;
          v38[1].__shared_weak_owners_ = (uint64_t)v38;
        }
        do
          v84 = __ldaxr(v39);
        while (__stlxr(v84 - 1, v39));
        if (!v84)
        {
          v125 = v31;
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          v31 = v125;
        }
        goto LABEL_73;
      }
      v46 = *((unsigned __int8 *)v44[1].__get_deleter + 42);
    }
    v47 = v46 == 0;
    goto LABEL_36;
  }
  v23 = (std::__shared_weak_count *)operator new(0x1F8uLL);
  *(_OWORD *)&v23->__shared_owners_ = 0u;
  v24 = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698B800;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6972F50;
  v25 = v23 + 1;
  *(_OWORD *)&v23[1].__shared_owners_ = 0u;
  v23[2].__vftable = 0;
  LODWORD(v23[2].__shared_owners_) = 0;
  v23[2].__shared_weak_owners_ = (uint64_t)v6;
  *(_OWORD *)&v23[3].__shared_weak_owners_ = 0u;
  v23[3].std::__shared_count = 0u;
  *(_OWORD *)&v23[4].__shared_owners_ = 0u;
  v23[5].std::__shared_count = 0u;
  v23[5].__shared_weak_owners_ = 0;
  LODWORD(v23[6].__vftable) = 1;
  v23[6].__shared_owners_ = 0;
  *(_OWORD *)&v23[6].__shared_weak_owners_ = 0u;
  v23[7].__shared_owners_ = 0x100000000;
  *(_OWORD *)&v23[7].__shared_weak_owners_ = 0u;
  v23[11].__vftable = 0;
  *(_OWORD *)&v23[10].__shared_owners_ = 0u;
  *(_OWORD *)&v23[9].__shared_weak_owners_ = 0u;
  v23[9].std::__shared_count = 0u;
  *(_OWORD *)&v23[8].__shared_owners_ = 0u;
  LODWORD(v23[11].__shared_owners_) = 512;
  *(_OWORD *)&v23[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v23[20].__shared_owners_ = 0u;
  v26 = *((_DWORD *)v6 + 4);
  v27 = *(_BYTE *)(*((_QWORD *)v6 + 8) + 45);
  v28 = operator new();
  *(_DWORD *)v28 = v26;
  *(_BYTE *)(v28 + 4) = v27;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_QWORD *)(v28 + 56) = 0;
  std::unique_ptr<HALB_IOBufferManager_Server>::reset[abi:ne180100]((HALB_IOBufferManager_Server **)&v23[11], (HALB_IOBufferManager_Server *)v28);
  std::vector<BOOL>::reserve((uint64_t)&v23[3].__shared_weak_owners_, 0x10uLL);
  std::vector<BOOL>::reserve((uint64_t)&v23[4].__shared_weak_owners_, 0x10uLL);
  v29 = (AMCP::Utility::Dispatch_Queue *)operator new();
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v29, "HALS_IOContext_MCP_Impl High Priority Server Queue");
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)&v23[20].__shared_owners_, v29);
  v30 = (AMCP::Utility::Dispatch_Queue *)operator new();
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v30, "HALS_IOContext_MCP_Impl Default Priority Server Queue");
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)&v23[20].__shared_weak_owners_, v30);
  *(_QWORD *)&v31 = v23 + 1;
  *((_QWORD *)&v31 + 1) = v23;
  v32 = (std::__shared_weak_count *)v23[1].__shared_weak_owners_;
  if (v32)
  {
    v33 = v128;
    if (v32->__shared_owners_ != -1)
      goto LABEL_74;
    do
      v34 = __ldxr(v24);
    while (__stxr(v34 + 1, v24));
    v122 = v31;
    v35 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    v23[1].__shared_owners_ = (uint64_t)v25;
    v23[1].__shared_weak_owners_ = (uint64_t)v23;
    std::__shared_weak_count::__release_weak(v32);
    v31 = v122;
  }
  else
  {
    v33 = v128;
    do
      v48 = __ldxr(v24);
    while (__stxr(v48 + 1, v24));
    v49 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v23[1].__shared_owners_ = (uint64_t)v25;
    v23[1].__shared_weak_owners_ = (uint64_t)v23;
  }
  do
    v51 = __ldaxr(v24);
  while (__stlxr(v51 - 1, v24));
  if (!v51)
  {
    v123 = v31;
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v31 = v123;
  }
LABEL_74:
  *((_OWORD *)v6 + 6) = v31;
  if (v33)
  {
    v85 = (unint64_t *)&v33->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_QWORD *)v6 + 18) = 33;
  *(_OWORD *)((char *)v6 + 156) = 0u;
  *(_OWORD *)((char *)v6 + 172) = 0u;
  *((_DWORD *)v6 + 47) = 0;
  v87 = operator new();
  *(_BYTE *)v87 = 0;
  *(_BYTE *)(v87 + 8) = 0;
  *(_BYTE *)(v87 + 16) = 0;
  *(_BYTE *)(v87 + 24) = 0;
  *(_BYTE *)(v87 + 32) = 0;
  *(_BYTE *)(v87 + 40) = 0;
  *(_BYTE *)(v87 + 48) = 0;
  *(_BYTE *)(v87 + 56) = 0;
  *(_QWORD *)(v87 + 64) = 0;
  std::string::basic_string[abi:ne180100]<0>(&valuePtr, "Audio HAL Overload Reporting Spool");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
    LOBYTE(v133) = 1;
    v134 = -4294967279;
    v135 = 0;
    v136 = 1;
    v137 = 0;
    v138 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  else
  {
    v132 = valuePtr;
    LOBYTE(v133) = 1;
    v134 = -4294967279;
    v135 = 0;
    v136 = 1;
    v137 = 0;
    v138 = 0;
  }
  v88 = operator new();
  MEMORY[0x1B5E4FD34](v88, 0, &v132);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(v87 + 64), v88);
  if ((_BYTE)v133 && SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 25) = 0;
  *((_QWORD *)v6 + 26) = 0;
  *((_QWORD *)v6 + 24) = v87;
  v89 = operator new();
  *(_WORD *)v89 = 0;
  v90 = (_OWORD *)operator new();
  v90[15] = 0u;
  v90[16] = 0u;
  v90[13] = 0u;
  v90[14] = 0u;
  v90[11] = 0u;
  v90[12] = 0u;
  v90[9] = 0u;
  v90[10] = 0u;
  v90[7] = 0u;
  v90[8] = 0u;
  v90[5] = 0u;
  v90[6] = 0u;
  v90[3] = 0u;
  v90[4] = 0u;
  v90[1] = 0u;
  v90[2] = 0u;
  *v90 = 0u;
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 8) = v90;
  std::string::basic_string[abi:ne180100]<0>(&valuePtr, "Audio HAL Overload Reporting Spool");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
    LOBYTE(v133) = 1;
    v134 = -4294967279;
    v135 = 0;
    v136 = 1;
    v137 = 0;
    v138 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  else
  {
    v132 = valuePtr;
    LOBYTE(v133) = 1;
    v134 = -4294967279;
    v135 = 0;
    v136 = 1;
    v137 = 0;
    v138 = 0;
  }
  v91 = operator new();
  MEMORY[0x1B5E4FD34](v91, 0, &v132);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(v89 + 16), v91);
  *(_OWORD *)(v89 + 72) = 0u;
  *(_OWORD *)(v89 + 56) = 0u;
  *(_OWORD *)(v89 + 40) = 0u;
  *(_OWORD *)(v89 + 24) = 0u;
  if ((_BYTE)v133 && SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  *((_QWORD *)v6 + 27) = v89;
  *((_WORD *)v6 + 112) = 256;
  if (g_static_start_options == 1)
    v92 = 5000;
  else
    v92 = 5000000;
  *((_DWORD *)v6 + 38) = v92;
  data_low = 1024;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 284) == 1)
      data_low = 4096;
    else
      data_low = 1024;
  }
  v94 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v94);
  *((_QWORD *)v6 + 6) = v94;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v132);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v132.__r_.__value_.__r.__words[2], (uint64_t)"com.apple.audio.HALS_IOContext-event ", 37);
  std::ostream::operator<<();
  v95 = operator new();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&valuePtr, (uint64_t)&v133);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_valuePtr = &valuePtr;
  else
    p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v95, (char *)p_valuePtr);
  *((_QWORD *)v6 + 7) = v95;
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  v130 = 0;
  v131 = 0;
  HALS_System::GetInstance(&valuePtr, 0, &v130);
  ServerSetting = (const void *)HALS_SettingsManager::ReadServerSetting(*(HALS_SettingsManager **)(valuePtr.__r_.__value_.__r.__words[0] + 1408), CFSTR("IOProcBufferSize"));
  size = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v99 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v101 = v131;
  if (v131)
  {
    v102 = (unint64_t *)&v131->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (ServerSetting)
        goto LABEL_115;
LABEL_121:
      v104 = v127;
      goto LABEL_122;
    }
  }
  if (!ServerSetting)
    goto LABEL_121;
LABEL_115:
  v104 = v127;
  v105 = CFGetTypeID(ServerSetting);
  if (v105 == CFNumberGetTypeID())
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    CFNumberGetValue((CFNumberRef)ServerSetting, kCFNumberSInt32Type, &valuePtr);
    if (SLODWORD(valuePtr.__r_.__value_.__l.__data_) >= 0x8000)
      data_low = data_low;
    else
      data_low = LODWORD(valuePtr.__r_.__value_.__l.__data_);
  }
  CFRelease(ServerSetting);
LABEL_122:
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v6 + 12) + 16))(*((_QWORD *)v6 + 12), data_low);
  v132.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v106 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v132.__r_.__value_.__r.__words
                            + *(_QWORD *)(v132.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                               + 64);
  v132.__r_.__value_.__r.__words[2] = v106;
  v133 = MEMORY[0x1E0DE4FB8] + 16;
  if (v140 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&v141);
  if (v129)
  {
    v107 = (unint64_t *)&v129->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v109 = (HALS_Object **)v104[170];
  v110 = v104[171];
  if ((unint64_t)v109 >= v110)
  {
    v112 = v104[169];
    v113 = ((uint64_t)v109 - v112) >> 3;
    if ((unint64_t)(v113 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v114 = v110 - v112;
    v115 = v114 >> 2;
    if (v114 >> 2 <= (unint64_t)(v113 + 1))
      v115 = v113 + 1;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
      v116 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v116 = v115;
    v134 = (uint64_t)(v104 + 171);
    if (v116)
      v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v116);
    else
      v117 = 0;
    v118 = (HALS_Object **)(v116 + 8 * v113);
    v132.__r_.__value_.__r.__words[0] = v116;
    v132.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
    v133 = v116 + 8 * v117;
    *v118 = v6;
    v132.__r_.__value_.__r.__words[2] = (std::string::size_type)(v118 + 1);
    std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer(v104 + 169, (HALS_Object *)&v132);
    v111 = (_QWORD *)v104[170];
    std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer((uint64_t)&v132, v119);
  }
  else
  {
    *v109 = v6;
    v111 = v109 + 1;
  }
  v104[170] = (uint64_t)v111;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  result = (**(uint64_t (***)(HALS_Object *))v6)(v6);
  if (g_static_start_options == 1)
    *((_BYTE *)v6 + 225) = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 32) + 8) + 24) = v6;
  return result;
}

void sub_1B5A22714(void *a1, HALS_Object *a2)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  const void *v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD **v24;
  HALS_IOThread *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v8 = *(const void **)(v6 - 120);
  if (v8)
    CFRelease(v8);
  HALS_ObjectMap::ReleaseObject(v3, a2);
  v9 = *(void ***)(v5 + 2104);
  *(_QWORD *)(v5 + 2104) = 0;
  if (v9)
    std::default_delete<HALS_IOContextHostedDSP>::operator()[abi:ne180100](v9);
  if (*(char *)(v5 + 2103) < 0)
    operator delete(*v4);
  std::thread::~thread((std::thread *)(v5 + 2040));
  std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table(v5 + 2000);
  HALS_IOContextDescription::~HALS_IOContextDescription((HALS_IOContextDescription *)(v5 + 1520));
  v10 = *(void **)(v5 + 1456);
  if (v10)
  {
    *(_QWORD *)(v5 + 1464) = v10;
    operator delete(v10);
  }
  v11 = *v22;
  if (*v22 == (_QWORD *)(v5 + 1416))
  {
    v12 = 4;
    v11 = (_QWORD *)(v5 + 1416);
  }
  else
  {
    if (!v11)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v5 + 1368);
  v13 = *v24;
  if (*v24 == (_QWORD *)(v5 + 1088))
  {
    v14 = 4;
    v13 = (_QWORD *)(v5 + 1088);
  }
  else
  {
    if (!v13)
      goto LABEL_19;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_19:
  HALS_IOThread::~HALS_IOThread(v25);
  v15 = *(std::__shared_weak_count **)(v5 + 40);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)())v27->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v5);
  operator delete(v18);
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)())v27->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v26);
  v21 = *((_QWORD *)v2 + 8);
  *((_QWORD *)v2 + 8) = 0;
  if (v21)
    MEMORY[0x1B5E50688](v21, 0x1000C40B62306B4);
  HALS_Object::~HALS_Object(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
  MEMORY[0x1B5E50688](v2, 0x10F1C40DF1BCE50);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_System16DestroyIOContextEP11HALS_Clientj_block_invoke(uint64_t a1)
{
  HALS_System::_DestroyIOContext(*(HALS_System **)(a1 + 32), *(HALS_Client **)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void sub_1B5A22EA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::SetIOContextIsRunning(HALS_System *this, int a2, char a3)
{
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  _QWORD v10[5];
  int v11;
  char v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((HALS_System::sIsInitialized & 1) != 0)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke;
    v10[3] = &__block_descriptor_tmp_130;
    v10[4] = this;
    v11 = a2;
    v12 = a3;
    v3 = atomic_load((unsigned __int8 *)this + 288);
    if ((v3 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 289);
    dispatch_async(*((dispatch_queue_t *)this + 32), v10);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = *(std::__shared_weak_count **)v14;
    v5 = **(NSObject ***)buf;
    if (*(_QWORD *)v14)
    {
      v6 = (unint64_t *)(*(_QWORD *)v14 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)v14 = 2080;
      *(_QWORD *)&v14[2] = "HALS_System.cpp";
      v15 = 1024;
      v16 = 3132;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Cannot send IO Context Is Running on an uninitialized system.", buf, 0x18u);
    }
  }
}

void ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke(uint64_t a1)
{
  HALS_SettingsManager **v2;
  HALS_ObjectMap *v3;
  char v4;
  uint64_t v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  uint64_t v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  HALB_Mutex *v14;
  int v15;
  HALB_Mutex *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char ServerBooleanSetting;
  HALB_Mutex *v21;
  _QWORD v22[7];
  char v23;
  char v24;
  uint64_t v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  HALS_ObjectMap *v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;

  v2 = *(HALS_SettingsManager ***)(a1 + 32);
  v3 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 44);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(v3);
  v7 = (HALS_ObjectMap *)v5;
  v8 = MEMORY[0x1E0C809B0];
  if (v5)
  {
    v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v5 + 64));
    if (v10)
    {
      v11 = HALS_ObjectMap::CopyObjectByObjectID(v3);
      v13 = (HALS_ObjectMap *)v11;
      if (v11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 216))(v11))
      {
        v35 = 0;
        v36 = &v35;
        v37 = 0x2000000000;
        v38 = 0;
        v28 = v8;
        v29 = 0x40000000;
        v30 = (uint64_t)___ZN11HALS_Client46UpdateStartCountAndMaybeNotifyProcessIsRunningEjb_block_invoke;
        v31 = &unk_1E6972030;
        v32 = &v35;
        v33 = v10;
        v34 = v4;
        v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v10 + 56))(v10);
        HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&v28);
        if (*((_BYTE *)v36 + 24))
        {
          v25[0] = 0;
          v25[1] = 0;
          HALS_System::GetInstance(&v26, 0, v25);
          if (v26)
          {
            v15 = *((_DWORD *)v10 + 4);
            v39 = v8;
            v40 = 0x40000000;
            v41 = (uint64_t)___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
            v42 = &__block_descriptor_tmp_106;
            v43 = v26;
            v44 = v15;
            v45 = 0x676C6F627069723FLL;
            v46 = 0;
            v16 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
            HALB_CommandGate::ExecuteCommand(v16, (uint64_t)&v39);
          }
          v17 = v27;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        _Block_object_dispose(&v35, 8);
      }
      HALS_ObjectMap::ReleaseObject(v13, v12);
    }
    HALS_ObjectMap::ReleaseObject(v10, v9);
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
  ServerBooleanSetting = HALS_SettingsManager::ReadServerBooleanSetting(v2[176], CFSTR("AllowStackShotsDuringIO"), 0);
  v39 = 0;
  v40 = (uint64_t)&v39;
  v41 = 0x2000000000;
  LOBYTE(v42) = 0;
  v28 = 0;
  v29 = (uint64_t)&v28;
  v30 = 0x2000000000;
  LOBYTE(v31) = 0;
  v22[0] = v8;
  v22[1] = 0x40000000;
  v22[2] = ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke_2;
  v22[3] = &unk_1E697E1B8;
  v22[5] = &v28;
  v22[6] = v2;
  v23 = *(_BYTE *)(a1 + 44);
  v24 = ServerBooleanSetting;
  v22[4] = &v39;
  v21 = (HALB_Mutex *)(*((uint64_t (**)(HALS_SettingsManager **))*v2 + 7))(v2);
  HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v22);
  if (*(_BYTE *)(v40 + 24))
    TellKernelAudioIOIsRunning(*(unsigned __int8 *)(v29 + 24));
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v39, 8);
}

void sub_1B5A232B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  HALS_ObjectMap *v28;
  HALS_ObjectMap *v29;
  HALS_ObjectMap *v30;
  HALS_Object *v32;
  HALS_Object *v33;
  HALS_Object *v34;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a28, 8);
  HALS_ObjectMap::ReleaseObject(v30, v32);
  HALS_ObjectMap::ReleaseObject(v29, v33);
  HALS_ObjectMap::ReleaseObject(v28, v34);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A23294);
}

uint64_t ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  v2 = *(_QWORD *)(v1 + 1376);
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)(v1 + 1376) = v2 + 1;
    if (!v2 && !*(_BYTE *)(result + 57))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
LABEL_12:
      *(_BYTE *)(v1 + 1384) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24);
      return result;
    }
  }
  else
  {
    v3 = v2 - 1;
    *(_QWORD *)(v1 + 1376) = v3;
    if (!v3 && !*(_BYTE *)(result + 57))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 0;
      goto LABEL_12;
    }
  }
  if (*(_BYTE *)(v1 + 1384))
  {
    if (*(_BYTE *)(result + 57))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 0;
      *(_BYTE *)(v1 + 1384) = 0;
    }
  }
  return result;
}

void ___ZN11HALS_System37IsUnderlyingIOContextRunningForDeviceEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void ___ZNK11HALS_System46CountRunningIOContextsForDeviceExcludingClientEjP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void ___ZNK11HALS_System32GetSmallestActiveBufferFrameSizeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void ___ZNK11HALS_System23GetActiveIOContextsInfoEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__138(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

HALS_ObjectMap ***__Block_byref_object_dispose__139(uint64_t a1, HALS_Object *a2)
{
  return HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(a1 + 40), a2);
}

void ___ZNK11HALS_System23UpdateTapsForNewContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  uint64_t v1;
  HALS_ObjectMap **v2;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  HALS_Object *v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  HALS_ObjectMap **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  HALS_ObjectMap **v24;
  char *v25;
  char *v26;
  HALS_ObjectMap *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(HALS_ObjectMap ***)(v1 + 1312);
  for (i = *(HALS_ObjectMap ***)(v1 + 1320); v2 != i; ++v2)
  {
    v5 = *v2;
    v7 = *((_QWORD *)*v2 + 31);
    v6 = (std::__shared_weak_count *)*((_QWORD *)*v2 + 32);
    v34 = v7;
    v35 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 72));
    v10 = *(uint64_t **)(v7 + 96);
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v11 = 0;
    if (v10)
    {
      v12 = v10;
      do
      {
        ++v11;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v31, v10, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 72));
    v14 = v31;
    if (v31 != v32)
    {
      v15 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v17 = (HALS_ObjectMap **)v15[6];
      v16 = v15[7];
      if ((unint64_t)v17 >= v16)
      {
        v19 = v15[5];
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v23);
        else
          v13 = 0;
        v24 = (HALS_ObjectMap **)(v23 + 8 * v20);
        *v24 = v5;
        v18 = v24 + 1;
        v26 = (char *)v15[5];
        v25 = (char *)v15[6];
        if (v25 != v26)
        {
          do
          {
            v27 = (HALS_ObjectMap *)*((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)v15[5];
        }
        v15[5] = v24;
        v15[6] = v18;
        v15[7] = v23 + 8 * (_QWORD)v13;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v17 = v5;
        v18 = v17 + 1;
      }
      v15[6] = v18;
      HALS_ObjectMap::RetainObject(v5, v13);
      v14 = v31;
    }
    if (v14)
      operator delete(v14);
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1B5A23760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

HALS_ObjectMap ***HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser(HALS_ObjectMap ***a1, HALS_Object *a2)
{
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    v3 = *a1;
  }
  if (v3)
  {
    a1[1] = v3;
    operator delete(v3);
  }
  return a1;
}

void HALS_System::RemoveTapFromAllContexts(uint64_t a1, uint64_t *a2)
{
  HALB_Mutex *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(_QWORD *, uint64_t);
  void (*v18)(uint64_t);
  _QWORD v19[3];
  void **v20;

  v14 = 0;
  v15 = &v14;
  v16 = 0x4002000000;
  v17 = __Block_byref_object_copy__35;
  v18 = __Block_byref_object_dispose__36;
  memset(v19, 0, sizeof(v19));
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZNK11HALS_System24RemoveTapFromAllContextsENSt3__110shared_ptrI13HALS_MultiTapEE_block_invoke;
  v13[3] = &unk_1E697E328;
  v13[4] = &v14;
  v13[5] = a1;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v13);
  v4 = (uint64_t *)v15[5];
  v5 = (uint64_t *)v15[6];
  while (v4 != v5)
  {
    v6 = *v4;
    v7 = *a2;
    v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    HALS_IOContext::RemoveTap(*(_QWORD *)(v6 + 96), v7, v8);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    ++v4;
  }
  _Block_object_dispose(&v14, 8);
  v20 = (void **)v19;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1B5A2393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v11 - 56) = v10;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System24RemoveTapFromAllContextsENSt3__110shared_ptrI13HALS_MultiTapEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352)
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(_QWORD *)(v1 + 1360) - *(_QWORD *)(v1 + 1352)) >> 3);
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::__on_zero_shared(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ___ZN11HALS_System31ServerHighPriorityAsyncDispatchENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1B5A23A50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *AMCP::DAL::Container::get_data_handler(AMCP::DAL *a1, uint64_t a2, double a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *result;
  __int128 v15;
  uint64_t v16;
  double v17;

  AMCP::DAL::demand_map(a1);
  if (!*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
    goto LABEL_17;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = *(unsigned int *)(a2 + 8);
    if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) <= v6)
      v8 = v6 % *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  else
  {
    v8 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v6;
  }
  v9 = *(uint64_t ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_17:
    v12 = operator new(0x68uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1E697E980;
    v12[3] = &off_1E6984798;
    v13 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v12 + 3) = v13;
    v12[8] = *(_QWORD *)(a2 + 32);
    *((_BYTE *)v12 + 72) = 0;
    result = std::vector<unsigned char>::vector(v12 + 10, *(_DWORD *)(a2 + 24) * vcvtmd_s64_f64(a3));
    *(_QWORD *)&v15 = v12 + 3;
    *((_QWORD *)&v15 + 1) = v12;
    *(_OWORD *)a1 = v15;
    return result;
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == v6)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
        v11 %= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
    else
    {
      v11 &= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
    }
    if (v11 != v8)
      goto LABEL_17;
LABEL_16:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_17;
  }
  if (*((_DWORD *)v10 + 4) != (_DWORD)v6)
    goto LABEL_16;
  v17 = a3;
  v16 = v10[6];
  if (!v16)
    std::__throw_bad_function_call[abi:ne180100]();
  return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, double *))(*(_QWORD *)v16 + 48))(v16, a2, &v17);
}

void sub_1B5A23C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void AMCP::DAL::demand_map(AMCP::DAL *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      AMCP::DAL::demand_map(void)::s_map = 0u;
      *(_OWORD *)&qword_1EDB87EA8 = 0u;
      dword_1EDB87EB8 = 1065353216;
    }
  }
  if ((AMCP::DAL::demand_map(void)::hasBeenInitialized & 1) == 0)
  {
    AMCP::DAL::demand_map(void)::hasBeenInitialized = 1;
    AMCP::DAL::DALSupport::initialize_data_handlers(this);
  }
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697E980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

uint64_t (***AMCP::DAL::DALSupport::initialize_data_handlers(AMCP::DAL::DALSupport *this))()
{
  uint64_t (***v1)();
  uint64_t v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;
  uint64_t (***result)();
  uint64_t v18;
  uint64_t (**v19)();
  void *v20;
  uint64_t (***v21)();
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1B5E4FD70](this);
  v19 = &off_1E697E9D0;
  v21 = &v19;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x6C70636D, &v19);
  v1 = v21;
  if (v21 == &v19)
  {
    v2 = 4;
    v1 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v2 = 5;
  }
  (*v1)[v2]();
LABEL_6:
  v19 = &off_1E697EAB0;
  v21 = &v19;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x73707673, &v19);
  v3 = v21;
  if (v21 == &v19)
  {
    v4 = 4;
    v3 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_11:
  v19 = &off_1E697EB80;
  v21 = &v19;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x616C6163, &v19);
  v5 = v21;
  if (v21 == &v19)
  {
    v6 = 4;
    v5 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_16:
  v19 = &off_1E697EC50;
  v21 = &v19;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x63616333, &v19);
  v7 = v21;
  if (v21 == &v19)
  {
    v8 = 4;
    v7 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_21:
  v19 = &off_1E697ECD0;
  v21 = &v19;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x61632D33, &v19);
  v9 = v21;
  if (v21 == &v19)
  {
    v10 = 4;
    v9 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_26;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_26:
  v19 = &off_1E697ED50;
  v20 = AMCP::DAL::PCM_File_Factory;
  v21 = &v19;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x6C70636D, &v19);
  v11 = v21;
  if (v21 == &v19)
  {
    v12 = 4;
    v11 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_31;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_31:
  v19 = &off_1E697ED50;
  v20 = AMCP::DAL::Packetized_File_Factory;
  v21 = &v19;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x616C6163, &v19);
  v13 = v21;
  if (v21 == &v19)
  {
    v14 = 4;
    v13 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_36;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_36:
  v19 = &off_1E697ED50;
  v20 = AMCP::DAL::Packetized_File_Factory;
  v21 = &v19;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x63616333, &v19);
  v15 = v21;
  if (v21 == &v19)
  {
    v16 = 4;
    v15 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_41;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_41:
  v19 = &off_1E697ED50;
  v20 = AMCP::DAL::Packetized_File_Factory;
  v21 = &v19;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x61632D33, &v19);
  result = v21;
  if (v21 == &v19)
  {
    v18 = 4;
    result = &v19;
  }
  else
  {
    if (!v21)
      return result;
    v18 = 5;
  }
  return (uint64_t (***)())(*result)[v18]();
}

void sub_1B5A24020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  uint64_t v14;
  char *v16;

  v16 = a13;
  if (a13 == v13)
  {
    v14 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_7;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v14))();
LABEL_7:
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::DAL::Container::set_data_handler_format(AMCP::DAL *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  void **v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD **v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *i;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *result;
  uint64_t v35;
  void *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[4];

  v4 = a1;
  v39[3] = *MEMORY[0x1E0C80C00];
  AMCP::DAL::demand_map(a1);
  v5 = v4;
  v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
  {
    v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v2 = v4;
      if (*((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)v4)
        v2 = (unint64_t)v4 % *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
    else
    {
      v2 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v4;
    }
    v8 = *(void ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v2);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v9 + 4) == v4)
              goto LABEL_74;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1))
                v10 %= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
            }
            else
            {
              v10 &= *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
            }
            if (v10 != v2)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  v9 = operator new(0x38uLL);
  *v9 = 0;
  v9[1] = v4;
  *((_DWORD *)v9 + 4) = v4;
  v9[6] = 0;
  v11 = (float)(unint64_t)(qword_1EDB87EB0 + 1);
  if (v6 && (float)(*(float *)&dword_1EDB87EB8 * (float)v6) >= v11)
  {
    v5 = v2;
    goto LABEL_64;
  }
  v12 = 1;
  if (v6 >= 3)
    v12 = (v6 & (v6 - 1)) != 0;
  v13 = v12 | (2 * v6);
  v14 = vcvtps_u32_f32(v11 / *(float *)&dword_1EDB87EB8);
  if (v13 <= v14)
    prime = (int8x8_t)v14;
  else
    prime = (int8x8_t)v13;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v22 = vcvtps_u32_f32((float)(unint64_t)qword_1EDB87EB0 / *(float *)&dword_1EDB87EB8);
    if (v6 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (*(_QWORD *)&prime <= v22)
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = (void *)AMCP::DAL::demand_map(void)::s_map;
      *(_QWORD *)&AMCP::DAL::demand_map(void)::s_map = 0;
      if (v36)
        operator delete(v36);
      v6 = 0;
      *((_QWORD *)&AMCP::DAL::demand_map(void)::s_map + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v16 = operator new(8 * *(_QWORD *)&prime);
  v17 = (void *)AMCP::DAL::demand_map(void)::s_map;
  *(_QWORD *)&AMCP::DAL::demand_map(void)::s_map = v16;
  if (v17)
    operator delete(v17);
  v18 = 0;
  *((int8x8_t *)&AMCP::DAL::demand_map(void)::s_map + 1) = prime;
  do
    *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v18++) = 0;
  while (*(_QWORD *)&prime != v18);
  v19 = (_QWORD **)qword_1EDB87EA8;
  if (qword_1EDB87EA8)
  {
    v20 = *(_QWORD *)(qword_1EDB87EA8 + 8);
    v21 = (uint8x8_t)vcnt_s8(prime);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&prime)
        v20 %= *(_QWORD *)&prime;
    }
    else
    {
      v20 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v20) = &qword_1EDB87EA8;
    for (i = *v19; i; v20 = v26)
    {
      v26 = i[1];
      if (v21.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&prime)
          v26 %= *(_QWORD *)&prime;
      }
      else
      {
        v26 &= *(_QWORD *)&prime - 1;
      }
      if (v26 != v20)
      {
        if (!*(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v26))
        {
          *(_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v26) = v19;
          goto LABEL_56;
        }
        *v19 = (_QWORD *)*i;
        *i = **(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v26);
        **(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v26) = i;
        i = v19;
      }
      v26 = v20;
LABEL_56:
      v19 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v27 = AMCP::DAL::demand_map(void)::s_map;
  v28 = *(_QWORD **)(AMCP::DAL::demand_map(void)::s_map + 8 * v5);
  if (v28)
  {
    *v9 = *v28;
LABEL_72:
    *v28 = v9;
    goto LABEL_73;
  }
  *v9 = qword_1EDB87EA8;
  qword_1EDB87EA8 = (uint64_t)v9;
  *(_QWORD *)(v27 + 8 * v5) = &qword_1EDB87EA8;
  if (*v9)
  {
    v29 = *(_QWORD *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v29 >= v6)
        v29 %= v6;
    }
    else
    {
      v29 &= v6 - 1;
    }
    v28 = (_QWORD *)(AMCP::DAL::demand_map(void)::s_map + 8 * v29);
    goto LABEL_72;
  }
LABEL_73:
  ++qword_1EDB87EB0;
LABEL_74:
  v30 = (_QWORD *)a2[3];
  if (v30)
  {
    if (v30 == a2)
    {
      v38 = v37;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v37);
    }
    else
    {
      v38 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
    }
  }
  else
  {
    v38 = 0;
  }
  v31 = (char *)(v9 + 3);
  if (v9 + 3 != v37)
  {
    v32 = v38;
    v33 = (char *)v9[6];
    if (v38 == v37)
    {
      if (v33 == v31)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v39);
        (*(void (**)(_QWORD *))(*v38 + 32))(v38);
        v38 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v9[6] + 24))(v9[6], v37);
        (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 32))(v9[6]);
        v9[6] = 0;
        v38 = v37;
        (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v9 + 3);
        (*(void (**)(_QWORD *))(v39[0] + 32))(v39);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v9 + 3);
        (*(void (**)(_QWORD *))(*v38 + 32))(v38);
        v38 = (_QWORD *)v9[6];
      }
      v9[6] = v31;
    }
    else if (v33 == v31)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)v31 + 24))(v9 + 3, v37);
      (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 32))(v9[6]);
      v9[6] = v38;
      v38 = v37;
    }
    else
    {
      v38 = (_QWORD *)v9[6];
      v9[6] = v32;
    }
  }
  result = v38;
  if (v38 == v37)
  {
    v35 = 4;
    result = v37;
  }
  else
  {
    if (!v38)
      return result;
    v35 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v35))();
}

void sub_1B5A24658(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697ED50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697ED50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFNSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEEERKNS2_12DAL_SettingsEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::target_type()
{
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697ECD0;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697ECD0;
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()@<X0>(__int128 *a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;

  v5 = *a2;
  v6 = operator new();
  AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(v6, a1, v5);
  return std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::shared_ptr[abi:ne180100]<AMCP::DAL::Packetized_Data_Handler,void>(a3, v6);
}

void sub_1B5A247F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

_QWORD *std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::shared_ptr[abi:ne180100]<AMCP::DAL::Packetized_Data_Handler,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E697EBF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B5A248B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_23Packetized_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697EC50;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697EC50;
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()@<X0>(__int128 *a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;

  v5 = *a2;
  v6 = operator new();
  AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(v6, a1, v5);
  return std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::shared_ptr[abi:ne180100]<AMCP::DAL::Packetized_Data_Handler,void>(a3, v6);
}

void sub_1B5A24A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697EB80;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697EB80;
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()@<X0>(__int128 *a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;

  v5 = *a2;
  v6 = operator new();
  AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(v6, a1, v5);
  return std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::shared_ptr[abi:ne180100]<AMCP::DAL::Packetized_Data_Handler,void>(a3, v6);
}

void sub_1B5A24B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697EAB0;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697EAB0;
}

uint64_t *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::pmr *default_resource;
  _QWORD *v9;
  uint64_t v11;

  v5 = *a2;
  v6 = operator new();
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E6984698;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)v6);
  *(_QWORD *)(v6 + 72) = default_resource;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = std::pmr::get_default_resource(default_resource);
  *(_QWORD *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 104) = 1065353216;
  *(_QWORD *)(v6 + 112) = v5;
  *a3 = v6;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E697EB20;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v6;
  a3[1] = (uint64_t)v9;
  v11 = 0;
  return std::unique_ptr<AMCP::DAL::AUParameter_Data_Handler>::reset[abi:ne180100](&v11);
}

void sub_1B5A24CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AMCP::DAL::AUParameter_Data_Handler>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t *std::unique_ptr<AMCP::DAL::AUParameter_Data_Handler>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(v1 + 56);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  caulk::rt_safe_memory_resource *v5;

  v3 = result;
  while (a2)
  {
    v4 = (_QWORD *)*a2;
    v5 = (caulk::rt_safe_memory_resource *)a2[4];
    if (v5)
    {
      a2[5] = v5;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v5, (uint64_t)(a2[6] - (_QWORD)v5) >> 4);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 24))(*(_QWORD *)(v3 + 32), a2, 56, 8);
    a2 = v4;
  }
  return result;
}

uint64_t std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, 8 * a1, 8);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(v1 + 56);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_24AUParameter_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = (_QWORD *)__p[6];
    if (v3 == __p + 3)
    {
      v4 = 4;
      v3 = __p + 3;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697E9D0;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697E9D0;
}

_QWORD *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()@<X0>(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  caulk::rt_safe_memory_resource *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  AMCP::DAL::Audio_Samples_Data *v14;
  AMCP::DAL::Audio_Samples_Data *v15;
  int v16;
  _QWORD *result;

  v5 = *a2;
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E6985C80;
  *(_QWORD *)(v6 + 56) = 0;
  v8 = (uint64_t *)(v6 + 56);
  if ((*(_DWORD *)(a1 + 12) & 0x20) != 0)
    v9 = *(unsigned int *)(a1 + 28);
  else
    v9 = 1;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  if ((_DWORD)v9)
  {
    v10 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v9);
    v7[7] = v10;
    v7[9] = (char *)v10 + 24 * v11;
    v12 = 24 * ((24 * (unint64_t)v9 - 24) / 0x18) + 24;
    bzero(v10, v12);
    v7[8] = (char *)v10 + v12;
  }
  if (round(v5) > 0.0)
  {
    if ((*(_DWORD *)(a1 + 12) & 0x20) != 0)
      v13 = *(unsigned int *)(a1 + 28);
    else
      v13 = 1;
    std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::resize(v8, v13);
    v14 = (AMCP::DAL::Audio_Samples_Data *)v7[7];
    v15 = (AMCP::DAL::Audio_Samples_Data *)v7[8];
    if (v14 != v15)
    {
      v16 = vcvtmd_s64_f64(v5);
      do
      {
        AMCP::DAL::Audio_Samples_Data::allocate(v14, (*(_DWORD *)(a1 + 24) * v16));
        v14 = (AMCP::DAL::Audio_Samples_Data *)((char *)v14 + 24);
      }
      while (v14 != v15);
    }
  }
  *a3 = v7;
  result = (_QWORD *)operator new();
  *result = &off_1E697EA50;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[1] = result;
  return result;
}

void sub_1B5A25178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a9);
  MEMORY[0x1B5E50688](v9, 0x10A1C40EACBC41BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_16PCM_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *AMCP::DAL::Container::Container(_QWORD *a1, uint64_t a2, double a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *a1 = 0;
  a1[1] = 0;
  AMCP::DAL::Container::get_data_handler((AMCP::DAL *)&v8, a2, a3);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)a1, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1B5A25304(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Container::erase_range(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  if (a1)
  {
    v4 = 0;
    v5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &v4);
    v1 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
  }
}

void sub_1B5A25388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Container::copy_from_this_container(uint64_t *a1, uint64_t a2, uint64_t *a3, double *a4)
{
  uint64_t v4;
  uint64_t v8;
  _BOOL8 is_compatible;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *exception;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::logic_error v34;
  std::logic_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  __int16 v43;
  char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE v48[14];
  const char *v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*a1)
  {
    v8 = *a3;
    is_compatible = AMCP::DAL::Container::container_is_compatible(*a1, *a3);
    if (!is_compatible)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v20 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = pthread_self();
        v22 = pthread_mach_thread_np(v21);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v22;
        v43 = 2080;
        v44 = "Container.cpp";
        v45 = 1024;
        v46 = 142;
        v47 = 2080;
        *(_QWORD *)v48 = "not (container_is_compatible(dest_container))";
        _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::copy_from_this_container: Containers Are Not Compatible", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Container::copy_from_this_container: Containers Are Not Compatible", (uint64_t)&v33);
      std::logic_error::logic_error(&v34, &v33);
      v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v35, &v34);
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = -1;
      v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v36 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
      *(_QWORD *)&v48[6] = "void AMCP::DAL::Container::copy_from_this_container(const Sample_Time_Range &, const Containe"
                           "r &, const Sample_Time_Range &, DAL_Operation_Context_Ref)";
      v49 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
      v50 = 142;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
      v31 = v28;
      v32 = v29;
      v28 = 0uLL;
      v29 = 0;
      v30 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v10 = a3[1];
    v26 = v8;
    v27 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *a4;
    v24 = 0;
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, double))(*(_QWORD *)v4 + 80))(v4, a2, &v26, &v24, v13);
    v14 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v27;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1B5A25680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::Container::container_is_compatible(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  double mSampleRate;
  AudioStreamBasicDescription v6;
  _OWORD v7[3];

  if (!a1)
  {
    memset(v7, 0, 40);
    if (a2)
      goto LABEL_3;
LABEL_5:
    memset(&v6, 0, sizeof(v6));
    mSampleRate = 0.0;
    return *(double *)v7 == mSampleRate
        && DWORD2(v7[0]) == v6.mFormatID
        && *(_QWORD *)&v7[1] == *(_QWORD *)&v6.mBytesPerPacket
        && *(_QWORD *)((char *)&v7[1] + 12) == *(_QWORD *)&v6.mChannelsPerFrame
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v7, &v6, 0, 0);
  }
  v2 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v2;
  *(_QWORD *)&v7[2] = *(_QWORD *)(a1 + 40);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v6.mSampleRate = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v6.mBytesPerPacket = v3;
  *(_QWORD *)&v6.mBitsPerChannel = *(_QWORD *)(a2 + 40);
  mSampleRate = v6.mSampleRate;
  return *(double *)v7 == mSampleRate
      && DWORD2(v7[0]) == v6.mFormatID
      && *(_QWORD *)&v7[1] == *(_QWORD *)&v6.mBytesPerPacket
      && *(_QWORD *)((char *)&v7[1] + 12) == *(_QWORD *)&v6.mChannelsPerFrame
      && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v7, &v6, 0, 0);
}

void AMCP::Graph::Converter_Cross_Timebase_Processor::~Converter_Cross_Timebase_Processor(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
  JUMPOUT(0x1B5E50688);
}

void AMCP::Graph::Converter_Cross_Timebase_Processor::process(uint64_t a1@<X0>, AMCP::Log::Scope_Registry **a2@<X1>, double *a3@<X2>, _QWORD *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  long double v12;
  long double v13;
  AMCP::Log::Scope_Registry *v14;
  long double v15;
  long double v16;
  AMCP::Log::Scope_Registry *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  AMCP::Log::Scope_Registry *v22;
  int v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  std::__shared_weak_count *imp;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  double v41;
  NSObject *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  void *v45;
  NSObject *v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  void *v49;
  NSObject *v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  void *v53;
  NSObject *v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  void *exception;
  NSObject *v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  void *v61;
  std::logic_error v62;
  __int128 v63;
  uint64_t v64;
  uint64_t (**v65)();
  __int128 v66;
  uint64_t v67;
  std::string v68;
  std::logic_error v69;
  std::logic_error v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  uint8_t buf[8];
  _BYTE v78[10];
  __int16 v79;
  int v80;
  __int16 v81;
  _BYTE v82[14];
  const char *v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v12 = *(double *)(a1 + 24);
  if (round(v12) != 0.0)
  {
    if (*a2)
    {
      v13 = (*(double (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)*a2 + 48))(*a2);
      v12 = *(double *)(a1 + 24);
    }
    else
    {
      v13 = 0.0;
    }
    if (round(*a3) != round(fmod(v12, v13)))
    {
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v54 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        v55 = pthread_self();
        v56 = pthread_mach_thread_np(v55);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v56;
        *(_WORD *)v78 = 2080;
        *(_QWORD *)&v78[2] = "Converter.cpp";
        v79 = 1024;
        v80 = 543;
        v81 = 2080;
        *(_QWORD *)v82 = "not (m_current_source == 0_S or source_local_range.start() == (m_current_source % source_contai"
                         "ner.get_length_in_frames()))";
        _os_log_error_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Discontiguous source ranges", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Discontiguous source ranges", (uint64_t)&v68);
      std::logic_error::logic_error(&v69, &v68);
      v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v70, &v69);
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = -1;
      v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v71 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
      *(_QWORD *)&v82[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timeb"
                           "ase_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL:"
                           ":Container, const AMCP::DAL::Sample_Time_Range &) const";
      v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      v84 = 543;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
      v66 = v63;
      v67 = v64;
      v63 = 0uLL;
      v64 = 0;
      v65 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
  }
  v15 = *(double *)(a1 + 32);
  if (round(v15) != 0.0)
  {
    if (*a4)
    {
      v16 = (*(double (**)(_QWORD))(*(_QWORD *)*a4 + 48))(*a4);
      v15 = *(double *)(a1 + 32);
    }
    else
    {
      v16 = 0.0;
    }
    if (round(*a5) != round(fmod(v15, v16)))
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v58 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = pthread_self();
        v60 = pthread_mach_thread_np(v59);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v60;
        *(_WORD *)v78 = 2080;
        *(_QWORD *)&v78[2] = "Converter.cpp";
        v79 = 1024;
        v80 = 544;
        v81 = 2080;
        *(_QWORD *)v82 = "not (m_current_dest == 0_S or dest_local_range.start() == (m_current_dest % dest_container.get_"
                         "length_in_frames()))";
        _os_log_error_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Discontiguous source ranges", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
      v61 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Discontiguous source ranges", (uint64_t)&v68);
      std::logic_error::logic_error(&v69, &v68);
      v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v70, &v69);
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = -1;
      v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v71 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
      *(_QWORD *)&v82[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timeb"
                           "ase_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL:"
                           ":Container, const AMCP::DAL::Sample_Time_Range &) const";
      v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      v84 = 544;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
      v66 = v63;
      v67 = v64;
      v63 = 0uLL;
      v64 = 0;
      v65 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v61, (uint64_t)buf);
    }
  }
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(v18 + 112);
  v62.__vftable = *(std::logic_error_vtbl **)(v18 + 104);
  v62.__imp_.__imp_ = (const char *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *a2;
  if (*a2)
  {
    if (*a4)
      v23 = *(_DWORD *)(*a4 + 16);
    else
      v23 = 0;
    if (*((_DWORD *)v22 + 4) != v23)
    {
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v46 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = pthread_self();
        v48 = pthread_mach_thread_np(v47);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v48;
        *(_WORD *)v78 = 2080;
        *(_QWORD *)&v78[2] = "Container.cpp";
        v79 = 1024;
        v80 = 129;
        v81 = 2080;
        *(_QWORD *)v82 = "not (get_format().mFormatID == dest_container.get_format().mFormatID)";
        _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::dal_operation_apply: Containers Are Not Compatible", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
      v49 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Container::dal_operation_apply: Containers Are Not Compatible", (uint64_t)&v68);
      std::logic_error::logic_error(&v69, &v68);
      v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v70, &v69);
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = -1;
      v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v71 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
      *(_QWORD *)&v82[6] = "Sample_Time_Range AMCP::DAL::Container::dal_operation_apply(const Sample_Time_Range &, const "
                           "Container &, const Sample_Time_Range &, const DAL_Settings &, DAL_Operation_Context_Ref)";
      v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
      v84 = 129;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
      v66 = v63;
      v67 = v64;
      v63 = 0uLL;
      v64 = 0;
      v65 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v49, (uint64_t)buf);
    }
    v26 = v18 + 48;
    v27 = a4[1];
    *(_QWORD *)buf = *a4;
    *(_QWORD *)v78 = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *a5;
    v31 = a5[1];
    v70 = v62;
    v62 = (std::logic_error)0;
    v24 = (*(double (**)(AMCP::Log::Scope_Registry *, double *, uint8_t *, uint64_t, std::logic_error *, double, double))(*(_QWORD *)v22 + 128))(v22, a3, buf, v26, &v70, v30, v31);
    v25 = v32;
    imp = (std::__shared_weak_count *)v70.__imp_.__imp_;
    if (v70.__imp_.__imp_)
    {
      v34 = (unint64_t *)(v70.__imp_.__imp_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    v36 = *(std::__shared_weak_count **)v78;
    if (*(_QWORD *)v78)
    {
      v37 = (unint64_t *)(*(_QWORD *)v78 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  else
  {
    v24 = *a5;
    v25 = a5[1];
  }
  if (v62.__imp_.__imp_)
  {
    v39 = (unint64_t *)(v62.__imp_.__imp_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(const char *))(*(_QWORD *)v62.__imp_.__imp_ + 16))(v62.__imp_.__imp_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62.__imp_.__imp_);
    }
  }
  if (round(v24) != round(*a5))
  {
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v42 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = pthread_self();
      v44 = pthread_mach_thread_np(v43);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = "Converter.cpp";
      v79 = 1024;
      v80 = 548;
      v81 = 2080;
      *(_QWORD *)v82 = "not (result_range.start() == dest_local_range.start())";
      _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v45 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v68);
    std::logic_error::logic_error(&v69, &v68);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timebas"
                         "e_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL::Con"
                         "tainer, const AMCP::DAL::Sample_Time_Range &) const";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    v84 = 548;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v67 = v64;
    v63 = 0uLL;
    v64 = 0;
    v65 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v45, (uint64_t)buf);
  }
  v41 = v25 - a5[1];
  if (round(v41) < 0.0)
    v41 = 0.0 - v41;
  if (round(v41) >= 2.0 && round(v25 - v24) != round(a3[1] - *a3))
  {
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v50 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v51 = pthread_self();
      v52 = pthread_mach_thread_np(v51);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = "Converter.cpp";
      v79 = 1024;
      v80 = 549;
      v81 = 2080;
      *(_QWORD *)v82 = "not ((abs(result_range.end() - dest_local_range.end()) < 2_S) or result_range.length() == source_"
                       "local_range.length())";
      _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v53 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v68);
    std::logic_error::logic_error(&v69, &v68);
    v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timebas"
                         "e_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL::Con"
                         "tainer, const AMCP::DAL::Sample_Time_Range &) const";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    v84 = 549;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v67 = v64;
    v63 = 0uLL;
    v64 = 0;
    v65 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v53, (uint64_t)buf);
  }
  *(_DWORD *)a6 = *(_DWORD *)(a1 + 16);
  *(double *)(a6 + 8) = v24;
  *(double *)(a6 + 16) = v25;
}

void sub_1B5A263A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29 - 160);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double AMCP::Graph::Converter_Cross_Timebase_Processor::calculate_samples_through_processor(AMCP::Graph::Converter **a1, int a2, double *a3, double a4)
{
  double v4;
  uint64_t v6;
  uint64_t required_input_samples_for_output_samples;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::logic_error v20;
  std::logic_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = floor(a4);
  if (a4 != v4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v29 = 2080;
      v30 = "Converter.cpp";
      v31 = 1024;
      v32 = 557;
      v33 = 2080;
      *(_QWORD *)v34 = "not (samples.get_double() == samples.floor().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v22 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v34[6] = "virtual AMCP::DAL::Sample_Time AMCP::Graph::Converter_Cross_Timebase_Processor::calculate_sampl"
                         "es_through_processor(Buffer_Alignment, AMCP::DAL::Sample_Time, AMCP::DAL::Sample_Time &) const";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    v36 = 557;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = (uint64_t)v4;
  if (a2)
  {
    required_input_samples_for_output_samples = AMCP::Graph::Converter::get_required_input_samples_for_output_samples(a1[1], v6);
  }
  else
  {
    *(_QWORD *)buf = (uint64_t)v4;
    required_input_samples_for_output_samples = AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(a1[1], v6, (unint64_t *)buf);
    *a3 = (double)*(unint64_t *)buf;
  }
  return (double)(unint64_t)required_input_samples_for_output_samples;
}

void sub_1B5A2698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Converter_Cross_Timebase_Processor::get_source_copy_buffer(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 152);
}

uint64_t AMCP::Graph::Converter_Cross_Timebase_Processor::get_dest_copy_buffer(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 160);
}

uint64_t AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(AMCP::Graph::Converter *this, uint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  _BOOL4 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *i;
  uint64_t v27;
  _QWORD *v28;
  AMCP::Thing *v29;
  uint64_t v30;
  void **v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49[2];
  void *v50[2];
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *__p;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66[16];
  uint64_t v67;
  uint64_t *v68;
  char v69;

  v6 = (_QWORD *)((char *)this + 48);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&__p);
  if (v7)
    v8 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v7 + 40));
  else
    v8 = 0;
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p);
    if (!v8)
      return a2;
  }
  else if (!v8)
  {
    return a2;
  }
  v50[0] = 0;
  v50[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&__p, (uint64_t *)v50);
  std::string::basic_string[abi:ne180100]<0>(v50, "expected output samples for input samples");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)&__p, (__int128 *)v50, a2);
  if (v51 < 0)
    operator delete(v50[0]);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v9 = *((_QWORD *)this + 15);
  v56 = *((_QWORD *)this + 13);
  v57 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v9 + 136))(v9, &v56, &__p);
  v14 = v57;
  if (v57)
  {
    v15 = (unint64_t *)&v57->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v49[0] = 0;
  v49[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v50, v49);
  if (v62 == v53 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62))
  {
    if (v63)
    {
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node((uint64_t)&__p, v61);
      v61 = 0;
      v17 = v59;
      if (v59)
      {
        v18 = 0;
        do
          *((_QWORD *)__p + v18++) = 0;
        while (v17 != v18);
      }
      v63 = 0;
    }
    v19 = v50[0];
    v50[0] = 0;
    v20 = __p;
    __p = v19;
    if (v20)
      (*(void (**)(uint64_t, void *, unint64_t, uint64_t))(*(_QWORD *)v60 + 24))(v60, v20, 8 * v59, 8);
    v21 = (unint64_t)v50[1];
    v50[1] = 0;
    v63 = v54;
    v64 = v55;
    v59 = v21;
    v61 = v52;
    if (v54)
    {
      v22 = v52[1];
      if ((v21 & (v21 - 1)) != 0)
      {
        if (v22 >= v21)
          v22 %= v21;
      }
      else
      {
        v22 &= v21 - 1;
      }
      *((_QWORD *)__p + v22) = &v61;
      v52 = 0;
      v54 = 0;
    }
  }
  else
  {
    v64 = v55;
    v23 = v59;
    if (v59)
    {
      v24 = 0;
      do
        *((_QWORD *)__p + v24++) = 0;
      while (v23 != v24);
      v25 = v61;
      v63 = 0;
      v61 = 0;
      for (i = v52; ; i = v28)
      {
        v27 = (uint64_t)v25;
        if (!v25 || !v54)
          break;
        v28 = (_QWORD *)*i;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove((uint64_t)&v67, v50, i);
        v30 = v67;
        v31 = (void **)(v27 + 16);
        if (*(char *)(v27 + 39) < 0)
          operator delete(*v31);
        v32 = *(_OWORD *)(v30 + 16);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v30 + 32);
        *(_OWORD *)v31 = v32;
        *(_BYTE *)(v30 + 39) = 0;
        *(_BYTE *)(v30 + 16) = 0;
        AMCP::swap((AMCP::Thing *)(v30 + 40), (AMCP::Thing *)(v27 + 40), v29);
        v33 = v67;
        v67 = 0;
        if (v33)
          std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](&v68, v33);
        v25 = *(_QWORD **)v27;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi((uint64_t)&__p, v27);
      }
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node((uint64_t)&__p, v25);
    }
    if (v54)
    {
      v34 = v52;
      do
      {
        v35 = (_QWORD *)*v34;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove((uint64_t)&v65, v50, v34);
        v36 = v65;
        v37 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, 80, 8);
        v68 = &v62;
        *v37 = 0;
        v37[1] = 0;
        v38 = std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>((uint64_t)(v37 + 2), (__int128 *)(v36 + 16), v36 + 40);
        v69 = 1;
        v37[1] = std::__string_hash<char>::operator()[abi:ne180100](v38);
        v65 = 0;
        if (v36)
          std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](v66, v36);
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi((uint64_t)&__p, (uint64_t)v37);
        v34 = v35;
      }
      while (v54);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v50);
  std::string::basic_string[abi:ne180100]<0>(v50, "actual input samples consumed");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)&__p, (__int128 *)v50, a2);
  if (v51 < 0)
    operator delete(v50[0]);
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v39 = *((_QWORD *)this + 15);
  v47 = *((_QWORD *)this + 13);
  v48 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *a3 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v39 + 136))(v39, &v47, &__p);
  v43 = v48;
  if (v48)
  {
    v44 = (unint64_t *)&v48->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&__p);
  return v13;
}

void sub_1B5A26F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Converter::get_required_input_samples_for_output_samples(AMCP::Graph::Converter *this, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  _BOOL4 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;

  v4 = (_QWORD *)((char *)this + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (v5)
    v6 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v5 + 40));
  else
    v6 = 0;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return a2;
  }
  else if (!v6)
  {
    return a2;
  }
  v17[0] = 0;
  v17[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)__p, (uint64_t *)v17);
  std::string::basic_string[abi:ne180100]<0>(v17, "required input samples for output samples");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)__p, (__int128 *)v17, a2);
  if (v18 < 0)
    operator delete(v17[0]);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v7 = *((_QWORD *)this + 15);
  v15 = *((_QWORD *)this + 13);
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  a2 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v7 + 136))(v7, &v15, __p);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1B5A27140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1B5A2717C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1B5A27174);
}

void AMCP::DAL::DAL_Settings::add<unsigned long long>(unint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD v4[4];
  void (*v5)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  std::string __p;
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t *, _QWORD, _QWORD);

  v4[0] = a3;
  memset(&v4[1], 0, 24);
  v5 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v8)
    v8(0, &v7, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    v5(0, (uint64_t)v4, 0, 0);
}

void sub_1B5A2723C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  void (*v6)(uint64_t, uint64_t);

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  v6 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  if (v6)
    v6(2, a3);
  return this;
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(unint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  unint64_t result;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2);
          if ((result & 1) != 0)
            return result;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 80, 8);
  *v16 = 0;
  v16[1] = v8;
  result = std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>((uint64_t)(v16 + 2), a3, (uint64_t)a3 + 24);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 48);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    result = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v16 = *v23;
LABEL_38:
    *v23 = v16;
    goto LABEL_39;
  }
  *v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*v16)
  {
    v24 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_1B5A2752C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _BYTE *v2;

  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a3 + 32);
  if (v5)
    v5(2, a3, a1 + 24, 0);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 3)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[5];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 4;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

size_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  size_t result;
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  size_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  size_t v41;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  result = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v41 = result;
  v2[1] = result;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v8 = *(float *)(a1 + 48);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    if (v12 == 1)
    {
      v12 = 2;
    }
    else if ((v12 & (v12 - 1)) != 0)
    {
      result = std::__next_prime(v12);
      v12 = result;
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (v12 > v6)
      goto LABEL_99;
    if (v12 >= v6)
      goto LABEL_60;
    result = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v6 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v20 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v20;
    }
    if (v12 <= result)
      v12 = result;
    if (v12 >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (v12)
    {
LABEL_99:
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 8 * v12, 8);
      v13 = *(_QWORD *)a1;
      *(_QWORD *)a1 = result;
      if (v13)
        result = std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v13);
      v39 = v4;
      v14 = 0;
      *(_QWORD *)(a1 + 8) = v12;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (v12 != v14);
      v15 = *(uint64_t **)(a1 + 24);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v38 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= v12)
            v16 %= v12;
        }
        else
        {
          v16 &= v12 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 24;
        v21 = *v15;
        if (*v15)
        {
          v40 = v17.u32[0];
          do
          {
            v22 = *(_QWORD *)(v21 + 8);
            if (v18 > 1)
            {
              if (v22 >= v12)
                v22 %= v12;
            }
            else
            {
              v22 &= v12 - 1;
            }
            if (v22 == v16)
            {
              v15 = (uint64_t *)v21;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
            {
              v23 = *(_QWORD **)v21;
              if (*(_QWORD *)v21)
              {
                v24 = (_QWORD *)v21;
                while (1)
                {
                  v25 = v23;
                  result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v21 + 16), (unsigned __int8 *)v23 + 16);
                  if (!(_DWORD)result)
                    break;
                  v23 = (_QWORD *)*v25;
                  v24 = v25;
                  if (!*v25)
                    goto LABEL_47;
                }
                v23 = v25;
                v25 = v24;
LABEL_47:
                v18 = v40;
              }
              else
              {
                v25 = (_QWORD *)v21;
              }
              *v15 = (uint64_t)v23;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v22);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v22) = v21;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v15;
              v15 = (uint64_t *)v21;
              v16 = v22;
            }
            v21 = *v15;
          }
          while (*v15);
        }
        v6 = v12;
        v2 = v38;
        v4 = v39;
      }
      else
      {
        v6 = v12;
        v4 = v39;
      }
    }
    else
    {
      v26 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      if (v26)
        result = std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v26);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  v28 = v27.u32[0];
  if (v27.u32[0] > 1uLL)
  {
    v29 = v41;
    if (v6 <= v41)
      v29 = v41 % v6;
  }
  else
  {
    v29 = (v6 - 1) & v41;
  }
  v30 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = *(unsigned __int8 **)v30;
    if (*(_QWORD *)v30)
    {
      v32 = 0;
      do
      {
        v33 = v31;
        v34 = *((_QWORD *)v31 + 1);
        if (v28 > 1)
        {
          v35 = v34;
          if (v34 >= v6)
            v35 = v34 % v6;
        }
        else
        {
          v35 = v34 & (v6 - 1);
        }
        if (v35 != v29)
          break;
        result = v34 == v41 && (uint64_t)std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v33 + 16, v4);
        if ((v32 & (result ^ 1) & 1) != 0)
          break;
        v32 |= result;
        v31 = *(unsigned __int8 **)v33;
        v30 = v33;
      }
      while (*(_QWORD *)v33);
    }
  }
  v36 = v2[1];
  if (v28 > 1)
  {
    if (v36 >= v6)
      v36 %= v6;
  }
  else
  {
    v36 &= v6 - 1;
  }
  if (!v30)
  {
    *v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = a1 + 24;
    if (!*v2)
      goto LABEL_95;
    v37 = *(_QWORD *)(*v2 + 8);
    if (v28 > 1)
    {
      if (v37 >= v6)
        v37 %= v6;
    }
    else
    {
      v37 &= v6 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v30;
  *(_QWORD *)v30 = v2;
  if (*v2)
  {
    v37 = *(_QWORD *)(*v2 + 8);
    if (v28 > 1)
    {
      if (v37 >= v6)
        v37 %= v6;
    }
    else
    {
      v37 &= v6 - 1;
    }
    if (v37 != v36)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 40);
  return result;
}

AMCP::Graph::Converter *AMCP::Graph::Converter::Converter(AMCP::Graph::Converter *this, const AMCP::Graph::Graph_Wire::Conversion_Info *a2, const AMCP::Graph::Graph_Wire::Wire_Info *a3)
{
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  double v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type size;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  AMCP::Log::Scope_Registry *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t i;
  char *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  AMCP::Log::Scope_Registry *v92;
  char v93;
  unsigned __int8 *v94;
  _BOOL4 v95;
  __n128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __n128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  NSObject *v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int32x4_t v127;
  uint32x4_t v128;
  int16x8_t v129;
  void *v130;
  int8x8_t v131;
  int8x8_t v132;
  int32x4_t v133;
  uint32x4_t v134;
  int16x8_t v135;
  NSObject *v136;
  _opaque_pthread_t *v137;
  mach_port_t v138;
  void *exception;
  std::string *v140;
  _BYTE __p[32];
  _BYTE v142[32];
  void (*v143)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v144;
  int v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  _BYTE buf[54];
  void (*v152)(_QWORD, _BYTE *, _QWORD, _QWORD);
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v6 = (std::string *)((char *)this + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, "converter");
  *((_DWORD *)this + 10) = *((_DWORD *)a3 + 50);
  v7 = (_QWORD *)((char *)this + 48);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)this + 48, (uint64_t *)buf);
  v8 = *((_QWORD *)a2 + 19);
  v9 = *((_QWORD *)a2 + 21);
  v140 = v6;
  if (v8 && v9)
  {
    v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 21) + 16))(*((_QWORD *)a2 + 21));
    v12 = v10[23];
    if ((v12 & 0x80u) == 0)
      v13 = v10[23];
    else
      v13 = *((_QWORD *)v10 + 1);
    v14 = *(unsigned __int8 *)(v11 + 23);
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v11 + 8);
    if (v13 == v14)
    {
      if (v15 >= 0)
        v16 = (unsigned __int8 *)v11;
      else
        v16 = *(unsigned __int8 **)v11;
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v10, v16, *((_QWORD *)v10 + 1)))
          goto LABEL_39;
      }
      else
      {
        if (!v10[23])
          goto LABEL_39;
        while (*v10 == *v16)
        {
          ++v10;
          ++v16;
          if (!--v12)
            goto LABEL_39;
        }
      }
    }
  }
  else if (!(v8 | v9))
  {
    goto LABEL_39;
  }
  (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)a2 + 19) + 24))(v142);
  v17 = v142[23];
  v18 = *(_BYTE **)v142;
  (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)a2 + 21) + 24))(__p);
  v19 = v142;
  if (v17 < 0)
    v19 = v18;
  if (__p[23] >= 0)
    v20 = __p;
  else
    v20 = *(_BYTE **)__p;
  caulk::make_string((caulk *)" timebase(%s -> %s)", (uint64_t)buf, v19, v20);
  if (buf[23] >= 0)
    v21 = buf;
  else
    v21 = *(const std::string::value_type **)buf;
  if (buf[23] >= 0)
    v22 = buf[23];
  else
    v22 = *(_QWORD *)&buf[8];
  v6 = v140;
  std::string::append(v140, v21, v22);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v142[23] & 0x80000000) != 0)
    operator delete(*(void **)v142);
  if (!*(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "change clock with drift correction disabled");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
LABEL_39:
    if (!*(_BYTE *)a2)
      goto LABEL_67;
  }
  v23 = *((double *)a2 + 6);
  if (*((double *)a2 + 1) != v23)
  {
    caulk::make_string((caulk *)" - %s (%0.f -> %0.f)", (uint64_t)buf, "scale", *((_QWORD *)a2 + 1), *(_QWORD *)&v23);
    v24 = buf[23] >= 0 ? buf : *(const std::string::value_type **)buf;
    v25 = buf[23] >= 0 ? buf[23] : *(_QWORD *)&buf[8];
    std::string::append(v6, v24, v25);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "scale");
  AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(__p, "resampler type");
  memset(v142, 0, sizeof(v142));
  *(_DWORD *)v142 = *((_DWORD *)a2 + 22);
  v143 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>((std::string *)buf, (__int128 *)__p, (uint64_t)v142);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, buf, (__int128 *)buf);
  if (v152)
    v152(0, &buf[24], 0, 0);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v143)
    v143(0, (uint64_t)v142, 0, 0);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "resampler quality");
  memset(v142, 0, sizeof(v142));
  *(_DWORD *)v142 = *((_DWORD *)a2 + 23);
  v143 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>((std::string *)buf, (__int128 *)__p, (uint64_t)v142);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, buf, (__int128 *)buf);
  if (v152)
    v152(0, &buf[24], 0, 0);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v143)
    v143(0, (uint64_t)v142, 0, 0);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_67:
  if (*((_BYTE *)a2 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "map channels");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(v142, " - ");
    v26 = std::string::append((std::string *)v142, "map channels", 0xCuLL);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v28 = buf;
    else
      v28 = *(const std::string::value_type **)buf;
    if (buf[23] >= 0)
      v29 = buf[23];
    else
      v29 = *(_QWORD *)&buf[8];
    std::string::append(v6, v28, v29);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
  }
  if (*((_BYTE *)a2 + 3))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "convert format");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(v142, " - ");
    v30 = std::string::append((std::string *)v142, "convert format", 0xEuLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v32 = buf;
    else
      v32 = *(const std::string::value_type **)buf;
    if (buf[23] >= 0)
      v33 = buf[23];
    else
      v33 = *(_QWORD *)&buf[8];
    std::string::append(v6, v32, v33);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
  }
  if (*((_BYTE *)a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "mix channels to mono");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(v142, " - ");
    v34 = std::string::append((std::string *)v142, "mix channels to mono", 0x14uLL);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v36 = buf;
    else
      v36 = *(const std::string::value_type **)buf;
    if (buf[23] >= 0)
      v37 = buf[23];
    else
      v37 = *(_QWORD *)&buf[8];
    std::string::append(v6, v36, v37);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
  }
  if (*((_BYTE *)a2 + 5))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "volume processing");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (__int128 *)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(v142, " - ");
    v38 = std::string::append((std::string *)v142, "volume processing", 0x11uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0)
      v40 = buf;
    else
      v40 = *(const std::string::value_type **)buf;
    if (buf[23] >= 0)
      v41 = buf[23];
    else
      v41 = *(_QWORD *)&buf[8];
    std::string::append(v6, v40, v41);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "source timebase");
  AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>((unint64_t)this + 48, (__int128 *)buf, *((_QWORD *)a2 + 19), *((_QWORD *)a2 + 20));
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "dest timebase");
  AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>((unint64_t)this + 48, (__int128 *)buf, *((_QWORD *)a2 + 21), *((_QWORD *)a2 + 22));
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "source format");
  v42 = (char *)a2 + 8;
  AMCP::DAL::DAL_Settings::add<CA::StreamDescription>((unint64_t)this + 48, (__int128 *)buf, (uint64_t)a2 + 8);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "dest format");
  AMCP::DAL::DAL_Settings::add<CA::StreamDescription>((unint64_t)this + 48, (__int128 *)buf, (uint64_t)a2 + 48);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (*((_DWORD *)a3 + 50) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "size bias");
    std::string::basic_string[abi:ne180100]<0>(v142, "input bias");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "size bias");
    std::string::basic_string[abi:ne180100]<0>(v142, "output bias");
  }
  AMCP::DAL::DAL_Settings::add<std::string>((unint64_t)this + 48, (__int128 *)buf, (__int128 *)v142);
  if ((v142[23] & 0x80000000) != 0)
    operator delete(*(void **)v142);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "map channels");
  v43 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)this + 6, buf);
  v44 = v43;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v44)
      goto LABEL_146;
  }
  else if (!v43)
  {
    goto LABEL_146;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channel map");
  v143 = 0;
  memset(v142, 0, sizeof(v142));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v142, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  v143 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>((std::string *)buf, (__int128 *)__p, (uint64_t)v142);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, buf, (__int128 *)buf);
  if (v152)
    v152(0, &buf[24], 0, 0);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v143)
    v143(0, (uint64_t)v142, 0, 0);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_146:
  if (*((_QWORD *)a2 + 23))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "volume connection");
    *(_QWORD *)&v142[24] = 0;
    v45 = *((_QWORD *)a2 + 24);
    *(_QWORD *)v142 = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v142[8] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v143 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch;
    std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>((std::string *)buf, (__int128 *)__p, (uint64_t)v142);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, buf, (__int128 *)buf);
    if (v152)
      v152(0, &buf[24], 0, 0);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v143)
      v143(0, (uint64_t)v142, 0, 0);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "mix channels to mono");
  v48 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)this + 6, buf);
  v49 = v48;
  if ((buf[23] & 0x80000000) == 0)
  {
    if (!v48)
      goto LABEL_170;
LABEL_162:
    std::string::basic_string[abi:ne180100]<0>(__p, "mix map");
    v143 = 0;
    memset(v142, 0, sizeof(v142));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v142, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 2);
    v143 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
    std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>((std::string *)buf, (__int128 *)__p, (uint64_t)v142);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, buf, (__int128 *)buf);
    if (v152)
      v152(0, &buf[24], 0, 0);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v143)
      v143(0, (uint64_t)v142, 0, 0);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_170;
  }
  operator delete(*(void **)buf);
  if (v49)
    goto LABEL_162;
LABEL_170:
  std::string::basic_string[abi:ne180100]<0>(&v148, " ");
  v50 = std::string::append(&v148, "( ", 2uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  AMCP::Terminal_Identifier_to_string(&v147, (const void **)a3);
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v147;
  else
    v52 = (std::string *)v147.__r_.__value_.__r.__words[0];
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v147.__r_.__value_.__r.__words[2]);
  else
    size = v147.__r_.__value_.__l.__size_;
  v54 = std::string::append(&v149, (const std::string::value_type *)v52, size);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = std::string::append(&v150, " -> ", 4uLL);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v56->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  AMCP::Terminal_Identifier_to_string(&v146, (const void **)a3 + 5);
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &v146;
  else
    v58 = (std::string *)v146.__r_.__value_.__r.__words[0];
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  else
    v59 = v146.__r_.__value_.__l.__size_;
  v60 = std::string::append((std::string *)__p, (const std::string::value_type *)v58, v59);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&v142[16] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  *(_OWORD *)v142 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append((std::string *)v142, ")", 2uLL);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0)
    v64 = buf;
  else
    v64 = *(const std::string::value_type **)buf;
  if (buf[23] >= 0)
    v65 = buf[23];
  else
    v65 = *(_QWORD *)&buf[8];
  std::string::append(v6, v64, v65);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((v142[23] & 0x80000000) != 0)
    operator delete(*(void **)v142);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v66 = (_QWORD *)((char *)this + 120);
  *(_OWORD *)((char *)this + 136) = 0u;
  v67 = (_QWORD *)operator new();
  v68 = v67;
  v69 = *((_QWORD *)a2 + 20);
  *(_QWORD *)buf = *((_QWORD *)a2 + 19);
  *(_QWORD *)&buf[8] = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v67, (uint64_t)a2 + 8, buf, 4096.0);
  *((_QWORD *)this + 19) = v68;
  v72 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (_QWORD *)operator new();
  v76 = v75;
  v77 = *((_QWORD *)a2 + 22);
  *(_QWORD *)buf = *((_QWORD *)a2 + 21);
  *(_QWORD *)&buf[8] = v77;
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = (AMCP::Log::Scope_Registry *)AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v75, (uint64_t)a2 + 48, buf, 4096.0);
  *((_QWORD *)this + 20) = v76;
  v81 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v82 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  if (!*((_DWORD *)a2 + 4))
  {
    AMCP::Log::Scope_Registry::get(v80);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v136 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      v137 = pthread_self();
      v138 = pthread_mach_thread_np(v137);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v138;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Converter.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 60;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (info.m_source_format.mFormatID != 0)";
      _os_log_error_impl(&dword_1B57BA000, v136, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid format in converter", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v147);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid format in converter", (uint64_t)&v150);
    std::logic_error::logic_error((std::logic_error *)&v148, &v150);
    v148.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v142, (const std::logic_error *)&v148);
    *(_QWORD *)&v142[24] = 0;
    v143 = 0;
    v144 = 0;
    v145 = -1;
    *(_QWORD *)v142 = off_1E69A1208;
    *(_QWORD *)&v142[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v142);
    *(_QWORD *)&buf[32] = "AMCP::Graph::Converter::Converter(const Conversion_Info &, const AMCP::Graph::Graph_Wire::Wire_Info &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    *(_DWORD *)&buf[48] = 60;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v149.__r_.__value_.__l.__data_);
    *(_QWORD *)__p = off_1E69A20A0;
    *(std::string *)&__p[8] = v149;
    memset(&v149, 0, sizeof(v149));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::DAL::Container::get_data_handler((AMCP::DAL *)buf, (uint64_t)a2 + 8, 0.0);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 120, (__int128 *)buf);
  v84 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v85 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  for (i = 0; i != 5; ++i)
  {
    v88 = off_1E697EDF0[i];
    std::string::basic_string[abi:ne180100]<0>(buf, v88);
    v89 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, buf);
    v90 = v89;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v90)
        continue;
    }
    else if (!v89)
    {
      continue;
    }
    v91 = *v66;
    std::string::basic_string[abi:ne180100]<0>(buf, v88);
    v92 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 16))(v91, buf);
    v93 = (char)v92;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((v93 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(v92);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v122 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        v123 = pthread_self();
        v124 = pthread_mach_thread_np(v123);
        v125.i32[0] = bswap32(*((_DWORD *)a2 + 4));
        v126 = vzip1_s8(v125, v125);
        v127.i64[0] = 0x1F0000001FLL;
        v127.i64[1] = 0x1F0000001FLL;
        v128.i64[0] = 0x5F0000005FLL;
        v128.i64[1] = 0x5F0000005FLL;
        v142[23] = 4;
        *(int8x8_t *)v129.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v128, (uint32x4_t)vsraq_n_s32(v127, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v126), 0x18uLL), 0x18uLL))), v126, (int8x8_t)0x2E002E002E002ELL);
        *(_DWORD *)v142 = vmovn_s16(v129).u32[0];
        v142[4] = 0;
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v124;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Converter.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 69;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "not (m_format_specific_converter->dal_operation_is_supported(op))";
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = v88;
        *(_WORD *)&buf[44] = 2080;
        *(_QWORD *)&buf[46] = v142;
        _os_log_error_impl(&dword_1B57BA000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Operation %s is not supported in this data type: %s", buf, 0x36u);
        if ((v142[23] & 0x80000000) != 0)
          operator delete(*(void **)v142);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v146);
      v130 = __cxa_allocate_exception(0x40uLL);
      v131.i32[0] = bswap32(*((_DWORD *)a2 + 4));
      v132 = vzip1_s8(v131, v131);
      v133.i64[0] = 0x1F0000001FLL;
      v133.i64[1] = 0x1F0000001FLL;
      v134.i64[0] = 0x5F0000005FLL;
      v134.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v135.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v134, (uint32x4_t)vsraq_n_s32(v133, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v132), 0x18uLL), 0x18uLL))), v132, (int8x8_t)0x2E002E002E002ELL);
      *((_BYTE *)&v149.__r_.__value_.__s + 23) = 4;
      LODWORD(v149.__r_.__value_.__l.__data_) = vmovn_s16(v135).u32[0];
      v149.__r_.__value_.__s.__data_[4] = 0;
      caulk::make_string((caulk *)"Operation %s is not supported in this data type: %s", (uint64_t)&v150, v88, &v149);
      std::logic_error::logic_error((std::logic_error *)&v147, &v150);
      v147.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)v142, (const std::logic_error *)&v147);
      *(_QWORD *)&v142[24] = 0;
      v143 = 0;
      v144 = 0;
      v145 = -1;
      *(_QWORD *)v142 = off_1E69A1208;
      *(_QWORD *)&v142[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v142);
      *(_QWORD *)&buf[32] = "AMCP::Graph::Converter::Converter(const Conversion_Info &, const AMCP::Graph::Graph_Wire::Wire_Info &)";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      *(_DWORD *)&buf[48] = 69;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v148.__r_.__value_.__l.__data_);
      *(_QWORD *)__p = off_1E69A20A0;
      *(std::string *)&__p[8] = v148;
      memset(&v148, 0, sizeof(v148));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v130, (uint64_t)buf);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "scale");
  v94 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, buf);
  if (v94)
    v95 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v94 + 40));
  else
    v95 = 0;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v95)
      goto LABEL_242;
  }
  else
  {
    if (!v95)
      goto LABEL_276;
LABEL_242:
    std::string::basic_string[abi:ne180100]<0>(buf, "source timebase");
    *(_OWORD *)v142 = 0uLL;
    v96 = AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v150, v7, buf, (__n128 *)v142);
    v97 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v98 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, v96);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(buf, "dest timebase");
    *(_OWORD *)v142 = 0uLL;
    v100 = AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v149, v7, buf, (__n128 *)v142);
    v101 = *(std::__shared_weak_count **)&v142[8];
    if (*(_QWORD *)&v142[8])
    {
      v102 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v100);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::string::basic_string[abi:ne180100]<0>(v142, "source format");
    v104 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v142);
    if (v104)
      AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)buf, (uint64_t)(v104 + 40));
    else
      memset(buf, 0, 40);
    if ((v142[23] & 0x80000000) != 0)
      operator delete(*(void **)v142);
    std::string::basic_string[abi:ne180100]<0>(__p, "dest format");
    v105 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, __p);
    if (v105)
    {
      AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)v142, (uint64_t)(v105 + 40));
    }
    else
    {
      v143 = 0;
      memset(v142, 0, sizeof(v142));
    }
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    AMCP::Graph::Converter::update_settings((uint64_t)this, &v150, &v149, (double *)buf, (double *)v142);
    v106 = (std::__shared_weak_count *)v149.__r_.__value_.__l.__size_;
    if (v149.__r_.__value_.__l.__size_)
    {
      v107 = (unint64_t *)(v149.__r_.__value_.__l.__size_ + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = (std::__shared_weak_count *)v150.__r_.__value_.__l.__size_;
    if (v150.__r_.__value_.__l.__size_)
    {
      v110 = (unint64_t *)(v150.__r_.__value_.__l.__size_ + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
LABEL_276:
  (*(void (**)(_BYTE *__return_ptr, _QWORD, char *, _QWORD *))(*(_QWORD *)*v66 + 112))(buf, *v66, v42, v7);
  v112 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v113 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *(_OWORD *)((char *)this + 104) = v112;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v117 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *(_OWORD *)v42;
  v120 = *((_OWORD *)v42 + 1);
  *((_QWORD *)this + 25) = *((_QWORD *)v42 + 4);
  *(_OWORD *)((char *)this + 168) = v119;
  *(_OWORD *)((char *)this + 184) = v120;
  return this;
}

void sub_1B5A291EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v62 = *(_QWORD *)(v60 + 160);
  *(_QWORD *)(v60 + 160) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *(_QWORD *)(v60 + 152);
  *(_QWORD *)(v60 + 152) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v59);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a13);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(v58);
  if (*(char *)(v60 + 39) < 0)
    operator delete(*v57);
  v64 = *(std::__shared_weak_count **)(v60 + 8);
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  _Unwind_Resume(a1);
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>(__n128 *a1, _QWORD *a2, unsigned __int8 *a3, __n128 *a4)
{
  unsigned __int8 *v6;
  __n128 result;

  v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    result = *a4;
    *a1 = *a4;
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  return result;
}

void AMCP::Graph::Converter::update_settings(uint64_t a1, _QWORD *a2, _QWORD *a3, double *a4, double *a5)
{
  _QWORD *v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  AMCP::Log::Scope_Registry *v13;
  AMCP::Log::Scope_Registry *v14;
  int v15;
  double v16;
  AMCP::Log::Scope_Registry *v17;
  AMCP::Log::Scope_Registry *v18;
  double v19;
  double v20;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *exception;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *v32;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::logic_error v43;
  std::logic_error v44;
  void *v45;
  uint64_t v46;
  BOOL (*v47)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v48;
  int v49;
  char v50;
  std::string __p;
  __int16 v52;
  _BYTE v53[14];
  const char *v54;
  int v55;
  void (*v56)(_QWORD, __int16 *, _QWORD, _QWORD);
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v10 = (_QWORD *)(a1 + 48);
  v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v10, (unsigned __int8 *)&__p);
  if (v11)
    v12 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v11 + 40));
  else
    v12 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v12)
      return;
  }
  else if (!v12)
  {
    return;
  }
  if ((*(double (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2) != *a4)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v21 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v23;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 284;
      v52 = 2080;
      *(_QWORD *)v53 = "not (source_timebase->get_sample_rate() == source_format.mSampleRate)";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s source sample rate differs from source timebase rate", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"source sample rate differs from source timebase rate", (uint64_t)&v42);
    std::logic_error::logic_error(&v43, &v42);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v45 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v44);
    *(_QWORD *)&v53[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, const "
                         "CA::StreamDescription &, const CA::StreamDescription &) const";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    v55 = 284;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  if ((*(double (**)(_QWORD))(*(_QWORD *)*a3 + 152))(*a3) != *a5)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v25 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v27;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 285;
      v52 = 2080;
      *(_QWORD *)v53 = "not (dest_timebase->get_sample_rate() == dest_format.mSampleRate)";
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s dest sample rate differs from source timebase rate", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v28 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"dest sample rate differs from source timebase rate", (uint64_t)&v42);
    std::logic_error::logic_error(&v43, &v42);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v45 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v44);
    *(_QWORD *)&v53[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, const "
                         "CA::StreamDescription &, const CA::StreamDescription &) const";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    v55 = 285;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v28, (uint64_t)&__p);
  }
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  if (v15 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3)
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2)
    && (v16 = (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2),
        v16 == (*(double (**)(_QWORD))(*(_QWORD *)*a3 + 152))(*a3)))
  {
    v20 = 1.0;
  }
  else
  {
    if ((*(double (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2) != *a4)
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v29 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = pthread_self();
        v31 = pthread_mach_thread_np(v30);
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v31;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 291;
        v52 = 2080;
        *(_QWORD *)v53 = "not (source_timebase->get_sample_rate() == source_format.mSampleRate)";
        _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
      v32 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v42);
      std::logic_error::logic_error(&v43, &v42);
      v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v44, &v43);
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = -1;
      v44.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v45 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v44);
      *(_QWORD *)&v53[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, cons"
                           "t CA::StreamDescription &, const CA::StreamDescription &) const";
      v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      v55 = 291;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
      v40 = v37;
      v41 = v38;
      v37 = 0uLL;
      v38 = 0;
      v39 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v39);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v32, (uint64_t)&__p);
    }
    if ((*(double (**)(_QWORD))(*(_QWORD *)*a3 + 152))(*a3) != *a5)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v33 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = pthread_self();
        v35 = pthread_mach_thread_np(v34);
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v35;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 292;
        v52 = 2080;
        *(_QWORD *)v53 = "not (dest_timebase->get_sample_rate() == dest_format.mSampleRate)";
        _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
      v36 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v42);
      std::logic_error::logic_error(&v43, &v42);
      v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v44, &v43);
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = -1;
      v44.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v45 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v44);
      *(_QWORD *)&v53[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, cons"
                           "t CA::StreamDescription &, const CA::StreamDescription &) const";
      v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      v55 = 292;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
      v40 = v37;
      v41 = v38;
      v37 = 0uLL;
      v38 = 0;
      v39 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v39);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v36, (uint64_t)&__p);
    }
    v19 = (*(double (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    v20 = v19 / (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "scale ratio");
  v44.__imp_.__imp_ = 0;
  v45 = 0;
  *(double *)&v44.__vftable = v20;
  v46 = 0;
  v47 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, (__int128 *)&v39, (uint64_t)&v44);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)v10, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v56)
    v56(0, &v52, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v47)
    v47(0, (uint64_t)&v44, 0, 0);
  if (SHIBYTE(v40) < 0)
    operator delete(v39);
}

void sub_1B5A2A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::DAL_Settings::add<BOOL>(unint64_t a1, __int128 *a2, char a3)
{
  _OWORD v4[2];
  void (*v5)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  std::string __p;
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t *, _QWORD, _QWORD);

  memset(v4, 0, sizeof(v4));
  LOBYTE(v4[0]) = a3;
  v5 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v8)
    v8(0, &v7, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    v5(0, (uint64_t)v4, 0, 0);
}

void sub_1B5A2A500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)&a15);
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>(unint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[4];
  void (*v8)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *);
  std::string __p;
  uint64_t v10;
  void (*v11)(_QWORD, uint64_t *, _QWORD, _QWORD);

  v7[2] = 0;
  v7[3] = 0;
  v7[0] = a3;
  v7[1] = a4;
  if (a4)
  {
    v5 = (unint64_t *)(a4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v8 = (void (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v7);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v11)
    v11(0, &v10, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
    v8(0, (uint64_t)v7, 0, 0);
}

void sub_1B5A2A5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Settings::add<CA::StreamDescription>(unint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  _QWORD v8[4];
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t *);
  std::string __p;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t *, _QWORD, _QWORD);

  memset(&v8[1], 0, 24);
  v9 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  v6 = operator new();
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a3 + 32);
  v8[0] = v6;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v12)
    v12(0, &v11, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
    v9(0, (uint64_t)v8, 0, 0);
}

void sub_1B5A2A6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Settings::add<std::string>(unint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  void (*v7)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  std::string __p;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t *, _QWORD, _QWORD);

  v5 = 0u;
  v6 = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)&v6 = *((_QWORD *)a3 + 2);
  }
  v7 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v10)
    v10(0, &v9, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    v7(0, (uint64_t)&v5, 0, 0);
}

void sub_1B5A2A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)&a15);
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v13)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _QWORD *v14;
  void (*v15)(_QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v16;
  void (*v17)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD v23[2];
  void (*v24)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v25)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  std::__shared_weak_count *v26;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      *((_QWORD *)a3 + 1) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch;
LABEL_7:
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a2);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v10 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
      result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>())
        return a2;
      else
        return 0;
    case 5:
      v11 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v23[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v23);
        v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v23[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v11)
        goto LABEL_22;
      v13 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v25 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v25);
        v13 = v25;
      }
      if (v13 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v11)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v23[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
          v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v23);
        }
        else
        {
          v14 = 0;
        }
        *(_QWORD *)&v23[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
        if (*v14 == *(_QWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v23))return 1;
      }
      else
      {
LABEL_22:
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(v23, a2);
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(&v25, (uint64_t)a3);
        v15 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))&v23[0];
        v17 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v25;
        v16 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v23[0] + 1);
        if (*((_QWORD *)&v23[0] + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v23[0] + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (v15 == v17)
          return 1;
      }
      return 0;
    case 6:
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      AMCP::swap((AMCP::Thing *)v23, a3, a3);
      if (v24)
        v24(0, v23, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[343];
}

_QWORD *AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::bad_cast *exception;
  std::bad_cast *v14;
  std::bad_cast *v15;
  std::bad_cast *v16;
  std::bad_cast *v17;
  std::bad_cast *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t (*v22)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_18;
  v4 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v24 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v24);
    v5 = v24;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v23 = v4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v23);
    if (result)
    {
      v7 = result[1];
      *a1 = *result;
      a1[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      return result;
    }
LABEL_18:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v20 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v21, &v20);
  if (!v22)
  {
    v15 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v16 = std::bad_cast::bad_cast(v15);
    __cxa_throw(v16, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v19 = v4;
  result = (_QWORD *)v22(4, v21, 0, &v19);
  if (!result)
  {
    v17 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_cast::bad_cast(v17);
    __cxa_throw(v18, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v10 = result[1];
  *a1 = *result;
  a1[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v22)
    return (_QWORD *)v22(0, v21, 0, 0);
  return result;
}

void sub_1B5A2ACF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _DWORD *v12;
  int v13;
  _OWORD v14[2];
  void (*v15)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v16)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_5;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v9)
        goto LABEL_20;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
          v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1;
      }
      else
      {
LABEL_20:
        v13 = AMCP::Thing::convert_to<AMCP::Resampler_Quality>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Resampler_Quality>((uint64_t)a3))
          return 1;
      }
      return 0;
    case 6:
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15)
        v15(0, v14, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _DWORD *v12;
  int v13;
  _OWORD v14[2];
  void (*v15)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v16)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_5;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v9)
        goto LABEL_20;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
          v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1;
      }
      else
      {
LABEL_20:
        v13 = AMCP::Thing::convert_to<AMCP::Resampler_Type>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Resampler_Type>((uint64_t)a3))
          return 1;
      }
      return 0;
    case 6:
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15)
        v15(0, v14, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[345];
}

uint64_t AMCP::Thing::convert_to<AMCP::Resampler_Type>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5A2B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x268uLL);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E6997820;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 18) = 0;
  *((_QWORD *)v2 + 22) = 0;
  *((_QWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 30) = 0;
  *((_QWORD *)v2 + 34) = 0;
  *((_QWORD *)v2 + 38) = 0;
  *((_QWORD *)v2 + 42) = 0;
  *((_QWORD *)v2 + 46) = 0;
  *((_QWORD *)v2 + 50) = 0;
  *((_QWORD *)v2 + 54) = 0;
  *((_QWORD *)v2 + 58) = 0;
  *((_QWORD *)v2 + 62) = 0;
  *((_QWORD *)v2 + 66) = 0;
  *((_QWORD *)v2 + 70) = 0;
  *((_QWORD *)v2 + 76) = 0;
  *((_OWORD *)v2 + 37) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

_QWORD *std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5A2B548(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F240;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F240;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697F240;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697F240;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _BOOL4 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v1 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v15, "scale");
  v2 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v1 + 48), (unsigned __int8 *)v15);
  if (v2)
    v3 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v2 + 40));
  else
    v3 = 0;
  if (v16 < 0)
  {
    operator delete(v15[0]);
    if (v3)
      goto LABEL_6;
    return 0;
  }
  if (!v3)
    return 0;
LABEL_6:
  __p[0] = 0;
  __p[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v15, (uint64_t *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "get latency");
  AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)v15, (__int128 *)__p, 1);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = *(unint64_t **)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  __p[0] = *(void **)(v1 + 104);
  __p[1] = v5;
  if (v5)
  {
    v6 = v5 + 1;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)v4 + 136))(v4, __p, v15);
  v9 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v10 = (unint64_t *)((char *)__p[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return v8;
}

void sub_1B5A2B7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1B5A2B81C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B5A2B814);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F1B0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F1B0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697F1B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697F1B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(*(AMCP::Graph::Converter **)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F120;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F120;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697F120;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697F120;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return AMCP::Graph::Converter::get_required_input_samples_for_output_samples(*(AMCP::Graph::Converter **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F0A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F0A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697F0A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697F0A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(v1 + 208) - 1;
  *(_DWORD *)(v1 + 208) = v2;
  if (!v2)
    std::shared_ptr<AMCP::DAL::File>::reset[abi:ne180100]((_QWORD *)(v1 + 136));
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F020;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697F020;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697F020;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697F020;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EFA0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EFA0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697EFA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697EFA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(AMCP::Log::Scope_Registry *a1, int *a2, uint64_t a3, AMCP::DAL::DAL_Time **a4, _QWORD *a5)
{
  AMCP::DAL::DAL_Time *v5;
  _QWORD *v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  __n128 v20;
  std::__shared_weak_count *imp;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  double sample_time;
  void *v27;
  char v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  char v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  double v40;
  double v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  NSObject *v56;
  unint64_t *v57;
  unint64_t v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  std::logic_error *exception;
  uint64_t v62;
  int v63;
  uint64_t v64;
  std::logic_error v65;
  std::__shared_weak_count *v66;
  NSObject *v67;
  unint64_t *v68;
  unint64_t v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;
  std::logic_error *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  std::logic_error v76;
  std::logic_error v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  __int128 v82;
  std::logic_error __p;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  const char *v90;
  uint64_t v91;
  int v92;
  char v93;
  __n128 v94;
  std::string v95;
  uint64_t (**v96)();
  __int128 v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  __int128 v101;
  uint8_t buf[8];
  _BYTE v103[40];
  __int128 v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v5 = *a4;
  if (a4[1] - *a4 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v55 = *(std::__shared_weak_count **)v103;
    v56 = **(NSObject ***)buf;
    if (*(_QWORD *)v103)
    {
      v57 = (unint64_t *)(*(_QWORD *)v103 + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v59 = pthread_self();
      v60 = pthread_mach_thread_np(v59);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v60;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "Converter.cpp";
      *(_WORD *)&v103[10] = 1024;
      *(_DWORD *)&v103[12] = 117;
      *(_WORD *)&v103[16] = 2080;
      *(_QWORD *)&v103[18] = "not (sources.size() == 1)";
      _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter nodes should never be connected to more than one incoming buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter nodes should never be connected to more than one incoming buffer", (uint64_t)&v95);
    std::logic_error::logic_error(&v77, &v95);
    v62 = MEMORY[0x1E0DE5018];
    v77.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&__p, &v77);
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v84 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v103[24] = "auto AMCP::Graph::Converter::get_proc()::(anonymous class)::operator()(Object_ID, const IO_Pr"
                           "oc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP"
                           "::DAL::Writable_Range> &) const";
    *(_QWORD *)&v103[32] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    LODWORD(v104) = 117;
    std::vector<void *>::vector(&v80);
    v63 = backtrace((void **)v80, (*((_QWORD *)&v80 + 1) - (_QWORD)v80) >> 3);
    std::vector<void *>::resize((char **)&v80, v63);
    v97 = v80;
    v96 = off_1E69A20A0;
    v98 = v81;
    v80 = 0uLL;
    v81 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v96);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v62 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v64 = *(_QWORD *)&v103[16];
    exception[1].__imp_.__imp_ = *(const char **)&v103[16];
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
    v65 = *(std::logic_error *)&v103[24];
    LODWORD(exception[3].__vftable) = v104;
    exception[2] = v65;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v7 = (_QWORD *)*a5;
  if (a5[1] - *a5 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v66 = *(std::__shared_weak_count **)v103;
    v67 = **(NSObject ***)buf;
    if (*(_QWORD *)v103)
    {
      v68 = (unint64_t *)(*(_QWORD *)v103 + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      v70 = pthread_self();
      v71 = pthread_mach_thread_np(v70);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v71;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "Converter.cpp";
      *(_WORD *)&v103[10] = 1024;
      *(_DWORD *)&v103[12] = 118;
      *(_WORD *)&v103[16] = 2080;
      *(_QWORD *)&v103[18] = "not (dests.size() == 1)";
      _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter nodes should never be connected to more than one outgoing buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    v72 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter nodes should never be connected to more than one outgoing buffer", (uint64_t)&v95);
    std::logic_error::logic_error(&v77, &v95);
    v73 = MEMORY[0x1E0DE5018];
    v77.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&__p, &v77);
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v84 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v103[24] = "auto AMCP::Graph::Converter::get_proc()::(anonymous class)::operator()(Object_ID, const IO_Pr"
                           "oc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP"
                           "::DAL::Writable_Range> &) const";
    *(_QWORD *)&v103[32] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    LODWORD(v104) = 118;
    std::vector<void *>::vector(&v80);
    v74 = backtrace((void **)v80, (*((_QWORD *)&v80 + 1) - (_QWORD)v80) >> 3);
    std::vector<void *>::resize((char **)&v80, v74);
    v97 = v80;
    v96 = off_1E69A20A0;
    v98 = v81;
    v80 = 0uLL;
    v81 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v96);
    v72[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v72, (const std::logic_error *)buf);
    v72->__vftable = (std::logic_error_vtbl *)(v73 + 16);
    v72[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v75 = *(_QWORD *)&v103[16];
    v72[1].__imp_.__imp_ = *(const char **)&v103[16];
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
    v76 = *(std::logic_error *)&v103[24];
    LODWORD(v72[3].__vftable) = v104;
    v72[2] = v76;
    v72->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v72[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v72[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v10 = *a2;
  v11 = *((_QWORD *)a1 + 1);
  v12 = *((_QWORD *)v5 + 4);
  *(_QWORD *)&v101 = *((_QWORD *)v5 + 3);
  *((_QWORD *)&v101 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)v7[4];
  v99 = v7[3];
  v100 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)&v96, *((_QWORD *)v5 + 10));
  AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)&v95, v7[10]);
  AMCP::Graph::Converter::update_settings(v11, &v101, &v99, (double *)&v96, (double *)&v95);
  std::string::basic_string[abi:ne180100]<0>(buf, "volume processing");
  v18 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v11 + 48), buf);
  if (v18 && AMCP::Thing::convert_to<BOOL>((uint64_t)(v18 + 40)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "volume connection");
    v19 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v11 + 48), (unsigned __int8 *)&__p) != 0;
    if (SHIBYTE(v84) < 0)
      operator delete(__p.__vftable);
  }
  else
  {
    v19 = 0;
  }
  if ((v103[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v19)
    {
LABEL_16:
      if (!v15)
        goto LABEL_65;
      goto LABEL_61;
    }
  }
  else if (!v19)
  {
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "volume connection");
  __p.__vftable = 0;
  __p.__imp_.__imp_ = 0;
  v20 = AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(&v94, (_QWORD *)(v11 + 48), buf, (__n128 *)&__p);
  imp = (std::__shared_weak_count *)__p.__imp_.__imp_;
  if (__p.__imp_.__imp_)
  {
    v22 = (unint64_t *)(__p.__imp_.__imp_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))imp->__on_zero_shared)(imp, v20);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  if ((v103[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v24 = v94.n128_u64[0];
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)&__p, v94.n128_i64[0]);
  v25 = __p.__imp_.__imp_;
  if (!v93 && *(double *)&__p.__imp_.__imp_ == 0.0)
  {
    sample_time = AMCP::DAL::DAL_Time::get_sample_time(v5);
    caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)buf, v24);
    v104 = 0u;
    memset(&v103[8], 0, 32);
    *(double *)v103 = sample_time;
    v105 = 1;
    caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v24, (__int128 *)buf);
  }
  v27 = v84;
  v28 = v89;
  v29 = v101;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  LODWORD(v80) = 0;
  *((_QWORD *)&v80 + 1) = 0;
  v81 = 0;
  v82 = v29;
  if ((v28 & 1) != 0)
  {
    *((_QWORD *)&v80 + 1) = v25;
    LODWORD(v80) = 2;
    v33 = 3;
    if ((v28 & 2) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  v33 = 1;
  if ((v28 & 2) != 0)
  {
LABEL_36:
    v81 = v27;
    LODWORD(v80) = v33;
  }
LABEL_37:
  v34 = v90;
  v35 = v91;
  v36 = v92;
  if (v30)
  {
    v37 = (unint64_t *)&v30->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  LODWORD(v77.__vftable) = 0;
  v77.__imp_.__imp_ = 0;
  v78 = 0;
  v79 = v29;
  if ((v36 & 1) != 0)
  {
    v77.__imp_.__imp_ = v34;
    LODWORD(v77.__vftable) = 2;
    v39 = 3;
  }
  else
  {
    v39 = 1;
  }
  if ((v36 & 2) != 0)
  {
    v78 = v35;
    LODWORD(v77.__vftable) = v39;
  }
  v40 = AMCP::DAL::DAL_Time::get_sample_time(v5);
  v41 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)((char *)v5 + 40));
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)buf, v24);
  v106 = v40;
  v107 = v41;
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v24, (__int128 *)buf);
  if (v30)
  {
    v42 = (unint64_t *)&v30->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*((_QWORD *)&v82 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  v46 = (std::__shared_weak_count *)v94.n128_u64[1];
  if (v94.n128_u64[1])
  {
    v47 = (unint64_t *)(v94.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v15 = v100;
  if (v100)
  {
LABEL_61:
    v49 = (unint64_t *)&v15->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_65:
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(_QWORD **)(v11 + 136);
  if (v54)
  {
    AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a3 + 80), *((const AMCP::DAL::DAL_Timed_Segment **)*a4 + 3), *((std::__shared_weak_count **)*a4 + 4));
    (*(void (**)(_QWORD, uint8_t *, AMCP::DAL::DAL_Time *))(*(_QWORD *)*v54 + 16))(*v54, buf, *a4);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
  }
  *(_QWORD *)buf = &off_1E697EE38;
  *(_QWORD *)v103 = v11;
  *(_DWORD *)&v103[8] = v10;
  *(_QWORD *)&v103[16] = 0;
  *(_QWORD *)&v103[24] = 0;
  AMCP::Graph::process_once_across_timebases(*(_DWORD *)(v11 + 40), a4, a5, (uint64_t)buf);
}

void sub_1B5A2C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

void AMCP::Graph::process_once_across_timebases(int a1, AMCP::DAL::DAL_Time **a2, _QWORD *a3, uint64_t a4)
{
  AMCP::DAL::DAL_Time *v8;
  std::string::size_type v9;
  std::logic_error_vtbl *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *imp;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type size;
  std::logic_error v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  std::logic_error v41;
  __int128 v42;
  std::string::size_type v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  AMCP::Log::Scope_Registry *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  std::string::size_type *p_size;
  uint64_t v71;
  std::string::size_type v72;
  std::logic_error_vtbl *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  double sample_time;
  double v83;
  AMCP::Log::Scope_Registry *v84;
  double v85;
  AMCP::Log::Scope_Registry *v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  double v90;
  AMCP::Log::Scope_Registry *v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  AMCP::Log::Scope_Registry *v95;
  double *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  double v110;
  double v111;
  std::string::size_type v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  __n128 v137;
  const char *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  double v142;
  double v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::logic_error v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  std::logic_error_vtbl *v163;
  unint64_t *v164;
  unint64_t v165;
  std::logic_error_vtbl *v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  unsigned __int8 *v170;
  uint64_t v171;
  void (__cdecl *v172)(std::logic_error *__hidden);
  void (__cdecl *what_high)(std::logic_error *__hidden);
  int v174;
  void (__cdecl *v175)(std::logic_error *__hidden);
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::string::size_type v189;
  std::string::size_type v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  AMCP::Log::Scope_Registry *v207;
  double *v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  int v224;
  double v225;
  double v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  double v233;
  AMCP::Log::Scope_Registry *v234;
  double v235;
  double v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  _BOOL8 v245;
  _BOOL8 v246;
  BOOL v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  int v294;
  std::logic_error v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  double *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  __int128 v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  NSObject *v363;
  _opaque_pthread_t *v364;
  mach_port_t v365;
  void *exception;
  NSObject *v367;
  _opaque_pthread_t *v368;
  mach_port_t v369;
  void *v370;
  NSObject *v371;
  _opaque_pthread_t *v372;
  mach_port_t v373;
  void *v374;
  NSObject *v375;
  _opaque_pthread_t *v376;
  mach_port_t v377;
  void *v378;
  NSObject *v379;
  _opaque_pthread_t *v380;
  mach_port_t v381;
  void *v382;
  NSObject *v383;
  _opaque_pthread_t *v384;
  mach_port_t v385;
  void *v386;
  NSObject *v387;
  _opaque_pthread_t *v388;
  mach_port_t v389;
  void *v390;
  NSObject *v391;
  _opaque_pthread_t *v392;
  mach_port_t v393;
  void *v394;
  NSObject *v395;
  _opaque_pthread_t *v396;
  mach_port_t v397;
  void *v398;
  NSObject *v399;
  _opaque_pthread_t *v400;
  mach_port_t v401;
  void *v402;
  NSObject *v403;
  _opaque_pthread_t *v404;
  mach_port_t v405;
  void *v406;
  NSObject *v407;
  _opaque_pthread_t *v408;
  mach_port_t v409;
  void *v410;
  NSObject *v411;
  _opaque_pthread_t *v412;
  mach_port_t v413;
  void *v414;
  std::logic_error v415;
  std::logic_error v416;
  std::__shared_weak_count *v417;
  std::__shared_weak_count *v418;
  __int128 v419;
  std::string::size_type v420;
  std::__shared_weak_count *v421;
  std::string v422;
  std::logic_error v423;
  __int128 v424;
  uint64_t v425;
  __int128 v426;
  double *v427[3];
  std::string v428;
  std::logic_error v429;
  __int128 v430;
  uint64_t v431;
  __int128 v432;
  std::string v433;
  char v434;
  __int128 v435;
  std::string::size_type v436;
  std::__shared_weak_count *v437;
  char v438[8];
  double v439;
  std::__shared_weak_count *v440;
  __int128 v441;
  char *v442;
  __int128 v443;
  __int128 v444;
  uint64_t v445;
  __int128 v446;
  std::string v447;
  std::logic_error v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  std::string v452;
  std::logic_error v453;
  __int128 v454;
  uint64_t v455;
  __int128 v456;
  _BYTE v457[24];
  __int128 v458;
  int v459;
  __int128 v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  std::string::size_type v463;
  std::__shared_weak_count *v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  std::logic_error v467;
  std::logic_error v468;
  _BYTE v469[24];
  __int128 v470;
  _BYTE v471[24];
  uint64_t v472;
  std::__shared_weak_count *v473;
  double *v474[3];
  std::string v475;
  std::logic_error v476;
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  std::string v480;
  std::logic_error v481;
  __int128 v482;
  uint64_t v483;
  __int128 v484;
  AMCP::DAL::DAL_Time_Range *v485;
  double *v486;
  double *v487;
  __int128 v488;
  uint64_t v489;
  uint64_t (**v490)();
  __int128 v491;
  uint64_t v492;
  std::string v493;
  std::logic_error v494;
  std::logic_error v495;
  std::logic_error_vtbl *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  int v500;
  char v501;
  _BYTE __p[40];
  __int128 v503;
  _BYTE v504[24];
  uint64_t v505;
  std::__shared_weak_count *v506;
  __int128 v507;
  std::string v508;
  __int16 v509;
  _BYTE v510[14];
  const char *v511;
  int v512;
  uint64_t v513;

  v513 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 2);
  v10 = (std::logic_error_vtbl *)*((_QWORD *)*a2 + 3);
  *(_OWORD *)&v480.__r_.__value_.__l.__data_ = *(_OWORD *)*a2;
  v480.__r_.__value_.__r.__words[2] = v9;
  v481.__vftable = v10;
  v11 = *((_QWORD *)v8 + 4);
  v481.__imp_.__imp_ = (const char *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *((_QWORD *)v8 + 7);
  v15 = *((_QWORD *)v8 + 8);
  v482 = *(_OWORD *)((char *)v8 + 40);
  v483 = v14;
  *(_QWORD *)&v484 = v15;
  v16 = *((_QWORD *)v8 + 9);
  *((_QWORD *)&v484 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  memset(&__p[8], 0, 32);
  *(_DWORD *)__p = 0;
  LODWORD(v503) = 0;
  (*(void (**)(uint64_t, _BYTE *, std::string *, _QWORD))(*(_QWORD *)v19 + 96))(v19, __p, &v480, 0);
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  v452 = v480;
  v453 = v481;
  if (v481.__imp_.__imp_)
  {
    v20 = (unint64_t *)(v481.__imp_.__imp_ + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v454 = v482;
  v455 = v483;
  v456 = v484;
  if (*((_QWORD *)&v484 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v19 + 160))(__p, v19, &v452);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
  if (*((_QWORD *)&v456 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  imp = (std::__shared_weak_count *)v453.__imp_.__imp_;
  if (v453.__imp_.__imp_)
  {
    v28 = (unint64_t *)(v453.__imp_.__imp_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  *(_OWORD *)&v447.__r_.__value_.__r.__words[1] = 0u;
  v448 = (std::logic_error)0;
  LODWORD(v447.__r_.__value_.__l.__data_) = 0;
  LODWORD(v449) = 0;
  AMCP::DAL::Writable_Range::pad_and_receive_data((uint64_t)__p, (uint64_t)&v447, *a2);
  memset(&v428, 0, sizeof(v428));
  v475 = v480;
  v476 = v481;
  if (v481.__imp_.__imp_)
  {
    v30 = (unint64_t *)(v481.__imp_.__imp_ + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v477 = v482;
  v478 = v483;
  v479 = v484;
  if (*((_QWORD *)&v484 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (*(void (**)(std::logic_error *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v19 + 144))(&v468, v19, &v475);
  size = v428.__r_.__value_.__l.__size_;
  if (v428.__r_.__value_.__l.__size_ >= v428.__r_.__value_.__r.__words[2])
  {
    v37 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v428.__r_.__value_.__l.__size_ - v428.__r_.__value_.__r.__words[0]) >> 3)
        + 1;
    if (v37 > 0x2E8BA2E8BA2E8BALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    if (0x5D1745D1745D1746 * ((uint64_t)(v428.__r_.__value_.__r.__words[2] - v428.__r_.__value_.__r.__words[0]) >> 3) > v37)
      v37 = 0x5D1745D1745D1746
          * ((uint64_t)(v428.__r_.__value_.__r.__words[2] - v428.__r_.__value_.__r.__words[0]) >> 3);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3
                          * ((uint64_t)(v428.__r_.__value_.__r.__words[2] - v428.__r_.__value_.__r.__words[0]) >> 3)) >= 0x1745D1745D1745DLL)
      v38 = 0x2E8BA2E8BA2E8BALL;
    else
      v38 = v37;
    *((_QWORD *)&v443 + 1) = (char *)&v428.__r_.__value_.__l + 16;
    if (v38)
      v38 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v38);
    else
      v39 = 0;
    v40 = (char *)(v38 + 8 * ((uint64_t)(v428.__r_.__value_.__l.__size_ - v428.__r_.__value_.__r.__words[0]) >> 3));
    *(_QWORD *)&v441 = v38;
    *((_QWORD *)&v441 + 1) = v40;
    *(_QWORD *)&v443 = v38 + 88 * v39;
    v41 = v468;
    *((_QWORD *)v40 + 2) = *(_QWORD *)v469;
    *(std::logic_error *)v40 = v41;
    *(_OWORD *)(v40 + 24) = *(_OWORD *)&v469[8];
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    v42 = v470;
    *((_QWORD *)v40 + 7) = *(_QWORD *)v471;
    *(_OWORD *)(v40 + 40) = v42;
    *((_OWORD *)v40 + 4) = *(_OWORD *)&v471[8];
    *(_OWORD *)&v471[8] = 0uLL;
    *((_QWORD *)v40 + 10) = v472;
    v442 = v40 + 88;
    std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer((uint64_t *)&v428, &v441);
    v43 = v428.__r_.__value_.__l.__size_;
    std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)&v441);
    v44 = *(std::__shared_weak_count **)&v471[16];
    v428.__r_.__value_.__l.__size_ = v43;
    if (*(_QWORD *)&v471[16])
    {
      v45 = (unint64_t *)(*(_QWORD *)&v471[16] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v35 = v468;
    *(_QWORD *)(v428.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)v469;
    *(std::logic_error *)size = v35;
    *(_OWORD *)(size + 24) = *(_OWORD *)&v469[8];
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    v36 = *(_QWORD *)v471;
    *(_OWORD *)(size + 40) = v470;
    *(_QWORD *)(size + 56) = v36;
    *(_OWORD *)(size + 64) = *(_OWORD *)&v471[8];
    *(_OWORD *)&v471[8] = 0uLL;
    *(_QWORD *)(size + 80) = v472;
    v428.__r_.__value_.__l.__size_ = size + 88;
  }
  v47 = *(std::__shared_weak_count **)&v469[16];
  if (*(_QWORD *)&v469[16])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v469[16] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
  if (*((_QWORD *)&v479 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v476.__imp_.__imp_;
  if (v476.__imp_.__imp_)
  {
    v54 = (unint64_t *)(v476.__imp_.__imp_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v433 = v428;
  memset(&v428, 0, sizeof(v428));
  v434 = 1;
  v468.__vftable = (std::logic_error_vtbl *)&v428;
  v56 = std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v468);
  if (SHIBYTE(v448.__vftable) < 0)
    operator delete((void *)v447.__r_.__value_.__l.__size_);
  v57 = *(std::__shared_weak_count **)&v504[16];
  if (*(_QWORD *)&v504[16])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v504[16] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(std::__shared_weak_count **)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v61 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
  if (*((_QWORD *)&v484 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)v481.__imp_.__imp_;
  if (v481.__imp_.__imp_)
  {
    v67 = (unint64_t *)(v481.__imp_.__imp_ + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v434)
    v69 = &v433;
  else
    v69 = (std::string *)a2;
  p_size = &v433.__r_.__value_.__l.__size_;
  if (!v434)
    p_size = (std::string::size_type *)(a2 + 1);
  if (*p_size - v69->__r_.__value_.__r.__words[0] != 88)
  {
    AMCP::Log::Scope_Registry::get(v56);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v363 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v363, OS_LOG_TYPE_ERROR))
    {
      v364 = pthread_self();
      v365 = pthread_mach_thread_np(v364);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v365;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 619;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (sources.size() == 1)";
      _os_log_error_impl(&dword_1B57BA000, v363, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter should have one source range", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter should have one source range", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 619;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__p);
  }
  v71 = *a3;
  if (a3[1] - *a3 != 88)
  {
    AMCP::Log::Scope_Registry::get(v56);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v367 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v367, OS_LOG_TYPE_ERROR))
    {
      v368 = pthread_self();
      v369 = pthread_mach_thread_np(v368);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v369;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 620;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (dests.size() == 1)";
      _os_log_error_impl(&dword_1B57BA000, v367, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter should have one dest range", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v370 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter should have one dest range", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 620;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v370, (uint64_t)__p);
  }
  v72 = *(_QWORD *)(v71 + 16);
  v73 = *(std::logic_error_vtbl **)(v71 + 24);
  *(_OWORD *)&v428.__r_.__value_.__l.__data_ = *(_OWORD *)v71;
  v428.__r_.__value_.__r.__words[2] = v72;
  v429.__vftable = v73;
  v74 = *(_QWORD *)(v71 + 32);
  v429.__imp_.__imp_ = (const char *)v74;
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = *(_QWORD *)(v71 + 56);
  v78 = *(_QWORD *)(v71 + 64);
  v430 = *(_OWORD *)(v71 + 40);
  v431 = v77;
  *(_QWORD *)&v432 = v78;
  v79 = *(_QWORD *)(v71 + 72);
  *((_QWORD *)&v432 + 1) = v79;
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v427, *(const AMCP::DAL::DAL_Time_Range **)(v69->__r_.__value_.__r.__words[0] + 80), v69->__r_.__value_.__r.__words[0]);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v428);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v430);
  v83 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v428);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v430);
  if (sample_time != floor(v83))
  {
    AMCP::Log::Scope_Registry::get(v84);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v371 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v371, OS_LOG_TYPE_ERROR))
    {
      v372 = pthread_self();
      v373 = pthread_mach_thread_np(v372);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v373;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 625;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (dest_range.get_range().start().get_double() == dest_range.get_range().start().floor().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v371, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v374 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 625;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v374, (uint64_t)__p);
  }
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v428);
  v85 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v430);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v428);
  if (v85 != floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v430)))
  {
    AMCP::Log::Scope_Registry::get(v86);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v375 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v375, OS_LOG_TYPE_ERROR))
    {
      v376 = pthread_self();
      v377 = pthread_mach_thread_np(v376);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v377;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 626;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (dest_range.get_range().end().get_double() == dest_range.get_range().end().floor().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v375, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v378 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 626;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v378, (uint64_t)__p);
  }
  v87 = v69->__r_.__value_.__r.__words[0];
  v88 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v69->__r_.__value_.__l.__data_);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v87 + 40));
  v89 = v69->__r_.__value_.__r.__words[0];
  v90 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v69->__r_.__value_.__l.__data_);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v89 + 40));
  if (v88 != floor(v90))
  {
    AMCP::Log::Scope_Registry::get(v91);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v379 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v379, OS_LOG_TYPE_ERROR))
    {
      v380 = pthread_self();
      v381 = pthread_mach_thread_np(v380);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v381;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 627;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (sources[0].get_time_range().get_range().start().get_double() == sources[0].get_time_ran"
                            "ge().get_range().start().floor().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v379, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v382 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 627;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v382, (uint64_t)__p);
  }
  v92 = v69->__r_.__value_.__r.__words[0];
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v69->__r_.__value_.__l.__data_);
  v93 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v92 + 40));
  v94 = v69->__r_.__value_.__r.__words[0];
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v69->__r_.__value_.__l.__data_);
  if (v93 != floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v94 + 40))))
  {
    AMCP::Log::Scope_Registry::get(v95);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v383 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v383, OS_LOG_TYPE_ERROR))
    {
      v384 = pthread_self();
      v385 = pthread_mach_thread_np(v384);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v385;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 628;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (sources[0].get_time_range().get_range().end().get_double() == sources[0].get_time_range"
                            "().get_range().end().floor().get_double())";
      _os_log_error_impl(&dword_1B57BA000, v383, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v386 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 628;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v386, (uint64_t)__p);
  }
  v96 = v427[0];
  if ((double *)((char *)v427[1] - (char *)v427[0]) != (double *)96)
  {
    AMCP::Log::Scope_Registry::get(v95);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v387 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v387, OS_LOG_TYPE_ERROR))
    {
      v388 = pthread_self();
      v389 = pthread_mach_thread_np(v388);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v389;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 630;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (source_ranges.size() == 1)";
      _os_log_error_impl(&dword_1B57BA000, v387, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should only ever have one source after copying from the ring buffer into the temp fixed buffer.", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v441);
    v390 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should only ever have one source after copying from the ring buffer into the temp fixed buffer.", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 630;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v390, (uint64_t)__p);
  }
  v97 = *a3;
  v422 = v428;
  v423 = v429;
  if (v429.__imp_.__imp_)
  {
    v98 = (unint64_t *)(v429.__imp_.__imp_ + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v424 = v430;
  v425 = v431;
  v426 = v432;
  if (*((_QWORD *)&v432 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  (*(void (**)(std::string::size_type *__return_ptr))(**(_QWORD **)(v69->__r_.__value_.__r.__words[0] + 80)
                                                               + 56))(&v420);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*a3 + 80) + 56))(&v419);
  v441 = *((_OWORD *)v96 + 1);
  v102 = *((_QWORD *)v96 + 5);
  v442 = (char *)*((_QWORD *)v96 + 4);
  *(_QWORD *)&v443 = v102;
  v103 = *((_QWORD *)v96 + 6);
  *((_QWORD *)&v443 + 1) = v103;
  if (v103)
  {
    v104 = (unint64_t *)(v103 + 8);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  v444 = *(_OWORD *)(v96 + 7);
  v106 = *((_QWORD *)v96 + 10);
  v445 = *((_QWORD *)v96 + 9);
  *(_QWORD *)&v446 = v106;
  v107 = *((_QWORD *)v96 + 11);
  *((_QWORD *)&v446 + 1) = v107;
  if (v107)
  {
    v108 = (unint64_t *)(v107 + 8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  if (a1)
  {
    AMCP::DAL::DAL_Time::operator-((uint64_t)v438, (AMCP::DAL::DAL_Time *)&v424, (AMCP::DAL::DAL_Time *)&v422);
    if ((v438[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v438);
    v452.__r_.__value_.__r.__words[0] = 0;
    v110 = (*(double (**)(uint64_t, uint64_t, std::string *, double))(*(_QWORD *)a4 + 24))(a4, 1, &v452, round(v439));
    v111 = v110 + AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v96 + 2));
    v112 = *((_QWORD *)v96 + 6);
    v480.__r_.__value_.__l.__data_ = (std::string::pointer)v96[5];
    v480.__r_.__value_.__l.__size_ = v112;
    if (v112)
    {
      v113 = (unint64_t *)(v112 + 8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    LODWORD(v468.__vftable) = 2;
    *(double *)&v468.__imp_.__imp_ = v111;
    *(_QWORD *)v469 = 0;
    v417 = (std::__shared_weak_count *)v480.__r_.__value_.__l.__size_;
    *(_OWORD *)&v469[8] = *(_OWORD *)&v480.__r_.__value_.__l.__data_;
    *(_OWORD *)&v480.__r_.__value_.__l.__data_ = 0uLL;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)(v96 + 2), (const AMCP::DAL::DAL_Time *)&v468);
    if (v417)
    {
      p_shared_owners = (unint64_t *)&v417->__shared_owners_;
      do
        v116 = __ldaxr(p_shared_owners);
      while (__stlxr(v116 - 1, p_shared_owners));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
        std::__shared_weak_count::__release_weak(v417);
      }
    }
    v117 = (std::__shared_weak_count *)v480.__r_.__value_.__l.__size_;
    if (v480.__r_.__value_.__l.__size_)
    {
      v118 = (unint64_t *)(v480.__r_.__value_.__l.__size_ + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v441 = *(_OWORD *)__p;
    v442 = *(char **)&__p[16];
    v120 = *(_OWORD *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    v443 = v120;
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v444 = v503;
    v445 = *(_QWORD *)v504;
    v124 = *(_OWORD *)&v504[8];
    *(_OWORD *)&v504[8] = 0uLL;
    v125 = (std::__shared_weak_count *)*((_QWORD *)&v446 + 1);
    v446 = v124;
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = *(std::__shared_weak_count **)&v504[16];
    if (*(_QWORD *)&v504[16])
    {
      v129 = (unint64_t *)(*(_QWORD *)&v504[16] + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v132 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v134 = v440;
    if (v440)
    {
      v135 = (unint64_t *)&v440->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      goto LABEL_192;
    }
  }
  else
  {
    v137.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v468, (AMCP::DAL::DAL_Time *)(v96 + 7), (AMCP::DAL::DAL_Time *)(v96 + 2));
    if (((uint64_t)v468.__vftable & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v468);
    v138 = v468.__imp_.__imp_;
    v139 = *(std::__shared_weak_count **)&v469[16];
    if (*(_QWORD *)&v469[16])
    {
      v140 = (unint64_t *)(*(_QWORD *)&v469[16] + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v139->__on_zero_shared)(v139, v137);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v452.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
    v142 = (*(double (**)(uint64_t, _QWORD, std::string *, double))(*(_QWORD *)a4 + 24))(a4, 0, &v452, *(double *)&v138);
    v143 = v142 + AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v422);
    *(std::logic_error *)&v480.__r_.__value_.__l.__data_ = v423;
    if (v423.__imp_.__imp_)
    {
      v144 = (unint64_t *)(v423.__imp_.__imp_ + 8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    LODWORD(v468.__vftable) = 2;
    *(double *)&v468.__imp_.__imp_ = v143;
    *(_QWORD *)v469 = 0;
    v418 = (std::__shared_weak_count *)v480.__r_.__value_.__l.__size_;
    *(_OWORD *)&v469[8] = *(_OWORD *)&v480.__r_.__value_.__l.__data_;
    *(_OWORD *)&v480.__r_.__value_.__l.__data_ = 0uLL;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)&v422, (const AMCP::DAL::DAL_Time *)&v468);
    if (v418)
    {
      v146 = (unint64_t *)&v418->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
        std::__shared_weak_count::__release_weak(v418);
      }
    }
    v148 = (std::__shared_weak_count *)v480.__r_.__value_.__l.__size_;
    if (v480.__r_.__value_.__l.__size_)
    {
      v149 = (unint64_t *)(v480.__r_.__value_.__l.__size_ + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v422 = *(std::string *)__p;
    v151 = *(std::logic_error *)&__p[24];
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    v152 = (std::__shared_weak_count *)v423.__imp_.__imp_;
    v423 = v151;
    if (v152)
    {
      v153 = (unint64_t *)&v152->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v424 = v503;
    v425 = *(_QWORD *)v504;
    v155 = *(_OWORD *)&v504[8];
    *(_OWORD *)&v504[8] = 0uLL;
    v156 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
    v426 = v155;
    if (v156)
    {
      v157 = (unint64_t *)&v156->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v159 = *(std::__shared_weak_count **)&v504[16];
    if (*(_QWORD *)&v504[16])
    {
      v160 = (unint64_t *)(*(_QWORD *)&v504[16] + 8);
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v134 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v162 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v136 = __ldaxr(v162);
      while (__stlxr(v136 - 1, v162));
LABEL_192:
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
  }
  v163 = v423.__vftable;
  *(std::logic_error *)__p = v423;
  if (v423.__imp_.__imp_)
  {
    v164 = (unint64_t *)(v423.__imp_.__imp_ + 8);
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
    v166 = v423.__vftable;
    v468 = v423;
    if (v423.__imp_.__imp_)
    {
      v167 = (unint64_t *)(v423.__imp_.__imp_ + 8);
      do
        v168 = __ldxr(v167);
      while (__stxr(v168 + 1, v167));
    }
  }
  else
  {
    v468.__vftable = v423.__vftable;
    v468.__imp_.__imp_ = 0;
    v166 = v423.__vftable;
  }
  v169 = ((unint64_t)v163 | (unint64_t)v166) == 0;
  if (v163 && v166)
  {
    v170 = (unsigned __int8 *)(*((uint64_t (**)(std::logic_error_vtbl *))v163->~logic_error + 2))(v163);
    v163 = (std::logic_error_vtbl *)(*((uint64_t (**)(std::logic_error_vtbl *))v166->~logic_error + 2))(v166);
    v171 = v170[23];
    if ((v171 & 0x80u) == 0)
      v172 = (void (__cdecl *)(std::logic_error *__hidden))v170[23];
    else
      v172 = (void (__cdecl *)(std::logic_error *__hidden))*((_QWORD *)v170 + 1);
    what_high = (void (__cdecl *)(std::logic_error *__hidden))HIBYTE(v163->what);
    v174 = (char)what_high;
    if ((char)what_high < 0)
      what_high = v163->~logic_error_0;
    if (v172 == what_high)
    {
      if (v174 >= 0)
        v175 = (void (__cdecl *)(std::logic_error *__hidden))v163;
      else
        v175 = v163->~logic_error;
      if ((v171 & 0x80) != 0)
      {
        v163 = (std::logic_error_vtbl *)memcmp(*(const void **)v170, v175, *((_QWORD *)v170 + 1));
        v169 = (_DWORD)v163 == 0;
      }
      else if (v170[23])
      {
        v176 = v171 - 1;
        do
        {
          v178 = *v170++;
          v177 = v178;
          v180 = *(unsigned __int8 *)v175;
          v175 = (void (__cdecl *)(std::logic_error *__hidden))((char *)v175 + 1);
          v179 = v180;
          v182 = v176-- != 0;
          v169 = v177 == v179;
        }
        while (v177 == v179 && v182);
      }
      else
      {
        v169 = 1;
      }
    }
    else
    {
      v169 = 0;
    }
  }
  v183 = (std::__shared_weak_count *)v468.__imp_.__imp_;
  if (v468.__imp_.__imp_)
  {
    v184 = (unint64_t *)(v468.__imp_.__imp_ + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v187 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (!v169)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v163);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v391 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v391, OS_LOG_TYPE_ERROR))
    {
      v392 = pthread_self();
      v393 = pthread_mach_thread_np(v392);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v393;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 516;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (is_same_timebase(destination_range.start().get_clock(), destination_range.start().get_clock()))";
      _os_log_error_impl(&dword_1B57BA000, v391, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v508);
    v394 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v452);
    std::logic_error::logic_error((std::logic_error *)&v447, &v452);
    v447.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v468, (const std::logic_error *)&v447);
    *(_QWORD *)&v469[16] = 0;
    *(_QWORD *)&v469[8] = 0;
    *(_QWORD *)&v470 = 0;
    DWORD2(v470) = -1;
    v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)v469 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
    *(_QWORD *)&__p[32] = "Process_Range_Results AMCP::Graph::process_variable_size_range(Buffer_Alignment, const Cross_T"
                          "imebase_Processor &, const AMCP::DAL::Buffer_Time_Translator::Translation_Range &, AMCP::DAL::"
                          "Writable_Range &, DAL::DAL_Time_Range, const DAL::Container, DAL::Container)";
    *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v503) = 516;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v475.__r_.__value_.__l.__data_);
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = *(_OWORD *)&v475.__r_.__value_.__l.__data_;
    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v481.__vftable = (std::logic_error_vtbl *)v475.__r_.__value_.__r.__words[2];
    memset(&v475, 0, sizeof(v475));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v480);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v394, (uint64_t)__p);
  }
  v190 = v420;
  v189 = (std::string::size_type)v421;
  v436 = v420;
  v437 = v421;
  if (v421)
  {
    v191 = (unint64_t *)&v421->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = v419;
  v435 = v419;
  if (*((_QWORD *)&v419 + 1))
  {
    v194 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v486, *(const AMCP::DAL::DAL_Time_Range **)(v97 + 80), (uint64_t)&v422);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v487 - (char *)v486) >> 5) < 2)
  {
    if ((char *)v487 - (char *)v486 != 96)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v452.__r_.__value_.__r.__words[0] = v190;
    v452.__r_.__value_.__l.__size_ = v189;
    if (v189)
    {
      v290 = (unint64_t *)(v189 + 8);
      do
        v291 = __ldxr(v290);
      while (__stxr(v291 + 1, v290));
    }
    *(_OWORD *)&v475.__r_.__value_.__l.__data_ = v193;
    if (*((_QWORD *)&v193 + 1))
    {
      v292 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v293 = __ldxr(v292);
      while (__stxr(v293 + 1, v292));
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *, double *, std::string *))(*(_QWORD *)a4 + 16))(__p, a4, &v452, v96, &v475);
    v294 = *(_DWORD *)__p;
    v295 = *(std::logic_error *)&__p[8];
    v296 = (std::__shared_weak_count *)v475.__r_.__value_.__l.__size_;
    if (v475.__r_.__value_.__l.__size_)
    {
      v297 = (unint64_t *)(v475.__r_.__value_.__l.__size_ + 8);
      do
        v298 = __ldaxr(v297);
      while (__stlxr(v298 - 1, v297));
      if (!v298)
      {
        v415 = v295;
        ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
        std::__shared_weak_count::__release_weak(v296);
        v295 = v415;
      }
    }
    v299 = (std::__shared_weak_count *)v452.__r_.__value_.__l.__size_;
    if (v452.__r_.__value_.__l.__size_)
    {
      v300 = (unint64_t *)(v452.__r_.__value_.__l.__size_ + 8);
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        v416 = v295;
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
        v295 = v416;
      }
    }
    v302 = v486;
    if (v487 == v486)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v303 = *((_QWORD *)v486 + 4);
    v304 = *((_QWORD *)v486 + 5);
    *(_OWORD *)v469 = *((_OWORD *)v486 + 1);
    *(_QWORD *)&v469[16] = v303;
    *(_QWORD *)&v470 = v304;
    v305 = *((_QWORD *)v486 + 6);
    *((_QWORD *)&v470 + 1) = v305;
    if (v305)
    {
      v306 = (unint64_t *)(v305 + 8);
      do
        v307 = __ldxr(v306);
      while (__stxr(v307 + 1, v306));
    }
    v309 = *((_QWORD *)v302 + 9);
    v308 = *((_QWORD *)v302 + 10);
    *(_OWORD *)v471 = *(_OWORD *)(v302 + 7);
    *(_QWORD *)&v471[16] = v309;
    v472 = v308;
    v310 = (std::__shared_weak_count *)*((_QWORD *)v302 + 11);
    v473 = v310;
    if (v310)
    {
      v311 = (unint64_t *)&v310->__shared_owners_;
      do
        v312 = __ldxr(v311);
      while (__stxr(v312 + 1, v311));
    }
    v468 = v295;
    v313 = v435;
    if (*((_QWORD *)&v435 + 1))
    {
      v314 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
      do
        v315 = __ldxr(v314);
      while (__stxr(v315 + 1, v314));
    }
    *(std::logic_error *)__p = v468;
    *(_OWORD *)&__p[16] = *(_OWORD *)v469;
    *(_QWORD *)&__p[32] = *(_QWORD *)&v469[16];
    *(_QWORD *)&v503 = v304;
    *((_QWORD *)&v503 + 1) = v305;
    if (v305)
    {
      v316 = (unint64_t *)(v305 + 8);
      do
        v317 = __ldxr(v316);
      while (__stxr(v317 + 1, v316));
    }
    *(_OWORD *)v504 = *(_OWORD *)v471;
    *(_QWORD *)&v504[16] = *(_QWORD *)&v471[16];
    v505 = v308;
    v506 = v310;
    if (v310)
    {
      v318 = (unint64_t *)&v310->__shared_owners_;
      do
        v319 = __ldxr(v318);
      while (__stxr(v319 + 1, v318));
    }
    v507 = v313;
    *(_OWORD *)&v480.__r_.__value_.__r.__words[1] = 0u;
    v481 = (std::logic_error)0;
    LODWORD(v480.__r_.__value_.__l.__data_) = v294;
    LODWORD(v482) = 0;
    AMCP::DAL::Writable_Range::commit_direct_write(*(_QWORD *)(v97 + 80), (uint64_t)&v480, (uint64_t)__p);
    if (SHIBYTE(v481.__vftable) < 0)
      operator delete((void *)v480.__r_.__value_.__l.__size_);
    v320 = (std::__shared_weak_count *)*((_QWORD *)&v507 + 1);
    if (*((_QWORD *)&v507 + 1))
    {
      v321 = (unint64_t *)(*((_QWORD *)&v507 + 1) + 8);
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    v323 = v506;
    if (v506)
    {
      v324 = (unint64_t *)&v506->__shared_owners_;
      do
        v325 = __ldaxr(v324);
      while (__stlxr(v325 - 1, v324));
      if (!v325)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    v326 = (std::__shared_weak_count *)*((_QWORD *)&v503 + 1);
    if (*((_QWORD *)&v503 + 1))
    {
      v327 = (unint64_t *)(*((_QWORD *)&v503 + 1) + 8);
      do
        v328 = __ldaxr(v327);
      while (__stlxr(v328 - 1, v327));
      if (!v328)
      {
        ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
        std::__shared_weak_count::__release_weak(v326);
      }
    }
    v329 = v473;
    if (v473)
    {
      v330 = (unint64_t *)&v473->__shared_owners_;
      do
        v331 = __ldaxr(v330);
      while (__stlxr(v331 - 1, v330));
      if (!v331)
      {
        ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
        std::__shared_weak_count::__release_weak(v329);
      }
    }
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
    if (*((_QWORD *)&v470 + 1))
    {
      v332 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v289 = __ldaxr(v332);
      while (__stlxr(v289 - 1, v332));
LABEL_429:
      if (!v289)
      {
        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
        std::__shared_weak_count::__release_weak(v287);
      }
    }
  }
  else
  {
    v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
    memset(&__p[8], 0, 32);
    *(_DWORD *)__p = 0;
    LODWORD(v503) = 0;
    (*(void (**)(uint64_t, _BYTE *, std::string *, _QWORD))(*(_QWORD *)v196 + 96))(v196, __p, &v422, 0);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    v475 = v422;
    v476 = v423;
    if (v423.__imp_.__imp_)
    {
      v197 = (unint64_t *)(v423.__imp_.__imp_ + 8);
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    v477 = v424;
    v478 = v425;
    v479 = v426;
    if (*((_QWORD *)&v426 + 1))
    {
      v199 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v196 + 160))(&v480, v196, &v475);
    v201 = (std::__shared_weak_count *)*((_QWORD *)&v479 + 1);
    if (*((_QWORD *)&v479 + 1))
    {
      v202 = (unint64_t *)(*((_QWORD *)&v479 + 1) + 8);
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    v204 = (std::__shared_weak_count *)v476.__imp_.__imp_;
    if (v476.__imp_.__imp_)
    {
      v205 = (unint64_t *)(v476.__imp_.__imp_ + 8);
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(v474, v485, (uint64_t)&v422);
    v208 = v474[0];
    if ((double *)((char *)v474[1] - (char *)v474[0]) != (double *)96)
    {
      AMCP::Log::Scope_Registry::get(v207);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v395 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v395, OS_LOG_TYPE_ERROR))
      {
        v396 = pthread_self();
        v397 = pthread_mach_thread_np(v396);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v397;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 456;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (temp_buffer_translated_ranges.size() == 1)";
        _os_log_error_impl(&dword_1B57BA000, v395, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s temp_buffer local range needs to be contiguous!", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v457);
      v398 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"temp_buffer local range needs to be contiguous!", (uint64_t)&v447);
      std::logic_error::logic_error(&v495, &v447);
      v495.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v468, &v495);
      *(_QWORD *)&v469[16] = 0;
      *(_QWORD *)&v469[8] = 0;
      *(_QWORD *)&v470 = 0;
      DWORD2(v470) = -1;
      v468.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      *(_QWORD *)v469 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v468);
      *(_QWORD *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v503) = 456;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v508.__r_.__value_.__l.__data_);
      *(_OWORD *)&v452.__r_.__value_.__r.__words[1] = *(_OWORD *)&v508.__r_.__value_.__l.__data_;
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      v453.__vftable = (std::logic_error_vtbl *)v508.__r_.__value_.__r.__words[2];
      memset(&v508, 0, sizeof(v508));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v452);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v398, (uint64_t)__p);
    }
    v209 = *((_OWORD *)v474[0] + 1);
    v210 = *((_QWORD *)v474[0] + 4);
    v211 = *((_QWORD *)v474[0] + 5);
    v468 = *(std::logic_error *)v474[0];
    *(_OWORD *)v469 = v209;
    *(_QWORD *)&v469[16] = v210;
    *(_QWORD *)&v470 = v211;
    v212 = *((_QWORD *)v474[0] + 6);
    *((_QWORD *)&v470 + 1) = v212;
    if (v212)
    {
      v213 = (unint64_t *)(v212 + 8);
      do
        v214 = __ldxr(v213);
      while (__stxr(v214 + 1, v213));
    }
    v215 = *((_QWORD *)v208 + 9);
    v216 = *((_QWORD *)v208 + 10);
    *(_OWORD *)v471 = *(_OWORD *)(v208 + 7);
    *(_QWORD *)&v471[16] = v215;
    v472 = v216;
    v217 = (std::__shared_weak_count *)*((_QWORD *)v208 + 11);
    v473 = v217;
    if (v217)
    {
      v218 = (unint64_t *)&v217->__shared_owners_;
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 1, v218));
    }
    v467 = v468;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v196 + 56))(&v465, v196);
    v463 = v436;
    v464 = v437;
    if (v437)
    {
      v220 = (unint64_t *)&v437->__shared_owners_;
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    v461 = v465;
    v462 = v466;
    if (v466)
    {
      v222 = (unint64_t *)&v466->__shared_owners_;
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string::size_type *, double *, uint64_t *, std::logic_error *))(*(_QWORD *)a4 + 16))(__p, a4, &v463, v96, &v461, &v467);
    v224 = *(_DWORD *)__p;
    v225 = *(double *)&__p[8];
    v226 = *(double *)&__p[16];
    v227 = v462;
    if (v462)
    {
      v228 = (unint64_t *)&v462->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    v230 = v464;
    if (v464)
    {
      v231 = (unint64_t *)&v464->__shared_owners_;
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
    v233 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v422);
    v235 = round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v424) - v233);
    v236 = round(v226 - v225);
    if (v235 != v236)
    {
      AMCP::Log::Scope_Registry::get(v234);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v399 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v399, OS_LOG_TYPE_ERROR))
      {
        v400 = pthread_self();
        v401 = pthread_mach_thread_np(v400);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v401;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 466;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (destination_range.get_range().length() == processed_range.length())";
        _os_log_error_impl(&dword_1B57BA000, v399, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v490);
      v402 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v508);
      std::logic_error::logic_error((std::logic_error *)v457, &v508);
      *(_QWORD *)v457 = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v452, (const std::logic_error *)v457);
      v453 = (std::logic_error)0;
      *(_QWORD *)&v454 = 0;
      DWORD2(v454) = -1;
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v452.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v452);
      *(_QWORD *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v503) = 466;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v495);
      *(std::logic_error *)&v447.__r_.__value_.__r.__words[1] = v495;
      v447.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      v448.__vftable = v496;
      v495.__vftable = 0;
      v495.__imp_.__imp_ = 0;
      v496 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v447);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v402, (uint64_t)__p);
    }
    if (round(*(double *)&v468.__imp_.__imp_ - *(double *)&v468.__vftable) != v236)
    {
      AMCP::Log::Scope_Registry::get(v234);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v403 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v403, OS_LOG_TYPE_ERROR))
      {
        v404 = pthread_self();
        v405 = pthread_mach_thread_np(v404);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v405;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 467;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (temp_buffer_translated_range.m_local_range.length() == processed_range.length())";
        _os_log_error_impl(&dword_1B57BA000, v403, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v490);
      v406 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v508);
      std::logic_error::logic_error((std::logic_error *)v457, &v508);
      *(_QWORD *)v457 = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v452, (const std::logic_error *)v457);
      v453 = (std::logic_error)0;
      *(_QWORD *)&v454 = 0;
      DWORD2(v454) = -1;
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v452.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v452);
      *(_QWORD *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(_QWORD *)&v503 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v503) = 467;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v495);
      *(std::logic_error *)&v447.__r_.__value_.__r.__words[1] = v495;
      v447.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      v448.__vftable = v496;
      v495.__vftable = 0;
      v495.__imp_.__imp_ = 0;
      v496 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v447);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v406, (uint64_t)__p);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v196 + 56))(&v460, v196);
    *(std::logic_error *)__p = v468;
    *(_OWORD *)&__p[16] = *(_OWORD *)v469;
    *(_QWORD *)&__p[32] = *(_QWORD *)&v469[16];
    v503 = v470;
    if (*((_QWORD *)&v470 + 1))
    {
      v237 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v238 = __ldxr(v237);
      while (__stxr(v238 + 1, v237));
    }
    *(_OWORD *)v504 = *(_OWORD *)v471;
    *(_QWORD *)&v504[16] = *(_QWORD *)&v471[16];
    v505 = v472;
    v506 = v473;
    if (v473)
    {
      v239 = (unint64_t *)&v473->__shared_owners_;
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }
    v507 = v460;
    v460 = 0uLL;
    *(_OWORD *)&v457[8] = 0u;
    v458 = 0u;
    *(_DWORD *)v457 = v224;
    v459 = 0;
    AMCP::DAL::Writable_Range::commit_direct_write((uint64_t)v485, (uint64_t)v457, (uint64_t)__p);
    v447 = v422;
    v448 = v423;
    if (v423.__imp_.__imp_)
    {
      v241 = (unint64_t *)(v423.__imp_.__imp_ + 8);
      do
        v242 = __ldxr(v241);
      while (__stxr(v242 + 1, v241));
    }
    v449 = v424;
    v450 = v425;
    v451 = v426;
    if (*((_QWORD *)&v426 + 1))
    {
      v243 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
      do
        v244 = __ldxr(v243);
      while (__stxr(v244 + 1, v243));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v196 + 144))(&v452, v196, &v447);
    v245 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v454, (AMCP::DAL::DAL_Time *)&v452);
    if (v245)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v245);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v508, "com.apple.coreaudio", "AMCP");
      v407 = *(NSObject **)v508.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v508);
      if (os_log_type_enabled(v407, OS_LOG_TYPE_ERROR))
      {
        v408 = pthread_self();
        v409 = pthread_mach_thread_np(v408);
        LODWORD(v508.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v508.__r_.__value_.__r.__words[0]) = v409;
        LOWORD(v508.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v508.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DAL_Timed_Segment.cpp";
        WORD1(v508.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v508.__r_.__value_.__r.__words[2]) = 181;
        v509 = 2080;
        *(_QWORD *)v510 = "not (incoming_data.get_time_range().end() >= incoming_data.get_time_range().start())";
        _os_log_error_impl(&dword_1B57BA000, v407, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", (uint8_t *)&v508, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v501);
      v410 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v493);
      std::logic_error::logic_error(&v494, &v493);
      v494.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v495, &v494);
      v498 = 0;
      v497 = 0;
      v499 = 0;
      v500 = -1;
      v495.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v496 = (std::logic_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v508, (uint64_t)&v495);
      *(_QWORD *)&v510[6] = "void AMCP::DAL::Writable_Range::receive_data_at_range(const Source_ID &, const Readable_Rang"
                            "e &, const DAL_Time_Range &)";
      v511 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      v512 = 181;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v488);
      v491 = v488;
      v490 = off_1E69A20A0;
      v492 = v489;
      v488 = 0uLL;
      v489 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v508, (uint64_t)&v490);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v410, (uint64_t)&v508);
    }
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v508, (AMCP::DAL::DAL_Time *)&v424, (AMCP::DAL::DAL_Time *)&v422);
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v495, (AMCP::DAL::DAL_Time *)&v454, (AMCP::DAL::DAL_Time *)&v452);
    v246 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)&v508, (uint64_t)&v495);
    v247 = v246;
    v248 = v498;
    if (v498)
    {
      v249 = (unint64_t *)&v498->__shared_owners_;
      do
        v250 = __ldaxr(v249);
      while (__stlxr(v250 - 1, v249));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
        std::__shared_weak_count::__release_weak(v248);
      }
    }
    v251 = *(std::__shared_weak_count **)&v510[6];
    if (*(_QWORD *)&v510[6])
    {
      v252 = (unint64_t *)(*(_QWORD *)&v510[6] + 8);
      do
        v253 = __ldaxr(v252);
      while (__stlxr(v253 - 1, v252));
      if (!v253)
      {
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
      }
    }
    if (!v247)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v246);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v508, "com.apple.coreaudio", "AMCP");
      v411 = *(NSObject **)v508.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v508);
      if (os_log_type_enabled(v411, OS_LOG_TYPE_ERROR))
      {
        v412 = pthread_self();
        v413 = pthread_mach_thread_np(v412);
        LODWORD(v508.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v508.__r_.__value_.__r.__words[0]) = v413;
        LOWORD(v508.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v508.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DAL_Timed_Segment.cpp";
        WORD1(v508.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v508.__r_.__value_.__r.__words[2]) = 182;
        v509 = 2080;
        *(_QWORD *)v510 = "not (write_range.length() == incoming_data.get_time_range().length())";
        _os_log_error_impl(&dword_1B57BA000, v411, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v508, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v501);
      v414 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v493);
      std::logic_error::logic_error(&v494, &v493);
      v494.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v495, &v494);
      v498 = 0;
      v497 = 0;
      v499 = 0;
      v500 = -1;
      v495.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v496 = (std::logic_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v508, (uint64_t)&v495);
      *(_QWORD *)&v510[6] = "void AMCP::DAL::Writable_Range::receive_data_at_range(const Source_ID &, const Readable_Rang"
                            "e &, const DAL_Time_Range &)";
      v511 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      v512 = 182;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v488);
      v491 = v488;
      v490 = off_1E69A20A0;
      v492 = v489;
      v488 = 0uLL;
      v489 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v508, (uint64_t)&v490);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v414, (uint64_t)&v508);
    }
    (*(void (**)(_QWORD, _BYTE *, std::string *, std::string *))(**(_QWORD **)(v97 + 80) + 32))(*(_QWORD *)(v97 + 80), v457, &v452, &v422);
    v254 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
    if (*((_QWORD *)&v456 + 1))
    {
      v255 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 - 1, v255));
      if (!v256)
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        std::__shared_weak_count::__release_weak(v254);
      }
    }
    v257 = (std::__shared_weak_count *)v453.__imp_.__imp_;
    if (v453.__imp_.__imp_)
    {
      v258 = (unint64_t *)(v453.__imp_.__imp_ + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
    v260 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
    if (*((_QWORD *)&v451 + 1))
    {
      v261 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    v263 = (std::__shared_weak_count *)v448.__imp_.__imp_;
    if (v448.__imp_.__imp_)
    {
      v264 = (unint64_t *)(v448.__imp_.__imp_ + 8);
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    if (SBYTE7(v458) < 0)
      operator delete(*(void **)&v457[8]);
    v266 = (std::__shared_weak_count *)*((_QWORD *)&v507 + 1);
    if (*((_QWORD *)&v507 + 1))
    {
      v267 = (unint64_t *)(*((_QWORD *)&v507 + 1) + 8);
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v269 = v506;
    if (v506)
    {
      v270 = (unint64_t *)&v506->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v272 = (std::__shared_weak_count *)*((_QWORD *)&v503 + 1);
    if (*((_QWORD *)&v503 + 1))
    {
      v273 = (unint64_t *)(*((_QWORD *)&v503 + 1) + 8);
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    v275 = v466;
    if (v466)
    {
      v276 = (unint64_t *)&v466->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v278 = v473;
    if (v473)
    {
      v279 = (unint64_t *)&v473->__shared_owners_;
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    v281 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
    if (*((_QWORD *)&v470 + 1))
    {
      v282 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v283 = __ldaxr(v282);
      while (__stlxr(v283 - 1, v282));
      if (!v283)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
    }
    *(_QWORD *)__p = v474;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
    v284 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
    if (*((_QWORD *)&v484 + 1))
    {
      v285 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    v287 = (std::__shared_weak_count *)v481.__imp_.__imp_;
    if (v481.__imp_.__imp_)
    {
      v288 = (unint64_t *)(v481.__imp_.__imp_ + 8);
      do
        v289 = __ldaxr(v288);
      while (__stlxr(v289 - 1, v288));
      goto LABEL_429;
    }
  }
  *(_QWORD *)__p = &v486;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  v333 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
  if (*((_QWORD *)&v435 + 1))
  {
    v334 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
      std::__shared_weak_count::__release_weak(v333);
    }
  }
  v336 = v437;
  if (v437)
  {
    v337 = (unint64_t *)&v437->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = (std::__shared_weak_count *)*((_QWORD *)&v446 + 1);
  if (*((_QWORD *)&v446 + 1))
  {
    v340 = (unint64_t *)(*((_QWORD *)&v446 + 1) + 8);
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
  if (*((_QWORD *)&v443 + 1))
  {
    v343 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  v345 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
  if (*((_QWORD *)&v419 + 1))
  {
    v346 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v421;
  if (v421)
  {
    v349 = (unint64_t *)&v421->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  v351 = (std::__shared_weak_count *)*((_QWORD *)&v426 + 1);
  if (*((_QWORD *)&v426 + 1))
  {
    v352 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  v354 = (std::__shared_weak_count *)v423.__imp_.__imp_;
  if (v423.__imp_.__imp_)
  {
    v355 = (unint64_t *)(v423.__imp_.__imp_ + 8);
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  *(_QWORD *)__p = v427;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  v357 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
  if (*((_QWORD *)&v432 + 1))
  {
    v358 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = (std::__shared_weak_count *)v429.__imp_.__imp_;
  if (v429.__imp_.__imp_)
  {
    v361 = (unint64_t *)(v429.__imp_.__imp_ + 8);
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  if (v434)
  {
    *(_QWORD *)__p = &v433;
    std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  }
}

void sub_1B5A30030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,int a43,__int16 a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v47 + 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v47 + 40);
  STACK[0x4C0] = (unint64_t)&STACK[0x348];
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4C0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3F0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C8]);
  STACK[0x4C0] = (unint64_t)&STACK[0x408];
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4C0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v48 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v48 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  STACK[0x4C0] = (unint64_t)&a26;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4C0]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v49 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v49 + 24);
  if (a42)
  {
    STACK[0x4C0] = (unint64_t)&a39;
    std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4C0]);
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::Writable_Range::Direct_Write_Range::~Direct_Write_Range(AMCP::DAL::Writable_Range::Direct_Write_Range *this)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(__n128 *a1, _QWORD *a2, unsigned __int8 *a3, __n128 *a4)
{
  unsigned __int8 *v6;
  __n128 result;

  v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    result = *a4;
    *a1 = *a4;
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  int v20;

  v2 = (_OWORD *)result;
  v3 = atomic_load((unsigned __int8 *)a2);
  if ((v3 & 1) != 0)
  {
    v20 = 0;
    v5 = atomic_load((unsigned __int8 *)a2);
    if ((v5 & 1) != 0)
    {
      v6 = a2 + 64;
      do
      {
        v7 = atomic_load((unsigned int *)(a2 + 4));
        v8 = v7 - 1;
        v9 = 1;
        while (1)
        {
          v10 = v9;
          v11 = (unsigned int *)(v6 + 192 * (v8 & 1));
          v12 = atomic_load(v11);
          if ((v12 & 1) != 0)
            break;
          v9 = 0;
          --v8;
          if ((v10 & 1) == 0)
            goto LABEL_12;
        }
        v13 = v6 + 192 * (v8 & 1);
        v14 = *(_OWORD *)(v13 + 120);
        v2[6] = *(_OWORD *)(v13 + 104);
        v2[7] = v14;
        v15 = *(_OWORD *)(v13 + 152);
        v2[8] = *(_OWORD *)(v13 + 136);
        v2[9] = v15;
        v16 = *(_OWORD *)(v13 + 56);
        v2[2] = *(_OWORD *)(v13 + 40);
        v2[3] = v16;
        v17 = *(_OWORD *)(v13 + 88);
        v2[4] = *(_OWORD *)(v13 + 72);
        v2[5] = v17;
        v18 = *(_OWORD *)(v13 + 24);
        *v2 = *(_OWORD *)(v13 + 8);
        v2[1] = v18;
        __dmb(9u);
        if (v12 == *v11)
          return result;
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v20);
LABEL_12:
        v19 = atomic_load((unsigned __int8 *)a2);
      }
      while ((v19 & 1) != 0);
    }
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)result = 1065353216;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 1;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 1;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 144) = 0;
    *(_BYTE *)(result + 152) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EF10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EF10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697EF10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697EF10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EE90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E697EE90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E697EE90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E697EE90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::operator()(AMCP::Graph::File_Capture_Settings *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void **v4;
  void (*v5)(_QWORD, void **, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  CFTypeRef cf;
  void *__p[2];
  uint64_t v11;
  uint64_t v12[2];
  _BYTE v13[56];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BOOL (*v17)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v18[3];
  __int128 v19;
  __int128 v20;
  BOOL (*v21)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v22[3];
  __int128 v23;
  __int128 v24;
  BOOL (*v25)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  BOOL (*v30)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v31[8];
  _QWORD v32[9];

  v32[8] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_DWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 208) = v2 + 1;
  if (!v2)
  {
    AMCP::Graph::File_Capture_Settings::instance(a1);
    if (HIBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance))
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "write");
      v15 = 0u;
      v16 = 0u;
      LOBYTE(v15) = 1;
      v17 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v18, "create unique name");
      v19 = 0u;
      v20 = 0u;
      LOBYTE(v19) = 1;
      v21 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v22, "write time stamps");
      v23 = 0u;
      v24 = 0u;
      LOBYTE(v23) = 1;
      v25 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      get_audio_capture_folder(__p);
      std::string::basic_string[abi:ne180100]<0>(v26, "file location");
      v27 = *(_OWORD *)__p;
      v28 = v11;
      v29 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v11 = 0;
      v30 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(v31, "name", (__int128 *)(v1 + 16));
      asbd_to_dictionary((const CA::StreamDescription *)&cf, (uint64_t *)(v1 + 168));
      std::string::basic_string[abi:ne180100]<0>(v32, "asbd");
      v32[3] = cf;
      memset(&v32[4], 0, 24);
      cf = 0;
      v32[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      v12[0] = (uint64_t)&v14;
      v12[1] = 6;
      AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v13, v12);
      v3 = 384;
      do
      {
        v4 = (void **)((char *)&v14 + v3);
        v5 = *(void (**)(_QWORD, void **, _QWORD, _QWORD))&v13[v3 + 48];
        if (v5)
          v5(0, v4 - 5, 0, 0);
        if (*((char *)v4 - 41) < 0)
          operator delete(*(v4 - 8));
        v3 -= 64;
      }
      while (v3);
      if (cf)
        CFRelease(cf);
      if (SHIBYTE(v11) < 0)
        operator delete(__p[0]);
      std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>((AMCP::DAL::DALSupport **)&v14, *(_DWORD *)(v1 + 176), (uint64_t)v13);
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v13);
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v1 + 136, &v14);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1B5A31410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6997820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6997820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  int v39;

  v2 = a1[46];
  if (v2)
  {
    v39 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v39);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 75));
  v3 = (_QWORD *)a1[74];
  if (v3 == a1 + 71)
  {
    v4 = 4;
    v3 = a1 + 71;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = (_QWORD *)a1[70];
  if (v5 == a1 + 67)
  {
    v6 = 4;
    v5 = a1 + 67;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)a1[66];
  if (v7 == a1 + 63)
  {
    v8 = 4;
    v7 = a1 + 63;
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  v9 = (_QWORD *)a1[62];
  if (v9 == a1 + 59)
  {
    v10 = 4;
    v9 = a1 + 59;
  }
  else
  {
    if (!v9)
      goto LABEL_23;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
  v11 = (_QWORD *)a1[58];
  if (v11 == a1 + 55)
  {
    v12 = 4;
    v11 = a1 + 55;
  }
  else
  {
    if (!v11)
      goto LABEL_28;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
  v13 = (_QWORD *)a1[54];
  if (v13 == a1 + 51)
  {
    v14 = 4;
    v13 = a1 + 51;
  }
  else
  {
    if (!v13)
      goto LABEL_33;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_33:
  v15 = (_QWORD *)a1[50];
  if (v15 == a1 + 47)
  {
    v16 = 4;
    v15 = a1 + 47;
  }
  else
  {
    if (!v15)
      goto LABEL_38;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_38:
  v17 = (_QWORD *)a1[46];
  if (v17 == a1 + 43)
  {
    v18 = 4;
    v17 = a1 + 43;
  }
  else
  {
    if (!v17)
      goto LABEL_43;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_43:
  v19 = (_QWORD *)a1[42];
  if (v19 == a1 + 39)
  {
    v20 = 4;
    v19 = a1 + 39;
  }
  else
  {
    if (!v19)
      goto LABEL_48;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_48:
  v21 = (_QWORD *)a1[38];
  if (v21 == a1 + 35)
  {
    v22 = 4;
    v21 = a1 + 35;
  }
  else
  {
    if (!v21)
      goto LABEL_53;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_53:
  v23 = (_QWORD *)a1[34];
  if (v23 == a1 + 31)
  {
    v24 = 4;
    v23 = a1 + 31;
  }
  else
  {
    if (!v23)
      goto LABEL_58;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_58:
  v25 = (_QWORD *)a1[30];
  if (v25 == a1 + 27)
  {
    v26 = 4;
    v25 = a1 + 27;
  }
  else
  {
    if (!v25)
      goto LABEL_63;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_63:
  v27 = (_QWORD *)a1[26];
  if (v27 == a1 + 23)
  {
    v28 = 4;
    v27 = a1 + 23;
  }
  else
  {
    if (!v27)
      goto LABEL_68;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_68:
  v29 = (_QWORD *)a1[22];
  if (v29 == a1 + 19)
  {
    v30 = 4;
    v29 = a1 + 19;
  }
  else
  {
    if (!v29)
      goto LABEL_73;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_73:
  v31 = (_QWORD *)a1[18];
  if (v31 == a1 + 15)
  {
    v32 = 4;
    v31 = a1 + 15;
  }
  else
  {
    if (!v31)
      goto LABEL_78;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_78:
  v33 = (_QWORD *)a1[14];
  if (v33 == a1 + 11)
  {
    v34 = 4;
    v33 = a1 + 11;
  }
  else
  {
    if (!v33)
      goto LABEL_83;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_83:
  v35 = (_QWORD *)a1[10];
  if (v35 == a1 + 7)
  {
    v36 = 4;
    v35 = a1 + 7;
  }
  else
  {
    if (!v35)
      goto LABEL_88;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_88:
  result = (_QWORD *)a1[6];
  if (result == a1 + 3)
  {
    v38 = 4;
    result = a1 + 3;
  }
  else
  {
    if (!result)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

uint64_t CAStreamRangedDescription::Sorter(CAStreamRangedDescription *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  AudioFormatID v3;
  _BOOL4 v4;
  AudioFormatID mFormatID;
  _BOOL4 v6;
  BOOL v7;
  unsigned int v8;
  char v10;
  BOOL v12;
  BOOL v14;
  UInt32 mBitsPerChannel;
  BOOL v16;
  double v17;
  double v18;
  double mMinimum;
  double mMaximum;
  AudioFormatFlags mFormatFlags;
  double v22;
  double mSampleRate;
  UInt32 mChannelsPerFrame;

  v3 = *((_DWORD *)this + 2);
  v4 = v3 != 0;
  mFormatID = a2->mFormat.mFormatID;
  if (!v3)
  {
    v10 = 0;
LABEL_22:
    v6 = v3 == 1819304813;
    v8 = mFormatID == 1819304813;
    goto LABEL_23;
  }
  v6 = v3 == 1819304813;
  if (mFormatID)
    v7 = v3 == mFormatID;
  else
    v7 = 1;
  if (!v7)
  {
    v12 = mFormatID != 1819304813 && v3 < mFormatID;
    v10 = v3 == 1819304813 || v12;
    goto LABEL_22;
  }
  v8 = mFormatID == 1819304813;
  if (v3 == 1819304813 && mFormatID == 1819304813)
  {
    mFormatFlags = a2->mFormat.mFormatFlags;
    v4 = (mFormatFlags & 0x40) == 0;
    if ((*((_BYTE *)this + 12) & 0x40) != 0)
    {
      v10 = 0;
      v8 = 1;
    }
    else
    {
      v8 = 1;
      if ((mFormatFlags & 0x40) != 0)
        return v8 & 1;
      v10 = 0;
      v4 = 0;
    }
    v6 = 1;
  }
  else
  {
    v10 = 0;
    v4 = 0;
  }
LABEL_23:
  v14 = !v6 || v4 || v8 == 0;
  if (!v14 && (*((_DWORD *)this + 3) & 1) != (a2->mFormat.mFormatFlags & 1))
  {
    v10 = a2->mFormat.mFormatFlags;
    LOBYTE(v4) = 1;
  }
  LOBYTE(v8) = v10;
  if (!v4)
  {
    v8 = *((_DWORD *)this + 8);
    if (!v8
      || (mBitsPerChannel = a2->mFormat.mBitsPerChannel,
          v16 = v8 == mBitsPerChannel,
          LOBYTE(v8) = v8 > mBitsPerChannel,
          !mBitsPerChannel)
      || v16)
    {
      v17 = *((double *)this + 5);
      if (v17 != 0.0)
      {
        v18 = *((double *)this + 6);
        if (v18 != 0.0)
        {
          mMinimum = a2->mSampleRateRange.mMinimum;
          if (mMinimum != 0.0)
          {
            mMaximum = a2->mSampleRateRange.mMaximum;
            if (mMaximum != 0.0)
            {
              if (v18 < mMinimum)
              {
                if (v17 >= mMinimum)
                {
                  LOBYTE(v8) = 1;
                  return v8 & 1;
                }
                goto LABEL_69;
              }
              if (v17 < mMinimum && v18 >= mMinimum && v18 <= mMaximum
                || v17 < mMinimum && v18 > mMaximum
                || v17 != mMinimum
                || v18 != mMaximum)
              {
                if (v17 >= mMinimum)
                {
                  LOBYTE(v8) = v18 != mMaximum || v17 != mMinimum;
                  return v8 & 1;
                }
LABEL_69:
                LOBYTE(v8) = 0;
                return v8 & 1;
              }
            }
          }
        }
      }
      v22 = *(double *)this;
      if (*(double *)this == 0.0
        || (mSampleRate = a2->mFormat.mSampleRate, a2->mFormat.mSampleRate == 0.0)
        || v22 == mSampleRate)
      {
        v8 = *((_DWORD *)this + 7);
        if (v8)
        {
          mChannelsPerFrame = a2->mFormat.mChannelsPerFrame;
          v7 = v8 == mChannelsPerFrame;
          LOBYTE(v8) = v8 < mChannelsPerFrame;
          if (v7 || mChannelsPerFrame == 0)
            LOBYTE(v8) = v10;
        }
        else
        {
          LOBYTE(v8) = v10;
        }
      }
      else
      {
        LOBYTE(v8) = v22 > mSampleRate;
      }
    }
  }
  return v8 & 1;
}

void HALS_IOProcessorFactory::~HALS_IOProcessorFactory(HALS_IOProcessorFactory *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOProcessorFactory::platform_supports_hosted_dsp(HALS_IOProcessorFactory *this)
{
  return 1;
}

uint64_t HALS_IOProcessorFactory::non_dsp_processor_factory_worker(HALS_IOProcessorFactory *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E697F428;
  v5 = v4;
  v1 = v5;
  if (v5 == v4)
  {
    v2 = 4;
    v1 = v4;
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
}

void sub_1B5A31C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOProcessorFactory::dsp_processor_factory_worker(HALS_IOProcessorFactory *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E697F4A8;
  v5 = v4;
  v1 = v5;
  if (v5 == v4)
  {
    v2 = 4;
    v1 = v4;
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = 5;
LABEL_5:
    (*(void (**)(void))(*v1 + 8 * v2))();
  }
}

void sub_1B5A31D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void StaticContainer<`anonymous namespace'::FactoryStaticsObjects>::init_statics(uint64_t a1)
{
  unint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  std::mutex *v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  _BYTE buf[12];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (v2 != -1)
  {
    *(_QWORD *)buf = &v8;
    v9 = buf;
  }
  if ((v3 & 1) == 0)
  {
    v4 = atomic_load(StaticContainerBase::s_statics_initializable);
    if ((v4 & 1) != 0)
    {
      if ((v6 & 1) == 0)
      {
        v7 = *(_QWORD *)(a1 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      }
      std::mutex::unlock(v5);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "StaticContainer.h";
      v11 = 1024;
      v12 = 121;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Not initializable.", buf, 0x12u);
    }
  }
}

void sub_1B5A31EB4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<StaticContainer<`anonymous namespace'::FactoryStaticsObjects>::init_static_container_class(void)::{lambda(void)#1} &&>>()
{
  _QWORD *v0;
  uint64_t v1;
  double result;

  v0 = (_QWORD *)operator new();
  *v0 = &off_1E697F338;
  v0[1] = &off_1E697F3B0;
  v1 = operator new();
  *(_QWORD *)v1 = 850045863;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

void `anonymous namespace'::DSP_IOProcessorFactory::~DSP_IOProcessorFactory(_anonymous_namespace_::DSP_IOProcessorFactory *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t `anonymous namespace'::DSP_IOProcessorFactory::allocate_processor(_anonymous_namespace_::DSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3)
{
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_::DSP_IOProcessorFactory *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  char **v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  int16x8_t v29;
  int32x4_t v30;
  uint32x4_t v31;
  unsigned int v32;
  void *locale;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type size;
  const std::locale::facet *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::locale::__imp *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int16x8_t v48;
  uint64_t v49;
  int16x8_t v50;
  uint64_t v51;
  int16x8_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  std::string::size_type v59;
  std::string::size_type v60;
  BOOL v61;
  std::string *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  const std::locale::facet *v67;
  uint64_t v68;
  double v69;
  int16x8_t v70;
  void **v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  NSObject *v78;
  mach_port_t v79;
  uint64_t *v80;
  std::locale::__imp *v81;
  uint64_t v82;
  _BOOL4 v83;
  void *__dst[2];
  unsigned __int8 v85;
  _QWORD v86[2];
  uint64_t v87;
  _QWORD v88[10];
  char v89;
  uint64_t v90;
  void *__p[2];
  int16x8_t v92;
  uint64_t v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::locale v98;
  __int128 v99;
  _QWORD v100[10];
  char v101;
  _QWORD v102[22];

  v102[19] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a3 + 14);
  v80 = (uint64_t *)((char *)a3 + 112);
  v5 = *((_QWORD *)a3 + 15);
  if (v5 != v4)
  {
    v7 = this;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v4 + v8;
      if (*(_DWORD *)(v4 + v8 + 100) == 4)
      {
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)(v10 + 112) = 0;
      }
      else
      {
        this = (_anonymous_namespace_::DSP_IOProcessorFactory *)HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)v7, (uint64_t)a2, (uint64_t)a3, v9, 1, 0);
        v4 = *((_QWORD *)a3 + 14);
        v5 = *((_QWORD *)a3 + 15);
      }
      ++v9;
      v8 += 128;
    }
    while (v9 < (v5 - v4) >> 7);
  }
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v98, "com.apple.coreaudio", "AMCP");
  v11 = (std::__shared_weak_count *)v99;
  v12 = *(NSObject **)v98.__locale_;
  if ((_QWORD)v99)
  {
    v13 = (unint64_t *)(v99 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v15 = pthread_self();
    v79 = pthread_mach_thread_np(v15);
    if (*((_QWORD *)a3 + 23))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v86);
      v78 = v12;
      if (*((_QWORD *)a3 + 23) == 1)
      {
        v16 = (char *)a3 + 176;
        v17 = (char *)*((_QWORD *)a3 + 22);
        if (!v17)
          goto LABEL_26;
        v18 = (char *)a3 + 176;
        do
        {
          v19 = *((_DWORD *)v17 + 7);
          v20 = v19 >= 9;
          if (v19 >= 9)
            v21 = (char **)v17;
          else
            v21 = (char **)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 == v16 || *((_DWORD *)v18 + 7) >= 0xAu)
LABEL_26:
          v18 = (char *)a3 + 176;
        v83 = v16 != v18;
      }
      else
      {
        v83 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"[hal_dsp] HALS_IODSPInfo::GetDebugDescription() ", 48);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v98, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v98);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"[hal_dsp] Adapted: ", 19);
      if (*((_BYTE *)a3 + 256))
        v24 = "OK";
      else
        v24 = "PENDING/FAILED";
      if (*((_BYTE *)a3 + 256))
        v25 = 2;
      else
        v25 = 14;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)v24, v25);
      if (*((_BYTE *)a3 + 257))
        v26 = " (bypass)";
      else
        v26 = "";
      if (*((_BYTE *)a3 + 257))
        v27 = 9;
      else
        v27 = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)" | Frame Count: ", 16);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" | Isolated Use Case ID: ", 25);
      if (*((_BYTE *)a3 + 212))
      {
        v29.i32[0] = bswap32(*((_DWORD *)a3 + 52));
        *(int8x8_t *)v29.i8 = vzip1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v29.i8);
        v30.i64[0] = 0x1F0000001FLL;
        v30.i64[1] = 0x1F0000001FLL;
        v31.i64[0] = 0x5F0000005FLL;
        v31.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v29.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v31, (uint32x4_t)vsraq_n_s32(v30, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v29.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v29.i8, (int8x8_t)0x2E002E002E002ELL);
        v32 = 4;
        HIBYTE(v99) = 4;
        LODWORD(v98.__locale_) = vmovn_s16(v29).u32[0];
        BYTE4(v98.__locale_) = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v98, "N/A");
        v32 = HIBYTE(v99);
      }
      if ((v32 & 0x80u) == 0)
        locale = &v98;
      else
        locale = v98.__locale_;
      if ((v32 & 0x80u) == 0)
        v34 = v32;
      else
        v34 = v99;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)locale, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" | DSP Offloads: ", 17);
      v35 = *((_QWORD *)a3 + 24);
      if (v35)
        DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)__p, v35);
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "N/A");
      if (v92.i8[7] >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      if (v92.i8[7] >= 0)
        v37 = v92.u8[7];
      else
        v37 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v36, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" | Latency: ", 12);
      if (*((_BYTE *)a3 + 164))
        std::to_string(&v97, *((_DWORD *)a3 + 40));
      else
        std::string::basic_string[abi:ne180100]<0>(&v97, "(missing)");
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v97;
      else
        v38 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      else
        size = v97.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v38, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v40 = std::locale::use_facet((const std::locale *)&v96, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
      std::locale::~locale((std::locale *)&v96);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (v92.i8[7] < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v99) < 0)
        operator delete(v98.__locale_);
      v41 = *((_QWORD *)a3 + 14);
      v42 = *((_QWORD *)a3 + 15);
      if (v41 != v42)
      {
        v43 = 0;
        v44 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
        v81 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
        v82 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        v45 = v41 + 56;
        v46 = MEMORY[0x1E0DE4FB8] + 16;
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"[hal_dsp] ", 10);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v98);
          CA::StreamDescription::AsString((CA::StreamDescription *)&v97, (_QWORD *)v45, v47, v48);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v96, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v95, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
              goto LABEL_81;
            }
          }
          else
          {
            v96 = v97;
          }
          v95 = v97;
LABEL_81:
          v49 = *(_QWORD *)(v45 + 48);
          if (v49)
          {
            v50 = *(int16x8_t *)(v49 + 40);
            *(_OWORD *)__p = *(_OWORD *)(v49 + 24);
            v92 = v50;
            v93 = *(_QWORD *)(v49 + 56);
            CA::StreamDescription::AsString((CA::StreamDescription *)&v94, __p, *(double *)__p, v50);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v96.__r_.__value_.__l.__data_);
            v96 = v94;
            v51 = *(_QWORD *)(v45 + 48);
            v52 = *(int16x8_t *)(v51 + 80);
            *(_OWORD *)__p = *(_OWORD *)(v51 + 64);
            v92 = v52;
            v93 = *(_QWORD *)(v51 + 96);
            CA::StreamDescription::AsString((CA::StreamDescription *)&v94, __p, *(double *)__p, v52);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v95.__r_.__value_.__l.__data_);
            v95 = v94;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)"DSP IO Stream #", 15);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)" | device ID ", 13);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)" | stream index ", 16);
          std::ostream::operator<<();
          v53 = "    ";
          if ((*(_DWORD *)(v45 + 44) - 1) < 2)
            v53 = " (/)";
          if (v83)
            v54 = " (=)";
          else
            v54 = v53;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)v54, 4);
          if (*(_QWORD *)(v45 + 48))
          {
            if (*(_QWORD *)(v45 + 56))
              v55 = " (^)";
            else
              v55 = "    ";
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)v55, 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)" | shared ", 10);
            if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v96;
            else
              v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
            if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
            else
              v57 = v96.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)v56, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)" | local ", 9);
            v58 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
            v60 = v95.__r_.__value_.__l.__size_;
            v59 = v95.__r_.__value_.__r.__words[0];
            v61 = (v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v62 = &v95;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, (uint64_t)" | engine ", 10);
            v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
            v60 = v97.__r_.__value_.__l.__size_;
            v59 = v97.__r_.__value_.__r.__words[0];
            v61 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v62 = &v97;
          }
          if (v61)
            v63 = v59;
          else
            v63 = (uint64_t)v62;
          if (v61)
            v64 = v60;
          else
            v64 = v58;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v99 + 1, v63, v64);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v100);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          v98.__locale_ = v44;
          *(std::locale::__imp **)((char *)&v98.__locale_ + *((_QWORD *)v44 - 3)) = v81;
          *((_QWORD *)&v99 + 1) = v82;
          v100[0] = v46;
          if (v101 < 0)
            operator delete((void *)v100[8]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B5E50598](v102);
          if ((v85 & 0x80u) == 0)
            v65 = __dst;
          else
            v65 = (void **)__dst[0];
          if ((v85 & 0x80u) == 0)
            v66 = v85;
          else
            v66 = (uint64_t)__dst[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)v65, v66);
          std::ios_base::getloc((const std::ios_base *)((char *)&v88[-1] + *(_QWORD *)(v87 - 24)));
          v67 = std::locale::use_facet(&v98, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
          std::locale::~locale(&v98);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v85 < 0)
            operator delete(__dst[0]);
          v68 = v45 + 72;
          v45 += 128;
          ++v43;
        }
        while (v68 != v42);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"[hal_dsp] Client-Facing", 23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)" | format ", 10);
      *(_QWORD *)&v69 = HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v98, v80).n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v98, v69, v70);
      if (v92.i8[7] >= 0)
        v71 = __p;
      else
        v71 = (void **)__p[0];
      if (v92.i8[7] >= 0)
        v72 = v92.u8[7];
      else
        v72 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)v71, v72);
      if (v92.i8[7] < 0)
        operator delete(__p[0]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)" | spatial layout ", 18);
      if (*((_BYTE *)a3 + 248))
        v73 = "specified";
      else
        v73 = "<empty>";
      if (*((_BYTE *)a3 + 248))
        v74 = 9;
      else
        v74 = 7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)v73, v74);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v88);
      v86[0] = *MEMORY[0x1E0DE4F50];
      v75 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)v86 + *(_QWORD *)(v86[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v87 = v75;
      v88[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v89 < 0)
        operator delete((void *)v88[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B5E50598](&v90);
      v12 = v78;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "[hal_dsp] HALS_IODSPInfo::GetDebugDescription(): No DSP assigned to this stream.");
    }
    v76 = __p;
    if (v92.i8[7] < 0)
      v76 = (void **)__p[0];
    LODWORD(v98.__locale_) = 67109891;
    HIDWORD(v98.__locale_) = v79;
    LOWORD(v99) = 2080;
    *(_QWORD *)((char *)&v99 + 2) = "HALS_IOProcessorFactory.cpp";
    WORD5(v99) = 1024;
    HIDWORD(v99) = 356;
    LOWORD(v100[0]) = 2081;
    *(_QWORD *)((char *)v100 + 2) = v76;
    _os_log_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&v98, 0x22u);
    if (v92.i8[7] < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_1B5A32A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v40;

  a20 = *MEMORY[0x1E0DE4F50];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a20 + *(_QWORD *)(a20 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a22 = v40;
  a23 = MEMORY[0x1E0DE4FB8] + 16;
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&a39);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::DSP_IOProcessorFactory::allocate_output_processor(_anonymous_namespace_::DSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3, const HALS_IOStackDescription *a4)
{
  unint64_t v8;

  if (*((_QWORD *)a3 + 15) != *((_QWORD *)a3 + 14))
  {
    v8 = 0;
    do
      HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v8++, 1, a4);
    while (v8 < (uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 7);
  }
  return 0;
}

__n128 `anonymous namespace'::DSP_IOProcessorFactory::local_format@<Q0>(uint64_t a1@<X1>, unsigned int a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  uint64_t v10;

  if (!a3)
    __assert_rtn("local_format", "HALS_IOProcessorFactory.cpp", 389, "engine_index.has_value()");
  if (*(_DWORD *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 120) - v4) >> 7))
    {
      v10 = 0;
      v8 = 0u;
      v9 = 0u;
      goto LABEL_8;
    }
    v5 = v4 + ((unint64_t)a2 << 7);
    v8 = *(__n128 *)(v5 + 56);
    v9 = *(_OWORD *)(v5 + 72);
    v6 = *(_QWORD *)(v5 + 88);
  }
  else
  {
    v8 = *(__n128 *)(a1 + 368);
    v9 = *(_OWORD *)(a1 + 384);
    v6 = *(_QWORD *)(a1 + 400);
  }
  v10 = v6;
LABEL_8:
  result = v8;
  *(__n128 *)a4 = v8;
  *(_OWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  return result;
}

BOOL `anonymous namespace'::DSP_IOProcessorFactory::is_reference_stream(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  HALS_IODevice *v8;
  HALS_Stream *v9;

  if (!a4)
    __assert_rtn("is_reference_stream", "HALS_IOProcessorFactory.cpp", 423, "engine_index.has_value()");
  v6 = *(_QWORD *)(a2 + 112);
  if (a3 >= (*(_QWORD *)(a2 + 120) - v6) >> 7)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3);
  v8 = (HALS_IODevice *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 320))(*(_QWORD *)(v7 + 8));
  return v8
      && (v9 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(v8, *(_BYTE *)(a2 + 8), *(_DWORD *)(v6 + (a3 << 7) + 96))) != 0
      && HALS_Stream::IsReferenceStream(v9);
}

uint64_t `anonymous namespace'::DSP_IOProcessorFactory::io_processor_custom_unit(uint64_t a1, _QWORD *a2, unint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<char>::value_type __x;
  std::vector<char>::value_type v21;

  if (!a4)
    __assert_rtn("io_processor_custom_unit", "HALS_IOProcessorFactory.cpp", 451, "engine_index.has_value()");
  v4 = a2[14];
  v5 = a2 + 14;
  if (a3 >= (a2[15] - v4) >> 7)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v6 = v4 + (a3 << 7);
  v9 = a2[22];
  v7 = a2 + 22;
  v8 = v9;
  if (v9)
  {
    v10 = v7;
    do
    {
      v11 = *(_DWORD *)(v8 + 28);
      v12 = v11 >= 6;
      if (v11 >= 6)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (v12)
        v10 = (_QWORD *)v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v7)
    {
      v14 = v4 + (a3 << 7);
      if (*((_DWORD *)v10 + 7) <= 6u && *(_DWORD *)(v14 + 100) == 0)
      {
        v17 = *(_QWORD *)(v14 + 112);
        v16 = (uint64_t *)(v14 + 112);
        if (!v17)
        {
          v18 = operator new();
          *(_QWORD *)v18 = &off_1E696F4B8;
          *(_QWORD *)(v18 + 8) = v5;
          *(_QWORD *)(v18 + 16) = v6;
          *(_BYTE *)(v18 + 24) = 0;
          *(_OWORD *)(v18 + 56) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 104) = 0u;
          *(_OWORD *)(v18 + 120) = 0u;
          *(_QWORD *)(v18 + 136) = 0;
          __x = 0;
          std::vector<char>::vector((std::vector<char> *)(v18 + 144), 8uLL, &__x);
          **(_DWORD **)(v18 + 144) = 0;
          v21 = 0;
          std::vector<char>::vector((std::vector<char> *)(v18 + 168), 8uLL, &v21);
          **(_DWORD **)(v18 + 168) = 0;
          *v16 = v18;
        }
      }
    }
  }
  return *(_QWORD *)(v6 + 112);
}

void sub_1B5A32F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD **v3;
  void **v4;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 152) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3 == (_QWORD *)(v1 + 32))
  {
    v8 = 4;
    v7 = (_QWORD *)(v1 + 32);
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  MEMORY[0x1B5E50688](v1, 0x10B1C40E88B0623);
  _Unwind_Resume(a1);
}

float `anonymous namespace'::DSP_IOProcessorFactory::set_initial_volume(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!(_BYTE)a5)
    __assert_rtn("set_initial_volume", "HALS_IOProcessorFactory.cpp", 466, "engine_index.has_value()");
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3, a4, a5);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8) + 264))(*(_QWORD *)(v8 + 8), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a3 + 8));
  v10 = *(_QWORD *)(a3 + 112);
  if (a4 >= (*(_QWORD *)(a3 + 120) - v10) >> 7)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + (a4 << 7) + 104) + 112);
  if (v11)
  {
    *(_OWORD *)(v11 + 32) = xmmword_1B5D68D80;
    if (result < 0.0)
      result = 0.0;
    if (result > 1.0)
      result = 1.0;
    v12 = result - *(float *)(v11 + 20);
    *(float *)(v11 + 24) = result;
    *(float *)(v11 + 28) = v12;
  }
  return result;
}

void `anonymous namespace'::DSP_IOProcessorFactory::set_processor(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v5;

  if (!a5)
    __assert_rtn("set_processor", "HALS_IOProcessorFactory.cpp", 482, "engine_index.has_value()");
  v5 = *(_QWORD *)(a2 + 112);
  if (a4 >= (*(_QWORD *)(a2 + 120) - v5) >> 7)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v5 + (a4 << 7) + 104) = a3;
}

uint64_t `anonymous namespace'::DSP_IOProcessorFactory::owning_engine_info(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4;

  if (!a4)
    __assert_rtn("owning_engine_info", "HALS_IOProcessorFactory.cpp", 497, "engine_index.has_value()");
  v4 = *(_QWORD *)(a2 + 112);
  if (a3 >= (*(_QWORD *)(a2 + 120) - v4) >> 7)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v4 + (a3 << 7));
}

uint64_t HALS_IOProcessorFactoryWorker::do_allocate_processor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, HALS_IOStackDescription *a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  int v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  int64x2_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned int v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  AudioStreamBasicDescription v51;
  AudioStreamBasicDescription v52;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3, a4, a5);
  if (*(_QWORD *)(result + 8) && *(_QWORD *)(a2 + 8))
  {
    v12 = result;
    v49 = a2;
    memset(&v52, 0, sizeof(v52));
    (*(void (**)(AudioStreamBasicDescription *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v52, a1, a3, a4, a5);
    v48 = *(_DWORD *)(v12 + 4 * *(unsigned __int8 *)(a3 + 8) + 344);
    v13 = *(_QWORD *)(a2 + 8);
    if (a6)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a6 + 2) - *((_QWORD *)a6 + 1)) >> 3) < 2;
      memset(&v51, 0, sizeof(v51));
      HALS_IOStackDescription::GetFormat(a6, &v51);
      v15 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v51 = v52;
      v14 = 1;
      v15 = v13;
    }
    v51.mSampleRate = (*(double (**)(_QWORD))(**(_QWORD **)(v15 + 8) + 328))(*(_QWORD *)(v15 + 8));
    if (*(_DWORD *)(a2 + 16))
    {
      v16 = (*(double (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 328))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      if (v16 != v52.mSampleRate)
      {
        v18 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a2 + 16));
        if (v18 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(_DWORD *)(a2 + 20);
          *(_DWORD *)buf = 136315650;
          v54 = "HALS_IOProcessorFactory.cpp";
          v55 = 1024;
          v56 = 311;
          v57 = 1024;
          v58 = v19;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOProcessorFactoryWorker::do_allocate_processor: sample rate conversion no longer enables drift correction by default [IOC: %d]", buf, 0x18u);
        }
        HALS_ObjectMap::ReleaseObject(v18, v17);
      }
    }
    v20 = *(unsigned __int8 *)(a3 + 8);
    if (*(_BYTE *)(a3 + 8))
      v21 = 1;
    else
      v21 = v14;
    v47 = v21;
    v46 = v12 != v13 && *(_BYTE *)(v12 + 297) != 0;
    v45 = *(_DWORD *)(v12 + 300);
    v22 = *(_DWORD *)(v12 + 304);
    if (*(_BYTE *)(a3 + 68))
      v23 = a3 + 72;
    else
      v23 = 0;
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a3, a4, a5);
    v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a3, a4, a5);
    v25 = operator new();
    HALS_IOProcessor::HALS_IOProcessor(v25, v20 != 0, v47, (__int128 *)&v51, &v52, v46, v45, v22, v23, v48, v24, v44);
    v26 = (uint64_t **)(v12 + 24 * v20 + 696);
    v28 = v26[1];
    v27 = (unint64_t)v26[2];
    if ((unint64_t)v28 >= v27)
    {
      v30 = *v26;
      v31 = v28 - *v26;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v33 = v27 - (_QWORD)v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v35 = (char *)operator new(8 * v34);
      }
      else
      {
        v35 = 0;
      }
      v36 = (uint64_t *)&v35[8 * v31];
      v37 = &v35[8 * v34];
      *v36 = v25;
      v29 = v36 + 1;
      if (v28 == v30)
      {
        v39 = vdupq_n_s64((unint64_t)v28);
      }
      else
      {
        do
        {
          v38 = *--v28;
          *v28 = 0;
          *--v36 = v38;
        }
        while (v28 != v30);
        v39 = *(int64x2_t *)v26;
      }
      *v26 = v36;
      v26[1] = v29;
      v26[2] = (uint64_t *)v37;
      v40 = (_QWORD *)v39.i64[1];
      v41 = (_QWORD *)v39.i64[0];
      while (v40 != v41)
      {
        v43 = *--v40;
        v42 = v43;
        *v40 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v28 = v25;
      v29 = v28 + 1;
    }
    v26[1] = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a3, v25, a4, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v49, a3, a4, a5);
  }
  return result;
}

void sub_1B5A33534(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::NonDSP_IOProcessorFactory::~NonDSP_IOProcessorFactory(_anonymous_namespace_::NonDSP_IOProcessorFactory *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t `anonymous namespace'::NonDSP_IOProcessorFactory::allocate_processor(_anonymous_namespace_::NonDSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3)
{
  HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0, 0, 0);
  return 0;
}

uint64_t `anonymous namespace'::NonDSP_IOProcessorFactory::allocate_output_processor(_anonymous_namespace_::NonDSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3, const HALS_IOStackDescription *a4)
{
  HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0, 0, a4);
  return 0;
}

double `anonymous namespace'::NonDSP_IOProcessorFactory::local_format@<D0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X8>)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if (a2)
    __assert_rtn("local_format", "HALS_IOProcessorFactory.cpp", 382, "not engine_index.has_value()");
  if (*(_DWORD *)(a1 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v7, (uint64_t *)(a1 + 112));
  }
  else
  {
    v4 = *(_OWORD *)(a1 + 384);
    v7 = *(_OWORD *)(a1 + 368);
    v8 = v4;
    v9 = *(_QWORD *)(a1 + 400);
  }
  result = *(double *)&v7;
  v6 = v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v9;
  return result;
}

BOOL `anonymous namespace'::NonDSP_IOProcessorFactory::is_reference_stream(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  HALS_ObjectMap *DeviceIDFromEngineID;
  HALS_IODevice *v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  HALS_Stream *v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  _BOOL8 IsReferenceStream;

  if (a4)
    __assert_rtn("is_reference_stream", "HALS_IOProcessorFactory.cpp", 396, "not engine_index.has_value()");
  v5 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 8);
  if (!v5)
    return 0;
  DeviceIDFromEngineID = (HALS_ObjectMap *)HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v5 + 16));
  v7 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID(DeviceIDFromEngineID);
  v9 = v7;
  if (v7)
  {
    v10 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(v7, *(_BYTE *)(a2 + 8), *(_DWORD *)(a2 + 12));
    v12 = v10;
    if (v10)
      IsReferenceStream = HALS_Stream::IsReferenceStream(v10);
    else
      IsReferenceStream = 0;
    HALS_ObjectMap::ReleaseObject(v12, v11);
  }
  else
  {
    IsReferenceStream = 0;
  }
  HALS_ObjectMap::ReleaseObject(v9, v8);
  return IsReferenceStream;
}

void sub_1B5A33730(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::NonDSP_IOProcessorFactory::io_processor_custom_unit(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
    __assert_rtn("io_processor_custom_unit", "HALS_IOProcessorFactory.cpp", 444, "not engine_index.has_value()");
  return 0;
}

float `anonymous namespace'::NonDSP_IOProcessorFactory::set_initial_volume(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  float result;
  uint64_t v9;
  float v10;

  if ((_BYTE)a5)
    __assert_rtn("set_initial_volume", "HALS_IOProcessorFactory.cpp", 458, "not engine_index.has_value()");
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3, a4, a5);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a3 + 8));
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 112);
  if (v9)
  {
    *(_OWORD *)(v9 + 32) = xmmword_1B5D68D80;
    if (result < 0.0)
      result = 0.0;
    if (result > 1.0)
      result = 1.0;
    v10 = result - *(float *)(v9 + 20);
    *(float *)(v9 + 24) = result;
    *(float *)(v9 + 28) = v10;
  }
  return result;
}

void `anonymous namespace'::NonDSP_IOProcessorFactory::set_processor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
    __assert_rtn("set_processor", "HALS_IOProcessorFactory.cpp", 475, "not engine_index.has_value()");
  *(_QWORD *)(a2 + 96) = a3;
}

uint64_t `anonymous namespace'::NonDSP_IOProcessorFactory::owning_engine_info(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  BOOL v5;

  if (a4)
    __assert_rtn("owning_engine_info", "HALS_IOProcessorFactory.cpp", 490, "not engine_index.has_value()");
  if (!*(_DWORD *)(a2 + 108)
    || ((v4 = *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    v4 = a2 + 408;
  }
  return *(_QWORD *)v4;
}

void std::__function::__func<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697F4A8;
  return result;
}

void std::__function::__func<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697F4A8;
}

uint64_t std::__function::__func<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_114FactoryStatics24dsp_io_processor_factoryEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697F428;
  return result;
}

void std::__function::__func<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697F428;
}

uint64_t std::__function::__func<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_114FactoryStatics28non_dsp_io_processor_factoryEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t HALS_IOProcessorFactory::free_input_processor(HALS_IOProcessorFactory *this, HALS_IOStreamInfo *a2)
{
  AMCP::Log::Scope_Registry *v3;
  _QWORD *v4;
  _QWORD *v5;
  HALS_IOProcessor *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  NSObject **v21;
  _BYTE v22[10];
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v22;
    v8 = *v21;
    if (*(_QWORD *)v22)
    {
      v9 = (unint64_t *)(*(_QWORD *)v22 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = 560947818;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      LODWORD(v21) = 67109634;
      HIDWORD(v21) = v13;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "HALS_IOProcessorFactory.cpp";
      v23 = 1024;
      v24 = 163;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_input_processor: trying to free input processor from output stream info!", (uint8_t *)&v21, 0x18u);
    }
    return v11;
  }
  HALS_IOProcessorFactory::free_processor(this, (HALS_IOStreamInfo *)1);
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  v5 = (_QWORD *)*((_QWORD *)this + 15);
  if (v4 == v5)
    return 0;
  while (1)
  {
    v6 = (HALS_IOProcessor *)v4[13];
    if (v6)
      break;
LABEL_8:
    v4 += 16;
    if (v4 == v5)
      return 0;
  }
  if (*((_BYTE *)v6 + 8))
  {
    HALS_IOProcessorList::DestroyProcessor((_QWORD *)(*v4 + 24 * *((unsigned __int8 *)this + 8) + 696), v6);
    v4[13] = 0;
    v3 = (AMCP::Log::Scope_Registry *)v4[14];
    if (v3)
      v3 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v3 + 8))(v3);
    v4[14] = 0;
    goto LABEL_8;
  }
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
  v14 = *(std::__shared_weak_count **)v22;
  v15 = *v21;
  if (*(_QWORD *)v22)
  {
    v16 = (unint64_t *)(*(_QWORD *)v22 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v19 = pthread_self();
    v20 = pthread_mach_thread_np(v19);
    LODWORD(v21) = 67110146;
    HIDWORD(v21) = v20;
    *(_WORD *)v22 = 2080;
    *(_QWORD *)&v22[2] = "HALS_IOProcessorFactory.cpp";
    v23 = 1024;
    v24 = 213;
    v25 = 2082;
    v26 = "input";
    v27 = 2082;
    v28 = "output";
    _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_processor_for_dsp: trying to free %{public}s processor but it is for %{public}s", (uint8_t *)&v21, 0x2Cu);
  }
  return 0;
}

void HALS_IOProcessorFactory::free_processor(HALS_IOProcessorFactory *this, HALS_IOStreamInfo *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  const char *v11;
  const char *v12;
  _QWORD *v14;
  BOOL v15;
  NSObject **v16;
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v2 = (int)a2;
  v24 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)*((_QWORD *)this + 12);
  if (v3)
  {
    v4 = v3[8];
    if ((v3[8] != 0) == v2)
    {
      if (!*((_DWORD *)this + 27)
        || ((v14 = (_QWORD *)*((_QWORD *)this + 14), *((_QWORD **)this + 15) != v14) ? (v15 = v14 == 0) : (v15 = 1),
            v15))
      {
        v14 = (_QWORD *)((char *)this + 408);
      }
      HALS_IOProcessorList::DestroyProcessor((_QWORD *)(*v14 + 24 * *((unsigned __int8 *)this + 8) + 696), (HALS_IOProcessor *)v3);
      *((_QWORD *)this + 12) = 0;
    }
    else
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
      v5 = *(std::__shared_weak_count **)v17;
      v6 = *v16;
      if (*(_QWORD *)v17)
      {
        v7 = (unint64_t *)(*(_QWORD *)v17 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        v11 = "output";
        LODWORD(v16) = 67110146;
        HIDWORD(v16) = v10;
        *(_WORD *)v17 = 2080;
        *(_QWORD *)&v17[2] = "HALS_IOProcessorFactory.cpp";
        if (v2)
          v12 = "input";
        else
          v12 = "output";
        v18 = 1024;
        v19 = 193;
        v20 = 2082;
        if (v4)
          v11 = "input";
        v21 = v12;
        v22 = 2082;
        v23 = v11;
        _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_processor: trying to free %{public}s processor but it is for %{public}s", (uint8_t *)&v16, 0x2Cu);
      }
    }
  }
}

uint64_t HALS_IOProcessorFactory::free_output_processor(HALS_IOProcessorFactory *this, HALS_IOStreamInfo *a2)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  NSObject **v10;
  _BYTE v11[10];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v2 = *(std::__shared_weak_count **)v11;
    v3 = *v10;
    if (*(_QWORD *)v11)
    {
      v4 = (unint64_t *)(*(_QWORD *)v11 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v6 = 560947818;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      LODWORD(v10) = 67109634;
      HIDWORD(v10) = v8;
      *(_WORD *)v11 = 2080;
      *(_QWORD *)&v11[2] = "HALS_IOProcessorFactory.cpp";
      v12 = 1024;
      v13 = 177;
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContextDescription::AllocateProcessors: trying to free output processor from input stream info!", (uint8_t *)&v10, 0x18u);
    }
  }
  else
  {
    HALS_IOProcessorFactory::free_processor(this, 0);
    return 0;
  }
  return v6;
}

uint64_t HALS_DefaultDeviceManager::FilterSettings(HALS_DefaultDeviceManager *this)
{
  uint64_t v2;
  char v3;
  const void *v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  uint64_t i;
  const void *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t j;
  const void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  HALB_Mutex *v22;
  int v23;
  _BYTE v24[8];
  _BYTE v25[288];
  int v26;
  char v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v22 = this;
  v2 = 0;
  v3 = 0;
  v23 = HALB_Mutex::Lock(this);
  do
  {
    v4 = *(const void **)((char *)this + v2 + 120);
    if (v4)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v21, v4);
      v21[0] = &off_1E69A0F60;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v21);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v21);
      if (*((_BYTE *)this + 99) && v26 == 1634300528
        || (v27 ? (v5 = v26 == 1651275109) : (v5 = 0),
            v5 ? (v6 = *((_BYTE *)this + 100) == 0) : (v6 = 1),
            v6 ? (v7 = v28 == 0) : (v7 = 0),
            !v7))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v2 + 112, 0);
        *(_DWORD *)((char *)this + v2 + 128) = 0;
        v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
    v2 += 24;
  }
  while (v2 != 72);
  for (i = 0; i != 72; i += 24)
  {
    v9 = *(const void **)((char *)this + i + 224);
    if (v9)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v20, v9);
      v20[0] = &off_1E69A0F60;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v20);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v20);
      if (*((_BYTE *)this + 99) && v26 == 1634300528
        || (v27 ? (v10 = v26 == 1651275109) : (v10 = 0),
            v10 ? (v11 = *((_BYTE *)this + 100) == 0) : (v11 = 1),
            v11 ? (v12 = v28 == 0) : (v12 = 0),
            !v12))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + i + 216, 0);
        *(_DWORD *)((char *)this + i + 232) = 0;
        v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
  }
  for (j = 0; j != 72; j += 24)
  {
    v14 = *(const void **)((char *)this + j + 328);
    if (v14)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v19, v14);
      v19[0] = &off_1E69A0F60;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
      if (*((_BYTE *)this + 99) && v26 == 1634300528
        || (v27 ? (v15 = v26 == 1651275109) : (v15 = 0),
            v15 ? (v16 = *((_BYTE *)this + 100) == 0) : (v16 = 1),
            v16 ? (v17 = v28 == 0) : (v17 = 0),
            !v17))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + j + 320, 0);
        *(_DWORD *)((char *)this + j + 336) = 0;
        v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
  }
  HALB_Mutex::Locker::~Locker(&v22);
  return v3 & 1;
}

void sub_1B5A34204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, HALB_Mutex *a15)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  HALB_Mutex::Locker::~Locker(&a15);
  _Unwind_Resume(a1);
}

uint64_t HALS_DefaultDeviceManager::UpdateDefaultDevice(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t PreferredDefaultDevice;
  uint64_t v11;
  unsigned int NumberDevices;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  unint64_t v15;
  const char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v27;
  int v28;
  BOOL v29;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  _BOOL4 v56;
  char *v57;
  CFTypeRef *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int64x2_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  pthread_mutex_t *v89;
  const char *v90;
  NSObject *v91;
  pthread_mutex_t *v92;
  uint8x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  const char *v106;
  const char *v107;
  DeviceInfo *v108;
  unsigned int *v109;
  DeviceInfo *v110;
  DeviceInfo *v111;
  unsigned int v112;
  int v113;
  NSObject *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  int v118;
  NSObject *v119;
  unsigned int v120;
  int v121;
  unsigned int v123;
  int v124;
  NSObject *v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _DWORD *v132;
  std::vector<unsigned int>::pointer v134;
  char *v135;
  _BYTE v136[5];
  char *v137;
  char *v138;
  unint64_t v139;
  _BYTE v140[5];
  std::vector<unsigned int> v141;
  unsigned int v142;
  uint64_t v143[2];
  uint64_t v144;
  std::__shared_weak_count *v145;
  char *v146;
  __int128 v147;
  char *v148;
  unint64_t *v149;
  char *v150;
  int64x2_t v151;
  char *v152;
  unint64_t *v153;
  _BYTE buf[12];
  __int16 v155;
  _QWORD v156[42];

  *(_QWORD *)((char *)&v156[39] + 2) = *MEMORY[0x1E0C80C00];
  v7 = a4 >> 8;
  v8 = HIWORD(a4);
  v9 = HIBYTE(a4);
  v136[0] = HIBYTE(a4);
  v136[1] = BYTE2(a4);
  v136[2] = BYTE1(a4);
  v136[3] = a4;
  v136[4] = 0;
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1649;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v136;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice:        '%{public}s' --->>>", buf, 0x1Cu);
  }
  PreferredDefaultDevice = HALS_DefaultDeviceManager::FindPreferredDefaultDevice(a1, a2, a3, a4);
  if ((_DWORD)PreferredDefaultDevice)
    goto LABEL_241;
  v140[0] = v9;
  v140[1] = v8;
  v140[2] = v7;
  v140[3] = a4;
  v140[4] = 0;
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1715;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v140;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' --->>>", buf, 0x1Cu);
  }
  v143[0] = 0;
  v143[1] = 0;
  HALS_System::GetInstance(&v144, 0, v143);
  v11 = v144;
  if (v144)
  {
    NumberDevices = HALS_System::GetNumberDevices(v144, 2, 0, 0);
    v142 = NumberDevices;
    std::vector<unsigned int>::vector(&v141, NumberDevices);
    HALS_System::GetDeviceList(v11, NumberDevices, &v142, (uint64_t)v141.__begin_, 2, 0, 0);
    v137 = 0;
    v138 = 0;
    v139 = 0;
    begin = v141.__begin_;
    end = v141.__end_;
    if (v141.__begin_ != v141.__end_)
    {
      if (a4 == 1682533920)
        v15 = 9;
      else
        v15 = 10;
      if (a4 == 1682533920)
        v16 = (const char *)&DeviceInfo::kInputTransportOrder;
      else
        v16 = "imdhtrpd icpnuhtbvae4931 bsusubmeulbntlbotuabolg";
      v134 = v141.__end_;
      while (1)
      {
        DeviceInfo::DeviceInfo((DeviceInfo *)buf, (HALS_ObjectMap *)*begin);
        if ((int)a4 > 1934587251)
        {
          if (a4 == 1934587252)
          {
            if (!LOBYTE(v156[38]))
              goto LABEL_138;
          }
          else if (a4 != 1936224868 || !BYTE1(v156[38]))
          {
            goto LABEL_138;
          }
        }
        else if (a4 == 1682533920)
        {
          if (!BYTE6(v156[37]))
            goto LABEL_138;
        }
        else if (a4 != 1682929012 || !HIBYTE(v156[37]))
        {
          goto LABEL_138;
        }
        v17 = v137;
        v18 = v138;
        v19 = v138 - v137;
        if (v138 == v137)
        {
          v21 = (unint64_t)v137;
          goto LABEL_92;
        }
        v20 = 0x8F9C18F9C18F9C19 * (v19 >> 3);
        v21 = (unint64_t)v137;
        do
        {
          v22 = v20 >> 1;
          v23 = v21 + 328 * (v20 >> 1);
          v25 = *(_QWORD *)(v23 + 280);
          v24 = *(_QWORD *)(v23 + 288);
          v27 = v25 == *(_QWORD *)((char *)&v156[33] + 2) && v24 == *(_QWORD *)((char *)&v156[34] + 2);
          v28 = *(_DWORD *)(v23 + 308);
          if (a4 == 1682533920)
          {
            v29 = v28 <= 2 && *(_DWORD *)((char *)&v156[36] + 6) <= 2;
            if (v29 && !v27)
            {
LABEL_52:
              v31 = v24 > *(_QWORD *)((char *)&v156[34] + 2) && v25 == *(_QWORD *)((char *)&v156[33] + 2);
              v32 = v25 > *(_QWORD *)((char *)&v156[33] + 2) || v31;
              goto LABEL_86;
            }
          }
          if (a4 == 1934587252 || a4 == 1682929012)
          {
            if (*(int *)(v21 + 328 * v22 + 312) > 3 || *(_DWORD *)((char *)&v156[37] + 2) > 3)
              v27 = 1;
            if (!v27)
              goto LABEL_52;
LABEL_59:
            if (a4 == 1934587252 || a4 == 1682929012)
            {
              v33 = *(_DWORD *)(v21 + 328 * v22 + 312);
              v34 = v33 < *(_DWORD *)((char *)&v156[37] + 2);
              if (v33 != *(_DWORD *)((char *)&v156[37] + 2))
              {
LABEL_83:
                v32 = v34;
                goto LABEL_86;
              }
            }
            goto LABEL_62;
          }
          if (a4 != 1682533920)
            goto LABEL_59;
          v34 = v28 < *(_DWORD *)((char *)&v156[36] + 6);
          if (v28 != *(_DWORD *)((char *)&v156[36] + 6))
            goto LABEL_83;
LABEL_62:
          v35 = 0;
          v36 = *(_DWORD *)(v21 + 328 * v22 + 296);
          do
          {
            v37 = v35;
            v38 = *(_DWORD *)&v16[4 * v35++];
          }
          while (v38 != v36 && v35 < v15);
          v40 = 0;
          do
          {
            v41 = v40;
            v42 = *(_DWORD *)&v16[4 * v40++];
          }
          while (v42 != *(_DWORD *)((char *)&v156[35] + 2) && v40 < v15);
          if (v42 != *(_DWORD *)((char *)&v156[35] + 2))
            v41 = -1;
          v32 = v37 < v41 && v38 == v36;
LABEL_86:
          v45 = v23 + 328;
          v20 += ~v22;
          if (v32)
            v21 = v45;
          else
            v20 = v22;
        }
        while (v20);
        v17 = v137;
LABEL_92:
        v46 = v21 - (_QWORD)v17;
        v47 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v21 - (_QWORD)v17) >> 3);
        if ((unint64_t)v138 >= v139)
        {
          v59 = 0x8F9C18F9C18F9C19 * (v19 >> 3) + 1;
          if (v59 > 0xC7CE0C7CE0C7CELL)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v60 = v17;
          if (0x1F3831F3831F3832 * ((uint64_t)(v139 - (_QWORD)v17) >> 3) > v59)
            v59 = 0x1F3831F3831F3832 * ((uint64_t)(v139 - (_QWORD)v17) >> 3);
          if (0x8F9C18F9C18F9C19 * ((uint64_t)(v139 - (_QWORD)v17) >> 3) >= 0x63E7063E7063E7)
            v61 = 0xC7CE0C7CE0C7CELL;
          else
            v61 = v59;
          v149 = &v139;
          if (v61)
            v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(v61);
          else
            v62 = 0;
          v64 = v47;
          v65 = (_DWORD *)(v61 + 328 * v47);
          v146 = (char *)v61;
          *(_QWORD *)&v147 = v65;
          *((_QWORD *)&v147 + 1) = v65;
          v148 = (char *)(v61 + 328 * v62);
          if (v64 == v62)
          {
            if (v46 < 1)
            {
              if ((char *)v21 == v60)
                v67 = 1;
              else
                v67 = 2 * v64;
              v153 = v149;
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(v67);
              v70 = &v68[328 * (v67 >> 2)];
              v71 = v147;
              if (*((_QWORD *)&v147 + 1) == (_QWORD)v147)
              {
                v74 = vdupq_n_s64(v147);
                v72 = &v68[328 * (v67 >> 2)];
              }
              else
              {
                v129 = v69;
                v131 = v68;
                v72 = &v70[*((_QWORD *)&v147 + 1) - v147];
                v73 = v70;
                do
                {
                  *(_DWORD *)v73 = *(_DWORD *)v71;
                  *((_QWORD *)v73 + 2) = *(_QWORD *)(v71 + 16);
                  *(_QWORD *)(v71 + 16) = 0;
                  *((_QWORD *)v73 + 1) = &off_1E69A0F60;
                  memcpy(v73 + 24, (const void *)(v71 + 24), 0x12AuLL);
                  v73 += 328;
                  v71 += 328;
                }
                while (v73 != v72);
                v74 = (int64x2_t)v147;
                v68 = v131;
                v69 = v129;
              }
              v75 = v148;
              v150 = v146;
              v146 = v68;
              *(_QWORD *)&v147 = v70;
              v151 = v74;
              *((_QWORD *)&v147 + 1) = v72;
              v148 = &v68[328 * v69];
              v152 = v75;
              std::__split_buffer<DeviceInfo>::~__split_buffer((uint64_t)&v150);
              v65 = (_DWORD *)*((_QWORD *)&v147 + 1);
            }
            else
            {
              v66 = v64 + 2;
              if (v64 >= -1)
                v66 = v64 + 1;
              v65 -= 82 * (v66 >> 1);
              *(_QWORD *)&v147 = v65;
              *((_QWORD *)&v147 + 1) = v65;
            }
          }
          *v65 = *(_DWORD *)buf;
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v65 + 2), *(CFTypeRef *)((char *)v156 + 2));
          *((_QWORD *)v65 + 1) = &off_1E69A0F60;
          memcpy(v65 + 6, (char *)&v156[1] + 2, 0x12AuLL);
          v76 = (char *)v147;
          v77 = *((_QWORD *)&v147 + 1) + 328;
          *((_QWORD *)&v147 + 1) += 328;
          v78 = v137;
          if (v137 != (char *)v21)
          {
            v79 = 0;
            do
            {
              *(_DWORD *)&v76[v79 - 328] = *(_DWORD *)(v21 + v79 - 328);
              v80 = (_QWORD *)(v21 + v79 - 312);
              *(_QWORD *)&v76[v79 - 312] = *v80;
              *v80 = 0;
              *(_QWORD *)&v76[v79 - 320] = &off_1E69A0F60;
              memcpy(&v76[v79 - 304], (const void *)(v21 + v79 - 304), 0x12AuLL);
              v79 -= 328;
            }
            while ((char *)(v21 + v79) != v78);
            v76 += v79;
            v77 = *((_QWORD *)&v147 + 1);
          }
          end = v134;
          *(_QWORD *)&v147 = v76;
          v81 = v138;
          if (v138 != (char *)v21)
          {
            do
            {
              *(_DWORD *)v77 = *(_DWORD *)v21;
              *(_QWORD *)(v77 + 16) = *(_QWORD *)(v21 + 16);
              *(_QWORD *)(v21 + 16) = 0;
              *(_QWORD *)(v77 + 8) = &off_1E69A0F60;
              memcpy((void *)(v77 + 24), (const void *)(v21 + 24), 0x12AuLL);
              v77 += 328;
              v21 += 328;
            }
            while ((char *)v21 != v81);
            v76 = (char *)v147;
            v21 = (unint64_t)v138;
          }
          v82 = v137;
          v83 = (char *)v139;
          v137 = v76;
          v138 = (char *)v77;
          v139 = (unint64_t)v148;
          *((_QWORD *)&v147 + 1) = v21;
          v148 = v83;
          v146 = v82;
          *(_QWORD *)&v147 = v82;
          std::__split_buffer<DeviceInfo>::~__split_buffer((uint64_t)&v146);
        }
        else if ((char *)v21 == v138)
        {
          *(_DWORD *)v138 = *(_DWORD *)buf;
          v63 = &v17[8 * ((uint64_t)(v21 - (_QWORD)v17) >> 3)];
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v63 + 8), *(CFTypeRef *)((char *)v156 + 2));
          *((_QWORD *)v63 + 1) = &off_1E69A0F60;
          memcpy(v63 + 24, (char *)&v156[1] + 2, 0x12AuLL);
          v138 = v18 + 328;
        }
        else
        {
          v128 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v21 - (_QWORD)v17) >> 3);
          v130 = v17;
          v48 = v138 - 328;
          v49 = v138;
          v50 = v138 - 328;
          if ((unint64_t)v138 >= 0x148)
          {
            do
            {
              *(_DWORD *)v49 = *(_DWORD *)v50;
              *((_QWORD *)v49 + 2) = *((_QWORD *)v50 + 2);
              *((_QWORD *)v50 + 2) = 0;
              *((_QWORD *)v49 + 1) = &off_1E69A0F60;
              memcpy(v49 + 24, v50 + 24, 0x12AuLL);
              v49 += 328;
              v50 += 328;
            }
            while (v50 < v18);
          }
          v138 = v49;
          if (v18 != (char *)(v21 + 328))
          {
            v51 = 0;
            do
            {
              *(_DWORD *)&v18[v51 - 328] = *(_DWORD *)&v48[v51 - 328];
              v52 = (uint64_t *)&v18[v51 - 312];
              v53 = (uint64_t *)&v48[v51 - 312];
              v54 = *v52;
              *v52 = *v53;
              *v53 = v54;
              memcpy(&v18[v51 - 304], &v48[v51 - 304], 0x12AuLL);
              v51 -= 328;
            }
            while (-8 * ((uint64_t)&v18[-v21 - 328] >> 3) != v51);
          }
          v56 = v21 <= (unint64_t)buf && v138 > buf;
          *(_DWORD *)v21 = *(_DWORD *)buf;
          v57 = &v130[328 * v128];
          v58 = (CFTypeRef *)&buf[328 * v56];
          OS::CF::UntypedObject::operator=((uint64_t)(v57 + 8), v58[2]);
          memcpy(v57 + 24, v58 + 3, 0x12AuLL);
          end = v134;
        }
LABEL_138:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[8]);
        if (++begin == end)
        {
          begin = v141.__begin_;
          break;
        }
      }
    }
    if (begin)
    {
      v141.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
  }
  v84 = v145;
  if (v145)
  {
    p_shared_owners = (unint64_t *)&v145->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (*(_BYTE *)(a1 + 97))
  {
    pthread_mutex_lock(&DeviceInfo::DumpHeap(std::vector<DeviceInfo> const&)::sMutex);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
      v155 = 1024;
      LODWORD(v156[0]) = 409;
      WORD2(v156[0]) = 2048;
      *(_QWORD *)((char *)v156 + 6) = 0x8F9C18F9C18F9C19 * ((v138 - v137) >> 3);
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Heap has %lu items", buf, 0x1Cu);
    }
    v87 = v137;
    v135 = v138;
    if (v137 != v138)
    {
      v88 = 0;
      v89 = (pthread_mutex_t *)&DeviceInfo::DumpDeviceInfo(DeviceInfo const&)::sMutex;
      v90 = "";
      v132 = v137 + 24;
      v91 = MEMORY[0x1E0C81028];
      do
      {
        pthread_mutex_lock(v89);
        v92 = v89;
        v93.i32[0] = *(_DWORD *)&v87[v88 + 296];
        v94 = (int16x8_t)vmovl_u8(v93);
        *(int16x4_t *)v94.i8 = vrev64_s16(*(int16x4_t *)v94.i8);
        *(int8x8_t *)v94.i8 = vmovn_s16(v94);
        LODWORD(v141.__begin_) = v94.i32[0];
        BYTE4(v141.__begin_) = 0;
        v94.i32[0] = *(_DWORD *)&v87[v88 + 300];
        v95 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v94.i8);
        *(int16x4_t *)v95.i8 = vrev64_s16(*(int16x4_t *)v95.i8);
        *(int8x8_t *)v95.i8 = vmovn_s16(v95);
        LODWORD(v144) = v95.i32[0];
        BYTE4(v144) = 0;
        v95.i32[0] = *(_DWORD *)&v87[v88 + 304];
        v96 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v95.i8);
        *(int16x4_t *)v96.i8 = vrev64_s16(*(int16x4_t *)v96.i8);
        LODWORD(v143[0]) = vmovn_s16(v96).u32[0];
        BYTE4(v143[0]) = 0;
        v97 = *(unsigned int *)&v87[v88 + 308];
        v98 = (char *)v90;
        if (v97 <= 5)
          v98 = off_1E697F548[v97];
        v99 = *(unsigned int *)&v87[v88 + 312];
        v100 = v90;
        if (v99 <= 6)
          v90 = off_1E697F578[v99];
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          v101 = *(unsigned int *)&v87[v88];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 487;
          WORD2(v156[0]) = 2048;
          *(_QWORD *)((char *)v156 + 6) = v101;
          HIWORD(v156[1]) = 2082;
          v156[2] = &v132[v88 / 4];
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d    %lu: '%{public}s'", buf, 0x26u);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          v103 = *(_QWORD *)&v87[v88 + 280];
          v102 = *(_QWORD *)&v87[v88 + 288];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 488;
          WORD2(v156[0]) = 2048;
          *(_QWORD *)((char *)v156 + 6) = v103;
          HIWORD(v156[1]) = 2048;
          v156[2] = v102;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Arrival Time:       (%llu, %llu)", buf, 0x26u);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 489;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = &v141;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Transport:          '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 490;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = &v144;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Input Data Source:  '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 491;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v143;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Output Data Source: '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 492;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v98;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Input Kind:          %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 493;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v90;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Output Kind:         %{public}s", buf, 0x1Cu);
        }
        v89 = v92;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          if (v87[v88 + 316])
            v104 = "yes";
          else
            v104 = "no";
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 494;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v104;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be Input:        %{public}s", buf, 0x1Cu);
        }
        v90 = v100;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          if (v87[v88 + 317])
            v105 = "yes";
          else
            v105 = "no";
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 495;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v105;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be Output:       %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          if (v87[v88 + 318])
            v106 = "yes";
          else
            v106 = "no";
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 496;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v106;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be System:       %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          if (v87[v88 + 321])
            v107 = "no";
          else
            v107 = "yes";
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 497;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v107;
          _os_log_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Allows Auto-Route:   %{public}s", buf, 0x1Cu);
        }
        pthread_mutex_unlock(v92);
        v88 += 328;
      }
      while (&v87[v88] != v135);
    }
    pthread_mutex_unlock(&DeviceInfo::DumpHeap(std::vector<DeviceInfo> const&)::sMutex);
  }
  v108 = (DeviceInfo *)v137;
  v109 = (unsigned int *)v138;
  if (v137 == v138)
    goto LABEL_232;
  v110 = (DeviceInfo *)v137;
  while (1)
  {
    if (!DeviceInfo::CanBeDefault(v110, a4))
      goto LABEL_201;
    if (a4 != 1682533920)
      break;
    if (*((int *)v110 + 77) <= 2)
    {
      v115 = *((_DWORD *)v110 + 75);
      LOBYTE(v141.__begin_) = HIBYTE(v115);
      BYTE1(v141.__begin_) = BYTE2(v115);
      BYTE2(v141.__begin_) = BYTE1(v115);
      *(_WORD *)((char *)&v141.__begin_ + 3) = v115;
      if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v116 = *(_DWORD *)v110;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
        v155 = 1024;
        LODWORD(v156[0]) = 1737;
        WORD2(v156[0]) = 2082;
        *(_QWORD *)((char *)v156 + 6) = v140;
        HIWORD(v156[1]) = 1024;
        LODWORD(v156[2]) = v116;
        WORD2(v156[2]) = 2082;
        *(_QWORD *)((char *)&v156[2] + 6) = (char *)v110 + 24;
        HIWORD(v156[3]) = 2082;
        v156[4] = &v141;
        v114 = MEMORY[0x1E0C81028];
        goto LABEL_217;
      }
      goto LABEL_218;
    }
LABEL_201:
    v110 = (DeviceInfo *)((char *)v110 + 328);
    if (v110 == (DeviceInfo *)v109)
      goto LABEL_202;
  }
  if (*((int *)v110 + 78) > 3)
    goto LABEL_201;
  v112 = *((_DWORD *)v110 + 76);
  LOBYTE(v141.__begin_) = HIBYTE(v112);
  BYTE1(v141.__begin_) = BYTE2(v112);
  BYTE2(v141.__begin_) = BYTE1(v112);
  *(_WORD *)((char *)&v141.__begin_ + 3) = v112;
  if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v113 = *(_DWORD *)v110;
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1745;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v140;
    HIWORD(v156[1]) = 1024;
    LODWORD(v156[2]) = v113;
    WORD2(v156[2]) = 2082;
    *(_QWORD *)((char *)&v156[2] + 6) = (char *)v110 + 24;
    HIWORD(v156[3]) = 2082;
    v156[4] = &v141;
    v114 = MEMORY[0x1E0C81028];
LABEL_217:
    _os_log_impl(&dword_1B57BA000, v114, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | picking %d: '%{public}s'/'%{public}s'", buf, 0x36u);
  }
LABEL_218:
  PreferredDefaultDevice = *(unsigned int *)v110;
  if ((_DWORD)PreferredDefaultDevice)
    goto LABEL_233;
  v108 = (DeviceInfo *)v137;
  v109 = (unsigned int *)v138;
LABEL_202:
  if (v108 == (DeviceInfo *)v109)
  {
LABEL_232:
    PreferredDefaultDevice = 0;
    goto LABEL_233;
  }
  v111 = v108;
  while (1)
  {
    if (!DeviceInfo::CanBeDefault(v111, a4))
      goto LABEL_209;
    if (a4 != 1682533920)
      break;
    if (*((int *)v111 + 77) <= 3)
    {
      v120 = *((_DWORD *)v111 + 75);
      LOBYTE(v141.__begin_) = HIBYTE(v120);
      BYTE1(v141.__begin_) = BYTE2(v120);
      BYTE2(v141.__begin_) = BYTE1(v120);
      *(_WORD *)((char *)&v141.__begin_ + 3) = v120;
      if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v121 = *(_DWORD *)v111;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
        v155 = 1024;
        LODWORD(v156[0]) = 1763;
        WORD2(v156[0]) = 2082;
        *(_QWORD *)((char *)v156 + 6) = v140;
        HIWORD(v156[1]) = 1024;
        LODWORD(v156[2]) = v121;
        WORD2(v156[2]) = 2082;
        *(_QWORD *)((char *)&v156[2] + 6) = (char *)v111 + 24;
        HIWORD(v156[3]) = 2082;
        v156[4] = &v141;
        v119 = MEMORY[0x1E0C81028];
        goto LABEL_226;
      }
      goto LABEL_227;
    }
LABEL_209:
    v111 = (DeviceInfo *)((char *)v111 + 328);
    if (v111 == (DeviceInfo *)v109)
    {
      while (1)
      {
LABEL_231:
        if (v108 == (DeviceInfo *)v109)
          goto LABEL_232;
        if (DeviceInfo::CanBeDefault(v108, a4))
          break;
        v108 = (DeviceInfo *)((char *)v108 + 328);
      }
      if (a4 == 1682533920)
      {
        v123 = *((_DWORD *)v108 + 75);
        LOBYTE(v141.__begin_) = HIBYTE(v123);
        BYTE1(v141.__begin_) = BYTE2(v123);
        BYTE2(v141.__begin_) = BYTE1(v123);
        *(_WORD *)((char *)&v141.__begin_ + 3) = v123;
        if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v124 = *(_DWORD *)v108;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 1790;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v140;
          HIWORD(v156[1]) = 1024;
          LODWORD(v156[2]) = v124;
          WORD2(v156[2]) = 2082;
          *(_QWORD *)((char *)&v156[2] + 6) = (char *)v108 + 24;
          HIWORD(v156[3]) = 2082;
          v156[4] = &v141;
          v125 = MEMORY[0x1E0C81028];
          goto LABEL_252;
        }
      }
      else
      {
        v126 = *((_DWORD *)v108 + 76);
        LOBYTE(v141.__begin_) = HIBYTE(v126);
        BYTE1(v141.__begin_) = BYTE2(v126);
        BYTE2(v141.__begin_) = BYTE1(v126);
        *(_WORD *)((char *)&v141.__begin_ + 3) = v126;
        if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v127 = *(_DWORD *)v108;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
          v155 = 1024;
          LODWORD(v156[0]) = 1798;
          WORD2(v156[0]) = 2082;
          *(_QWORD *)((char *)v156 + 6) = v140;
          HIWORD(v156[1]) = 1024;
          LODWORD(v156[2]) = v127;
          WORD2(v156[2]) = 2082;
          *(_QWORD *)((char *)&v156[2] + 6) = (char *)v108 + 24;
          HIWORD(v156[3]) = 2082;
          v156[4] = &v141;
          v125 = MEMORY[0x1E0C81028];
LABEL_252:
          _os_log_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | using %d: '%{public}s'/'%{public}s'", buf, 0x36u);
        }
      }
      PreferredDefaultDevice = *(unsigned int *)v108;
      goto LABEL_233;
    }
  }
  if (*((int *)v111 + 78) > 4)
    goto LABEL_209;
  v117 = *((_DWORD *)v111 + 76);
  LOBYTE(v141.__begin_) = HIBYTE(v117);
  BYTE1(v141.__begin_) = BYTE2(v117);
  BYTE2(v141.__begin_) = BYTE1(v117);
  *(_WORD *)((char *)&v141.__begin_ + 3) = v117;
  if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v118 = *(_DWORD *)v111;
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1771;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v140;
    HIWORD(v156[1]) = 1024;
    LODWORD(v156[2]) = v118;
    WORD2(v156[2]) = 2082;
    *(_QWORD *)((char *)&v156[2] + 6) = (char *)v111 + 24;
    HIWORD(v156[3]) = 2082;
    v156[4] = &v141;
    v119 = MEMORY[0x1E0C81028];
LABEL_226:
    _os_log_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | accepting %d: '%{public}s'/'%{public}s'", buf, 0x36u);
  }
LABEL_227:
  PreferredDefaultDevice = *(unsigned int *)v111;
  if (!(_DWORD)PreferredDefaultDevice)
  {
    v108 = (DeviceInfo *)v137;
    v109 = (unsigned int *)v138;
    goto LABEL_231;
  }
LABEL_233:
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1806;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v140;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' <<<---", buf, 0x1Cu);
  }
  *(_QWORD *)buf = &v137;
  std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!(_DWORD)PreferredDefaultDevice)
  {
    if (!*(_BYTE *)(a1 + 97))
      goto LABEL_240;
    PreferredDefaultDevice = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
      v155 = 1024;
      LODWORD(v156[0]) = 1659;
      WORD2(v156[0]) = 2082;
      *(_QWORD *)((char *)v156 + 6) = v136;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice: '%{public}s' no eligible devices", buf, 0x1Cu);
LABEL_240:
      PreferredDefaultDevice = 0;
    }
  }
LABEL_241:
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v155 = 1024;
    LODWORD(v156[0]) = 1662;
    WORD2(v156[0]) = 2082;
    *(_QWORD *)((char *)v156 + 6) = v136;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice:        '%{public}s' <<<---", buf, 0x1Cu);
  }
  return PreferredDefaultDevice;
}

void sub_1B5A359DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  uint64_t v45;

  *(_QWORD *)(v45 + 80) = &a23;
  std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100](&a45);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1B5A35A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  a45 = (void **)&a23;
  std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100](&a45);
  _Unwind_Resume(a1);
}

uint64_t HALS_DefaultDeviceManager::FindPreferredDefaultDevice(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const void *v8;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  _DWORD *v12;
  const void *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD v19[2];
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  _QWORD v25[2];
  _BYTE v26[5];
  uint8_t v27[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[24];
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _BYTE v40[280];
  _BYTE v41[4];
  _BYTE v42[12];
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v26[0] = HIBYTE(a4);
  v26[1] = BYTE2(a4);
  v26[2] = BYTE1(a4);
  v26[3] = a4;
  v26[4] = 0;
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v38 = "HALS_DefaultDeviceManager.cpp";
    v39 = 1024;
    *(_DWORD *)v40 = 1670;
    *(_WORD *)&v40[4] = 2082;
    *(_QWORD *)&v40[6] = v26;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' --->>>", buf, 0x1Cu);
  }
  v8 = *(const void **)(a2 + 8);
  if (!v8)
    goto LABEL_18;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v25, v8);
  v25[0] = &off_1E69A0F60;
  DeviceInfo::DeviceInfo((uint64_t)buf, (uint64_t)v25);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
  if (!*(_QWORD *)&v40[2])
    goto LABEL_17;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = v42;
  if (a4 == 1682533920)
    v10 = v41;
  if (v9 != *(_DWORD *)v10)
    goto LABEL_17;
  if (a4 > 1934587251)
  {
    if (a4 != 1934587252)
    {
      if (a4 != 1936224868 || !v46)
        goto LABEL_17;
      goto LABEL_49;
    }
    if (v45)
      goto LABEL_49;
LABEL_17:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
LABEL_18:
    v11 = 0;
    v12 = (_DWORD *)(a3 + 16);
    while (1)
    {
      v13 = (const void *)*((_QWORD *)v12 - 1);
      if (v13)
        break;
      v16 = 0;
LABEL_32:
      v12 += 6;
      if (v11++ >= 2)
        goto LABEL_53;
    }
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v19, v13);
    v19[0] = &off_1E69A0F60;
    DeviceInfo::DeviceInfo((uint64_t)buf, (uint64_t)v19);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
    if (!*(_QWORD *)&v40[2])
      goto LABEL_28;
    v14 = *v12;
    v15 = v41;
    if (a4 != 1682533920)
      v15 = v42;
    if (v14 != *(_DWORD *)v15)
      goto LABEL_28;
    v16 = 0;
    if (a4 > 1934587251)
    {
      if (a4 == 1934587252)
      {
        if (!v45)
          goto LABEL_28;
      }
      else
      {
        if (a4 != 1936224868)
          goto LABEL_29;
        if (!v46)
          goto LABEL_28;
      }
    }
    else
    {
      if (a4 != 1682533920)
      {
        if (a4 != 1682929012)
          goto LABEL_29;
        if (!v44)
          goto LABEL_28;
        goto LABEL_38;
      }
      if (!v43)
      {
LABEL_28:
        v16 = 0;
        goto LABEL_29;
      }
    }
LABEL_38:
    v20 = HIBYTE(*v12);
    v21 = BYTE2(v14);
    v22 = BYTE1(v14);
    v23 = v14;
    v24 = 0;
    if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v27 = 136316674;
      v28 = "HALS_DefaultDeviceManager.cpp";
      v29 = 1024;
      v30 = 1700;
      v31 = 2082;
      v32 = v26;
      v33 = 1024;
      v34 = v11;
      v35 = 1024;
      *(_DWORD *)v36 = *(_DWORD *)buf;
      *(_WORD *)&v36[4] = 2082;
      *(_QWORD *)&v36[6] = &v40[10];
      *(_WORD *)&v36[14] = 2082;
      *(_QWORD *)&v36[16] = &v20;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' | found preferred[%d] %d: '%{public}s'/'%{public}s'", v27, 0x3Cu);
    }
    v16 = *(unsigned int *)buf;
LABEL_29:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
    if ((_DWORD)v16)
      goto LABEL_53;
    goto LABEL_32;
  }
  if (a4 == 1682533920)
  {
    if (v43)
      goto LABEL_49;
    goto LABEL_17;
  }
  if (a4 != 1682929012 || !v44)
    goto LABEL_17;
LABEL_49:
  v20 = HIBYTE(*(_DWORD *)(a2 + 16));
  v21 = BYTE2(v9);
  v22 = BYTE1(v9);
  v23 = v9;
  v24 = 0;
  if (*(_BYTE *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v27 = 136316418;
    v28 = "HALS_DefaultDeviceManager.cpp";
    v29 = 1024;
    v30 = 1683;
    v31 = 2082;
    v32 = v26;
    v33 = 1024;
    v34 = *(_DWORD *)buf;
    v35 = 2082;
    *(_QWORD *)v36 = &v40[10];
    *(_WORD *)&v36[8] = 2082;
    *(_QWORD *)&v36[10] = &v20;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' | found transient %d: '%{public}s'/'%{public}s'", v27, 0x36u);
  }
  v16 = *(unsigned int *)buf;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
  if (!(_DWORD)v16)
    goto LABEL_18;
LABEL_53:
  if (*(_BYTE *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v38 = "HALS_DefaultDeviceManager.cpp";
    v39 = 1024;
    *(_DWORD *)v40 = 1707;
    *(_WORD *)&v40[4] = 2082;
    *(_QWORD *)&v40[6] = v26;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' <<<---", buf, 0x1Cu);
  }
  return v16;
}

void sub_1B5A35FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 328;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v4 - 320));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL DeviceInfo::CanBeDefault(DeviceInfo *this, int a2)
{
  _BOOL8 result;
  int v4;

  result = 0;
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      v4 = *((unsigned __int8 *)this + 318);
    }
    else
    {
      if (a2 != 1936224868)
        return result;
      v4 = *((unsigned __int8 *)this + 319);
    }
  }
  else if (a2 == 1682533920)
  {
    v4 = *((unsigned __int8 *)this + 316);
  }
  else
  {
    if (a2 != 1682929012)
      return result;
    v4 = *((unsigned __int8 *)this + 317);
  }
  return v4 != 0;
}

void DeviceInfo::DeviceInfo(DeviceInfo *this, HALS_ObjectMap *a2)
{
  HALS_Device *v3;
  HALS_Object *v4;

  *((_QWORD *)this + 1) = &off_1E69A0F60;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_QWORD *)((char *)this + 308) = 0x600000005;
  *((_WORD *)this + 158) = 0;
  *((_BYTE *)this + 318) = 0;
  *((_WORD *)this + 160) = 0;
  v3 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  DeviceInfo::CatalogDeviceInfo((UInt8 *)this, v3);
  HALS_ObjectMap::ReleaseObject(v3, v4);
}

void sub_1B5A36184(_Unwind_Exception *a1, HALS_Object *a2)
{
  OS::CF::UntypedObject *v2;
  HALS_ObjectMap *v3;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  OS::CF::UntypedObject::~UntypedObject(v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(unint64_t a1)
{
  if (a1 >= 0xC7CE0C7CE0C7CFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(328 * a1);
}

uint64_t std::__split_buffer<DeviceInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 328;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(i - 320));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double DeviceInfo::CatalogDeviceInfo(UInt8 *this, HALS_Device *a2)
{
  char *v4;
  uint64_t v5;
  CFIndex v6;
  int TransportType;
  int v8;
  int v9;
  HALS_Device *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  HALS_Device *v15;
  int v16;
  int v17;
  int v18;
  char IsHidden;
  int NumberStreamsExcludingReferenceStreams;
  uint64_t v21;
  void (*v22)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v23;
  int HogModeOwner;
  char v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  void (*v30)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v31;
  int v32;
  char v33;
  char v34;
  char v35;
  int v36;
  uint64_t v37;
  void (*v38)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v39;
  int v40;
  char v41;
  HALS_Device *v42;
  char v43;
  double result;
  HALS_Device *v45;
  unsigned int v46;
  HALS_Device *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  if (!a2)
    return result;
  v4 = (char *)(this + 280);
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  v5 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 208))(a2);
  v6 = OS::CF::UntypedObject::operator=((uint64_t)(this + 8), v5);
  OS::CF::String::AsCString(v6, this + 24, 256);
  *(_OWORD *)v4 = *((_OWORD *)a2 + 26);
  TransportType = HALS_IODevice::GetTransportType(a2);
  *((_DWORD *)this + 74) = TransportType;
  if (TransportType == 1651274862)
  {
    *((_DWORD *)this + 75) = DeviceInfo::GetMasterDataSourceValue(a2, (HALS_Device *)1);
    *((_DWORD *)this + 76) = DeviceInfo::GetMasterDataSourceValue(a2, 0);
  }
  v8 = *((_DWORD *)this + 75);
  v9 = HALS_IODevice::GetTransportType(a2);
  if (!HALS_IODevice::GetNumberStreams(a2, 1))
  {
    v11 = 5;
    goto LABEL_18;
  }
  v11 = 4;
  if (v9 > 1718055535)
  {
    if (v9 > 1986622067)
    {
      if (v9 == 1986622068)
        goto LABEL_18;
      v12 = 1986818665;
    }
    else
    {
      if (v9 == 1718055536)
        goto LABEL_18;
      v12 = 1735554416;
    }
  }
  else if (v9 > 1651275108)
  {
    if (v9 == 1651275109)
    {
      if (!DeviceInfo::IsIEDActive(a2, v10))
      {
        v11 = 4;
        goto LABEL_18;
      }
      v46 = DeviceInfo::GetBTDeviceCategory(a2, v45) - 1;
      if (v46 < 3)
      {
        v11 = dword_1B5D2F210[v46];
        goto LABEL_18;
      }
LABEL_70:
      v11 = 3;
      goto LABEL_18;
    }
    v12 = 1668506482;
  }
  else
  {
    if (!v9)
      goto LABEL_18;
    v12 = 1634300528;
  }
  if (v9 == v12)
    goto LABEL_18;
  v49 = *((unsigned int *)a2 + 4);
  v52 = 0x676C6F6264727465;
  v53 = 0;
  if ((*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 88))(a2, v49, &v52, 0)&& HALS_Device::WantsDisplayRouting(a2))
  {
    v11 = 1;
    goto LABEL_18;
  }
  if (v9 != 1651274862)
    goto LABEL_70;
  if (v8 == 1768778083)
    v11 = 2;
  else
    v11 = 3;
  if (v8 == 1701669219)
    v11 = 0;
LABEL_18:
  *((_DWORD *)this + 77) = v11;
  v13 = *((_DWORD *)this + 76);
  v14 = HALS_IODevice::GetTransportType(a2);
  if (HALS_IODevice::GetNumberStreams(a2, 0))
  {
    v16 = 5;
    if (v14 > 1718055535)
    {
      if (v14 > 1986622067)
      {
        if (v14 == 1986622068)
          goto LABEL_32;
        v17 = 1986818665;
      }
      else
      {
        if (v14 == 1718055536)
          goto LABEL_32;
        v17 = 1735554416;
      }
    }
    else
    {
      if (v14 <= 1651275108)
      {
        if (v14)
        {
          v17 = 1634300528;
          goto LABEL_31;
        }
LABEL_32:
        v18 = v16;
        goto LABEL_33;
      }
      if (v14 == 1651275109)
      {
        if (DeviceInfo::IsIEDActive(a2, v15))
        {
          v48 = DeviceInfo::GetBTDeviceCategory(a2, v47) - 1;
          if (v48 >= 3)
            v16 = 4;
          else
            v16 = dword_1B5D2F210[v48];
        }
        else
        {
          v16 = 5;
        }
        goto LABEL_32;
      }
      v17 = 1668506482;
    }
LABEL_31:
    if (v14 == v17)
      goto LABEL_32;
    v50 = *((unsigned int *)a2 + 4);
    v52 = 0x676C6F6264727465;
    v53 = 0;
    if ((*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 88))(a2, v50, &v52, 0))
    {
      if (HALS_Device::WantsDisplayRouting(a2))
      {
        v16 = 1;
        goto LABEL_32;
      }
      if (v14 != 1651274862)
      {
        v16 = 1;
        if (v14 == 1685090932 || v14 == 1751412073)
          goto LABEL_32;
LABEL_74:
        v18 = 4;
        goto LABEL_33;
      }
    }
    else if (v14 != 1651274862)
    {
      goto LABEL_74;
    }
    v16 = 2;
    v18 = 4;
    if (v13 > 1769173098)
    {
      if (v13 != 1769173099)
      {
        if (v13 != 1936745574)
          goto LABEL_33;
        v16 = 3;
      }
    }
    else if (v13 != 1702064235)
    {
      if (v13 != 1751412846)
        goto LABEL_33;
      v16 = 0;
    }
    goto LABEL_32;
  }
  v18 = 6;
LABEL_33:
  *((_DWORD *)this + 78) = v18;
  IsHidden = HALS_Device::IsHidden(a2);
  NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 1);
  v21 = *((unsigned int *)a2 + 4);
  v52 = 0x696E707464666C74;
  v53 = 0;
  v22 = *(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112);
  v51 = 0;
  v22(a2, v21, &v52, 4, &v51, (char *)&v51 + 4, 0, 0, 0);
  v23 = HIDWORD(v51);
  HogModeOwner = HALS_Device::GetHogModeOwner(a2);
  v25 = HALS_Device::AreAllStreamsMixable(a2, 1);
  v26 = (NumberStreamsExcludingReferenceStreams != 0) & ~IsHidden;
  if (!v23)
    v26 = 0;
  if (HogModeOwner != -1)
    v26 = 0;
  this[316] = v26 & v25;
  v27 = HALS_Device::IsHidden(a2);
  v28 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 0);
  v29 = *((unsigned int *)a2 + 4);
  v52 = 0x6F75747064666C74;
  v53 = 0;
  v30 = *(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112);
  v51 = 0;
  v30(a2, v29, &v52, 4, &v51, (char *)&v51 + 4, 0, 0, 0);
  v31 = HIDWORD(v51);
  v32 = HALS_Device::GetHogModeOwner(a2);
  v33 = HALS_Device::AreAllStreamsMixable(a2, 0);
  v34 = (v28 != 0) & ~v27;
  if (!v31)
    v34 = 0;
  if (v32 != -1)
    v34 = 0;
  this[317] = v34 & v33;
  v35 = HALS_Device::IsHidden(a2);
  v36 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 0);
  v37 = *((unsigned int *)a2 + 4);
  v52 = 0x6F75747073666C74;
  v53 = 0;
  v38 = *(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112);
  v51 = 0;
  v38(a2, v37, &v52, 4, &v51, (char *)&v51 + 4, 0, 0, 0);
  v39 = HIDWORD(v51);
  v40 = HALS_Device::GetHogModeOwner(a2);
  v41 = HALS_Device::AreAllStreamsMixable(a2, 0);
  v43 = (v36 != 0) & ~v35;
  if (!v39)
    v43 = 0;
  if (v40 != -1)
    v43 = 0;
  this[318] = v43 & v41;
  this[319] = this[317];
  if (*((_DWORD *)this + 74) == 1651275109)
    this[320] = DeviceInfo::SupportsIED(a2, v42);
  v53 = 0;
  v52 = *(_QWORD *)"otuabolg";
  if (((*(uint64_t (**)(HALS_Device *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v52, 0) & 1) != 0)
  {
    v51 = 0x100000004;
    (*(void (**)(HALS_Device *, _QWORD, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v52, 4, &v51, (char *)&v51 + 4, 0, 0, 0);
    if (!HIDWORD(v51))
    {
      this[321] = 1;
      *(_QWORD *)&result = 0x500000004;
      *(_QWORD *)(v4 + 28) = 0x500000004;
    }
  }
  return result;
}

uint64_t DeviceInfo::GetMasterDataSourceValue(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v2;
  unsigned int *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;

  if ((_DWORD)a2)
    v2 = 1768845428;
  else
    v2 = 1869968496;
  v3 = (unsigned int *)(*(uint64_t (**)(DeviceInfo *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 640))(this, 1685287523, v2, 0);
  v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    v6 = v3[4];
    v9 = 0x676C6F6273636369;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 112))(v3, v6, &v9, 4, &v11, &v12, 0, 0, 0);
    v7 = v12;
  }
  else
  {
    v7 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  return v7;
}

void sub_1B5A369B4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t DeviceInfo::SupportsIED(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void (*v8)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 4);
  strcpy(buf, "edeibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v4 = (*(uint64_t (**)(DeviceInfo *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)this + 88))(this, v3, buf, 0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(uint64_t (**)(DeviceInfo *))(*(_QWORD *)this + 216))(this);
    v6 = "doesn't support";
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v15 = 1024;
    v16 = 588;
    *(_DWORD *)buf = 136315906;
    if ((_DWORD)v4)
      v6 = "supports";
    v17 = 2082;
    v18 = v5;
    v19 = 2082;
    v20 = v6;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | %{public}s in-ear detection", buf, 0x26u);
  }
  if ((_DWORD)v4)
  {
    v7 = *((unsigned int *)this + 4);
    strcpy(buf, "edeibolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v8 = *(void (**)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112);
    v13 = 0;
    v8(this, v7, buf, 4, &v13, (char *)&v13 + 4, 0, 0, 0);
    v9 = HIDWORD(v13);
    v4 = HIDWORD(v13) != 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v10 = (*(uint64_t (**)(DeviceInfo *))(*(_QWORD *)this + 216))(this);
      v11 = "off";
      *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
      v15 = 1024;
      v16 = 594;
      *(_DWORD *)buf = 136315906;
      v17 = 2082;
      if (v9)
        v11 = "on";
      v18 = v10;
      v19 = 2082;
      v20 = v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | in-ear detection is %{public}s", buf, 0x26u);
    }
  }
  return v4;
}

BOOL HALS_Device::IsHidden(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F626869646ELL;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

BOOL DeviceInfo::IsIEDActive(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v3;
  void (*v4)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v9;
  void (*v10)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _BYTE buf[12];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!DeviceInfo::SupportsIED(this, a2))
    return 1;
  v3 = *((unsigned int *)this + 4);
  strcpy(buf, "pseibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v4 = *(void (**)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112);
  v14 = 0;
  v4(this, v3, buf, 4, &v14, (char *)&v14 + 4, 0, 0, 0);
  v5 = HIDWORD(v14);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = (*(uint64_t (**)(DeviceInfo *))(*(_QWORD *)this + 216))(this);
    if ((v5 - 1) > 2)
      v7 = "unknown";
    else
      v7 = off_1E697F518[v5 - 1];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v16 = 1024;
    v17 = 610;
    v18 = 2082;
    v19 = v6;
    v20 = 2082;
    v21 = v7;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | primary: %{public}s", buf, 0x26u);
  }
  if (v5 == 1)
    return 1;
  v9 = *((unsigned int *)this + 4);
  strcpy(buf, "sseibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v10 = *(void (**)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112);
  v14 = 0;
  v10(this, v9, buf, 4, &v14, (char *)&v14 + 4, 0, 0, 0);
  v11 = HIDWORD(v14);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v12 = (*(uint64_t (**)(DeviceInfo *))(*(_QWORD *)this + 216))(this);
    if ((v11 - 1) > 2)
      v13 = "unknown";
    else
      v13 = off_1E697F518[v11 - 1];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v16 = 1024;
    v17 = 617;
    v18 = 2082;
    v19 = v12;
    v20 = 2082;
    v21 = v13;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | secondary: %{public}s", buf, 0x26u);
  }
  return v11 == 1;
}

uint64_t DeviceInfo::GetBTDeviceCategory(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  const char *v8;
  uint64_t v10;
  _BYTE buf[12];
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 4);
  strcpy(buf, "tacdbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v4 = 0;
  if ((*(unsigned int (**)(DeviceInfo *, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)this + 88))(this, v3, buf, 0))
  {
    v5 = *((unsigned int *)this + 4);
    strcpy(buf, "tacdbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v6 = *(void (**)(DeviceInfo *, uint64_t, _BYTE *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112);
    v10 = 0;
    v6(this, v5, buf, 4, &v10, (char *)&v10 + 4, 0, 0, 0);
    v4 = HIDWORD(v10);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = (*(uint64_t (**)(DeviceInfo *))(*(_QWORD *)this + 216))(this);
    if ((v4 - 1) > 2)
      v8 = "Unknown";
    else
      v8 = off_1E697F530[(v4 - 1)];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    v12 = 1024;
    v13 = 668;
    v14 = 2082;
    v15 = v7;
    v16 = 2082;
    v17 = v8;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | %{public}s", buf, 0x26u);
  }
  return v4;
}

BOOL HALS_Device::WantsDisplayRouting(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F6264727465;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

uint64_t DeviceInfo::DeviceInfo(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  HALS_System *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  HALS_Device *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  HALS_Object *v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  HALS_System *v24;
  std::__shared_weak_count *v25;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &off_1E69A0F60;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_QWORD *)(a1 + 308) = 0x600000005;
  *(_WORD *)(a1 + 316) = 0;
  *(_BYTE *)(a1 + 318) = 0;
  *(_WORD *)(a1 + 320) = 0;
  v22 = 0;
  v23 = 0;
  HALS_System::GetInstance(&v24, 0, &v22);
  v5 = v24;
  v4 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = v23;
  if (!v23)
    goto LABEL_10;
  v9 = (unint64_t *)&v23->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_10:
    if (!v5)
      return a1;
  }
  v20 = 0;
  v21 = 0;
  HALS_System::GetInstance(&v24, 0, &v20);
  v11 = HALS_System::CopyDeviceByUID(v24, *(const __CFString **)(a2 + 8), 0);
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  DeviceInfo::CatalogDeviceInfo((UInt8 *)a1, v11);
  HALS_ObjectMap::ReleaseObject(v11, v18);
  return a1;
}

void sub_1B5A37274(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  OS::CF::UntypedObject *v13;
  HALS_ObjectMap *v14;

  HALS_ObjectMap::ReleaseObject(v14, a2);
  OS::CF::UntypedObject::~UntypedObject(v13);
  _Unwind_Resume(a1);
}

uint64_t HALS_DefaultDeviceManager::SavedInfo::operator=(uint64_t a1, uint64_t a2)
{
  const __CFNumber *v4;
  uint64_t v6;
  const __CFNumber *v7;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v6, *(CFDictionaryRef *)(a2 + 8), CFSTR("uid"));
  v4 = *(const __CFNumber **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v7 = v4;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v6, *(CFDictionaryRef *)(a2 + 8), CFSTR("master data source value"));
  *(_DWORD *)(a1 + 16) = OS::CF::Number::GetValue<unsigned int>(v7, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  return a1;
}

uint64_t HALS_DefaultDeviceManager::GetDefaultDevice(HALS_DefaultDeviceManager *this, int a2)
{
  uint64_t v4;
  char *v5;
  HALB_Mutex *v7;
  int v8;

  v7 = this;
  v4 = 0;
  v8 = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      v5 = (char *)this + 312;
      goto LABEL_10;
    }
    if (a2 == 1936224868)
    {
      v5 = (char *)this + 416;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2 == 1682533920)
    {
      v5 = (char *)this + 104;
      goto LABEL_10;
    }
    if (a2 == 1682929012)
    {
      v5 = (char *)this + 208;
LABEL_10:
      v4 = *(unsigned int *)v5;
    }
  }
  HALB_Mutex::Locker::~Locker(&v7);
  return v4;
}

void HALS_DefaultDeviceManager::SetDefaultDevice(HALS_DefaultDeviceManager *this, signed int a2, HALS_ObjectMap *a3, int a4)
{
  int v5;
  BOOL v8;
  BOOL v9;
  _BOOL4 v10;
  int v11;
  int *v12;
  int v13;
  const char *v14;
  char *v15;
  const __CFString *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  OS::CF::UntypedObject *v21;
  int v22;
  uint64_t v23;
  HALB_Mutex **v24;
  const __CFString *v25;
  int v26;
  int v27;
  const __CFString *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  CFTypeRef v35;
  int v36;
  CFTypeRef v37;
  int v38;
  CFTypeRef v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  void (**v48)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v49;
  void (**v50)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v51;
  void (**v52)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v53;
  HALS_DefaultDeviceManager *v54;
  int v55;
  _BYTE v56[5];
  _BYTE v57[5];
  _BYTE buf[20];
  _BYTE *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t *v65;
  __int16 v66;
  _BYTE *v67;
  _BYTE v68[8];
  uint64_t v69;
  CFTypeRef cf;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;

  v5 = (int)a3;
  v81 = *MEMORY[0x1E0C80C00];
  DeviceInfo::DeviceInfo((DeviceInfo *)v68, a3);
  if (*((_BYTE *)this + 99))
    v8 = v72 == 1634300528;
  else
    v8 = 0;
  v10 = v8 || *((_BYTE *)this + 100) && (v72 == 1651275109 ? (v9 = v79 == 0) : (v9 = 1), !v9) || v80 != 0;
  v11 = v10 | a4;
  v57[0] = HIBYTE(a2);
  v57[1] = BYTE2(a2);
  v57[2] = BYTE1(a2);
  v57[3] = a2;
  v57[4] = 0;
  v12 = &v74;
  if (a2 == 1682533920)
    v12 = &v73;
  v13 = *v12;
  v56[0] = HIBYTE(v13);
  v56[1] = BYTE2(v13);
  v56[2] = BYTE1(v13);
  v56[3] = v13;
  v56[4] = 0;
  if (*((_BYTE *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)buf = 136315394,
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp",
          *(_WORD *)&buf[12] = 1024,
          *(_DWORD *)&buf[14] = 1062,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", buf, 0x12u), *((_BYTE *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1063;
        *(_WORD *)&buf[18] = 2082;
        v59 = v57;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' --->>>", buf, 0x1Cu);
      }
    }
  }
  if (*((_BYTE *)this + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v14 = "";
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1064;
    *(_WORD *)&buf[18] = 2082;
    if (v11)
      v14 = "transient";
    v59 = v57;
    v60 = 2082;
    v61 = v14;
    v62 = 1024;
    v63 = v5;
    v64 = 2082;
    v65 = &v71;
    v66 = 2082;
    v67 = v56;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' | %{public}s %d: '%{public}s'/'%{public}s'", buf, 0x40u);
  }
  if ((v11 & 1) == 0)
  {
    if (!cf)
      goto LABEL_113;
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        if (!v77)
          goto LABEL_113;
      }
      else if (a2 != 1936224868 || !v78)
      {
        goto LABEL_113;
      }
    }
    else if (a2 == 1682533920)
    {
      if (!v75)
        goto LABEL_113;
    }
    else if (a2 != 1682929012 || !v76)
    {
      goto LABEL_113;
    }
    v54 = this;
    v55 = HALB_Mutex::Lock(this);
    if (a2 <= 1934587251)
    {
      if (a2 != 1682533920)
      {
        *(_QWORD *)buf = &off_1E69A0E58;
        v16 = (const __CFString *)cf;
        if (cf)
          CFRetain(cf);
        *(_QWORD *)buf = &off_1E69A0F60;
        *(_QWORD *)&buf[8] = v16;
        if (OS::CF::operator==(*((CFStringRef *)this + 28), v16))
        {
          v17 = *((_DWORD *)this + 58);
          v18 = v74;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          if (v17 == v18)
          {
LABEL_102:
            OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
            *((_DWORD *)this + 76) = 0;
LABEL_109:
            v24 = &v54;
            goto LABEL_110;
          }
        }
        else
        {
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        }
        OS::CF::UntypedObject::operator=((uint64_t)this + 264, *((CFTypeRef *)this + 31));
        *((_DWORD *)this + 70) = *((_DWORD *)this + 64);
        OS::CF::UntypedObject::operator=((uint64_t)this + 240, *((CFTypeRef *)this + 28));
        *((_DWORD *)this + 64) = *((_DWORD *)this + 58);
        v50 = &off_1E69A0E58;
        v35 = cf;
        if (cf)
        {
          CFRetain(cf);
          v50 = &off_1E69A0F60;
          v51 = v35;
          v36 = v74;
          *(_QWORD *)buf = &off_1E69A0E58;
          CFRetain(v35);
        }
        else
        {
          v50 = &off_1E69A0F60;
          v51 = 0;
          v36 = v74;
        }
        *(_DWORD *)&buf[16] = v36;
        v41 = *((_QWORD *)this + 28);
        *((_QWORD *)this + 28) = v35;
        *(_QWORD *)buf = &off_1E69A0F60;
        *(_QWORD *)&buf[8] = v41;
        *((_DWORD *)this + 58) = v36;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v50);
        goto LABEL_102;
      }
      *(_QWORD *)buf = &off_1E69A0E58;
      v25 = (const __CFString *)cf;
      if (cf)
        CFRetain(cf);
      *(_QWORD *)buf = &off_1E69A0F60;
      *(_QWORD *)&buf[8] = v25;
      if (OS::CF::operator==(*((CFStringRef *)this + 15), v25))
      {
        v26 = *((_DWORD *)this + 32);
        v27 = v73;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        if (v26 == v27)
        {
LABEL_105:
          OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
          *((_DWORD *)this + 50) = 0;
          goto LABEL_109;
        }
      }
      else
      {
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      }
      OS::CF::UntypedObject::operator=((uint64_t)this + 160, *((CFTypeRef *)this + 18));
      *((_DWORD *)this + 44) = *((_DWORD *)this + 38);
      OS::CF::UntypedObject::operator=((uint64_t)this + 136, *((CFTypeRef *)this + 15));
      *((_DWORD *)this + 38) = *((_DWORD *)this + 32);
      v52 = &off_1E69A0E58;
      v37 = cf;
      if (cf)
      {
        CFRetain(cf);
        v52 = &off_1E69A0F60;
        v53 = v37;
        v38 = v73;
        *(_QWORD *)buf = &off_1E69A0E58;
        CFRetain(v37);
      }
      else
      {
        v52 = &off_1E69A0F60;
        v53 = 0;
        v38 = v73;
      }
      *(_DWORD *)&buf[16] = v38;
      v42 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v37;
      *(_QWORD *)buf = &off_1E69A0F60;
      *(_QWORD *)&buf[8] = v42;
      *((_DWORD *)this + 32) = v38;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v52);
      goto LABEL_105;
    }
    if (a2 != 1934587252)
    {
      OS::CF::UntypedObject::operator=((uint64_t)this + 424, 0);
      *((_DWORD *)this + 110) = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1106;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Default Shared Output Device can only be set transiently.", buf, 0x12u);
      }
      goto LABEL_109;
    }
    *(_QWORD *)buf = &off_1E69A0E58;
    v28 = (const __CFString *)cf;
    if (cf)
      CFRetain(cf);
    *(_QWORD *)buf = &off_1E69A0F60;
    *(_QWORD *)&buf[8] = v28;
    if (OS::CF::operator==(*((CFStringRef *)this + 41), v28))
    {
      v29 = *((_DWORD *)this + 84);
      v30 = v74;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      if (v29 == v30)
      {
LABEL_108:
        OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
        *((_DWORD *)this + 102) = 0;
        goto LABEL_109;
      }
    }
    else
    {
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::UntypedObject::operator=((uint64_t)this + 368, *((CFTypeRef *)this + 44));
    *((_DWORD *)this + 96) = *((_DWORD *)this + 90);
    OS::CF::UntypedObject::operator=((uint64_t)this + 344, *((CFTypeRef *)this + 41));
    *((_DWORD *)this + 90) = *((_DWORD *)this + 84);
    v48 = &off_1E69A0E58;
    v39 = cf;
    if (cf)
    {
      CFRetain(cf);
      v48 = &off_1E69A0F60;
      v49 = v39;
      v40 = v74;
      *(_QWORD *)buf = &off_1E69A0E58;
      CFRetain(v39);
    }
    else
    {
      v48 = &off_1E69A0F60;
      v49 = 0;
      v40 = v74;
    }
    *(_DWORD *)&buf[16] = v40;
    v43 = *((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v39;
    *(_QWORD *)buf = &off_1E69A0F60;
    *(_QWORD *)&buf[8] = v43;
    *((_DWORD *)this + 84) = v40;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v48);
    goto LABEL_108;
  }
  if (!v5)
  {
    *(_QWORD *)buf = this;
    *(_DWORD *)&buf[8] = HALB_Mutex::Lock(this);
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
        v15 = (char *)this + 408;
        goto LABEL_76;
      }
      if (a2 == 1936224868)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 424, 0);
        v15 = (char *)this + 440;
        goto LABEL_76;
      }
    }
    else
    {
      if (a2 == 1682533920)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
        v15 = (char *)this + 200;
        goto LABEL_76;
      }
      if (a2 == 1682929012)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
        v15 = (char *)this + 304;
LABEL_76:
        *(_DWORD *)v15 = 0;
      }
    }
    v24 = (HALB_Mutex **)buf;
LABEL_110:
    HALB_Mutex::Locker::~Locker(v24);
    goto LABEL_111;
  }
  if (!cf)
    goto LABEL_111;
  if (a2 <= 1934587251)
  {
    if (a2 == 1682533920)
    {
      if (!v75)
        goto LABEL_111;
    }
    else if (a2 != 1682929012 || !v76)
    {
      goto LABEL_111;
    }
    goto LABEL_69;
  }
  if (a2 == 1934587252)
  {
    if (!v77)
      goto LABEL_111;
    goto LABEL_69;
  }
  if (a2 == 1936224868 && v78)
  {
LABEL_69:
    v54 = this;
    v55 = HALB_Mutex::Lock(this);
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v45, cf);
        v45[0] = &off_1E69A0F60;
        v33 = v74;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v45[1]);
        *(_DWORD *)&buf[16] = v33;
        v34 = *((_QWORD *)this + 50);
        *((_QWORD *)this + 50) = *(_QWORD *)&buf[8];
        *(_QWORD *)buf = &off_1E69A0F60;
        *(_QWORD *)&buf[8] = v34;
        *((_DWORD *)this + 102) = v33;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        v21 = (OS::CF::UntypedObject *)v45;
      }
      else
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v44, cf);
        v44[0] = &off_1E69A0F60;
        v22 = v74;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v44[1]);
        *(_DWORD *)&buf[16] = v22;
        v23 = *((_QWORD *)this + 54);
        *((_QWORD *)this + 54) = *(_QWORD *)&buf[8];
        *(_QWORD *)buf = &off_1E69A0F60;
        *(_QWORD *)&buf[8] = v23;
        *((_DWORD *)this + 110) = v22;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        v21 = (OS::CF::UntypedObject *)v44;
      }
    }
    else if (a2 == 1682533920)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v47, cf);
      v47[0] = &off_1E69A0F60;
      v31 = v73;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v47[1]);
      *(_DWORD *)&buf[16] = v31;
      v32 = *((_QWORD *)this + 24);
      *((_QWORD *)this + 24) = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = &off_1E69A0F60;
      *(_QWORD *)&buf[8] = v32;
      *((_DWORD *)this + 50) = v31;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      v21 = (OS::CF::UntypedObject *)v47;
    }
    else
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v46, cf);
      v46[0] = &off_1E69A0F60;
      v19 = v74;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v46[1]);
      *(_DWORD *)&buf[16] = v19;
      v20 = *((_QWORD *)this + 37);
      *((_QWORD *)this + 37) = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = &off_1E69A0F60;
      *(_QWORD *)&buf[8] = v20;
      *((_DWORD *)this + 76) = v19;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      v21 = (OS::CF::UntypedObject *)v46;
    }
    OS::CF::UntypedObject::~UntypedObject(v21);
    goto LABEL_109;
  }
LABEL_111:
  HALS_DefaultDeviceManager::WriteSettings(this);
  HALS_DefaultDeviceManager::CheckForChanges(this, a2);
  if (a2 == 1682929012)
    HALS_DefaultDeviceManager::CheckForChanges(this, 1936224868);
LABEL_113:
  if (*((_BYTE *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)buf = 136315650,
          *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp",
          *(_WORD *)&buf[12] = 1024,
          *(_DWORD *)&buf[14] = 1171,
          *(_WORD *)&buf[18] = 2082,
          v59 = v57,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' <<<---", buf, 0x1Cu), *((_BYTE *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1172;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", buf, 0x12u);
      }
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v69);
}

void sub_1B5A37F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_DefaultDeviceManager::WriteSettings(HALS_DefaultDeviceManager *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  HALB_Mutex *v13;
  void *v14;
  _BYTE v15[8];
  __CFArray *v16;
  _BYTE v17[8];
  __CFArray *v18;
  _BYTE v19[8];
  __CFArray *v20;

  if (!*((_BYTE *)this + 96))
  {
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v19);
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v17);
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v15);
    v13 = this;
    LODWORD(v14) = HALB_Mutex::Lock(this);
    v2 = -72;
    do
    {
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v11, (uint64_t)this + v2 + 184);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v20, v12);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v11);
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v11, (uint64_t)this + v2 + 288);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v18, v12);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v11);
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v11, (uint64_t)this + v2 + 392);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v16, v12);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v11);
      v2 += 24;
    }
    while (v2);
    HALB_Mutex::Locker::~Locker(&v13);
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v13);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v14, CFSTR("input"), v20);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v14, CFSTR("output"), v18);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v14, CFSTR("system output"), v16);
    v9 = 0;
    v10 = 0;
    HALS_System::GetInstance(&v11, 0, &v9);
    HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v11 + 1408), CFSTR("preferred devices"), v14);
    v3 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
  }
}

void sub_1B5A3815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v17 - 48));
  _Unwind_Resume(a1);
}

void HALS_DefaultDeviceManager::CheckForChanges(HALS_DefaultDeviceManager *this, signed int a2)
{
  uint64_t i;
  uint8_t *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int updated;
  char *v13;
  char *v14;
  const AudioObjectPropertyAddress *v15;
  uint64_t j;
  _QWORD v17[2];
  int v18;
  _BYTE v19[5];
  _BYTE v20[12];
  __int16 v21;
  int v22;
  __int16 v23;
  _BYTE *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v19[0] = HIBYTE(a2);
  v19[1] = BYTE2(a2);
  v19[2] = BYTE1(a2);
  v19[3] = a2;
  v19[4] = 0;
  if (*((_BYTE *)this + 98) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v26 = "HALS_DefaultDeviceManager.cpp";
    v27 = 1024;
    v28 = 1278;
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:            '%{public}s' --->>>", buf, 0x1Cu);
  }
  for (i = 0; i != 72; i += 24)
  {
    v5 = &buf[i];
    *(_QWORD *)v5 = &off_1E69A0F60;
    *((_QWORD *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
  }
  v17[0] = &off_1E69A0F60;
  v17[1] = 0;
  v18 = 0;
  *(_QWORD *)v20 = this;
  v6 = 0;
  *(_DWORD *)&v20[8] = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      v11 = 0;
      v6 = *((_DWORD *)this + 78);
      do
      {
        *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v11], *(CFTypeRef *)((char *)this + v11 + 328)) + 16) = *(_DWORD *)((char *)this + v11 + 336);
        v11 += 24;
      }
      while (v11 != 72);
      HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 392);
      OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 50));
      v8 = (char *)this + 408;
    }
    else
    {
      if (a2 != 1936224868)
        goto LABEL_24;
      v9 = 0;
      v6 = *((_DWORD *)this + 104);
      do
      {
        *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v9], *(CFTypeRef *)((char *)this + v9 + 224)) + 16) = *(_DWORD *)((char *)this + v9 + 232);
        v9 += 24;
      }
      while (v9 != 72);
      HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 424);
      OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 54));
      v8 = (char *)this + 440;
    }
  }
  else if (a2 == 1682533920)
  {
    v10 = 0;
    v6 = *((_DWORD *)this + 26);
    do
    {
      *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v10], *(CFTypeRef *)((char *)this + v10 + 120)) + 16) = *(_DWORD *)((char *)this + v10 + 128);
      v10 += 24;
    }
    while (v10 != 72);
    HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 184);
    OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 24));
    v8 = (char *)this + 200;
  }
  else
  {
    if (a2 != 1682929012)
      goto LABEL_24;
    v7 = 0;
    v6 = *((_DWORD *)this + 52);
    do
    {
      *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v7], *(CFTypeRef *)((char *)this + v7 + 224)) + 16) = *(_DWORD *)((char *)this + v7 + 232);
      v7 += 24;
    }
    while (v7 != 72);
    HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 288);
    OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 37));
    v8 = (char *)this + 304;
  }
  v18 = *(_DWORD *)v8;
LABEL_24:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)v20);
  updated = HALS_DefaultDeviceManager::UpdateDefaultDevice((uint64_t)this, (uint64_t)v17, (uint64_t)buf, a2);
  if (v6 == updated)
  {
    v13 = 0;
    goto LABEL_37;
  }
  v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(1uLL);
  *(_DWORD *)v13 = a2;
  *(_QWORD *)(v13 + 4) = 1735159650;
  *(_QWORD *)v20 = this;
  *(_DWORD *)&v20[8] = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      v14 = (char *)this + 312;
      goto LABEL_35;
    }
    if (a2 == 1936224868)
    {
      v14 = (char *)this + 416;
      goto LABEL_35;
    }
  }
  else
  {
    if (a2 == 1682533920)
    {
      v14 = (char *)this + 104;
      goto LABEL_35;
    }
    if (a2 == 1682929012)
    {
      v14 = (char *)this + 208;
LABEL_35:
      *(_DWORD *)v14 = updated;
    }
  }
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)v20);
  HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)1, 0, 1, (const AudioObjectPropertyAddress *)v13, v15);
LABEL_37:
  if (*((_BYTE *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)v20 = 136315650,
          *(_QWORD *)&v20[4] = "HALS_DefaultDeviceManager.cpp",
          v21 = 1024,
          v22 = 1362,
          v23 = 2082,
          v24 = v19,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:            '%{public}s' <<<---", v20, 0x1Cu), *((_BYTE *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v20 = 136315394;
        *(_QWORD *)&v20[4] = "HALS_DefaultDeviceManager.cpp";
        v21 = 1024;
        v22 = 1363;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", v20, 0x12u);
      }
    }
  }
  if (v13)
    operator delete(v13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
  for (j = 48; j != -24; j -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[j]);
}

void sub_1B5A38684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  uint64_t i;

  operator delete(v17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  for (i = 48; i != -24; i -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(&a17 + i));
  _Unwind_Resume(a1);
}

void HALS_DefaultDeviceManager::CheckForChanges(unsigned int)::$_0::operator()(uint64_t a1)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  HALS_System *v12;
  std::__shared_weak_count *v13;

  if (*(_QWORD *)(a1 + 8))
  {
    v10 = 0;
    v11 = 0;
    HALS_System::GetInstance(&v12, 0, &v10);
    v3 = HALS_System::CopyDeviceByUID(v12, *(const __CFString **)(a1 + 8), 0);
    v4 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v11;
    if (!v11)
      goto LABEL_11;
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v3)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (v3)
      {
LABEL_13:
        HALS_ObjectMap::ReleaseObject(v3, v2);
        return;
      }
    }
    OS::CF::UntypedObject::operator=(a1, 0);
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_13;
  }
}

void sub_1B5A387D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_DefaultDeviceManager::SavedInfo::MakeDictionary(HALS_DefaultDeviceManager::SavedInfo *this, uint64_t a2)
{
  const void *v4;
  CFDictionaryRef Copy;
  _QWORD v6[2];
  _BYTE v7[8];
  CFDictionaryRef theDict;

  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v7);
  v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, CFSTR("uid"), v4);
    OS::CF::Number::Number<unsigned int>(v6, *(_DWORD *)(a2 + 16));
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, CFSTR("master data source value"), (const void *)v6[1]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
  }
  if (theDict)
    Copy = CFDictionaryCreateCopy(0, theDict);
  else
    Copy = 0;
  *(_QWORD *)this = &off_1E69A0DE0;
  *((_QWORD *)this + 1) = Copy;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
}

void HALS_DefaultDeviceManager::ResetDefaultDevice(HALS_DefaultDeviceManager *this, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(OS::CF::String *__hidden);
  uint64_t v8;
  int v9;
  HALB_Mutex *v10;
  int v11;

  v10 = this;
  v11 = HALB_Mutex::Lock(this);
  switch(a2)
  {
    case 1934587252:
      OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
      v5 = 0;
      *((_DWORD *)this + 102) = 0;
      v7 = &off_1E69A0F60;
      v8 = 0;
      v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v5 + 320, 0);
        *(_DWORD *)((char *)this + v5 + 336) = 0;
        v5 += 24;
      }
      while (v5 != 72);
      goto LABEL_12;
    case 1682929012:
      OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
      v6 = 0;
      *((_DWORD *)this + 76) = 0;
      v7 = &off_1E69A0F60;
      v8 = 0;
      v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v6 + 216, 0);
        *(_DWORD *)((char *)this + v6 + 232) = 0;
        v6 += 24;
      }
      while (v6 != 72);
      goto LABEL_12;
    case 1682533920:
      OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
      v4 = 0;
      *((_DWORD *)this + 50) = 0;
      v7 = &off_1E69A0F60;
      v8 = 0;
      v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v4 + 112, 0);
        *(_DWORD *)((char *)this + v4 + 128) = 0;
        v4 += 24;
      }
      while (v4 != 72);
LABEL_12:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
      break;
  }
  HALB_Mutex::Locker::~Locker(&v10);
  HALS_DefaultDeviceManager::WriteSettings(this);
  HALS_DefaultDeviceManager::CheckForChanges(this, a2);
}

void HALS_DefaultDeviceManager::CheckForChanges(HALS_DefaultDeviceManager *this)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (v2 = 136315394,
          v3 = "HALS_DefaultDeviceManager.cpp",
          v4 = 1024,
          v5 = 1208,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)&v2, 0x12u), *((_BYTE *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v2 = 136315394;
        v3 = "HALS_DefaultDeviceManager.cpp";
        v4 = 1024;
        v5 = 1209;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:                 --->>>", (uint8_t *)&v2, 0x12u);
      }
    }
  }
  HALS_DefaultDeviceManager::CheckForChanges(this, 1682533920);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1682929012);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1934587252);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1936224868);
  if (*((_BYTE *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (v2 = 136315394,
          v3 = "HALS_DefaultDeviceManager.cpp",
          v4 = 1024,
          v5 = 1216,
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:                 <<<---", (uint8_t *)&v2, 0x12u), *((_BYTE *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v2 = 136315394;
        v3 = "HALS_DefaultDeviceManager.cpp";
        v4 = 1024;
        v5 = 1217;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)&v2, 0x12u);
      }
    }
  }
}

void HALS_DefaultDeviceManager::SetLoggingIsEnabled(HALS_DefaultDeviceManager *this, int a2)
{
  BOOL v4;
  const char *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (g_static_start_options != 1)
  {
    if (*((_BYTE *)this + 97))
      v4 = 0;
    else
      v4 = a2 == 0;
    if (!v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabling";
      v7 = "HALS_DefaultDeviceManager.cpp";
      v6 = 136315650;
      if (a2)
        v5 = "enabling";
      v8 = 1024;
      v9 = 1372;
      v10 = 2082;
      v11 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetLoggingIsEnabled: %{public}s default device logging", (uint8_t *)&v6, 0x1Cu);
    }
    *((_BYTE *)this + 97) = a2;
  }
}

void HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled(HALS_DefaultDeviceManager *this, int a2)
{
  BOOL v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (g_static_start_options != 1)
  {
    if (*((_BYTE *)this + 98) || (*((_BYTE *)this + 97) ? (v4 = a2 == 0) : (v4 = 1), !v4))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v5 = "disabling";
        v8 = "HALS_DefaultDeviceManager.cpp";
        v7 = 136315650;
        if (a2)
          v5 = "enabling";
        v9 = 1024;
        v10 = 1384;
        v11 = 2082;
        v12 = v5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled: %{public}s verbose default device logging", (uint8_t *)&v7, 0x1Cu);
      }
    }
    if (*((_BYTE *)this + 97))
      v6 = a2;
    else
      v6 = 0;
    *((_BYTE *)this + 98) = v6;
  }
}

void HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient(HALS_DefaultDeviceManager *this, int a2)
{
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 97) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = "No";
    v6 = "HALS_DefaultDeviceManager.cpp";
    v5 = 136315650;
    if (a2)
      v4 = "Yes";
    v7 = 1024;
    v8 = 1392;
    v9 = 2082;
    v10 = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient: %{public}s", (uint8_t *)&v5, 0x1Cu);
  }
  *((_BYTE *)this + 99) = a2;
  if (HALS_DefaultDeviceManager::FilterSettings(this))
  {
    HALS_DefaultDeviceManager::WriteSettings(this);
    HALS_DefaultDeviceManager::CheckForChanges(this);
  }
}

void HALS_LegacyTimebase::~HALS_LegacyTimebase(HALS_LegacyTimebase *this)
{
  HALS_LegacyTimebase::~HALS_LegacyTimebase(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t HALS_LegacyTimebase::get_clock_id(HALS_LegacyTimebase *this)
{
  return (uint64_t)this + 24;
}

_QWORD *HALS_LegacyTimebase::get_underlying_device_uid@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

UInt64 HALS_LegacyTimebase::get_current_time@<X0>(HALS_IOClock **this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 56) = 1;
  return HALS_IOClock::GetCurrentTime(this[7], (AudioTimeStamp *)a2);
}

double HALS_LegacyTimebase::get_last_zero_time_stamp@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 56) = 1;
  return result;
}

uint64_t HALS_LegacyTimebase::get_clock_domain(HALS_LegacyTimebase *this)
{
  return 0;
}

UInt64 HALS_LegacyTimebase::convert_sample_to_host_time(HALS_LegacyTimebase *this, Float64 a2)
{
  AudioTimeStamp v3;
  AudioTimeStamp v4;

  v4.mSampleTime = a2;
  memset(&v4.mHostTime, 0, 48);
  *(_QWORD *)&v4.mFlags = 1;
  memset(&v3, 0, 56);
  *(_QWORD *)&v3.mFlags = 2;
  HALS_IOClock::TranslateTime(*((_QWORD *)this + 7), &v4, &v3);
  return v3.mHostTime;
}

Float64 HALS_LegacyTimebase::convert_host_to_sample_time(HALS_LegacyTimebase *this, UInt64 a2)
{
  AudioTimeStamp v3;
  AudioTimeStamp v4;

  v4.mSampleTime = 0.0;
  v4.mHostTime = a2;
  memset(&v4.mRateScalar, 0, 40);
  *(_QWORD *)&v4.mFlags = 2;
  memset(&v3, 0, 56);
  *(_QWORD *)&v3.mFlags = 1;
  HALS_IOClock::TranslateTime(*((_QWORD *)this + 7), &v4, &v3);
  return v3.mSampleTime;
}

double HALS_LegacyTimebase::get_host_ticks_per_frame(HALS_LegacyTimebase *this)
{
  return *(double *)(*((_QWORD *)this + 7) + 40 * *(unsigned int *)(*((_QWORD *)this + 7) + 192) + 200);
}

uint64_t HALS_LegacyTimebase::is_running(HALS_LegacyTimebase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 672))(*((_QWORD *)this + 6));
}

void HALS_LegacyTimebase::get_state(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t HALS_LegacyTimebase::get_anchor_time(HALS_LegacyTimebase *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t HALS_LegacyTimebase::get_engine_info(uint64_t a1, int a2)
{
  _BOOL8 v3;
  unsigned int v4;

  v3 = a2 == 1;
  v4 = (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 48) + 344))(*(_QWORD *)(a1 + 48), v3);
  return v4 | (unint64_t)((*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 48) + 352))(*(_QWORD *)(a1 + 48), v3) << 32);
}

double HALS_LegacyTimebase::get_sample_rate(HALS_LegacyTimebase *this)
{
  double v1;
  double v2;
  BOOL v3;
  double result;

  v1 = *(double *)(*((_QWORD *)this + 7) + 40 * *(unsigned int *)(*((_QWORD *)this + 7) + 192) + 200);
  v2 = 24000000.0 / v1;
  v3 = v1 == 0.0;
  result = 0.0;
  if (!v3)
    return v2;
  return result;
}

double HALS_LegacyTimebase::get_rate_scalar(HALS_LegacyTimebase *this)
{
  return *(double *)(*((_QWORD *)this + 7) + 40 * *(unsigned int *)(*((_QWORD *)this + 7) + 192) + 216);
}

uint64_t HALS_LegacyTimebase::is_valid(HALS_LegacyTimebase *this)
{
  return 1;
}

uint64_t HALS_LegacyTimebase::supports_past_data(HALS_LegacyTimebase *this)
{
  return 0;
}

uint64_t HALS_LegacyTimebase::available_past_data(HALS_LegacyTimebase *this)
{
  return 0;
}

void HALS_LegacyTimebase::get_engine_ptr(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_LegacyTimebase::wait_for_time_to_start()
{
  return 0;
}

double HALS_LegacyTimebase::get_max_io_buffer_frame_size(HALS_LegacyTimebase *this)
{
  return 0.0;
}

void HALS_LegacyTimebase::get_private_transport_state(HALS_LegacyTimebase *this)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  NSObject **v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v8;
  v2 = *v7;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "HALS_LegacyTimebase.cpp";
    v9 = 1024;
    v10 = 216;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called outside of tests", (uint8_t *)&v7, 0x22u);
  }
  abort();
}

void AMCP::make_string_for_transport_type(AMCP *this@<X0>, _QWORD *a2@<X8>, int16x8_t a3@<Q0>)
{
  char *v3;
  int32x4_t v4;
  uint32x4_t v5;
  void *__p;
  char v7;

  if ((int)this <= 1700886113)
  {
    if ((int)this <= 1651271008)
    {
      switch((_DWORD)this)
      {
        case 0:
          v3 = "Unknown";
          goto LABEL_37;
        case 0x31333934:
          v3 = "FireWire";
          goto LABEL_37;
        case 0x61697270:
          v3 = "Airplay";
          goto LABEL_37;
      }
    }
    else if ((int)this > 1651275108)
    {
      if ((_DWORD)this == 1651275109)
      {
        v3 = "Bluetooth";
        goto LABEL_37;
      }
      if ((_DWORD)this == 1685090932)
      {
        v3 = "Display Port";
        goto LABEL_37;
      }
    }
    else
    {
      if ((_DWORD)this == 1651271009)
      {
        v3 = "Bluetooth LE";
        goto LABEL_37;
      }
      if ((_DWORD)this == 1651274862)
      {
        v3 = "Built-In";
        goto LABEL_37;
      }
    }
  }
  else if ((int)this > 1953002861)
  {
    if ((int)this > 1986622067)
    {
      if ((_DWORD)this == 1986622068)
      {
        v3 = "Virtual";
        goto LABEL_37;
      }
      if ((_DWORD)this == 1986818665)
      {
        v3 = "System Capture";
        goto LABEL_37;
      }
    }
    else
    {
      if ((_DWORD)this == 1953002862)
      {
        v3 = "Thunderbolt";
        goto LABEL_37;
      }
      if ((_DWORD)this == 1970496032)
      {
        v3 = "USB";
        goto LABEL_37;
      }
    }
  }
  else if ((int)this > 1835169138)
  {
    if ((_DWORD)this == 1835169139)
    {
      v3 = "Mikey Bus";
      goto LABEL_37;
    }
    if ((_DWORD)this == 1885563168)
    {
      v3 = "PCI";
      goto LABEL_37;
    }
  }
  else
  {
    if ((_DWORD)this == 1700886114)
    {
      v3 = "AVB";
      goto LABEL_37;
    }
    if ((_DWORD)this == 1751412073)
    {
      v3 = "HDMI";
LABEL_37:
      std::string::basic_string[abi:ne180100]<0>(a2, v3);
      return;
    }
  }
  a3.i32[0] = bswap32(this);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"Transport '%s'", (uint64_t)a2, &__p);
  if (v7 < 0)
    operator delete(__p);
}

BOOL HALB_ChangeSynchronizer::SetStateIf(AMCP::Log::Scope_Registry *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _BOOL8 result;
  unsigned int *v13;
  unsigned int v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  char *v17;
  char *v18;
  NSObject **v19;
  _BYTE v20[10];
  __int16 v21;
  int v22;
  __int16 v23;
  AMCP::Log::Scope_Registry *v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v4 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  while (1)
  {
    v7 = (char *)&HALB_ChangeSynchronizer::SetStateIf(HALB_ChangeSynchronizer::ChangeStatus,HALB_ChangeSynchronizer::ChangeStatus)::kTransitionTable
       + v4;
    if (*(_DWORD *)((char *)&HALB_ChangeSynchronizer::SetStateIf(HALB_ChangeSynchronizer::ChangeStatus,HALB_ChangeSynchronizer::ChangeStatus)::kTransitionTable
                   + v4) == a2
      && *((_DWORD *)v7 + 1) == a3)
    {
      break;
    }
    v4 += 8;
    if (v4 == 104)
      goto LABEL_5;
  }
  if (v7 == "N4AMCP16Stable_Raw_ClockE")
  {
LABEL_5:
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v20;
    v9 = *v19;
    if (*(_QWORD *)v20)
    {
      v10 = (unint64_t *)(*(_QWORD *)v20 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      v17 = HALB_ChangeSynchronizer::ChangeStatusToString(HALB_ChangeSynchronizer::ChangeStatus)::kStatusNames[v6];
      v18 = HALB_ChangeSynchronizer::ChangeStatusToString(HALB_ChangeSynchronizer::ChangeStatus)::kStatusNames[v5];
      LODWORD(v19) = 67110402;
      HIDWORD(v19) = v16;
      *(_WORD *)v20 = 2080;
      *(_QWORD *)&v20[2] = "HALB_ChangeSynchronizer.cpp";
      v21 = 1024;
      v22 = 82;
      v23 = 2048;
      v24 = a1;
      v25 = 2080;
      v26 = v17;
      v27 = 2080;
      v28 = v18;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::SetStateIf: Change synchronizer state change (%p) preventing unexpected state transition %s -> %s (DEBUG ONLY)", (uint8_t *)&v19, 0x36u);
      return 0;
    }
    return result;
  }
  v13 = (unsigned int *)((char *)a1 + 8);
  while (1)
  {
    v14 = __ldaxr(v13);
    if (v14 != a2)
      break;
    if (!__stlxr(a3, v13))
      return 1;
  }
  result = 0;
  __clrex();
  return result;
}

void sub_1B5A39CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5A39DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AMCP::Stable_Raw_Clock::~Stable_Raw_Clock(void **this)
{
  void **v1;

  *this = off_1E699AE48;
  v1 = this + 8;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(this + 14);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v1);
}

{
  void **v1;

  *this = off_1E699AE48;
  v1 = this + 8;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(this + 14);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v1);
  JUMPOUT(0x1B5E50688);
}

BOOL AMCP::Stable_Raw_Clock::has_time(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) != 0;
}

BOOL AMCP::Stable_Raw_Clock::has_reliable_time(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) > 1u;
}

BOOL AMCP::Stable_Raw_Clock::need_to_process_initial_stamps(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) == 0;
}

void AMCP::Stable_Raw_Clock::process_initial_time_stamps(uint64_t a1, uint64_t a2)
{
  AMCP::Log::Scope_Registry *v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::logic_error v30;
  std::logic_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint8_t buf[8];
  __int16 v39;
  char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  _BYTE v44[14];
  const char *v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      v39 = 2080;
      v40 = "Stable_Raw_Clock.cpp";
      v41 = 1024;
      v42 = 68;
      v43 = 2080;
      *(_QWORD *)v44 = "not (need_to_process_initial_stamps())";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v31, &v30);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v32 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v44[6] = "virtual void AMCP::Stable_Raw_Clock::process_initial_time_stamps(const Zero_Time_Stamp &)";
    v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Stable_Raw_Clock.cpp";
    v46 = 68;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    v26 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  v6 = (double)v5;
  v7 = *(double *)a2 + v6 * -2.0;
  v8 = *(double *)(a1 + 40) * v6;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(double *)&v22 = v7;
  *((_QWORD *)&v22 + 1) = v9 - 2 * (unint64_t)v8;
  v23 = v10;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
  LODWORD(v11) = *(_DWORD *)(a1 + 16);
  v12 = (double)v11;
  v13 = *(_QWORD *)(a2 + 8) - (unint64_t)(*(double *)(a1 + 40) * v12);
  *(double *)&v20 = *(double *)a2 - v12;
  *((_QWORD *)&v20 + 1) = v13;
  v21 = v10;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v20);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
}

void sub_1B5A3A1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v41;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  *(_QWORD *)(v39 - 112) = &unk_1E69A2000;
  v41 = *(_QWORD *)(v39 - 104);
  if (v41 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41))
    *(_QWORD *)(v39 - 104) = 0;
  MEMORY[0x1B5E500E8](v39 - 128);
  a36 = &unk_1E69A2000;
  if (a37 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a37 + 32))(a37))
    a37 = 0;
  MEMORY[0x1B5E500E8](&a34);
  MEMORY[0x1B5E500DC](&a32);
  if (a31 < 0)
    operator delete(a26);
  if (v38)
    __cxa_free_exception(v37);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v39 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Stable_Raw_Clock::process_time_stamp(AMCP::Time_Stamp_Historian *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if ((*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(_QWORD *)a1 + 32))(a1))
  {
    (*(void (**)(AMCP::Time_Stamp_Historian *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
  }
  else
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 15);
    boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)a1 + 8, &v4);
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 15);
  }
  ++*((_DWORD *)a1 + 6);
  AMCP::Time_Stamp_Historian::calculate_and_save_delta(a1);
}

unint64_t AMCP::Stable_Raw_Clock::calculate_early_threshold(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = this + 15;
  os_unfair_lock_lock(this + 15);
  if (*(_QWORD *)&this[24]._os_unfair_lock_opaque < 3uLL)
    v3 = -48000;
  else
    v3 = *(_QWORD *)(boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(&this[16]._os_unfair_lock_opaque, 2)+ 8)- 48000;
  os_unfair_lock_unlock(v2);
  LODWORD(v4) = this[4];
  return v3 + (unint64_t)(*(double *)&this[12]._os_unfair_lock_opaque * (double)v4);
}

void sub_1B5A3A3F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<HALS_IOStreamDSP::InputChannelData>::__base_destruct_at_end[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t i;

  v3 = result;
  for (i = result[1]; i != a2; i -= 88)
  {
    std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(i - 8), 0);
    result = std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)(i - 48));
  }
  v3[1] = a2;
  return result;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B5A3A4B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697F7F0;
  return result;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697F7F0;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN16HALS_IOStreamDSP15AllocateBuffersEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_11CaptureFileE17AudioCapturerModeE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::target_type()
{
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E697F870;
  return result;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697F870;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN16HALS_IOStreamDSP15AllocateBuffersEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_11CaptureFileE17AudioCapturerModeE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t HALS_IOStreamDSP::SetDSPProperty(HALS_IOStreamDSP *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  _BYTE v9[37];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)this;
  if (result)
  {
    result = DSPGraph::Graph::hasProperty((DSPGraph::Graph *)result);
    if ((_DWORD)result)
    {
      v9[0] = BYTE3(a2);
      v9[1] = BYTE2(a2);
      v9[2] = BYTE1(a2);
      v9[3] = a2;
      v9[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v11 = "HALS_IOStreamDSP.cpp";
        v12 = 1024;
        v13 = 255;
        v14 = 2080;
        v15 = v9;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::SetDSPProperty property %s", buf, 0x1Cu);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, const void *))(**(_QWORD **)this + 56))(*(_QWORD *)this, a2, a3, a4);
      return 1;
    }
  }
  return result;
}

void sub_1B5A3A7A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, __int128 buf, __int128 a14, __int128 a15, __int128 a16)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a15);
      DSPGraph::Exception::print();
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315650;
        *(_QWORD *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 262;
        WORD1(a14) = 2080;
        *(_QWORD *)((char *)&a14 + 4) = &a12;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSPGraph::Exception while setting property %s in HALS_IOStreamDSP::SetDSPProperty()", (uint8_t *)&buf, 0x1Cu);
      }
      std::ostringstream::~ostringstream((uint64_t)&a15);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a15) = 136315650;
      *(_QWORD *)((char *)&a15 + 4) = "HALS_IOStreamDSP.cpp";
      WORD6(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 14) = 267;
      WORD1(a16) = 2080;
      *(_QWORD *)((char *)&a16 + 4) = &a12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unknown exception while setting property %s in HALS_IOStreamDSP::SetDSPProperty()", (uint8_t *)&a15, 0x1Cu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5A3A76CLL);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DSPGraph::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN8DSPGraph5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void HALS_IOStreamDSP::AddInputStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = (a2 - a1) >> 4;
  if (v6 <= a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136315906;
      v9 = "HALS_IOStreamDSP.cpp";
      v10 = 1024;
      v11 = 416;
      v12 = 2048;
      v13 = a5;
      v14 = 2048;
      v15 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Cannot add new stream to index %lu because we expect only %lu streams", (uint8_t *)&v8, 0x26u);
    }
  }
  else
  {
    v7 = (_QWORD *)(a1 + 16 * a5);
    *v7 = a3;
    v7[1] = a4;
  }
}

unint64_t HALS_DSPSettings::HasValidDSPString(HALS_DSPSettings *this, const __CFDictionary *a2)
{
  unint64_t v2;
  CFTypeRef v4;
  char v5;
  CFMutableDictionaryRef Mutable;
  __int16 v7;

  v2 = (unint64_t)this;
  if (this)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v7 = 257;
    CACFDictionary::operator=((uint64_t)&Mutable, (const void *)v2);
    v4 = 0;
    v5 = 1;
    CACFDictionary::GetCACFString(&Mutable, CFSTR("dsp graph"), &v4);
    v2 = v4 != 0;
    CACFString::~CACFString((CACFString *)&v4);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  return v2;
}

void sub_1B5A3ABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  CACFString::~CACFString((CACFString *)&a9);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a11);
  _Unwind_Resume(a1);
}

uint64_t CACFDictionary::operator=(uint64_t a1, const void *a2)
{
  const void *v4;
  int v5;

  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    return a1;
  }
  v4 = *(const void **)a1;
  if (!*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    if (!a2)
      return a1;
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  v5 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 9) = 0;
  if (a2 && v5)
    goto LABEL_8;
  return a1;
}

void HALS_DSPSettings::FromDictionary(HALS_DSPSettings *this, const __CFDictionary *a2)
{
  const __CFDictionary **v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  void **v9;
  const void *v10;
  CFTypeRef v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int data;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  CFTypeRef v27;
  void (**v28)(OS::CF::Dictionary *__hidden);
  CFTypeRef v29;
  void (**v30)(OS::CF::Dictionary *__hidden);
  CFTypeRef v31;
  void (**v32)(OS::CF::Dictionary *__hidden);
  CFTypeRef v33;
  _QWORD v34[2];
  CFTypeRef v35;
  __int16 v36;
  unsigned int v37;
  unsigned int v38;
  CFTypeRef v39;
  __int16 v40;
  CFTypeRef v41;
  __int16 v42;
  CFTypeRef v43;
  __int16 v44;
  CFTypeRef cf;
  char v46;
  const __CFDictionary *Mutable;
  __int16 v48;
  unsigned int v49;
  std::string buf;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v48 = 257;
    v4 = (const __CFDictionary **)CACFDictionary::operator=((uint64_t)&Mutable, a2);
    cf = 0;
    v46 = 1;
    CACFDictionary::GetCACFString(v4, CFSTR("dsp graph"), &cf);
    v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v44 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, CFSTR("au tuning strip"), (CACFDictionary *)&v43);
    v41 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v42 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, CFSTR("property strip"), (CACFDictionary *)&v41);
    v39 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    v40 = 257;
    CACFDictionary::GetCACFArray(&Mutable, CFSTR("initialization properties"), (CACFArray *)&v39);
    v38 = 0;
    CACFDictionary::GetUInt32((uint64_t)Mutable, CFSTR("client channel count"), &v38);
    v37 = 0;
    CACFDictionary::GetUInt32((uint64_t)Mutable, CFSTR("target stream"), &v37);
    v35 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v36 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, CFSTR("dsp graph string substitutions"), (CACFDictionary *)&v35);
    if (cf)
    {
      CFRetain(cf);
      v34[0] = &off_1E69A0F60;
      v34[1] = cf;
      if (v43)
      {
        CFRetain(v43);
        v5 = v43;
      }
      else
      {
        v5 = 0;
      }
      v32 = &off_1E69A0DE0;
      v33 = v5;
      if (v41)
      {
        CFRetain(v41);
        v6 = v41;
      }
      else
      {
        v6 = 0;
      }
      v30 = &off_1E69A0DE0;
      v31 = v6;
      if (v35)
      {
        CFRetain(v35);
        v7 = v35;
      }
      else
      {
        v7 = 0;
      }
      v28 = &off_1E69A0DE0;
      v29 = v7;
      if (v39)
      {
        CFRetain(v39);
        v8 = v39;
      }
      else
      {
        v8 = 0;
      }
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v27, v8);
      *((_QWORD *)this + 2) = 0;
      *(_OWORD *)this = 0u;
      *((_QWORD *)this + 3) = &off_1E69A0DE0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = &off_1E69A0DE0;
      *((_QWORD *)this + 9) = 0;
      v9 = (void **)((char *)this + 72);
      *((_OWORD *)this + 3) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_QWORD *)this + 13) = &off_1E69A0DE0;
      *((_QWORD *)this + 14) = 0;
      OS::CF::String::AsStdString(&buf, (uint64_t)v34);
      if (*((char *)this + 23) < 0)
        operator delete(*(void **)this);
      *(std::string *)this = buf;
      OS::CF::UntypedObject::operator=((uint64_t)this + 24, v33);
      OS::CF::UntypedObject::operator=((uint64_t)this + 40, v31);
      v10 = (const void *)*((_QWORD *)this + 7);
      v11 = v27;
      *((_QWORD *)this + 7) = v27;
      if (v11)
        CFRetain(v11);
      if (v10)
        CFRelease(v10);
      if (CFDictionaryContainsKey(Mutable, CFSTR("input stream busses")))
      {
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 257;
        CACFDictionary::GetCACFArray(&Mutable, CFSTR("input stream busses"), (CACFArray *)&buf);
        v12 = 0;
        v13 = 0;
        v26 = 0u;
        while (1)
        {
          data = buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__r.__words[0])
            data = CFArrayGetCount((CFArrayRef)buf.__r_.__value_.__l.__data_);
          if (v13 >= data)
            break;
          v49 = 0;
          if (CACFArray::GetUInt32((CFArrayRef *)&buf, v13, &v49))
          {
            v15 = *((_QWORD *)&v26 + 1);
            if (*((_QWORD *)&v26 + 1) >= v12)
            {
              v17 = (void *)v26;
              v18 = (uint64_t)(*((_QWORD *)&v26 + 1) - v26) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v12 - v26) >> 1 > v19)
                v19 = (uint64_t)(v12 - v26) >> 1;
              if (v12 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v19;
              if (v20)
                v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
              else
                v21 = 0;
              v22 = (unsigned int *)(v20 + 4 * v18);
              *v22 = v49;
              v16 = (uint64_t)(v22 + 1);
              while (v15 != (_QWORD)v26)
              {
                v23 = *(_DWORD *)(v15 - 4);
                v15 -= 4;
                *--v22 = v23;
              }
              v12 = v20 + 4 * v21;
              *(_QWORD *)&v26 = v22;
              if (v17)
                operator delete(v17);
            }
            else
            {
              **((_DWORD **)&v26 + 1) = v49;
              v16 = *((_QWORD *)&v26 + 1) + 4;
            }
            *(_QWORD *)&v24 = v26;
            *((_QWORD *)&v24 + 1) = v16;
            v26 = v24;
          }
          ++v13;
        }
        CACFArray::~CACFArray((CACFArray *)&buf);
      }
      else
      {
        v12 = 0;
        v26 = 0u;
      }
      v25 = *v9;
      if (*v9)
      {
        *((_QWORD *)this + 10) = v25;
        operator delete(v25);
        *v9 = 0;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 11) = 0;
      }
      *(_OWORD *)((char *)this + 72) = v26;
      *((_QWORD *)this + 11) = v12;
      *((_DWORD *)this + 16) = v38;
      *((_DWORD *)this + 24) = v37;
      OS::CF::UntypedObject::operator=((uint64_t)this + 104, v29);
      if (v27)
        CFRelease(v27);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v30);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v32);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v34);
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOStreamDSP.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 658;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSP graph is missing from DSP description", (uint8_t *)&buf, 0x12u);
      }
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      *((_QWORD *)this + 3) = &off_1E69A0DE0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 5) = &off_1E69A0DE0;
      *((_DWORD *)this + 16) = 0;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 24) = 0;
      *((_QWORD *)this + 13) = &off_1E69A0DE0;
      *((_QWORD *)this + 14) = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
    CACFArray::~CACFArray((CACFArray *)&v39);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v41);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v43);
    CACFString::~CACFString((CACFString *)&cf);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  else
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_QWORD *)this + 3) = &off_1E69A0DE0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = &off_1E69A0DE0;
    *((_DWORD *)this + 16) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 24) = 0;
    *((_QWORD *)this + 13) = &off_1E69A0DE0;
    *((_QWORD *)this + 14) = 0;
  }
}

void sub_1B5A3B224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_DSPSettings::~HALS_DSPSettings(HALS_DSPSettings *this)
{
  void *v2;
  const void *v3;

  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 104));
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 40));
  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 24));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t HALS_IOStreamGrid::apply_to_streams(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E697F8F0;
  v6[1] = a2;
  v7 = v6;
  v2 = VisitableVector<HALS_IOStackDescription>::apply<>(a1, v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1B5A3B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t VisitableVector<HALS_IOStackDescription>::apply<>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v13);
    }
    else
    {
      v14 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v14 = 0;
  }
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_14:
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    while (1)
    {
      if ((v7 & 1) != 0)
        v6 = 0;
      else
        ++v6;
      v12[0] = v4;
      v12[1] = v6;
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      v8 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v12);
      if ((_DWORD)v8)
        break;
      v7 = 0;
      v4 += 32;
      if (v4 == v5)
        goto LABEL_14;
    }
  }
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_19;
  }
  if (v14)
  {
    v10 = 5;
LABEL_19:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_1B5A3B5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E697F8F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E697F8F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = a2[1];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v23, *(_QWORD *)(a1 + 8));
  if (!v24)
  {
    v26 = 0;
    v32 = v2;
    v5 = v33;
LABEL_9:
    v6 = 0;
    v34 = 0;
    v27 = v32;
    v7 = v28;
LABEL_14:
    v29 = v6;
    goto LABEL_15;
  }
  if (v24 == v23)
  {
    v26 = v25;
    (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v25);
    v4 = v26;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(void))(*v24 + 16))();
    v26 = v4;
  }
  v32 = v2;
  v5 = v33;
  if (!v4)
    goto LABEL_9;
  if (v4 == v25)
  {
    v34 = v33;
    (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v33);
    v6 = v34;
  }
  else
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    v34 = v6;
  }
  v27 = v32;
  v7 = v28;
  if (!v6)
    goto LABEL_14;
  if (v6 != v33)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_14;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v28);
LABEL_15:
  v31 = 0;
  v8 = operator new(0x30uLL);
  v9 = v8;
  v10 = v27;
  v11 = v29;
  *v8 = &off_1E6991EA8;
  v8[1] = v10;
  if (!v11)
  {
    v12 = v8 + 5;
    goto LABEL_19;
  }
  if (v11 != v28)
  {
    v12 = &v29;
    v8[5] = v11;
LABEL_19:
    *v12 = 0;
    goto LABEL_21;
  }
  v8[5] = v8 + 2;
  (*(void (**)(_QWORD *))(v28[0] + 24))(v28);
LABEL_21:
  v31 = v9;
  v13 = VisitableVector<HALS_IOStreamGroup>::apply<>((uint64_t *)(v3 + 8), v30);
  v14 = v31;
  if (v31 == v30)
  {
    v15 = 4;
    v14 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  if (v29 == v28)
  {
    v16 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_31;
    v16 = 5;
    v7 = v29;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v16))(v7);
LABEL_31:
  if (v34 == v33)
  {
    v17 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_36;
    v17 = 5;
    v5 = v34;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v17))(v5);
LABEL_36:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_41;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_41:
  v20 = v24;
  if (v24 == v23)
  {
    v21 = 4;
    v20 = v23;
    goto LABEL_45;
  }
  if (v24)
  {
    v21 = 5;
LABEL_45:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return v13;
}

void sub_1B5A3B958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN17HALS_IOStreamGrid16apply_to_streamsENSt3__18functionIFimR17HALS_IOStreamInfoEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target_type()
{
}

void ADS::Box::~Box(ADS::Box *this)
{
  OS::CF::UntypedObject *v2;

  *(_QWORD *)this = off_1E697F970;
  v2 = (ADS::Box *)((char *)this + 56);
  OS::CF::UntypedObject::~UntypedObject((ADS::Box *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject(v2);
  ADS::BaseObject::~BaseObject(this);
}

{
  OS::CF::UntypedObject *v2;

  *(_QWORD *)this = off_1E697F970;
  v2 = (ADS::Box *)((char *)this + 56);
  OS::CF::UntypedObject::~UntypedObject((ADS::Box *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject(v2);
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::Box::HasProperty(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1651536494)
  {
    if (mSelector <= 1651007860)
    {
      v5 = mSelector == 1650682915;
      v6 = 1650751011;
    }
    else
    {
      v5 = mSelector == 1651007861 || mSelector == 1651010921;
      v6 = 1651013225;
    }
  }
  else if (mSelector > 1652060013)
  {
    v5 = mSelector == 1652060014 || mSelector == 1819173229;
    v6 = 1953653102;
  }
  else
  {
    v5 = mSelector == 1651536495 || mSelector == 1651861860;
    v6 = 1652060006;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::Box::IsPropertySettable(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1651536494)
  {
    if (mSelector <= 1652060005)
    {
      v5 = mSelector == 1651536495;
      v6 = 1651861860;
    }
    else
    {
      v5 = mSelector == 1652060006 || mSelector == 1652060014;
      v6 = 1953653102;
    }
  }
  else if (mSelector <= 1651007860)
  {
    v5 = mSelector == 1650682915;
    v6 = 1650751011;
  }
  else
  {
    v5 = mSelector == 1651007861 || mSelector == 1651010921;
    v6 = 1651013225;
  }
  if (v5 || mSelector == v6)
    return 0;
  else
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::Box::GetPropertyDataSize(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector;
  uint64_t v7;
  unsigned __int16 v8;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1651536494)
  {
    if (mSelector <= 1651007860)
    {
      if (mSelector == 1650682915 || mSelector == 1650751011)
        return 0;
    }
    else if (mSelector == 1651007861 || mSelector == 1651010921 || mSelector == 1651013225)
    {
      return 4;
    }
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  v7 = 8;
  if (mSelector <= 1652060013)
  {
    if (mSelector != 1651536495)
    {
      if (mSelector != 1651861860)
      {
        v8 = 28518;
        goto LABEL_18;
      }
      return v7;
    }
    return 4;
  }
  if (mSelector == 1953653102)
    return 4;
  if (mSelector == 1819173229)
    return v7;
  v8 = 28526;
LABEL_18:
  if (mSelector == (v8 | 0x62780000))
    return 4;
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::Box::GetPropertyData(const __CFString **this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  signed int mSelector;
  const __CFAllocator *v13;
  const __CFString *v14;
  unsigned int v15;
  NSObject *v17;
  const char *v18;
  _DWORD *exception;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1651536494)
  {
    if (mSelector <= 1651007860)
    {
      if (mSelector == 1650682915 || mSelector == 1650751011)
      {
        *a8 = 0;
        return;
      }
      goto LABEL_38;
    }
    if (mSelector != 1651007861 && mSelector != 1651010921 && mSelector != 1651013225)
    {
LABEL_38:
      ADS::BaseObject::GetPropertyData((ADS::BaseObject *)this, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    goto LABEL_21;
  }
  if (mSelector > 1652060013)
  {
    if (mSelector != 1652060014)
    {
      if (mSelector != 1953653102)
      {
        if (mSelector != 1819173229)
          goto LABEL_38;
        if (a7 > 3)
        {
          v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
          v14 = this[8];
LABEL_32:
          *(_QWORD *)a9 = CFStringCreateCopy(v13, v14);
          v15 = 8;
          goto LABEL_33;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v20 = 136315394;
          v21 = "ADS_Box.cpp";
          v22 = 1024;
          v23 = 168;
          v17 = MEMORY[0x1E0C81028];
          v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of kAudioObjectPropertyName for the box";
LABEL_41:
          _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
        }
LABEL_42:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      if (a7 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        v20 = 136315394;
        v21 = "ADS_Box.cpp";
        v22 = 1024;
        v23 = 184;
        v17 = MEMORY[0x1E0C81028];
        v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of a AudioBox Property for the box";
        goto LABEL_41;
      }
LABEL_22:
      *(_DWORD *)a9 = 0;
      goto LABEL_23;
    }
LABEL_21:
    if (a7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_42;
      v20 = 136315394;
      v21 = "ADS_Box.cpp";
      v22 = 1024;
      v23 = 191;
      v17 = MEMORY[0x1E0C81028];
      v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of a AudioBox Property for the box";
      goto LABEL_41;
    }
    goto LABEL_22;
  }
  if (mSelector == 1651536495)
    goto LABEL_21;
  if (mSelector == 1651861860)
  {
    if (a7 > 3)
    {
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
      v14 = this[10];
      goto LABEL_32;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v20 = 136315394;
      v21 = "ADS_Box.cpp";
      v22 = 1024;
      v23 = 175;
      v17 = MEMORY[0x1E0C81028];
      v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of kAudioBoxPropertyBoxUID for the box";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if (mSelector != 1652060006)
    goto LABEL_38;
  *(_DWORD *)a9 = 2003329396;
LABEL_23:
  v15 = 4;
LABEL_33:
  *a8 = v15;
}

void ADS::Box::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

AMCP::Log::Scope_Registry *AMCP::System_Context::System_Context(AMCP::Log::Scope_Registry *a1)
{
  void **v3[3];
  _QWORD v4[3];
  void ***v5;

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  AMCP::System_Context::System_Context(a1, (uint64_t)v4, (uint64_t)v3);
  v5 = v3;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

{
  void **v3[3];
  _QWORD v4[3];
  void ***v5;

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  AMCP::System_Context::System_Context(a1, (uint64_t)v4, (uint64_t)v3);
  v5 = v3;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

{
  _QWORD *v2;
  void **v4[3];
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  CFTypeRef v9[2];

  v9[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v9, "*");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v5 = operator new(8uLL);
  v6 = v5;
  v2 = v5 + 1;
  v7 = v5 + 1;
  std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v5, v9[0]);
  v6 = v2;
  memset(v4, 0, sizeof(v4));
  AMCP::System_Context::System_Context(a1, (uint64_t)&v5, (uint64_t)v4);
  v8 = v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v4[0] = (void **)&v5;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v9[0])
    CFRelease(v9[0]);
  return a1;
}

{
  _QWORD *v2;
  void **v4[3];
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  CFTypeRef v9[2];

  v9[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v9, "*");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v5 = operator new(8uLL);
  v6 = v5;
  v2 = v5 + 1;
  v7 = v5 + 1;
  std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v5, v9[0]);
  v6 = v2;
  memset(v4, 0, sizeof(v4));
  AMCP::System_Context::System_Context(a1, (uint64_t)&v5, (uint64_t)v4);
  v8 = v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v4[0] = (void **)&v5;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v9[0])
    CFRelease(v9[0]);
  return a1;
}

{
  _QWORD *v2;
  void **v4[3];
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  CFTypeRef v9[2];

  v9[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v9, "com.apple.audio.Null-Driver");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v5 = operator new(8uLL);
  v6 = v5;
  v2 = v5 + 1;
  v7 = v5 + 1;
  std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v5, v9[0]);
  v6 = v2;
  memset(v4, 0, sizeof(v4));
  AMCP::System_Context::System_Context(a1, (uint64_t)&v5, (uint64_t)v4);
  v8 = v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v4[0] = (void **)&v5;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v9[0])
    CFRelease(v9[0]);
  return a1;
}

{
  _QWORD *v2;
  void **v4[3];
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  CFTypeRef v9[2];

  v9[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v9, "com.apple.audio.Null-Driver");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v5 = operator new(8uLL);
  v6 = v5;
  v2 = v5 + 1;
  v7 = v5 + 1;
  std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v5, v9[0]);
  v6 = v2;
  memset(v4, 0, sizeof(v4));
  AMCP::System_Context::System_Context(a1, (uint64_t)&v5, (uint64_t)v4);
  v8 = v4;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v4[0] = (void **)&v5;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v9[0])
    CFRelease(v9[0]);
  return a1;
}

{
  char *v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void ***v13;
  _BYTE v14[8];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v14, "com.apple.audio.Null-Driver");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v15, "com.apple.audio.Meta-Driver");
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = &v10;
  LOBYTE(v8) = 0;
  v2 = (char *)operator new(0x10uLL);
  v3 = 0;
  v10 = v2;
  v11 = v2;
  v12 = v2 + 16;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v14[v3]);
    v3 += 8;
  }
  while (v3 != 16);
  v11 = v2 + 16;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  AMCP::System_Context::System_Context(a1, (uint64_t)&v10, (uint64_t)&v7);
  v13 = (void ***)&v7;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v7 = &v10;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  for (i = 8; i != -8; i -= 8)
  {
    v5 = *(const void **)&v14[i];
    if (v5)
      CFRelease(v5);
  }
  return a1;
}

{
  char *v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void ***v13;
  _BYTE v14[8];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v14, "com.apple.audio.Null-Driver");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v15, "com.apple.audio.Meta-Driver");
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = &v10;
  LOBYTE(v8) = 0;
  v2 = (char *)operator new(0x10uLL);
  v3 = 0;
  v10 = v2;
  v11 = v2;
  v12 = v2 + 16;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v14[v3]);
    v3 += 8;
  }
  while (v3 != 16);
  v11 = v2 + 16;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  AMCP::System_Context::System_Context(a1, (uint64_t)&v10, (uint64_t)&v7);
  v13 = (void ***)&v7;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v7 = &v10;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  for (i = 8; i != -8; i -= 8)
  {
    v5 = *(const void **)&v14[i];
    if (v5)
      CFRelease(v5);
  }
  return a1;
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t i;
  void **v7;
  uint64_t j;
  const void *v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char **v17;
  char v18;
  char **v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v25, "com.apple.iokit.IOAudio1");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "com.apple.audio.Null-Driver");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v27, "com.apple.audio.Meta-Driver");
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v19 = &v14;
  v20[0] = 0;
  v2 = (char *)operator new(0x18uLL);
  v3 = 0;
  v14 = v2;
  v15 = v2;
  v16 = v2 + 24;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v25[v3]);
    v3 += 8;
  }
  while (v3 != 24);
  v15 = v2 + 24;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, "com.apple.audio.BluetoothAudioPlugIn");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v20, "com.apple.audio.Halogen");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v21, "com.apple.audio.AppleTimeSyncAudioClock");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v22, "com.apple.iSightAudio");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, "com.apple.audio.AppleAVBAudio");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v24, "com.apple.audio.BridgeAudioSP");
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v17 = &v11;
  v18 = 0;
  v4 = (char *)operator new(0x30uLL);
  v5 = 0;
  v11 = v4;
  v12 = v4;
  v13 = v4 + 48;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v4[v5], *(CFTypeRef *)&v20[v5 - 8]);
    v5 += 8;
  }
  while (v5 != 48);
  v12 = v4 + 48;
  AMCP::System_Context::System_Context(a1, (uint64_t)&v14, (uint64_t)&v11);
  v17 = &v11;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  for (i = 40; i != -8; i -= 8)
  {
    v7 = *(void ***)&v20[i - 8];
    if (v7)
      CFRelease(v7);
  }
  v19 = &v14;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (j = 16; j != -8; j -= 8)
  {
    v9 = *(const void **)&v25[j];
    if (v9)
      CFRelease(v9);
  }
  return a1;
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t i;
  void **v7;
  uint64_t j;
  const void *v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char **v17;
  char v18;
  char **v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v25, "com.apple.iokit.IOAudio1");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "com.apple.audio.Null-Driver");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v27, "com.apple.audio.Meta-Driver");
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v19 = &v14;
  v20[0] = 0;
  v2 = (char *)operator new(0x18uLL);
  v3 = 0;
  v14 = v2;
  v15 = v2;
  v16 = v2 + 24;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v25[v3]);
    v3 += 8;
  }
  while (v3 != 24);
  v15 = v2 + 24;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, "com.apple.audio.BluetoothAudioPlugIn");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v20, "com.apple.audio.Halogen");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v21, "com.apple.audio.AppleTimeSyncAudioClock");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v22, "com.apple.iSightAudio");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, "com.apple.audio.AppleAVBAudio");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v24, "com.apple.audio.BridgeAudioSP");
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v17 = &v11;
  v18 = 0;
  v4 = (char *)operator new(0x30uLL);
  v5 = 0;
  v11 = v4;
  v12 = v4;
  v13 = v4 + 48;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v4[v5], *(CFTypeRef *)&v20[v5 - 8]);
    v5 += 8;
  }
  while (v5 != 48);
  v12 = v4 + 48;
  AMCP::System_Context::System_Context(a1, (uint64_t)&v14, (uint64_t)&v11);
  v17 = &v11;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  for (i = 40; i != -8; i -= 8)
  {
    v7 = *(void ***)&v20[i - 8];
    if (v7)
      CFRelease(v7);
  }
  v19 = &v14;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (j = 16; j != -8; j -= 8)
  {
    v9 = *(const void **)&v25[j];
    if (v9)
      CFRelease(v9);
  }
  return a1;
}

{
  void **v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;
  void **v7;
  void **v8;
  void **v9;
  _QWORD v10[3];
  void ***v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v13, "com.apple.iokit.IOAudio1");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v14, "com.apple.iokit.IOAudio2");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v15, "com.apple.audio.Null-Driver");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v2 = (void **)operator new(0x18uLL);
  v3 = 0;
  v7 = v2;
  v8 = v2;
  v9 = v2 + 3;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v13[v3 * 8]);
    ++v3;
  }
  while (v3 != 3);
  v8 = v2 + 3;
  AMCP::System_Context::System_Context(a1, (uint64_t)v10, (uint64_t)&v7);
  v11 = &v7;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 16; i != -8; i -= 8)
  {
    v5 = *(const void **)&v13[i];
    if (v5)
      CFRelease(v5);
  }
  v7 = (void **)v10;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

{
  void **v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;
  void **v7;
  void **v8;
  void **v9;
  _QWORD v10[3];
  void ***v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v13, "com.apple.iokit.IOAudio1");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v14, "com.apple.iokit.IOAudio2");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v15, "com.apple.audio.Null-Driver");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v2 = (void **)operator new(0x18uLL);
  v3 = 0;
  v7 = v2;
  v8 = v2;
  v9 = v2 + 3;
  do
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFTypeRef *)&v13[v3 * 8]);
    ++v3;
  }
  while (v3 != 3);
  v8 = v2 + 3;
  AMCP::System_Context::System_Context(a1, (uint64_t)v10, (uint64_t)&v7);
  v11 = &v7;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 16; i != -8; i -= 8)
  {
    v5 = *(const void **)&v13[i];
    if (v5)
      CFRelease(v5);
  }
  v7 = (void **)v10;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

void sub_1B5A3C1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::System_Context::System_Context(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *v6;
  int isa;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  NSObject *v14;
  os_log_type_t v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  dispatch_object_t *v63;
  NSObject **p_shared_weak_owners;
  NSObject **v65;
  uint64_t shared_weak_owners;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  NSObject **v75;
  NSObject *v76;
  NSObject **v77;
  NSObject *v78;
  NSObject **v79;
  __int128 v80;
  std::__shared_weak_count *shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  AMCP::Log::Scope_Registry *v102;
  int v103;
  std::__shared_weak_count *v104;
  NSObject *v105;
  unint64_t *v106;
  unint64_t v107;
  _opaque_pthread_t *v108;
  mach_port_t v109;
  NSObject *v110;
  os_log_type_t v111;
  std::__shared_weak_count *v112;
  NSObject *v113;
  unint64_t *v114;
  unint64_t v115;
  _opaque_pthread_t *v116;
  mach_port_t v117;
  std::__shared_weak_count *v118;
  NSObject *v119;
  unint64_t *v120;
  unint64_t v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v128;
  NSObject *v129;
  unint64_t *v130;
  unint64_t v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  std::__shared_weak_count *v134;
  NSObject *v135;
  unint64_t *v136;
  unint64_t v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  std::__shared_weak_count *v140;
  NSObject *v141;
  unint64_t *v142;
  unint64_t v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  dispatch_object_t object;
  __int128 v152;
  __int128 v153;
  _BYTE buf[18];
  __int16 v155;
  int v156;
  __int16 v157;
  const char *v158;
  pthread_attr_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
  isa = (int)object[2].isa;
  switch(isa)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v22 = *(std::__shared_weak_count **)&buf[8];
      v23 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 191;
        v14 = v23;
        v15 = OS_LOG_TYPE_INFO;
        goto LABEL_25;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v16 = *(std::__shared_weak_count **)&buf[8];
      v17 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 191;
        _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = *(std::__shared_weak_count **)&buf[8];
      v9 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 191;
        v14 = v9;
        v15 = OS_LOG_TYPE_DEFAULT;
LABEL_25:
        _os_log_impl(&dword_1B57BA000, v14, v15, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
  }
  v28 = (std::__shared_weak_count *)v152;
  if ((_QWORD)v152)
  {
    v29 = (unint64_t *)(v152 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  kdebug_trace();
  v31 = (char *)operator new(0xA8uLL);
  v32 = (std::__shared_weak_count *)v31;
  *((_QWORD *)v31 + 1) = 0;
  v33 = (unint64_t *)(v31 + 8);
  *((_QWORD *)v31 + 2) = 0;
  *(_QWORD *)v31 = &off_1E69721D0;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *(_OWORD *)(v31 + 72) = 0u;
  *(_OWORD *)(v31 + 88) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  *((_QWORD *)v31 + 13) = 850045863;
  *((_OWORD *)v31 + 7) = 0u;
  *((_OWORD *)v31 + 8) = 0u;
  *((_OWORD *)v31 + 9) = 0u;
  *((_QWORD *)v31 + 20) = 0;
  *(_QWORD *)&v150 = v31 + 24;
  *((_QWORD *)&v150 + 1) = v31;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  v35 = (unint64_t *)(v31 + 16);
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  *((_QWORD *)v31 + 3) = v31 + 24;
  *((_QWORD *)v31 + 4) = v31;
  do
    v37 = __ldaxr(v33);
  while (__stlxr(v37 - 1, v33));
  if (!v37)
  {
    (*(void (**)(char *))(*(_QWORD *)v31 + 16))(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP4Core6BrokerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
  v38 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v39 = *(std::__shared_weak_count **)(v150 + 24);
  *(_OWORD *)(v150 + 16) = v38;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = operator new();
  v46 = v45;
  if (*((_QWORD *)&v150 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    *(_QWORD *)v45 = &off_1E6972170;
    *(_OWORD *)(v45 + 8) = v150;
    do
      v49 = __ldxr(v47);
    while (__stxr(v49 + 1, v47));
  }
  else
  {
    *(_QWORD *)v45 = &off_1E6972170;
    *(_QWORD *)(v45 + 8) = v150;
    *(_QWORD *)(v45 + 16) = 0;
  }
  v50 = (_QWORD *)operator new();
  *v50 = &off_1E6972220;
  v50[1] = 0;
  v50[2] = 0;
  v50[3] = v46;
  *(_QWORD *)&v51 = v46;
  *((_QWORD *)&v51 + 1) = v50;
  v52 = *(std::__shared_weak_count **)(v150 + 72);
  *(_OWORD *)(v150 + 64) = v51;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (*((_QWORD *)&v150 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v150 + 1) + 16))(*((_QWORD *)&v150 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v150 + 1));
    }
  }
  v57 = (char *)operator new(0xC30uLL);
  v58 = (std::__shared_weak_count *)v57;
  v148 = a3;
  v149 = a2;
  *((_QWORD *)v57 + 1) = 0;
  v59 = (unint64_t *)(v57 + 8);
  *((_QWORD *)v57 + 2) = 0;
  *(_QWORD *)v57 = &off_1E6972270;
  v60 = (std::__shared_weak_count_vtbl *)(v57 + 24);
  if (*((_QWORD *)&v150 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v60->~__shared_weak_count = 0;
  *((_QWORD *)v57 + 4) = 0;
  *(_OWORD *)(v57 + 56) = 0u;
  v63 = (dispatch_object_t *)(v57 + 56);
  *(_OWORD *)(v57 + 40) = v150;
  *((_QWORD *)v57 + 12) = 0;
  *((_QWORD *)v57 + 13) = 0;
  *(_OWORD *)(v57 + 72) = 0u;
  *((_WORD *)v57 + 44) = 0;
  *((_QWORD *)v57 + 14) = 0;
  *((_QWORD *)v57 + 15) = 850045863;
  *((_OWORD *)v57 + 8) = 0u;
  *((_OWORD *)v57 + 9) = 0u;
  *((_OWORD *)v57 + 10) = 0u;
  *((_OWORD *)v57 + 11) = 0u;
  *((_OWORD *)v57 + 12) = 0u;
  *((_QWORD *)v57 + 26) = 850045863;
  *(_OWORD *)(v57 + 216) = 0u;
  *(_OWORD *)(v57 + 232) = 0u;
  *(_OWORD *)(v57 + 248) = 0u;
  *(_OWORD *)(v57 + 264) = 0u;
  *(_OWORD *)(v57 + 280) = 0u;
  *((_QWORD *)v57 + 37) = 850045863;
  *((_OWORD *)v57 + 19) = 0u;
  *((_OWORD *)v57 + 20) = 0u;
  *((_OWORD *)v57 + 21) = 0u;
  *((_OWORD *)v57 + 22) = 0u;
  *((_QWORD *)v57 + 46) = dispatch_semaphore_create(0);
  p_shared_weak_owners = (NSObject **)&v58[15].__shared_weak_owners_;
  v58[17].__shared_owners_ = 0;
  v58[17].__shared_weak_owners_ = 0;
  *(_OWORD *)&v58[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[16].__shared_owners_ = 0u;
  LOWORD(v58[17].__vftable) = 0;
  v58[18].__vftable = 0;
  v58[18].__shared_owners_ = 850045863;
  *(_OWORD *)&v58[18].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[19].__shared_owners_ = 0u;
  v58[20].std::__shared_count = 0u;
  *(_OWORD *)&v58[20].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[21].__shared_owners_ = 0u;
  v58[22].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v58[22].__shared_owners_ = 0u;
  v58[23].std::__shared_count = 0u;
  *(_OWORD *)&v58[23].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[24].__shared_owners_ = 0u;
  v58[25].std::__shared_count = 0u;
  v58[25].__shared_weak_owners_ = 850045863;
  v58[26].std::__shared_count = 0u;
  *(_OWORD *)&v58[26].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[27].__shared_owners_ = 0u;
  v58[28].std::__shared_count = 0u;
  v58[28].__shared_weak_owners_ = (uint64_t)dispatch_semaphore_create(0);
  v65 = (NSObject **)&v58[29];
  v58[30].__shared_weak_owners_ = 0;
  v58[31].__shared_owners_ = 0;
  v58[31].__vftable = 0;
  v58[29].std::__shared_count = 0u;
  *(_OWORD *)&v58[29].__shared_weak_owners_ = 0u;
  LOWORD(v58[30].__shared_owners_) = 0;
  v58[31].__shared_weak_owners_ = 850045863;
  v58[32].std::__shared_count = 0u;
  *(_OWORD *)&v58[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[33].__shared_owners_ = 0u;
  v58[34].std::__shared_count = 0u;
  *(_OWORD *)&v58[34].__shared_weak_owners_ = 0u;
  v58[35].__shared_owners_ = 850045863;
  *(_OWORD *)&v58[35].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[36].__shared_owners_ = 0u;
  v58[37].std::__shared_count = 0u;
  *(_OWORD *)&v58[37].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[38].__shared_owners_ = 0u;
  v58[39].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v58[39].__shared_owners_ = 0u;
  v58[40].std::__shared_count = 0u;
  *(_OWORD *)&v58[40].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[41].__shared_owners_ = 0u;
  v58[42].__vftable = (std::__shared_weak_count_vtbl *)dispatch_semaphore_create(0);
  v58[42].__shared_owners_ = 850045863;
  *(_OWORD *)&v58[42].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[43].__shared_owners_ = 0u;
  v58[44].std::__shared_count = 0u;
  v58[44].__shared_weak_owners_ = 0;
  v58[45].__vftable = (std::__shared_weak_count_vtbl *)1018212795;
  *(_OWORD *)&v58[45].__shared_owners_ = 0u;
  v58[46].std::__shared_count = 0u;
  *(_OWORD *)&v58[46].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v58[47].__shared_owners_ = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[48].__shared_owners_);
  LOBYTE(v58[55].__shared_owners_) = 1;
  v58[55].__shared_weak_owners_ = 0;
  v58[56].__shared_owners_ = 0;
  v58[56].__vftable = 0;
  LODWORD(v58[57].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[57].__shared_owners_);
  LOBYTE(v58[64].__shared_owners_) = 1;
  v58[64].__shared_weak_owners_ = 0;
  v58[65].__shared_owners_ = 0;
  v58[65].__vftable = 0;
  LODWORD(v58[66].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[66].__shared_owners_);
  LOBYTE(v58[73].__shared_owners_) = 1;
  v58[73].__shared_weak_owners_ = 0;
  v58[74].__shared_owners_ = 0;
  v58[74].__vftable = 0;
  LODWORD(v58[75].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[75].__shared_owners_);
  LOBYTE(v58[82].__shared_owners_) = 1;
  v58[82].__shared_weak_owners_ = 0;
  v58[83].__shared_owners_ = 0;
  v58[83].__vftable = 0;
  LODWORD(v58[84].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[84].__shared_owners_);
  LOBYTE(v58[91].__shared_owners_) = 1;
  v58[91].__shared_weak_owners_ = 0;
  v58[92].__shared_owners_ = 0;
  v58[92].__vftable = 0;
  LODWORD(v58[93].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[93].__shared_owners_);
  LOBYTE(v58[100].__shared_owners_) = 1;
  v58[100].__shared_weak_owners_ = 0;
  v58[101].__shared_owners_ = 0;
  v58[101].__vftable = 0;
  LODWORD(v58[102].__vftable) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&v58[102].__shared_owners_);
  LOBYTE(v58[109].__shared_owners_) = 1;
  v58[109].__shared_weak_owners_ = 0;
  v58[110].__shared_owners_ = 0;
  v58[110].__vftable = 0;
  LODWORD(v58[111].__vftable) = 0;
  shared_weak_owners = v58[1].__shared_weak_owners_;
  v67 = *(_QWORD *)(shared_weak_owners + 64);
  v68 = *(std::__shared_weak_count **)(shared_weak_owners + 72);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  AMCP::IO_Core::Graph_Manager::Graph_Manager((AMCP::IO_Core::Graph_Manager *)&v58[111].__shared_owners_);
  v58[111].__shared_owners_ = (uint64_t)&off_1E69A00F8;
  v58[129].__vftable = v60;
  v58[129].__shared_owners_ = v67;
  v58[129].__shared_weak_owners_ = (uint64_t)v68;
  if (v68)
  {
    v71 = (unint64_t *)&v68->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    do
      v73 = __ldaxr(v71);
    while (__stlxr(v73 - 1, v71));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  pthread_attr_init(&v159);
  *(_QWORD *)buf = 0;
  pthread_attr_getschedparam(&v159, (sched_param *)buf);
  *(_DWORD *)buf = 61;
  pthread_attr_setschedparam(&v159, (const sched_param *)buf);
  pthread_attr_setschedpolicy(&v159, 4);
  std::thread::hardware_concurrency();
  v74 = dispatch_pthread_root_queue_create();
  v75 = AMCP::Utility::Dispatch_Queue::operator=(v65, v74);
  if (v74)
    dispatch_release(v74);
  if (!*v65)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v128 = *(std::__shared_weak_count **)&buf[8];
    v129 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v130 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
      v132 = pthread_self();
      v133 = pthread_mach_thread_np(v132);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v133;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Conductor.cpp";
      v155 = 1024;
      v156 = 90;
      v157 = 2080;
      v158 = "m_high_priority_root_queue.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v129, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  v76 = dispatch_queue_create("AMCP Work Queue", 0);
  v77 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)&v58[2].__shared_owners_, v76);
  if (v76)
    dispatch_release(v76);
  if (!*v63)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v77);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v134 = *(std::__shared_weak_count **)&buf[8];
    v135 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v136 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      v138 = pthread_self();
      v139 = pthread_mach_thread_np(v138);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v139;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Conductor.cpp";
      v155 = 1024;
      v156 = 94;
      v157 = 2080;
      v158 = "m_work_queue.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf, *v63);
  dispatch_set_target_queue(*(dispatch_object_t *)buf, *v65);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  v78 = dispatch_queue_create("AMCP Scratch Queue", 0);
  v79 = AMCP::Utility::Dispatch_Queue::operator=(p_shared_weak_owners, v78);
  if (v78)
    dispatch_release(v78);
  if (!*p_shared_weak_owners)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v79);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
    v140 = (std::__shared_weak_count *)v152;
    v141 = object->isa;
    if ((_QWORD)v152)
    {
      v142 = (unint64_t *)(v152 + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
    {
      v144 = pthread_self();
      v145 = pthread_mach_thread_np(v144);
      LODWORD(object) = 67109890;
      HIDWORD(object) = v145;
      LOWORD(v152) = 2080;
      *(_QWORD *)((char *)&v152 + 2) = "Conductor.cpp";
      WORD5(v152) = 1024;
      HIDWORD(v152) = 101;
      LOWORD(v153) = 2080;
      *(_QWORD *)((char *)&v153 + 2) = "m_scratch_queue.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&object, 0x22u);
    }
    abort();
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *p_shared_weak_owners);
  dispatch_set_target_queue(object, *v65);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
  pthread_attr_destroy(&v159);
  *(_QWORD *)&v80 = v60;
  *((_QWORD *)&v80 + 1) = v58;
  shared_owners = (std::__shared_weak_count *)v58[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_100;
    do
      v82 = __ldxr(v59);
    while (__stxr(v82 + 1, v59));
    v146 = v80;
    v83 = (unint64_t *)&v58->__shared_weak_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)&v58[1];
    v58[1].__shared_owners_ = (uint64_t)v58;
    std::__shared_weak_count::__release_weak(shared_owners);
    v80 = v146;
  }
  else
  {
    do
      v85 = __ldxr(v59);
    while (__stxr(v85 + 1, v59));
    v86 = (unint64_t *)&v58->__shared_weak_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)&v58[1];
    v58[1].__shared_owners_ = (uint64_t)v58;
  }
  do
    v88 = __ldaxr(v59);
  while (__stlxr(v88 - 1, v59));
  if (!v88)
  {
    v147 = v80;
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    v80 = v147;
  }
LABEL_100:
  v89 = *(std::__shared_weak_count **)(v150 + 40);
  *(_OWORD *)(v150 + 32) = v80;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf, *(dispatch_object_t *)(*(_QWORD *)(v150 + 32) + 352));
  *(_OWORD *)&v159.__sig = v150;
  if (*((_QWORD *)&v150 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  *(_QWORD *)&v159.__opaque[8] = v149;
  *(_QWORD *)&v159.__opaque[16] = v148;
  object = (dispatch_object_t)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v152 = 0x40000000;
  *((_QWORD *)&v152 + 1) = ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core11System_Core5startERKNSt3__16vectorINS_2CF9StringRefENS6_9allocatorIS9_EEEESE_E3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke;
  *(_QWORD *)&v153 = &__block_descriptor_tmp_2139;
  *((_QWORD *)&v153 + 1) = &v159;
  dispatch_sync(*(dispatch_queue_t *)buf, &object);
  v94 = *(std::__shared_weak_count **)v159.__opaque;
  if (*(_QWORD *)v159.__opaque)
  {
    v95 = (unint64_t *)(*(_QWORD *)v159.__opaque + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  kdebug_trace();
  v97 = (char *)operator new(0x28uLL);
  *((_QWORD *)v97 + 1) = 0;
  *((_QWORD *)v97 + 2) = 0;
  *(_QWORD *)v97 = &off_1E697FA00;
  *(_OWORD *)(v97 + 24) = v150;
  *(_QWORD *)&v98 = v97 + 24;
  *((_QWORD *)&v98 + 1) = v97;
  v99 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_OWORD *)a1 = v98;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v97);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
  v103 = (int)object[2].isa;
  switch(v103)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v118 = *(std::__shared_weak_count **)&buf[8];
      v119 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v120 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
      {
        v122 = pthread_self();
        v123 = pthread_mach_thread_np(v122);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v123;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 205;
        v110 = v119;
        v111 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_142;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v112 = *(std::__shared_weak_count **)&buf[8];
      v113 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v114 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
      {
        v116 = pthread_self();
        v117 = pthread_mach_thread_np(v116);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v117;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 205;
        _os_log_debug_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nFinished creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
    case 3:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v104 = *(std::__shared_weak_count **)&buf[8];
      v105 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v106 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        v108 = pthread_self();
        v109 = pthread_mach_thread_np(v108);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v109;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "System_Context.cpp";
        v155 = 1024;
        v156 = 205;
        v110 = v105;
        v111 = OS_LOG_TYPE_INFO;
LABEL_142:
        _os_log_impl(&dword_1B57BA000, v110, v111, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nFinished creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
  }
  v124 = (std::__shared_weak_count *)v152;
  if ((_QWORD)v152)
  {
    v125 = (unint64_t *)(v152 + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  return a1;
}

void sub_1B5A3D4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void **a27)
{
  AMCP::IO_Core::Graph_Manager *v27;
  uint64_t v28;
  AMCP::Utility::Dispatch_Queue *v29;
  AMCP::Utility::Dispatch_Queue *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *shared_owners;
  void *v36;

  pthread_attr_destroy((pthread_attr_t *)(v33 - 168));
  *(_QWORD *)v27 = &off_1E69A00F8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v31[129].__shared_owners_);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(v27);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(v32);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a10);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a11);
  AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(a12);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a13);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a14);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a9);
  a27 = (void **)(v28 + 1072);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a27);
  std::condition_variable::~condition_variable((std::condition_variable *)(v28 + 1024));
  std::mutex::~mutex((std::mutex *)(v28 + 960));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v30);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v29);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v28);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a15);
  shared_owners = (std::__shared_weak_count *)v31[1].__shared_owners_;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a20);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697FA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697FA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
}

void sub_1B5A3D774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1B5A3D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5A3D9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5A3DAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5A3DC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5A3DD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, char a16)
{
  uint64_t i;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a9);
  for (i = 8; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(&a16 + i));
  _Unwind_Resume(a1);
}

void sub_1B5A3DF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, char a16)
{
  uint64_t i;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a9);
  for (i = 8; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(&a16 + i));
  _Unwind_Resume(a1);
}

void sub_1B5A3E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t i;
  uint64_t j;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  for (i = 5; i != -1; --i)
    applesauce::CF::StringRef::~StringRef((const void **)&(&a17)[i]);
  a17 = (void **)&a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a17);
  for (j = 16; j != -8; j -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(v17 - 64 + j));
  _Unwind_Resume(a1);
}

void sub_1B5A3E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t i;
  uint64_t j;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  for (i = 5; i != -1; --i)
    applesauce::CF::StringRef::~StringRef((const void **)&(&a17)[i]);
  a17 = (void **)&a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a17);
  for (j = 16; j != -8; j -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(v17 - 64 + j));
  _Unwind_Resume(a1);
}

void sub_1B5A3E6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, char a17)
{
  uint64_t i;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  for (i = 16; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(&a17 + i));
  a9 = (void **)&a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1B5A3E8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, char a17)
{
  uint64_t i;

  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  for (i = 16; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(&a17 + i));
  a9 = (void **)&a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void AMCP::System_Context::~System_Context(uint64_t **this)
{
  uint64_t *v2;
  AMCP::Log::Scope_Registry *v3;
  int v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  NSObject *v11;
  os_log_type_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  AMCP::Log::Scope_Registry *v27;
  AMCP::Log::Scope_Registry *v28;
  int v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  NSObject *v36;
  os_log_type_t v37;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  std::__shared_weak_count *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  NSObject **v52;
  NSObject **v53;
  uint64_t v54;
  std::__shared_mutex_base *v55;
  Class isa;
  unsigned int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *v66;
  _OWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  AMCP::Log::Scope_Registry *v79;
  AMCP::Log::Scope_Registry *v80;
  int v81;
  std::__shared_weak_count *v82;
  NSObject *v83;
  unint64_t *v84;
  unint64_t v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  NSObject *v88;
  os_log_type_t v89;
  std::__shared_weak_count *v90;
  NSObject *v91;
  unint64_t *v92;
  unint64_t v93;
  _opaque_pthread_t *v94;
  mach_port_t v95;
  std::__shared_weak_count *v96;
  NSObject *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  _opaque_pthread_t *v105;
  mach_port_t v106;
  _opaque_pthread_t *v107;
  mach_port_t v108;
  AMCP::Address *v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  int v114;
  int v115;
  std::unique_lock<std::mutex> __lk;
  uint64_t v117;
  _QWORD v118[3];
  _QWORD *v119;
  uint8_t buf[8];
  _BYTE v121[10];
  __int16 v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = this[1];
  if (!v2 || v2[1])
    goto LABEL_3;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v109, "com.apple.coreaudio", "AMCP");
  v4 = *((_DWORD *)v109 + 4);
  switch(v4)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v121;
      v14 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v15 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v18;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Context.cpp";
        v122 = 1024;
        v123 = 212;
        v11 = v14;
        v12 = OS_LOG_TYPE_INFO;
        goto LABEL_21;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v19 = *(std::__shared_weak_count **)v121;
      v20 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v21 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v103 = pthread_self();
        v104 = pthread_mach_thread_np(v103);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v104;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Context.cpp";
        v122 = 1024;
        v123 = 212;
        _os_log_debug_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v5 = *(std::__shared_weak_count **)v121;
      v6 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v7 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Context.cpp";
        v122 = 1024;
        v123 = 212;
        v11 = v6;
        v12 = OS_LOG_TYPE_DEFAULT;
LABEL_21:
        _os_log_impl(&dword_1B57BA000, v11, v12, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
  }
  v23 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = **this;
  std::mutex::lock((std::mutex *)(v26 + 80));
  AMCP::Log::Scope_Registry::get(v27);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v109, "com.apple.coreaudio", "AMCP");
  v29 = *((_DWORD *)v109 + 4);
  switch(v29)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v38 = *(std::__shared_weak_count **)v121;
      v39 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v40 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        v42 = pthread_self();
        v43 = pthread_mach_thread_np(v42);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v43;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Core.cpp";
        v122 = 1024;
        v123 = 94;
        v36 = v39;
        v37 = OS_LOG_TYPE_INFO;
        goto LABEL_51;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v44 = *(std::__shared_weak_count **)v121;
      v45 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v46 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        v105 = pthread_self();
        v106 = pthread_mach_thread_np(v105);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v106;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Core.cpp";
        v122 = 1024;
        v123 = 94;
        _os_log_debug_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Stopping System_Core", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v30 = *(std::__shared_weak_count **)v121;
      v31 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v32 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v34 = pthread_self();
        v35 = pthread_mach_thread_np(v34);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v35;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Core.cpp";
        v122 = 1024;
        v123 = 94;
        v36 = v31;
        v37 = OS_LOG_TYPE_DEFAULT;
LABEL_51:
        _os_log_impl(&dword_1B57BA000, v36, v37, "%6u %32s:%-5d Stopping System_Core", buf, 0x18u);
      }
      break;
  }
  v48 = v110;
  if (v110)
  {
    v49 = (unint64_t *)&v110->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(_QWORD *)(v26 + 32);
  AMCP::Graph::Graph::get_nodes(buf, *(_QWORD **)(v51 + 2848));
  v52 = *(NSObject ***)buf;
  v53 = *(NSObject ***)v121;
  if (*(_QWORD *)buf != *(_QWORD *)v121)
  {
    v54 = v51 + 2648;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v54 + 16))(&v112, v54);
      v55 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
      isa = (*v52)[22].isa;
      if (isa)
        v57 = *((_DWORD *)isa + 2);
      else
        v57 = 0;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v109, v55, v57);
      v58 = v113;
      if (v113)
      {
        v59 = (unint64_t *)&v113->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v112 = 0x676C6F6270617573;
      LODWORD(v113) = 0;
      AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v109, (unsigned int *)&v112, 1);
      v61 = v110;
      if (v110)
      {
        v62 = (unint64_t *)&v110->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v52 += 2;
    }
    while (v52 != v53);
  }
  v109 = (AMCP::Address *)buf;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  AMCP::Core::Conductor::flush_work_queues(*(dispatch_object_t **)(v26 + 32));
  v64 = *(_QWORD *)(v26 + 32);
  v118[0] = &off_1E6972330;
  v118[1] = v26;
  v119 = v118;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v64 + 992);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v64 + 992));
  v65 = operator new(0x20uLL);
  v65[1] = 0;
  v65[2] = 0;
  *((_BYTE *)v65 + 24) = 0;
  *v65 = &off_1E69A0170;
  v112 = (uint64_t)(v65 + 3);
  v113 = (std::__shared_weak_count *)v65;
  v114 = 0;
  v115 = 0;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf, *(dispatch_object_t *)(v64 + 32));
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v109, &v112);
  *(_QWORD *)&v111 = v118;
  *((_QWORD *)&v111 + 1) = v64;
  v66 = *(NSObject **)buf;
  v67 = (_OWORD *)operator new();
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v67, (uint64_t *)&v109);
  v67[2] = v111;
  v117 = 0;
  dispatch_async_f(v66, v67, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](&v117);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v109);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  std::condition_variable::wait((std::condition_variable *)(v64 + 1056), &__lk);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v112);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v68 = v119;
  if (v119 == v118)
  {
    v69 = 4;
    v68 = v118;
    goto LABEL_86;
  }
  if (v119)
  {
    v69 = 5;
LABEL_86:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = *(std::__shared_weak_count **)(v26 + 72);
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)(v26 + 40);
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)(v26 + 24);
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  std::mutex::unlock((std::mutex *)(v26 + 80));
  AMCP::Log::Scope_Registry::get(v79);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v109, "com.apple.coreaudio", "AMCP");
  v81 = *((_DWORD *)v109 + 4);
  switch(v81)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v80);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v90 = *(std::__shared_weak_count **)v121;
      v91 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v92 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (!os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        break;
      v94 = pthread_self();
      v95 = pthread_mach_thread_np(v94);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v95;
      *(_WORD *)v121 = 2080;
      *(_QWORD *)&v121[2] = "System_Context.cpp";
      v122 = 1024;
      v123 = 215;
      v88 = v91;
      v89 = OS_LOG_TYPE_INFO;
      goto LABEL_119;
    case 2:
      AMCP::Log::Scope_Registry::get(v80);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v96 = *(std::__shared_weak_count **)v121;
      v97 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v98 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
      {
        v107 = pthread_self();
        v108 = pthread_mach_thread_np(v107);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v108;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Context.cpp";
        v122 = 1024;
        v123 = 215;
        _os_log_debug_impl(&dword_1B57BA000, v97, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nFinished destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v80);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v82 = *(std::__shared_weak_count **)v121;
      v83 = **(NSObject ***)buf;
      if (*(_QWORD *)v121)
      {
        v84 = (unint64_t *)(*(_QWORD *)v121 + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        v86 = pthread_self();
        v87 = pthread_mach_thread_np(v86);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v87;
        *(_WORD *)v121 = 2080;
        *(_QWORD *)&v121[2] = "System_Context.cpp";
        v122 = 1024;
        v123 = 215;
        v88 = v83;
        v89 = OS_LOG_TYPE_DEFAULT;
LABEL_119:
        _os_log_impl(&dword_1B57BA000, v88, v89, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nFinished destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
  }
  v100 = v110;
  if (v110)
  {
    v101 = (unint64_t *)&v110->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_3:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_1B5A3F580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::Utility::Kernel_Error_Category::~Kernel_Error_Category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x1B5E50688);
}

const char *AMCP::Utility::Kernel_Error_Category::name(AMCP::Utility::Kernel_Error_Category *this)
{
  return "kernel";
}

void AMCP::Utility::Kernel_Error_Category::message(__int16 a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string v5;

  std::to_string(&v5, a1 & 0x3FFF);
  v4 = std::string::insert(&v5, 0, "kernel error code: ", 0x13uLL);
  *a2 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1B5A3F678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Utility::Kernel_Error_Category::get(AMCP::Utility::Kernel_Error_Category *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AMCP::Utility::Kernel_Error_Category::get(void)::s_category = (uint64_t)&off_1E697FA50;
    }
  }
}

uint64_t HALB_MachPort::CreatePort(HALB_MachPort *this)
{
  integer_t v1;
  ipc_space_read_t *v2;
  kern_return_t v3;
  kern_return_t attributes;
  kern_return_t v5;
  kern_return_t v6;
  kern_return_t inserted;
  kern_return_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  _DWORD *exception;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out;
  mach_port_name_t name;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  kern_return_t v23;
  uint64_t v24;

  v1 = (int)this;
  v24 = *MEMORY[0x1E0C80C00];
  name = 0;
  v2 = (ipc_space_read_t *)MEMORY[0x1E0C83DA0];
  v3 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
  if (v3)
  {
    v9 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v19 = "HALB_MachPort.cpp";
      v20 = 1024;
      v21 = 56;
      v22 = 1024;
      v23 = v9;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::CreatePort: failed to allocate the port, Error: 0x%X", buf, 0x18u);
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (!v1)
    goto LABEL_5;
  port_info_outCnt = 1;
  attributes = mach_port_get_attributes(*v2, name, 1, &port_info_out, &port_info_outCnt);
  if (attributes)
  {
    v9 = attributes;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "HALB_MachPort.cpp";
      v20 = 1024;
      v21 = 65;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to get the port limts";
LABEL_20:
      _os_log_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0x12u);
    }
LABEL_21:
    mach_port_mod_refs(*v2, name, 1u, -1);
    goto LABEL_22;
  }
  port_info_out = v1;
  v5 = MEMORY[0x1B5E50BEC](*v2, name, 1, &port_info_out, 1);
  if (v5)
  {
    v9 = v5;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "HALB_MachPort.cpp";
      v20 = 1024;
      v21 = 74;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to set the port limts";
      goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_5:
  v6 = MEMORY[0x1B5E50BEC](*v2, name, 6, 0, 0);
  if (v6)
  {
    v9 = v6;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "HALB_MachPort.cpp";
      v20 = 1024;
      v21 = 85;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to set attribute MACH_PORT_DENAP_RECEIVER";
LABEL_14:
      _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
    }
LABEL_15:
    mach_port_deallocate(*v2, name);
    goto LABEL_22;
  }
  inserted = mach_port_insert_right(*v2, name, name, 0x14u);
  if (inserted)
  {
    v9 = inserted;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "HALB_MachPort.cpp";
      v20 = 1024;
      v21 = 93;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to create the send right";
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  return name;
}

void HALB_MachPort::DestroyPort(mach_port_name_t name, int a2, int a3)
{
  ipc_space_t *v6;
  kern_return_t v7;
  kern_return_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  kern_return_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (name)
  {
    if ((a2 & 1) == 0 && (a3 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALB_MachPort.cpp";
      v11 = 1024;
      v12 = 182;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::DestroyPort: not going to destroy anything this way", (uint8_t *)&v9, 0x12u);
    }
    v6 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (a2)
    {
      v7 = mach_port_deallocate(*MEMORY[0x1E0C83DA0], name);
      if (v7)
      {
        v8 = v7;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v9 = 136315650;
          v10 = "HALB_MachPort.cpp";
          v11 = 1024;
          v12 = 191;
          v13 = 1024;
          v14 = v8;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::DestroyPort: deallocating the port failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
    if (a3)
      mach_port_mod_refs(*v6, name, 1u, -1);
  }
}

void HALS_PlugInControl::Activate(HALS_PlugInControl *this)
{
  HALS_Object *v2;

  HALS_PlugInControl::RefreshCache(this);
  if (!*((_DWORD *)this + 15))
    (*(void (**)(char *))(*((_QWORD *)this + 9) + 32))((char *)this + 72);
  HALS_Object::Activate(this, v2);
}

void HALS_PlugInControl::~HALS_PlugInControl(HALS_PlugInControl *this)
{
  uint64_t v2;

  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInControl *)((char *)this + 72));
  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
}

{
  uint64_t v2;

  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInControl *)((char *)this + 72));
  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_PlugInControl::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v5 = *a3;
  if ((_DWORD)v5 == 1668641652)
    return *(_DWORD *)(a1 + 104) != 0;
  if ((_DWORD)v5 == 1851878764 || (_DWORD)v5 == 1819173229)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = *(_QWORD *)(v8 + 400);
    v10 = *(std::__shared_weak_count **)(v8 + 408);
    v31 = v9;
    v32 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(unsigned int *)(a1 + 92);
    if (a4)
      v14 = *(unsigned int *)(a4 + 232);
    else
      v14 = 0;
    v29 = 0x676C6F626C6E616DLL;
    v30 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 544))(v9, v13, v14, &v29);
    if (!v10)
      return v15;
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (v18)
      return v15;
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    v19 = v10;
LABEL_21:
    std::__shared_weak_count::__release_weak(v19);
    return v15;
  }
  if (HALS_Control::HasProperty(a1, a2, a3))
    return 1;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 24))(a1 + 72, v5))
    return 0;
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(v20 + 400);
  v22 = *(std::__shared_weak_count **)(v20 + 408);
  v31 = v21;
  v32 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (a4)
    v25 = *(unsigned int *)(a4 + 232);
  else
    v25 = 0;
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v21 + 544))(v21, *(unsigned int *)(a1 + 92), v25, a3);
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      v19 = v22;
      goto LABEL_21;
    }
  }
  return v15;
}

void sub_1B5A3FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInControl::IsPropertySettable(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7;
  uint64_t mSelector;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;

  if (a4)
    v7 = *((unsigned int *)a4 + 58);
  else
    v7 = 0;
  mSelector = a3->mSelector;
  if ((int)mSelector <= 1818456949)
  {
    if ((_DWORD)mSelector != 1650685548)
    {
      if ((_DWORD)mSelector == 1668641652)
        return 0;
      if ((_DWORD)mSelector != 1818453110)
        goto LABEL_10;
    }
  }
  else
  {
    if ((int)mSelector > 1935962741)
    {
      v9 = (_DWORD)mSelector == 1936745334;
      v10 = 1935962742;
    }
    else
    {
      v9 = (_DWORD)mSelector == 1818456950;
      v10 = 1935893353;
    }
    if (!v9 && (_DWORD)mSelector != v10)
    {
LABEL_10:
      if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 24))((char *)this + 72, mSelector))
        {
          v11 = *((_QWORD *)this + 10);
          v12 = *(_QWORD *)(v11 + 400);
          v13 = *(std::__shared_weak_count **)(v11 + 408);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v12
                                                                                                  + 552))(v12, *((unsigned int *)this + 23), v7, a3);
          if (!v13)
            return v16;
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          goto LABEL_42;
        }
        return 0;
      }
      return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    }
  }
  if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    return 0;
  v20 = *((unsigned int *)this + 23);
  if ((_DWORD)v20)
  {
    v21 = *((_QWORD *)this + 10);
    v22 = *(_QWORD *)(v21 + 400);
    v23 = *(std::__shared_weak_count **)(v21 + 408);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v20 = *((unsigned int *)this + 23);
    }
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v22 + 544))(v22, v20, v7, a3);
    v27 = v26;
    if (!v23)
      goto LABEL_35;
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v27)
        return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    }
    else
    {
LABEL_35:
      if (!v26)
        return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    }
    v30 = *((_QWORD *)this + 10);
    v31 = *(_QWORD *)(v30 + 400);
    v13 = *(std::__shared_weak_count **)(v30 + 408);
    if (v13)
    {
      v32 = (unint64_t *)&v13->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v31 + 552))(v31, *((unsigned int *)this + 23), v7, a3);
    if (!v13)
      return v16;
    v34 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v34);
    while (__stlxr(v18 - 1, v34));
LABEL_42:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return v16;
  }
  return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

void sub_1B5A4010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInControl::GetPropertyDataSize(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;

  mSelector = a3->mSelector;
  v13 = 8;
  if ((int)mSelector > 1851878763)
  {
    switch((_DWORD)mSelector)
    {
      case 0x6E616D6C:
        return v13;
      case 0x73636169:
        v25 = *((_QWORD *)this + 10);
        v26 = *(_QWORD *)(v25 + 400);
        v16 = *(std::__shared_weak_count **)(v25 + 408);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        if (a6)
          v29 = *((unsigned int *)a6 + 58);
        else
          v29 = 0;
        v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v26 + 560))(v26, *((unsigned int *)this + 23), v29, a3, a4, a5);
        if (!v16)
          return v13;
        v39 = (unint64_t *)&v16->__shared_owners_;
        do
          v37 = __ldaxr(v39);
        while (__stlxr(v37 - 1, v39));
        break;
      case 0x73636369:
        v14 = *((_QWORD *)this + 10);
        v15 = *(_QWORD *)(v14 + 400);
        v16 = *(std::__shared_weak_count **)(v14 + 408);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        if (a6)
          v19 = *((unsigned int *)a6 + 58);
        else
          v19 = 0;
        v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v15 + 560))(v15, *((unsigned int *)this + 23), v19, a3, a4, a5);
        if (!v16)
          return v13;
        v38 = (unint64_t *)&v16->__shared_owners_;
        do
          v37 = __ldaxr(v38);
        while (__stlxr(v37 - 1, v38));
        break;
      default:
LABEL_25:
        if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
          return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
        if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 24))((char *)this + 72, mSelector))
        {
          v31 = *((_QWORD *)this + 10);
          v32 = *(_QWORD *)(v31 + 400);
          v16 = *(std::__shared_weak_count **)(v31 + 408);
          if (v16)
          {
            v33 = (unint64_t *)&v16->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          if (a6)
            v35 = *((unsigned int *)a6 + 58);
          else
            v35 = 0;
          v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v32 + 560))(v32, *((unsigned int *)this + 23), v35, a3, a4, a5);
          if (!v16)
            return v13;
          v40 = (unint64_t *)&v16->__shared_owners_;
          do
            v37 = __ldaxr(v40);
          while (__stlxr(v37 - 1, v40));
          break;
        }
        return 0;
    }
LABEL_53:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return v13;
  }
  if ((_DWORD)mSelector == 1651272546)
  {
    v20 = *((_QWORD *)this + 10);
    v21 = *(_QWORD *)(v20 + 400);
    v16 = *(std::__shared_weak_count **)(v20 + 408);
    if (v16)
    {
      v22 = (unint64_t *)&v16->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (a6)
      v24 = *((unsigned int *)a6 + 58);
    else
      v24 = 0;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v21 + 560))(v21, *((unsigned int *)this + 23), v24, a3, a4, a5);
    if (!v16)
      return v13;
    v36 = (unint64_t *)&v16->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    goto LABEL_53;
  }
  if ((_DWORD)mSelector == 1668641652)
    return (12 * *((_DWORD *)this + 26));
  if ((_DWORD)mSelector != 1819173229)
    goto LABEL_25;
  return v13;
}

void sub_1B5A4044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_PlugInControl::GetPropertyData(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  uint64_t mSelector;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t *v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t *v149;
  _DWORD *v150;
  _DWORD *exception;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE buf[18];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)mSelector <= 1818457189)
  {
    if ((int)mSelector > 1818453105)
    {
      if ((int)mSelector <= 1818453109)
      {
        if ((_DWORD)mSelector == 1818453106)
        {
          v111 = *((_QWORD *)this + 10);
          v112 = *(_QWORD *)(v111 + 400);
          v20 = *(std::__shared_weak_count **)(v111 + 408);
          *(_QWORD *)buf = v112;
          *(_QWORD *)&buf[8] = v20;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v114 = __ldxr(p_shared_owners);
            while (__stxr(v114 + 1, p_shared_owners));
          }
          if (a9)
            v115 = *((unsigned int *)a9 + 58);
          else
            v115 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v112 + 568))(v112, *((unsigned int *)this + 23), v115, a3, a7, a8, a4, a5, a6);
          if (v20)
          {
            v148 = (unint64_t *)&v20->__shared_owners_;
            do
              v133 = __ldaxr(v148);
            while (__stlxr(v133 - 1, v148));
            goto LABEL_239;
          }
          return;
        }
        if ((_DWORD)mSelector != 1818453107)
          goto LABEL_132;
        if (a4 >= 4 && a7 >= 4)
          *(_DWORD *)a6 = *a8;
        v58 = *((_QWORD *)this + 10);
        v59 = *(_QWORD *)(v58 + 400);
        v60 = *(std::__shared_weak_count **)(v58 + 408);
        *(_QWORD *)buf = v59;
        *(_QWORD *)&buf[8] = v60;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        if (a9)
          v63 = *((unsigned int *)a9 + 58);
        else
          v63 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v59 + 568))(v59, *((unsigned int *)this + 23), v63, a3, 0, 0, a4, a5, a6);
        if (!v60)
          return;
        v143 = (unint64_t *)&v60->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
      }
      else
      {
        if ((_DWORD)mSelector == 1818453110)
        {
          v76 = *((_QWORD *)this + 10);
          v77 = *(_QWORD *)(v76 + 400);
          v20 = *(std::__shared_weak_count **)(v76 + 408);
          *(_QWORD *)buf = v77;
          *(_QWORD *)&buf[8] = v20;
          if (v20)
          {
            v78 = (unint64_t *)&v20->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          if (a9)
            v80 = *((unsigned int *)a9 + 58);
          else
            v80 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v77 + 568))(v77, *((unsigned int *)this + 23), v80, a3, a7, a8, a4, a5, a6);
          if (v20)
          {
            v135 = (unint64_t *)&v20->__shared_owners_;
            do
              v133 = __ldaxr(v135);
            while (__stlxr(v133 - 1, v135));
            goto LABEL_239;
          }
          return;
        }
        if ((_DWORD)mSelector != 1818456932)
        {
          if ((_DWORD)mSelector == 1818456950)
          {
            v36 = *((_QWORD *)this + 10);
            v37 = *(_QWORD *)(v36 + 400);
            v20 = *(std::__shared_weak_count **)(v36 + 408);
            *(_QWORD *)buf = v37;
            *(_QWORD *)&buf[8] = v20;
            if (v20)
            {
              v38 = (unint64_t *)&v20->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            if (a9)
              v40 = *((unsigned int *)a9 + 58);
            else
              v40 = 0;
            (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v37 + 568))(v37, *((unsigned int *)this + 23), v40, a3, a7, a8, a4, a5, a6);
            if (v20)
            {
              v138 = (unint64_t *)&v20->__shared_owners_;
              do
                v133 = __ldaxr(v138);
              while (__stlxr(v133 - 1, v138));
              goto LABEL_239;
            }
            return;
          }
          goto LABEL_132;
        }
        if (a4 >= 4 && a7 >= 4)
          *(_DWORD *)a6 = *a8;
        v101 = *((_QWORD *)this + 10);
        v102 = *(_QWORD *)(v101 + 400);
        v60 = *(std::__shared_weak_count **)(v101 + 408);
        *(_QWORD *)buf = v102;
        *(_QWORD *)&buf[8] = v60;
        if (v60)
        {
          v103 = (unint64_t *)&v60->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        if (a9)
          v105 = *((unsigned int *)a9 + 58);
        else
          v105 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v102 + 568))(v102, *((unsigned int *)this + 23), v105, a3, 0, 0, a4, a5, a6);
        if (!v60)
          return;
        v146 = (unint64_t *)&v60->__shared_owners_;
        do
          v144 = __ldaxr(v146);
        while (__stlxr(v144 - 1, v146));
      }
      if (v144)
        return;
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      v118 = v60;
LABEL_241:
      std::__shared_weak_count::__release_weak(v118);
      return;
    }
    if ((int)mSelector <= 1651272547)
    {
      if ((_DWORD)mSelector != 1650685548)
      {
        if ((_DWORD)mSelector == 1651272546)
        {
          v53 = *((_QWORD *)this + 10);
          v54 = *(_QWORD *)(v53 + 400);
          v20 = *(std::__shared_weak_count **)(v53 + 408);
          *(_QWORD *)buf = v54;
          *(_QWORD *)&buf[8] = v20;
          if (v20)
          {
            v55 = (unint64_t *)&v20->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          if (a9)
            v57 = *((unsigned int *)a9 + 58);
          else
            v57 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v54 + 568))(v54, *((unsigned int *)this + 23), v57, a3, a7, a8, a4, a5, a6);
          if (v20)
          {
            v142 = (unint64_t *)&v20->__shared_owners_;
            do
              v133 = __ldaxr(v142);
            while (__stlxr(v133 - 1, v142));
            goto LABEL_239;
          }
          return;
        }
        goto LABEL_132;
      }
      if (!(_DWORD)a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInControl.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 251;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      if (*((_DWORD *)this + 5) != 1702259059)
      {
        v127 = *((_QWORD *)this + 10);
        v128 = *(_QWORD *)(v127 + 400);
        v20 = *(std::__shared_weak_count **)(v127 + 408);
        *(_QWORD *)buf = v128;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v129 = (unint64_t *)&v20->__shared_owners_;
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        if (a9)
          v131 = *((unsigned int *)a9 + 58);
        else
          v131 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v128 + 568))(v128, *((unsigned int *)this + 23), v131, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v149 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v149);
          while (__stlxr(v133 - 1, v149));
          goto LABEL_239;
        }
        return;
      }
      *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a9);
      v30 = 4;
    }
    else
    {
      if ((_DWORD)mSelector == 1651272548)
      {
        v71 = *((_QWORD *)this + 10);
        v72 = *(_QWORD *)(v71 + 400);
        v20 = *(std::__shared_weak_count **)(v71 + 408);
        *(_QWORD *)buf = v72;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v73 = (unint64_t *)&v20->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        if (a9)
          v75 = *((unsigned int *)a9 + 58);
        else
          v75 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v72 + 568))(v72, *((unsigned int *)this + 23), v75, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v134 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v134);
          while (__stlxr(v133 - 1, v134));
          goto LABEL_239;
        }
        return;
      }
      if ((_DWORD)mSelector == 1668049771)
      {
        v96 = *((_QWORD *)this + 10);
        v97 = *(_QWORD *)(v96 + 400);
        v20 = *(std::__shared_weak_count **)(v96 + 408);
        *(_QWORD *)buf = v97;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v98 = (unint64_t *)&v20->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        if (a9)
          v100 = *((unsigned int *)a9 + 58);
        else
          v100 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v97 + 568))(v97, *((unsigned int *)this + 23), v100, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v145 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v145);
          while (__stlxr(v133 - 1, v145));
          goto LABEL_239;
        }
        return;
      }
      if ((_DWORD)mSelector != 1668641652)
        goto LABEL_132;
      v24 = a4 / 0xC;
      if (*((_DWORD *)this + 26) < a4 / 0xC)
        v24 = *((_DWORD *)this + 26);
      if (v24)
      {
        v25 = 0;
        v26 = 0;
        do
        {
          if (v26 < *((unsigned int *)this + 26))
          {
            v27 = (char *)a6 + v25;
            v28 = (uint64_t *)(*((_QWORD *)this + 12) + v25);
            v29 = *v28;
            *((_DWORD *)v27 + 2) = *((_DWORD *)v28 + 2);
            *(_QWORD *)v27 = v29;
          }
          ++v26;
          v25 += 12;
        }
        while (12 * v24 != v25);
      }
      v30 = 12 * v24;
    }
    goto LABEL_147;
  }
  if ((int)mSelector <= 1935893352)
  {
    if ((int)mSelector <= 1851878763)
    {
      if ((_DWORD)mSelector == 1818457190)
      {
        v91 = *((_QWORD *)this + 10);
        v92 = *(_QWORD *)(v91 + 400);
        v20 = *(std::__shared_weak_count **)(v91 + 408);
        *(_QWORD *)buf = v92;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v93 = (unint64_t *)&v20->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        if (a9)
          v95 = *((unsigned int *)a9 + 58);
        else
          v95 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v92 + 568))(v92, *((unsigned int *)this + 23), v95, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v141 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v141);
          while (__stlxr(v133 - 1, v141));
          goto LABEL_239;
        }
        return;
      }
      if ((_DWORD)mSelector != 1819173229)
        goto LABEL_132;
    }
    else if ((_DWORD)mSelector != 1851878764)
    {
      if ((_DWORD)mSelector != 1852400499)
      {
        if ((_DWORD)mSelector == 1935892841)
        {
          v31 = *((_QWORD *)this + 10);
          v32 = *(_QWORD *)(v31 + 400);
          v20 = *(std::__shared_weak_count **)(v31 + 408);
          *(_QWORD *)buf = v32;
          *(_QWORD *)&buf[8] = v20;
          if (v20)
          {
            v33 = (unint64_t *)&v20->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          if (a9)
            v35 = *((unsigned int *)a9 + 58);
          else
            v35 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v32 + 568))(v32, *((unsigned int *)this + 23), v35, a3, a7, a8, a4, a5, a6);
          if (v20)
          {
            v132 = (unint64_t *)&v20->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            goto LABEL_239;
          }
          return;
        }
        goto LABEL_132;
      }
LABEL_76:
      v64 = *((_QWORD *)this + 10);
      v65 = *(_QWORD *)(v64 + 400);
      v66 = *(std::__shared_weak_count **)(v64 + 408);
      *(_QWORD *)buf = v65;
      *(_QWORD *)&buf[8] = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *((unsigned int *)this + 23);
      if (a9)
        v70 = *((unsigned int *)a9 + 58);
      else
        v70 = 0;
      v152 = 0x676C6F627363696ELL;
      LODWORD(v153) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v65 + 568))(v65, v69, v70, &v152, a7, a8, a4, a5, a6);
      if (!v66)
        return;
      v116 = (unint64_t *)&v66->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (v117)
        return;
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      v118 = v66;
      goto LABEL_241;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 187;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      v150 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v150 = &off_1E69A1B30;
      v150[2] = 561211770;
    }
    v46 = *((_QWORD *)this + 10);
    v47 = *(_QWORD *)(v46 + 400);
    v48 = *(std::__shared_weak_count **)(v46 + 408);
    *(_QWORD *)buf = v47;
    *(_QWORD *)&buf[8] = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = *((unsigned int *)this + 23);
    if (a9)
      v52 = *((unsigned int *)a9 + 58);
    else
      v52 = 0;
    v152 = 0x676C6F626C6E616DLL;
    v153 = 0;
    v154 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)v47 + 568))(v47, v51, v52, &v152, 0, 0, 8, (char *)&v153 + 4, &v154);
    *a6 = v154;
    if (v48)
    {
      v119 = (unint64_t *)&v48->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v30 = 8;
LABEL_147:
    *a5 = v30;
    return;
  }
  if ((int)mSelector > 1935962741)
  {
    switch((_DWORD)mSelector)
    {
      case 0x73647276:
        v86 = *((_QWORD *)this + 10);
        v87 = *(_QWORD *)(v86 + 400);
        v20 = *(std::__shared_weak_count **)(v86 + 408);
        *(_QWORD *)buf = v87;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v88 = (unint64_t *)&v20->__shared_owners_;
          do
            v89 = __ldxr(v88);
          while (__stxr(v89 + 1, v88));
        }
        if (a9)
          v90 = *((unsigned int *)a9 + 58);
        else
          v90 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v87 + 568))(v87, *((unsigned int *)this + 23), v90, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v137 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v137);
          while (__stlxr(v133 - 1, v137));
          goto LABEL_239;
        }
        return;
      case 0x73706363:
        v106 = *((_QWORD *)this + 10);
        v107 = *(_QWORD *)(v106 + 400);
        v20 = *(std::__shared_weak_count **)(v106 + 408);
        *(_QWORD *)buf = v107;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v108 = (unint64_t *)&v20->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        if (a9)
          v110 = *((unsigned int *)a9 + 58);
        else
          v110 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v107 + 568))(v107, *((unsigned int *)this + 23), v110, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v147 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v147);
          while (__stlxr(v133 - 1, v147));
          goto LABEL_239;
        }
        return;
      case 0x73706376:
        v41 = *((_QWORD *)this + 10);
        v42 = *(_QWORD *)(v41 + 400);
        v20 = *(std::__shared_weak_count **)(v41 + 408);
        *(_QWORD *)buf = v42;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v43 = (unint64_t *)&v20->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        if (a9)
          v45 = *((unsigned int *)a9 + 58);
        else
          v45 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v42 + 568))(v42, *((unsigned int *)this + 23), v45, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v140 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v140);
          while (__stlxr(v133 - 1, v140));
          goto LABEL_239;
        }
        return;
    }
    goto LABEL_132;
  }
  if ((_DWORD)mSelector != 1935893353)
  {
    if ((_DWORD)mSelector != 1935894894)
    {
      if ((_DWORD)mSelector == 1935962738)
      {
        v18 = *((_QWORD *)this + 10);
        v19 = *(_QWORD *)(v18 + 400);
        v20 = *(std::__shared_weak_count **)(v18 + 408);
        *(_QWORD *)buf = v19;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        if (a9)
          v23 = *((unsigned int *)a9 + 58);
        else
          v23 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v19 + 568))(v19, *((unsigned int *)this + 23), v23, a3, a7, a8, a4, a5, a6);
        if (v20)
        {
          v139 = (unint64_t *)&v20->__shared_owners_;
          do
            v133 = __ldaxr(v139);
          while (__stlxr(v133 - 1, v139));
LABEL_239:
          if (v133)
            return;
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          v118 = v20;
          goto LABEL_241;
        }
        return;
      }
LABEL_132:
      if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 24))((char *)this + 72, mSelector))
      {
        v121 = *((_QWORD *)this + 10);
        v122 = *(_QWORD *)(v121 + 400);
        v123 = *(_QWORD *)(v121 + 408);
        *(_QWORD *)buf = v122;
        *(_QWORD *)&buf[8] = v123;
        if (v123)
        {
          v124 = (unint64_t *)(v123 + 8);
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
        if (a9)
          v126 = *((unsigned int *)a9 + 58);
        else
          v126 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v122 + 568))(v122, *((unsigned int *)this + 23), v126, a3, a7, a8, a4, a5, a6);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      }
      return;
    }
    goto LABEL_76;
  }
  v81 = *((_QWORD *)this + 10);
  v82 = *(_QWORD *)(v81 + 400);
  v20 = *(std::__shared_weak_count **)(v81 + 408);
  *(_QWORD *)buf = v82;
  *(_QWORD *)&buf[8] = v20;
  if (v20)
  {
    v83 = (unint64_t *)&v20->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  if (a9)
    v85 = *((unsigned int *)a9 + 58);
  else
    v85 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v82 + 568))(v82, *((unsigned int *)this + 23), v85, a3, a7, a8, a4, a5, a6);
  if (v20)
  {
    v136 = (unint64_t *)&v20->__shared_owners_;
    do
      v133 = __ldaxr(v136);
    while (__stlxr(v133 - 1, v136));
    goto LABEL_239;
  }
}

void sub_1B5A412D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B5A41330()
{
  JUMPOUT(0x1B5A41328);
}

void HALS_PlugInControl::SetPropertyData(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  HALB_Info *mSelector;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  AudioObjectPropertyElement v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  HALS_ObjectMap *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  HALS_Object *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  AudioObjectPropertyElement mElement;
  unsigned int v58;
  unsigned int v59;
  int v60;
  HALS_ObjectMap *v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t *v94;
  int v95;
  _DWORD *exception;
  _DWORD *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  float *v103;
  HALS_Device *v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *__p[2];
  char v110;
  void *v111[2];
  char v112;
  _BYTE buf[18];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v104 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v104)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PlugInControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 314;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    v95 = 560947818;
LABEL_140:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v95;
  }
  mSelector = (HALB_Info *)a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode(mSelector, v16))
    goto LABEL_5;
  if (!HALS_Device::IsHogModeOwnerOrFree(v104, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PlugInControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 315;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::_SetPropertyData: the given process does not own hog mode", buf, 0x12u);
    }
    v95 = 560492391;
    goto LABEL_140;
  }
  mSelector = (HALB_Info *)a3->mSelector;
LABEL_5:
  if ((int)mSelector > 1818457189)
  {
    if ((int)mSelector > 1935962741)
    {
      if ((_DWORD)mSelector == 1936745334)
      {
        v69 = *((_QWORD *)this + 10);
        v70 = *(_QWORD *)(v69 + 400);
        v20 = *(std::__shared_weak_count **)(v69 + 408);
        *(_QWORD *)buf = v70;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v72 = __ldxr(p_shared_owners);
          while (__stxr(v72 + 1, p_shared_owners));
        }
        if (a8)
          v73 = *((unsigned int *)a8 + 58);
        else
          v73 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v70 + 576))(v70, *((unsigned int *)this + 23), v73, a3, a6, a7, a4, a5);
        if (!v20)
          goto LABEL_133;
        v86 = (unint64_t *)&v20->__shared_owners_;
        do
          v85 = __ldaxr(v86);
        while (__stlxr(v85 - 1, v86));
        goto LABEL_131;
      }
      if ((_DWORD)mSelector == 1935962742)
      {
        v44 = *((_QWORD *)this + 10);
        v45 = *(_QWORD *)(v44 + 400);
        v20 = *(std::__shared_weak_count **)(v44 + 408);
        *(_QWORD *)buf = v45;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v46 = (unint64_t *)&v20->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        if (a8)
          v48 = *((unsigned int *)a8 + 58);
        else
          v48 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v45 + 576))(v45, *((unsigned int *)this + 23), v48, a3, a6, a7, a4, a5);
        if (!v20)
          goto LABEL_133;
        v89 = (unint64_t *)&v20->__shared_owners_;
        do
          v85 = __ldaxr(v89);
        while (__stlxr(v85 - 1, v89));
        goto LABEL_131;
      }
    }
    else
    {
      if ((_DWORD)mSelector == 1818457190)
      {
        v50 = *((_QWORD *)this + 10);
        v51 = *(_QWORD *)(v50 + 400);
        v20 = *(std::__shared_weak_count **)(v50 + 408);
        *(_QWORD *)buf = v51;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v52 = (unint64_t *)&v20->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        if (a8)
          v54 = *((unsigned int *)a8 + 58);
        else
          v54 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v51 + 576))(v51, *((unsigned int *)this + 23), v54, a3, a6, a7, a4, a5);
        if (!v20)
          goto LABEL_133;
        v84 = (unint64_t *)&v20->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        goto LABEL_131;
      }
      if ((_DWORD)mSelector == 1935893353)
      {
        v24 = *((_QWORD *)this + 10);
        v25 = *(_QWORD *)(v24 + 400);
        v20 = *(std::__shared_weak_count **)(v24 + 408);
        *(_QWORD *)buf = v25;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (a8)
          v28 = *((unsigned int *)a8 + 58);
        else
          v28 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v25 + 576))(v25, *((unsigned int *)this + 23), v28, a3, a6, a7, a4, a5);
        if (!v20)
          goto LABEL_133;
        v88 = (unint64_t *)&v20->__shared_owners_;
        do
          v85 = __ldaxr(v88);
        while (__stlxr(v85 - 1, v88));
        goto LABEL_131;
      }
    }
    goto LABEL_72;
  }
  if ((int)mSelector > 1818453109)
  {
    if ((_DWORD)mSelector == 1818453110)
    {
      v99 = a6;
      v101 = a7;
      std::string::basic_string[abi:ne180100]<0>(v107, "HALS_PlugInControl::SetPropertyData");
      v55 = a4;
      v103 = a5;
      v56 = *(_QWORD *)&a3->mSelector;
      mElement = a3->mElement;
      v59 = *((_DWORD *)this + 12);
      v58 = *((_DWORD *)this + 13);
      v61 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
      v60 = *((_DWORD *)this + 15);
      v62 = "no control type";
      if (v60 == 1)
        v62 = "software control";
      if (v60)
        v63 = (char *)v62;
      else
        v63 = "external driver";
      std::string::basic_string[abi:ne180100]<0>(v105, v63);
      LogVolumeChangeForServerSideControl((uint64_t)v107, a2, v56, mElement, v55, v103, v61, v59, v58, (uint64_t)v105);
      if (v106 < 0)
        operator delete(v105[0]);
      if (v108 < 0)
        operator delete(v107[0]);
      kdebug_trace();
      v64 = *((_QWORD *)this + 10);
      v65 = *(_QWORD *)(v64 + 400);
      v40 = *(std::__shared_weak_count **)(v64 + 408);
      *(_QWORD *)buf = v65;
      *(_QWORD *)&buf[8] = v40;
      if (v40)
      {
        v66 = (unint64_t *)&v40->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      if (a8)
        v68 = *((unsigned int *)a8 + 58);
      else
        v68 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)v65 + 576))(v65, *((unsigned int *)this + 23), v68, a3, v99, v101, v55, v103);
      if (!v40)
        goto LABEL_121;
      v90 = (unint64_t *)&v40->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
    }
    else
    {
      if ((_DWORD)mSelector != 1818456950)
        goto LABEL_72;
      v98 = a6;
      v100 = a7;
      std::string::basic_string[abi:ne180100]<0>(v111, "HALS_PlugInControl::SetPropertyData");
      v29 = a4;
      v102 = a5;
      v30 = *(_QWORD *)&a3->mSelector;
      v31 = a3->mElement;
      v33 = *((_DWORD *)this + 12);
      v32 = *((_DWORD *)this + 13);
      v35 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
      v34 = *((_DWORD *)this + 15);
      v36 = "no control type";
      if (v34 == 1)
        v36 = "software control";
      if (v34)
        v37 = (char *)v36;
      else
        v37 = "external driver";
      std::string::basic_string[abi:ne180100]<0>(__p, v37);
      LogVolumeChangeForServerSideControl((uint64_t)v111, a2, v30, v31, v29, v102, v35, v33, v32, (uint64_t)__p);
      if (v110 < 0)
        operator delete(__p[0]);
      if (v112 < 0)
        operator delete(v111[0]);
      kdebug_trace();
      v38 = *((_QWORD *)this + 10);
      v39 = *(_QWORD *)(v38 + 400);
      v40 = *(std::__shared_weak_count **)(v38 + 408);
      *(_QWORD *)buf = v39;
      *(_QWORD *)&buf[8] = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      if (a8)
        v43 = *((unsigned int *)a8 + 58);
      else
        v43 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)v39 + 576))(v39, *((unsigned int *)this + 23), v43, a3, v98, v100, v29, v102);
      if (!v40)
      {
LABEL_121:
        kdebug_trace();
        goto LABEL_133;
      }
      v92 = (unint64_t *)&v40->__shared_owners_;
      do
        v91 = __ldaxr(v92);
      while (__stlxr(v91 - 1, v92));
    }
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_121;
  }
  if ((_DWORD)mSelector == 1650685548)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 345;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", buf, 0x12u);
      }
      v97 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v97 = &off_1E69A1B30;
      v97[2] = 561211770;
    }
    if (*((_DWORD *)this + 5) == 1702259059)
    {
      HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a8, *(_DWORD *)a5 != 0);
      goto LABEL_133;
    }
    v79 = *((_QWORD *)this + 10);
    v80 = *(_QWORD *)(v79 + 400);
    v20 = *(std::__shared_weak_count **)(v79 + 408);
    *(_QWORD *)buf = v80;
    *(_QWORD *)&buf[8] = v20;
    if (v20)
    {
      v81 = (unint64_t *)&v20->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    if (a8)
      v83 = *((unsigned int *)a8 + 58);
    else
      v83 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v80 + 576))(v80, *((unsigned int *)this + 23), v83, a3, a6, a7, a4, a5);
    if (!v20)
      goto LABEL_133;
    v93 = (unint64_t *)&v20->__shared_owners_;
    do
      v85 = __ldaxr(v93);
    while (__stlxr(v85 - 1, v93));
LABEL_131:
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    goto LABEL_133;
  }
  if ((_DWORD)mSelector != 1651272546)
  {
LABEL_72:
    if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
      goto LABEL_133;
    }
    if (!(*(unsigned int (**)(char *, HALB_Info *))(*((_QWORD *)this + 9) + 24))((char *)this + 72, mSelector))goto LABEL_133;
    v74 = *((_QWORD *)this + 10);
    v75 = *(_QWORD *)(v74 + 400);
    v20 = *(std::__shared_weak_count **)(v74 + 408);
    *(_QWORD *)buf = v75;
    *(_QWORD *)&buf[8] = v20;
    if (v20)
    {
      v76 = (unint64_t *)&v20->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = a8 ? *((unsigned int *)a8 + 58) : 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v75 + 576))(v75, *((unsigned int *)this + 23), v78, a3, a6, a7, a4, a5);
    if (!v20)
      goto LABEL_133;
    v94 = (unint64_t *)&v20->__shared_owners_;
    do
      v85 = __ldaxr(v94);
    while (__stlxr(v85 - 1, v94));
    goto LABEL_131;
  }
  v18 = *((_QWORD *)this + 10);
  v19 = *(_QWORD *)(v18 + 400);
  v20 = *(std::__shared_weak_count **)(v18 + 408);
  *(_QWORD *)buf = v19;
  *(_QWORD *)&buf[8] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (a8)
    v23 = *((unsigned int *)a8 + 58);
  else
    v23 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v19 + 576))(v19, *((unsigned int *)this + 23), v23, a3, a6, a7, a4, a5);
  if (v20)
  {
    v87 = (unint64_t *)&v20->__shared_owners_;
    do
      v85 = __ldaxr(v87);
    while (__stlxr(v85 - 1, v87));
    goto LABEL_131;
  }
LABEL_133:
  HALS_ObjectMap::ReleaseObject(v104, v49);
}

void sub_1B5A41CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  HALS_Object *v40;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38 - 128);
  HALS_ObjectMap::ReleaseObject(a14, v40);
  _Unwind_Resume(a1);
}

void HALS_PlugInControl::SetHardwareReferenceStreamControlValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v14 = 0;
  v13 = *(_QWORD *)"lvcbbolg";
  v12 = a3;
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (a2)
    v9 = *(unsigned int *)(a2 + 232);
  else
    v9 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)v5 + 576))(v5, *(unsigned int *)(a1 + 92), v9, &v13, 0, 0, 4, &v12);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B5A41E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL HALS_PlugInControl::GetHardwareReferenceStreamControlValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a2)
    v2 = *(unsigned int *)(a2 + 232);
  else
    v2 = 0;
  v14 = 0;
  v13 = *(_QWORD *)"lvcbbolg";
  v11 = 0;
  v12 = 4;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(v3 + 400);
  v5 = *(std::__shared_weak_count **)(v3 + 408);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, int *, uint64_t, std::__shared_weak_count *))(*(_QWORD *)v4 + 568))(v4, *(unsigned int *)(a1 + 92), v2, &v13, 0, 0, 4, &v12, &v11, v4, v5);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v11 != 0;
}

void sub_1B5A41F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInControl::HandlePlugIn_PropertiesChanged(HALS_PlugInControl *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void `non-virtual thunk to'HALS_PlugInControl::~HALS_PlugInControl(HALS_PlugInControl *this)
{
  HALS_Object *v2;
  uint64_t v3;

  HALS_PlugInObject::~HALS_PlugInObject(this);
  *((_QWORD *)this - 9) = off_1E6995A68;
  v2 = (HALS_PlugInControl *)((char *)this - 72);
  v3 = *((_QWORD *)v2 + 8);
  *((_QWORD *)v2 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HALS_Object::~HALS_Object(v2);
}

{
  HALS_PlugInControl::~HALS_PlugInControl((HALS_PlugInControl *)((char *)this - 72));
}

void `non-virtual thunk to'HALS_PlugInControl::HandlePlugIn_PropertiesChanged(HALS_PlugInControl *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged((HALS_PlugInControl *)((char *)this - 72), (HALS_NotificationManager *)*((unsigned int *)this - 14), 0, a2, a3);
}

uint64_t HALS_PlugInControl::RefreshCache(HALS_PlugInControl *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  HALB_Mutex *v38;
  uint64_t v39;
  _QWORD v41[6];
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  if (*((_DWORD *)this + 15) == 1)
  {
    v2 = 0;
    v3 = 1869968496;
    v4 = 1650685548;
    v5 = 1702259059;
  }
  else
  {
    v6 = *((_QWORD *)this + 10);
    v7 = *(_QWORD *)(v6 + 400);
    v8 = *(std::__shared_weak_count **)(v6 + 408);
    v46 = v7;
    v47 = (uint64_t *)v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = *((unsigned int *)this + 23);
    v50 = 0x676C6F62636C6173;
    v51 = 0;
    v52 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v7 + 568))(v7, v11, 0, &v50, 0, 0, 4, &v52, (char *)&v52 + 4);
    v5 = HIDWORD(v52);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v14 = *((_QWORD *)this + 10);
    v15 = *(_QWORD *)(v14 + 400);
    v16 = *(std::__shared_weak_count **)(v14 + 408);
    v46 = v15;
    v47 = (uint64_t *)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *((unsigned int *)this + 23);
    v50 = 0x676C6F6262636C73;
    v51 = 0;
    v52 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v15 + 568))(v15, v19, 0, &v50, 0, 0, 4, &v52, (char *)&v52 + 4);
    v4 = HIDWORD(v52);
    if (v16)
    {
      v20 = (unint64_t *)&v16->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v22 = *((_QWORD *)this + 10);
    v23 = *(_QWORD *)(v22 + 400);
    v24 = *(std::__shared_weak_count **)(v22 + 408);
    v46 = v23;
    v47 = (uint64_t *)v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *((unsigned int *)this + 23);
    v50 = 0x676C6F6263736370;
    v51 = 0;
    v52 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v23 + 568))(v23, v27, 0, &v50, 0, 0, 4, &v52, (char *)&v52 + 4);
    v3 = HIDWORD(v52);
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v30 = *((_QWORD *)this + 10);
    v31 = *(_QWORD *)(v30 + 400);
    v32 = *(std::__shared_weak_count **)(v30 + 408);
    v46 = v31;
    v47 = (uint64_t *)v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = *((unsigned int *)this + 23);
    v50 = 0x676C6F6263656C6DLL;
    v51 = 0;
    v52 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v31 + 568))(v31, v35, 0, &v50, 0, 0, 4, &v52, (char *)&v52 + 4);
    v2 = HIDWORD(v52);
    if (v32)
    {
      v36 = (unint64_t *)&v32->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v46 = 0;
  v47 = &v46;
  v48 = 0x2000000000;
  v49 = 0;
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 0x40000000;
  v41[2] = ___ZN18HALS_PlugInControl12RefreshCacheEv_block_invoke;
  v41[3] = &unk_1E697FBE0;
  v41[4] = &v46;
  v41[5] = this;
  v42 = v5;
  v43 = v4;
  v44 = v3;
  v45 = v2;
  v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInControl *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v41);
  v39 = *((unsigned __int8 *)v47 + 24);
  _Block_object_dispose(&v46, 8);
  return v39;
}

void sub_1B5A42364(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A422CCLL);
}

void sub_1B5A423C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18HALS_PlugInControl12RefreshCacheEv_block_invoke(uint64_t result)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_DWORD **)(result + 40);
  v2 = *(_DWORD *)(result + 48);
  if (v1[5] != v2)
  {
    v1[5] = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v3 = *(_DWORD *)(result + 52);
  if (v1[6] != v3)
  {
    v1[6] = v3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v4 = *(_DWORD *)(result + 56);
  if (v1[12] != v4)
  {
    v1[12] = v4;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v5 = *(_DWORD *)(result + 60);
  if (v1[13] != v5)
  {
    v1[13] = v5;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t HALS_PlugInControl::HALS_PlugInControl(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3, int a4, HALB_Info *a5, int a6, int a7)
{
  HALS_Object *v12;
  HALS_Object *v13;
  _BOOL8 IsSubClass;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  std::runtime_error *exception;
  int v23;
  uint64_t v24;
  std::runtime_error v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  std::runtime_error v31;
  std::runtime_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint8_t buf[8];
  _BYTE v40[10];
  __int16 v41;
  int v42;
  _BYTE v43[24];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v12 = HALS_Control::HALS_Control((HALS_Object *)a1, a3, (int)a5, a6, 0, 0, a7);
  *((_QWORD *)v12 + 9) = off_1E6996080;
  *((_QWORD *)v12 + 10) = a2;
  *((_DWORD *)v12 + 22) = *((_DWORD *)a2 + 4);
  *((_DWORD *)v12 + 23) = a4;
  *((_QWORD *)v12 + 12) = 0;
  *((_DWORD *)v12 + 26) = 0;
  if (!a2 || (char *)a2 + 328 != (char *)v12 + 72)
    HALS_ObjectMap::RetainObject(a2, v13);
  *(_QWORD *)a1 = off_1E697FAB0;
  *(_QWORD *)(a1 + 72) = &unk_1E697FBB0;
  *(_DWORD *)(a1 + 44) = a4;
  IsSubClass = HALB_Info::IsSubClass(a5, 1633907820);
  if (!IsSubClass)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)IsSubClass);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = *(std::__shared_weak_count **)v40;
    v17 = **(NSObject ***)buf;
    if (*(_QWORD *)v40)
    {
      v18 = (unint64_t *)(*(_QWORD *)v40 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)v40 = 2080;
      *(_QWORD *)&v40[2] = "HALS_PlugInControl.cpp";
      v41 = 1024;
      v42 = 35;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "isValidControlClass == false";
      *(_WORD *)&v43[10] = 1024;
      *(_DWORD *)&v43[12] = (_DWORD)a5;
      *(_WORD *)&v43[16] = 1024;
      *(_DWORD *)&v43[18] = a6;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device is creating a control with invalid class ID %u, base class ID %u", buf, 0x2Eu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v31, "Device is creating a control with invalid class");
    std::runtime_error::runtime_error(&v32, &v31);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v33 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(_QWORD *)&v43[8] = "HALS_PlugInControl::HALS_PlugInControl(HALS_PlugIn *, HALS_Object *, UInt32, AudioClassID, Audi"
                         "oClassID, ControlType)";
    *(_QWORD *)&v43[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/PlugIn/HALS_PlugInControl.cpp";
    v44 = 35;
    std::vector<void *>::vector(&v26);
    v23 = backtrace((void **)v26, (*((_QWORD *)&v26 + 1) - (_QWORD)v26) >> 3);
    std::vector<void *>::resize((char **)&v26, v23);
    v28 = off_1E69A20A0;
    v29 = v26;
    v30 = v27;
    v26 = 0uLL;
    v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v24 = *(_QWORD *)v43;
    exception[1].__imp_.__imp_ = *(const char **)v43;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    v25 = *(std::runtime_error *)&v43[8];
    LODWORD(exception[3].__vftable) = v44;
    exception[2] = v25;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  return a1;
}

void sub_1B5A427B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  HALS_Object *v30;
  HALS_PlugInObject *v31;
  uint64_t v33;

  HALS_PlugInObject::~HALS_PlugInObject(v31);
  *(_QWORD *)v30 = off_1E6995A68;
  v33 = *((_QWORD *)v30 + 8);
  *((_QWORD *)v30 + 8) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  HALS_Object::~HALS_Object(v30);
  _Unwind_Resume(a1);
}

void AMCP::Log::Scope_Registry::get(AMCP::Log::Scope_Registry *this)
{
  unsigned __int8 v1;
  AMCP::Log::Scope_Registry *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      xmmword_1EDB87FD0 = 0u;
      unk_1EDB87FE0 = 0u;
      xmmword_1EDB87FB0 = 0u;
      unk_1EDB87FC0 = 0u;
      xmmword_1EDB87F90 = 0u;
      unk_1EDB87FA0 = 0u;
      xmmword_1EDB87F70 = 0u;
      unk_1EDB87F80 = 0u;
      xmmword_1EDB87F50 = 0u;
      unk_1EDB87F60 = 0u;
      xmmword_1EDB87F30 = 0u;
      *(_OWORD *)&qword_1EDB87F40 = 0u;
      xmmword_1EDB87F10 = 0u;
      xmmword_1EDB87F20 = 0u;
      AMCP::Log::Scope_Registry::get(void)::s_registry = 0u;
      AMCP::Log::Scope_Registry::Scope_Registry(v2);
    }
  }
}

std::__shared_mutex_base *AMCP::Log::Scope_Registry::Scope_Registry(AMCP::Log::Scope_Registry *this)
{
  qword_1EDB87F40 = 0;
  xmmword_1EDB87F20 = 0u;
  xmmword_1EDB87F30 = 0u;
  AMCP::Log::Scope_Registry::get(void)::s_registry = 0u;
  xmmword_1EDB87F10 = 0u;
  return std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&unk_1EDB87F48);
}

void sub_1B5A429A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)&xmmword_1EDB87F30;
  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&xmmword_1EDB87F20);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>(_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

uint64_t ShortTermLinearInterpolationResampler::SetRate(uint64_t this, double a2)
{
  BOOL v2;
  BOOL v3;
  _DWORD *exception;

  if (a2 >= 0.0)
  {
    v2 = a2 == 32.0;
    v3 = a2 < 32.0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if (!v3 && !v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  *(double *)(this + 40) = a2;
  *(_QWORD *)(this + 24) = vcvtd_n_s64_f64(a2, 0x20uLL);
  return this;
}

unint64_t ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  _DWORD *exception;

  if (a2 > 0x400000)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  if (!*(_BYTE *)this && (_DWORD)a2)
    return (*((_QWORD *)this + 2) + *((_QWORD *)this + 3) * (unint64_t)a2 + 0x80000000) >> 32;
  return a2;
}

uint64_t ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  if (a2 > 0x400000)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  if (!*(_BYTE *)this)
  {
    v2 = *((_QWORD *)this + 3);
    v3 = ~*((_QWORD *)this + 2) + (a2 << 32) + v2;
    if (v3 < 0)
      return 0;
    else
      return v3 / v2;
  }
  return a2;
}

ShortTermLinearInterpolationResampler *ShortTermLinearInterpolationResampler::PreFlight(ShortTermLinearInterpolationResampler *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned int v6;
  ShortTermLinearInterpolationResampler *v7;
  unint64_t NumberOfSourceFrames;
  uint64_t v9;
  uint64_t NumberOfOutputFrames;
  _DWORD *exception;

  v5 = *a3;
  if (*(_BYTE *)this)
  {
    v6 = *a2;
    if (v5 < *a2)
      v6 = *a3;
    *a3 = v6;
    *a2 = v6;
  }
  else
  {
    v7 = this;
    NumberOfSourceFrames = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(this, v5);
    v9 = *a2;
    if (NumberOfSourceFrames <= v9)
    {
      *a2 = NumberOfSourceFrames;
      this = (ShortTermLinearInterpolationResampler *)ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v7, NumberOfSourceFrames);
      if (this < *a3)
        *a3 = this;
    }
    else
    {
      NumberOfOutputFrames = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v7, v9);
      if (NumberOfOutputFrames > *a3)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1835103336;
        __cxa_throw(exception, MEMORY[0x1E0DE4EF8], 0);
      }
      *a3 = NumberOfOutputFrames;
      this = (ShortTermLinearInterpolationResampler *)ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v7, NumberOfOutputFrames);
      if (this < *a2)
        *a2 = this;
    }
  }
  return this;
}

uint64_t ShortTermLinearInterpolationResampler::PushConvertFloat(ShortTermLinearInterpolationResampler *this, float *__src, float *a3, float *__dst, float *a5, unsigned int *a6, unsigned int *a7, size_t __n, unsigned int a9)
{
  uint64_t result;
  int v12;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  int v31;
  int v32;
  unint64_t v33;

  result = 4294967246;
  if (__src)
  {
    if (__dst)
    {
      v12 = __n;
      if (!a3 || a5)
      {
        if (*(_BYTE *)this)
        {
          v18 = *a7;
          *a6 = *a7;
        }
        else
        {
          ShortTermLinearInterpolationResampler::PreFlight(this, a6, a7);
          v18 = *a6;
        }
        v19 = *a7;
        if (*a7 == v18)
        {
          if (v12 == 1 && a9 == 1)
          {
            v20 = 4 * v18;
            memcpy(__dst, __src, v20);
            if (a3)
              memcpy(a5, a3, v20);
          }
          else if (a3)
          {
            if (v18)
            {
              v26 = 0;
              v27 = 0;
              do
              {
                __dst[v27] = __src[v26];
                a5[v27] = a3[v26];
                v26 += v12;
                v27 += a9;
                --v18;
              }
              while (v18);
            }
          }
          else if (v18)
          {
            v31 = 0;
            v32 = 0;
            do
            {
              __dst[v32] = __src[v31];
              v31 += v12;
              v32 += a9;
              --v18;
            }
            while (v18);
          }
        }
        else
        {
          v21 = (uint64_t)((double)(v18 - 1) * 4294967300.0 / (double)(v19 - 1));
          if (a3)
          {
            if (v19)
            {
              v22 = 0;
              v23 = 0;
              do
              {
                v24 = (float)v23 * 2.3283e-10;
                v25 = HIDWORD(v23) * v12 + v12;
                __dst[v22] = __src[HIDWORD(v23) * v12] + (float)(v24 * (float)(__src[v25] - __src[HIDWORD(v23) * v12]));
                a5[v22] = a3[HIDWORD(v23) * v12] + (float)(v24 * (float)(a3[v25] - a3[HIDWORD(v23) * v12]));
                v23 += v21;
                v22 += a9;
                --v19;
              }
              while (v19);
            }
          }
          else if (v19)
          {
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = __src[HIDWORD(v29) * v12];
              __dst[v28] = v30
                         + (float)((float)((float)v29 * 2.3283e-10)
                                 * (float)(__src[HIDWORD(v29) * v12 + v12] - v30));
              v29 += v21;
              v28 += a9;
              --v19;
            }
            while (v19);
          }
        }
        if (*(_BYTE *)this)
          v33 = 0;
        else
          v33 = *((_QWORD *)this + 2) + *((_QWORD *)this + 3) * *a7 + ((unint64_t)-*a6 << 32);
        result = 0;
        *((_QWORD *)this + 2) = v33;
      }
    }
  }
  return result;
}

void AMCP::Core::System_Core_Keeper::~System_Core_Keeper(AMCP::Core::System_Core_Keeper *this)
{
  *(_QWORD *)this = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  float v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::string v62;
  __int128 v63;
  _QWORD v64[2];
  char v65;

  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)a2, (unsigned __int8 *)a4))
  {
    goto LABEL_2;
  }
  if (!*a3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v21 = operator new();
  *(_QWORD *)v21 = &off_1E697C970;
  v22 = (std::string *)(v21 + 8);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(a4 + 16);
  }
  v32 = a3[1];
  *(_QWORD *)(v21 + 32) = *a3;
  *(_QWORD *)(v21 + 40) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 16);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_BYTE *)(v21 + 96) = 0;
  *(_BYTE *)(v21 + 104) = 0;
  *(_QWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = 0;
  *(_DWORD *)(v21 + 64) = 0;
  *(_QWORD *)(v21 + 72) = 0;
  *(_QWORD *)(v21 + 80) = 0;
  *(_DWORD *)(v21 + 88) = 0;
  *(_QWORD *)&v61 = v21;
  v64[0] = v21;
  v35 = (_QWORD *)operator new();
  *v35 = &off_1E697FC78;
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = v21;
  *((_QWORD *)&v61 + 1) = v35;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v62 = *(std::string *)a4;
  v63 = v61;
  v36 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v62);
  v37 = v36;
  v38 = *(_QWORD *)(a2 + 8);
  if (!v38)
    goto LABEL_61;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
  v39.i16[0] = vaddlv_u8(v39);
  v40 = v39.u32[0];
  if (v39.u32[0] > 1uLL)
  {
    v4 = v36;
    if (v36 >= v38)
      v4 = v36 % v38;
  }
  else
  {
    v4 = (v38 - 1) & v36;
  }
  v41 = *(unsigned __int8 ***)(*(_QWORD *)a2 + 8 * v4);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_61:
    v44 = (char *)operator new(0x38uLL);
    v45 = (_QWORD *)(a2 + 16);
    v64[0] = v44;
    v64[1] = a2 + 16;
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = v37;
    *(std::string *)(v44 + 16) = v62;
    memset(&v62, 0, sizeof(v62));
    *(_OWORD *)(v44 + 40) = v61;
    v63 = 0uLL;
    v65 = 1;
    v46 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
    v47 = *(float *)(a2 + 32);
    if (!v38 || (float)(v47 * (float)v38) < v46)
    {
      v48 = 1;
      if (v38 >= 3)
        v48 = (v38 & (v38 - 1)) != 0;
      v49 = v48 | (2 * v38);
      v50 = vcvtps_u32_f32(v46 / v47);
      if (v49 <= v50)
        v51 = v50;
      else
        v51 = v49;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a2, v51);
      v38 = *(_QWORD *)(a2 + 8);
      if ((v38 & (v38 - 1)) != 0)
      {
        if (v37 >= v38)
          v4 = v37 % v38;
        else
          v4 = v37;
      }
      else
      {
        v4 = (v38 - 1) & v37;
      }
    }
    v56 = *(_QWORD *)a2;
    v57 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v4);
    if (v57)
    {
      *(_QWORD *)v44 = *v57;
    }
    else
    {
      *(_QWORD *)v44 = *v45;
      *v45 = v44;
      *(_QWORD *)(v56 + 8 * v4) = v45;
      if (!*(_QWORD *)v44)
      {
LABEL_89:
        v64[0] = 0;
        ++*(_QWORD *)(a2 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v64);
        goto LABEL_90;
      }
      v58 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      if ((v38 & (v38 - 1)) != 0)
      {
        if (v58 >= v38)
          v58 %= v38;
      }
      else
      {
        v58 &= v38 - 1;
      }
      v57 = (_QWORD *)(*(_QWORD *)a2 + 8 * v58);
    }
    *v57 = v44;
    goto LABEL_89;
  }
  while (1)
  {
    v43 = *((_QWORD *)v42 + 1);
    if (v43 == v37)
      break;
    if (v40 > 1)
    {
      if (v43 >= v38)
        v43 %= v38;
    }
    else
    {
      v43 &= v38 - 1;
    }
    if (v43 != v4)
      goto LABEL_61;
LABEL_60:
    v42 = *(unsigned __int8 **)v42;
    if (!v42)
      goto LABEL_61;
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v42 + 16, (unsigned __int8 *)&v62))
    goto LABEL_60;
  if (*((_QWORD *)&v61 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v61 + 1) + 16))(*((_QWORD *)&v61 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v61 + 1));
    }
  }
LABEL_90:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_2:
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)a2, (unsigned __int8 *)a4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 40, (unsigned __int8 *)a4, a4);
  v10 = *((_QWORD *)v9 + 5);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 64));
  v11 = *a3;
  if (!*a3)
    goto LABEL_33;
  v12 = *(std::__shared_weak_count **)(v10 + 40);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_21;
  }
  v13 = std::__shared_weak_count::lock(v12);
  if (!v13)
  {
    v11 = *a3;
LABEL_21:
    v23 = a3[1];
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 16);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = *(std::__shared_weak_count **)(v10 + 40);
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v23;
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    if (*(_BYTE *)(v10 + 104))
      *(_BYTE *)(v10 + 104) = 0;
    if (v13)
      goto LABEL_29;
    goto LABEL_33;
  }
  v14 = *(_QWORD *)(v10 + 32);
  v11 = *a3;
  if (!v14)
    goto LABEL_21;
  if (v14 == v11)
    goto LABEL_29;
  v15 = *(std::__shared_weak_count **)(v10 + 56);
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (*(_DWORD *)(v10 + 88))
  {
    v17 = *a3;
    v16 = a3[1];
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 16);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(std::__shared_weak_count **)(v10 + 56);
    *(_QWORD *)(v10 + 48) = v17;
    *(_QWORD *)(v10 + 56) = v16;
    if (!v20)
      goto LABEL_29;
LABEL_78:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_29;
  }
  if (*(_BYTE *)(v10 + 104))
    *(_BYTE *)(v10 + 104) = 0;
  v53 = *a3;
  v52 = a3[1];
  if (v52)
  {
    v54 = (unint64_t *)(v52 + 16);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v20 = *(std::__shared_weak_count **)(v10 + 40);
  *(_QWORD *)(v10 + 32) = v53;
  *(_QWORD *)(v10 + 40) = v52;
  if (v20)
    goto LABEL_78;
LABEL_29:
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_33:
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 64));
  v29 = *((_QWORD *)v9 + 6);
  *a1 = *((_QWORD *)v9 + 5);
  a1[1] = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
}

void sub_1B5A434A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<AMCP::Graph::Timebase>>::~pair(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

AMCP::IO_Core::Device_Timebase *std::unique_ptr<AMCP::IO_Core::Device_Timebase>::reset[abi:ne180100](AMCP::IO_Core::Device_Timebase **a1)
{
  AMCP::IO_Core::Device_Timebase *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::IO_Core::Device_Timebase::~Device_Timebase(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

AMCP::IO_Core::Device_Timebase *std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::__on_zero_shared(uint64_t a1)
{
  AMCP::IO_Core::Device_Timebase *result;

  result = *(AMCP::IO_Core::Device_Timebase **)(a1 + 24);
  if (result)
  {
    AMCP::IO_Core::Device_Timebase::~Device_Timebase(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph8TimebaseEE27__shared_ptr_default_deleteIS3_NS1_7IO_Core15Device_TimebaseEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void AMCP::IOAudio1::Stream::~Stream(AMCP::IOAudio1::Stream *this)
{
  AMCP::IOAudio1::Stream::~Stream(this);
  JUMPOUT(0x1B5E50688);
}

{
  *(_QWORD *)this = &off_1E697FCC8;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  *((_DWORD *)this + 4) = 0;
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);
}

double AMCP::IOAudio1::make_sample_rate_from_dictionary(AMCP::IOAudio1 *this, const applesauce::CF::DictionaryRef *a2, const __CFString *a3)
{
  const __CFDictionary *v5;
  double result;
  std::runtime_error *exception;
  CFTypeRef v8;
  unsigned int v9;
  CFTypeRef v10;
  unsigned int v11;
  std::runtime_error *v12;
  std::runtime_error *v13;
  CFTypeRef v14;
  CFTypeRef cf;
  char v16;

  if (!this)
  {
    result = 0.0;
    if (!a2)
      return result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(this);
  if (a2)
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, this, a2);
    if (v16)
    {
      v5 = (const __CFDictionary *)cf;
      if (cf)
        CFRetain(cf);
    }
    else
    {
      v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    CFRelease(this);
    if (!v5)
      return 0.0;
  }
  else
  {
    v5 = this;
  }
  LODWORD(cf) = 0;
  v14 = CFNumberCreate(0, kCFNumberIntType, &cf);
  if (!v14)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&cf, v5, CFSTR("IOAudioSampleRateWholeNumber"), &v14);
  v8 = cf;
  if (!cf)
    goto LABEL_25;
  v9 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  CFRelease(v8);
  if (v14)
    CFRelease(v14);
  LODWORD(cf) = 0;
  v14 = CFNumberCreate(0, kCFNumberIntType, &cf);
  if (!v14)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&cf, v5, CFSTR("IOAudioSampleRateFraction"), &v14);
  v10 = cf;
  if (!cf)
  {
LABEL_25:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_26;
  }
  v11 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  CFRelease(v10);
  if (v14)
    CFRelease(v14);
  CFRelease(v5);
  return (double)v11 / 4294967300.0 + (double)v9;
}

void sub_1B5A43960(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void AMCP::IOAudio1::get_stream_format(AMCP::IOAudio1 *this, AMCP::IOAudio1 **a2, CFDictionaryRef theDict)
{
  const void *v5;
  const void *v6;
  applesauce::CF::DictionaryRef *v7;
  const __CFString *v8;
  const __CFString *v9;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  std::runtime_error *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::runtime_error v20;
  std::runtime_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  const __CFDictionary *v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_12;
  }
  v5 = applesauce::CF::details::at_key<__CFString const*>(theDict, CFSTR("IOAudioStreamFormat"));
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
LABEL_12:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  CFRetain(v5);
  v7 = applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v28, v6);
  if (!v28)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v30 = 2080;
      v31 = "IOAudio1_Stream.cpp";
      v32 = 1024;
      v33 = 275;
      v34 = 2080;
      *(_QWORD *)v35 = "(raw_current_format.is_valid()) == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    v13 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "failed to find the current format for a stream");
    std::runtime_error::runtime_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v22 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v35[6] = "CA::StreamDescription AMCP::IOAudio1::get_stream_format(const CF::Dictionary &, const CF::Dictionary &)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    v37 = 275;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  AMCP::IOAudio1::make_format_from_dictionary(this, &v28);
  AMCP::IOAudio1::make_sample_rate_from_dictionary(v28, (const applesauce::CF::DictionaryRef *)CFSTR("IOAudioSampleRate"), v8);
  *(double *)this = AMCP::IOAudio1::make_sample_rate_from_dictionary(*a2, (const applesauce::CF::DictionaryRef *)CFSTR("IOAudioSampleRate"), v9);
  if (v28)
    CFRelease(v28);
}

void sub_1B5A43C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::runtime_error a16, std::runtime_error a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v19 - 120));
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::make_format_from_dictionary(AMCP::IOAudio1 *this, const __CFDictionary **a2)
{
  const __CFNumber *v4;
  int v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  int v10;
  const __CFNumber *v11;
  int v12;
  const __CFNumber *v13;
  int v14;
  _BOOL4 v15;
  const __CFNumber *v16;
  unsigned int v17;
  _BOOL4 v18;
  const __CFNumber *v19;
  int v20;
  _BOOL4 v21;
  const __CFNumber *v22;
  int v23;
  _BOOL4 v24;
  const __CFNumber *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  std::runtime_error *exception;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  _BOOL4 v42;
  int v43;
  CFTypeRef cf;
  const __CFNumber *valuePtr;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_96;
  }
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamSampleFormat"), &cf);
  v4 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v5 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 2) = v5;
  CFRelease(v4);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamFormatFlags"), &cf);
  v6 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  *((_DWORD *)this + 3) = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v6);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamBytesPerPacket"), &cf);
  v7 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  *((_DWORD *)this + 4) = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v7);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamFramesPerPacket"), &cf);
  v8 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v43 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 5) = v43;
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamNumChannels"), &cf);
  v9 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v10 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 7) = v10;
  CFRelease(v9);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamBitDepth"), &cf);
  v11 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v12 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 8) = v12;
  CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 1936289396;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamNumericRepresentation"), &cf);
  v13 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v14 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v13);
  if (cf)
    CFRelease(cf);
  v42 = v14 == 1718382452;
  v15 = v14 == 1936289396;
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = v12;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamBitWidth"), &cf);
  v16 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v17 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v16);
  if (cf)
    CFRelease(cf);
  v18 = v17 == v12;
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 1;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamAlignment"), &cf);
  v19 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v20 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v19);
  if (cf)
    CFRelease(cf);
  v21 = v20 == 1;
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamByteOrder"), &cf);
  v22 = valuePtr;
  if (!valuePtr)
    goto LABEL_95;
  v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v22);
  if (cf)
    CFRelease(cf);
  v24 = v23 == 0;
  if (!*a2)
    goto LABEL_95;
  LODWORD(valuePtr) = 1;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, CFSTR("IOAudioStreamIsMixable"), &cf);
  v25 = valuePtr;
  if (!valuePtr)
  {
LABEL_95:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_96:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v26 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v25);
  if (cf)
    CFRelease(cf);
  v27 = 2 * v24;
  if (v5 == 1819304813)
  {
    v28 = (4 * v15) | v42 | (8 * v18) | (16 * v21) | ((v26 == 0) << 6) | v27;
    if (!v28)
      v28 = 0x80000000;
    v29 = v10 * (v17 >> 3);
    *((_DWORD *)this + 3) = v28;
    *((_DWORD *)this + 4) = v29;
    *((_DWORD *)this + 5) = 1;
    *((_DWORD *)this + 6) = v29;
  }
  else if (v5 == 1667326771)
  {
    *((_DWORD *)this + 3) = v27 | 0x4C;
    *((_DWORD *)this + 4) = 4 * v43;
    *((_QWORD *)this + 3) = 0x200000000;
    *((_DWORD *)this + 8) = 16;
  }
}

void sub_1B5A447A4(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

BOOL AMCP::IOAudio1::get_stream_direction(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  _BOOL8 v2;
  std::runtime_error *exception;
  const __CFNumber *v5;
  char v6;

  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, CFSTR("IOAudioStreamDirection"));
  if (!v6)
  {
    v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v2 = applesauce::CF::convert_to<unsigned int,0>(v5) == 1;
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1B5A4497C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOAudio1::get_stream_starting_channel(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  unint64_t v2;
  std::runtime_error *exception;
  const __CFNumber *v5;
  char v6;

  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, CFSTR("IOAudioStreamStartingChannelNumber"));
  if (!v6)
  {
    v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v2 = applesauce::CF::convert_to<unsigned int,0>(v5);
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1B5A44A50(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void AMCP::IOAudio1::Stream::create_from_service_list(uint64_t a1, uint64_t a2, io_object_t *a3, io_object_t *a4)
{
  __int128 v4;
  io_object_t *v6;
  io_registry_entry_t v8;
  uint64_t v9;
  BOOL v10;
  const applesauce::CF::DictionaryRef *v11;
  uint64_t v12;
  io_object_t v13;
  uint64_t v14;
  const applesauce::CF::DictionaryRef *v15;
  unsigned int stream_starting_channel;
  int v17;
  BOOL v18;
  __int128 *v19;
  char *v20;
  char **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::runtime_error *exception;
  void (*v33)(void *);
  struct type_info *v34;
  const std::error_category *v35;
  uint64_t v36;
  void *v37;
  const std::error_category *v38;
  std::runtime_error *v39;
  uint64_t v40;
  CFTypeRef cf;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  CFMutableDictionaryRef properties;
  char v47;
  void **v48;
  char v49;

  v45 = 0;
  v4 = 0uLL;
  v44 = 0u;
  v43 = 0;
  v42 = 0u;
  if (a3 == a4)
  {
    v31 = 0;
    v29 = 0;
    v30 = 0uLL;
    goto LABEL_37;
  }
  v6 = a3;
  v40 = a1;
  do
  {
    v8 = *v6;
    if (!*v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
      v33 = (void (*)(void *))MEMORY[0x1E0DE4338];
      v34 = (struct type_info *)MEMORY[0x1E0DE4E80];
      goto LABEL_41;
    }
    properties = 0;
    v9 = IORegistryEntryCreateCFProperties(v8, &properties, 0, 0);
    if ((_DWORD)v9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
      v35 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v9, v35, "Error on get_properties");
      v33 = (void (*)(void *))MEMORY[0x1E0DE4580];
      v34 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_41:
      __cxa_throw(exception, v34, v33);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
    if (!cf)
      goto LABEL_45;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v48, (CFDictionaryRef)cf, CFSTR("IOAudioStreamAvailable"));
    if (v49)
    {
      if (!v48)
        goto LABEL_45;
      v10 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v48);
      goto LABEL_13;
    }
    if (!cf)
      goto LABEL_45;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&properties, (CFDictionaryRef)cf, CFSTR("IOAudioStreamAvailable"));
    if (v47)
    {
      if (!properties)
      {
LABEL_45:
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Could not construct");
        __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v10 = applesauce::CF::convert_to<BOOL,0>(properties);
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&properties);
LABEL_13:
      std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v48);
      if (!v10)
        goto LABEL_32;
      goto LABEL_16;
    }
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&properties);
    std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v48);
LABEL_16:
    v12 = operator new();
    v13 = *v6;
    if (*v6)
    {
      v14 = IOObjectRetain(*v6);
      if ((_DWORD)v14)
      {
        v36 = v14;
        v37 = __cxa_allocate_exception(0x20uLL);
        v38 = std::system_category();
        MEMORY[0x1B5E5022C](v37, v36, v38, "Error on Retain");
        __cxa_throw(v37, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    *(_DWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 20) = v13;
    *(_QWORD *)v12 = &off_1E697FCC8;
    *(_QWORD *)(v12 + 8) = a2;
    *(_DWORD *)(v12 + 24) = AMCP::IOAudio1::get_stream_direction((CFDictionaryRef)cf, v11);
    stream_starting_channel = AMCP::IOAudio1::get_stream_starting_channel((CFDictionaryRef)cf, v15);
    *(_DWORD *)(v12 + 28) = stream_starting_channel;
    v48 = (void **)v12;
    v17 = *(_DWORD *)(v12 + 24);
    v18 = v17 == 0;
    if (v17)
      v19 = &v42;
    else
      v19 = &v44;
    v20 = *(char **)v19;
    v21 = (char **)&v44 + 1;
    if (!v18)
      v21 = (char **)&v42 + 1;
    v22 = *v21;
    v23 = *v21 - v20;
    if (v23)
    {
      v24 = v23 >> 3;
      do
      {
        v25 = v24 >> 1;
        v26 = &v20[8 * (v24 >> 1)];
        v28 = *(_QWORD *)v26;
        v27 = v26 + 8;
        v24 += ~(v24 >> 1);
        if (*(_DWORD *)(v28 + 28) < stream_starting_channel)
          v20 = v27;
        else
          v24 = v25;
      }
      while (v24);
      v22 = v20;
    }
    std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::emplace<std::unique_ptr<AMCP::IOAudio1::Stream>>(v19, v22, (uint64_t *)&v48);
    if (v48)
      (*((void (**)(void **))*v48 + 1))(v48);
LABEL_32:
    if (cf)
      CFRelease(cf);
    ++v6;
  }
  while (v6 != a4);
  v4 = v44;
  v29 = v45;
  v30 = v42;
  v31 = v43;
  a1 = v40;
LABEL_37:
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v29;
  v45 = 0;
  v44 = 0uLL;
  *(_OWORD *)(a1 + 24) = v30;
  *(_QWORD *)(a1 + 40) = v31;
  v43 = 0;
  v42 = 0uLL;
  v48 = (void **)&v42;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&v48);
  *(_QWORD *)&v42 = &v44;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
}

void sub_1B5A44E34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;

  __cxa_free_exception(v21);
  __clang_call_terminate(a1);
}

_QWORD *std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::emplace<std::unique_ptr<AMCP::IOAudio1::Stream>>(_QWORD *result, char *a2, uint64_t *a3)
{
  char **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  int64x2_t v57;
  char *v58;
  _QWORD *v59;

  v4 = (char **)result;
  v6 = (char *)*result;
  v5 = (char *)result[1];
  v7 = (uint64_t)&a2[-*result];
  v8 = v7 >> 3;
  v9 = (char *)(*result + (v7 & 0xFFFFFFFFFFFFFFF8));
  v11 = result + 2;
  v10 = result[2];
  if ((unint64_t)v5 >= v10)
  {
    v18 = ((v5 - v6) >> 3) + 1;
    if (v18 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v20 = v10 - (_QWORD)v6;
    if (v20 >> 2 > v18)
      v18 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v18;
    v55 = v11;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v21);
    else
      v22 = 0;
    v28 = (_QWORD *)(v21 + 8 * v8);
    v52 = (char *)v21;
    *(_QWORD *)&v53 = v28;
    *((_QWORD *)&v53 + 1) = v28;
    v54 = (char *)(v21 + 8 * v22);
    v29 = v28;
    if (v8 == v22)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v31 = 1;
        else
          v31 = v7 >> 2;
        v59 = v11;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v31);
        v34 = (uint64_t *)v53;
        v35 = *((_QWORD *)&v53 + 1) - v53;
        if (*((_QWORD *)&v53 + 1) == (_QWORD)v53)
        {
          v41 = vdupq_n_s64(v53);
          v37 = (unint64_t)&v32[8 * (v31 >> 2)];
        }
        else
        {
          v36 = v35 >> 3;
          v37 = (unint64_t)&v32[8 * (v31 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8)];
          v38 = 8 * v36;
          v39 = &v32[8 * (v31 >> 2)];
          do
          {
            v40 = *v34;
            *v34++ = 0;
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
          v41 = (int64x2_t)v53;
        }
        v42 = v54;
        v56 = v52;
        v52 = v32;
        *(_QWORD *)&v53 = &v32[8 * (v31 >> 2)];
        v57 = v41;
        *((_QWORD *)&v53 + 1) = v37;
        v54 = &v32[8 * v33];
        v58 = v42;
        std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&v56);
        v29 = (_QWORD *)*((_QWORD *)&v53 + 1);
        v28 = (_QWORD *)v53;
      }
      else
      {
        v30 = v8 + 2;
        if (v8 >= -1)
          v30 = v8 + 1;
        v28 -= v30 >> 1;
        v29 = v28;
      }
    }
    v43 = *a3;
    *a3 = 0;
    *v29 = v43;
    v44 = (char *)(v29 + 1);
    v45 = *v4;
    if (*v4 != v9)
    {
      v46 = v9;
      do
      {
        v47 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *(_QWORD *)v46 = 0;
        *--v28 = v47;
      }
      while (v46 != v45);
    }
    *(_QWORD *)&v53 = v28;
    v48 = v4[1];
    if (v48 != v9)
    {
      do
      {
        v49 = *(_QWORD **)v9;
        *(_QWORD *)v9 = 0;
        v9 += 8;
        *(_QWORD *)v44 = v49;
        v44 += 8;
      }
      while (v9 != v48);
      v28 = (_QWORD *)v53;
      v9 = v4[1];
    }
    v50 = *v4;
    *v4 = (char *)v28;
    v4[1] = v44;
    v51 = v4[2];
    v4[2] = v54;
    *((_QWORD *)&v53 + 1) = v9;
    v54 = v51;
    v52 = v50;
    *(_QWORD *)&v53 = v50;
    return (_QWORD *)std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    v12 = *a3;
    *a3 = 0;
    v13 = v9 + 8;
    if (v9 == v5)
    {
      *(_QWORD *)v9 = v12;
      result[1] = v13;
    }
    else
    {
      v14 = (uint64_t *)result[1];
      v15 = v14 - 1;
      v16 = v14;
      while (v15 < v14)
      {
        v17 = *v15;
        *v15++ = 0;
        *v16++ = v17;
      }
      result[1] = v16;
      if (v14 != v13)
      {
        v23 = v14 - 1;
        v24 = 8 * (v14 - v13);
        v25 = (uint64_t)&v6[8 * v8 - 8];
        do
        {
          v26 = *(_QWORD *)(v25 + v24);
          *(_QWORD *)(v25 + v24) = 0;
          v27 = *v23;
          *v23 = v26;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          --v23;
          v24 -= 8;
        }
        while (v24);
      }
      result = *(_QWORD **)v9;
      *(_QWORD *)v9 = v12;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_1B5A451D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL AMCP::IOAudio1::operator==(io_object_t object, io_object_t a2)
{
  _BOOL8 result;

  result = (object | a2) == 0;
  if (object)
  {
    if (a2)
      return IOObjectIsEqualTo(object, a2) != 0;
  }
  return result;
}

void AMCP::IOAudio1::Stream::build_core(AMCP::IOAudio1::Stream *this)
{
  io_registry_entry_t v2;
  uint64_t CFProperties;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  std::runtime_error *exception;
  void (*v31)(void *);
  struct type_info *v32;
  const std::error_category *v33;
  AMCP::Core::Core *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  CFTypeRef cf;
  CFTypeRef v39;
  void *__p[2];
  __int128 v41;
  int v42;
  __int128 properties;

  *((_DWORD *)this + 4) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                                                                                  + 32)
                                                                                      + 16));
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  v42 = 1065353216;
  v2 = *((_DWORD *)this + 5);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v31 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v32 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_57;
  }
  *(_QWORD *)&properties = 0;
  CFProperties = IORegistryEntryCreateCFProperties(v2, (CFMutableDictionaryRef *)&properties, 0, 0);
  if ((_DWORD)CFProperties)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v33 = std::system_category();
    MEMORY[0x1B5E5022C](exception, CFProperties, v33, "Error on get_properties");
    v31 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v32 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_57:
    __cxa_throw(exception, v32, v31);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v39, (CFTypeRef)properties);
  LODWORD(v36) = *((_DWORD *)this + 4);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v36, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
  if (*((_QWORD *)&properties + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  LODWORD(v36) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v36, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
  if (*((_QWORD *)&properties + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  LODWORD(v36) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v36, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
  if (*((_QWORD *)&properties + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  LODWORD(v36) = *(_DWORD *)(*((_QWORD *)this + 1) + 32);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v36, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
  if (*((_QWORD *)&properties + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.iokit.IOAudio1");
  v36 = 0x676C6F626F706C67;
  LODWORD(v37) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&properties, (uint64_t)&v36, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
  if (*((_QWORD *)&properties + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (cf)
    CFRelease(cf);
  v19 = *((_DWORD *)this + 4);
  *(_QWORD *)&properties = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16);
  DWORD2(properties) = v19;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v36, 0, &properties, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v36 + 40), &v36);
  v20 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  AMCP::IOAudio1::Device::get_resource_bundle_url((AMCP::IOAudio1::Device *)&cf, *((_QWORD *)this + 1));
  if (cf)
  {
    v36 = 0x676C6F6272737263;
    LODWORD(v37) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)&properties, (uint64_t)&v36, cf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
    if (*((_QWORD *)&properties + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  AMCP::IOAudio1::Device::get_engine_registry_entries(&properties, *(const void **)(*((_QWORD *)this + 1) + 464));
  AMCP::IOAudio1::update_stream_core((uint64_t)__p, (AMCP::IOAudio1::Stream *)((char *)this + 20), (AMCP::IOAudio1 **)&properties, (CFDictionaryRef *)&v39);
  if ((_QWORD)properties)
    CFRelease((CFTypeRef)properties);
  AMCP::Core::Broker::make_core(&v34, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 32) + 16), (uint64_t)__p, *((unsigned int *)this + 4));
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v39)
    CFRelease(v39);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v41);
  v29 = __p[0];
  __p[0] = 0;
  if (v29)
    operator delete(v29);
}

void sub_1B5A45768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1B5A45834()
{
  JUMPOUT(0x1B5A45824);
}

void AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v10[2];
  void (*v11)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (cf)
  {
    CFRetain(cf);
    v13 = 0;
    v12[0] = &off_1E6998010;
    CFRetain(cf);
  }
  else
  {
    v13 = 0;
    v12[0] = &off_1E6998010;
  }
  v12[1] = cf;
  v13 = v12;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v12);
  v11 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11)
    v11(0, (uint64_t)v10, 0, 0);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  if (cf)
    CFRelease(cf);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(v6);
  if (cf)
    CFRelease(cf);
}

void sub_1B5A459AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::IOAudio1::Device::get_engine_registry_entries(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

void AMCP::IOAudio1::update_stream_core(uint64_t a1, const applesauce::CF::DictionaryRef *a2, AMCP::IOAudio1 **a3, CFDictionaryRef *a4)
{
  const applesauce::CF::DictionaryRef *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  _BOOL4 v16;
  const __CFDictionary *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  CFTypeRef v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  CFTypeRef v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const __CFDictionary *v31;
  AMCP::Log::Scope_Registry *v32;
  const __CFArray *v33;
  CFIndex Count;
  double *v35;
  unint64_t v36;
  double *v37;
  unint64_t v38;
  const __CFArray *v39;
  CFIndex i;
  double v41;
  const __CFString *v42;
  double sample_rate_from_dictionary;
  const __CFString *v44;
  double v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  io_object_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  const __CFDictionary **p_valuePtr;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  io_object_t v69;
  uint64_t v70;
  const char *imp;
  const __CFDictionary **v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  const __CFDictionary **v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  NSObject *v81;
  _opaque_pthread_t *v82;
  mach_port_t v83;
  void *v84;
  std::runtime_error *exception;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  void *v95;
  const std::error_category *v96;
  void *v97;
  const std::error_category *v98;
  void *v99;
  const std::error_category *v100;
  std::runtime_error *v101;
  std::runtime_error *v102;
  std::runtime_error *v103;
  CFDictionaryRef *v104;
  io_object_t *v105;
  std::runtime_error object;
  const __CFDictionary **v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t v112;
  void *__p;
  double *v114;
  unint64_t v115;
  CFTypeRef v116[2];
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  CFArrayRef theArray;
  CFTypeRef cf[2];
  const __CFDictionary **v123;
  uint64_t v124;
  CFTypeRef *v125;
  CFTypeRef v126[6];
  int v127;
  const __CFDictionary *valuePtr;
  __int128 v129;
  const __CFDictionary **v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  LODWORD(v116[0]) = AMCP::IOAudio1::get_stream_direction(*a4, a2);
  AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)v126, 0, (int *)v116, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v9 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v10 = (unint64_t *)((char *)v126[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v116[0]) = AMCP::IOAudio1::get_stream_starting_channel(*a4, v8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v126, 0, (int *)v116, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v12 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v13 = (unint64_t *)((char *)v126[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v116[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v116[0])
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not construct");
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v126, *a4, CFSTR("IOAudioStreamReference"), v116);
  v15 = v126[0];
  if (!v126[0])
  {
    v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
    __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)v126[0]))
  {
    v16 = 1;
  }
  else
  {
    if (!*a4)
    {
      v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v101, "Could not construct");
      __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    LODWORD(object.__vftable) = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, &object);
    if (!cf[0])
    {
      v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v102, "Could not construct");
      __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a4, CFSTR("IOAudioStreamTap"), cf);
    v17 = valuePtr;
    if (!valuePtr)
    {
      v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v103, "Could not construct");
      __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v16 = applesauce::CF::convert_to<BOOL,0>(valuePtr);
    CFRelease(v17);
    if (cf[0])
      CFRelease(cf[0]);
  }
  CFRelease(v15);
  if (v116[0])
    CFRelease(v116[0]);
  LODWORD(v116[0]) = v16;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v126, 0, (int *)v116, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v18 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v19 = (unint64_t *)((char *)v126[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*a4)
  {
    v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v88);
    __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v116[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v116[0])
  {
    v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v89, "Could not construct");
    __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v126, *a4, CFSTR("IOAudioStreamTerminalType"), v116);
  v21 = v126[0];
  if (!v126[0])
  {
    v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v126[0]);
  CFRelease(v21);
  if (v116[0])
    CFRelease(v116[0]);
  LODWORD(v116[0]) = v22;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v126, 0, (int *)v116, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v23 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v24 = (unint64_t *)((char *)v126[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (!*a4)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v91);
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v116[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v116[0])
  {
    v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
    __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v126, *a4, CFSTR("IOAudioStreamSampleLatency"), v116);
  v26 = v126[0];
  if (!v126[0])
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v126[0]);
  CFRelease(v26);
  if (v116[0])
    CFRelease(v116[0]);
  LODWORD(v116[0]) = v27;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)v126, 0, (int *)v116, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v28 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v29 = (unint64_t *)((char *)v126[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *a4;
  if (!*a4)
  {
    v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v94);
    __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v126[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v31, CFSTR("IOAudioStreamAvailableFormats"), v126);
  v32 = (AMCP::Log::Scope_Registry *)v126[0];
  if (v126[0])
    CFRelease(v126[0]);
  v33 = theArray;
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v126, "com.apple.coreaudio", "AMCP");
    v81 = *(NSObject **)v126[0];
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v126);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      v82 = pthread_self();
      v83 = pthread_mach_thread_np(v82);
      LODWORD(v126[0]) = 67109890;
      HIDWORD(v126[0]) = v83;
      LOWORD(v126[1]) = 2080;
      *(CFTypeRef *)((char *)&v126[1] + 2) = "IOAudio1_Stream.cpp";
      WORD1(v126[2]) = 1024;
      HIDWORD(v126[2]) = 363;
      LOWORD(v126[3]) = 2080;
      *(CFTypeRef *)((char *)&v126[3] + 2) = "(raw_available_format_list.is_valid()) == false";
      _os_log_error_impl(&dword_1B57BA000, v81, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", (uint8_t *)v126, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&__p);
    v84 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&object, "failed to find the available format list for a stream");
    std::runtime_error::runtime_error((std::runtime_error *)v116, &object);
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    v119 = 0;
    v120 = -1;
    v116[0] = &off_1E69A1FB8;
    *(_QWORD *)&v117 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v126, (uint64_t)v116);
    v126[4] = "void AMCP::IOAudio1::update_stream_core(Core::Operation_Set &, const IOKit::Service &, const CF::Dictionar"
              "y &, const CF::Dictionary &)";
    v126[5] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    v127 = 363;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)cf);
    v129 = *(_OWORD *)cf;
    valuePtr = (const __CFDictionary *)off_1E69A20A0;
    v130 = v123;
    cf[0] = 0;
    cf[1] = 0;
    v123 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)v126, (uint64_t)&valuePtr);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v84, (uint64_t)v126);
  }
  v104 = a4;
  v105 = (io_object_t *)a2;
  __p = 0;
  v114 = 0;
  v115 = 0;
  Count = CFArrayGetCount(theArray);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = v33;
LABEL_53:
  for (i = CFArrayGetCount(v39); v38 != Count && (v33 != v39 || v38 != i); i = 0)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&valuePtr, v33, v38);
    AMCP::IOAudio1::make_format_from_dictionary((AMCP::IOAudio1 *)v126, &valuePtr);
    v41 = *(double *)v126;
    *(_OWORD *)v116 = *(_OWORD *)&v126[1];
    v117 = *(_OWORD *)&v126[3];
    sample_rate_from_dictionary = AMCP::IOAudio1::make_sample_rate_from_dictionary(valuePtr, (const applesauce::CF::DictionaryRef *)CFSTR("IOAudioStreamMinimumSampleRate"), v42);
    v45 = AMCP::IOAudio1::make_sample_rate_from_dictionary(valuePtr, (const applesauce::CF::DictionaryRef *)CFSTR("IOAudioStreamMaximumSampleRate"), v44);
    if (sample_rate_from_dictionary == v45)
      v41 = sample_rate_from_dictionary;
    if ((unint64_t)v37 >= v36)
    {
      v47 = 0x6DB6DB6DB6DB6DB7 * (v37 - v35) + 1;
      if (v47 > 0x492492492492492)
      {
        v114 = v37;
        v115 = v36;
        __p = v35;
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v36 - (_QWORD)v35) >> 3) > v47)
        v47 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v36 - (_QWORD)v35) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v36 - (_QWORD)v35) >> 3)) >= 0x249249249249249)
        v48 = 0x492492492492492;
      else
        v48 = v47;
      if (v48)
        v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v48);
      else
        v49 = 0;
      v50 = v48 + 8 * (v37 - v35);
      *(double *)v50 = v41;
      *(_OWORD *)(v50 + 8) = *(_OWORD *)v116;
      *(_OWORD *)(v50 + 24) = v117;
      *(double *)(v50 + 40) = sample_rate_from_dictionary;
      *(double *)(v50 + 48) = v45;
      if (v37 == v35)
      {
        v52 = (double *)(v48 + 8 * (v37 - v35));
      }
      else
      {
        v51 = v48 + 8 * (v37 - v35);
        do
        {
          v52 = (double *)(v51 - 56);
          v53 = *(_OWORD *)(v37 - 7);
          v54 = *(_OWORD *)(v37 - 5);
          v55 = *(_OWORD *)(v37 - 3);
          *(double *)(v51 - 8) = *(v37 - 1);
          *(_OWORD *)(v51 - 24) = v55;
          *(_OWORD *)(v51 - 40) = v54;
          *(_OWORD *)(v51 - 56) = v53;
          v37 -= 7;
          v51 -= 56;
        }
        while (v37 != v35);
      }
      v36 = v48 + 56 * v49;
      v37 = (double *)(v50 + 56);
      if (v35)
        operator delete(v35);
      v35 = v52;
    }
    else
    {
      *v37 = v41;
      v46 = *(_OWORD *)v116;
      *(_OWORD *)(v37 + 3) = v117;
      *(_OWORD *)(v37 + 1) = v46;
      v37[5] = sample_rate_from_dictionary;
      v37[6] = v45;
      v37 += 7;
    }
    if (valuePtr)
      CFRelease(valuePtr);
    ++v38;
    v39 = theArray;
    if (theArray)
      goto LABEL_53;
  }
  v114 = v37;
  v115 = v36;
  __p = v35;
  AMCP::make_available_format_list((uint64_t *)&__p, &v111);
  v116[0] = (CFTypeRef)0x676C6F62666D7423;
  LODWORD(v116[1]) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)v126, (uint64_t)v116, v111, v112);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v126[0] + 10, v126);
  v56 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v57 = (unint64_t *)((char *)v126[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v116, a3, *v104);
  v59 = *v105;
  LODWORD(object.__vftable) = v59;
  if (v59)
  {
    v60 = IOObjectRetain(v59);
    if ((_DWORD)v60)
    {
      v95 = __cxa_allocate_exception(0x20uLL);
      v96 = std::system_category();
      MEMORY[0x1B5E5022C](v95, v60, v96, "Error on Retain");
      __cxa_throw(v95, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  object.__imp_.__imp_ = 0;
  v107 = 0;
  v108 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&object.__imp_, v111, v112, (v112 - v111) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v109, 0, 1.58366008e190);
  v61 = v109;
  v62 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  v130 = 0;
  v63 = (char *)operator new(0x30uLL);
  *(_QWORD *)v63 = &off_1E697FD00;
  v64 = v117;
  *(_OWORD *)(v63 + 8) = *(_OWORD *)v116;
  *(_OWORD *)(v63 + 24) = v64;
  *((_QWORD *)v63 + 5) = v118;
  v130 = (const __CFDictionary **)v63;
  memset(v126, 0, 40);
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)v126, (uint64_t)&valuePtr);
  v126[4] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v61, v62, (AMCP *)v126);
  if (v126[4])
    ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v126[4])(0, (uint64_t)v126, 0, 0);
  p_valuePtr = v130;
  if (v130 == &valuePtr)
  {
    v66 = 4;
    p_valuePtr = &valuePtr;
    goto LABEL_95;
  }
  if (v130)
  {
    v66 = 5;
LABEL_95:
    (*((void (**)(void))*p_valuePtr + v66))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(v109);
  v67 = v109;
  v68 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  v69 = (io_object_t)object.__vftable;
  LODWORD(cf[0]) = object.__vftable;
  if (LODWORD(object.__vftable))
  {
    v70 = IOObjectRetain((io_object_t)object.__vftable);
    if ((_DWORD)v70)
    {
      v97 = __cxa_allocate_exception(0x20uLL);
      v98 = std::system_category();
      MEMORY[0x1B5E5022C](v97, v70, v98, "Error on Retain");
      __cxa_throw(v97, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  imp = object.__imp_.__imp_;
  v72 = v107;
  cf[1] = object.__imp_.__imp_;
  v123 = v107;
  v73 = v108;
  v124 = v108;
  v107 = 0;
  v108 = 0;
  object.__imp_.__imp_ = 0;
  v130 = 0;
  v74 = operator new(0x28uLL);
  *(_QWORD *)v74 = &off_1E697FD80;
  v74[2] = v69;
  if (v69)
  {
    v75 = IOObjectRetain(v69);
    if ((_DWORD)v75)
    {
      v99 = __cxa_allocate_exception(0x20uLL);
      v100 = std::system_category();
      MEMORY[0x1B5E5022C](v99, v75, v100, "Error on Retain");
      __cxa_throw(v99, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  *((_QWORD *)v74 + 2) = imp;
  *((_QWORD *)v74 + 3) = v72;
  *((_QWORD *)v74 + 4) = v73;
  v123 = 0;
  v124 = 0;
  cf[1] = 0;
  v130 = (const __CFDictionary **)v74;
  memset(v126, 0, 40);
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v126, (uint64_t)&valuePtr);
  v126[4] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v67, v68, (AMCP *)v126);
  if (v126[4])
    ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v126[4])(0, (uint64_t)v126, 0, 0);
  v76 = v130;
  if (v130 == &valuePtr)
  {
    v77 = 4;
    v76 = &valuePtr;
  }
  else
  {
    if (!v130)
      goto LABEL_107;
    v77 = 5;
  }
  (*((void (**)(void))*v76 + v77))();
LABEL_107:
  v125 = &cf[1];
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
  if (LODWORD(cf[0]))
    IOObjectRelease((io_object_t)cf[0]);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(v109);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v109 + 40), &v109);
  v78 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v126[0] = &object.__imp_;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  if (LODWORD(object.__vftable))
    IOObjectRelease((io_object_t)object.__vftable);
  v126[0] = &v111;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  if (__p)
    operator delete(__p);
  if (theArray)
    CFRelease(theArray);
}

void sub_1B5A468F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::runtime_error a37,uint64_t a38,uint64_t a39)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a30);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  _OWORD v12[2];
  void (*v13)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v14)();
  int v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  v8 = *a3;
  v13 = 0;
  v14 = &off_1E699BC98;
  v15 = v8;
  v16 = &v14;
  memset(v12, 0, sizeof(v12));
  std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)&v14);
  v13 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v12);
  if (v13)
    v13(0, (uint64_t)v12, 0, 0);
  v9 = v16;
  if (v16 == &v14)
  {
    v10 = 4;
    v9 = &v14;
    goto LABEL_7;
  }
  if (v16)
  {
    v10 = 5;
LABEL_7:
    (*v9)[v10]();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(v6);
}

void sub_1B5A46CDC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  void (*v18)(int, uint64_t, AMCP::Thing *, uint64_t *);
  void **v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&v11, a3, a4, (a4 - a3) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  v15 = 0;
  v16 = 0;
  v14 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&v14, v11, v12, (v12 - v11) >> 6);
  v21 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E698A978;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(v8 + 1), v14, v15, (v15 - v14) >> 6);
  v21 = v8;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  v18 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v17);
  if (v18)
    v18(0, (uint64_t)v17, 0, 0);
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
    goto LABEL_7;
  }
  if (v21)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v19 = (void **)&v14;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v19);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v6);
  *(_QWORD *)&v17[0] = &v11;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
}

void sub_1B5A46EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698AC28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A47294(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(_DWORD *)a1)
    IOObjectRelease(*(_DWORD *)a1);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AC28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AC28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698AC28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A473C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698AC28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE v4[40];

  v2 = (_QWORD *)(a1 + 8);
  AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)v4, a2);
  return AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v2, (uint64_t)v4);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E697FD80;
  v4 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  io_object_t v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E697FD80;
  v3 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
    IOObjectRelease(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E697FD80;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A475C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E697FD80;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100]((unsigned int *)(a1 + 8));
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](a1 + 2);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__invoke[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 &,CA::StreamDescription const&>(a1 + 8, a2);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefESC_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::target_type()
{
}

void std::__invoke[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 &,CA::StreamDescription const&>(uint64_t a1, uint64_t a2)
{
  _BOOL8 is_an_available_format;
  CFTypeRef v5;
  double v6;
  std::runtime_error_vtbl *v7;
  double v8;
  CFNumberRef v9;
  const char *v10;
  CFTypeRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t i;
  const void *v15;
  const void *v16;
  std::runtime_error_vtbl *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFTypeRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  std::runtime_error_vtbl *v23;
  int v24;
  int v25;
  int v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFTypeRef v29;
  int v30;
  int v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFTypeRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFTypeRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFTypeRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFTypeRef v43;
  int v44;
  unsigned int v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFTypeRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFTypeRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFTypeRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFDictionaryRef v57;
  uint64_t j;
  const void *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  unint64_t *v63;
  unint64_t v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  std::runtime_error *exception;
  int v68;
  uint64_t v69;
  std::runtime_error v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::runtime_error *v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  CFNumberRef v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  io_registry_entry_t *v89;
  CFDictionaryRef CFDictionaryRef;
  CFTypeRef v91;
  __int128 v92;
  uint64_t v93;
  CFTypeRef v94;
  __int128 v95;
  uint64_t v96;
  std::runtime_error v97;
  CFTypeRef v98;
  CFTypeRef v99;
  CFTypeRef v100;
  CFTypeRef v101;
  CFTypeRef v102;
  CFTypeRef v103;
  CFTypeRef v104;
  CFTypeRef cf;
  CFTypeRef valuePtr;
  _BOOL4 v107;
  std::runtime_error v108;
  void *v109;
  _QWORD v110[3];
  int v111;
  uint8_t buf[8];
  __int128 v113;
  _BYTE v114[24];
  std::runtime_error_vtbl *v115;
  CFNumberRef v116;
  CFTypeRef v117;
  CFNumberRef v118;
  CFTypeRef v119;
  CFNumberRef v120;
  CFTypeRef v121;
  CFNumberRef v122;
  CFTypeRef v123;
  CFNumberRef v124;
  CFTypeRef v125;
  CFNumberRef v126;
  CFTypeRef v127;
  CFNumberRef v128;
  CFTypeRef v129;
  CFNumberRef v130;
  CFTypeRef v131;
  _QWORD v132[5];

  v132[2] = *MEMORY[0x1E0C80C00];
  is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v61 = (std::__shared_weak_count *)v113;
    v62 = **(NSObject ***)buf;
    if ((_QWORD)v113)
    {
      v63 = (unint64_t *)(v113 + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v65 = pthread_self();
      v66 = pthread_mach_thread_np(v65);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v66;
      LOWORD(v113) = 2080;
      *(_QWORD *)((char *)&v113 + 2) = "IOAudio1_Stream.cpp";
      WORD5(v113) = 1024;
      HIDWORD(v113) = 378;
      *(_WORD *)v114 = 2080;
      *(_QWORD *)&v114[2] = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v97, "failed to set stream format");
    std::runtime_error::runtime_error(&v108, &v97);
    memset(v110, 0, sizeof(v110));
    v111 = -1;
    v108.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v109 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v108);
    *(_QWORD *)&v114[8] = "auto AMCP::IOAudio1::update_stream_core(Core::Operation_Set &, const IOKit::Service &, const C"
                          "F::Dictionary &, const CF::Dictionary &)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    *(_QWORD *)&v114[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    LODWORD(v115) = 378;
    std::vector<void *>::vector(&v92);
    v68 = backtrace((void **)v92, (*((_QWORD *)&v92 + 1) - (_QWORD)v92) >> 3);
    std::vector<void *>::resize((char **)&v92, v68);
    v95 = v92;
    v96 = v93;
    v92 = 0uLL;
    v93 = 0;
    v94 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v94);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v69 = *(_QWORD *)v114;
    exception[1].__imp_.__imp_ = *(const char **)v114;
    if (v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
    v70 = *(std::runtime_error *)&v114[8];
    LODWORD(exception[3].__vftable) = (_DWORD)v115;
    exception[2] = v70;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  if (!*(_DWORD *)a1)
  {
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "cannot create io_object_proxy from null io_object");
    __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v91, "IOAudioStreamFormat");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioSampleRate");
  v5 = cf;
  if (cf)
    CFRetain(cf);
  v6 = *(double *)a2;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v97, "IOAudioSampleRateWholeNumber");
  v7 = v97.__vftable;
  if (v97.__vftable)
    CFRetain(v97.__vftable);
  v8 = floor(v6);
  LODWORD(valuePtr) = v8;
  v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v10 = (const char *)v9;
  if (!v9)
  {
    v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Could not construct");
    __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v9);
  v108.__vftable = v7;
  v108.__imp_.__imp_ = v10;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "IOAudioSampleRateFraction");
  v11 = valuePtr;
  if (valuePtr)
    CFRetain(valuePtr);
  LODWORD(v104) = ((v6 - v8) * 4294967300.0);
  v12 = CFNumberCreate(0, kCFNumberIntType, &v104);
  v13 = v12;
  if (!v12)
  {
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not construct");
    __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v12);
  v89 = (io_registry_entry_t *)a1;
  v109 = (void *)v11;
  v110[0] = v13;
  v94 = &v108;
  *(_QWORD *)&v95 = 2;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v94);
  for (i = 0; i != -4; i -= 2)
  {
    v15 = (const void *)v110[i];
    if (v15)
      CFRelease(v15);
    v16 = *(const void **)((char *)&v108 + i * 8 + 16);
    if (v16)
      CFRelease(v16);
  }
  CFRelease(v13);
  if (valuePtr)
    CFRelease(valuePtr);
  CFRelease(v10);
  if (v97.__vftable)
    CFRelease(v97.__vftable);
  CFRetain(CFDictionaryRef);
  *(_QWORD *)buf = v5;
  *(_QWORD *)&v113 = CFDictionaryRef;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v108, "IOAudioStreamNumChannels");
  v17 = v108.__vftable;
  if (v108.__vftable)
    CFRetain(v108.__vftable);
  LODWORD(v94) = *(_DWORD *)(a2 + 28);
  v18 = CFNumberCreate(0, kCFNumberIntType, &v94);
  v19 = v18;
  if (!v18)
  {
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Could not construct");
    __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v18);
  *((_QWORD *)&v113 + 1) = v17;
  *(_QWORD *)v114 = v19;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v94, "IOAudioStreamSampleFormat");
  v20 = v94;
  if (v94)
    CFRetain(v94);
  LODWORD(v97.__vftable) = *(_DWORD *)(a2 + 8);
  v21 = CFNumberCreate(0, kCFNumberIntType, &v97);
  v22 = v21;
  if (!v21)
  {
    v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "Could not construct");
    __cxa_throw(v75, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v21);
  *(_QWORD *)&v114[8] = v20;
  *(_QWORD *)&v114[16] = v22;
  v88 = v22;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v97, "IOAudioStreamNumericRepresentation");
  v23 = v97.__vftable;
  if (v97.__vftable)
    CFRetain(v97.__vftable);
  v24 = 1936289396;
  v25 = *(_DWORD *)(a2 + 8);
  if (v25 != 1667326771)
  {
    if (v25 == 1819304813)
    {
      v26 = *(_DWORD *)(a2 + 12);
      if ((v26 & 1) != 0)
      {
        v24 = 1718382452;
      }
      else if ((v26 & 4) != 0)
      {
        v24 = 1936289396;
      }
      else
      {
        v24 = 1969843828;
      }
    }
    else
    {
      v24 = 0;
    }
  }
  LODWORD(valuePtr) = v24;
  v27 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v28 = v27;
  if (!v27)
  {
    v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
    __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v27);
  v115 = v23;
  v116 = v28;
  v87 = v28;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "IOAudioStreamFormatFlags");
  v29 = valuePtr;
  if (valuePtr)
    CFRetain(valuePtr);
  v30 = 0;
  v31 = *(_DWORD *)(a2 + 8);
  if (v31 != 1667326771 && v31 != 1819304813)
    v30 = *(_DWORD *)(a2 + 12);
  LODWORD(v104) = v30;
  v32 = CFNumberCreate(0, kCFNumberIntType, &v104);
  v33 = v32;
  if (!v32)
  {
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
    __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v32);
  v117 = v29;
  v118 = v33;
  v86 = v33;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v104, "IOAudioStreamFramesPerPacket");
  v34 = v104;
  if (v104)
    CFRetain(v104);
  LODWORD(v103) = *(_DWORD *)(a2 + 20);
  v35 = CFNumberCreate(0, kCFNumberIntType, &v103);
  v36 = v35;
  if (!v35)
  {
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v78, "Could not construct");
    __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v35);
  v119 = v34;
  v120 = v36;
  v85 = v36;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v103, "IOAudioStreamBytesPerPacket");
  v37 = v103;
  if (v103)
    CFRetain(v103);
  LODWORD(v102) = *(_DWORD *)(a2 + 16);
  v38 = CFNumberCreate(0, kCFNumberIntType, &v102);
  v39 = v38;
  if (!v38)
  {
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v79, "Could not construct");
    __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v38);
  v121 = v37;
  v122 = v39;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v102, "IOAudioStreamBitDepth");
  v40 = v102;
  if (v102)
    CFRetain(v102);
  LODWORD(v101) = *(_DWORD *)(a2 + 32);
  v41 = CFNumberCreate(0, kCFNumberIntType, &v101);
  v42 = v41;
  if (!v41)
  {
    v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v80, "Could not construct");
    __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v41);
  v123 = v40;
  v124 = v42;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v101, "IOAudioStreamBitWidth");
  v43 = v101;
  if (v101)
    CFRetain(v101);
  v44 = *(_DWORD *)(a2 + 8);
  if ((v44 - 778924081) < 3)
    goto LABEL_58;
  if (v44 == 1667326771)
  {
    v45 = 16;
  }
  else
  {
    if (v44 == 1633889587)
    {
LABEL_58:
      v45 = 0;
      goto LABEL_59;
    }
    v45 = (8 * *(_DWORD *)(a2 + 24)) / *(_DWORD *)(a2 + 28);
  }
LABEL_59:
  LODWORD(v100) = v45;
  v46 = CFNumberCreate(0, kCFNumberIntType, &v100);
  v47 = v46;
  if (!v46)
  {
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
    __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v46);
  v125 = v43;
  v126 = v47;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v100, "IOAudioStreamAlignment");
  v48 = v100;
  if (v100)
    CFRetain(v100);
  LODWORD(v99) = (*(_DWORD *)(a2 + 12) >> 4) & 1;
  v49 = CFNumberCreate(0, kCFNumberIntType, &v99);
  v50 = v49;
  if (!v49)
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
    __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v49);
  v127 = v48;
  v128 = v50;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v99, "IOAudioStreamByteOrder");
  v51 = v99;
  if (v99)
    CFRetain(v99);
  LODWORD(v98) = ((*(_DWORD *)(a2 + 12) >> 1) & 1) == 0;
  v52 = CFNumberCreate(0, kCFNumberIntType, &v98);
  v53 = v52;
  if (!v52)
  {
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
    __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v52);
  v129 = v51;
  v130 = v53;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v98, "IOAudioStreamIsMixable");
  v54 = v98;
  if (v98)
    CFRetain(v98);
  v107 = ((*(_DWORD *)(a2 + 12) >> 6) & 1) == 0;
  v55 = CFNumberCreate(0, kCFNumberIntType, &v107);
  v56 = v55;
  if (!v55)
  {
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v55);
  v131 = v54;
  v132[0] = v56;
  *(_QWORD *)&v92 = buf;
  *((_QWORD *)&v92 + 1) = 12;
  v57 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v92);
  for (j = 0; j != -24; j -= 2)
  {
    v59 = (const void *)v132[j];
    if (v59)
      CFRelease(v59);
    v60 = (const void *)v132[j - 1];
    if (v60)
      CFRelease(v60);
  }
  CFRelease(v56);
  if (v98)
    CFRelease(v98);
  CFRelease(v53);
  if (v99)
    CFRelease(v99);
  CFRelease(v50);
  if (v100)
    CFRelease(v100);
  CFRelease(v47);
  if (v101)
    CFRelease(v101);
  CFRelease(v42);
  if (v102)
    CFRelease(v102);
  CFRelease(v39);
  if (v103)
    CFRelease(v103);
  CFRelease(v85);
  if (v104)
    CFRelease(v104);
  CFRelease(v86);
  if (valuePtr)
    CFRelease(valuePtr);
  CFRelease(v87);
  if (v97.__vftable)
    CFRelease(v97.__vftable);
  CFRelease(v88);
  if (v94)
    CFRelease(v94);
  CFRelease(v19);
  if (v108.__vftable)
    CFRelease(v108.__vftable);
  CFRelease(CFDictionaryRef);
  if (cf)
    CFRelease(cf);
  CFRetain(v57);
  *(_QWORD *)buf = v57;
  applesauce::iokit::io_object_proxy::set_properties(*v89, (const __CFString *)v91, (const void **)buf);
  if (v57)
    CFRelease(v57);
  CFRelease(v57);
  if (v91)
    CFRelease(v91);
}

void sub_1B5A48370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef a13, uint64_t a14, CFTypeRef a15, CFTypeRef a16, void *a17, uint64_t a18, uint64_t a19, CFTypeRef a20,void *__p,uint64_t a22,uint64_t a23,CFTypeRef a24,uint64_t a25,CFTypeRef cf,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,CFTypeRef a32,CFTypeRef a33,CFTypeRef a34,uint64_t a35,CFTypeRef a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::runtime_error a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  std::runtime_error *v71;
  const char *imp;
  std::runtime_error_vtbl *v73;

  if (v67)
    CFRelease(v67);
  if (cf)
    CFRelease(cf);
  CFRelease(v66);
  v71 = (std::runtime_error *)&a64;
  if (a27)
    CFRelease(a27);
  CFRelease(v65);
  if (a28)
    CFRelease(a28);
  CFRelease(v64);
  if (a29)
    CFRelease(a29);
  CFRelease(v69);
  if (a30)
    CFRelease(a30);
  CFRelease(v68);
  if (a31)
    CFRelease(a31);
  CFRelease(a9);
  if (a32)
    CFRelease(a32);
  CFRelease(a10);
  if (a34)
    CFRelease(a34);
  CFRelease(a11);
  if (a24)
    CFRelease(a24);
  CFRelease(a12);
  if (a20)
    CFRelease(a20);
  CFRelease(a13);
  if (a36)
    CFRelease(a36);
  CFRelease(a15);
  if (a33)
    CFRelease(a33);
  if (&a43 != (std::runtime_error *)&a64)
  {
    do
    {
      imp = v71[-1].__imp_.__imp_;
      if (imp)
        CFRelease(imp);
      v73 = v71[-1].__vftable;
      if (v73)
        CFRelease(v73);
      --v71;
    }
    while (v71 != &a43);
  }
  if (a16)
    CFRelease(a16);
  _Unwind_Resume(a1);
}

BOOL AMCP::Utility::Stream_Format::format_is_an_available_format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double *v4;
  double *v5;
  unint64_t v6;
  unint64_t v7;
  double *v8;
  double v9;
  double *v10;

  if (a2 != a3)
  {
    v3 = *(double *)a1;
    while (1)
    {
      v4 = *(double **)a2;
      v5 = *(double **)(a2 + 8);
      if (v5 != *(double **)a2)
      {
        v6 = ((uint64_t)v5 - *(_QWORD *)a2) >> 4;
        do
        {
          v7 = v6 >> 1;
          v8 = &v4[2 * (v6 >> 1)];
          v9 = v8[1];
          v10 = v8 + 2;
          v6 += ~(v6 >> 1);
          if (v9 < v3)
            v4 = v10;
          else
            v6 = v7;
        }
        while (v6);
      }
      if (v4 != v5
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + 8), *(int32x4_t *)(a2 + 32))), 0xFuLL))) & 1) != 0&& *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 48)&& *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 52)&& *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 56)&& *v4 <= v3)
      {
        break;
      }
      a2 += 64;
      if (a2 == a3)
      {
        a2 = a3;
        return a2 != a3;
      }
    }
  }
  return a2 != a3;
}

void applesauce::iokit::io_object_proxy::set_properties(io_registry_entry_t a1, const __CFString *a2, const void **a3)
{
  const void *v6;
  uint64_t v7;
  void *exception;
  const std::error_category *v9;

  if (a2)
    CFRetain(a2);
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  if (a1)
  {
    v7 = IORegistryEntrySetCFProperty(a1, a2, v6);
    if ((_DWORD)v7)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v9 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v7, v9, "Error on get_properties");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  if (v6)
    CFRelease(v6);
  if (a2)
    CFRelease(a2);
}

void sub_1B5A48D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](unsigned int *a1)
{
  uint64_t result;
  void **v3;

  v3 = (void **)(a1 + 2);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  result = *a1;
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4;
  uint64_t v5;
  uint64_t v7;
  void *exception;
  const std::error_category *v9;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4)
  {
    v5 = IOObjectRetain(v4);
    if ((_DWORD)v5)
    {
      v7 = v5;
      exception = __cxa_allocate_exception(0x20uLL);
      v9 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v7, v9, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 6);
  return a1;
}

void sub_1B5A48E24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E697FD00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E697FD00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefESC_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E698A978;
  v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E698A978;
  v1 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E698A978;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(v2 + 1), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 6);
  return v2;
}

void sub_1B5A49024(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E698A978;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(a2 + 1), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 6);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 6);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E699BC98;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E699BC98;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINS_9DirectionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target_type()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E69980A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A493C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69980A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69980A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69980A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A494A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69980A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)&cf, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>(a2, &cf);
  if (cf)
    CFRelease(cf);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF6URLRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E6998010;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E6998010;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1)
{
  CFTypeRef *v1;
  _QWORD *v2;

  v1 = (CFTypeRef *)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E6998010;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6998010;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if (v3)
    result = CFRetain(*((CFTypeRef *)result + 1));
  *a2 = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF6URLRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target_type()
{
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697FE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E697FE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::__on_zero_shared(uint64_t a1)
{

}

uint64_t AMCP::Implementation::generate_type_marker(AMCP::Implementation *this, const std::type_info *a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  BOOL v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  std::string *v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void **v28;
  char *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  unint64_t v34;
  unint64_t v35;
  std::string **v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  __int128 v52;
  std::string **v53;
  std::string __p;
  uint64_t v56;
  std::string v57;
  std::string **p_p_p;
  _BYTE v59[24];
  uint64_t v60;
  std::string *p_p;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = atomic_load(&AMCP::Implementation::generate_type_marker(std::type_info const&)::s_once_flag);
  if (v3 != -1)
  {
    p_p = &__p;
    p_p_p = &p_p;
    std::__call_once(&AMCP::Implementation::generate_type_marker(std::type_info const&)::s_once_flag, &p_p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Implementation::generate_type_marker(std::type_info const&)::$_0 &&>>);
  }
  v4 = AMCP::Implementation::generate_type_marker(std::type_info const&)::s_type_map;
  std::mutex::lock((std::mutex *)AMCP::Implementation::generate_type_marker(std::type_info const&)::s_type_map);
  std::string::basic_string[abi:ne180100]<0>(&v57, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  v5 = *(char **)(v4 + 64);
  if (AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(v5, *(_QWORD **)(v4 + 72), &v57))
  {
    v7 = *(_QWORD *)(v6 + 24);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 96) + 1;
    *(_QWORD *)(v4 + 96) = v7;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
      v5 = *(char **)(v4 + 64);
    }
    else
    {
      __p = v57;
    }
    v56 = v7;
    v8 = *(std::string **)(v4 + 72);
    v9 = AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(v5, v8, &__p);
    v11 = v10;
    if (v9)
    {
      std::string::operator=(v10, &__p);
      v11[1].__r_.__value_.__r.__words[0] = v56;
    }
    else
    {
      v12 = (char *)v10 - v5;
      v13 = ((char *)v10 - v5) >> 5;
      v14 = (std::string *)&v5[((char *)v10 - v5) & 0xFFFFFFFFFFFFFFE0];
      v15 = *(_QWORD *)(v4 + 80);
      if ((unint64_t)v8 >= v15)
      {
        v20 = (((char *)v8 - v5) >> 5) + 1;
        if (v20 >> 59)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v21 = v15 - (_QWORD)v5;
        if (v21 >> 4 > v20)
          v20 = v21 >> 4;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
          v22 = 0x7FFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        v60 = v4 + 80;
        if (v22)
          v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v22);
        else
          v23 = 0;
        v33 = (std::string *)(v22 + 32 * v13);
        p_p_p = (std::string **)v22;
        *(_QWORD *)v59 = v33;
        *(_QWORD *)&v59[8] = v33;
        *(_QWORD *)&v59[16] = v22 + 32 * v23;
        if (v13 == v23)
        {
          if (v12 < 1)
          {
            if (v11 == (std::string *)v5)
              v35 = 1;
            else
              v35 = v12 >> 4;
            v64 = v60;
            v36 = (std::string **)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v35);
            v38 = *(__int128 **)v59;
            if (*(_QWORD *)&v59[8] == *(_QWORD *)v59)
            {
              v42 = vdupq_n_s64(*(unint64_t *)v59);
              v39 = (uint64_t)&v36[4 * (v35 >> 2)];
            }
            else
            {
              v39 = (uint64_t)&v36[4 * (v35 >> 2)] + *(_QWORD *)&v59[8] - *(_QWORD *)v59;
              v40 = (char *)&v36[4 * (v35 >> 2)];
              do
              {
                v41 = *v38;
                *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
                *(_OWORD *)v40 = v41;
                *((_QWORD *)v38 + 1) = 0;
                *((_QWORD *)v38 + 2) = 0;
                *(_QWORD *)v38 = 0;
                *((_QWORD *)v40 + 3) = *((_QWORD *)v38 + 3);
                v40 += 32;
                v38 += 2;
              }
              while (v40 != (char *)v39);
              v42 = *(int64x2_t *)v59;
            }
            v43 = *(_QWORD *)&v59[16];
            p_p = (std::string *)p_p_p;
            p_p_p = v36;
            *(_QWORD *)v59 = &v36[4 * (v35 >> 2)];
            v62 = v42;
            *(_QWORD *)&v59[8] = v39;
            *(_QWORD *)&v59[16] = &v36[4 * v37];
            v63 = v43;
            std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer((uint64_t)&p_p);
            v33 = *(std::string **)&v59[8];
          }
          else
          {
            v34 = v13 + 2;
            if (v13 >= -1)
              v34 = v13 + 1;
            v33 = (std::string *)((char *)v33 - 32 * (v34 >> 1));
            *(_QWORD *)v59 = v33;
            *(_QWORD *)&v59[8] = v33;
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v33, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v33->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v44;
        }
        v33[1].__r_.__value_.__r.__words[0] = v56;
        v45 = *(_QWORD *)v59;
        v46 = *(_QWORD *)&v59[8] + 32;
        *(_QWORD *)&v59[8] += 32;
        v47 = *(std::string **)(v4 + 64);
        if (v14 != v47)
        {
          v48 = v14;
          do
          {
            v49 = *(_OWORD *)&v48[-2].__r_.__value_.__r.__words[2];
            *(_QWORD *)(v45 - 16) = v48[-1].__r_.__value_.__l.__size_;
            *(_OWORD *)(v45 - 32) = v49;
            v48[-1].__r_.__value_.__r.__words[0] = 0;
            v48[-1].__r_.__value_.__l.__size_ = 0;
            v48[-2].__r_.__value_.__r.__words[2] = 0;
            *(_QWORD *)(v45 - 8) = *((_QWORD *)&v48[-1].__r_.__value_.__l + 2);
            v45 -= 32;
            v48 = (std::string *)((char *)v48 - 32);
          }
          while (v48 != v47);
          v46 = *(_QWORD *)&v59[8];
        }
        *(_QWORD *)v59 = v45;
        v50 = *(std::string **)(v4 + 72);
        if (v14 != v50)
        {
          do
          {
            v51 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            *(_QWORD *)(v46 + 16) = *((_QWORD *)&v14->__r_.__value_.__l + 2);
            *(_OWORD *)v46 = v51;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)(v46 + 24) = v14[1].__r_.__value_.__l.__data_;
            v46 += 32;
            v14 = (std::string *)((char *)v14 + 32);
          }
          while (v14 != v50);
          v45 = *(_QWORD *)v59;
        }
        *(_QWORD *)v59 = *(_QWORD *)(v4 + 64);
        *(_QWORD *)&v59[8] = v46;
        v52 = *(_OWORD *)(v4 + 72);
        *(_QWORD *)(v4 + 64) = v45;
        *(_QWORD *)(v4 + 72) = v46;
        v53 = *(std::string ***)v59;
        *(_QWORD *)(v4 + 80) = *(_QWORD *)&v59[16];
        *(_OWORD *)&v59[8] = v52;
        p_p_p = v53;
        std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer((uint64_t)&p_p_p);
      }
      else if (v14 == v8)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v8->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v32;
        }
        v8[1].__r_.__value_.__r.__words[0] = v56;
        *(_QWORD *)(v4 + 72) = (char *)v8 + 32;
      }
      else
      {
        v16 = (std::string *)((char *)v14 + 32);
        v17 = &v8[-2].__r_.__value_.__s.__data_[16];
        v18 = v8;
        while (v17 < (char *)v8)
        {
          v19 = *(_OWORD *)v17;
          v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
          *(_QWORD *)v17 = 0;
          v18[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v17 + 3);
          v18 = (std::string *)((char *)v18 + 32);
          v17 += 32;
        }
        *(_QWORD *)(v4 + 72) = v18;
        if (v8 != v16)
        {
          v24 = 0;
          v25 = ((char *)v8 - (char *)v16) >> 5;
          v26 = &v5[32 * v13 + 32 * v25];
          v27 = -32 * v25;
          do
          {
            v28 = (void **)((char *)&v8[-1] + v24 - 8);
            if (v8->__r_.__value_.__s.__data_[v24 - 9] < 0)
              operator delete(*v28);
            v29 = &v26[v24 - 32];
            v30 = *(_OWORD *)v29;
            v8->__r_.__value_.__r.__words[v24 / 8 - 2] = *(_QWORD *)&v26[v24 - 16];
            *(_OWORD *)v28 = v30;
            v26[v24 - 9] = 0;
            *v29 = 0;
            v8->__r_.__value_.__r.__words[v24 / 8 - 1] = *(_QWORD *)&v26[v24 - 8];
            v24 -= 32;
          }
          while (v27 != v24);
        }
        v31 = &__p;
        if (v14 <= &__p)
          v31 = (std::string *)((char *)&__p + 32 * (*(_QWORD *)(v4 + 72) > (unint64_t)&__p));
        std::string::operator=(v14, v31);
        v14[1].__r_.__value_.__r.__words[0] = v31[1].__r_.__value_.__r.__words[0];
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  std::mutex::unlock((std::mutex *)v4);
  return v7;
}

void sub_1B5A49ECC(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  __clang_call_terminate(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Implementation::generate_type_marker(std::type_info const&)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  *(_QWORD *)(v0 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  AMCP::Implementation::generate_type_marker(std::type_info const&)::s_type_map = v0;
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;

  if (a2 == a1)
  {
    v5 = a2;
  }
  else
  {
    v5 = a1;
    v6 = ((char *)a2 - (char *)a1) >> 5;
    do
    {
      v7 = &v5[4 * (v6 >> 1)];
      v8 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a3);
      if (v8 >= 0)
        v6 >>= 1;
      else
        v6 += ~(v6 >> 1);
      if (v8 < 0)
        v5 = v7 + 4;
    }
    while (v6);
  }
  return v5 != a2
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a3) & 0x80) == 0
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v5) & 0x80) == 0;
}

void AMCP::Null::Object::~Object(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  std::__shared_weak_count *sig;
  const void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  this->__mut_.__m_.__sig = (uint64_t)&off_1E697FE50;
  AMCP::Null::Object::destroy_cores(this);
  v6 = (void **)&this->__gate1_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = *(const void **)this->__gate1_.__cv_.__opaque;
  if (v2)
    CFRelease(v2);
  sig = (std::__shared_weak_count *)this->__gate1_.__cv_.__sig;
  if (sig)
    std::__shared_weak_count::__release_weak(sig);
  v4 = *(const void **)&this->__mut_.__m_.__opaque[40];
  if (v4)
    CFRelease(v4);
  v5 = *(std::__shared_weak_count **)&this->__mut_.__m_.__opaque[24];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  this->__mut_.__m_.__sig = (uint64_t)&off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this->__mut_.__m_.__opaque);
}

void AMCP::Null::Object::build_cores(AMCP::Null::Object *this)
{
  AMCP::Log::Scope_Registry *is_base_of;
  AMCP::Log::Scope_Registry *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  std::string *v12;
  NSObject *v13;
  os_log_type_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  int v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  int v29;
  std::string *p_p;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  CFDictionaryRef *v34;
  uint64_t v35;
  int16x8_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string *v40;
  CFIndex size;
  CFStringRef v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  unsigned int *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  NSObject **v57;
  NSObject *v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  std::runtime_error *exception;
  std::runtime_error *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unsigned int *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  CFArrayRef v70;
  char v71;
  AMCP::Core::Core *v72;
  std::__shared_weak_count *v73;
  std::string __p;
  std::string *v75;
  uint8_t buf[8];
  __int128 v77;
  __int16 v78;
  _BYTE v79[14];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 22))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v58 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v59 = pthread_self();
      v60 = pthread_mach_thread_np(v59);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v60;
      LOWORD(v77) = 2080;
      *(_QWORD *)((char *)&v77 + 2) = "Null_Object.cpp";
      WORD5(v77) = 1024;
      HIDWORD(v77) = 252;
      v78 = 2080;
      *(_QWORD *)v79 = "m_core_id == k_object_id_unknown";
      _os_log_error_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s this Object already has a core", buf, 0x22u);
    }
    abort();
  }
  *((_DWORD *)this + 22) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16));
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 21));
  if ((_DWORD)is_base_of)
  {
    AMCP::Log::Scope_Registry::get(is_base_of);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v63, "com.apple.coreaudio", "AMCP");
    v4 = *(_DWORD *)(v63 + 16);
    switch(v4)
    {
      case 3u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v23 = (std::__shared_weak_count *)v77;
        v24 = **(NSObject ***)buf;
        if ((_QWORD)v77)
        {
          v25 = (unint64_t *)(v77 + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          goto LABEL_39;
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        v29 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v28;
        LOWORD(v77) = 2080;
        *(_QWORD *)((char *)&v77 + 2) = "Null_Object.cpp";
        WORD5(v77) = 1024;
        HIDWORD(v77) = 256;
        v78 = 1024;
        *(_DWORD *)v79 = v29;
        *(_WORD *)&v79[4] = 2080;
        *(_QWORD *)&v79[6] = p_p;
        v13 = v24;
        v14 = OS_LOG_TYPE_INFO;
        break;
      case 2u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v15 = (std::__shared_weak_count *)v77;
        v16 = **(NSObject ***)buf;
        if ((_QWORD)v77)
        {
          v17 = (unint64_t *)(v77 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          goto LABEL_39;
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        v21 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &__p;
        else
          v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v20;
        LOWORD(v77) = 2080;
        *(_QWORD *)((char *)&v77 + 2) = "Null_Object.cpp";
        WORD5(v77) = 1024;
        HIDWORD(v77) = 256;
        v78 = 1024;
        *(_DWORD *)v79 = v21;
        *(_WORD *)&v79[4] = 2080;
        *(_QWORD *)&v79[6] = v22;
        _os_log_debug_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for %s", buf, 0x28u);
        goto LABEL_37;
      case 1u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v5 = (std::__shared_weak_count *)v77;
        v6 = **(NSObject ***)buf;
        if ((_QWORD)v77)
        {
          v7 = (unint64_t *)(v77 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          goto LABEL_39;
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        v11 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &__p;
        else
          v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v10;
        LOWORD(v77) = 2080;
        *(_QWORD *)((char *)&v77 + 2) = "Null_Object.cpp";
        WORD5(v77) = 1024;
        HIDWORD(v77) = 256;
        v78 = 1024;
        *(_DWORD *)v79 = v11;
        *(_WORD *)&v79[4] = 2080;
        *(_QWORD *)&v79[6] = v12;
        v13 = v6;
        v14 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_39;
    }
    _os_log_impl(&dword_1B57BA000, v13, v14, "%6u %32s:%-5d Building Core %u for %s", buf, 0x28u);
LABEL_37:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
    v31 = v64;
    if (v64)
    {
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v34 = (CFDictionaryRef *)((char *)this + 48);
  v35 = AMCP::Null::calculate_max_element((const __CFDictionary **)this + 6, (const applesauce::CF::DictionaryRef *)*((unsigned int *)this + 21));
  (*(void (**)(uint8_t *__return_ptr, AMCP::Null::Object *, uint64_t))(*(_QWORD *)this + 48))(buf, this, v35);
  AMCP::Core::Broker::make_core(&v72, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), (uint64_t)buf, *((unsigned int *)this + 22));
  v37 = v73;
  if (v73)
  {
    v38 = (unint64_t *)&v73->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (!*v34)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v36.i64[0] = 0x676C6F626374726CLL;
  v63 = 0x676C6F626374726CLL;
  LODWORD(v64) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v63, v36);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__p;
  else
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v42 = CFStringCreateWithBytes(0, (const UInt8 *)v40, size, 0x8000100u, 0);
  if (!v42)
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v70, *v34, v42);
  CFRelease(v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v71)
  {
    v43 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v68 = *((_QWORD *)this + 1);
    v69 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v66, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v47 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v47 = 0x16163746CLL;
    v64 = (std::__shared_weak_count *)(v47 + 2);
    v65 = v47 + 2;
    v63 = (uint64_t)v47;
    AMCP::Null::make_object_list(&__p.__r_.__value_.__l.__data_, &v68, v46, &v66, &v70, (unsigned int **)&v63);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((void **)this + 12);
    *((std::string *)this + 4) = __p;
    memset(&__p, 0, sizeof(__p));
    v75 = &__p;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    operator delete(v47);
    v48 = v67;
    if (v67)
    {
      v49 = (unint64_t *)&v67->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v69;
    if (v69)
    {
      v52 = (unint64_t *)&v69->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v55 = (uint64_t *)*((_QWORD *)this + 12);
    v54 = (uint64_t *)*((_QWORD *)this + 13);
    while (v55 != v54)
    {
      v56 = *v55;
      v55 += 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
    }
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v70);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*((_QWORD **)&v77 + 1));
  v57 = *(NSObject ***)buf;
  *(_QWORD *)buf = 0;
  if (v57)
    operator delete(v57);
}

void sub_1B5A4A7D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Object::update_cores(AMCP::Null::Object *this, const __CFDictionary **a2, int16x8_t a3)
{
  std::string *p_buf;
  CFIndex size;
  CFStringRef v7;
  const void *v8;
  const applesauce::CF::DictionaryRef *v9;
  AMCP::Log::Scope_Registry *stock_class_id;
  int16x8_t v11;
  CFDictionaryRef *v12;
  std::string *v13;
  CFIndex v14;
  CFStringRef v15;
  int16x8_t v16;
  std::string *v17;
  CFIndex v18;
  CFStringRef v19;
  CFDictionaryRef v20;
  const __CFDictionary *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *i;
  const __CFArray *v26;
  CFArrayRef v27;
  CFTypeRef v28;
  CFArrayRef v29;
  const __CFArray *v30;
  CFIndex Count;
  CFIndex v32;
  CFArrayRef v33;
  CFIndex v34;
  unint64_t v35;
  int16x8_t v36;
  __int128 *control_by_description;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const __CFArray *v42;
  CFIndex v43;
  CFIndex v44;
  CFArrayRef v45;
  CFIndex v46;
  unint64_t v47;
  int16x8_t v48;
  _QWORD *v49;
  const __CFArray *v50;
  CFIndex v51;
  CFIndex v52;
  CFArrayRef v53;
  CFIndex v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  int v59;
  int16x8_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  __int128 v87;
  int64x2_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v98;
  _opaque_pthread_t *v99;
  mach_port_t v100;
  const char *v101;
  _opaque_pthread_t *v102;
  mach_port_t v103;
  std::runtime_error *exception;
  std::runtime_error *v105;
  std::runtime_error *v106;
  std::runtime_error *v107;
  std::runtime_error *v108;
  void *__p;
  int v110;
  _QWORD *v111;
  unsigned int *v112;
  std::__shared_weak_count *v113;
  CFTypeRef v114;
  char v115;
  CFTypeRef v116;
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  CFTypeRef cf;
  std::__shared_weak_count *v121;
  __int128 valuePtr;
  CFTypeRef v123;
  CFArrayRef v124;
  CFArrayRef v125;
  CFArrayRef theArray;
  CFTypeRef v127;
  CFArrayRef v128;
  std::string buf;
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_169;
  }
  a3.i64[0] = 0x676C6F62636C6173;
  __p = (void *)0x676C6F62636C6173;
  v110 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, a3);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_buf, size, 0x8000100u, 0);
  if (!v7)
  {
    v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v105, "Could not construct");
    __cxa_throw(v105, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v106, "Could not construct");
    __cxa_throw(v106, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *a2, v7, &cf);
  v8 = (const void *)valuePtr;
  if (!(_QWORD)valuePtr)
  {
LABEL_168:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_169:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
  CFRelease(v7);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  stock_class_id = AMCP::Null::get_stock_class_id(a2, v9);
  if (*((_DWORD *)this + 20) != (_DWORD)v9)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v98 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      goto LABEL_161;
    v99 = pthread_self();
    v100 = pthread_mach_thread_np(v99);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v100;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = 279;
    LOWORD(v130) = 2080;
    *(_QWORD *)((char *)&v130 + 2) = "m_core_class_id == new_core_class_id";
    v101 = "%6u %32s:%-5d Assertion Failed: %s new description can't change the class";
    goto LABEL_160;
  }
  if (*((_DWORD *)this + 21) != (_DWORD)stock_class_id)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v98 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      goto LABEL_161;
    v102 = pthread_self();
    v103 = pthread_mach_thread_np(v102);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v103;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = 280;
    LOWORD(v130) = 2080;
    *(_QWORD *)((char *)&v130 + 2) = "m_core_stock_class_id == new_core_stock_class_id";
    v101 = "%6u %32s:%-5d Assertion Failed: %s new description can't change the stock class";
LABEL_160:
    _os_log_error_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, v101, (uint8_t *)&buf, 0x22u);
LABEL_161:
    abort();
  }
  v12 = (CFDictionaryRef *)((char *)this + 48);
  if (!*((_QWORD *)this + 6))
    goto LABEL_168;
  __p = (void *)0x676C6F626374726CLL;
  v110 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, v11);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &buf;
  else
    v13 = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v14 = buf.__r_.__value_.__l.__size_;
  v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
  if (!v15)
  {
    v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Could not construct");
    __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v116, *v12, v15);
  CFRelease(v15);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (!*a2)
    goto LABEL_168;
  __p = (void *)0x676C6F626374726CLL;
  v110 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, v16);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &buf;
  else
    v17 = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    v18 = buf.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
  if (!v19)
  {
    v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v108, "Could not construct");
    __cxa_throw(v108, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v114, *a2, v19);
  CFRelease(v19);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v20 = *v12;
  v21 = *a2;
  *v12 = *a2;
  if (v21)
    CFRetain(v21);
  if (v20)
    CFRelease(v20);
  v22 = *((_DWORD *)this + 22);
  if (!v22)
  {
    (*(void (**)(AMCP::Null::Object *))(*(_QWORD *)this + 16))(this);
    goto LABEL_155;
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v112, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), v22);
  v23 = v112;
  if (v112)
  {
    v24 = AMCP::Null::calculate_max_element((const __CFDictionary **)this + 6, (const applesauce::CF::DictionaryRef *)*((unsigned int *)this + 21));
    (*(void (**)(void **__return_ptr, AMCP::Null::Object *, uint64_t))(*(_QWORD *)this + 48))(&__p, this, v24);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 12);
    buf.__r_.__value_.__s.__data_[8] = 1;
    caulk::concurrent::shared_spin_lock::lock(v23 + 12);
    for (i = v111; i; i = (_QWORD *)*i)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v23 + 2), (unsigned int *)(i[4] + 40), i + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&buf);
    strcpy((char *)&buf, "rnwobolg");
    buf.__r_.__value_.__s.__data_[9] = 0;
    WORD1(buf.__r_.__value_.__r.__words[1]) = 0;
    v23[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v23, (const AMCP::Address *)&buf, &AMCP::k_object_id_unknown);
    if (v117)
    {
      v26 = (const __CFArray *)v116;
      if (v116)
        CFRetain(v116);
      v128 = v26;
    }
    else
    {
      v27 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v128, v27);
    }
    if (v115)
    {
      v28 = v114;
      if (v114)
        CFRetain(v114);
      v127 = v28;
    }
    else
    {
      v29 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v127, v29);
    }
    AMCP::Null::diff_control_lists((AMCP::Null *)&theArray, &v128, (CFArrayRef *)&v127);
    AMCP::Null::diff_control_lists((AMCP::Null *)&v125, &v128, &theArray);
    AMCP::Null::diff_control_lists((AMCP::Null *)&v124, (CFArrayRef *)&v127, &v128);
    v30 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v32 = Count;
      v33 = theArray;
      if (theArray)
      {
        v34 = CFArrayGetCount(theArray);
        if (!v32)
          goto LABEL_74;
      }
      else
      {
        v34 = 0;
        if (!Count)
          goto LABEL_74;
      }
      v35 = 0;
      do
      {
        if (v30 == v33 && v35 == v34)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&buf, v30, v35);
        control_by_description = (__int128 *)AMCP::Null::find_control_by_description((uint64_t *)this + 12, (const __CFDictionary **)&buf, v36);
        if (*((__int128 **)this + 13) != control_by_description)
        {
          v38 = control_by_description;
          v39 = (uint64_t)(control_by_description + 1);
          (*(void (**)(_QWORD))(**(_QWORD **)control_by_description + 32))(*(_QWORD *)control_by_description);
          v40 = *((_QWORD *)this + 13);
          if (v39 != v40)
          {
            do
              v41 = (uint64_t)v38++;
            while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v41, v38) + 32 != v40);
            v39 = *((_QWORD *)this + 13);
          }
          while ((__int128 *)v39 != v38)
          {
            v39 -= 16;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39);
          }
          *((_QWORD *)this + 13) = v38;
        }
        if (buf.__r_.__value_.__r.__words[0])
          CFRelease(buf.__r_.__value_.__l.__data_);
        ++v35;
      }
      while (v35 != v32);
    }
LABEL_74:
    v42 = v125;
    if (!v125)
      goto LABEL_87;
    v43 = CFArrayGetCount(v125);
    v44 = v43;
    v45 = v125;
    if (v125)
    {
      v46 = CFArrayGetCount(v125);
      if (!v44)
        goto LABEL_87;
    }
    else
    {
      v46 = 0;
      if (!v43)
        goto LABEL_87;
    }
    v47 = 0;
    do
    {
      if (v42 == v45 && v46 == v47)
        break;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&buf, v42, v47);
      v49 = (_QWORD *)AMCP::Null::find_control_by_description((uint64_t *)this + 12, (const __CFDictionary **)&buf, v48);
      if (*((_QWORD **)this + 13) != v49)
        (*(void (**)(_QWORD, std::string *))(*(_QWORD *)*v49 + 24))(*v49, &buf);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
      ++v47;
    }
    while (v44 != v47);
LABEL_87:
    v50 = v124;
    if (!v124)
    {
LABEL_140:
      if (v125)
        CFRelease(v125);
      if (theArray)
        CFRelease(theArray);
      if (v127)
        CFRelease(v127);
      if (v128)
        CFRelease(v128);
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(v111);
      v93 = __p;
      __p = 0;
      if (v93)
        operator delete(v93);
      goto LABEL_150;
    }
    v51 = CFArrayGetCount(v124);
    v52 = v51;
    v53 = v124;
    if (v124)
    {
      v54 = CFArrayGetCount(v124);
      if (!v52)
      {
LABEL_138:
        if (v124)
          CFRelease(v124);
        goto LABEL_140;
      }
    }
    else
    {
      v54 = 0;
      if (!v51)
        goto LABEL_138;
    }
    v55 = 0;
    do
    {
      if (v50 == v53 && v55 == v54)
        break;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v123, v50, v55);
      v56 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      cf = (CFTypeRef)*((_QWORD *)this + 1);
      v121 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(p_shared_owners);
        while (__stxr(v58 + 1, p_shared_owners));
      }
      v59 = *((_DWORD *)this + 10);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v118, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
      AMCP::Null::make_object((uint64_t)&valuePtr, (uint64_t)&cf, v59, &v118, (const __CFDictionary **)&v123, 0, v60);
      v61 = v119;
      if (v119)
      {
        v62 = (unint64_t *)&v119->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = v121;
      if (v121)
      {
        v65 = (unint64_t *)&v121->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if ((_QWORD)valuePtr)
      {
        v67 = (_QWORD *)*((_QWORD *)this + 13);
        v68 = *((_QWORD *)this + 14);
        if ((unint64_t)v67 >= v68)
        {
          v73 = *((_QWORD *)this + 12);
          v74 = ((uint64_t)v67 - v73) >> 4;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v76 = v68 - v73;
          if (v76 >> 3 > v75)
            v75 = v76 >> 3;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
            v77 = 0xFFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          *((_QWORD *)&v130 + 1) = (char *)this + 112;
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v77);
          v80 = &v78[16 * v74];
          v81 = *((_QWORD *)&valuePtr + 1);
          *(_OWORD *)v80 = valuePtr;
          if (v81)
          {
            v82 = (unint64_t *)(v81 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          v85 = (_QWORD *)*((_QWORD *)this + 12);
          v84 = (_QWORD *)*((_QWORD *)this + 13);
          if (v84 == v85)
          {
            v88 = vdupq_n_s64((unint64_t)v84);
            v86 = &v78[16 * v74];
          }
          else
          {
            v86 = &v78[16 * v74];
            do
            {
              v87 = *((_OWORD *)v84 - 1);
              v84 -= 2;
              *((_OWORD *)v86 - 1) = v87;
              v86 -= 16;
              *v84 = 0;
              v84[1] = 0;
            }
            while (v84 != v85);
            v88 = *((int64x2_t *)this + 6);
          }
          v72 = v80 + 16;
          *((_QWORD *)this + 12) = v86;
          *((_QWORD *)this + 13) = v80 + 16;
          *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v88;
          v89 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = &v78[16 * v79];
          *(_QWORD *)&v130 = v89;
          buf.__r_.__value_.__r.__words[0] = v88.i64[0];
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          *v67 = valuePtr;
          v69 = *((_QWORD *)&valuePtr + 1);
          v67[1] = *((_QWORD *)&valuePtr + 1);
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = v67 + 2;
        }
        *((_QWORD *)this + 13) = v72;
        (*(void (**)(_QWORD))(*(_QWORD *)valuePtr + 16))(valuePtr);
      }
      v90 = (std::__shared_weak_count *)*((_QWORD *)&valuePtr + 1);
      if (*((_QWORD *)&valuePtr + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&valuePtr + 1) + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v123)
        CFRelease(v123);
      ++v55;
    }
    while (v55 != v52);
    goto LABEL_138;
  }
LABEL_150:
  v94 = v113;
  if (v113)
  {
    v95 = (unint64_t *)&v113->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
LABEL_155:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v114);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v116);
}

void sub_1B5A4B390(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

std::__shared_mutex_base *AMCP::Null::Object::destroy_cores(std::__shared_mutex_base *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  AMCP::Log::Scope_Registry *is_base_of;
  AMCP::Log::Scope_Registry *v6;
  int v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  int16x8_t *v15;
  NSObject *v16;
  os_log_type_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  int v24;
  int16x8_t *p_p;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  int v35;
  int16x8_t *v36;
  int16x8_t __p;
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int16x8_t *v48;
  uint64_t v49;

  v1 = (uint64_t)this;
  v49 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)&this->__gate1_.__cv_.__opaque[24];
  v3 = *(uint64_t **)&this->__gate1_.__cv_.__opaque[32];
  while (v2 != v3)
  {
    v4 = *v2;
    v2 += 2;
    this = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  if (*(_DWORD *)(v1 + 88))
  {
    is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(v1 + 84));
    if (!(_DWORD)is_base_of)
    {
LABEL_43:
      this = AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(v1 + 8) + 16), *(_DWORD *)(v1 + 88));
      *(_DWORD *)(v1 + 88) = 0;
      return this;
    }
    AMCP::Log::Scope_Registry::get(is_base_of);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v39, "com.apple.coreaudio", "AMCP");
    v7 = *(_DWORD *)(v39 + 16);
    switch(v7)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v18 = *(std::__shared_weak_count **)v42;
        v19 = **(NSObject ***)buf;
        if (*(_QWORD *)v42)
        {
          v20 = (unint64_t *)(*(_QWORD *)v42 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          goto LABEL_38;
        v22 = pthread_self();
        v23 = pthread_mach_thread_np(v22);
        v24 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v38 >= 0)
          p_p = &__p;
        else
          p_p = (int16x8_t *)__p.i64[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v23;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "Null_Object.cpp";
        v43 = 1024;
        v44 = 325;
        v45 = 1024;
        v46 = v24;
        v47 = 2080;
        v48 = p_p;
        v16 = v19;
        v17 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v42;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v42)
        {
          v28 = (unint64_t *)(*(_QWORD *)v42 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          goto LABEL_38;
        v33 = pthread_self();
        v34 = pthread_mach_thread_np(v33);
        v35 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v38 >= 0)
          v36 = &__p;
        else
          v36 = (int16x8_t *)__p.i64[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "Null_Object.cpp";
        v43 = 1024;
        v44 = 325;
        v45 = 1024;
        v46 = v35;
        v47 = 2080;
        v48 = v36;
        _os_log_debug_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Destroying Core %u for %s", buf, 0x28u);
        goto LABEL_30;
      case 1:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v8 = *(std::__shared_weak_count **)v42;
        v9 = **(NSObject ***)buf;
        if (*(_QWORD *)v42)
        {
          v10 = (unint64_t *)(*(_QWORD *)v42 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          goto LABEL_38;
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v14 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v38 >= 0)
          v15 = &__p;
        else
          v15 = (int16x8_t *)__p.i64[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "Null_Object.cpp";
        v43 = 1024;
        v44 = 325;
        v45 = 1024;
        v46 = v14;
        v47 = 2080;
        v48 = v15;
        v16 = v9;
        v17 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_38;
    }
    _os_log_impl(&dword_1B57BA000, v16, v17, "%6u %32s:%-5d Destroying Core %u for %s", buf, 0x28u);
LABEL_30:
    if (v38 < 0)
      operator delete((void *)__p.i64[0]);
LABEL_38:
    v30 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    goto LABEL_43;
  }
  return this;
}

void sub_1B5A4B8A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::Object::handle_set_property(AMCP::Null::Object *this, uint64_t a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  __int16 v11;
  unsigned __int8 v12;
  int v13;
  __int16 v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v9 = std::__shared_weak_count::lock(v8);
  if (!v9
    || (v10 = *((_QWORD *)this + 7)) == 0
    || (v11 = (*(uint64_t (**)(uint64_t, uint64_t, const AMCP::Address *, const AMCP::Thing *))(*(_QWORD *)v10 + 40))(v10, a2, a3, a4), !(_BYTE)v11))
  {
LABEL_7:
    v14 = (*(uint64_t (**)(AMCP::Null::Object *, uint64_t, const AMCP::Address *, const AMCP::Thing *))(*(_QWORD *)this + 56))(this, a2, a3, a4);
    v12 = v14;
    v13 = HIBYTE(v14);
    if (!v9)
      return v12 | (v13 << 8);
    goto LABEL_8;
  }
  v12 = v11;
  v13 = HIBYTE(v11);
LABEL_8:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v12 | (v13 << 8);
}

void AMCP::Null::Object::populate_core(AMCP::Null::Object *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  const UInt8 *v32;
  CFIndex v33;
  CFStringRef v34;
  AMCP::Thing *v35;
  AMCP::Thing *v36;
  unint64_t *p_shared_weak_owners;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  char *v41;
  __int128 *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 *v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *p_cf;
  CFIndex size;
  CFStringRef v64;
  AMCP::Thing *v65;
  AMCP::Thing *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::string *v70;
  CFIndex v71;
  CFStringRef v72;
  AMCP::Thing *v73;
  AMCP::Thing *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  CFIndex v79;
  CFStringRef v80;
  AMCP::Thing *v81;
  AMCP::Thing *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string *v86;
  CFIndex v87;
  CFStringRef v88;
  AMCP::Thing *v89;
  AMCP::Thing *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::string *v94;
  CFIndex v95;
  CFStringRef v96;
  AMCP::Thing *v97;
  AMCP::Thing *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::string *v102;
  CFIndex v103;
  CFStringRef v104;
  AMCP::Thing *v105;
  AMCP::Thing *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::string *v110;
  CFIndex v111;
  CFStringRef v112;
  AMCP::Thing *v113;
  AMCP::Thing *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  std::string *v121;
  CFIndex v122;
  CFStringRef v123;
  AMCP::Thing *v124;
  AMCP::Thing *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  std::string *v132;
  CFIndex v133;
  CFStringRef v134;
  AMCP::Thing *v135;
  AMCP::Thing *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  std::string *v143;
  CFIndex v144;
  CFStringRef v145;
  AMCP::Thing *v146;
  AMCP::Thing *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  const __CFDictionary *v167;
  CFIndex Count;
  unint64_t v169;
  unsigned int *v170;
  CFTypeID v171;
  unint64_t v172;
  unint64_t v173;
  AMCP *v174;
  _BYTE *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  _BYTE *v188;
  unint64_t v189;
  BOOL v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  char *v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t i;
  int v199;
  uint64_t v200;
  unint64_t v201;
  const void *v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  __int128 *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::runtime_error *v225;
  std::runtime_error *v226;
  std::runtime_error *v227;
  std::runtime_error *v228;
  std::runtime_error *v229;
  std::runtime_error *v230;
  std::runtime_error *v231;
  std::runtime_error *exception;
  std::runtime_error *v233;
  std::runtime_error *v234;
  std::runtime_error *v235;
  std::runtime_error *v236;
  std::runtime_error *v237;
  std::runtime_error *v238;
  std::runtime_error *v239;
  std::runtime_error *v240;
  std::runtime_error *v241;
  std::runtime_error *v242;
  std::runtime_error *v243;
  std::runtime_error *v244;
  std::runtime_error *v245;
  std::runtime_error *v246;
  std::runtime_error *v247;
  std::runtime_error *v248;
  std::__shared_weak_count *v249;
  __int32 v250;
  const void *v251;
  uint64_t v252;
  std::string cf;
  void (*v254)(uint64_t, std::string *, __int128 *, _QWORD);
  char v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  CFTypeRef v258[2];
  unsigned int *v259;
  std::__shared_weak_count *v260;
  void **keys[2];
  __int128 v262;
  void (*v263)(uint64_t, void ***, __int128 *, _QWORD);
  unsigned int *v264;
  std::__shared_weak_count *v265;
  CFTypeRef v266[2];
  _BYTE __p[48];
  unsigned int v268;
  __int128 v269;
  __int128 v270;
  void (*v271)(uint64_t, __int128 *, void ***, _QWORD);
  __int128 v272;
  __int128 v273;
  void (*v274)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v275;
  unsigned int v276;
  void *v277;
  _BYTE *v278;
  void **v279;
  __int128 v280;
  __int128 v281;
  void (*v282)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  LODWORD(v272) = *((_DWORD *)this + 22);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v272, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v6 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v7 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  LODWORD(v272) = *((_DWORD *)this + 21);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v272, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v9 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v272) = *((_DWORD *)this + 20);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v272, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v12 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v15 && (v15 = std::__shared_weak_count::lock(v15)) != 0 && (v16 = *((_QWORD *)this + 7)) != 0)
  {
    v249 = v15;
    v17 = (_DWORD *)(v16 + 88);
  }
  else
  {
    v249 = v15;
    v17 = (_DWORD *)((char *)this + 40);
  }
  LODWORD(v272) = *v17;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v272, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v18 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.audio.Null-Driver");
  *(_QWORD *)&v272 = 0x676C6F626F706C67;
  DWORD2(v272) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v272, cf.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)__p + 40), __p);
  v21 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  v24 = *((_DWORD *)this + 22);
  *(_QWORD *)__p = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v24;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v272, 0, (__int128 *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v272 + 40), &v272);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v256, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  cf.__r_.__value_.__s.__data_[0] = 0;
  v255 = 0;
  v28 = v256;
  v29 = v257;
  if (v257)
  {
    p_shared_owners = (unint64_t *)&v257->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  strcpy((char *)v258, "manlbolg");
  BYTE1(v258[1]) = 0;
  WORD1(v258[1]) = 0;
  v271 = 0;
  v269 = 0u;
  v270 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v258, (int16x8_t)0);
  if (__p[23] >= 0)
    v32 = __p;
  else
    v32 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v33 = __p[23];
  else
    v33 = *(_QWORD *)&__p[8];
  v34 = CFStringCreateWithBytes(0, v32, v33, 0x8000100u, 0);
  if (!v34)
  {
    v233 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v233, "Could not construct");
    __cxa_throw(v233, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v264, *((CFDictionaryRef *)this + 6), v34);
  CFRelease(v34);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((_BYTE)v265)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v264);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v269, v36);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&__p[32])(0, __p, 0, 0);
  }
  else if (v255)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v269, (uint64_t)&cf, v35);
  }
  if (!v271)
  {
    v259 = 0;
    v260 = 0;
    goto LABEL_96;
  }
  v251 = *(CFTypeRef *)((char *)v258 + 4);
  v263 = 0;
  *(_OWORD *)keys = 0u;
  v262 = 0u;
  v271(1, &v269, keys, 0);
  if (v29)
  {
    p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v38 = __ldxr(p_shared_weak_owners);
    while (__stxr(v38 + 1, p_shared_weak_owners));
  }
  LODWORD(v266[0]) = 1819173229;
  *(CFTypeRef *)((char *)v266 + 4) = v251;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v259, SHIDWORD(v251), *(double *)v266);
  v39 = v259;
  v40 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v272 = 0u;
  v273 = 0u;
  v274 = 0;
  if (v263)
    v263(2, keys, &v272, 0);
  *((_QWORD *)&v281 + 1) = 0;
  v41 = (char *)operator new(0x30uLL);
  *(_QWORD *)v41 = &off_1E69802F8;
  *(_OWORD *)(v41 + 8) = 0u;
  *(_OWORD *)(v41 + 24) = 0u;
  *((_QWORD *)v41 + 5) = 0;
  if (v274)
    v274(2, &v272, v41 + 8, 0);
  *((_QWORD *)&v281 + 1) = v41;
  memset(__p, 0, 40);
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v280);
  *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v39, v40, (AMCP *)__p);
  if (*(_QWORD *)&__p[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
  v42 = (__int128 *)*((_QWORD *)&v281 + 1);
  if (*((__int128 **)&v281 + 1) == &v280)
  {
    v43 = 4;
    v42 = &v280;
  }
  else
  {
    if (!*((_QWORD *)&v281 + 1))
      goto LABEL_72;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_72:
  if (v274)
    v274(0, &v272, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>((uint64_t)v39);
  v44 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v273 + 1) = 0;
  v45 = operator new(0x28uLL);
  *v45 = &off_1E69803F8;
  v45[1] = v28;
  v45[2] = v29;
  v45[3] = 0x676C6F626C6E616DLL;
  *((_DWORD *)v45 + 8) = HIDWORD(v251);
  *((_QWORD *)&v273 + 1) = v45;
  memset(__p, 0, 40);
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v272);
  *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v39, v44, (AMCP *)__p);
  if (*(_QWORD *)&__p[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
  v46 = (__int128 *)*((_QWORD *)&v273 + 1);
  if (*((__int128 **)&v273 + 1) == &v272)
  {
    v47 = 4;
    v46 = &v272;
  }
  else
  {
    if (!*((_QWORD *)&v273 + 1))
      goto LABEL_81;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_81:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v272, (uint64_t)v39);
  v275 = *((_QWORD *)v39 + 5);
  v276 = v39[12];
  v48 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  v49 = v272;
  v272 = 0uLL;
  *(_OWORD *)__p = v49;
  *(_OWORD *)&__p[16] = v273;
  *(_DWORD *)&__p[32] = (_DWORD)v274;
  if (*((_QWORD *)&v273 + 1))
  {
    v50 = *(_QWORD *)(v273 + 8);
    if ((*((_QWORD *)&v49 + 1) & (*((_QWORD *)&v49 + 1) - 1)) != 0)
    {
      if (v50 >= *((_QWORD *)&v49 + 1))
        v50 %= *((_QWORD *)&v49 + 1);
    }
    else
    {
      v50 &= *((_QWORD *)&v49 + 1) - 1;
    }
    *(_QWORD *)(v49 + 8 * v50) = &__p[16];
    v273 = 0uLL;
  }
  *(_QWORD *)&__p[40] = v275;
  v268 = v276;
  v279 = 0;
  v51 = operator new(0x40uLL);
  *v51 = &off_1E6980478;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v51 + 1), (uint64_t *)__p);
  v51[6] = *(_QWORD *)&__p[40];
  *((_DWORD *)v51 + 14) = v268;
  v279 = (void **)v51;
  v280 = 0u;
  v281 = 0u;
  v282 = 0;
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)&v280, (uint64_t)&v277);
  v282 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v39, v48, (AMCP *)&v280);
  if (v282)
    v282(0, (uint64_t)&v280, 0, 0);
  v52 = v279;
  if (v279 == &v277)
  {
    v53 = 4;
    v52 = &v277;
  }
  else
  {
    if (!v279)
      goto LABEL_94;
    v53 = 5;
  }
  (*((void (**)(void))*v52 + v53))();
LABEL_94:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v272);
  if (v263)
    v263(0, keys, 0, 0);
LABEL_96:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v264);
  if (v271)
    v271(0, &v269, 0, 0);
  if (v29)
  {
    v54 = (unint64_t *)&v29->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v259)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v259 + 10, &v259);
  v56 = v260;
  if (v260)
  {
    v57 = (unint64_t *)&v260->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  v59 = v257;
  if (v257)
  {
    v60 = (unint64_t *)&v257->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F626C6D6F64;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v234, "Could not construct");
    __cxa_throw(v234, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_cf = &cf;
  else
    p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    size = cf.__r_.__value_.__l.__size_;
  v64 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, size, 0x8000100u, 0);
  if (!v64)
  {
    v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v235, "Could not construct");
    __cxa_throw(v235, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v64);
  CFRelease(v64);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v66);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v65);
  }
  if (v274)
  {
    LODWORD(v269) = 1819111268;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v67 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v68 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F626C6D616BLL;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v236 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v236, "Could not construct");
    __cxa_throw(v236, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &cf;
  else
    v70 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v71 = cf.__r_.__value_.__l.__size_;
  v72 = CFStringCreateWithBytes(0, (const UInt8 *)v70, v71, 0x8000100u, 0);
  if (!v72)
  {
    v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v237, "Could not construct");
    __cxa_throw(v237, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v72);
  CFRelease(v72);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v74);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v73);
  }
  if (v274)
  {
    LODWORD(v269) = 1819107691;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v75 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v76 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F6269636F6ELL;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v238 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v238, "Could not construct");
    __cxa_throw(v238, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &cf;
  else
    v78 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v79 = cf.__r_.__value_.__l.__size_;
  v80 = CFStringCreateWithBytes(0, (const UInt8 *)v78, v79, 0x8000100u, 0);
  if (!v80)
  {
    v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v239, "Could not construct");
    __cxa_throw(v239, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v80);
  CFRelease(v80);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v82);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v81);
  }
  if (v274)
  {
    LODWORD(v269) = 1768124270;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v83 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v84 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v277, "com.apple.audio.AudioMIDISetup");
  *(_QWORD *)__p = v277;
  memset(&__p[8], 0, 24);
  v277 = 0;
  *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  __p[40] = 1;
  keys[0] = (void **)0x676C6F6263617070;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v240 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v240, "Could not construct");
    __cxa_throw(v240, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = &cf;
  else
    v86 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v87 = cf.__r_.__value_.__l.__size_;
  v88 = CFStringCreateWithBytes(0, (const UInt8 *)v86, v87, 0x8000100u, 0);
  if (!v88)
  {
    v241 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v241, "Could not construct");
    __cxa_throw(v241, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v88);
  CFRelease(v88);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v90);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v89);
  }
  if (v274)
  {
    LODWORD(v269) = 1667330160;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v91 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v92 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v277)
    CFRelease(v277);
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F62736E756DLL;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v242 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v242, "Could not construct");
    __cxa_throw(v242, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = &cf;
  else
    v94 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v95 = cf.__r_.__value_.__l.__size_;
  v96 = CFStringCreateWithBytes(0, (const UInt8 *)v94, v95, 0x8000100u, 0);
  if (!v96)
  {
    v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v243, "Could not construct");
    __cxa_throw(v243, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v96);
  CFRelease(v96);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v98);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v97);
  }
  if (v274)
  {
    LODWORD(v269) = 1936618861;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v99 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v100 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F626677766ELL;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v244, "Could not construct");
    __cxa_throw(v244, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &cf;
  else
    v102 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v103 = cf.__r_.__value_.__l.__size_;
  v104 = CFStringCreateWithBytes(0, (const UInt8 *)v102, v103, 0x8000100u, 0);
  if (!v104)
  {
    v245 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v245, "Could not construct");
    __cxa_throw(v245, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v104);
  CFRelease(v104);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v106);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v105);
  }
  if (v274)
  {
    LODWORD(v269) = 1719105134;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v107 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v108 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  __p[40] = 0;
  keys[0] = (void **)0x676C6F6272737263;
  LODWORD(keys[1]) = 0;
  v274 = 0;
  v272 = 0u;
  v273 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v246, "Could not construct");
    __cxa_throw(v246, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = &cf;
  else
    v110 = (std::string *)cf.__r_.__value_.__r.__words[0];
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v111 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  else
    v111 = cf.__r_.__value_.__l.__size_;
  v112 = CFStringCreateWithBytes(0, (const UInt8 *)v110, v111, 0x8000100u, 0);
  if (!v112)
  {
    v247 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v247, "Could not construct");
    __cxa_throw(v247, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v112);
  CFRelease(v112);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  if (BYTE8(v280))
  {
    AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v114);
    if (v254)
      v254(0, &cf, 0, 0);
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v113);
  }
  if (v274)
  {
    LODWORD(v269) = 1920168547;
    *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
  }
  else
  {
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
  if (v274)
    v274(0, &v272, 0, 0);
  if (cf.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
  v115 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
  if (cf.__r_.__value_.__l.__size_)
  {
    v116 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  v118 = 0;
  __p[0] = 0;
  __p[40] = 0;
  do
  {
    v119 = 0;
    v120 = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v118];
    do
    {
      LODWORD(keys[0]) = 1818454126;
      HIDWORD(keys[0]) = v120;
      LODWORD(keys[1]) = v119;
      v274 = 0;
      v272 = 0u;
      v273 = 0u;
      if (!*((_QWORD *)this + 6))
      {
        v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v225, "Could not construct");
        __cxa_throw(v225, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = &cf;
      else
        v121 = (std::string *)cf.__r_.__value_.__r.__words[0];
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v122 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
      else
        v122 = cf.__r_.__value_.__l.__size_;
      v123 = CFStringCreateWithBytes(0, (const UInt8 *)v121, v122, 0x8000100u, 0);
      if (!v123)
      {
        v226 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v226, "Could not construct");
        __cxa_throw(v226, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v123);
      CFRelease(v123);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
      if (BYTE8(v280))
      {
        AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
        AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v125);
        if (v254)
          v254(0, &cf, 0, 0);
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v124);
      }
      if (v274)
      {
        LODWORD(v269) = 1818454126;
        *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
      }
      else
      {
        *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
      if (v274)
        v274(0, &v272, 0, 0);
      if (cf.__r_.__value_.__r.__words[0])
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
      v126 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
      if (cf.__r_.__value_.__l.__size_)
      {
        v127 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      ++v119;
    }
    while (v119 <= a2);
    ++v118;
  }
  while (v118 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  v129 = 0;
  __p[0] = 0;
  __p[40] = 0;
  do
  {
    v130 = 0;
    v131 = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v129];
    do
    {
      LODWORD(keys[0]) = 1818452846;
      HIDWORD(keys[0]) = v131;
      LODWORD(keys[1]) = v130;
      v274 = 0;
      v272 = 0u;
      v273 = 0u;
      if (!*((_QWORD *)this + 6))
      {
        v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v227, "Could not construct");
        __cxa_throw(v227, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = &cf;
      else
        v132 = (std::string *)cf.__r_.__value_.__r.__words[0];
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v133 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
      else
        v133 = cf.__r_.__value_.__l.__size_;
      v134 = CFStringCreateWithBytes(0, (const UInt8 *)v132, v133, 0x8000100u, 0);
      if (!v134)
      {
        v228 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v228, "Could not construct");
        __cxa_throw(v228, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v134);
      CFRelease(v134);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
      if (BYTE8(v280))
      {
        AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
        AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v136);
        if (v254)
          v254(0, &cf, 0, 0);
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v135);
      }
      if (v274)
      {
        LODWORD(v269) = 1818452846;
        *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
      }
      else
      {
        *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
      if (v274)
        v274(0, &v272, 0, 0);
      if (cf.__r_.__value_.__r.__words[0])
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
      v137 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
      if (cf.__r_.__value_.__l.__size_)
      {
        v138 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      ++v130;
    }
    while (v130 <= a2);
    ++v129;
  }
  while (v129 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  v140 = 0;
  __p[0] = 0;
  __p[40] = 0;
  do
  {
    v141 = 0;
    v142 = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v140];
    do
    {
      LODWORD(keys[0]) = 1818455662;
      HIDWORD(keys[0]) = v142;
      LODWORD(keys[1]) = v141;
      v274 = 0;
      v272 = 0u;
      v273 = 0u;
      if (!*((_QWORD *)this + 6))
      {
        v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v229, "Could not construct");
        __cxa_throw(v229, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      AMCP::Address::to_string(&cf, (unsigned int *)keys, (int16x8_t)0);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = &cf;
      else
        v143 = (std::string *)cf.__r_.__value_.__r.__words[0];
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v144 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
      else
        v144 = cf.__r_.__value_.__l.__size_;
      v145 = CFStringCreateWithBytes(0, (const UInt8 *)v143, v144, 0x8000100u, 0);
      if (!v145)
      {
        v230 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v230, "Could not construct");
        __cxa_throw(v230, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v280, *((CFDictionaryRef *)this + 6), v145);
      CFRelease(v145);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
      if (BYTE8(v280))
      {
        AMCP::make_thing_from_description((AMCP *)&cf, (CFTypeRef *)&v280);
        AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)&v272, v147);
        if (v254)
          v254(0, &cf, 0, 0);
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v272, (uint64_t)__p, v146);
      }
      if (v274)
      {
        LODWORD(v269) = 1818455662;
        *(void ***)((char *)&v269 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&cf, (uint64_t)&v269, (uint64_t)&v272);
      }
      else
      {
        *(_OWORD *)&cf.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v280);
      if (v274)
        v274(0, &v272, 0, 0);
      if (cf.__r_.__value_.__r.__words[0])
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(cf.__r_.__value_.__r.__words[0] + 40), &cf);
      v148 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
      if (cf.__r_.__value_.__l.__size_)
      {
        v149 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      ++v141;
    }
    while (v141 <= a2);
    ++v140;
  }
  while (v140 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  v151 = *((_DWORD *)this + 22);
  *(_QWORD *)__p = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v151;
  *(_DWORD *)&__p[12] = 1633907820;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v272, 0, (__int128 *)__p, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v272 + 40), &v272);
  v152 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v153 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = *((_DWORD *)this + 22);
  *(_QWORD *)__p = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v155;
  *(_OWORD *)&__p[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&__p[28] = xmmword_1B5D68BF0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v272, 0, (uint64_t *)__p, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v272 + 40), &v272);
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = *((_DWORD *)this + 22);
  *(_QWORD *)__p = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v159;
  *(_OWORD *)&__p[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&__p[28] = xmmword_1B5D68C00;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v272, 0, (uint64_t *)__p, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v272 + 40), &v272);
  v160 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v161 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = *((_DWORD *)this + 22);
  *(_QWORD *)__p = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v163;
  *(_OWORD *)&__p[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&__p[28] = xmmword_1B5D68C10;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v272, 0, (uint64_t *)__p, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v272 + 40), &v272);
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = (const __CFDictionary *)*((_QWORD *)this + 6);
  if (!v167)
  {
    v248 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v248, "Could not construct");
    __cxa_throw(v248, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFDictionaryGetCount(v167);
  *(_QWORD *)__p = 0;
  std::vector<void const*>::vector(keys, Count, __p);
  *(_QWORD *)__p = 0;
  std::vector<void const*>::vector(&v277, Count, __p);
  CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)this + 6), (const void **)keys[0], (const void **)v277);
  if (Count)
  {
    v169 = 0;
    v250 = vdup_n_s32(0x676C6F62u).i32[1];
    while (1)
    {
      if (v169 >= keys[1] - keys[0])
LABEL_561:
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v170 = (unsigned int *)keys[0][v169];
      if (!v170)
        goto LABEL_541;
      CFRetain(keys[0][v169]);
      v259 = v170;
      v171 = CFGetTypeID(v170);
      if (v171 == CFStringGetTypeID())
        break;
LABEL_540:
      CFRelease(v170);
LABEL_541:
      if (++v169 == Count)
        goto LABEL_545;
    }
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)v266, (CFTypeRef *)&v259);
    if (!v266[0])
    {
      v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v231, "Could not construct");
      __cxa_throw(v231, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v266[0]);
    LODWORD(v172) = 0;
    v173 = __p[23];
    v174 = *(AMCP **)__p;
    if (__p[23] >= 0)
      v175 = __p;
    else
      v175 = *(_BYTE **)__p;
    if (__p[23] < 0)
      v173 = *(_QWORD *)&__p[8];
    v176 = 0x676C6F6200000000;
    if (v175)
    {
      v252 = 0x676C6F6200000000;
      if (v173 < 4)
        goto LABEL_490;
      if (*v175)
      {
        v177 = 1;
        do
        {
          v178 = v177;
          if (v175[v177++])
            v180 = v178 >= v173;
          else
            v180 = 1;
        }
        while (!v180);
        v181 = __PAIR64__(v250, bswap32(*(_DWORD *)v175));
        v252 = v181;
        if (v178 < 5)
          goto LABEL_489;
        LODWORD(v172) = 0;
        v182 = v178 - 1;
        if ((unint64_t)(v178 - 1) < 8 || v175[4] != 47)
          goto LABEL_490;
        HIDWORD(v181) = bswap32(*(_DWORD *)(v175 + 5));
        v252 = v181;
        if (v182 < 9 || v175[9] != 47)
          goto LABEL_489;
        LODWORD(v172) = 0;
        v183 = v178 - 10;
        if (v182 == 9)
          goto LABEL_490;
        v184 = v175 + 10;
        if (!v175[10])
          goto LABEL_490;
        v185 = 0;
        v186 = v175 + 11;
        v187 = v175 + 11;
        do
        {
          v188 = v187;
          v189 = v185 + 1;
          ++v187;
          if (v186[v185])
            v190 = v189 >= v183;
          else
            v190 = 1;
          ++v185;
        }
        while (!v190);
        v191 = 0;
        v192 = (unint64_t)&v184[v189];
        while (1)
        {
          v193 = (char)v184[v191];
          if ((v193 - 9) >= 5 && v193 != 32)
            break;
          if (v189 == ++v191)
            goto LABEL_489;
        }
        v194 = v193 == 43 || v193 == 45 ? &v184[v191 + 1] : &v184[v191];
        if (v194 == (char *)v192)
        {
LABEL_489:
          LODWORD(v172) = 0;
          goto LABEL_490;
        }
        v195 = *v194;
        if ((unint64_t)(v194 + 1) >= v192)
        {
          if (v195 == 48)
          {
LABEL_470:
            ++v194;
            v196 = 8;
            goto LABEL_472;
          }
        }
        else if (v195 == 48)
        {
          if ((v194[1] | 0x20) == 0x78)
          {
            v194 += 2;
            v196 = 16;
            goto LABEL_472;
          }
          goto LABEL_470;
        }
        v196 = 10;
LABEL_472:
        if (v194 != (char *)v192)
        {
          if ((unint64_t)v194 >= v192)
          {
            LODWORD(v172) = 0;
          }
          else
          {
            v172 = 0;
            v197 = 0xFFFFFFFF / v196;
            for (i = v188 - v194; i; --i)
            {
              v199 = *v194;
              if ((v199 - 48) >= 0xA)
              {
                if ((v199 - 97) >= 0x1A)
                {
                  if ((v199 - 65) > 0x19)
                    break;
                  v200 = -55;
                }
                else
                {
                  v200 = -87;
                }
              }
              else
              {
                v200 = -48;
              }
              v201 = v200 + *v194;
              if (v201 >= v196 || v172 > v197)
                break;
              if (v172 == v197 && v201 > ~(v197 * v196))
              {
                LODWORD(v172) = 0xFFFFFFFF / v196;
                break;
              }
              v172 = v201 + v172 * v196;
              ++v194;
            }
          }
LABEL_490:
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          AMCP::local_get_property_traits_list(v174);
          if (std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v252))
          {
LABEL_537:
            if (v266[0])
              CFRelease(v266[0]);
            v170 = v259;
            if (!v259)
              goto LABEL_541;
            goto LABEL_540;
          }
          if (v169 >= (v278 - (_BYTE *)v277) >> 3)
            goto LABEL_561;
          v203 = (const void *)*((_QWORD *)v277 + v169);
          if (v203)
            CFRetain(*((CFTypeRef *)v277 + v169));
          v258[0] = v203;
          AMCP::make_thing_from_description((AMCP *)&cf, v258);
          v204 = operator new(0x50uLL);
          v204[1] = 0;
          v204[2] = 0;
          *v204 = &off_1E699FA88;
          v205 = (uint64_t)(v204 + 3);
          *(_QWORD *)__p = v252;
          *(_DWORD *)&__p[8] = v172;
          AMCP::Core::Operation::Operation((uint64_t)(v204 + 3), (int *)__p);
          v264 = (unsigned int *)(v204 + 3);
          v265 = (std::__shared_weak_count *)v204;
          v282 = 0;
          v280 = 0u;
          v281 = 0u;
          if (v254)
            v254(1, &cf, &v280, 0);
          v206 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
          v272 = 0u;
          v273 = 0u;
          v274 = 0;
          if (v282)
            v282(2, (uint64_t)&v280, (AMCP::Thing *)&v272, 0);
          *((_QWORD *)&v270 + 1) = 0;
          v207 = (char *)operator new(0x30uLL);
          *(_QWORD *)v207 = &off_1E6980678;
          *(_OWORD *)(v207 + 8) = 0u;
          *(_OWORD *)(v207 + 24) = 0u;
          *((_QWORD *)v207 + 5) = 0;
          if (v274)
            v274(2, &v272, v207 + 8, 0);
          *((_QWORD *)&v270 + 1) = v207;
          memset(__p, 0, 40);
          std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v269);
          *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v205, v206, (AMCP *)__p);
          if (*(_QWORD *)&__p[32])
            (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
          v208 = (__int128 *)*((_QWORD *)&v270 + 1);
          if (*((__int128 **)&v270 + 1) == &v269)
          {
            v208 = &v269;
            v209 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v270 + 1))
              goto LABEL_509;
            v209 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v208 + 8 * v209))();
LABEL_509:
          if (v274)
            v274(0, &v272, 0, 0);
          if (v282)
            v282(0, (uint64_t)&v280, 0, 0);
          std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v280, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
          v210 = v280;
          if (*((_QWORD *)&v280 + 1))
          {
            v211 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 16);
            do
              v212 = __ldxr(v211);
            while (__stxr(v212 + 1, v211));
          }
          v213 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
          *((_QWORD *)&v273 + 1) = 0;
          v214 = (char *)operator new(0x28uLL);
          *(_QWORD *)v214 = &off_1E69806F8;
          *(_OWORD *)(v214 + 8) = v210;
          *((_QWORD *)v214 + 3) = v252;
          *((_DWORD *)v214 + 8) = v172;
          *((_QWORD *)&v273 + 1) = v214;
          memset(__p, 0, 40);
          std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v272);
          *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v205, v213, (AMCP *)__p);
          if (*(_QWORD *)&__p[32])
            (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
          v215 = (__int128 *)*((_QWORD *)&v273 + 1);
          if (*((__int128 **)&v273 + 1) == &v272)
          {
            v215 = &v272;
            v216 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v273 + 1))
              goto LABEL_523;
            v216 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v215 + 8 * v216))();
LABEL_523:
          v217 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
          if (*((_QWORD *)&v280 + 1))
          {
            v218 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v264 + 10, &v264);
          v220 = v265;
          if (v265)
          {
            v221 = (unint64_t *)&v265->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          if (v254)
            v254(0, &cf, 0, 0);
          if (v258[0])
            CFRelease(v258[0]);
          goto LABEL_537;
        }
        goto LABEL_489;
      }
      LODWORD(v172) = 0;
      v176 = __PAIR64__(v250, bswap32(*(_DWORD *)v175));
    }
    v252 = v176;
    goto LABEL_490;
  }
LABEL_545:
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
  if (v249)
  {
    v223 = (unint64_t *)&v249->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
}

void sub_1B5A4E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Object::do_set_property(AMCP::Null::Object *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void (*v22)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD);
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void (*v34)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD);
  char *v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  _OWORD v48[2];
  void (*v49)(uint64_t, _OWORD *, char *, _QWORD);
  std::__shared_weak_count *v50[2];
  __int128 v51;
  uint64_t v52;
  int v53;
  _OWORD v54[2];
  void (*v55)(uint64_t, _OWORD *, char *, _QWORD);
  char *v56;
  _QWORD *v57;
  int v58;
  int v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 22) != a2)
    return 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v7)
  {
    v7 = std::__shared_weak_count::lock(v7);
    v8 = v7;
    if (v7)
    {
      v9 = *((_QWORD *)this + 7);
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 88);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
  v10 = (unsigned int *)((char *)this + 40);
LABEL_9:
  v12 = *v10;
  v13 = *(_DWORD *)a3;
  AMCP::local_get_property_traits_list((AMCP *)v7);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v13))
  {
    v26 = operator new(0x20uLL);
    v26[1] = 0;
    v26[2] = 0;
    *((_BYTE *)v26 + 24) = 0;
    *v26 = &off_1E69A0170;
    v56 = (char *)(v26 + 3);
    v57 = v26;
    v58 = 0;
    v59 = 0;
    v27 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v28 = *((_DWORD *)this + 22);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v50[0] = *((std::__shared_weak_count **)this + 3);
    v50[1] = v29;
    if (v29)
    {
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)&v51 = v9;
    *((_QWORD *)&v51 + 1) = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v52 = *(_QWORD *)a3;
    v53 = *((_DWORD *)a3 + 2);
    memset(v54, 0, sizeof(v54));
    v55 = 0;
    v34 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD))*((_QWORD *)a4 + 4);
    if (v34)
      v34(1, a4, v54, 0);
    v61 = 0;
    v35 = (char *)operator new(0x60uLL);
    v36 = v51;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)v50;
    *(_QWORD *)v35 = &off_1E6980778;
    v50[0] = 0;
    v50[1] = 0;
    *(_OWORD *)(v35 + 24) = v36;
    v51 = 0uLL;
    *((_QWORD *)v35 + 5) = v52;
    *((_DWORD *)v35 + 12) = v53;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *((_QWORD *)v35 + 11) = 0;
    if (v55)
      v55(2, v54, v35 + 56, 0);
    v61 = v35;
    AMCP::Core::Conductor::enqueue_config_change(v27, v12, v28, 1, (uint64_t)v60);
    v37 = v61;
    if (v61 == v60)
    {
      v38 = 4;
      v37 = v60;
    }
    else
    {
      if (!v61)
      {
LABEL_41:
        if (v55)
          v55(0, v54, 0, 0);
        if (*((_QWORD *)&v51 + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
          }
        }
        if (v50[1])
          std::__shared_weak_count::__release_weak(v50[1]);
LABEL_50:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v56);
        v11 = 257;
        if (!v8)
          return v11;
        goto LABEL_51;
      }
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_41;
  }
  if (*(_DWORD *)a3 == 1819173229)
  {
    v14 = operator new(0x20uLL);
    v14[1] = 0;
    v14[2] = 0;
    *((_BYTE *)v14 + 24) = 0;
    *v14 = &off_1E69A0170;
    v56 = (char *)(v14 + 3);
    v57 = v14;
    v58 = 0;
    v59 = 0;
    v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v16 = *((_DWORD *)this + 22);
    v17 = *((_QWORD *)this + 4);
    *(_QWORD *)&v44 = *((_QWORD *)this + 3);
    *((_QWORD *)&v44 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 16);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_QWORD *)&v45 = v9;
    *((_QWORD *)&v45 + 1) = v8;
    if (v8)
    {
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v46 = *(_QWORD *)a3;
    v47 = *((_DWORD *)a3 + 2);
    memset(v48, 0, sizeof(v48));
    v49 = 0;
    v22 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD))*((_QWORD *)a4 + 4);
    if (v22)
      v22(1, a4, v48, 0);
    v61 = 0;
    v23 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v23 + 8) = v44;
    *(_QWORD *)v23 = &off_1E69807F8;
    *(_OWORD *)(v23 + 24) = v45;
    *((_QWORD *)v23 + 5) = v46;
    *((_DWORD *)v23 + 12) = v47;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *((_QWORD *)v23 + 11) = 0;
    if (v49)
      v49(2, v48, v23 + 56, 0);
    v61 = v23;
    AMCP::Core::Conductor::enqueue_config_change(v15, v12, v16, 1, (uint64_t)v60);
    v24 = v61;
    if (v61 == v60)
    {
      v25 = 4;
      v24 = v60;
    }
    else
    {
      if (!v61)
        goto LABEL_58;
      v25 = 5;
    }
    (*(void (**)(_QWORD *))(*v24 + 8 * v25))(v24);
LABEL_58:
    if (v49)
      v49(0, v48, 0, 0);
    goto LABEL_50;
  }
  v11 = 0;
  if (!v8)
    return v11;
LABEL_51:
  v41 = (unint64_t *)&v8->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v11;
}

void sub_1B5A4E8CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E69807F8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E69807F8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = &off_1E69807F8;
  std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A4EA04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69807F8;
  return std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  const void *v8;
  std::string *p_p;
  CFIndex size;
  CFStringRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::runtime_error *exception;
  uint64_t v15;
  int v16;
  std::string __p;
  const void *v18;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v18, a1 + 56);
        v8 = v18;
        if (v18)
        {
          v7.i64[0] = 0x676C6F626C6E616DLL;
          v15 = 0x676C6F626C6E616DLL;
          v16 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
          if (!v11)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v11, v8);
          CFRelease(v11);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0])
            CFRelease(__p.__r_.__value_.__l.__data_);
          CFRelease(v8);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A4EC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  const void *v17;
  const void *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  CFRelease(v18);
  if (v17)
    CFRelease(v17);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 80);
  if (v2)
    v2(0, a1 + 48, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v10)
    v10(1, a2 + 48);
  return a1;
}

void sub_1B5A4EDF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6980778;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6980778;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = &off_1E6980778;
  std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A4EF20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6980778;
  return std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  std::string *p_p;
  CFIndex size;
  CFStringRef v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::runtime_error *exception;
  std::string __p;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::Address::to_string(&__p, (unsigned int *)(a1 + 40), v7);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
        if (!v10)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        AMCP::make_description_from_thing((AMCP *)&__p, (const AMCP::Thing *)(a1 + 56));
        v11 = (const void *)__p.__r_.__value_.__r.__words[0];
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v10, __p.__r_.__value_.__l.__data_);
        if (v11)
          CFRelease(v11);
        CFRelease(v10);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
        (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
        if (__p.__r_.__value_.__r.__words[0])
          CFRelease(__p.__r_.__value_.__l.__data_);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A4F108(void *a1)
{
  __clang_call_terminate(a1);
}

void sub_1B5A4F138(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 80);
  if (v2)
    v2(0, a1 + 48, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v10)
    v10(1, a2 + 48);
  return a1;
}

void sub_1B5A4F2D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  const void *result;
  const void *v5;
  char v6;

  result = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (result)
  {
    v5 = result;
    result = CFRetain(result);
    *(_QWORD *)a1 = v5;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6980378;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A4F4F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
    if (v2)
      v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v15[2];
  void (*v16)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  _OWORD v17[2];
  void (*v18)(uint64_t, _OWORD *, char *, _QWORD);
  _OWORD v19[2];
  void (*v20)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v15, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (v16)
    v16(1, v15, v17, 0);
  v22 = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E69804F8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v18)
    v18(1, v17, v8 + 8, 0);
  v22 = v8;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v21);
  v20 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v19);
  if (v20)
    v20(0, (uint64_t)v19, 0, 0);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v18)
    v18(0, v17, 0, 0);
  result = AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(v6);
  if (v16)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v16)(0, v15, 0, 0);
  return result;
}

void sub_1B5A4F730(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _OWORD v24[2];
  void (*v25)(uint64_t, _OWORD *, __int128 *, _QWORD);
  __int128 v26;
  __int128 v27;
  void (*v28)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  void (*v33)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v34;
  int v35;
  _BYTE v36[24];
  _BYTE *v37;
  __int128 v38;
  __int128 v39;
  void (*v40)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v24, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  if (v25)
    v25(1, v24, &v26, 0);
  *((_QWORD *)&v39 + 1) = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E6980578;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v28)
    v28(1, &v26, v8 + 8, 0);
  *((_QWORD *)&v39 + 1) = v8;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)&v38);
  v33 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)&v31);
  if (v33)
    v33(0, (uint64_t)&v31, 0, 0);
  v12 = (__int128 *)*((_QWORD *)&v39 + 1);
  if (*((__int128 **)&v39 + 1) == &v38)
  {
    v13 = 4;
    v12 = &v38;
  }
  else
  {
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v28)
    v28(0, &v26, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v26, v6);
  v29 = *(_QWORD *)(v6 + 40);
  v30 = *(_DWORD *)(v6 + 48);
  v14 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  v15 = v26;
  v26 = 0uLL;
  v31 = v15;
  v32 = v27;
  LODWORD(v33) = (_DWORD)v28;
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = *(_QWORD *)(v27 + 8);
    if ((*((_QWORD *)&v15 + 1) & (*((_QWORD *)&v15 + 1) - 1)) != 0)
    {
      if (v16 >= *((_QWORD *)&v15 + 1))
        v16 %= *((_QWORD *)&v15 + 1);
    }
    else
    {
      v16 &= *((_QWORD *)&v15 + 1) - 1;
    }
    *(_QWORD *)(v15 + 8 * v16) = &v32;
    v27 = 0uLL;
  }
  v34 = v29;
  v35 = v30;
  v37 = 0;
  v17 = operator new(0x40uLL);
  *v17 = &off_1E69805F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v17 + 1), (uint64_t *)&v31);
  v17[6] = v34;
  *((_DWORD *)v17 + 14) = v35;
  v37 = v17;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v38, (uint64_t)v36);
  v40 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v14, (AMCP *)&v38);
  if (v40)
    v40(0, (uint64_t)&v38, 0, 0);
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_29;
    v22 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v18, v19, v20);
LABEL_29:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v31);
  result = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v26);
  if (v25)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v25)(0, v24, 0, 0);
  return result;
}

void sub_1B5A4FAC4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5A4FB90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69806F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69806F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69806F8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69806F8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 438;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::Object::populate_core(Address::Element)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 438;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 440;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::Object::populate_core(Address::Element)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 440;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A50284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980678;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980678;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6980678;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A505E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6980678;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69805F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69805F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69805F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A50824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69805F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<applesauce::CF::URLRef>(a2, (uint64_t)v4);
  if (v5)
    return (CFTypeRef *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A5090C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF6URLRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980578;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980578;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6980578;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A50A88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6980578;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF6URLRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69804F8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69804F8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69804F8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A50D04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69804F8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF9StringRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980478;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980478;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6980478;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A50F00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6980478;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *v2;
  uint64_t result;
  _OWORD v4[2];
  uint64_t (*v5)(_QWORD, _OWORD *, _QWORD, _QWORD);

  v2 = (_QWORD *)(a1 + 8);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)v4, a2);
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v2, (uint64_t)v4);
  if (v5)
    return v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A50FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD, uint64_t *, _QWORD, _QWORD))
{
  if (a13)
    a13(0, &a9, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69803F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69803F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69803F8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69803F8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A51738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1819173229EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980378;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980378;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6980378;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A51A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6980378;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<applesauce::CF::StringRef>(a2, (uint64_t)v4);
  if (v5)
    return (CFTypeRef *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A51B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69802F8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69802F8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69802F8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A51CC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69802F8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1819173229EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

const applesauce::CF::DictionaryRef *AMCP::Null::get_stock_class_id(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2)
{
  const applesauce::CF::DictionaryRef *v2;
  int16x8_t v4;
  int v5;
  std::string *v6;
  CFIndex size;
  CFStringRef v8;
  const __CFNumber *v9;
  std::runtime_error *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  CFTypeRef cf;
  uint64_t v15;
  int v16;
  const __CFNumber *valuePtr;
  std::string v18;
  std::string::size_type v19;
  void *__p;
  char v21;

  v2 = a2;
  AMCP::get_class_traits((AMCP *)&v18, a2);
  v5 = v18.__r_.__value_.__s.__data_[8];
  if (v21 < 0)
    operator delete(__p);
  if (v18.__r_.__value_.__r.__words[2])
  {
    v19 = v18.__r_.__value_.__r.__words[2];
    operator delete((void *)v18.__r_.__value_.__r.__words[2]);
  }
  if (!v5)
  {
    if (*this)
    {
      v4.i64[0] = 0x676C6F6262636C73;
      v15 = 0x676C6F6262636C73;
      v16 = 0;
      AMCP::Address::to_string(&v18, (unsigned int *)&v15, v4);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v18;
      else
        v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      else
        size = v18.__r_.__value_.__l.__size_;
      v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, size, 0x8000100u, 0);
      if (!v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      LODWORD(valuePtr) = 0;
      cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!cf)
      {
        v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v13, "Could not construct");
        __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v8, &cf);
      v9 = valuePtr;
      if (valuePtr)
      {
        v2 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(valuePtr);
        CFRelease(v9);
        if (cf)
          CFRelease(cf);
        CFRelease(v8);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        return v2;
      }
      v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }
    else
    {
      v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v2;
}

void sub_1B5A51FD8(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::calculate_max_element(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2)
{
  const applesauce::CF::DictionaryRef *v3;
  const applesauce::CF::DictionaryRef *v4;
  int16x8_t v5;
  unsigned int max_number_channels_for_scope;
  const applesauce::CF::DictionaryRef *v7;
  int16x8_t v8;
  unsigned int v9;
  const applesauce::CF::DictionaryRef *v10;
  int16x8_t v11;
  uint64_t result;

  if (!AMCP::is_base_of((AMCP *)0x61646576, a2))
    return AMCP::Null::get_max_element_for_controls(this, v3, v5);
  max_number_channels_for_scope = AMCP::Null::get_max_number_channels_for_scope((AMCP::Null *)0x696E7074, this, v4, v5);
  v9 = AMCP::Null::get_max_number_channels_for_scope((AMCP::Null *)0x6F757470, this, v7, v8);
  if (max_number_channels_for_scope <= v9)
    max_number_channels_for_scope = v9;
  LODWORD(result) = AMCP::Null::get_max_element_for_controls(this, v10, v11);
  if (max_number_channels_for_scope <= result)
    return result;
  else
    return max_number_channels_for_scope;
}

void AMCP::Null::diff_control_lists(AMCP::Null *this, CFArrayRef *a2, CFArrayRef *a3)
{
  const __CFArray *v5;
  unint64_t v6;
  const applesauce::CF::DictionaryRef *v7;
  int16x8_t v8;
  unint64_t control_marker;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  const __CFArray *v14;
  unint64_t v15;
  const applesauce::CF::DictionaryRef *v16;
  int16x8_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  std::runtime_error *exception;
  __CFArray *Mutable;
  const __CFDictionary *v26;
  char v27;
  const __CFDictionary *v28;
  char v29;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v5 = *a2;
  if (!*a2)
  {
LABEL_30:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = 0;
  while (v6 < CFArrayGetCount(v5))
  {
    if (!*a2)
      goto LABEL_30;
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v28, *a2, v6);
    if (v29)
    {
      control_marker = AMCP::Null::make_control_marker(&v28, v7, v8);
      v11 = control_marker;
      v12 = v10;
      v13 = HIDWORD(control_marker);
      if (!(_DWORD)control_marker || !HIDWORD(control_marker) || v10 == -1)
      {
        v14 = *a3;
        if (!*a3)
          goto LABEL_30;
        v15 = 0;
        while (v15 < CFArrayGetCount(v14))
        {
          if (!*a3)
            goto LABEL_30;
          applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v26, *a3, v15);
          if (v27
            && ((v18 = AMCP::Null::make_control_marker(&v26, v16, v17),
                 v20 = v18,
                 v21 = v19,
                 v22 = HIDWORD(v18),
                 !(_DWORD)v18)
             || !HIDWORD(v18)
             || v19 == -1))
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
            if (v11 == v20 && (_DWORD)v13 == (_DWORD)v22 && v12 == v21)
              goto LABEL_25;
          }
          else
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
          }
          ++v15;
          v14 = *a3;
          if (!*a3)
            goto LABEL_30;
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v28);
      }
    }
LABEL_25:
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v28);
    ++v6;
    v5 = *a2;
    if (!*a2)
      goto LABEL_30;
  }
  mcp_applesauce::CF::Array_Builder::copy_array(this, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5A522A0(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::find_control_by_description(uint64_t *a1, const __CFDictionary **this, int16x8_t a3)
{
  unint64_t control_marker;
  const applesauce::CF::DictionaryRef *v5;
  int16x8_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  control_marker = AMCP::Null::make_control_marker(this, (const applesauce::CF::DictionaryRef *)this, a3);
  v7 = *a1;
  if (*a1 != a1[1])
  {
    v8 = control_marker;
    v9 = (int)v5;
    do
    {
      if (AMCP::Null::make_control_marker((const __CFDictionary **)(*(_QWORD *)v7 + 48), v5, v6) == v8
        && (_DWORD)v5 == v9)
      {
        break;
      }
      v7 += 16;
    }
    while (v7 != a1[1]);
  }
  return v7;
}

void AMCP::Null::make_object(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, const __CFDictionary **a5, unsigned int a6, int16x8_t a7)
{
  unsigned int stock_class_id;
  std::string *p_p;
  CFIndex size;
  CFStringRef v15;
  const __CFNumber *v16;
  const applesauce::CF::DictionaryRef *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  const __CFNumber *v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *p_shared_weak_owners;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  uint64_t v56;
  std::string::size_type v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  uint64_t v89;
  std::string::size_type v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  uint64_t v122;
  std::string::size_type v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  uint64_t v155;
  std::string::size_type v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::runtime_error *exception;
  std::runtime_error *v187;
  std::runtime_error *v188;
  std::runtime_error *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  CFTypeRef cf;
  std::string __p;
  int v198;
  int valuePtr;
  uint64_t v200;
  std::__shared_weak_count *v201;
  const __CFNumber *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;

  stock_class_id = a6;
  v198 = a3;
  if (!a6)
  {
    if (!*a5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    a7.i64[0] = 0x676C6F62636C6173;
    v204 = 0x676C6F62636C6173;
    LODWORD(v205) = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v204, a7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v15 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    v200 = (uint64_t)v15;
    if (!v15)
    {
      v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v187, "Could not construct");
      __cxa_throw(v187, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    valuePtr = 0;
    cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!cf)
    {
      v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v188, "Could not construct");
      __cxa_throw(v188, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v202, *a5, v15, &cf);
    v16 = v202;
    if (!v202)
    {
      v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v189, "Could not construct");
      __cxa_throw(v189, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v17 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(v202);
    CFRelease(v16);
    if (cf)
      CFRelease(cf);
    CFRelease(v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    stock_class_id = AMCP::Null::get_stock_class_id(a5, v17);
  }
  if (AMCP::is_base_of((AMCP *)0x7370616E, stock_class_id))
  {
    v18 = (std::__shared_weak_count *)operator new(0x90uLL);
    v19 = v18;
    v18->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    v18->__shared_weak_owners_ = 0;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982648;
    v21 = *(const __CFNumber **)a2;
    v22 = *(_QWORD *)(a2 + 8);
    v202 = *(const __CFNumber **)a2;
    v203 = (std::__shared_weak_count *)v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *a4;
    v26 = (std::__shared_weak_count *)a4[1];
    v200 = *a4;
    v201 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (std::__shared_weak_count_vtbl *)&v18[1];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    __p.__r_.__value_.__l.__size_ = v22;
    if (v22)
    {
      v30 = (unint64_t *)(v22 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v204 = v25;
    v205 = v26;
    if (v26)
    {
      v32 = (unint64_t *)&v26->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    AMCP::Null::Control::Control(&v18[1].__vftable, (uint64_t)v21, v22, a3, &v204, (CFTypeRef *)a5);
    if (v26)
    {
      v34 = (unint64_t *)&v26->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E6980290;
    v39 = v201;
    if (v201)
    {
      v40 = (unint64_t *)&v201->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v203;
    if (v203)
    {
      v43 = (unint64_t *)&v203->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    shared_owners = (std::__shared_weak_count *)v19[2].__shared_owners_;
    if (!shared_owners)
    {
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v52 = __ldxr(p_shared_weak_owners);
      while (__stxr(v52 + 1, p_shared_weak_owners));
      v19[2].__vftable = v29;
      v19[2].__shared_owners_ = (uint64_t)v19;
      goto LABEL_60;
    }
    if (shared_owners->__shared_owners_ == -1)
    {
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
      v190 = v45;
      v48 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v19[2].__vftable = v29;
      v19[2].__shared_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(shared_owners);
      v45 = v190;
      do
LABEL_60:
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
LABEL_241:
      if (!v53)
      {
        v195 = v45;
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v45 = v195;
      }
    }
LABEL_243:
    *(_OWORD *)a1 = v45;
    return;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6374, stock_class_id))
  {
    v54 = (std::__shared_weak_count *)operator new(0x90uLL);
    v19 = v54;
    v54->__shared_owners_ = 0;
    v55 = (unint64_t *)&v54->__shared_owners_;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982698;
    v56 = *(_QWORD *)a2;
    v57 = *(_QWORD *)(a2 + 8);
    v202 = *(const __CFNumber **)a2;
    v203 = (std::__shared_weak_count *)v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = *a4;
    v61 = (std::__shared_weak_count *)a4[1];
    v200 = *a4;
    v201 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v64 = (std::__shared_weak_count_vtbl *)&v54[1];
    __p.__r_.__value_.__r.__words[0] = v56;
    __p.__r_.__value_.__l.__size_ = v57;
    if (v57)
    {
      v65 = (unint64_t *)(v57 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v204 = v60;
    v205 = v61;
    if (v61)
    {
      v67 = (unint64_t *)&v61->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    AMCP::Null::Control::Control(&v54[1].__vftable, v56, v57, a3, &v204, (CFTypeRef *)a5);
    if (v61)
    {
      v69 = (unint64_t *)&v61->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v71 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v72 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v64->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E6980228;
    v74 = v201;
    if (v201)
    {
      v75 = (unint64_t *)&v201->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v203;
    if (v203)
    {
      v78 = (unint64_t *)&v203->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    v80 = (std::__shared_weak_count *)v19[2].__shared_owners_;
    if (v80)
    {
      if (v80->__shared_owners_ != -1)
        goto LABEL_243;
      do
        v81 = __ldxr(v55);
      while (__stxr(v81 + 1, v55));
      v191 = v45;
      v82 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
      v19[2].__vftable = v64;
      v19[2].__shared_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(v80);
      v45 = v191;
    }
    else
    {
      do
        v84 = __ldxr(v55);
      while (__stxr(v84 + 1, v55));
      v85 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      v19[2].__vftable = v64;
      v19[2].__shared_owners_ = (uint64_t)v19;
    }
    do
      v53 = __ldaxr(v55);
    while (__stlxr(v53 - 1, v55));
    goto LABEL_241;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, stock_class_id))
  {
    v87 = (std::__shared_weak_count *)operator new(0x90uLL);
    v19 = v87;
    v87->__shared_owners_ = 0;
    v88 = (unint64_t *)&v87->__shared_owners_;
    v87->__shared_weak_owners_ = 0;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69826E8;
    v89 = *(_QWORD *)a2;
    v90 = *(_QWORD *)(a2 + 8);
    v202 = *(const __CFNumber **)a2;
    v203 = (std::__shared_weak_count *)v90;
    if (v90)
    {
      v91 = (unint64_t *)(v90 + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v93 = *a4;
    v94 = (std::__shared_weak_count *)a4[1];
    v200 = *a4;
    v201 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v97 = (std::__shared_weak_count_vtbl *)&v87[1];
    __p.__r_.__value_.__r.__words[0] = v89;
    __p.__r_.__value_.__l.__size_ = v90;
    if (v90)
    {
      v98 = (unint64_t *)(v90 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v204 = v93;
    v205 = v94;
    if (v94)
    {
      v100 = (unint64_t *)&v94->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    AMCP::Null::Control::Control(&v87[1].__vftable, v89, v90, a3, &v204, (CFTypeRef *)a5);
    if (v94)
    {
      v102 = (unint64_t *)&v94->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v104 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v105 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v97->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E69801C0;
    v107 = v201;
    if (v201)
    {
      v108 = (unint64_t *)&v201->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = v203;
    if (v203)
    {
      v111 = (unint64_t *)&v203->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    v113 = (std::__shared_weak_count *)v19[2].__shared_owners_;
    if (v113)
    {
      if (v113->__shared_owners_ != -1)
        goto LABEL_243;
      do
        v114 = __ldxr(v88);
      while (__stxr(v114 + 1, v88));
      v192 = v45;
      v115 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
      v19[2].__vftable = v97;
      v19[2].__shared_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(v113);
      v45 = v192;
    }
    else
    {
      do
        v117 = __ldxr(v88);
      while (__stxr(v117 + 1, v88));
      v118 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
      v19[2].__vftable = v97;
      v19[2].__shared_owners_ = (uint64_t)v19;
    }
    do
      v53 = __ldaxr(v88);
    while (__stlxr(v53 - 1, v88));
    goto LABEL_241;
  }
  if (AMCP::is_base_of((AMCP *)0x6C65766C, stock_class_id))
  {
    v120 = (std::__shared_weak_count *)operator new(0x90uLL);
    v19 = v120;
    v120->__shared_owners_ = 0;
    v121 = (unint64_t *)&v120->__shared_owners_;
    v120->__shared_weak_owners_ = 0;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982738;
    v122 = *(_QWORD *)a2;
    v123 = *(_QWORD *)(a2 + 8);
    v202 = *(const __CFNumber **)a2;
    v203 = (std::__shared_weak_count *)v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = *a4;
    v127 = (std::__shared_weak_count *)a4[1];
    v200 = *a4;
    v201 = v127;
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    v130 = (std::__shared_weak_count_vtbl *)&v120[1];
    __p.__r_.__value_.__r.__words[0] = v122;
    __p.__r_.__value_.__l.__size_ = v123;
    if (v123)
    {
      v131 = (unint64_t *)(v123 + 8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
    }
    v204 = v126;
    v205 = v127;
    if (v127)
    {
      v133 = (unint64_t *)&v127->__shared_owners_;
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    AMCP::Null::Control::Control(&v120[1].__vftable, v122, v123, a3, &v204, (CFTypeRef *)a5);
    if (v127)
    {
      v135 = (unint64_t *)&v127->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v137 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v138 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v130->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E6980158;
    v140 = v201;
    if (v201)
    {
      v141 = (unint64_t *)&v201->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = v203;
    if (v203)
    {
      v144 = (unint64_t *)&v203->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    v146 = (std::__shared_weak_count *)v19[2].__shared_owners_;
    if (v146)
    {
      if (v146->__shared_owners_ != -1)
        goto LABEL_243;
      do
        v147 = __ldxr(v121);
      while (__stxr(v147 + 1, v121));
      v193 = v45;
      v148 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
      v19[2].__vftable = v130;
      v19[2].__shared_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(v146);
      v45 = v193;
    }
    else
    {
      do
        v150 = __ldxr(v121);
      while (__stxr(v150 + 1, v121));
      v151 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
      v19[2].__vftable = v130;
      v19[2].__shared_owners_ = (uint64_t)v19;
    }
    do
      v53 = __ldaxr(v121);
    while (__stlxr(v53 - 1, v121));
    goto LABEL_241;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6472, stock_class_id))
  {
    v153 = (std::__shared_weak_count *)operator new(0x90uLL);
    v19 = v153;
    v153->__shared_owners_ = 0;
    v154 = (unint64_t *)&v153->__shared_owners_;
    v153->__shared_weak_owners_ = 0;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982788;
    v155 = *(_QWORD *)a2;
    v156 = *(_QWORD *)(a2 + 8);
    v202 = *(const __CFNumber **)a2;
    v203 = (std::__shared_weak_count *)v156;
    if (v156)
    {
      v157 = (unint64_t *)(v156 + 8);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
    }
    v159 = *a4;
    v160 = (std::__shared_weak_count *)a4[1];
    v200 = *a4;
    v201 = v160;
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    v163 = (std::__shared_weak_count_vtbl *)&v153[1];
    __p.__r_.__value_.__r.__words[0] = v155;
    __p.__r_.__value_.__l.__size_ = v156;
    if (v156)
    {
      v164 = (unint64_t *)(v156 + 8);
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    v204 = v159;
    v205 = v160;
    if (v160)
    {
      v166 = (unint64_t *)&v160->__shared_owners_;
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
    }
    AMCP::Null::Control::Control(&v153[1].__vftable, v155, v156, a3, &v204, (CFTypeRef *)a5);
    if (v160)
    {
      v168 = (unint64_t *)&v160->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v170 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v171 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    v163->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E69800F0;
    v173 = v201;
    if (v201)
    {
      v174 = (unint64_t *)&v201->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    v176 = v203;
    if (v203)
    {
      v177 = (unint64_t *)&v203->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    v179 = (std::__shared_weak_count *)v19[2].__shared_owners_;
    if (v179)
    {
      if (v179->__shared_owners_ != -1)
        goto LABEL_243;
      do
        v180 = __ldxr(v154);
      while (__stxr(v180 + 1, v154));
      v194 = v45;
      v181 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
      v19[2].__vftable = v163;
      v19[2].__shared_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(v179);
      v45 = v194;
    }
    else
    {
      do
        v183 = __ldxr(v154);
      while (__stxr(v183 + 1, v154));
      v184 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
      v19[2].__vftable = v163;
      v19[2].__shared_owners_ = (uint64_t)v19;
    }
    do
      v53 = __ldaxr(v154);
    while (__stlxr(v53 - 1, v154));
    goto LABEL_241;
  }
  if (AMCP::is_base_of((AMCP *)0x61646576, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Device,std::allocator<AMCP::Null::Device>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(_QWORD *)a2, *(std::__shared_weak_count **)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  }
  else if (AMCP::is_base_of((AMCP *)0x6163746C, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Control,std::allocator<AMCP::Null::Control>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  }
  else if (AMCP::is_base_of((AMCP *)0x61737472, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Stream,std::allocator<AMCP::Null::Stream>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(_QWORD *)a2, *(std::__shared_weak_count **)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  }
  else if (AMCP::is_base_of((AMCP *)0x61636C6B, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Clock,std::allocator<AMCP::Null::Clock>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  }
  else if (AMCP::is_base_of((AMCP *)0x61626F78, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Box,std::allocator<AMCP::Null::Box>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(_QWORD *)a2, *(std::__shared_weak_count **)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
    *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  }
  else if (AMCP::is_base_of((AMCP *)0x616F626A, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Object,std::allocator<AMCP::Null::Object>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v198, a4, (CFTypeRef *)a5);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B5A53230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v6 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v8);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Device,std::allocator<AMCP::Null::Device>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *shared_owners;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[3];
  std::__shared_weak_count *v45;

  v12 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69827D8;
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a4;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count_vtbl *)&v12[1];
  v44[2] = a2;
  v45 = a3;
  if (a3)
  {
    v23 = (unint64_t *)&a3->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v44[0] = v18;
  v44[1] = v19;
  if (v19)
  {
    v25 = (unint64_t *)&v19->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  AMCP::Null::Clock::Clock(&v12[1].__vftable, a2, (uint64_t)a3, v17, v44, a6);
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = v45;
  if (v45)
  {
    v30 = (unint64_t *)&v45->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E697FFB8;
  v13[6].std::__shared_count = 0u;
  *(_OWORD *)&v13[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v13[7].__shared_owners_ = 0u;
  v13[8].__vftable = 0;
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (a3)
  {
    v34 = (unint64_t *)&a3->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v22;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    v41 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A535BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Control,std::allocator<AMCP::Null::Control>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *shared_owners;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[3];
  std::__shared_weak_count *v37;

  v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982828;
  v15 = (std::__shared_weak_count_vtbl *)&v12[1];
  v36[2] = a2;
  v37 = (std::__shared_weak_count *)a3;
  if (a3)
  {
    v16 = (unint64_t *)(a3 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a4;
  v19 = *a5;
  v20 = (std::__shared_weak_count *)a5[1];
  v36[0] = v19;
  v36[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  AMCP::Null::Control::Control(&v12[1].__vftable, a2, a3, v18, v36, a6);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a1 = v15;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A537F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Stream,std::allocator<AMCP::Null::Stream>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *shared_owners;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[2];
  int16x8_t v45;

  v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982878;
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a4;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count_vtbl *)&v12[1];
  v45.i64[0] = a2;
  v45.i64[1] = (uint64_t)a3;
  if (a3)
  {
    v23 = (unint64_t *)&a3->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v44[0] = v18;
  v44[1] = v19;
  if (v19)
  {
    v25 = (unint64_t *)&v19->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v45, v17, v44, a6);
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = (std::__shared_weak_count *)v45.i64[1];
  if (v45.i64[1])
  {
    v30 = (unint64_t *)(v45.i64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E6980020;
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (a3)
  {
    v34 = (unint64_t *)&a3->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v22;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    v41 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A53AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Clock,std::allocator<AMCP::Null::Clock>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *shared_owners;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[3];
  std::__shared_weak_count *v37;

  v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69828C8;
  v15 = (std::__shared_weak_count_vtbl *)&v12[1];
  v36[2] = a2;
  v37 = (std::__shared_weak_count *)a3;
  if (a3)
  {
    v16 = (unint64_t *)(a3 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a4;
  v19 = *a5;
  v20 = (std::__shared_weak_count *)a5[1];
  v36[0] = v19;
  v36[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  AMCP::Null::Clock::Clock(&v12[1].__vftable, a2, a3, v18, v36, a6);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a1 = v15;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A53CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Box,std::allocator<AMCP::Null::Box>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *shared_owners;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[2];
  int16x8_t v45;

  v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982918;
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a4;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count_vtbl *)&v12[1];
  v45.i64[0] = a2;
  v45.i64[1] = (uint64_t)a3;
  if (a3)
  {
    v23 = (unint64_t *)&a3->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v44[0] = v18;
  v44[1] = v19;
  if (v19)
  {
    v25 = (unint64_t *)&v19->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v45, v17, v44, a6);
  if (v19)
  {
    v27 = (unint64_t *)&v19->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = (std::__shared_weak_count *)v45.i64[1];
  if (v45.i64[1])
  {
    v30 = (unint64_t *)(v45.i64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E697FEE8;
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (a3)
  {
    v34 = (unint64_t *)&a3->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v22;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    v41 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v13[2].__vftable = v22;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A53FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Object,std::allocator<AMCP::Null::Object>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *shared_owners;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  int16x8_t v37;

  v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982968;
  v15 = (std::__shared_weak_count_vtbl *)&v12[1];
  v37.i64[0] = a2;
  v37.i64[1] = a3;
  if (a3)
  {
    v16 = (unint64_t *)(a3 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a4;
  v19 = *a5;
  v20 = (std::__shared_weak_count *)a5[1];
  v36[0] = v19;
  v36[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v37, v18, v36, a6);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = (std::__shared_weak_count *)v37.i64[1];
  if (v37.i64[1])
  {
    v26 = (unint64_t *)(v37.i64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a1 = v15;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v13[2].__vftable = v15;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1B5A541E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Object::Object(uint64_t a1, int16x8_t *a2, int a3, _QWORD *a4, CFTypeRef *a5)
{
  int16x8_t v8;
  CFTypeRef v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *p_p;
  CFIndex size;
  CFStringRef v15;
  const __CFNumber *v16;
  const applesauce::CF::DictionaryRef *v17;
  AMCP::Log::Scope_Registry *stock_class_id;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  __int128 v36;
  uint64_t v37;
  const __CFNumber *v38;
  __int128 v39;
  uint64_t v40;
  std::runtime_error cf;
  std::runtime_error v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int valuePtr;
  std::string __p;
  __int16 v50;
  _BYTE v51[14];
  const char *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  *(int16x8_t *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E697FE50;
  *(_DWORD *)(a1 + 40) = a3;
  v9 = *a5;
  if (*a5)
    CFRetain(*a5);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = *a4;
  v10 = a4[1];
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 72) = 0;
  if (!*a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8.i64[0] = 0x676C6F62636C6173;
  v42.__vftable = (std::runtime_error_vtbl *)0x676C6F62636C6173;
  LODWORD(v42.__imp_.__imp_) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  *(_QWORD *)&v36 = v15;
  if (!v15)
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v38, (const __CFDictionary *)*a5, v15, &cf);
  v16 = v38;
  if (!v38)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(v38);
  CFRelease(v16);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  CFRelease(v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 80) = (_DWORD)v17;
  stock_class_id = AMCP::Null::get_stock_class_id((const __CFDictionary **)a5, v17);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 84) = stock_class_id;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v20 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v22;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 240;
      v50 = 2080;
      *(_QWORD *)v51 = "m_description.is_valid() == false";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a non-empty description", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    v23 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a non-empty description");
    std::runtime_error::runtime_error(&v42, &cf);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v42);
    *(_QWORD *)&v51[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v53 = 240;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v38 = (const __CFNumber *)off_1E69A20A0;
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v23, (uint64_t)&__p);
  }
  if (!*(_DWORD *)(a1 + 80))
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v24 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v26;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 241;
      v50 = 2080;
      *(_QWORD *)v51 = "m_core_class_id == k_class_id_unknown";
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a class", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    v27 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a class");
    std::runtime_error::runtime_error(&v42, &cf);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v42);
    *(_QWORD *)&v51[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v53 = 241;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v38 = (const __CFNumber *)off_1E69A20A0;
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v27, (uint64_t)&__p);
  }
  if (!(_DWORD)stock_class_id)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v28 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v30;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 242;
      v50 = 2080;
      *(_QWORD *)v51 = "m_core_stock_class_id == k_class_id_unknown";
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a stock class", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    v31 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a stock class");
    std::runtime_error::runtime_error(&v42, &cf);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v42);
    *(_QWORD *)&v51[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v53 = 242;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v38 = (const __CFNumber *)off_1E69A20A0;
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v31, (uint64_t)&__p);
  }
  return a1;
}

void sub_1B5A54970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  const void **v34;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  applesauce::CF::StringRef::~StringRef(v34);
  v36 = *(std::__shared_weak_count **)(v32 + 64);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v32 + 48));
  v37 = *(std::__shared_weak_count **)(v32 + 32);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  *(_QWORD *)v32 = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Null::Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Object>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Box::~Box(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Box::populate_core@<X0>(AMCP::Null::Box *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  CFDictionaryRef *v5;
  uint64_t v6;
  std::string *p_p;
  CFIndex size;
  CFStringRef v9;
  AMCP::Thing *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  CFIndex v15;
  CFStringRef v16;
  AMCP::Thing *v17;
  AMCP::Thing *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  CFIndex v23;
  CFStringRef v24;
  AMCP::Thing *v25;
  AMCP::Thing *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  CFIndex v31;
  CFStringRef v32;
  AMCP::Thing *v33;
  AMCP::Thing *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *v38;
  CFIndex v39;
  CFStringRef v40;
  AMCP::Thing *v41;
  AMCP::Thing *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  CFIndex v47;
  CFStringRef v48;
  AMCP::Thing *v49;
  AMCP::Thing *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54;
  CFIndex v55;
  CFStringRef v56;
  AMCP::Thing *v57;
  AMCP::Thing *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  CFIndex v63;
  CFStringRef v64;
  AMCP::Thing *v65;
  AMCP::Thing *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::string *v70;
  CFIndex v71;
  CFStringRef v72;
  AMCP::Thing *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *v95;
  _BYTE v96[40];
  char v97;
  unsigned int v98[4];
  std::string __p;
  void (*v100)(_QWORD, std::string *, _QWORD, _QWORD);
  CFTypeRef v101;
  char v102;
  __int128 v103;
  __int128 v104;
  BOOL (*v105)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  int v106;
  uint64_t v107;

  AMCP::Null::Object::populate_core(this, a2, a3);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "diubbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  v6 = *((_QWORD *)this + 6);
  v5 = (CFDictionaryRef *)((char *)this + 48);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v9)
  {
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v79, "Could not construct");
    __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v9);
  CFRelease(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v10);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  if (v105)
  {
    v106 = 1651861860;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v103 = 0u;
  v104 = 0u;
  LODWORD(v103) = 1986622068;
  v105 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)v96, (uint64_t)&v103);
  AMCP::Null::make_properties<1953653102u>(v5, a3, (uint64_t)v96);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "uahbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v80, "Could not construct");
    __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
  if (!v16)
  {
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
    __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v16);
  CFRelease(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v18);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v17);
  }
  if (v105)
  {
    v106 = 1651007861;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "ivhbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
    __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = CFStringCreateWithBytes(0, (const UInt8 *)v22, v23, 0x8000100u, 0);
  if (!v24)
  {
    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
    __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v24);
  CFRelease(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v26);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v25);
  }
  if (v105)
  {
    v106 = 1651013225;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "imhbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v31 = __p.__r_.__value_.__l.__size_;
  v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
  if (!v32)
  {
    v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v85, "Could not construct");
    __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v32);
  CFRelease(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v34);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v33);
  }
  if (v105)
  {
    v106 = 1651010921;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "orpbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not construct");
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &__p;
  else
    v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v39 = __p.__r_.__value_.__l.__size_;
  v40 = CFStringCreateWithBytes(0, (const UInt8 *)v38, v39, 0x8000100u, 0);
  if (!v40)
  {
    v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
    __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v40);
  CFRelease(v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v42);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v41);
  }
  if (v105)
  {
    v106 = 1651536495;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v43 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v44 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "noxbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
    __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &__p;
  else
    v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v47 = __p.__r_.__value_.__l.__size_;
  v48 = CFStringCreateWithBytes(0, (const UInt8 *)v46, v47, 0x8000100u, 0);
  if (!v48)
  {
    v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v89, "Could not construct");
    __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v48);
  CFRelease(v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v50);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v49);
  }
  if (v105)
  {
    v106 = 1652060014;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "foxbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &__p;
  else
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v55 = __p.__r_.__value_.__l.__size_;
  v56 = CFStringCreateWithBytes(0, (const UInt8 *)v54, v55, 0x8000100u, 0);
  if (!v56)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v56);
  CFRelease(v56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v58);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v57);
  }
  if (v105)
  {
    v106 = 1652060006;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "#vdbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
    __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &__p;
  else
    v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  v64 = CFStringCreateWithBytes(0, (const UInt8 *)v62, v63, 0x8000100u, 0);
  if (!v64)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v64);
  CFRelease(v64);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v102)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v101);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v66);
    if (v100)
      v100(0, &__p, 0, 0);
  }
  else if (v97)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v103, (uint64_t)v96, v65);
  }
  if (v105)
  {
    v106 = 1650751011;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v68 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
  v96[0] = 0;
  v97 = 0;
  strcpy((char *)v98, "#lcbbolg");
  BYTE1(v98[2]) = 0;
  HIWORD(v98[2]) = 0;
  v105 = 0;
  v104 = 0u;
  v103 = 0u;
  if (!*v5)
  {
    v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v94, "Could not construct");
    __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v98, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &__p;
  else
    v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v71 = __p.__r_.__value_.__l.__size_;
  v72 = CFStringCreateWithBytes(0, (const UInt8 *)v70, v71, 0x8000100u, 0);
  if (!v72)
  {
    v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v95, "Could not construct");
    __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v101, *v5, v72);
  CFRelease(v72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v102)
    goto LABEL_232;
  AMCP::make_thing_from_description((AMCP *)&__p, &v101);
  AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v103, v73);
  if (v100)
    v100(0, &__p, 0, 0);
  if (v105)
  {
    v106 = 1650682915;
    v107 = *(_QWORD *)&v98[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>((uint64_t *)&__p, (uint64_t)&v106, (uint64_t)&v103);
  }
  else
  {
LABEL_232:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v101);
  if (v105)
    v105(0, (uint64_t)&v103, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v74 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v96);
}

void sub_1B5A55FD0(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *(void (**)(uint64_t))(a2 + 32);
  if (v3)
    v3(2);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void AMCP::Null::make_properties<1953653102u>(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v8;
  AMCP::Thing *v9;
  AMCP::Thing *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  unsigned int v16[4];
  std::string __p;
  void (*v18)(_QWORD, std::string *, _QWORD, _QWORD);
  CFTypeRef v19;
  char v20;
  _OWORD v21[2];
  void (*v22)(_QWORD, _OWORD *, _QWORD, _QWORD);
  int v23;
  uint64_t v24;

  strcpy((char *)v16, "nartbolg");
  BYTE1(v16[2]) = 0;
  HIWORD(v16[2]) = 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v16, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v8)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Could not construct");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v19, *a1, v8);
  CFRelease(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v20)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v19);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v21, v10);
    if (v18)
      v18(0, &__p, 0, 0);
  }
  else if (*(_BYTE *)(a3 + 40))
  {
    AMCP::Thing::operator=((AMCP::Thing *)v21, a3, v9);
  }
  if (v22)
  {
    v23 = 1953653102;
    v24 = *(_QWORD *)&v16[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v23, (uint64_t)v21);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  if (v22)
    v22(0, v21, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5A56360(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v15[2];
  void (*v16)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  _OWORD v17[2];
  void (*v18)(uint64_t, _OWORD *, char *, _QWORD);
  _OWORD v19[2];
  void (*v20)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v15, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (v16)
    v16(1, v15, v17, 0);
  v22 = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E6980978;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v18)
    v18(1, v17, v8 + 8, 0);
  v22 = v8;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v21);
  v20 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v19);
  if (v20)
    v20(0, (uint64_t)v19, 0, 0);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v18)
    v18(0, v17, 0, 0);
  result = AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(v6);
  if (v16)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v16)(0, v15, 0, 0);
  return result;
}

void sub_1B5A56568(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v15[2];
  void (*v16)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  _OWORD v17[2];
  void (*v18)(uint64_t, _OWORD *, char *, _QWORD);
  _OWORD v19[2];
  void (*v20)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v15, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (v16)
    v16(1, v15, v17, 0);
  v22 = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E6980878;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v18)
    v18(1, v17, v8 + 8, 0);
  v22 = v8;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v21);
  v20 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v19);
  if (v20)
    v20(0, (uint64_t)v19, 0, 0);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v18)
    v18(0, v17, 0, 0);
  result = AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(v6);
  if (v16)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v16)(0, v15, 0, 0);
  return result;
}

void sub_1B5A567A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _OWORD v15[2];
  void (*v16)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  _OWORD v17[2];
  void (*v18)(uint64_t, _OWORD *, char *, _QWORD);
  _OWORD v19[2];
  void (*v20)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v15, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (v16)
    v16(1, v15, v17, 0);
  v22 = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E6980A78;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v18)
    v18(1, v17, v8 + 8, 0);
  v22 = v8;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v21);
  v20 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v19);
  if (v20)
    v20(0, (uint64_t)v19, 0, 0);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v18)
    v18(0, v17, 0, 0);
  result = AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(v6);
  if (v16)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v16)(0, v15, 0, 0);
  return result;
}

void sub_1B5A569D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6980AF8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A56C2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980AF8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980AF8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6980AF8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A56D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6980AF8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<std::vector<unsigned int>>(a2, (uint64_t)v4);
  if (v5)
    return (_QWORD *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A56DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980A78;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980A78;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6980A78;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A56F74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6980A78;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E69808F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A57298(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69808F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69808F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69808F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A5737C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69808F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<unsigned int>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A57464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIjEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980878;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980878;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6980878;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A575E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6980878;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIjEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18[2];
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  int v22;
  _OWORD v23[2];
  double (*v24)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v11, a1);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v3 = v11;
  v4 = v12;
  v11 = 0;
  v12 = 0;
  v18[0] = v3;
  v18[1] = v4;
  v19[0] = v13;
  v19[1] = v14;
  v20 = v15;
  if (v14)
  {
    v5 = *(_QWORD *)(v13 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v19;
    v13 = 0;
    v14 = 0;
  }
  v21 = v16;
  v22 = v17;
  v26 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E69809F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v18);
  v6[6] = v21;
  *((_DWORD *)v6 + 14) = v22;
  v26 = v6;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)v25);
  v24 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v23);
  if (v24)
    v7.n128_f64[0] = v24(0, (uint64_t)v23, 0, 0);
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
    goto LABEL_13;
  }
  if (v26)
  {
    v9 = 5;
LABEL_13:
    (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v18);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v11);
}

void sub_1B5A57904(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69809F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69809F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69809F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A579E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69809F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<BOOL>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A57AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIbEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980978;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6980978;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6980978;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A57C4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6980978;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIbEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Box>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Box>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Box>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *AMCP::Null::Clock::Clock(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, CFTypeRef *a6)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  int16x8_t v19;

  v19.i64[0] = a2;
  v19.i64[1] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a5[1];
  v18[0] = *a5;
  v18[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  AMCP::Null::Object::Object((uint64_t)a1, &v19, a4, v18, a6);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (std::__shared_weak_count *)v19.i64[1];
  if (v19.i64[1])
  {
    v15 = (unint64_t *)(v19.i64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *a1 = &off_1E697FF50;
  return a1;
}

void sub_1B5A57F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AMCP::Null::Clock::~Clock(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Null::Clock::populate_core(AMCP::Null::Clock *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  CFDictionaryRef *v5;
  std::string *p_p;
  CFIndex size;
  CFStringRef v8;
  AMCP::Thing *v9;
  AMCP::Thing *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  CFIndex v15;
  CFStringRef v16;
  AMCP::Thing *v17;
  AMCP::Thing *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  CFIndex v23;
  CFStringRef v24;
  AMCP::Thing *v25;
  AMCP::Thing *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  CFIndex v31;
  CFStringRef v32;
  AMCP::Thing *v33;
  AMCP::Thing *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  std::string *v42;
  CFIndex v43;
  CFStringRef v44;
  AMCP::Thing *v45;
  AMCP::Thing *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  CFIndex v67;
  CFStringRef v68;
  AMCP::Thing *v69;
  AMCP::Thing *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  CFIndex v75;
  CFStringRef v76;
  AMCP::Thing *v77;
  AMCP::Thing *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  CFIndex v83;
  CFStringRef v84;
  AMCP::Thing *v85;
  AMCP::Thing *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  _DWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::runtime_error *v126;
  std::runtime_error *v127;
  std::runtime_error *exception;
  std::runtime_error *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  std::runtime_error *v132;
  std::runtime_error *v133;
  std::runtime_error *v134;
  std::runtime_error *v135;
  std::runtime_error *v136;
  std::runtime_error *v137;
  std::runtime_error *v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  std::runtime_error *v141;
  __int128 v142;
  __int128 v143;
  void (*v144)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  __int128 v145;
  __int128 v146;
  void (*v147)(int, uint64_t, AMCP::Thing *, uint64_t *);
  char v148;
  unsigned int v149[4];
  std::string __p;
  void (*v151)(_QWORD, std::string *, _QWORD, _QWORD);
  int v152;
  uint64_t v153;
  unsigned int v154[4];
  _OWORD v155[2];
  BOOL (*v156)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Object::populate_core(this, a2, a3);
  LOBYTE(v145) = 0;
  v148 = 0;
  strcpy((char *)v154, " diubolg");
  BYTE1(v154[2]) = 0;
  HIWORD(v154[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  v5 = (CFDictionaryRef *)((char *)this + 48);
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v154, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v8)
  {
    v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v129, "Could not construct");
    __cxa_throw(v129, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *v5, v8);
  CFRelease(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE8(v142))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v142);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v10);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v9);
  }
  if (v156)
  {
    v152 = 1969841184;
    v153 = *(_QWORD *)&v154[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v152, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v142);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  LOBYTE(v145) = 0;
  v148 = 0;
  strcpy((char *)v154, "diumbolg");
  BYTE1(v154[2]) = 0;
  HIWORD(v154[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v130, "Could not construct");
    __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v154, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
  if (!v16)
  {
    v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Could not construct");
    __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *v5, v16);
  CFRelease(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE8(v142))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v142);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v18);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v17);
  }
  if (v156)
  {
    v152 = 1836411236;
    v153 = *(_QWORD *)&v154[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v152, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v142);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  memset(v155, 0, sizeof(v155));
  LODWORD(v155[0]) = 1986622068;
  v156 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)v155);
  AMCP::Null::make_properties<1953653102u>((CFDictionaryRef *)this + 6, a3, (uint64_t)&v145);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  strcpy((char *)v149, "ndihbolg");
  BYTE1(v149[2]) = 0;
  HIWORD(v149[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Could not construct");
    __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  v24 = CFStringCreateWithBytes(0, (const UInt8 *)v22, v23, 0x8000100u, 0);
  if (!v24)
  {
    v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v133, "Could not construct");
    __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v24);
  CFRelease(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v153))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v26);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v25);
  }
  if (v156)
  {
    v154[0] = 1751737454;
    *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  strcpy((char *)v149, "dklcbolg");
  BYTE1(v149[2]) = 0;
  HIWORD(v149[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v134, "Could not construct");
    __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v31 = __p.__r_.__value_.__l.__size_;
  v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
  if (!v32)
  {
    v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v135, "Could not construct");
    __cxa_throw(v135, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v32);
  CFRelease(v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v153))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v34);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v33);
  }
  if (v156)
  {
    v154[0] = 1668049764;
    *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  v38 = 0;
  v39 = 1;
  do
  {
    v40 = AMCP::Property_Traits<1819569763u>::k_valid_scopes[v38];
    v149[0] = 1819569763;
    v149[1] = v40;
    v149[2] = 0;
    v156 = 0;
    memset(v155, 0, sizeof(v155));
    if (!*v5)
    {
      v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v126, "Could not construct");
      __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v41 = v39;
    AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &__p;
    else
      v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v43 = __p.__r_.__value_.__l.__size_;
    v44 = CFStringCreateWithBytes(0, (const UInt8 *)v42, v43, 0x8000100u, 0);
    if (!v44)
    {
      v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v127, "Could not construct");
      __cxa_throw(v127, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v44);
    CFRelease(v44);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (BYTE4(v153))
    {
      AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
      AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v46);
      if (v151)
        v151(0, &__p, 0, 0);
    }
    else if (v148)
    {
      AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v45);
    }
    if (v156)
    {
      v154[0] = 1819569763;
      *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
      AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
    if (v156)
      v156(0, (uint64_t)v155, 0, 0);
    if (__p.__r_.__value_.__r.__words[0])
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
    v47 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v39 = 0;
    v38 = 1;
  }
  while ((v41 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v142, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v50 = v142;
  if (*((_QWORD *)&v142 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 16);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  v53 = __p.__r_.__value_.__r.__words[0];
  v54 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  *(_QWORD *)&v155[0] = &off_1E6980B78;
  *((_QWORD *)&v155[0] + 1) = this;
  *((_QWORD *)&v155[1] + 1) = v155;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v54, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v55 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v56 = 4;
    v55 = v155;
  }
  else
  {
    if (!*((_QWORD *)&v155[1] + 1))
      goto LABEL_156;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_156:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v53);
  v57 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  *(_QWORD *)&v155[0] = &off_1E6980BF8;
  *(_OWORD *)((char *)v155 + 8) = v50;
  *((_QWORD *)&v155[1] + 1) = v155;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v57, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v58 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v59 = 4;
    v58 = v155;
    goto LABEL_162;
  }
  if (*((_QWORD *)&v155[1] + 1))
  {
    v59 = 5;
LABEL_162:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(v53);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v53 + 40), &__p);
  v60 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v61 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  strcpy((char *)v149, "dsrnbolg");
  BYTE1(v149[2]) = 0;
  HIWORD(v149[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v136, "Could not construct");
    __cxa_throw(v136, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &__p;
  else
    v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v67 = __p.__r_.__value_.__l.__size_;
  v68 = CFStringCreateWithBytes(0, (const UInt8 *)v66, v67, 0x8000100u, 0);
  if (!v68)
  {
    v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v137, "Could not construct");
    __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v68);
  CFRelease(v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v153))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v70);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v69);
  }
  if (v156)
  {
    v154[0] = 1852994404;
    *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v71 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v72 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  strcpy((char *)v149, "fcrnbolg");
  BYTE1(v149[2]) = 0;
  HIWORD(v149[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v138, "Could not construct");
    __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &__p;
  else
    v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v75 = __p.__r_.__value_.__l.__size_;
  v76 = CFStringCreateWithBytes(0, (const UInt8 *)v74, v75, 0x8000100u, 0);
  if (!v76)
  {
    v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v139, "Could not construct");
    __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v76);
  CFRelease(v76);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v153))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v78);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v77);
  }
  if (v156)
  {
    v154[0] = 1852990310;
    *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v79 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  v142 = 0u;
  v143 = 0u;
  v144 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v145, (uint64_t)&v142);
  strcpy((char *)v149, "enotbolg");
  BYTE1(v149[2]) = 0;
  HIWORD(v149[2]) = 0;
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (!*v5)
  {
    v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v140, "Could not construct");
    __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v149, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = &__p;
  else
    v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v83 = __p.__r_.__value_.__l.__size_;
  v84 = CFStringCreateWithBytes(0, (const UInt8 *)v82, v83, 0x8000100u, 0);
  if (!v84)
  {
    v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v141, "Could not construct");
    __cxa_throw(v141, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v152, *v5, v84);
  CFRelease(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BYTE4(v153))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v152);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v155, v86);
    if (v151)
      v151(0, &__p, 0, 0);
  }
  else if (v148)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v155, (uint64_t)&v145, v85);
  }
  if (v156)
  {
    v154[0] = 1953459813;
    *(_QWORD *)&v154[1] = *(_QWORD *)&v149[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v154, (uint64_t)v155);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v152);
  if (v156)
    v156(0, (uint64_t)v155, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v87 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v88 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (v144)
    v144(0, (uint64_t)&v142, 0, 0);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v142, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v90 = v142;
  if (*((_QWORD *)&v142 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 16);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  v93 = __p.__r_.__value_.__r.__words[0];
  v94 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(_QWORD *)&v155[0] = &off_1E6980C78;
  *((_QWORD *)&v155[0] + 1) = this;
  *((_QWORD *)&v155[1] + 1) = v155;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v93, v94, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v95 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v96 = 4;
    v95 = v155;
  }
  else
  {
    if (!*((_QWORD *)&v155[1] + 1))
      goto LABEL_270;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_270:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(v93);
  v97 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(_QWORD *)&v155[0] = &off_1E6980D78;
  *(_OWORD *)((char *)v155 + 8) = v90;
  *((_QWORD *)&v155[1] + 1) = v155;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v93, v97, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v98 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v99 = 4;
    v98 = v155;
    goto LABEL_276;
  }
  if (*((_QWORD *)&v155[1] + 1))
  {
    v99 = 5;
LABEL_276:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(v93);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v93 + 40), &__p);
  v100 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v101 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  v106 = __p.__r_.__value_.__r.__words[0];
  v107 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  *(_QWORD *)&v155[0] = &off_1E6980DF8;
  *((_QWORD *)&v155[0] + 1) = this;
  *((_QWORD *)&v155[1] + 1) = v155;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v106, v107, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v108 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v109 = 4;
    v108 = v155;
    goto LABEL_293;
  }
  if (*((_QWORD *)&v155[1] + 1))
  {
    v109 = 5;
LABEL_293:
    (*(void (**)(void))(*v108 + 8 * v109))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(v106);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v106 + 40), &__p);
  v110 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v111 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&__p, 0, 1.58366007e190);
  v113 = __p.__r_.__value_.__r.__words[0];
  v114 = *((_DWORD *)this + 22);
  v116 = *((_QWORD *)this + 1);
  v115 = *((_QWORD *)this + 2);
  if (v115)
  {
    v117 = (unint64_t *)(v115 + 8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  v119 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  *((_QWORD *)&v155[1] + 1) = 0;
  v120 = operator new(0x20uLL);
  *(_QWORD *)v120 = &off_1E6980EF8;
  v120[2] = v114;
  *((_QWORD *)v120 + 2) = v116;
  *((_QWORD *)v120 + 3) = v115;
  *((_QWORD *)&v155[1] + 1) = v120;
  v145 = 0u;
  v146 = 0u;
  v147 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)v155);
  v147 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v113, v119, (AMCP *)&v145);
  if (v147)
    v147(0, (uint64_t)&v145, 0, 0);
  v121 = (_QWORD *)*((_QWORD *)&v155[1] + 1);
  if (*((_OWORD **)&v155[1] + 1) == v155)
  {
    v122 = 4;
    v121 = v155;
  }
  else
  {
    if (!*((_QWORD *)&v155[1] + 1))
      goto LABEL_309;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_309:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v113 + 40), &__p);
  v123 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v124 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
}

void sub_1B5A59810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Clock::do_set_property(AMCP::Null::Clock *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void (*v21)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD);
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v29[2];
  __int128 v30;
  uint64_t v31;
  int v32;
  _OWORD v33[2];
  void (*v34)(uint64_t, _OWORD *, char *, _QWORD);
  _QWORD v35[2];
  int v36;
  int v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = *((_QWORD *)this + 7);
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 88);
        goto LABEL_7;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = (unsigned int *)((char *)this + 40);
LABEL_7:
  if (*(_DWORD *)a3 != 1853059700)
  {
    v25 = AMCP::Null::Object::do_set_property(this, a2, a3, a4);
    if (!v9)
      return v25;
    goto LABEL_28;
  }
  v12 = *v11;
  v13 = operator new(0x20uLL);
  v13[1] = 0;
  v13[2] = 0;
  *((_BYTE *)v13 + 24) = 0;
  *v13 = &off_1E69A0170;
  v35[0] = v13 + 3;
  v35[1] = v13;
  v36 = 0;
  v37 = 0;
  v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v15 = *((_DWORD *)this + 22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v29[0] = *((std::__shared_weak_count **)this + 3);
  v29[1] = v16;
  if (v16)
  {
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)&v30 = v10;
  *((_QWORD *)&v30 + 1) = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v31 = *(_QWORD *)a3;
  v32 = *((_DWORD *)a3 + 2);
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v21 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD))*((_QWORD *)a4 + 4);
  if (v21)
    v21(1, a4, v33, 0);
  v39 = 0;
  v22 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v22 + 8) = *(_OWORD *)v29;
  *(_QWORD *)v22 = &off_1E6980FC8;
  *(_OWORD *)(v22 + 24) = v30;
  *((_QWORD *)v22 + 5) = v31;
  *((_DWORD *)v22 + 12) = v32;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *((_QWORD *)v22 + 11) = 0;
  if (v34)
    v34(2, v33, v22 + 56, 0);
  v39 = v22;
  AMCP::Core::Conductor::enqueue_config_change(v14, v12, v15, 1, (uint64_t)v38);
  v23 = v39;
  if (v39 == v38)
  {
    v24 = 4;
    v23 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_25;
    v24 = 5;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
LABEL_25:
  if (v34)
    v34(0, v33, 0, 0);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v35);
  v25 = 257;
  if (v9)
  {
LABEL_28:
    v26 = (unint64_t *)&v9->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v25;
}

void sub_1B5A59C94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6980FC8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6980FC8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = &off_1E6980FC8;
  std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A59DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6980FC8;
  return std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  const void *v8;
  std::string *p_p;
  CFIndex size;
  CFStringRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::runtime_error *exception;
  uint64_t v15;
  int v16;
  std::string __p;
  const void *v18;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (CFDictionaryRef *)a1[1];
      if (v5)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::make_description_from_thing((AMCP *)&v18, (const AMCP::Thing *)(a1 + 7));
        v8 = v18;
        if (v18)
        {
          v7.i64[0] = 0x676C6F626E737274;
          v15 = 0x676C6F626E737274;
          v16 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
          if (!v11)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v11, v8);
          CFRelease(v11);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0])
            CFRelease(__p.__r_.__value_.__l.__data_);
          CFRelease(v8);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A59FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  const void *v17;
  const void *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  CFRelease(v18);
  if (v17)
    CFRelease(v17);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 80);
  if (v2)
    v2(0, a1 + 48, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v10)
    v10(1, a2 + 48);
  return a1;
}

void sub_1B5A5A1A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980EF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6980EF8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = operator new(0x20uLL);
  *(_QWORD *)result = &off_1E6980EF8;
  result[2] = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = *(_QWORD *)(a1 + 16);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E6980EF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  AMCP::Core::Core *v4;
  double simple_required;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  AMCP::Log::Scope_Registry *v11;
  char v12;
  AMCP::Log::Scope_Registry *v13;
  BOOL v14;
  AMCP::Log::Scope_Registry *v15;
  _BOOL4 v16;
  int v17;
  _QWORD *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const AMCP::Utility::Dispatch_Queue *v28;
  _OWORD *v29;
  AMCP::Log::Scope_Registry *v30;
  const void *v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  double *v56;
  _OWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  AMCP::Log::Scope_Registry *v93;
  _QWORD *v94;
  const CA::StreamDescription *v95;
  double v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  AMCP::DAL::Ring_Buffer_Base *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  int64x2_t v138;
  void *v139;
  char *v140;
  _OWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *p_shared_weak_owners;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  std::__shared_weak_count *v161;
  NSObject *v162;
  unint64_t *v163;
  unint64_t v164;
  _opaque_pthread_t *v165;
  mach_port_t v166;
  std::__shared_weak_count *v167;
  NSObject *v168;
  unint64_t *v169;
  unint64_t v170;
  _opaque_pthread_t *v171;
  mach_port_t v172;
  NSObject *v173;
  _opaque_pthread_t *v174;
  mach_port_t v175;
  NSObject *v176;
  _opaque_pthread_t *v177;
  mach_port_t v178;
  NSObject *v179;
  _opaque_pthread_t *v180;
  mach_port_t v181;
  std::__shared_weak_count *v182;
  NSObject *v183;
  unint64_t *v184;
  unint64_t v185;
  _opaque_pthread_t *v186;
  mach_port_t v187;
  std::__shared_weak_count *v188;
  NSObject *v189;
  unint64_t *v190;
  unint64_t v191;
  _opaque_pthread_t *v192;
  mach_port_t v193;
  std::__shared_weak_count *v194;
  NSObject *v195;
  unint64_t *v196;
  unint64_t v197;
  _opaque_pthread_t *v198;
  mach_port_t v199;
  std::logic_error *exception;
  uint64_t v201;
  int v202;
  uint64_t v203;
  std::logic_error v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t *v211;
  _OWORD *v212;
  CFTypeRef v213;
  _QWORD *v214;
  uint64_t v215;
  int v216;
  char *v217;
  unsigned int v218;
  char *v219;
  void *v220[2];
  CFTypeRef v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  CFTypeRef cf;
  AMCP::Core::Core *v227;
  std::__shared_weak_count *v228;
  CFTypeRef v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  _BYTE v236[24];
  uint64_t v237;
  std::string v238;
  std::logic_error v239;
  void *__p;
  __int128 v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  char v246;
  _BYTE v247[18];
  __int16 v248;
  int v249;
  __int16 v250;
  const char *v251;
  __int16 v252;
  _BYTE *v253;
  __int16 v254;
  int v255;
  __int16 v256;
  int v257;
  _QWORD v258[3];
  AMCP::Log::Scope_Registry *v259;
  _BYTE buf[48];
  int v261;
  uint64_t v262;

  v262 = *MEMORY[0x1E0C80C00];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v227, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), *(_DWORD *)(a1 + 8));
  v4 = v227;
  if (!v227)
  {
    v33 = 0uLL;
    goto LABEL_201;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, v227);
  simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v4);
  v6 = AMCP::Core::Core::get_simple_required_property<1668049764u>(v4);
  *(_DWORD *)buf = 0;
  strcpy(v247, "tfastpni");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247, (unsigned int *)buf);
  *(_DWORD *)buf = 0;
  strcpy(v247, "tfasptuo");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v8 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247, (unsigned int *)buf);
  *(_DWORD *)buf = 0;
  strcpy(v247, "cntltpni");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v9 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247, (unsigned int *)buf);
  *(_DWORD *)buf = 0;
  strcpy(v247, "cntlptuo");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v10 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247, (unsigned int *)buf);
  AMCP::Null::make_stream_info_list((uint64_t)&v224, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), &v227, 0x696E7074u);
  AMCP::Null::make_stream_info_list((uint64_t)&v222, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), &v227, 0x6F757470u);
  *(_QWORD *)buf = 0;
  strcpy(v247, "lflnbolg");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v221, v4, (AMCP::Address *)v247, (const void **)buf);
  strcpy(v247, "dsrnbolg");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v11 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247);
  if ((unsigned __int16)v11 <= 0xFFu)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v247, "com.apple.coreaudio", "AMCP");
    v173 = **(NSObject ***)v247;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v247);
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
    {
      v174 = pthread_self();
      v175 = pthread_mach_thread_np(v174);
      buf[23] = 4;
      strcpy(buf, "nrsd");
      *(_DWORD *)v247 = 67110658;
      *(_DWORD *)&v247[4] = v175;
      *(_WORD *)&v247[8] = 2080;
      *(_QWORD *)&v247[10] = "Core.h";
      v248 = 1024;
      v249 = 391;
      v250 = 2080;
      v251 = "optional_value.operator BOOL() == true";
      v252 = 2080;
      v253 = buf;
      v254 = 1024;
      v255 = 1735159650;
      v256 = 1024;
      v257 = 0;
      _os_log_error_impl(&dword_1B57BA000, v173, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v247, 0x38u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    abort();
  }
  v12 = (char)v11;
  strcpy(v247, "fcrnbolg");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v13 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247);
  if ((unsigned __int16)v13 <= 0xFFu)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v247, "com.apple.coreaudio", "AMCP");
    v176 = **(NSObject ***)v247;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v247);
    if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
    {
      v177 = pthread_self();
      v178 = pthread_mach_thread_np(v177);
      buf[23] = 4;
      strcpy(buf, "nrcf");
      *(_DWORD *)v247 = 67110658;
      *(_DWORD *)&v247[4] = v178;
      *(_WORD *)&v247[8] = 2080;
      *(_QWORD *)&v247[10] = "Core.h";
      v248 = 1024;
      v249 = 391;
      v250 = 2080;
      v251 = "optional_value.operator BOOL() == true";
      v252 = 2080;
      v253 = buf;
      v254 = 1024;
      v255 = 1735159650;
      v256 = 1024;
      v257 = 0;
      _os_log_error_impl(&dword_1B57BA000, v176, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v247, 0x38u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    abort();
  }
  v14 = v13 != 0;
  strcpy(v247, "enotbolg");
  v247[9] = 0;
  *(_WORD *)&v247[10] = 0;
  v15 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v247);
  if ((unsigned __int16)v15 <= 0xFFu)
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v247, "com.apple.coreaudio", "AMCP");
    v179 = **(NSObject ***)v247;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v247);
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      v180 = pthread_self();
      v181 = pthread_mach_thread_np(v180);
      buf[23] = 4;
      strcpy(buf, "tone");
      *(_DWORD *)v247 = 67110658;
      *(_DWORD *)&v247[4] = v181;
      *(_WORD *)&v247[8] = 2080;
      *(_QWORD *)&v247[10] = "Core.h";
      v248 = 1024;
      v249 = 391;
      v250 = 2080;
      v251 = "optional_value.operator BOOL() == true";
      v252 = 2080;
      v253 = buf;
      v254 = 1024;
      v255 = 1735159650;
      v256 = 1024;
      v257 = 0;
      _os_log_error_impl(&dword_1B57BA000, v179, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v247, 0x38u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    abort();
  }
  v218 = v8;
  v212 = a2;
  v16 = v15 != 0;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v247, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 672));
  v17 = 2 * v16;
  if (v12)
    v17 = 1;
  v216 = v17;
  v18 = operator new(0x308uLL);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_1E6980F68;
  v19 = cf;
  if (cf)
    CFRetain(cf);
  v229 = v19;
  v20 = v221;
  if (v221)
    CFRetain(v221);
  v211 = v18 + 1;
  v213 = v20;
  v18[4] = 0;
  v18[5] = 0;
  v18[3] = &off_1E69932C8;
  if (v19)
    CFRetain(v19);
  v21 = v6;
  v205 = v14;
  v214 = v18;
  if (v12)
    v22 = 0;
  else
    v22 = v9;
  if (v12)
    v23 = 0;
  else
    v23 = v10;
  v232 = 0uLL;
  v233 = 0;
  v24 = v224;
  v207 = v225 - (_QWORD)v224;
  v25 = 0x6DB6DB6DB6DB6DB7 * ((v225 - (uint64_t)v224) >> 3);
  v215 = v225;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v232, v224, v225, v25);
  v230 = 0uLL;
  v231 = 0;
  v26 = v223;
  v206 = v223 - (_QWORD)v222;
  v27 = 0x6DB6DB6DB6DB6DB7 * ((v223 - (uint64_t)v222) >> 3);
  v208 = (char *)v222;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v230, v222, v223, v27);
  v214[6] = v19;
  *((double *)v214 + 7) = simple_required;
  *((_DWORD *)v214 + 16) = simple_required;
  *((_DWORD *)v214 + 17) = v21;
  *((_BYTE *)v214 + 72) = 1;
  *((_DWORD *)v214 + 19) = v7;
  *((_DWORD *)v214 + 20) = v218;
  *((_DWORD *)v214 + 21) = v22;
  *((_DWORD *)v214 + 22) = v23;
  *((_OWORD *)v214 + 6) = v232;
  v214[14] = v233;
  v232 = 0uLL;
  v233 = 0;
  *(_OWORD *)(v214 + 15) = v230;
  v214[17] = v231;
  v230 = 0uLL;
  v231 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(v214 + 18), (const __CFString **)&v229, v25, v27, 0, (dispatch_queue_t *)v247, v28);
  v258[0] = &off_1E6993480;
  v258[1] = v214 + 3;
  v210 = (uint64_t)(v214 + 3);
  v259 = (AMCP::Log::Scope_Registry *)v258;
  AMCP::IO_Clock::IO_Clock((uint64_t)(v214 + 73), (uint64_t)v258, *((_DWORD *)v214 + 16), simple_required);
  v29 = (_OWORD *)v215;
  v30 = v259;
  v31 = v213;
  if (v259 == (AMCP::Log::Scope_Registry *)v258)
  {
    v32 = 4;
    v30 = (AMCP::Log::Scope_Registry *)v258;
    goto LABEL_24;
  }
  if (v259)
  {
    v32 = 5;
LABEL_24:
    v30 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v30 + 8 * v32))();
  }
  if (v213)
    v30 = (AMCP::Log::Scope_Registry *)CFRetain(v213);
  v214[93] = v213;
  *((_DWORD *)v214 + 188) = 0;
  v209 = v214 + 95;
  *(_OWORD *)(v214 + 95) = 0u;
  if (v216 != 1)
  {
    v34 = (std::__shared_weak_count *)v214;
    if (v216 == 2)
    {
      if ((_OWORD *)v215 == v24)
      {
        AMCP::Log::Scope_Registry::get(v30);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v182 = *(std::__shared_weak_count **)&buf[8];
        v183 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v184 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
        {
          v186 = pthread_self();
          v187 = pthread_mach_thread_np(v186);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v187;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Null_Engine.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 75;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "in_input_stream_info_list.size() >= 1";
          _os_log_error_impl(&dword_1B57BA000, v183, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s No input formats for input sine generator", buf, 0x22u);
        }
        abort();
      }
      v35 = v24[2];
      *(_OWORD *)buf = v24[1];
      *(_OWORD *)&buf[16] = v35;
      *(_QWORD *)&buf[32] = *((_QWORD *)v24 + 6);
      v36 = *(double *)buf;
      std::string::basic_string[abi:ne180100]<0>(&__p, "test timebase: ");
      AMCP::Graph::make_mock_timebase((std::__shared_weak_count **)&v238, 0xC7u, 1, (uint64_t)&__p, v36);
      if (SHIBYTE(v241) < 0)
        operator delete(__p);
      v37 = operator new();
      v38 = v37;
      v39 = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
      if (v238.__r_.__value_.__l.__size_)
      {
        v40 = (unint64_t *)(v238.__r_.__value_.__l.__size_ + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      *(_DWORD *)v37 = 0;
      *(_QWORD *)(v37 + 4) = 0x3F00000043DC0000;
      *(_DWORD *)(v37 + 12) = 0;
      *(_QWORD *)(v37 + 16) = 0x40A7700000000000;
      v42 = (_QWORD *)operator new();
      v43 = v42;
      *(_OWORD *)v236 = v39;
      if (*((_QWORD *)&v39 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v31 = v213;
      AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v42, (uint64_t)buf, v236, 4096.0);
      *(_QWORD *)(v38 + 24) = v43;
      v46 = *(std::__shared_weak_count **)&v236[8];
      if (*(_QWORD *)&v236[8])
      {
        v47 = (unint64_t *)(*(_QWORD *)&v236[8] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v38 + 32) = *(_OWORD *)buf;
      *(_OWORD *)(v38 + 48) = v49;
      *(_QWORD *)(v38 + 64) = *(_QWORD *)&buf[32];
      *(_QWORD *)&v234 = v38;
      if (*((_QWORD *)&v39 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
        }
      }
      v52 = v234;
      *(_QWORD *)&v234 = 0;
      std::unique_ptr<AMCP::Tone_Generator_Buffer>::reset[abi:ne180100](v214 + 96, v52);
      std::unique_ptr<AMCP::Tone_Generator_Buffer>::reset[abi:ne180100]((uint64_t *)&v234, 0);
      size = (std::__shared_weak_count *)v238.__r_.__value_.__l.__size_;
      if (v238.__r_.__value_.__l.__size_)
      {
        v54 = (unint64_t *)(v238.__r_.__value_.__l.__size_ + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    goto LABEL_175;
  }
  if ((_OWORD *)v215 == v24 || (char *)v26 == v208)
  {
    AMCP::Log::Scope_Registry::get(v30);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v161 = *(std::__shared_weak_count **)&buf[8];
    v162 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v163 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
    {
      v165 = pthread_self();
      v166 = pthread_mach_thread_np(v165);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v166;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Null_Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 57;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "in_input_stream_info_list.size() >= 1 and in_output_stream_info_list.size() >= 1";
      _os_log_error_impl(&dword_1B57BA000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  if (v207 != v206)
  {
    AMCP::Log::Scope_Registry::get(v30);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v188 = *(std::__shared_weak_count **)&buf[8];
    v189 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v190 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
    {
      v192 = pthread_self();
      v193 = pthread_mach_thread_np(v192);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v193;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Null_Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 58;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "in_input_stream_info_list.size() == in_output_stream_info_list.size()";
      _os_log_error_impl(&dword_1B57BA000, v189, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  v56 = (double *)(v208 + 48);
  v57 = v24;
  do
  {
    if (*((double *)v57 + 2) != *(v56 - 4)
      || *((_DWORD *)v57 + 6) != *((_DWORD *)v56 - 6)
      || *((_DWORD *)v57 + 7) != *((_DWORD *)v56 - 5)
      || *((_DWORD *)v57 + 8) != *((_DWORD *)v56 - 4)
      || *((_DWORD *)v57 + 9) != *((_DWORD *)v56 - 3)
      || *((_DWORD *)v57 + 10) != *((_DWORD *)v56 - 2)
      || *((_DWORD *)v57 + 11) != *((_DWORD *)v56 - 1)
      || *((_DWORD *)v57 + 12) != *(_DWORD *)v56)
    {
      AMCP::Log::Scope_Registry::get(v30);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v167 = *(std::__shared_weak_count **)&buf[8];
      v168 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v169 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        v171 = pthread_self();
        v172 = pthread_mach_thread_np(v171);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v172;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Null_Engine.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 62;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "std::equal(in_input_stream_info_list.begin(), in_input_stream_info_list.end(), in_output_s"
                              "tream_info_list.begin(), [](auto& a, auto& b) { return a.m_format == b.m_format; })";
        _os_log_error_impl(&dword_1B57BA000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Reflection is only supported if the input stream and output stream are the same format", buf, 0x22u);
      }
      abort();
    }
    v57 = (_OWORD *)((char *)v57 + 56);
    v56 += 7;
  }
  while (v57 != (_OWORD *)v215);
  v219 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  do
  {
    v61 = v58;
    v62 = v24[2];
    *(_OWORD *)buf = v24[1];
    *(_OWORD *)&buf[16] = v62;
    *(_QWORD *)&buf[32] = *((_QWORD *)v24 + 6);
    v63 = v60 - v219;
    v64 = (v60 - v219) / 40;
    v65 = &v219[40 * v64];
    if (v61 >= (unint64_t)v59)
    {
      v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v61 - (_QWORD)v219) >> 3) + 1;
      if (v69 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((v59 - v219) >> 3) > v69)
        v69 = 0x999999999999999ALL * ((v59 - v219) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v59 - v219) >> 3) >= 0x333333333333333)
        v70 = 0x666666666666666;
      else
        v70 = v69;
      if (v70)
      {
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v70);
      }
      else
      {
        v72 = 0;
        v71 = 0;
      }
      v78 = &v72[40 * v64];
      if (v64 == v71)
      {
        if (v63 < 40)
        {
          if ((unint64_t)(v63 + 39) < 0x4F)
            v81 = 1;
          else
            v81 = 2 * v64;
          v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v81);
          v78 = &v82[40 * (v81 >> 2)];
          v217 = &v82[40 * v83];
          if (v72)
            operator delete(v72);
        }
        else
        {
          v217 = &v72[40 * v71];
          v79 = 0xCCCCCCCCCCCCCCCDLL * ((40 * v64) >> 3);
          if (v79 >= -1)
            v80 = v79 + 1;
          else
            v80 = v79 + 2;
          v78 -= 40 * (v80 >> 1);
        }
      }
      else
      {
        v217 = &v72[40 * v71];
      }
      v84 = *(_OWORD *)buf;
      v85 = *(_OWORD *)&buf[16];
      *((_QWORD *)v78 + 4) = *(_QWORD *)&buf[32];
      *(_OWORD *)v78 = v84;
      *((_OWORD *)v78 + 1) = v85;
      v86 = v78;
      if (v60 != v219)
      {
        v87 = 40 * v64;
        v88 = v219 - 40;
        v89 = v78;
        do
        {
          v86 = v89 - 40;
          v90 = *(_OWORD *)&v88[v87];
          v91 = *(_OWORD *)&v88[v87 + 16];
          *((_QWORD *)v89 - 1) = *(_QWORD *)&v88[v87 + 32];
          *(_OWORD *)(v89 - 24) = v91;
          *(_OWORD *)(v89 - 40) = v90;
          v89 -= 40;
          v87 -= 40;
        }
        while (v87);
      }
      if ((char *)v61 != v65)
        memmove(v78 + 40, v65, v61 - (_QWORD)v65);
      v58 = (uint64_t)&v78[40 * ((uint64_t)(v61 - (_QWORD)v65) / 40) + 40];
      if (v219)
        operator delete(v219);
      v219 = v86;
      v65 = v78;
      v29 = (_OWORD *)v215;
      v59 = v217;
    }
    else if (v65 == (char *)v61)
    {
      v76 = v24[1];
      v77 = v24[2];
      *(_QWORD *)(v61 + 32) = *((_QWORD *)v24 + 6);
      *(_OWORD *)v61 = v76;
      *(_OWORD *)(v61 + 16) = v77;
      v58 = v61 + 40;
      v65 = (char *)v61;
    }
    else
    {
      v66 = v61 - 40;
      v58 = v61;
      while (v66 < v61)
      {
        v67 = *(_OWORD *)v66;
        v68 = *(_OWORD *)(v66 + 16);
        *(_QWORD *)(v58 + 32) = *(_QWORD *)(v66 + 32);
        *(_OWORD *)v58 = v67;
        *(_OWORD *)(v58 + 16) = v68;
        v66 += 40;
        v58 += 40;
      }
      if ((char *)v61 != v65 + 40)
      {
        v73 = v59;
        memmove(v65 + 40, v65, v61 - (_QWORD)(v65 + 40));
        v59 = v73;
      }
      v74 = *(_OWORD *)buf;
      v75 = *(_OWORD *)&buf[16];
      *((_QWORD *)v65 + 4) = *(_QWORD *)&buf[32];
      *(_OWORD *)v65 = v74;
      *((_OWORD *)v65 + 1) = v75;
    }
    v60 = v65 + 40;
    v24 = (_OWORD *)((char *)v24 + 56);
  }
  while (v24 != v29);
  v92 = operator new();
  *(_QWORD *)v92 = 0;
  *(_QWORD *)(v92 + 8) = 0;
  *(_QWORD *)(v92 + 16) = 0;
  *(_OWORD *)(v92 + 32) = 0u;
  *(_OWORD *)(v92 + 48) = 0u;
  *(_BYTE *)(v92 + 24) = v205;
  *(_QWORD *)(v92 + 64) = 0;
  v93 = (AMCP::Log::Scope_Registry *)std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>((_QWORD *)(v92 + 48), v219, v58, 0xCCCCCCCCCCCCCCCDLL * ((v58 - (uint64_t)v219) >> 3));
  if (v219 == (char *)v58)
  {
    AMCP::Log::Scope_Registry::get(v93);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v194 = *(std::__shared_weak_count **)&buf[8];
    v195 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v196 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
    {
      v198 = pthread_self();
      v199 = pthread_mach_thread_np(v198);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v199;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Null_Engine_Reflector.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 30;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (not stream_formats.empty())";
      _os_log_error_impl(&dword_1B57BA000, v195, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Null_Engine_Reflector must have 1 or more streams", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Null_Engine_Reflector must have 1 or more streams", (uint64_t)&v238);
    std::logic_error::logic_error(&v239, &v238);
    v201 = MEMORY[0x1E0DE5018];
    v239.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v239);
    v242 = 0;
    v243 = 0;
    v244 = 0;
    v245 = -1;
    __p = off_1E69A1208;
    *((_QWORD *)&v241 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&buf[32] = "AMCP::Null::Null_Engine_Reflector::Null_Engine_Reflector(const std::vector<CA::StreamDescription> &, BOOL)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Engine_Reflector.cpp";
    v261 = 30;
    std::vector<void *>::vector(&v234);
    v202 = backtrace((void **)v234, (*((_QWORD *)&v234 + 1) - (_QWORD)v234) >> 3);
    std::vector<void *>::resize((char **)&v234, v202);
    *(_OWORD *)&v236[8] = v234;
    *(_QWORD *)v236 = off_1E69A20A0;
    v237 = v235;
    v234 = 0uLL;
    v235 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v236);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v201 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v203 = *(_QWORD *)&buf[24];
    exception[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v203)
      (*(void (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203);
    v204 = *(std::logic_error *)&buf[32];
    LODWORD(exception[3].__vftable) = v261;
    exception[2] = v204;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v94 = *(_QWORD **)v92;
  v95 = (const CA::StreamDescription *)v219;
  do
  {
    v96 = *(double *)v95;
    std::string::basic_string[abi:ne180100]<0>(&__p, "test timebase: ");
    AMCP::Graph::make_mock_timebase((std::__shared_weak_count **)v236, 0x3E7u, 1, (uint64_t)&__p, v96);
    if (SHIBYTE(v241) < 0)
      operator delete(__p);
    v97 = *(_OWORD *)v236;
    if (*(_QWORD *)&v236[8])
    {
      v98 = (unint64_t *)(*(_QWORD *)&v236[8] + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    *(_DWORD *)buf = 2;
    *(_QWORD *)&buf[8] = 0x40B0000000000000;
    *(_QWORD *)&buf[16] = 0;
    *(_OWORD *)&buf[24] = v97;
    v100 = operator new(0x80uLL);
    v100[2] = 0;
    *v100 = &off_1E6970438;
    v100[1] = 0;
    v101 = AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base((AMCP::DAL::Ring_Buffer_Base *)(v100 + 3), v95, (const AMCP::DAL::DAL_Time_Delta *)buf);
    v100[3] = &off_1E6993510;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
    v238.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
    v102 = *(std::__shared_weak_count **)&buf[32];
    if (*(_QWORD *)&buf[32])
    {
      v103 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = *(std::__shared_weak_count **)&v236[8];
    if (*(_QWORD *)&v236[8])
    {
      v106 = (unint64_t *)(*(_QWORD *)&v236[8] + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v109 = *(_QWORD **)v92;
    v108 = *(_QWORD *)(v92 + 8);
    v110 = (uint64_t)v94 - *(_QWORD *)v92;
    v111 = v110 >> 4;
    v112 = *(_QWORD *)v92 + (v110 & 0xFFFFFFFFFFFFFFF0);
    v113 = *(_QWORD *)(v92 + 16);
    if (v108 >= v113)
    {
      v122 = ((uint64_t)(v108 - (_QWORD)v109) >> 4) + 1;
      if (v122 >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v123 = v113 - (_QWORD)v109;
      if (v123 >> 3 > v122)
        v122 = v123 >> 3;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0)
        v124 = 0xFFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      v243 = v92 + 16;
      if (v124)
        v124 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v124);
      else
        v125 = 0;
      v127 = (_OWORD *)(v124 + 16 * v111);
      __p = (void *)v124;
      *(_QWORD *)&v241 = v127;
      *((_QWORD *)&v241 + 1) = v127;
      v242 = (char *)(v124 + 16 * v125);
      if (v111 == v125)
      {
        if (v110 < 1)
        {
          if (v94 == v109)
            v129 = 1;
          else
            v129 = v110 >> 3;
          *(_QWORD *)&buf[32] = v243;
          v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v129);
          v132 = v241;
          v133 = *((_QWORD *)&v241 + 1) - v241;
          if (*((_QWORD *)&v241 + 1) == (_QWORD)v241)
          {
            v138 = vdupq_n_s64(v241);
            v135 = (unint64_t)&v130[16 * (v129 >> 2)];
          }
          else
          {
            v134 = v133 >> 4;
            v135 = (unint64_t)&v130[16 * (v129 >> 2) + (v133 & 0xFFFFFFFFFFFFFFF0)];
            v136 = 16 * v134;
            v137 = &v130[16 * (v129 >> 2)];
            do
            {
              *(_OWORD *)v137 = *(_OWORD *)v132;
              v137 += 16;
              *(_QWORD *)v132 = 0;
              *(_QWORD *)(v132 + 8) = 0;
              v132 += 16;
              v136 -= 16;
            }
            while (v136);
            v138 = (int64x2_t)v241;
          }
          v139 = __p;
          v140 = v242;
          __p = v130;
          *(_QWORD *)&v241 = &v130[16 * (v129 >> 2)];
          *(int64x2_t *)&buf[8] = v138;
          *((_QWORD *)&v241 + 1) = v135;
          v242 = &v130[16 * v131];
          *(_QWORD *)buf = v139;
          *(_QWORD *)&buf[24] = v140;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
          v127 = (_OWORD *)*((_QWORD *)&v241 + 1);
        }
        else
        {
          v128 = v111 + 2;
          if (v111 >= -1)
            v128 = v111 + 1;
          v127 -= v128 >> 1;
          *(_QWORD *)&v241 = v127;
          *((_QWORD *)&v241 + 1) = v127;
        }
      }
      *v127 = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = 0uLL;
      v126 = v241;
      v141 = (_OWORD *)(*((_QWORD *)&v241 + 1) + 16);
      *((_QWORD *)&v241 + 1) += 16;
      v142 = *(_QWORD **)v92;
      if (*(_QWORD *)v92 == v112)
      {
        v144 = v241;
      }
      else
      {
        v143 = (_QWORD *)v112;
        v144 = v241;
        do
        {
          v145 = *((_OWORD *)v143 - 1);
          v143 -= 2;
          *(_OWORD *)(v144 - 16) = v145;
          v144 -= 16;
          *v143 = 0;
          v143[1] = 0;
        }
        while (v143 != v142);
        v141 = (_OWORD *)*((_QWORD *)&v241 + 1);
      }
      *(_QWORD *)&v241 = v144;
      v146 = *(_QWORD *)(v92 + 8);
      if (v146 != v112)
      {
        do
        {
          *v141++ = *(_OWORD *)v112;
          *(_QWORD *)v112 = 0;
          *(_QWORD *)(v112 + 8) = 0;
          v112 += 16;
        }
        while (v112 != v146);
        v144 = v241;
        v112 = *(_QWORD *)(v92 + 8);
      }
      v147 = *(_QWORD **)v92;
      *(_QWORD *)v92 = v144;
      *(_QWORD *)(v92 + 8) = v141;
      v148 = *(char **)(v92 + 16);
      *(_QWORD *)(v92 + 16) = v242;
      *((_QWORD *)&v241 + 1) = v112;
      v242 = v148;
      __p = v147;
      *(_QWORD *)&v241 = v147;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&__p);
      goto LABEL_169;
    }
    if (v112 == v108)
    {
      *(_OWORD *)v112 = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = 0uLL;
      *(_QWORD *)(v92 + 8) = v112 + 16;
      v126 = v112;
LABEL_169:
      v94 = (_QWORD *)(v126 + 16);
      goto LABEL_170;
    }
    v114 = v108 - 16;
    v115 = *(_OWORD **)(v92 + 8);
    v116 = v108 - 16;
    if (v108 >= 0x10)
    {
      do
      {
        *v115++ = *(_OWORD *)v116;
        *(_QWORD *)v116 = 0;
        *(_QWORD *)(v116 + 8) = 0;
        v116 += 16;
      }
      while (v116 < v108);
    }
    *(_QWORD *)(v92 + 8) = v115;
    if (v108 != v112 + 16)
    {
      v117 = 16 * ((uint64_t)(v108 - (v112 + 16)) >> 4);
      v118 = (uint64_t)&v109[2 * v111 - 2];
      do
      {
        v114 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v114, (__int128 *)(v118 + v117)) - 16;
        v117 -= 16;
      }
      while (v117);
    }
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v112, (__int128 *)&v238);
    v119 = (std::__shared_weak_count *)v238.__r_.__value_.__l.__size_;
    v94 = (_QWORD *)(v112 + 16);
    if (v238.__r_.__value_.__l.__size_)
    {
      v120 = (unint64_t *)(v238.__r_.__value_.__l.__size_ + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
LABEL_170:
    v95 = (const CA::StreamDescription *)((char *)v95 + 40);
  }
  while (v95 != (const CA::StreamDescription *)v58);
  v149 = *v209;
  *v209 = v92;
  if (v149)
    std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](v149);
  v31 = v213;
  v34 = (std::__shared_weak_count *)v214;
  if (v219)
    operator delete(v219);
LABEL_175:
  if (v31)
    CFRelease(v31);
  if (v229)
    CFRelease(v229);
  shared_weak_owners = (std::__shared_weak_count *)v34[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      v154 = __ldxr(v211);
    while (__stxr(v154 + 1, v211));
    p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v156 = __ldxr(p_shared_weak_owners);
    while (__stxr(v156 + 1, p_shared_weak_owners));
    v34[1].__shared_owners_ = v210;
    v34[1].__shared_weak_owners_ = (uint64_t)v34;
    goto LABEL_189;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      v151 = __ldxr(v211);
    while (__stxr(v151 + 1, v211));
    v152 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    v34[1].__shared_owners_ = v210;
    v34[1].__shared_weak_owners_ = (uint64_t)v34;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    do
LABEL_189:
      v157 = __ldaxr(v211);
    while (__stlxr(v157 - 1, v211));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v247);
  if (v221)
    CFRelease(v221);
  if (v222)
    operator delete(v222);
  if (v224)
    operator delete(v224);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)&v33 = v214 + 3;
  *((_QWORD *)&v33 + 1) = v34;
  a2 = v212;
LABEL_201:
  v158 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v160 = __ldaxr(p_shared_owners);
    while (__stlxr(v160 - 1, p_shared_owners));
    if (!v160)
    {
      *(_OWORD *)v220 = v33;
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
      v33 = *(_OWORD *)v220;
    }
  }
  *a2 = v33;
}

void sub_1B5A5BBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, AMCP::IO_Clock *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, std::__shared_weak_count *a20,void **a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,CFTypeRef a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,CFTypeRef a33,uint64_t a34,std::__shared_weak_count *a35,CFTypeRef a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  _QWORD *v67;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  void *shared_owners;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *shared_weak_owners;
  void *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;

  v69 = *a21;
  if (*a21)
  {
    v67[7] = v69;
    operator delete(v69);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a22);
  a45 = v67;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  MEMORY[0x1B5E50688](v67, 0x1020C40E3AF47BELL);
  if (__p)
    operator delete(__p);
  std::unique_ptr<AMCP::Tone_Generator_Buffer>::reset[abi:ne180100](a14, 0);
  v70 = *a15;
  *a15 = 0;
  if (v70)
    std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](v70);
  v71 = a20[31].__vftable;
  if (v71)
    CFRelease(v71);
  AMCP::IO_Clock::~IO_Clock(a10);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a20[11]);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20[10].__shared_owners_);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20[9].__shared_weak_owners_);
  shared_owners = (void *)a20[8].__shared_owners_;
  if (shared_owners)
    operator delete(shared_owners);
  v73 = a20[7].__vftable;
  if (v73)
    operator delete(v73);
  v74 = a20[5].__vftable;
  if (v74)
  {
    a20[5].__shared_owners_ = (uint64_t)v74;
    operator delete(v74);
  }
  v75 = a20[4].__vftable;
  if (v75)
  {
    a20[4].__shared_owners_ = (uint64_t)v75;
    operator delete(v75);
  }
  v76 = a20[2].__vftable;
  if (v76)
    CFRelease(v76);
  shared_weak_owners = (std::__shared_weak_count *)a20[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  if (cf)
    CFRelease(cf);
  if (a36)
    CFRelease(a36);
  std::__shared_weak_count::~__shared_weak_count(a20);
  operator delete(v78);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a67);
  if (a26)
    CFRelease(a26);
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  if (a33)
    CFRelease(a33);
  if (a35)
  {
    p_shared_owners = (unint64_t *)&a35->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))a35->__on_zero_shared)(a35);
      std::__shared_weak_count::__release_weak(a35);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

void AMCP::Null::make_stream_info_list(uint64_t a1, std::__shared_mutex_base *a2, AMCP::Core::Core **a3, unsigned int a4)
{
  AMCP::Core::Core *v8;
  unsigned int *v9;
  unsigned int *v10;
  AMCP::Core::Core *v11;
  int simple_required;
  unint64_t v13;
  _DWORD *v14;
  __int128 v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  AMCP::Core::Core *v36;
  std::__shared_weak_count *v37;
  unsigned int *v38;
  unsigned int *v39;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *a3;
  LODWORD(v33) = 1937009955;
  *(_QWORD *)((char *)&v33 + 4) = a4;
  if (AMCP::Core::Core::has_property(v8, (const AMCP::Address *)&v33))
  {
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v38, *a3, a4);
    v9 = v38;
    v10 = v39;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, v39 - v38);
    if (v9 != v10)
    {
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v36, a2, *v9);
        v11 = v36;
        if (v36)
        {
          simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v36);
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v33, v11);
          v14 = *(_DWORD **)(a1 + 8);
          v13 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v14 >= v13)
          {
            v17 = *(_DWORD **)a1;
            v18 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v14 - *(_QWORD *)a1) >> 3);
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) > 0x492492492492492)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)v17) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x249249249249249)
              v21 = 0x492492492492492;
            else
              v21 = v19;
            if (v21)
              v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v21);
            else
              v22 = 0;
            v23 = v21 + 56 * v18;
            *(_DWORD *)(v23 + 4) = 0;
            *(_DWORD *)(v23 + 8) = 0;
            *(_DWORD *)v23 = simple_required;
            v24 = v34;
            *(_OWORD *)(v23 + 16) = v33;
            *(_OWORD *)(v23 + 32) = v24;
            *(_QWORD *)(v23 + 48) = v35;
            if (v14 == v17)
            {
              v29 = v21 + 56 * v18;
            }
            else
            {
              v25 = v21 + 56 * v18;
              do
              {
                v26 = *(_OWORD *)(v14 - 14);
                v27 = *(_OWORD *)(v14 - 10);
                v28 = *(_OWORD *)(v14 - 6);
                v29 = v25 - 56;
                *(_QWORD *)(v25 - 8) = *((_QWORD *)v14 - 1);
                *(_OWORD *)(v25 - 24) = v28;
                *(_OWORD *)(v25 - 40) = v27;
                *(_OWORD *)(v25 - 56) = v26;
                v14 -= 14;
                v25 -= 56;
              }
              while (v14 != v17);
            }
            v16 = (_DWORD *)(v23 + 56);
            *(_QWORD *)a1 = v29;
            *(_QWORD *)(a1 + 8) = v23 + 56;
            *(_QWORD *)(a1 + 16) = v21 + 56 * v22;
            if (v17)
              operator delete(v17);
          }
          else
          {
            v14[1] = 0;
            v14[2] = 0;
            *v14 = simple_required;
            v15 = v34;
            *((_OWORD *)v14 + 1) = v33;
            *((_OWORD *)v14 + 2) = v15;
            *((_QWORD *)v14 + 6) = v35;
            v16 = v14 + 14;
          }
          *(_QWORD *)(a1 + 8) = v16;
        }
        v30 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        ++v9;
      }
      while (v9 != v10);
      v10 = v38;
    }
    if (v10)
      operator delete(v10);
  }
}

void sub_1B5A5C418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  void *v19;

  if (v17)
    operator delete(v17);
  v19 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Null::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6980F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6980F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6980DF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6980DF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_mutex_base *v4;
  int16x8_t v5;
  void **v6;
  uint64_t v7;
  double **v8;
  double **v9;
  double *v10;
  double *v11;
  void **v12;
  CFIndex v13;
  CFStringRef v14;
  int16x8_t v15;
  void **v16;
  CFIndex v17;
  CFStringRef v18;
  double v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  std::runtime_error *v27;
  CFTypeRef cf;
  uint64_t v29;
  int v30;
  void **v31;
  char v32;
  AMCP::Core::Core *v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  __int128 v36;
  void (*v37)(_QWORD, void **, _QWORD, _QWORD);
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_mutex_base **)(*(_QWORD *)(v3 + 8) + 16);
  __p[0] = &off_1E6980E68;
  __p[1] = (void *)v3;
  *((_QWORD *)&v36 + 1) = __p;
  AMCP::Core::Broker::fetch_first_core_if (&v33, v4, (uint64_t)__p);
  v6 = (void **)*((_QWORD *)&v36 + 1);
  if (*((void ***)&v36 + 1) == __p)
  {
    v7 = 4;
    v6 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_6;
    v7 = 5;
  }
  (*((void (**)(void))*v6 + v7))();
LABEL_6:
  if (v33)
  {
    AMCP::Core::Core::get_simple_required_property<1718449187u>(__p, v33);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = (double **)__p[0];
    v9 = (double **)__p[1];
    while (v8 != v9)
    {
      v10 = *v8;
      v11 = v8[1];
      while (v10 != v11)
      {
        CA::ValueRangeList::AddRange((double **)a2, v10);
        v10 += 2;
      }
      v8 += 8;
    }
    v31 = __p;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v31);
  }
  else
  {
    if (!*(_QWORD *)(v3 + 48))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5.i64[0] = 0x676C6F626E737223;
    v29 = 0x676C6F626E737223;
    v30 = 0;
    AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v29, v5);
    if ((SBYTE7(v36) & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((SBYTE7(v36) & 0x80u) == 0)
      v13 = BYTE7(v36);
    else
      v13 = (CFIndex)__p[1];
    v14 = CFStringCreateWithBytes(0, (const UInt8 *)v12, v13, 0x8000100u, 0);
    if (!v14)
    {
      v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v31, *(CFDictionaryRef *)(v3 + 48), v14);
    CFRelease(v14);
    if (SBYTE7(v36) < 0)
      operator delete(__p[0]);
    if (v32)
    {
      v37 = 0;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>((uint64_t)__p, (CFTypeRef *)&v31);
      AMCP::Thing::convert_to<CA::ValueRangeList>((_QWORD *)a2, (uint64_t)__p);
      if (v37)
        v37(0, __p, 0, 0);
    }
    else
    {
      if (!*(_QWORD *)(v3 + 48))
      {
        v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v25, "Could not construct");
        __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v15.i64[0] = 0x676C6F626E737274;
      v29 = 0x676C6F626E737274;
      v30 = 0;
      AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v29, v15);
      if ((SBYTE7(v36) & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      if ((SBYTE7(v36) & 0x80u) == 0)
        v17 = BYTE7(v36);
      else
        v17 = (CFIndex)__p[1];
      v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
      if (!v18)
      {
        v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
        __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, *(CFDictionaryRef *)(v3 + 48), v18);
      if (!cf)
      {
        v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
        __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v19 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (cf)
        CFRelease(cf);
      CFRelease(v18);
      if (SBYTE7(v36) < 0)
        operator delete(__p[0]);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      __p[0] = *(void **)&v19;
      __p[1] = *(void **)&v19;
      CA::ValueRangeList::AddRange((double **)a2, (double *)__p);
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
  }
  v20 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B5A5C8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  const void *v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  __cxa_free_exception(v24);
  if (cf)
    CFRelease(cf);
  CFRelease(v25);
  if (a22 < 0)
    operator delete(__p);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  v27 = a16;
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::target_type()
{
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1B5A5CB2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6980E68;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6980E68;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3;
  int simple_required;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 88) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Null5Clock13populate_coreEjENK3$_1clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_;
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6980D78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6980D78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6980D78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6980D78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  char v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  std::runtime_error *exception;
  int v18;
  uint64_t v19;
  std::runtime_error v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  std::runtime_error *v27;
  int v28;
  uint64_t v29;
  std::runtime_error v30;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::runtime_error v36;
  std::runtime_error v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint8_t buf[8];
  __int128 v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = (std::__shared_weak_count *)v45;
    v12 = **(NSObject ***)buf;
    if ((_QWORD)v45)
    {
      v13 = (unint64_t *)(v45 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      LOWORD(v45) = 2080;
      *(_QWORD *)((char *)&v45 + 2) = "Null_Object.cpp";
      WORD5(v45) = 1024;
      HIDWORD(v45) = 816;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v36, "no model object");
    std::runtime_error::runtime_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v38 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const Sa"
                         "mple_Rate &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 816;
    std::vector<void *>::vector(&v31);
    v18 = backtrace((void **)v31, (*((_QWORD *)&v31 + 1) - (_QWORD)v31) >> 3);
    std::vector<void *>::resize((char **)&v31, v18);
    v33 = off_1E69A20A0;
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v33);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v20;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = v3[22];
  v37.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737274;
  LODWORD(v37.__imp_.__imp_) = 0;
  v45 = 0uLL;
  *(_QWORD *)buf = *a2;
  *(_QWORD *)v46 = 0;
  *(_QWORD *)&v46[8] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, uint64_t, std::runtime_error *, uint8_t *))(*(_QWORD *)v3 + 40))(v3, v6, &v37, buf);
  v8 = (char)v7;
  if (*(_QWORD *)&v46[8])
    v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v46[8])(0, buf, 0, 0);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = (std::__shared_weak_count *)v45;
    v22 = **(NSObject ***)buf;
    if ((_QWORD)v45)
    {
      v23 = (unint64_t *)(v45 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v26;
      LOWORD(v45) = 2080;
      *(_QWORD *)((char *)&v45 + 2) = "Null_Object.cpp";
      WORD5(v45) = 1024;
      HIDWORD(v45) = 818;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v36, "not handled");
    std::runtime_error::runtime_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v38 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const Sa"
                         "mple_Rate &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 818;
    std::vector<void *>::vector(&v31);
    v28 = backtrace((void **)v31, (*((_QWORD *)&v31 + 1) - (_QWORD)v31) >> 3);
    std::vector<void *>::resize((char **)&v31, v28);
    v33 = off_1E69A20A0;
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v33);
    v27[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v27, (const std::runtime_error *)buf);
    v27[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v29 = *(_QWORD *)v46;
    v27[1].__imp_.__imp_ = *(const char **)v46;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    v30 = *(std::runtime_error *)&v46[8];
    LODWORD(v27[3].__vftable) = v47;
    v27[2] = v30;
    v27->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v27[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v27[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A5D318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::target_type()
{
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6980C78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6980C78;
  a2[1] = v2;
  return result;
}

double std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_mutex_base *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *i;
  std::string::size_type size;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int16x8_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 simple_required;
  double v14;
  std::string *p_p;
  CFIndex v16;
  CFStringRef v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  CFTypeRef cf;
  std::string __p;
  AMCP::Core::Core *v29;
  std::__shared_weak_count *v30;
  unsigned int *v31[3];
  _QWORD valuePtr[3];
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_mutex_base **)(*(_QWORD *)(v1 + 8) + 16);
  v3 = *(_DWORD *)(v1 + 88);
  v33 = (uint64_t)&off_1E6980CE8;
  v35 = &v33;
  memset(valuePtr, 0, sizeof(valuePtr));
  v4 = (unsigned int *)operator new(4uLL);
  *v4 = v3;
  v31[1] = v4 + 1;
  v31[2] = v4 + 1;
  v31[0] = v4;
  AMCP::Core::Broker::gather_directly_owned_objects((std::vector<unsigned int> *)&__p, v2, v31);
  operator delete(v4);
  size = __p.__r_.__value_.__l.__size_;
  for (i = (unsigned int *)__p.__r_.__value_.__r.__words[0]; i != (unsigned int *)size; ++i)
  {
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v29, v2, *i);
    if (v29)
    {
      if (!v35)
        std::__throw_bad_function_call[abi:ne180100]();
      if (((*(uint64_t (**)(uint64_t *, AMCP::Core::Core **))(*v35 + 48))(v35, &v29) & 1) != 0)
        goto LABEL_13;
    }
    v7 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v29 = 0;
  v30 = 0;
LABEL_13:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)valuePtr;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v11 = v35;
  if (v35 == &v33)
  {
    v12 = 4;
    v11 = &v33;
  }
  else
  {
    if (!v35)
      goto LABEL_20;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_20:
  if (v29)
  {
    simple_required = AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v29);
    v14 = *(double *)&__p.__r_.__value_.__l.__data_;
  }
  else
  {
    if (!*(_QWORD *)(v1 + 48))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10.i64[0] = 0x676C6F626E737274;
    v33 = 0x676C6F626E737274;
    v34 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v33, v10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v16 = __p.__r_.__value_.__l.__size_;
    v17 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v16, 0x8000100u, 0);
    if (!v17)
    {
      v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    valuePtr[0] = 0x40E5888000000000;
    cf = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (!cf)
    {
      v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
      __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v31, *(const __CFDictionary **)(v1 + 48), v17, &cf);
    v18 = v31[0];
    if (!v31[0])
    {
      v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Could not construct");
      __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v31[0]);
    CFRelease(v18);
    if (cf)
      CFRelease(cf);
    CFRelease(v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, simple_required);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v14;
}

void sub_1B5A5D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  const void *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (cf)
    CFRelease(cf);
  CFRelease(v20);
  if (a16 < 0)
    operator delete(__p);
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6980CE8;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6980CE8;
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return AMCP::is_base_of((AMCP *)0x61737472, simple_required);
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Null5Clock13populate_coreEjENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_;
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6980BF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6980BF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6980BF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6980BF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unsigned int *v6;
  uint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  char v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::runtime_error *exception;
  int v19;
  uint64_t v20;
  std::runtime_error v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  std::runtime_error *v28;
  int v29;
  uint64_t v30;
  std::runtime_error v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  std::runtime_error v37;
  std::runtime_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  _BYTE buf[48];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0) || (v6 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)&buf[8];
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Null_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 783;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v37, "no model object");
    std::runtime_error::runtime_error(&v38, &v37);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v39 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&buf[32] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const C"
                          "F::String &) const";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v46 = 783;
    std::vector<void *>::vector(&v32);
    v19 = backtrace((void **)v32, (*((_QWORD *)&v32 + 1) - (_QWORD)v32) >> 3);
    std::vector<void *>::resize((char **)&v32, v19);
    v34 = off_1E69A20A0;
    v35 = v32;
    v36 = v33;
    v32 = 0uLL;
    v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v34);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v20 = *(_QWORD *)&buf[24];
    exception[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    v21 = *(std::runtime_error *)&buf[32];
    LODWORD(exception[3].__vftable) = v46;
    exception[2] = v21;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v7 = v6[22];
  v38.__vftable = (std::runtime_error_vtbl *)0x676C6F626E6C666CLL;
  LODWORD(v38.__imp_.__imp_) = 0;
  memset(buf, 0, 40);
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)buf, a2);
  v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, uint64_t, std::runtime_error *, _BYTE *))(*(_QWORD *)v6 + 40))(v6, v7, &v38, buf);
  v9 = (char)v8;
  if (*(_QWORD *)&buf[32])
    v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&buf[32])(0, buf, 0, 0);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = *(std::__shared_weak_count **)&buf[8];
    v23 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v27;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Null_Object.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 785;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v37, "not handled");
    std::runtime_error::runtime_error(&v38, &v37);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v39 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(_QWORD *)&buf[32] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const C"
                          "F::String &) const";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v46 = 785;
    std::vector<void *>::vector(&v32);
    v29 = backtrace((void **)v32, (*((_QWORD *)&v32 + 1) - (_QWORD)v32) >> 3);
    std::vector<void *>::resize((char **)&v32, v29);
    v34 = off_1E69A20A0;
    v35 = v32;
    v36 = v33;
    v32 = 0uLL;
    v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v34);
    v28[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v28, (const std::runtime_error *)buf);
    v28[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v30 = *(_QWORD *)&buf[24];
    v28[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    v31 = *(std::runtime_error *)&buf[32];
    LODWORD(v28[3].__vftable) = v46;
    v28[2] = v31;
    v28->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v28[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v28[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A5E264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6980B78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6980B78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>, int16x8_t a3@<Q0>)
{
  uint64_t v4;
  std::string *p_p;
  CFIndex size;
  CFStringRef v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  CFTypeRef cf;
  uint64_t v11;
  int v12;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v4 + 48))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a3.i64[0] = 0x676C6F626E6C666CLL;
  v11 = 0x676C6F626E6C666CLL;
  v12 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v11, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v7)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(a2, *(const __CFDictionary **)(v4 + 48), v7, &cf);
  if (cf)
    CFRelease(cf);
  CFRelease(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B5A5E64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Clock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69828C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Clock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69828C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Clock>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Stream::~Stream(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Null::Stream::populate_core(AMCP::Null::Stream *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const UInt8 *v5;
  CFIndex v6;
  CFStringRef v7;
  AMCP::Thing *v8;
  AMCP::Thing *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  CFIndex v26;
  CFStringRef v27;
  AMCP::Thing *v28;
  AMCP::Thing *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  CFIndex v34;
  CFStringRef v35;
  AMCP::Thing *v36;
  AMCP::Thing *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  CFIndex v42;
  CFStringRef v43;
  AMCP::Thing *v44;
  AMCP::Thing *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const UInt8 *v49;
  CFIndex v50;
  CFStringRef v51;
  AMCP::Thing *v52;
  AMCP::Thing *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  __n128 v64;
  CFTypeRef *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  const UInt8 *v74;
  CFIndex v75;
  CFStringRef v76;
  AMCP::Thing *v77;
  AMCP::Thing *v78;
  unint64_t *p_shared_weak_owners;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  __int128 *v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  __int128 *v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  void **v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  __int128 *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int16x8_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  const UInt8 *v113;
  CFIndex v114;
  CFStringRef v115;
  int16x8_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  void **v120;
  uint64_t v121;
  const UInt8 *v122;
  CFIndex v123;
  CFStringRef v124;
  void *v125;
  void *v126;
  char *v127;
  const void *v128;
  void *v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  __int128 *v138;
  uint64_t v139;
  AMCP::Log::Scope_Registry *v140;
  unint64_t *v141;
  unint64_t v142;
  NSObject *v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  std::runtime_error *exception;
  std::runtime_error *v147;
  std::runtime_error *v148;
  std::runtime_error *v149;
  std::runtime_error *v150;
  std::runtime_error *v151;
  std::runtime_error *v152;
  std::runtime_error *v153;
  std::runtime_error *v154;
  std::runtime_error *v155;
  std::runtime_error *v156;
  std::runtime_error *v157;
  std::runtime_error *v158;
  std::runtime_error *v159;
  std::runtime_error *v160;
  uint64_t v161;
  __int128 v162;
  int v163;
  int v164;
  CFTypeRef v165[2];
  uint64_t v166;
  std::__shared_weak_count *v167;
  _QWORD v168[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  void (*v173)(uint64_t, __int128 *, void **, _QWORD);
  char *v174;
  void *v175[2];
  _BYTE v176[24];
  __int128 v177;
  void (*v178)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE __p[40];
  __int128 v180;
  void (*v181)(int, uint64_t, AMCP::Thing *, uint64_t *);
  __int128 v182;
  __int128 v183;
  void (*v184)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void *v185[2];
  __int128 v186;
  uint64_t (*v187)(int, uint64_t, AMCP::Thing *, uint64_t *);
  char v188;
  __int128 v189;
  __int128 v190;
  void (*v191)(uint64_t, __int128 *, __int128 *, _QWORD);
  __int128 *v192;
  char v193;
  CFTypeRef *v194;
  __int128 v195;
  __int128 v196;
  void (*v197)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Object::populate_core(this, a2, a3);
  LOBYTE(v185[0]) = 0;
  v188 = 0;
  strcpy((char *)v165, "ridsbolg");
  BYTE1(v165[1]) = 0;
  WORD1(v165[1]) = 0;
  v191 = 0;
  v189 = 0u;
  v190 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v165, (int16x8_t)0);
  if (__p[23] >= 0)
    v5 = __p;
  else
    v5 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v6 = __p[23];
  else
    v6 = *(_QWORD *)&__p[8];
  v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
  if (!v7)
  {
    v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v147, "Could not construct");
    __cxa_throw(v147, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v192, *((CFDictionaryRef *)this + 6), v7);
  CFRelease(v7);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v193)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v192);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v189, v9);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&__p[32])(0, __p, 0, 0);
  }
  else if (v188)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v189, (uint64_t)v185, v8);
  }
  if (!v191)
  {
    v10 = 0;
    v170 = 0uLL;
    goto LABEL_46;
  }
  LODWORD(v169) = 1935960434;
  v163 = (int)v165[1];
  *(CFTypeRef *)((char *)&v169 + 4) = *(CFTypeRef *)((char *)v165 + 4);
  v173 = 0;
  v171 = 0u;
  v172 = 0u;
  v191(1, &v189, &v171, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v170, v163, *(double *)&v169);
  v10 = v170;
  v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  *(_OWORD *)v175 = 0u;
  memset(v176, 0, sizeof(v176));
  if (v173)
    v173(1, &v171, v175, 0);
  *((_QWORD *)&v196 + 1) = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E69814C8;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_QWORD *)v12 + 5) = 0;
  if (*(_QWORD *)&v176[16])
    (*(void (**)(uint64_t, void **, char *, _QWORD))&v176[16])(1, v175, v12 + 8, 0);
  *((_QWORD *)&v196 + 1) = v12;
  memset(__p, 0, sizeof(__p));
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v195);
  *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)__p);
  if (*(_QWORD *)&__p[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
  v13 = (__int128 *)*((_QWORD *)&v196 + 1);
  if (*((__int128 **)&v196 + 1) == &v195)
  {
    v14 = 4;
    v13 = &v195;
  }
  else
  {
    if (!*((_QWORD *)&v196 + 1))
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_29:
  if (*(_QWORD *)&v176[16])
    (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v175, v10);
  *(_QWORD *)&v177 = *(_QWORD *)(v10 + 40);
  DWORD2(v177) = *(_DWORD *)(v10 + 48);
  v15 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  v16 = v175[0];
  v17 = (unint64_t)v175[1];
  v175[0] = 0;
  v175[1] = 0;
  *(_QWORD *)__p = v16;
  *(_QWORD *)&__p[8] = v17;
  *(_OWORD *)&__p[16] = *(_OWORD *)v176;
  *(_DWORD *)&__p[32] = *(_DWORD *)&v176[16];
  if (*(_QWORD *)&v176[8])
  {
    v18 = *(_QWORD *)(*(_QWORD *)v176 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v18 >= v17)
        v18 %= v17;
    }
    else
    {
      v18 &= v17 - 1;
    }
    v16[v18] = &__p[16];
    *(_OWORD *)v176 = 0uLL;
  }
  *(_QWORD *)&v180 = v177;
  DWORD2(v180) = DWORD2(v177);
  *((_QWORD *)&v183 + 1) = 0;
  v19 = operator new(0x40uLL);
  *v19 = &off_1E6981548;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v19 + 1), (uint64_t *)__p);
  v19[6] = v180;
  *((_DWORD *)v19 + 14) = DWORD2(v180);
  *((_QWORD *)&v183 + 1) = v19;
  v195 = 0u;
  v196 = 0u;
  v197 = 0;
  std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)&v195, (uint64_t)&v182);
  v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v15, (AMCP *)&v195);
  if (v197)
    v197(0, (uint64_t)&v195, 0, 0);
  v20 = (__int128 *)*((_QWORD *)&v183 + 1);
  if (*((__int128 **)&v183 + 1) == &v182)
  {
    v21 = 4;
    v20 = &v182;
  }
  else
  {
    if (!*((_QWORD *)&v183 + 1))
      goto LABEL_44;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_44:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v175);
  if (v173)
    v173(0, &v171, 0, 0);
LABEL_46:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v192);
  if (v191)
    v191(0, &v189, 0, 0);
  if (v10)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v10 + 40), &v170);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v185);
  __p[0] = 0;
  LOBYTE(v180) = 0;
  *(_QWORD *)&v189 = 0x676C6F627363686ELL;
  DWORD2(v189) = 0;
  *(_OWORD *)v175 = 0u;
  memset(v176, 0, sizeof(v176));
  if (!*((_QWORD *)this + 6))
  {
    v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v148, "Could not construct");
    __cxa_throw(v148, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)v185, (unsigned int *)&v189, (int16x8_t)0);
  if ((SBYTE7(v186) & 0x80u) == 0)
    v25 = v185;
  else
    v25 = (void **)v185[0];
  if ((SBYTE7(v186) & 0x80u) == 0)
    v26 = BYTE7(v186);
  else
    v26 = (CFIndex)v185[1];
  v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, v26, 0x8000100u, 0);
  if (!v27)
  {
    v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not construct");
    __cxa_throw(v149, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v195, *((CFDictionaryRef *)this + 6), v27);
  CFRelease(v27);
  if (SBYTE7(v186) < 0)
    operator delete(v185[0]);
  if (BYTE8(v195))
  {
    AMCP::make_thing_from_description((AMCP *)v185, (CFTypeRef *)&v195);
    AMCP::swap((AMCP::Thing *)v185, (AMCP::Thing *)v175, v29);
    if (v187)
      v187(0, (uint64_t)v185, 0, 0);
  }
  else if ((_BYTE)v180)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v175, (uint64_t)__p, v28);
  }
  if (*(_QWORD *)&v176[16])
  {
    LODWORD(v171) = 1935894638;
    *(_QWORD *)((char *)&v171 + 4) = *(_QWORD *)((char *)&v189 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v185, (uint64_t)&v171, (uint64_t)v175);
  }
  else
  {
    v185[0] = 0;
    v185[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v195);
  if (*(_QWORD *)&v176[16])
    (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
  if (v185[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v185[0] + 10, v185);
  v30 = (std::__shared_weak_count *)v185[1];
  if (v185[1])
  {
    v31 = (unint64_t *)((char *)v185[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  v195 = 0u;
  v196 = 0u;
  v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)__p, (uint64_t)&v195);
  *(_QWORD *)&v182 = 0x676C6F6274617073;
  DWORD2(v182) = 0;
  *(_OWORD *)v175 = 0u;
  memset(v176, 0, sizeof(v176));
  if (!*((_QWORD *)this + 6))
  {
    v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v150, "Could not construct");
    __cxa_throw(v150, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)v185, (unsigned int *)&v182, (int16x8_t)0);
  if ((SBYTE7(v186) & 0x80u) == 0)
    v33 = v185;
  else
    v33 = (void **)v185[0];
  if ((SBYTE7(v186) & 0x80u) == 0)
    v34 = BYTE7(v186);
  else
    v34 = (CFIndex)v185[1];
  v35 = CFStringCreateWithBytes(0, (const UInt8 *)v33, v34, 0x8000100u, 0);
  if (!v35)
  {
    v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v151, "Could not construct");
    __cxa_throw(v151, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v171, *((CFDictionaryRef *)this + 6), v35);
  CFRelease(v35);
  if (SBYTE7(v186) < 0)
    operator delete(v185[0]);
  if (BYTE8(v171))
  {
    AMCP::make_thing_from_description((AMCP *)v185, (CFTypeRef *)&v171);
    AMCP::swap((AMCP::Thing *)v185, (AMCP::Thing *)v175, v37);
    if (v187)
      v187(0, (uint64_t)v185, 0, 0);
  }
  else if ((_BYTE)v180)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v175, (uint64_t)__p, v36);
  }
  if (*(_QWORD *)&v176[16])
  {
    LODWORD(v189) = 1952542835;
    *(_QWORD *)((char *)&v189 + 4) = *(_QWORD *)((char *)&v182 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v185, (uint64_t)&v189, (uint64_t)v175);
  }
  else
  {
    v185[0] = 0;
    v185[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v171);
  if (*(_QWORD *)&v176[16])
    (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
  if (v185[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v185[0] + 10, v185);
  v38 = (std::__shared_weak_count *)v185[1];
  if (v185[1])
  {
    v39 = (unint64_t *)((char *)v185[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v197)
    v197(0, (uint64_t)&v195, 0, 0);
  v195 = 0u;
  v196 = 0u;
  v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)__p, (uint64_t)&v195);
  *(_QWORD *)&v182 = 0x676C6F627465726DLL;
  DWORD2(v182) = 0;
  *(_OWORD *)v175 = 0u;
  memset(v176, 0, sizeof(v176));
  if (!*((_QWORD *)this + 6))
  {
    v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "Could not construct");
    __cxa_throw(v152, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)v185, (unsigned int *)&v182, (int16x8_t)0);
  if ((SBYTE7(v186) & 0x80u) == 0)
    v41 = v185;
  else
    v41 = (void **)v185[0];
  if ((SBYTE7(v186) & 0x80u) == 0)
    v42 = BYTE7(v186);
  else
    v42 = (CFIndex)v185[1];
  v43 = CFStringCreateWithBytes(0, (const UInt8 *)v41, v42, 0x8000100u, 0);
  if (!v43)
  {
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not construct");
    __cxa_throw(v153, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v171, *((CFDictionaryRef *)this + 6), v43);
  CFRelease(v43);
  if (SBYTE7(v186) < 0)
    operator delete(v185[0]);
  if (BYTE8(v171))
  {
    AMCP::make_thing_from_description((AMCP *)v185, (CFTypeRef *)&v171);
    AMCP::swap((AMCP::Thing *)v185, (AMCP::Thing *)v175, v45);
    if (v187)
      v187(0, (uint64_t)v185, 0, 0);
  }
  else if ((_BYTE)v180)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v175, (uint64_t)__p, v44);
  }
  if (*(_QWORD *)&v176[16])
  {
    LODWORD(v189) = 1952805485;
    *(_QWORD *)((char *)&v189 + 4) = *(_QWORD *)((char *)&v182 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v185, (uint64_t)&v189, (uint64_t)v175);
  }
  else
  {
    v185[0] = 0;
    v185[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v171);
  if (*(_QWORD *)&v176[16])
    (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
  if (v185[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v185[0] + 10, v185);
  v46 = (std::__shared_weak_count *)v185[1];
  if (v185[1])
  {
    v47 = (unint64_t *)((char *)v185[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v197)
    v197(0, (uint64_t)&v195, 0, 0);
  v182 = 0u;
  v183 = 0u;
  v184 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)v185, (uint64_t)&v182);
  strcpy((char *)v168, "ctlsbolg");
  BYTE1(v168[1]) = 0;
  WORD1(v168[1]) = 0;
  v191 = 0;
  v189 = 0u;
  v190 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v154, "Could not construct");
    __cxa_throw(v154, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v168, (int16x8_t)0);
  if (__p[23] >= 0)
    v49 = __p;
  else
    v49 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v50 = __p[23];
  else
    v50 = *(_QWORD *)&__p[8];
  v51 = CFStringCreateWithBytes(0, v49, v50, 0x8000100u, 0);
  if (!v51)
  {
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "Could not construct");
    __cxa_throw(v155, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v170, *((CFDictionaryRef *)this + 6), v51);
  CFRelease(v51);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (BYTE8(v170))
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v170);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v189, v53);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&__p[32])(0, __p, 0, 0);
  }
  else if (v188)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v189, (uint64_t)v185, v52);
  }
  if (!v191)
  {
    v54 = 0;
    v169 = 0uLL;
    goto LABEL_185;
  }
  LODWORD(v165[0]) = 1936487523;
  v164 = v168[1];
  *(CFTypeRef *)((char *)v165 + 4) = *(CFTypeRef *)((char *)v168 + 4);
  v173 = 0;
  v171 = 0u;
  v172 = 0u;
  v191(1, &v189, &v171, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v169, v164, *(double *)v165);
  v54 = v169;
  v55 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  *(_OWORD *)v175 = 0u;
  memset(v176, 0, sizeof(v176));
  if (v173)
    v173(1, &v171, v175, 0);
  *((_QWORD *)&v196 + 1) = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_1E69815C8;
  *(_OWORD *)(v56 + 8) = 0u;
  *(_OWORD *)(v56 + 24) = 0u;
  *((_QWORD *)v56 + 5) = 0;
  if (*(_QWORD *)&v176[16])
    (*(void (**)(uint64_t, void **, char *, _QWORD))&v176[16])(1, v175, v56 + 8, 0);
  *((_QWORD *)&v196 + 1) = v56;
  memset(__p, 0, sizeof(__p));
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v195);
  *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v54, v55, (AMCP *)__p);
  if (*(_QWORD *)&__p[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
  v57 = (__int128 *)*((_QWORD *)&v196 + 1);
  if (*((__int128 **)&v196 + 1) == &v195)
  {
    v58 = 4;
    v57 = &v195;
  }
  else
  {
    if (!*((_QWORD *)&v196 + 1))
      goto LABEL_168;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_168:
  if (*(_QWORD *)&v176[16])
    (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v175, v54);
  *(_QWORD *)&v177 = *(_QWORD *)(v54 + 40);
  DWORD2(v177) = *(_DWORD *)(v54 + 48);
  v59 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  v60 = v175[0];
  v61 = (unint64_t)v175[1];
  v175[0] = 0;
  v175[1] = 0;
  *(_QWORD *)__p = v60;
  *(_QWORD *)&__p[8] = v61;
  *(_OWORD *)&__p[16] = *(_OWORD *)v176;
  *(_DWORD *)&__p[32] = *(_DWORD *)&v176[16];
  if (*(_QWORD *)&v176[8])
  {
    v62 = *(_QWORD *)(*(_QWORD *)v176 + 8);
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v62 >= v61)
        v62 %= v61;
    }
    else
    {
      v62 &= v61 - 1;
    }
    v60[v62] = &__p[16];
    *(_OWORD *)v176 = 0uLL;
  }
  *(_QWORD *)&v180 = v177;
  DWORD2(v180) = DWORD2(v177);
  v194 = 0;
  v63 = operator new(0x40uLL);
  *v63 = &off_1E6981648;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v63 + 1), (uint64_t *)__p);
  v63[6] = v180;
  *((_DWORD *)v63 + 14) = DWORD2(v180);
  v194 = (CFTypeRef *)v63;
  v195 = 0u;
  v196 = 0u;
  v197 = 0;
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v195, (uint64_t)&v192);
  v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v54, v59, (AMCP *)&v195);
  if (v197)
    v64.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v197)(0, (uint64_t)&v195, 0, 0);
  v65 = v194;
  if (v194 == (CFTypeRef *)&v192)
  {
    v66 = 4;
    v65 = (CFTypeRef *)&v192;
  }
  else
  {
    if (!v194)
      goto LABEL_183;
    v66 = 5;
  }
  (*((void (**)(__n128))*v65 + v66))(v64);
LABEL_183:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v175);
  if (v173)
    v173(0, &v171, 0, 0);
LABEL_185:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v170);
  if (v191)
    v191(0, &v189, 0, 0);
  if (v54)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v54 + 40), &v169);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v185);
  if (v184)
    v184(0, (uint64_t)&v182, 0, 0);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v166, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(v185[0]) = 0;
  v188 = 0;
  v71 = v166;
  v70 = v167;
  if (v167)
  {
    p_shared_owners = (unint64_t *)&v167->__shared_owners_;
    do
      v73 = __ldxr(p_shared_owners);
    while (__stxr(v73 + 1, p_shared_owners));
  }
  strcpy((char *)v165, "tamfbolg");
  BYTE1(v165[1]) = 0;
  WORD1(v165[1]) = 0;
  v173 = 0;
  v171 = 0u;
  v172 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v156, "Could not construct");
    __cxa_throw(v156, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v165, (int16x8_t)0);
  if (__p[23] >= 0)
    v74 = __p;
  else
    v74 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v75 = __p[23];
  else
    v75 = *(_QWORD *)&__p[8];
  v76 = CFStringCreateWithBytes(0, v74, v75, 0x8000100u, 0);
  if (!v76)
  {
    v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v157, "Could not construct");
    __cxa_throw(v157, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v192, *((CFDictionaryRef *)this + 6), v76);
  CFRelease(v76);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v193)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v192);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v171, v78);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&__p[32])(0, __p, 0, 0);
  }
  else if (v188)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v171, (uint64_t)v185, v77);
  }
  if (v173)
  {
    v161 = *(uint64_t *)((char *)v165 + 4);
    v191 = 0;
    v189 = 0u;
    v190 = 0u;
    v173(1, &v171, (void **)&v189, 0);
    if (v70)
    {
      p_shared_weak_owners = (unint64_t *)&v70->__shared_weak_owners_;
      do
        v80 = __ldxr(p_shared_weak_owners);
      while (__stxr(v80 + 1, p_shared_weak_owners));
    }
    LODWORD(v169) = 1718444404;
    *(_QWORD *)((char *)&v169 + 4) = v161;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v170, SHIDWORD(v161), *(double *)&v169);
    v81 = v170;
    v82 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (v191)
      v191(2, &v189, (__int128 *)v175, 0);
    *((_QWORD *)&v196 + 1) = 0;
    v83 = (char *)operator new(0x30uLL);
    *(_QWORD *)v83 = &off_1E69816C8;
    *(_OWORD *)(v83 + 8) = 0u;
    *(_OWORD *)(v83 + 24) = 0u;
    *((_QWORD *)v83 + 5) = 0;
    if (*(_QWORD *)&v176[16])
      (*(void (**)(uint64_t, void **, char *, _QWORD))&v176[16])(2, v175, v83 + 8, 0);
    *((_QWORD *)&v196 + 1) = v83;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v195);
    *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v82, (AMCP *)__p);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
    v84 = (__int128 *)*((_QWORD *)&v196 + 1);
    if (*((__int128 **)&v196 + 1) == &v195)
    {
      v85 = 4;
      v84 = &v195;
    }
    else
    {
      if (!*((_QWORD *)&v196 + 1))
        goto LABEL_230;
      v85 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
LABEL_230:
    if (*(_QWORD *)&v176[16])
      (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v175, v81);
    *(_QWORD *)&v177 = *(_QWORD *)(v81 + 40);
    DWORD2(v177) = *(_DWORD *)(v81 + 48);
    v86 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
    v87 = v175[0];
    v88 = (unint64_t)v175[1];
    v175[0] = 0;
    v175[1] = 0;
    *(_QWORD *)__p = v87;
    *(_QWORD *)&__p[8] = v88;
    *(_OWORD *)&__p[16] = *(_OWORD *)v176;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v176[16];
    if (*(_QWORD *)&v176[8])
    {
      v89 = *(_QWORD *)(*(_QWORD *)v176 + 8);
      if ((v88 & (v88 - 1)) != 0)
      {
        if (v89 >= v88)
          v89 %= v88;
      }
      else
      {
        v89 &= v88 - 1;
      }
      v87[v89] = &__p[16];
      *(_OWORD *)v176 = 0uLL;
    }
    *(_QWORD *)&v180 = v177;
    DWORD2(v180) = DWORD2(v177);
    *((_QWORD *)&v183 + 1) = 0;
    v90 = operator new(0x40uLL);
    *v90 = &off_1E6981748;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v90 + 1), (uint64_t *)__p);
    v90[6] = v180;
    *((_DWORD *)v90 + 14) = DWORD2(v180);
    *((_QWORD *)&v183 + 1) = v90;
    v195 = 0u;
    v196 = 0u;
    v197 = 0;
    std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)&v195, (uint64_t)&v182);
    v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v86, (AMCP *)&v195);
    if (v197)
      v197(0, (uint64_t)&v195, 0, 0);
    v91 = (__int128 *)*((_QWORD *)&v183 + 1);
    if (*((__int128 **)&v183 + 1) == &v182)
    {
      v92 = 4;
      v91 = &v182;
    }
    else
    {
      if (!*((_QWORD *)&v183 + 1))
        goto LABEL_245;
      v92 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v91 + 8 * v92))();
LABEL_245:
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v175);
    v93 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *(_QWORD *)&v176[8] = 0;
    v94 = operator new(0x28uLL);
    *v94 = &off_1E69817C8;
    v94[1] = v71;
    v94[2] = v70;
    v94[3] = 0x676C6F62666D6174;
    *((_DWORD *)v94 + 8) = HIDWORD(v161);
    *(_QWORD *)&v176[8] = v94;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v175);
    *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v93, (AMCP *)__p);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
    v95 = *(void ***)&v176[8];
    if (*(void ***)&v176[8] == v175)
    {
      v96 = 4;
      v95 = v175;
    }
    else
    {
      if (!*(_QWORD *)&v176[8])
        goto LABEL_252;
      v96 = 5;
    }
    (*((void (**)(void))*v95 + v96))();
LABEL_252:
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v175, v81);
    *(_QWORD *)&v177 = *(_QWORD *)(v81 + 40);
    DWORD2(v177) = *(_DWORD *)(v81 + 48);
    v97 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
    v98 = v175[0];
    v99 = (unint64_t)v175[1];
    v175[0] = 0;
    v175[1] = 0;
    *(_QWORD *)__p = v98;
    *(_QWORD *)&__p[8] = v99;
    *(_OWORD *)&__p[16] = *(_OWORD *)v176;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v176[16];
    if (*(_QWORD *)&v176[8])
    {
      v100 = *(_QWORD *)(*(_QWORD *)v176 + 8);
      if ((v99 & (v99 - 1)) != 0)
      {
        if (v100 >= v99)
          v100 %= v99;
      }
      else
      {
        v100 &= v99 - 1;
      }
      v98[v100] = &__p[16];
      *(_OWORD *)v176 = 0uLL;
    }
    *(_QWORD *)&v180 = v177;
    DWORD2(v180) = DWORD2(v177);
    *((_QWORD *)&v183 + 1) = 0;
    v101 = operator new(0x40uLL);
    *v101 = &off_1E6981848;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v101 + 1), (uint64_t *)__p);
    v101[6] = v180;
    *((_DWORD *)v101 + 14) = DWORD2(v180);
    *((_QWORD *)&v183 + 1) = v101;
    v195 = 0u;
    v196 = 0u;
    v197 = 0;
    std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)&v195, (uint64_t)&v182);
    v197 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v97, (AMCP *)&v195);
    if (v197)
      v197(0, (uint64_t)&v195, 0, 0);
    v102 = (__int128 *)*((_QWORD *)&v183 + 1);
    if (*((__int128 **)&v183 + 1) == &v182)
    {
      v103 = 4;
      v102 = &v182;
    }
    else
    {
      if (!*((_QWORD *)&v183 + 1))
        goto LABEL_265;
      v103 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v102 + 8 * v103))();
LABEL_265:
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v175);
    if (v191)
      v191(0, &v189, 0, 0);
    goto LABEL_267;
  }
  v170 = 0uLL;
LABEL_267:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v192);
  if (v173)
    v173(0, &v171, 0, 0);
  if (v70)
  {
    v104 = (unint64_t *)&v70->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if ((_QWORD)v170)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v170 + 40), &v170);
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v185);
  v110 = v167;
  if (v167)
  {
    v111 = (unint64_t *)&v167->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v170 = 0uLL;
  if (!*((_QWORD *)this + 6))
    goto LABEL_374;
  v175[0] = (void *)0x676C6F62666D7423;
  LODWORD(v175[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v175, v109);
  if (__p[23] >= 0)
    v113 = __p;
  else
    v113 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v114 = __p[23];
  else
    v114 = *(_QWORD *)&__p[8];
  v115 = CFStringCreateWithBytes(0, v113, v114, 0x8000100u, 0);
  if (!v115)
  {
    v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v158, "Could not construct");
    __cxa_throw(v158, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v169, *((CFDictionaryRef *)this + 6), v115);
  CFRelease(v115);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (BYTE8(v169))
  {
    AMCP::make_thing_from_description((AMCP *)&v171, (CFTypeRef *)&v169);
    v197 = 0;
    v195 = 0u;
    v196 = 0u;
    if (v173)
      v173(1, &v171, (void **)&v195, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v182, 0, 1.58366008e190);
    v117 = v182;
    v118 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (v197)
      v197(1, (uint64_t)&v195, (AMCP::Thing *)v175, 0);
    *((_QWORD *)&v186 + 1) = 0;
    v119 = (char *)operator new(0x30uLL);
    *(_QWORD *)v119 = &off_1E69818C8;
    *(_OWORD *)(v119 + 8) = 0u;
    *(_OWORD *)(v119 + 24) = 0u;
    *((_QWORD *)v119 + 5) = 0;
    if (*(_QWORD *)&v176[16])
      (*(void (**)(uint64_t, void **, char *, _QWORD))&v176[16])(1, v175, v119 + 8, 0);
    *((_QWORD *)&v186 + 1) = v119;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v185);
    *(_QWORD *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v117, v118, (AMCP *)__p);
    if (*(_QWORD *)&__p[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&__p[32])(0, (uint64_t)__p, 0, 0);
    v120 = (void **)*((_QWORD *)&v186 + 1);
    if (*((void ***)&v186 + 1) == v185)
    {
      v121 = 4;
      v120 = v185;
    }
    else
    {
      if (!*((_QWORD *)&v186 + 1))
        goto LABEL_329;
      v121 = 5;
    }
    (*((void (**)(void))*v120 + v121))();
LABEL_329:
    if (*(_QWORD *)&v176[16])
      (*(void (**)(_QWORD, void **, _QWORD, _QWORD))&v176[16])(0, v175, 0, 0);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v175, v117);
    *(_QWORD *)&v177 = *(_QWORD *)(v117 + 40);
    DWORD2(v177) = *(_DWORD *)(v117 + 48);
    v133 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
    v134 = v175[0];
    v135 = (unint64_t)v175[1];
    v175[0] = 0;
    v175[1] = 0;
    *(_QWORD *)__p = v134;
    *(_QWORD *)&__p[8] = v135;
    *(_OWORD *)&__p[16] = *(_OWORD *)v176;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v176[16];
    if (*(_QWORD *)&v176[8])
    {
      v136 = *(_QWORD *)(*(_QWORD *)v176 + 8);
      if ((v135 & (v135 - 1)) != 0)
      {
        if (v136 >= v135)
          v136 %= v135;
      }
      else
      {
        v136 &= v135 - 1;
      }
      v134[v136] = &__p[16];
      *(_OWORD *)v176 = 0uLL;
    }
    *(_QWORD *)&v180 = v177;
    DWORD2(v180) = DWORD2(v177);
    *((_QWORD *)&v190 + 1) = 0;
    v137 = operator new(0x40uLL);
    *v137 = &off_1E6981948;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v137 + 1), (uint64_t *)__p);
    v137[6] = v180;
    *((_DWORD *)v137 + 14) = DWORD2(v180);
    *((_QWORD *)&v190 + 1) = v137;
    *(_OWORD *)v185 = 0u;
    v186 = 0u;
    v187 = 0;
    std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v185, (uint64_t)&v189);
    v187 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v117, v133, (AMCP *)v185);
    if (v187)
      v187(0, (uint64_t)v185, 0, 0);
    v138 = (__int128 *)*((_QWORD *)&v190 + 1);
    if (*((__int128 **)&v190 + 1) == &v189)
    {
      v139 = 4;
      v138 = &v189;
    }
    else
    {
      if (!*((_QWORD *)&v190 + 1))
      {
LABEL_344:
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
        v140 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v175);
        if (v197)
          v140 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(_QWORD, __int128 *, _QWORD, _QWORD))v197)(0, &v195, 0, 0);
        v162 = v182;
        v170 = v182;
        if (v173)
          v140 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(_QWORD, __int128 *, _QWORD, _QWORD))v173)(0, &v171, 0, 0);
        goto LABEL_350;
      }
      v139 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v138 + 8 * v139))();
    goto LABEL_344;
  }
  if (!*((_QWORD *)this + 6))
  {
LABEL_374:
    v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v159, "Could not construct");
    __cxa_throw(v159, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v175[0] = (void *)0x676C6F62666D6174;
  LODWORD(v175[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v175, v116);
  if (__p[23] >= 0)
    v122 = __p;
  else
    v122 = *(const UInt8 **)__p;
  if (__p[23] >= 0)
    v123 = __p[23];
  else
    v123 = *(_QWORD *)&__p[8];
  v124 = CFStringCreateWithBytes(0, v122, v123, 0x8000100u, 0);
  if (!v124)
  {
    v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v160, "Could not construct");
    __cxa_throw(v160, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v165, *((CFDictionaryRef *)this + 6), v124);
  CFRelease(v124);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (LOBYTE(v165[1]))
  {
    AMCP::make_thing_from_description((AMCP *)v185, v165);
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&v195, (uint64_t)v185);
    v189 = 0uLL;
    *(_QWORD *)&v190 = 0;
    *(_QWORD *)__p = v195;
    *(_QWORD *)&__p[8] = v195;
    CA::ValueRangeList::AddRange((double **)&v189, (double *)__p);
    memset(__p, 0, 24);
    v125 = (void *)v189;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(__p, (const void *)v189, *((uint64_t *)&v189 + 1), (uint64_t)(*((_QWORD *)&v189 + 1) - v189) >> 4);
    *(_OWORD *)&__p[24] = v195;
    v180 = v196;
    v181 = v197;
    v175[0] = 0;
    v175[1] = 0;
    *(_QWORD *)v176 = 0;
    v126 = *(void **)__p;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v175, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 4);
    *(_OWORD *)&v176[8] = v195;
    v177 = v196;
    v178 = v197;
    *(_QWORD *)&v183 = 0;
    v182 = 0uLL;
    v192 = &v182;
    v193 = 0;
    v127 = (char *)operator new(0x40uLL);
    *(_QWORD *)&v182 = v127;
    *((_QWORD *)&v182 + 1) = v127;
    *(_QWORD *)&v183 = v127 + 64;
    v168[0] = v127;
    v174 = v127;
    *(_QWORD *)&v171 = &v183;
    *((_QWORD *)&v171 + 1) = &v174;
    *(_QWORD *)&v172 = v168;
    BYTE8(v172) = 0;
    *((_QWORD *)v127 + 1) = 0;
    *((_QWORD *)v127 + 2) = 0;
    v128 = v175[0];
    v129 = v175[1];
    v130 = ((char *)v175[1] - (char *)v175[0]) >> 4;
    *(_QWORD *)v127 = 0;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v127, v128, (uint64_t)v129, v130);
    v131 = v177;
    *(_OWORD *)(v127 + 24) = *(_OWORD *)&v176[8];
    *(_OWORD *)(v127 + 40) = v131;
    *((_QWORD *)v127 + 7) = v178;
    v168[0] += 64;
    v132 = v168[0];
    BYTE8(v172) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v171);
    *((_QWORD *)&v182 + 1) = v132;
    if (v175[0])
    {
      v175[1] = v175[0];
      operator delete(v175[0]);
      v132 = *((_QWORD *)&v182 + 1);
    }
    *(_QWORD *)&v171 = 0x676C6F62666D7423;
    DWORD2(v171) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)v175, (uint64_t)&v171, v182, v132);
    v162 = *(_OWORD *)v175;
    v170 = *(_OWORD *)v175;
    v175[0] = &v182;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
    if (v126)
      operator delete(v126);
    if (v125)
      operator delete(v125);
    if (v187)
      v187(0, (uint64_t)v185, 0, 0);
  }
  else
  {
    v162 = 0u;
  }
  v140 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v165);
LABEL_350:
  if (!(_QWORD)v162)
  {
    AMCP::Log::Scope_Registry::get(v140);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v143 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
    {
      v144 = pthread_self();
      v145 = pthread_mach_thread_np(v144);
      *(_DWORD *)__p = 67109890;
      *(_DWORD *)&__p[4] = v145;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Null_Object.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 1385;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "available_formats_operation.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s no available formats", __p, 0x22u);
    }
    abort();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v162 + 40), &v170);
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v169);
  if (*((_QWORD *)&v162 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v162 + 1) + 16))(*((_QWORD *)&v162 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v162 + 1));
    }
  }
}

void sub_1B5A60710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981948;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981948;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981948;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A60A90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981948;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a2, (uint64_t)v4);
  if (v5)
    return v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A60B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69818C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69818C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69818C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A60CF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69818C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981848;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981848;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981848;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A60EF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981848;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _QWORD v7[4];
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t *);

  v3 = (_QWORD *)(a1 + 8);
  memset(&v7[1], 0, 24);
  v8 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  v7[0] = v4;
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v3, (uint64_t)v7);
  if (v8)
    return v8(0, (uint64_t)v7, 0, 0);
  return result;
}

void sub_1B5A6100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlRKS4_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69817C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69817C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69817C8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69817C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A61754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1718444404EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981748;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981748;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981748;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A61A78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981748;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<CA::StreamDescription>(a2, (uint64_t)v4);
  if (v5)
    return v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A61B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69816C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69816C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69816C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A61CDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69816C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1718444404EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981648;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981648;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981648;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A61F18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981648;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<int>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A62000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIiEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69815C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69815C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69815C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6217C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69815C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIiEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981548;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981548;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981548;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A623B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981548;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<AMCP::Direction>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A624A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINS_9DirectionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69814C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69814C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69814C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6261C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69814C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINS_9DirectionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *AMCP::Null::Control::Control(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, CFTypeRef *a6)
{
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  int16x8_t v19;

  v19.i64[0] = a2;
  v19.i64[1] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a5[1];
  v18[0] = *a5;
  v18[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  AMCP::Null::Object::Object((uint64_t)a1, &v19, a4, v18, a6);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (std::__shared_weak_count *)v19.i64[1];
  if (v19.i64[1])
  {
    v15 = (unint64_t *)(v19.i64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *a1 = &off_1E6980088;
  return a1;
}

void sub_1B5A62894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AMCP::Null::Control::~Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Control::populate_core@<X0>(CFDictionaryRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v7;
  AMCP::Thing *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  CFIndex v13;
  CFStringRef v14;
  AMCP::Thing *v15;
  AMCP::Thing *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  CFIndex v21;
  CFStringRef v22;
  AMCP::Thing *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  std::runtime_error *v29;
  std::runtime_error *v30;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::runtime_error *v33;
  _BYTE v34[40];
  char v35;
  unsigned int v36[4];
  std::string __p;
  void (*v38)(_QWORD, std::string *, _QWORD, _QWORD);
  CFTypeRef v39;
  char v40;
  __int128 v41;
  __int128 v42;
  void (*v43)(_QWORD, __int128 *, _QWORD, _QWORD);
  int v44;
  uint64_t v45;

  AMCP::Null::Object::populate_core((AMCP::Null::Object *)this, a2, a3);
  v34[0] = 0;
  v35 = 0;
  strcpy((char *)v36, "pcscbolg");
  BYTE1(v36[2]) = 0;
  HIWORD(v36[2]) = 0;
  v43 = 0;
  v42 = 0u;
  v41 = 0u;
  if (!this[6])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v36, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v7)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v39, this[6], v7);
  CFRelease(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v40)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v39);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v41, v8);
    if (v38)
      v38(0, &__p, 0, 0);
  }
  if (v43)
  {
    v44 = 1668506480;
    v45 = *(_QWORD *)&v36[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v44, (uint64_t)&v41);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
  if (v43)
    v43(0, &v41, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v9 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
  v34[0] = 0;
  v35 = 0;
  strcpy((char *)v36, "mlecbolg");
  BYTE1(v36[2]) = 0;
  HIWORD(v36[2]) = 0;
  v43 = 0;
  v42 = 0u;
  v41 = 0u;
  if (!this[6])
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v36, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &__p;
  else
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  v14 = CFStringCreateWithBytes(0, (const UInt8 *)v12, v13, 0x8000100u, 0);
  if (!v14)
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v39, this[6], v14);
  CFRelease(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v40)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v39);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v41, v16);
    if (v38)
      v38(0, &__p, 0, 0);
  }
  else if (v35)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v41, (uint64_t)v34, v15);
  }
  if (v43)
  {
    v44 = 1667591277;
    v45 = *(_QWORD *)&v36[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v44, (uint64_t)&v41);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
  if (v43)
    v43(0, &v41, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v17 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
  v34[0] = 0;
  v35 = 0;
  strcpy((char *)v36, "odrcbolg");
  BYTE1(v36[2]) = 0;
  HIWORD(v36[2]) = 0;
  v43 = 0;
  v42 = 0u;
  v41 = 0u;
  if (!this[6])
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&__p, v36, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__p;
  else
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = CFStringCreateWithBytes(0, (const UInt8 *)v20, v21, 0x8000100u, 0);
  if (!v22)
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v39, this[6], v22);
  CFRelease(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v40)
    goto LABEL_68;
  AMCP::make_thing_from_description((AMCP *)&__p, &v39);
  AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v41, v23);
  if (v38)
    v38(0, &__p, 0, 0);
  if (v43)
  {
    v44 = 1668441199;
    v45 = *(_QWORD *)&v36[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v44, (uint64_t)&v41);
  }
  else
  {
LABEL_68:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
  if (v43)
    v43(0, &v41, 0, 0);
  if (__p.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
}

void sub_1B5A62F1C(void *a1)
{
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMCP::Null::Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Device::~Device(std::__shared_mutex_base *this)
{
  const void *sig;
  void **opaque;

  this->__mut_.__m_.__sig = (uint64_t)&off_1E697FFB8;
  sig = (const void *)this[1].__mut_.__m_.__sig;
  if (sig)
    CFRelease(sig);
  opaque = (void **)&this->__gate2_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  opaque = (void **)this->__gate2_.__cv_.__opaque;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  AMCP::Null::Object::~Object(this);
}

{
  const void *sig;
  void **opaque;

  this->__mut_.__m_.__sig = (uint64_t)&off_1E697FFB8;
  sig = (const void *)this[1].__mut_.__m_.__sig;
  if (sig)
    CFRelease(sig);
  opaque = (void **)&this->__gate2_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  opaque = (void **)this->__gate2_.__cv_.__opaque;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Device::build_cores(AMCP::Null::Device *this)
{
  int16x8_t v2;
  std::string *v3;
  CFIndex size;
  CFStringRef v5;
  int16x8_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  CFIndex v19;
  CFStringRef v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned int *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v40;
  std::runtime_error *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string *v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string v55;
  CFArrayRef v56;
  char v57;
  std::string *v58;

  AMCP::Null::Object::build_cores(this);
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_59;
  }
  v2.i64[0] = 0x696E707473746D23;
  v48 = 0x696E707473746D23;
  LODWORD(v49) = 0;
  AMCP::Address::to_string(&v55, (unsigned int *)&v48, v2);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v55;
  else
    v3 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    size = v55.__r_.__value_.__l.__size_;
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, size, 0x8000100u, 0);
  if (!v5)
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v56, *((CFDictionaryRef *)this + 6), v5);
  CFRelease(v5);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (v57)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v53 = *((_QWORD *)this + 1);
    v54 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v51, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v11 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v11 = 0x161737472;
    v49 = v11 + 2;
    v50 = v11 + 2;
    v48 = (uint64_t)v11;
    AMCP::Null::make_object_list(&v55.__r_.__value_.__l.__data_, &v53, v10, &v51, &v56, (unsigned int **)&v48);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((void **)this + 15);
    *((std::string *)this + 5) = v55;
    memset(&v55, 0, sizeof(v55));
    v46 = &v55;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    operator delete(v11);
    v12 = v52;
    if (v52)
    {
      v13 = (unint64_t *)&v52->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v54;
    if (v54)
    {
      v16 = (unint64_t *)&v54->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_59:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6.i64[0] = 0x6F75747073746D23;
  v48 = 0x6F75747073746D23;
  LODWORD(v49) = 0;
  AMCP::Address::to_string(&v55, (unsigned int *)&v48, v6);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v55;
  else
    v18 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v19 = v55.__r_.__value_.__l.__size_;
  v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
  if (!v20)
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v46, *((CFDictionaryRef *)this + 6), v20);
  CFRelease(v20);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (v47)
  {
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v44 = *((_QWORD *)this + 1);
    v45 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v42, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v25 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v25 = 0x161737472;
    v49 = v25 + 2;
    v50 = v25 + 2;
    v48 = (uint64_t)v25;
    AMCP::Null::make_object_list(&v55.__r_.__value_.__l.__data_, &v44, v24, &v42, (CFArrayRef *)&v46, (unsigned int **)&v48);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((void **)this + 18);
    *((std::string *)this + 6) = v55;
    memset(&v55, 0, sizeof(v55));
    v58 = &v55;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    operator delete(v25);
    v26 = v43;
    if (v43)
    {
      v27 = (unint64_t *)&v43->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v45;
    if (v45)
    {
      v30 = (unint64_t *)&v45->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v32 = (uint64_t *)*((_QWORD *)this + 15);
  v33 = (uint64_t *)*((_QWORD *)this + 16);
  while (v32 != v33)
  {
    v34 = *v32;
    v32 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  }
  v36 = (uint64_t *)*((_QWORD *)this + 18);
  v35 = (uint64_t *)*((_QWORD *)this + 19);
  while (v36 != v35)
  {
    v37 = *v36;
    v36 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v56);
}

void sub_1B5A63544(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::Device::update_cores(AMCP::Null::Device *this, CFDictionaryRef *a2, int16x8_t a3)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v7;
  int16x8_t v8;
  std::string *v9;
  CFIndex v10;
  CFStringRef v11;
  int16x8_t v12;
  std::string *v13;
  CFIndex v14;
  CFStringRef v15;
  int16x8_t v16;
  std::string *v17;
  CFIndex v18;
  CFStringRef v19;
  int16x8_t v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  CFTypeRef cf;
  int v34;
  std::string __p;
  CFTypeRef v36;
  char v37;

  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_49;
  }
  cf = (CFTypeRef)0x696E707473746D23;
  v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&cf, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v7)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v36, *((CFDictionaryRef *)this + 6), v7);
  CFRelease(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_49;
  }
  v31 = 0x6F75747073746D23;
  v32 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v31, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v10 = __p.__r_.__value_.__l.__size_;
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_49;
  }
  v29 = 0x696E707473746D23;
  v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
  if (!v15)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v31, *a2, v15);
  CFRelease(v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_49:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = 0x6F75747073746D23;
  v28 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v27, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
  if (!v19)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v29, *a2, v19);
  CFRelease(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  AMCP::Null::Object::update_cores(this, a2, v20);
  AMCP::Null::Device::update_stream_list((uint64_t)this, (char **)this + 15, v36, v37, (uint64_t)&v31);
  AMCP::Null::Device::update_stream_list((uint64_t)this, (char **)this + 18, cf, v34, (uint64_t)&v29);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
}

void sub_1B5A63970(void *a1)
{
  __clang_call_terminate(a1);
}

std::__shared_mutex_base *AMCP::Null::Device::destroy_cores(std::__shared_mutex_base *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[24];
  v3 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[32];
  while (v2 != v3)
  {
    v4 = *v2;
    v2 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  v5 = *(uint64_t **)this->__gate2_.__cv_.__opaque;
  v6 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[8];
  while (v5 != v6)
  {
    v7 = *v5;
    v5 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  return AMCP::Null::Object::destroy_cores(this);
}

uint64_t AMCP::Null::Device::populate_core@<X0>(CFDictionaryRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  char v8;
  std::string *p_p;
  CFIndex size;
  CFStringRef v11;
  AMCP::Thing *v12;
  AMCP::Thing *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  const UInt8 *v21;
  CFIndex v22;
  CFStringRef v23;
  AMCP::Thing *v24;
  AMCP::Thing *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  int16x8_t v40;
  const UInt8 *v41;
  CFIndex v42;
  CFStringRef v43;
  int16x8_t v44;
  _BOOL4 v45;
  const UInt8 *v46;
  CFIndex v47;
  CFStringRef v48;
  AMCP::Log::Scope_Registry *Count;
  _BOOL4 v50;
  std::__shared_weak_count *v51;
  NSObject *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  int16x8_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  const UInt8 *v77;
  CFIndex v78;
  CFStringRef v79;
  _BOOL4 v80;
  int16x8_t v81;
  const UInt8 *v82;
  CFIndex v83;
  CFStringRef v84;
  AMCP::Thing *v85;
  AMCP::Thing *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  __int128 *v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  unint64_t v94;
  _QWORD *v95;
  CFTypeRef *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const UInt8 *v101;
  CFIndex v102;
  CFStringRef v103;
  _BOOL4 v104;
  int16x8_t v105;
  const UInt8 *v106;
  CFIndex v107;
  CFStringRef v108;
  CFDictionaryRef v109;
  const void *v110;
  uint64_t v111;
  unint64_t v112;
  __int128 *v113;
  uint64_t v114;
  unint64_t v115;
  __int128 *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  const char *v124;
  const char *v125;
  std::runtime_error *exception;
  std::runtime_error *v127;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  std::runtime_error *v132;
  std::runtime_error *v133;
  std::runtime_error *v134;
  std::runtime_error *v135;
  std::runtime_error *v136;
  std::runtime_error *v137;
  int v138;
  int v139;
  unsigned int v140[4];
  uint64_t v141;
  std::__shared_weak_count *v142;
  _BYTE v143[12];
  _BYTE theArray[12];
  std::string __p;
  void (*v146)(_QWORD, std::string *, _QWORD, _QWORD);
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  __int128 v151;
  void (*v152)(uint64_t, __int128 *, __int128 *, _QWORD);
  double v153[2];
  __int128 v154;
  __int128 v155;
  void (*v156)(uint64_t, __int128 *, __int128 *, _QWORD);
  __int128 v157;
  __int128 v158;
  void (*v159)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  __int128 v160;
  __int128 v161;
  void (*v162)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v163;
  int v164;
  _BYTE buf[48];
  int v166;
  CFTypeRef v167;
  char v168;
  CFTypeRef *v169;
  __int128 v170;
  __int128 v171;
  void (*v172)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Clock::populate_core((AMCP::Null::Clock *)this, a2, a3);
  v170 = 0u;
  v171 = 0u;
  v172 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)buf, (uint64_t)&v170);
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = AMCP::Property_Traits<1935763060u>::k_valid_scopes[v5];
    LODWORD(v157) = 1935763060;
    *(_QWORD *)((char *)&v157 + 4) = v7;
    v162 = 0;
    v160 = 0u;
    v161 = 0u;
    if (!this[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v8 = v6;
    AMCP::Address::to_string(&__p, (unsigned int *)&v157, (int16x8_t)0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v11)
    {
      v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v127, "Could not construct");
      __cxa_throw(v127, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v154, this[6], v11);
    CFRelease(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (BYTE8(v154))
    {
      AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v154);
      AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v160, v13);
      if (v146)
        v146(0, &__p, 0, 0);
    }
    else if (buf[40])
    {
      AMCP::Thing::operator=((AMCP::Thing *)&v160, (uint64_t)buf, v12);
    }
    if (v162)
    {
      LODWORD(v150) = 1935763060;
      *(_QWORD *)((char *)&v150 + 4) = *(_QWORD *)((char *)&v157 + 4);
      AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v150, (uint64_t)&v160);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v154);
    if (v162)
      v162(0, &v160, 0, 0);
    if (__p.__r_.__value_.__r.__words[0])
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
    v14 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v6 = 0;
    v5 = 1;
  }
  while ((v8 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if (v172)
    v172(0, (uint64_t)&v170, 0, 0);
  v17 = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v147 = 0;
  v18 = 1;
  do
  {
    v19 = AMCP::Property_Traits<1936879204u>::k_valid_scopes[v17];
    *(_DWORD *)v143 = 1936879204;
    *(_DWORD *)&v143[4] = v19;
    *(_DWORD *)&v143[8] = 0;
    v152 = 0;
    v150 = 0u;
    v151 = 0u;
    if (!this[6])
    {
      v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v128, "Could not construct");
      __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v20 = v18;
    AMCP::Address::to_string((std::string *)buf, (unsigned int *)v143, (int16x8_t)0);
    if (buf[23] >= 0)
      v21 = buf;
    else
      v21 = *(const UInt8 **)buf;
    if (buf[23] >= 0)
      v22 = buf[23];
    else
      v22 = *(_QWORD *)&buf[8];
    v23 = CFStringCreateWithBytes(0, v21, v22, 0x8000100u, 0);
    if (!v23)
    {
      v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v129, "Could not construct");
      __cxa_throw(v129, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v167, this[6], v23);
    CFRelease(v23);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v168)
    {
      AMCP::make_thing_from_description((AMCP *)buf, &v167);
      AMCP::swap((AMCP::Thing *)buf, (AMCP::Thing *)&v150, v25);
      if (*(_QWORD *)&buf[32])
        (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&buf[32])(0, buf, 0, 0);
    }
    else if (v147)
    {
      AMCP::Thing::operator=((AMCP::Thing *)&v150, (uint64_t)&__p, v24);
    }
    if (!v152)
    {
      v26 = 0;
      v148 = 0;
      v149 = 0;
      goto LABEL_78;
    }
    *(_DWORD *)theArray = 1936879204;
    v138 = *(_DWORD *)&v143[8];
    *(_QWORD *)&theArray[4] = *(_QWORD *)&v143[4];
    v156 = 0;
    v154 = 0u;
    v155 = 0u;
    v152(1, &v150, &v154, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v148, v138, *(double *)theArray);
    v26 = v148;
    v27 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    v160 = 0u;
    v161 = 0u;
    v162 = 0;
    if (v156)
      v156(1, &v154, &v160, 0);
    *((_QWORD *)&v171 + 1) = 0;
    v28 = (char *)operator new(0x30uLL);
    *(_QWORD *)v28 = &off_1E6981048;
    *(_OWORD *)(v28 + 8) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
    *((_QWORD *)v28 + 5) = 0;
    if (v162)
      v162(1, &v160, v28 + 8, 0);
    *((_QWORD *)&v171 + 1) = v28;
    memset(buf, 0, 40);
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v170);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v26, v27, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v29 = (__int128 *)*((_QWORD *)&v171 + 1);
    if (*((__int128 **)&v171 + 1) == &v170)
    {
      v29 = &v170;
      v30 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v171 + 1))
        goto LABEL_61;
      v30 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_61:
    if (v162)
      v162(0, &v160, 0, 0);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v160, v26);
    v163 = *(_QWORD *)(v26 + 40);
    v164 = *(_DWORD *)(v26 + 48);
    v31 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
    v32 = v160;
    v160 = 0uLL;
    *(_OWORD *)buf = v32;
    *(_OWORD *)&buf[16] = v161;
    *(_DWORD *)&buf[32] = (_DWORD)v162;
    if (*((_QWORD *)&v161 + 1))
    {
      v33 = *(_QWORD *)(v161 + 8);
      if ((*((_QWORD *)&v32 + 1) & (*((_QWORD *)&v32 + 1) - 1)) != 0)
      {
        if (v33 >= *((_QWORD *)&v32 + 1))
          v33 %= *((_QWORD *)&v32 + 1);
      }
      else
      {
        v33 &= *((_QWORD *)&v32 + 1) - 1;
      }
      *(_QWORD *)(v32 + 8 * v33) = &buf[16];
      v161 = 0uLL;
    }
    *(_QWORD *)&buf[40] = v163;
    v166 = v164;
    *((_QWORD *)&v158 + 1) = 0;
    v34 = operator new(0x40uLL);
    *v34 = &off_1E69810C8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v34 + 1), (uint64_t *)buf);
    v34[6] = *(_QWORD *)&buf[40];
    *((_DWORD *)v34 + 14) = v166;
    *((_QWORD *)&v158 + 1) = v34;
    v170 = 0u;
    v171 = 0u;
    v172 = 0;
    std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)&v170, (uint64_t)&v157);
    v172 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v26, v31, (AMCP *)&v170);
    if (v172)
      v172(0, (uint64_t)&v170, 0, 0);
    v35 = (__int128 *)*((_QWORD *)&v158 + 1);
    if (*((__int128 **)&v158 + 1) == &v157)
    {
      v35 = &v157;
      v36 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v158 + 1))
        goto LABEL_76;
      v36 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_76:
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v160);
    if (v156)
      v156(0, &v154, 0, 0);
LABEL_78:
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v167);
    if (v152)
      v152(0, &v150, 0, 0);
    if (v26)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v26 + 40), &v148);
    v37 = v149;
    if (v149)
    {
      p_shared_owners = (unint64_t *)&v149->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v18 = 0;
    v17 = 1;
  }
  while ((v20 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (!this[6])
    goto LABEL_283;
  *(_QWORD *)&v160 = 0x696E707473746D23;
  DWORD2(v160) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v160, v40);
  if (buf[23] >= 0)
    v41 = buf;
  else
    v41 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v42 = buf[23];
  else
    v42 = *(_QWORD *)&buf[8];
  v43 = CFStringCreateWithBytes(0, v41, v42, 0x8000100u, 0);
  if (!v43)
  {
    v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v130, "Could not construct");
    __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(theArray, this[6], v43);
  CFRelease(v43);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (theArray[8])
  {
    if (*(_QWORD *)theArray)
    {
      v45 = CFArrayGetCount(*(CFArrayRef *)theArray) != 0;
      goto LABEL_102;
    }
    goto LABEL_283;
  }
  v45 = 0;
LABEL_102:
  if (!this[6])
    goto LABEL_283;
  *(_QWORD *)&v160 = 0x6F75747073746D23;
  DWORD2(v160) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v160, v44);
  if (buf[23] >= 0)
    v46 = buf;
  else
    v46 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v47 = buf[23];
  else
    v47 = *(_QWORD *)&buf[8];
  v48 = CFStringCreateWithBytes(0, v46, v47, 0x8000100u, 0);
  if (!v48)
  {
    v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Could not construct");
    __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(v143, this[6], v48);
  CFRelease(v48);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v143[8])
  {
    if (!*(_QWORD *)v143)
      goto LABEL_283;
    Count = (AMCP::Log::Scope_Registry *)CFArrayGetCount(*(CFArrayRef *)v143);
    v50 = Count != 0;
  }
  else
  {
    v50 = 0;
  }
  AMCP::Log::Scope_Registry::get(Count);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v51 = *(std::__shared_weak_count **)&buf[8];
  v52 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
  {
    v122 = pthread_self();
    v123 = pthread_mach_thread_np(v122);
    v124 = "no input";
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v123;
    if (v45)
      v124 = "input";
    v125 = "no output";
    *(_QWORD *)&buf[10] = "Null_Object.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 1024;
    *(_WORD *)&buf[8] = 2080;
    *(_WORD *)&buf[24] = 2080;
    if (v50)
      v125 = "output";
    *(_QWORD *)&buf[26] = v124;
    *(_WORD *)&buf[34] = 2080;
    *(_QWORD *)&buf[36] = v125;
    _os_log_debug_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d This device has %s and %s", buf, 0x2Cu);
  }
  LOBYTE(v160) = v45;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v160, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v55 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v56 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  LOBYTE(v160) = v50;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v160, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v58 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  LOBYTE(v160) = v50;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v160, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v61 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v62 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *((_DWORD *)this + 22);
  *(_QWORD *)buf = *((_QWORD *)this[1] + 2);
  *(_DWORD *)&buf[8] = v64;
  *(_DWORD *)&buf[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v160, 0, (__int128 *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *((_DWORD *)this + 22);
  *(_QWORD *)buf = *((_QWORD *)this[1] + 2);
  *(_DWORD *)&buf[8] = v68;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v160, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *((_DWORD *)this + 22);
  *(_QWORD *)buf = *((_QWORD *)this[1] + 2);
  *(_DWORD *)&buf[8] = v72;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v160, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (!this[6])
  {
LABEL_283:
    v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v134, "Could not construct");
    goto LABEL_287;
  }
  *(_QWORD *)&v160 = 0x676C6F6264646573;
  DWORD2(v160) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v160, v73);
  if (buf[23] >= 0)
    v77 = buf;
  else
    v77 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v78 = buf[23];
  else
    v78 = *(_QWORD *)&buf[8];
  v79 = CFStringCreateWithBytes(0, v77, v78, 0x8000100u, 0);
  if (!v79)
  {
    v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Could not construct");
    __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v80 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], v79);
  CFRelease(v79);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v80)
      goto LABEL_218;
  }
  else if (!v80)
  {
    goto LABEL_218;
  }
  strcpy((char *)v140, "seddbolg");
  BYTE1(v140[2]) = 0;
  HIWORD(v140[2]) = 0;
  v157 = 0u;
  v158 = 0u;
  v159 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&__p, (uint64_t)&v157);
  v152 = 0;
  v150 = 0u;
  v151 = 0u;
  if (!this[6])
  {
    v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v135, "Could not construct");
    __cxa_throw(v135, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)buf, v140, (int16x8_t)0);
  if (buf[23] >= 0)
    v82 = buf;
  else
    v82 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v83 = buf[23];
  else
    v83 = *(_QWORD *)&buf[8];
  v84 = CFStringCreateWithBytes(0, v82, v83, 0x8000100u, 0);
  if (!v84)
  {
    v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v136, "Could not construct");
    __cxa_throw(v136, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v148, this[6], v84);
  CFRelease(v84);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((_BYTE)v149)
  {
    AMCP::make_thing_from_description((AMCP *)buf, (CFTypeRef *)&v148);
    AMCP::swap((AMCP::Thing *)buf, (AMCP::Thing *)&v150, v86);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&buf[32])(0, buf, 0, 0);
  }
  else if (v147)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v150, (uint64_t)&__p, v85);
  }
  if (v152)
  {
    LODWORD(v153[0]) = 1684301171;
    v139 = v140[2];
    *(double *)((char *)v153 + 4) = *(double *)&v140[1];
    v156 = 0;
    v154 = 0u;
    v155 = 0u;
    v152(1, &v150, &v154, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v141, v139, v153[0]);
    v87 = v141;
    v88 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    v160 = 0u;
    v161 = 0u;
    v162 = 0;
    if (v156)
      v156(1, &v154, &v160, 0);
    *((_QWORD *)&v171 + 1) = 0;
    v89 = (char *)operator new(0x30uLL);
    *(_QWORD *)v89 = &off_1E6981148;
    *(_OWORD *)(v89 + 8) = 0u;
    *(_OWORD *)(v89 + 24) = 0u;
    *((_QWORD *)v89 + 5) = 0;
    if (v162)
      v162(1, &v160, v89 + 8, 0);
    *((_QWORD *)&v171 + 1) = v89;
    memset(buf, 0, 40);
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v170);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v87, v88, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v90 = (__int128 *)*((_QWORD *)&v171 + 1);
    if (*((__int128 **)&v171 + 1) == &v170)
    {
      v91 = 4;
      v90 = &v170;
LABEL_191:
      (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
    }
    else if (*((_QWORD *)&v171 + 1))
    {
      v91 = 5;
      goto LABEL_191;
    }
    if (v162)
      v162(0, &v160, 0, 0);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v160, v87);
    v163 = *(_QWORD *)(v87 + 40);
    v164 = *(_DWORD *)(v87 + 48);
    v92 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    v93 = v160;
    v160 = 0uLL;
    *(_OWORD *)buf = v93;
    *(_OWORD *)&buf[16] = v161;
    *(_DWORD *)&buf[32] = (_DWORD)v162;
    if (*((_QWORD *)&v161 + 1))
    {
      v94 = *(_QWORD *)(v161 + 8);
      if ((*((_QWORD *)&v93 + 1) & (*((_QWORD *)&v93 + 1) - 1)) != 0)
      {
        if (v94 >= *((_QWORD *)&v93 + 1))
          v94 %= *((_QWORD *)&v93 + 1);
      }
      else
      {
        v94 &= *((_QWORD *)&v93 + 1) - 1;
      }
      *(_QWORD *)(v93 + 8 * v94) = &buf[16];
      v161 = 0uLL;
    }
    *(_QWORD *)&buf[40] = v163;
    v166 = v164;
    v169 = 0;
    v95 = operator new(0x40uLL);
    *v95 = &off_1E69811C8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v95 + 1), (uint64_t *)buf);
    v95[6] = *(_QWORD *)&buf[40];
    *((_DWORD *)v95 + 14) = v166;
    v169 = (CFTypeRef *)v95;
    v170 = 0u;
    v171 = 0u;
    v172 = 0;
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v170, (uint64_t)&v167);
    v172 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v87, v92, (AMCP *)&v170);
    if (v172)
      v172(0, (uint64_t)&v170, 0, 0);
    v96 = v169;
    if (v169 == &v167)
    {
      v97 = 4;
      v96 = &v167;
LABEL_206:
      (*((void (**)(void))*v96 + v97))();
    }
    else if (v169)
    {
      v97 = 5;
      goto LABEL_206;
    }
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v160);
    if (v156)
      v156(0, &v154, 0, 0);
  }
  else
  {
    v87 = 0;
    v141 = 0;
    v142 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v148);
  if (v152)
    v152(0, &v150, 0, 0);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v87 + 40), &v141);
  v98 = v142;
  if (v142)
  {
    v99 = (unint64_t *)&v142->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (v159)
    v159(0, (uint64_t)&v157, 0, 0);
LABEL_218:
  if (!this[6])
    goto LABEL_286;
  *(_QWORD *)&v160 = 0x676C6F6263646573;
  DWORD2(v160) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v160, v81);
  if (buf[23] >= 0)
    v101 = buf;
  else
    v101 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v102 = buf[23];
  else
    v102 = *(_QWORD *)&buf[8];
  v103 = CFStringCreateWithBytes(0, v101, v102, 0x8000100u, 0);
  if (!v103)
  {
    v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v133, "Could not construct");
    __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v104 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], v103);
  CFRelease(v103);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v104)
      goto LABEL_230;
    goto LABEL_265;
  }
  if (!v104)
    goto LABEL_265;
LABEL_230:
  if (!this[6])
  {
LABEL_286:
    v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v134, "Could not construct");
LABEL_287:
    __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)&v160 = 0x676C6F6263646573;
  DWORD2(v160) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v160, v105);
  if (buf[23] >= 0)
    v106 = buf;
  else
    v106 = *(const UInt8 **)buf;
  if (buf[23] >= 0)
    v107 = buf[23];
  else
    v107 = *(_QWORD *)&buf[8];
  v108 = CFStringCreateWithBytes(0, v106, v107, 0x8000100u, 0);
  if (!v108)
  {
    v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v137, "Could not construct");
    __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&__p, this[6], v108);
  CFRelease(v108);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (__p.__r_.__value_.__s.__data_[8])
  {
    v109 = this[21];
    v110 = (const void *)__p.__r_.__value_.__r.__words[0];
    this[21] = (CFDictionaryRef)__p.__r_.__value_.__r.__words[0];
    if (v110)
      CFRetain(v110);
    if (v109)
      CFRelease(v109);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v170, 0, 1.58366007e190);
  v111 = v170;
  v112 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  *(_QWORD *)&v160 = &off_1E6981248;
  *((_QWORD *)&v160 + 1) = this;
  *((_QWORD *)&v161 + 1) = &v160;
  memset(buf, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v160);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v111, v112, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v113 = (__int128 *)*((_QWORD *)&v161 + 1);
  if (*((__int128 **)&v161 + 1) == &v160)
  {
    v114 = 4;
    v113 = &v160;
LABEL_251:
    (*(void (**)(void))(*(_QWORD *)v113 + 8 * v114))();
  }
  else if (*((_QWORD *)&v161 + 1))
  {
    v114 = 5;
    goto LABEL_251;
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(v111);
  v115 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  *(_QWORD *)&v160 = &off_1E69812C8;
  *((_QWORD *)&v160 + 1) = this;
  *((_QWORD *)&v161 + 1) = &v160;
  memset(buf, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v160);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v111, v115, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v116 = (__int128 *)*((_QWORD *)&v161 + 1);
  if (*((__int128 **)&v161 + 1) == &v160)
  {
    v117 = 4;
    v116 = &v160;
LABEL_258:
    (*(void (**)(void))(*(_QWORD *)v116 + 8 * v117))();
  }
  else if (*((_QWORD *)&v161 + 1))
  {
    v117 = 5;
    goto LABEL_258;
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(v111);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v111 + 40), &v170);
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
LABEL_265:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v143);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)theArray);
}

void sub_1B5A65160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Device::do_set_property(AMCP::Null::Device *this, unsigned int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void (*v21)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD);
  char *v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void (*v34)(uint64_t, const AMCP::Thing *, _BYTE *, _QWORD);
  char *v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void (*v46)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD);
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _OWORD v63[2];
  void (*v64)(uint64_t, _OWORD *, char *, _QWORD);
  std::__shared_weak_count *v65[2];
  __int128 v66;
  unsigned int v67;
  _BYTE v68[32];
  void (*v69)(uint64_t, _BYTE *, char *, _QWORD);
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  _OWORD v74[2];
  void (*v75)(uint64_t, _OWORD *, char *, _QWORD);
  char *v76;
  _QWORD *v77;
  int v78;
  int v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = *((_QWORD *)this + 7);
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 88);
        goto LABEL_7;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = (unsigned int *)((char *)this + 40);
LABEL_7:
  v12 = *v11;
  v13 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 1718444404)
  {
    v26 = operator new(0x20uLL);
    v26[1] = 0;
    v26[2] = 0;
    *((_BYTE *)v26 + 24) = 0;
    *v26 = &off_1E69A0170;
    v76 = (char *)(v26 + 3);
    v77 = v26;
    v78 = 0;
    v79 = 0;
    v27 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v28 = *((_DWORD *)this + 22);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v65[0] = *((std::__shared_weak_count **)this + 3);
    v65[1] = v29;
    if (v29)
    {
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)&v66 = v10;
    *((_QWORD *)&v66 + 1) = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v67 = a2;
    memset(v68, 0, sizeof(v68));
    v69 = 0;
    v34 = (void (*)(uint64_t, const AMCP::Thing *, _BYTE *, _QWORD))*((_QWORD *)a4 + 4);
    if (v34)
      v34(1, a4, v68, 0);
    v81 = 0;
    v35 = (char *)operator new(0x58uLL);
    v36 = v66;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)v65;
    *(_QWORD *)v35 = &off_1E69813C8;
    v65[0] = 0;
    v65[1] = 0;
    *(_OWORD *)(v35 + 24) = v36;
    v66 = 0uLL;
    *((_DWORD *)v35 + 10) = v67;
    *((_OWORD *)v35 + 3) = 0u;
    *((_OWORD *)v35 + 4) = 0u;
    *((_QWORD *)v35 + 10) = 0;
    if (v69)
      v69(2, v68, v35 + 48, 0);
    v81 = v35;
    AMCP::Core::Conductor::enqueue_config_change(v27, v12, v28, 1, (uint64_t)v80);
    v37 = v81;
    if (v81 == v80)
    {
      v38 = 4;
      v37 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_55;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_55:
    if (v69)
      v69(0, v68, 0, 0);
    if (*((_QWORD *)&v66 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
      }
    }
    v53 = v65[1];
    if (v65[1])
      goto LABEL_63;
LABEL_64:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v76);
    v50 = 257;
    if (!v9)
      return v50;
    goto LABEL_65;
  }
  if (v13 == 1852597868)
  {
    if (*((_DWORD *)this + 22) != a2)
      goto LABEL_51;
    v39 = operator new(0x20uLL);
    v39[1] = 0;
    v39[2] = 0;
    *v39 = &off_1E69A0170;
    *((_BYTE *)v39 + 24) = 0;
    v76 = (char *)(v39 + 3);
    v77 = v39;
    v78 = 0;
    v79 = 0;
    v40 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v41 = *((_QWORD *)this + 4);
    *(_QWORD *)&v59 = *((_QWORD *)this + 3);
    *((_QWORD *)&v59 + 1) = v41;
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 16);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v9;
    if (v9)
    {
      v44 = (unint64_t *)&v9->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v61 = *(_QWORD *)a3;
    v62 = *((_DWORD *)a3 + 2);
    memset(v63, 0, sizeof(v63));
    v64 = 0;
    v46 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD))*((_QWORD *)a4 + 4);
    if (v46)
      v46(1, a4, v63, 0);
    v81 = 0;
    v47 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v47 + 8) = v59;
    *(_QWORD *)v47 = &off_1E6981448;
    *(_OWORD *)(v47 + 24) = v60;
    *((_QWORD *)v47 + 5) = v61;
    *((_DWORD *)v47 + 12) = v62;
    *(_OWORD *)(v47 + 56) = 0u;
    *(_OWORD *)(v47 + 72) = 0u;
    *((_QWORD *)v47 + 11) = 0;
    if (v64)
      v64(2, v63, v47 + 56, 0);
    v81 = v47;
    AMCP::Core::Conductor::enqueue_config_change(v40, v12, a2, 1, (uint64_t)v80);
    v48 = v81;
    if (v81 == v80)
    {
      v49 = 4;
      v48 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_83;
      v49 = 5;
    }
    (*(void (**)(_QWORD *))(*v48 + 8 * v49))(v48);
LABEL_83:
    if (v64)
      v64(0, v63, 0, 0);
    goto LABEL_64;
  }
  if (v13 == 1853059700 && *((_DWORD *)this + 22) == a2)
  {
    v14 = operator new(0x20uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E69A0170;
    *((_BYTE *)v14 + 24) = 0;
    v76 = (char *)(v14 + 3);
    v77 = v14;
    v78 = 0;
    v79 = 0;
    v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
    v16 = *((_QWORD *)this + 4);
    *(_QWORD *)&v70 = *((_QWORD *)this + 3);
    *((_QWORD *)&v70 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 16);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_QWORD *)&v71 = v10;
    *((_QWORD *)&v71 + 1) = v9;
    if (v9)
    {
      v19 = (unint64_t *)&v9->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v72 = *(_QWORD *)a3;
    v73 = *((_DWORD *)a3 + 2);
    memset(v74, 0, sizeof(v74));
    v75 = 0;
    v21 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, _QWORD))*((_QWORD *)a4 + 4);
    if (v21)
      v21(1, a4, v74, 0);
    v81 = 0;
    v22 = (char *)operator new(0x60uLL);
    v23 = v71;
    *(_OWORD *)(v22 + 8) = v70;
    *(_QWORD *)v22 = &off_1E6981348;
    v70 = 0uLL;
    *(_OWORD *)(v22 + 24) = v23;
    v71 = 0uLL;
    *((_QWORD *)v22 + 5) = v72;
    *((_DWORD *)v22 + 12) = v73;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *((_QWORD *)v22 + 11) = 0;
    if (v75)
      v75(2, v74, v22 + 56, 0);
    v81 = v22;
    AMCP::Core::Conductor::enqueue_config_change(v15, v12, a2, 1, (uint64_t)v80);
    v24 = v81;
    if (v81 == v80)
    {
      v25 = 4;
      v24 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_72;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_72:
    if (v75)
      v75(0, v74, 0, 0);
    if (*((_QWORD *)&v71 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 16))(*((_QWORD *)&v71 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v71 + 1));
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (!*((_QWORD *)&v70 + 1))
      goto LABEL_64;
LABEL_63:
    std::__shared_weak_count::__release_weak(v53);
    goto LABEL_64;
  }
LABEL_51:
  v50 = AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  if (!v9)
    return v50;
LABEL_65:
  v54 = (unint64_t *)&v9->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v50;
}

void sub_1B5A659D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6981448;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6981448;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = &off_1E6981448;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A65B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6981448;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  const void *v8;
  std::string *p_p;
  CFIndex size;
  CFStringRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::runtime_error *exception;
  uint64_t v15;
  int v16;
  std::string __p;
  const void *v18;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v18, a1 + 56);
        v8 = v18;
        if (v18)
        {
          v7.i64[0] = 0x676C6F626E6C666CLL;
          v15 = 0x676C6F626E6C666CLL;
          v16 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
          if (!v11)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v11, v8);
          CFRelease(v11);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0])
            CFRelease(__p.__r_.__value_.__l.__data_);
          CFRelease(v8);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A65D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  const void *v17;
  const void *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a16 < 0)
    operator delete(__p);
  CFRelease(v18);
  if (v17)
    CFRelease(v17);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 80);
  if (v2)
    v2(0, a1 + 48, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v10)
    v10(1, a2 + 48);
  return a1;
}

void sub_1B5A65F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E69813C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[10];
  if (v2)
    v2(0, a1 + 6, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E69813C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[10];
  if (v2)
    v2(0, a1 + 6, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_1E69813C8;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A66038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69813C8;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1::operator()(a1 + 8);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target_type()
{
}

void AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  int v6;
  const __CFDictionary *i;
  unsigned int v8;
  int16x8_t v9;
  uint64_t v10;
  const UInt8 *v11;
  CFIndex v12;
  const __CFArray *v13;
  int16x8_t v14;
  const UInt8 *v15;
  CFIndex v16;
  CFStringRef v17;
  const void *v18;
  const void *v19;
  void *Mutable;
  int16x8_t v21;
  const __CFArray *v22;
  double v23;
  CFIndex Count;
  CFIndex v25;
  CFArrayRef v26;
  unint64_t v27;
  int16x8_t v28;
  const UInt8 *v29;
  CFIndex v30;
  const __CFArray *v31;
  int v32;
  int16x8_t v33;
  const UInt8 *v34;
  CFIndex v35;
  CFStringRef v36;
  const __CFArray *v37;
  int16x8_t v38;
  const UInt8 *v39;
  CFIndex v40;
  CFStringRef v41;
  std::string::size_type v42;
  std::string::size_type size;
  void *v44;
  std::string::size_type v45;
  void *v46;
  void *v47;
  AMCP::Log::Scope_Registry *v48;
  std::string::size_type v49;
  void *v50;
  std::string::size_type v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  std::string::size_type v56;
  _BOOL8 is_an_available_format;
  CFMutableDictionaryRef v58;
  int16x8_t v59;
  std::string *v60;
  CFIndex v61;
  CFStringRef v62;
  uint64_t v63;
  __int128 v64;
  std::runtime_error_vtbl *v65;
  const UInt8 *v66;
  CFIndex v67;
  CFStringRef v68;
  __CFDictionary *v69;
  CFNumberRef v70;
  int16x8_t v71;
  const UInt8 *v72;
  CFIndex v73;
  CFStringRef v74;
  int16x8_t v75;
  const UInt8 *v76;
  CFIndex v77;
  CFStringRef v78;
  int16x8_t v79;
  const UInt8 *v80;
  CFIndex v81;
  CFStringRef v82;
  int16x8_t v83;
  const UInt8 *v84;
  CFIndex v85;
  CFStringRef v86;
  int16x8_t v87;
  const UInt8 *v88;
  CFIndex v89;
  CFStringRef v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  NSObject *v93;
  _opaque_pthread_t *v94;
  mach_port_t v95;
  void *v96;
  NSObject *v97;
  _opaque_pthread_t *v98;
  mach_port_t v99;
  void *v100;
  std::runtime_error *v101;
  std::runtime_error *v102;
  std::runtime_error *v103;
  std::runtime_error *v104;
  std::runtime_error *v105;
  std::runtime_error *v106;
  std::runtime_error *v107;
  std::runtime_error *v108;
  std::runtime_error *exception;
  std::runtime_error *v110;
  std::runtime_error *v111;
  std::runtime_error *v112;
  std::runtime_error *v113;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::runtime_error *v116;
  std::runtime_error *v117;
  std::runtime_error *v118;
  std::runtime_error *v119;
  std::runtime_error *v120;
  std::runtime_error *v121;
  std::runtime_error *v122;
  std::runtime_error *v123;
  CFIndex v124;
  int v125;
  __int128 v126;
  uint64_t v127;
  void *p_cf;
  __int128 v129;
  uint64_t v130;
  std::runtime_error v131;
  std::string cf;
  char *v133;
  std::string::value_type *v134;
  uint64_t v135;
  int v136;
  char v137;
  CFTypeRef v138;
  char v139;
  std::string __p;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  CFDictionaryRef theDict;
  CFTypeRef v150;
  __CFDictionary *MutableCopy;
  CFArrayRef theArray;
  unsigned int v153[3];
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  _OWORD v158[2];
  uint64_t v159;
  CFDictionaryRef *v160;
  std::__shared_weak_count *v161;
  _BYTE valuePtr[40];
  __int128 v163;
  uint64_t v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v160 = *(CFDictionaryRef **)a1;
      v5 = v160;
      v161 = v3;
      if (v160)
      {
        v6 = *(_DWORD *)(a1 + 32);
        for (i = v160[15]; i != v160[16]; i = (const __CFDictionary *)((char *)i + 16))
        {
          if (*(_DWORD *)(*(_QWORD *)i + 88) == v6)
          {
            v8 = 1768845428;
LABEL_14:
            AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)v158, a1 + 40);
            v156 = 0x676C6F627363686ELL;
            v157 = 0;
            v9.i64[0] = 0x676C6F62666D6174;
            v154 = 0x676C6F62666D6174;
            v155 = 0;
            v153[0] = 1937009955;
            v153[1] = v8;
            v153[2] = 0;
            v10 = *(_QWORD *)i;
            if (!*(_QWORD *)(*(_QWORD *)i + 48))
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v156, v9);
            if (valuePtr[23] >= 0)
              v11 = valuePtr;
            else
              v11 = *(const UInt8 **)valuePtr;
            if (valuePtr[23] >= 0)
              v12 = valuePtr[23];
            else
              v12 = *(_QWORD *)&valuePtr[8];
            v13 = (const __CFArray *)CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
            v144 = (uint64_t)v13;
            if (!v13)
            {
              v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v110, "Could not construct");
              __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, *(CFDictionaryRef *)(v10 + 48), v13);
            if (!cf.__r_.__value_.__r.__words[0])
            {
              v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v111, "Could not construct");
              __cxa_throw(v111, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v125 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
            if (cf.__r_.__value_.__r.__words[0])
              CFRelease(cf.__r_.__value_.__l.__data_);
            CFRelease(v13);
            if ((valuePtr[23] & 0x80000000) != 0)
              operator delete(*(void **)valuePtr);
            if (!v5[6])
            {
              v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v112, "Could not construct");
              __cxa_throw(v112, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            AMCP::Address::to_string((std::string *)valuePtr, v153, v14);
            if (valuePtr[23] >= 0)
              v15 = valuePtr;
            else
              v15 = *(const UInt8 **)valuePtr;
            if (valuePtr[23] >= 0)
              v16 = valuePtr[23];
            else
              v16 = *(_QWORD *)&valuePtr[8];
            v17 = CFStringCreateWithBytes(0, v15, v16, 0x8000100u, 0);
            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
            if (!v17)
            {
              v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v113, "Could not construct");
              __cxa_throw(v113, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v18 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(v5[6], v17);
            if (!v18)
            {
              v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v114, "Could not find item");
              __cxa_throw(v114, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v19 = v18;
            CFRetain(v18);
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v19);
            CFRelease(v17);
            if ((valuePtr[23] & 0x80000000) != 0)
              operator delete(*(void **)valuePtr);
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
            v150 = Mutable;
            v22 = theArray;
            v23 = 0.0;
            if (!theArray)
              goto LABEL_134;
            Count = CFArrayGetCount(theArray);
            v25 = Count;
            v26 = theArray;
            if (theArray)
            {
              v124 = CFArrayGetCount(theArray);
              if (!v25)
                goto LABEL_134;
            }
            else
            {
              v124 = 0;
              if (!Count)
              {
LABEL_134:
                AMCP::Address::to_string((std::string *)valuePtr, v153, v21);
                if (valuePtr[23] >= 0)
                  v66 = valuePtr;
                else
                  v66 = *(const UInt8 **)valuePtr;
                if (valuePtr[23] >= 0)
                  v67 = valuePtr[23];
                else
                  v67 = *(_QWORD *)&valuePtr[8];
                v68 = CFStringCreateWithBytes(0, v66, v67, 0x8000100u, 0);
                if (!v68)
                {
                  v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v115, "Could not construct");
                  __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&cf, (const __CFArray *)Mutable);
                v69 = MutableCopy;
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v68, cf.__r_.__value_.__l.__data_);
                if (cf.__r_.__value_.__r.__words[0])
                  CFRelease(cf.__r_.__value_.__l.__data_);
                CFRelease(v68);
                if ((valuePtr[23] & 0x80000000) != 0)
                  operator delete(*(void **)valuePtr);
                if (v23 != 0.0)
                {
                  *(double *)valuePtr = v23;
                  v70 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
                  p_cf = v70;
                  if (!v70)
                  {
                    v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v116, "Could not construct");
                    __cxa_throw(v116, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v71.i64[0] = 0x676C6F626E737274;
                  cf.__r_.__value_.__r.__words[0] = 0x676C6F626E737274;
                  LODWORD(cf.__r_.__value_.__r.__words[1]) = 0;
                  AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&cf, v71);
                  if (valuePtr[23] >= 0)
                    v72 = valuePtr;
                  else
                    v72 = *(const UInt8 **)valuePtr;
                  if (valuePtr[23] >= 0)
                    v73 = valuePtr[23];
                  else
                    v73 = *(_QWORD *)&valuePtr[8];
                  v74 = CFStringCreateWithBytes(0, v72, v73, 0x8000100u, 0);
                  if (!v74)
                  {
                    v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v117, "Could not construct");
                    __cxa_throw(v117, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v69, v74, v70);
                  CFRelease(v74);
                  if ((valuePtr[23] & 0x80000000) != 0)
                    operator delete(*(void **)valuePtr);
                  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v141, v69);
                  if (!(_QWORD)v141)
                  {
                    v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v118, "Could not construct");
                    __cxa_throw(v118, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v144 = 0x696E707473746D23;
                  LODWORD(v145) = 0;
                  AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v144, v75);
                  if (valuePtr[23] >= 0)
                    v76 = valuePtr;
                  else
                    v76 = *(const UInt8 **)valuePtr;
                  if (valuePtr[23] >= 0)
                    v77 = valuePtr[23];
                  else
                    v77 = *(_QWORD *)&valuePtr[8];
                  v78 = CFStringCreateWithBytes(0, v76, v77, 0x8000100u, 0);
                  if (!v78)
                  {
                    v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v119, "Could not construct");
                    __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, (CFDictionaryRef)v141, v78);
                  CFRelease(v78);
                  if ((valuePtr[23] & 0x80000000) != 0)
                    operator delete(*(void **)valuePtr);
                  if ((_QWORD)v141)
                    CFRelease((CFTypeRef)v141);
                  if (cf.__r_.__value_.__s.__data_[8])
                  {
                    AMCP::Null::change_sample_rates((AMCP::Null *)&v141, (CFArrayRef *)&cf, (const void **)&p_cf);
                    v144 = 0x696E707473746D23;
                    LODWORD(v145) = 0;
                    AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v144, v79);
                    if (valuePtr[23] >= 0)
                      v80 = valuePtr;
                    else
                      v80 = *(const UInt8 **)valuePtr;
                    if (valuePtr[23] >= 0)
                      v81 = valuePtr[23];
                    else
                      v81 = *(_QWORD *)&valuePtr[8];
                    v82 = CFStringCreateWithBytes(0, v80, v81, 0x8000100u, 0);
                    if (!v82)
                    {
                      v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v122, "Could not construct");
                      __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v69, v82, (const void *)v141);
                    CFRelease(v82);
                    if ((valuePtr[23] & 0x80000000) != 0)
                      operator delete(*(void **)valuePtr);
                    if ((_QWORD)v141)
                      CFRelease((CFTypeRef)v141);
                  }
                  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&__p, v69);
                  if (!__p.__r_.__value_.__r.__words[0])
                  {
                    v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v120, "Could not construct");
                    __cxa_throw(v120, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  *(_QWORD *)&v141 = 0x6F75747073746D23;
                  DWORD2(v141) = 0;
                  AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v141, v83);
                  if (valuePtr[23] >= 0)
                    v84 = valuePtr;
                  else
                    v84 = *(const UInt8 **)valuePtr;
                  if (valuePtr[23] >= 0)
                    v85 = valuePtr[23];
                  else
                    v85 = *(_QWORD *)&valuePtr[8];
                  v86 = CFStringCreateWithBytes(0, v84, v85, 0x8000100u, 0);
                  if (!v86)
                  {
                    v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v121, "Could not construct");
                    __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v144, (CFDictionaryRef)__p.__r_.__value_.__l.__data_, v86);
                  CFRelease(v86);
                  if ((valuePtr[23] & 0x80000000) != 0)
                    operator delete(*(void **)valuePtr);
                  if (__p.__r_.__value_.__r.__words[0])
                    CFRelease(__p.__r_.__value_.__l.__data_);
                  if ((_BYTE)v145)
                  {
                    AMCP::Null::change_sample_rates((AMCP::Null *)&__p, (CFArrayRef *)&v144, (const void **)&p_cf);
                    *(_QWORD *)&v141 = 0x6F75747073746D23;
                    DWORD2(v141) = 0;
                    AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v141, v87);
                    if (valuePtr[23] >= 0)
                      v88 = valuePtr;
                    else
                      v88 = *(const UInt8 **)valuePtr;
                    if (valuePtr[23] >= 0)
                      v89 = valuePtr[23];
                    else
                      v89 = *(_QWORD *)&valuePtr[8];
                    v90 = CFStringCreateWithBytes(0, v88, v89, 0x8000100u, 0);
                    if (!v90)
                    {
                      v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v123, "Could not construct");
                      __cxa_throw(v123, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v69, v90, __p.__r_.__value_.__l.__data_);
                    CFRelease(v90);
                    if ((valuePtr[23] & 0x80000000) != 0)
                      operator delete(*(void **)valuePtr);
                    if (__p.__r_.__value_.__r.__words[0])
                      CFRelease(__p.__r_.__value_.__l.__data_);
                  }
                  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v144);
                  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                  CFRelease(v70);
                }
                mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v69);
                (*((void (**)(CFDictionaryRef *, _BYTE *))*v5 + 3))(v5, valuePtr);
                if (*(_QWORD *)valuePtr)
                  CFRelease(*(CFTypeRef *)valuePtr);
                if (v150)
                  CFRelease(v150);
                if (v69)
                  CFRelease(v69);
                if (theArray)
                  CFRelease(theArray);
                goto LABEL_213;
              }
            }
            v27 = 0;
            do
            {
              if (v22 == v26 && v27 == v124)
                break;
              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&theDict, v22, v27);
              if (!theDict)
              {
                v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v101, "Could not construct");
                __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v156, v28);
              if (valuePtr[23] >= 0)
                v29 = valuePtr;
              else
                v29 = *(const UInt8 **)valuePtr;
              if (valuePtr[23] >= 0)
                v30 = valuePtr[23];
              else
                v30 = *(_QWORD *)&valuePtr[8];
              v31 = (const __CFArray *)CFStringCreateWithBytes(0, v29, v30, 0x8000100u, 0);
              v144 = (uint64_t)v31;
              if (!v31)
              {
                v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v103, "Could not construct");
                __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, theDict, v31);
              if (!cf.__r_.__value_.__r.__words[0])
              {
                v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v102, "Could not construct");
                __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v32 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
              if (cf.__r_.__value_.__r.__words[0])
                CFRelease(cf.__r_.__value_.__l.__data_);
              CFRelease(v31);
              if ((valuePtr[23] & 0x80000000) != 0)
                operator delete(*(void **)valuePtr);
              if (v32 == v125)
              {
                if (!theDict)
                {
                  v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v107, "Could not construct");
                  __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v154, v33);
                if (valuePtr[23] >= 0)
                  v34 = valuePtr;
                else
                  v34 = *(const UInt8 **)valuePtr;
                if (valuePtr[23] >= 0)
                  v35 = valuePtr[23];
                else
                  v35 = *(_QWORD *)&valuePtr[8];
                v36 = CFStringCreateWithBytes(0, v34, v35, 0x8000100u, 0);
                *(_QWORD *)&v141 = v36;
                if (!v36)
                {
                  v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v106, "Could not construct");
                  __cxa_throw(v106, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>((applesauce::CF::DictionaryRef *)&cf, theDict, v36);
                v145 = 0;
                v146 = 0;
                v147 = 0;
                v37 = (const __CFArray *)cf.__r_.__value_.__r.__words[0];
                cf.__r_.__value_.__r.__words[0] = 0;
                v144 = (uint64_t)v37;
                v148 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
                CFRelease(v36);
                if ((valuePtr[23] & 0x80000000) != 0)
                  operator delete(*(void **)valuePtr);
                AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&v141, (uint64_t)&v144);
                memset(&__p, 0, sizeof(__p));
                if (!theDict)
                {
                  v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v105, "Could not construct");
                  __cxa_throw(v105, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                cf.__r_.__value_.__r.__words[0] = 0x676C6F62666D7423;
                LODWORD(cf.__r_.__value_.__r.__words[1]) = 0;
                AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&cf, v38);
                if (valuePtr[23] >= 0)
                  v39 = valuePtr;
                else
                  v39 = *(const UInt8 **)valuePtr;
                if (valuePtr[23] >= 0)
                  v40 = valuePtr[23];
                else
                  v40 = *(_QWORD *)&valuePtr[8];
                v41 = CFStringCreateWithBytes(0, v39, v40, 0x8000100u, 0);
                if (!v41)
                {
                  v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v104, "Could not construct");
                  __cxa_throw(v104, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v138, theDict, v41);
                CFRelease(v41);
                if ((valuePtr[23] & 0x80000000) != 0)
                  operator delete(*(void **)valuePtr);
                if (v139)
                {
                  AMCP::make_thing_from_description((AMCP *)valuePtr, &v138);
                  AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&cf, (uint64_t)valuePtr);
                  v42 = __p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    size = __p.__r_.__value_.__l.__size_;
                    v44 = (void *)__p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                    {
                      v45 = __p.__r_.__value_.__l.__size_;
                      do
                      {
                        v47 = *(void **)(v45 - 64);
                        v45 -= 64;
                        v46 = v47;
                        if (v47)
                        {
                          *(_QWORD *)(size - 56) = v46;
                          operator delete(v46);
                        }
                        size = v45;
                      }
                      while (v45 != v42);
                      v44 = (void *)__p.__r_.__value_.__r.__words[0];
                    }
                    __p.__r_.__value_.__l.__size_ = v42;
                    operator delete(v44);
                  }
                  __p = cf;
                  memset(&cf, 0, sizeof(cf));
                  p_cf = &cf;
                  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
                  if (*(_QWORD *)&valuePtr[32])
                    v48 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&valuePtr[32])(0, valuePtr, 0, 0);
                }
                else
                {
                  p_cf = 0;
                  v129 = 0uLL;
                  *(_QWORD *)valuePtr = v141;
                  *(_QWORD *)&valuePtr[8] = v141;
                  CA::ValueRangeList::AddRange((double **)&p_cf, (double *)valuePtr);
                  memset(valuePtr, 0, 24);
                  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(valuePtr, p_cf, v129, (uint64_t)(v129 - (_QWORD)p_cf) >> 4);
                  *(_OWORD *)&valuePtr[24] = v141;
                  v163 = v142;
                  v164 = v143;
                  v49 = __p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                  {
                    v52 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 6;
                    if ((unint64_t)(v52 + 1) >> 58)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v53 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5;
                    if (v53 <= v52 + 1)
                      v53 = v52 + 1;
                    v54 = (char *)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFC0
                                 ? 0x3FFFFFFFFFFFFFFLL
                                 : v53);
                    v134 = &__p.__r_.__value_.__s.__data_[16];
                    if (v54)
                      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>((unint64_t)v54);
                    else
                      v55 = 0;
                    v56 = (std::string::size_type)&v54[64 * v52];
                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
                    cf.__r_.__value_.__l.__size_ = v56;
                    cf.__r_.__value_.__r.__words[2] = v56;
                    v133 = &v54[64 * v55];
                    *(_QWORD *)v56 = 0;
                    *(_QWORD *)(v56 + 8) = 0;
                    *(_QWORD *)(v56 + 16) = 0;
                    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)v56, *(const void **)valuePtr, *(uint64_t *)&valuePtr[8], (uint64_t)(*(_QWORD *)&valuePtr[8] - *(_QWORD *)valuePtr) >> 4);
                    *(_OWORD *)(v56 + 24) = *(_OWORD *)&valuePtr[24];
                    *(_OWORD *)(v56 + 40) = v163;
                    *(_QWORD *)(v56 + 56) = v164;
                    cf.__r_.__value_.__r.__words[2] += 64;
                    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer((uint64_t *)&__p, &cf);
                    v51 = __p.__r_.__value_.__l.__size_;
                    std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&cf);
                    v50 = *(void **)valuePtr;
                  }
                  else
                  {
                    *(_QWORD *)__p.__r_.__value_.__l.__size_ = 0;
                    *(_QWORD *)(v49 + 8) = 0;
                    *(_QWORD *)(v49 + 16) = 0;
                    v50 = *(void **)valuePtr;
                    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)v49, *(const void **)valuePtr, *(uint64_t *)&valuePtr[8], (uint64_t)(*(_QWORD *)&valuePtr[8] - *(_QWORD *)valuePtr) >> 4);
                    *(_OWORD *)(v49 + 24) = v141;
                    *(_OWORD *)(v49 + 40) = v142;
                    *(_QWORD *)(v49 + 56) = v143;
                    v51 = v49 + 64;
                  }
                  __p.__r_.__value_.__l.__size_ = v51;
                  if (v50)
                    operator delete(v50);
                  v48 = (AMCP::Log::Scope_Registry *)p_cf;
                  if (p_cf)
                    operator delete(p_cf);
                }
                if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
                {
                  AMCP::Log::Scope_Registry::get(v48);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)valuePtr, "com.apple.coreaudio", "AMCP");
                  v93 = **(NSObject ***)valuePtr;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)valuePtr);
                  if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                  {
                    v94 = pthread_self();
                    v95 = pthread_mach_thread_np(v94);
                    *(_DWORD *)valuePtr = 67109890;
                    *(_DWORD *)&valuePtr[4] = v95;
                    *(_WORD *)&valuePtr[8] = 2080;
                    *(_QWORD *)&valuePtr[10] = "Null_Object.cpp";
                    *(_WORD *)&valuePtr[18] = 1024;
                    *(_DWORD *)&valuePtr[20] = 1186;
                    *(_WORD *)&valuePtr[24] = 2080;
                    *(_QWORD *)&valuePtr[26] = "(available_formats.size()) == false";
                    _os_log_error_impl(&dword_1B57BA000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to get a valid list of available formats", valuePtr, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v137);
                  v96 = __cxa_allocate_exception(0x40uLL);
                  std::runtime_error::runtime_error(&v131, "failed to get a valid list of available formats");
                  std::runtime_error::runtime_error((std::runtime_error *)&cf, &v131);
                  v133 = 0;
                  v134 = 0;
                  v135 = 0;
                  v136 = -1;
                  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
                  cf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)valuePtr, (uint64_t)&cf);
                  *(_QWORD *)&valuePtr[32] = "auto AMCP::Null::Device::do_set_property(Object_ID, const Address &, const "
                                             "Thing &)::(anonymous class)::operator()() const";
                  *(_QWORD *)&v163 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
                  DWORD2(v163) = 1186;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v126);
                  p_cf = off_1E69A20A0;
                  v129 = v126;
                  v130 = v127;
                  v126 = 0uLL;
                  v127 = 0;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)valuePtr, (uint64_t)&p_cf);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v96, (uint64_t)valuePtr);
                }
                is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format((uint64_t)v158, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                if (!is_an_available_format)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)valuePtr, "com.apple.coreaudio", "AMCP");
                  v97 = **(NSObject ***)valuePtr;
                  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)valuePtr);
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                  {
                    v98 = pthread_self();
                    v99 = pthread_mach_thread_np(v98);
                    *(_DWORD *)valuePtr = 67109890;
                    *(_DWORD *)&valuePtr[4] = v99;
                    *(_WORD *)&valuePtr[8] = 2080;
                    *(_QWORD *)&valuePtr[10] = "Null_Object.cpp";
                    *(_WORD *)&valuePtr[18] = 1024;
                    *(_DWORD *)&valuePtr[20] = 1189;
                    *(_WORD *)&valuePtr[24] = 2080;
                    *(_QWORD *)&valuePtr[26] = "(format_is_valid) == false";
                    _os_log_error_impl(&dword_1B57BA000, v97, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", valuePtr, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v137);
                  v100 = __cxa_allocate_exception(0x40uLL);
                  std::runtime_error::runtime_error(&v131, "failed to set stream format");
                  std::runtime_error::runtime_error((std::runtime_error *)&cf, &v131);
                  v133 = 0;
                  v134 = 0;
                  v135 = 0;
                  v136 = -1;
                  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
                  cf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)valuePtr, (uint64_t)&cf);
                  *(_QWORD *)&valuePtr[32] = "auto AMCP::Null::Device::do_set_property(Object_ID, const Address &, const "
                                             "Thing &)::(anonymous class)::operator()() const";
                  *(_QWORD *)&v163 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
                  DWORD2(v163) = 1189;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v126);
                  p_cf = off_1E69A20A0;
                  v129 = v126;
                  v130 = v127;
                  v126 = 0uLL;
                  v127 = 0;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)valuePtr, (uint64_t)&p_cf);
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v100, (uint64_t)valuePtr);
                }
                if (*(double *)&v141 != *(double *)v158)
                  v23 = *(double *)v158;
                v58 = CFDictionaryCreateMutableCopy(0, 0, theDict);
                p_cf = v58;
                AMCP::Address::to_string(&cf, (unsigned int *)&v154, v59);
                if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v60 = &cf;
                else
                  v60 = (std::string *)cf.__r_.__value_.__r.__words[0];
                if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v61 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
                else
                  v61 = cf.__r_.__value_.__l.__size_;
                v62 = CFStringCreateWithBytes(0, (const UInt8 *)v60, v61, 0x8000100u, 0);
                *(_QWORD *)&v126 = v62;
                if (!v62)
                {
                  v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v108, "Could not construct");
                  __cxa_throw(v108, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                memset(valuePtr, 0, 32);
                *(_QWORD *)&valuePtr[32] = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
                v63 = operator new();
                v64 = v158[1];
                *(_OWORD *)v63 = v158[0];
                *(_OWORD *)(v63 + 16) = v64;
                *(_QWORD *)(v63 + 32) = v159;
                *(_QWORD *)valuePtr = v63;
                AMCP::make_description_from_thing((AMCP *)&v131, (const AMCP::Thing *)valuePtr);
                v65 = v131.__vftable;
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(v58, v62, v131.__vftable);
                if (v65)
                  CFRelease(v65);
                if (*(_QWORD *)&valuePtr[32])
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))&valuePtr[32])(0, (uint64_t)valuePtr, 0, 0);
                CFRelease(v62);
                if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(cf.__r_.__value_.__l.__data_);
                mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v58);
                Mutable = (void *)v150;
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)v150, *(const void **)valuePtr);
                if (*(_QWORD *)valuePtr)
                  CFRelease(*(CFTypeRef *)valuePtr);
                if (v58)
                  CFRelease(v58);
                std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v138);
                *(_QWORD *)valuePtr = &__p;
                std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
                if (v148)
                  v148(0, (uint64_t)&v144, 0, 0);
              }
              else
              {
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)Mutable, theDict);
              }
              if (theDict)
                CFRelease(theDict);
              ++v27;
            }
            while (v27 != v25);
            goto LABEL_134;
          }
        }
        for (i = v160[18]; i != v160[19]; i = (const __CFDictionary *)((char *)i + 16))
        {
          if (*(_DWORD *)(*(_QWORD *)i + 88) == v6)
          {
            v8 = 1869968496;
            goto LABEL_14;
          }
        }
      }
LABEL_213:
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v92 = __ldaxr(p_shared_owners);
      while (__stlxr(v92 - 1, p_shared_owners));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A675AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, uint64_t a19, uint64_t a20,std::runtime_error a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,const void *a50,const void *a51,const void *a52,const void *a53)
{
  uint64_t v53;

  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v53 - 192) = &a37;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  AMCP::Thing::~Thing((AMCP::Thing *)&a45);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a50);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a51);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a52);
  applesauce::CF::ArrayRef::~ArrayRef(&a53);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v53 - 208);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(applesauce::CF::DictionaryRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1B5A67C38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Null::change_sample_rates(AMCP::Null *this, CFArrayRef *a2, const void **a3)
{
  const __CFDictionary *Mutable;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFArrayRef v9;
  unint64_t v10;
  int16x8_t v11;
  std::string *p_p;
  CFIndex size;
  CFStringRef v14;
  __CFDictionary *MutableCopy;
  CFMutableDictionaryRef v16;
  int16x8_t v17;
  std::string *v18;
  CFIndex v19;
  CFStringRef v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  CFIndex v25;
  CFTypeRef cf[2];
  uint64_t v27;
  int v28;
  std::string __p;
  void *v30;
  CFDictionaryRef theDict;
  CFDictionaryRef v32[2];

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v32[1] = Mutable;
  v6 = *a2;
  if (!*a2)
    goto LABEL_43;
  Count = CFArrayGetCount(*a2);
  v8 = Count;
  v9 = *a2;
  if (*a2)
  {
    v25 = CFArrayGetCount(*a2);
    if (!v8)
      goto LABEL_43;
  }
  else
  {
    v25 = 0;
    if (!Count)
      goto LABEL_43;
  }
  v10 = 0;
  do
  {
    if (v6 == v9 && v25 == v10)
      break;
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v32, v6, v10);
    if (!v32[0])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v27 = 0x676C6F62666D6174;
    v28 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v27, v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    v30 = (void *)v14;
    if (!v14)
    {
      v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>((applesauce::CF::DictionaryRef *)&theDict, v32[0], v14);
    CFRelease(v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    v30 = MutableCopy;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, "sample rate");
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, __p.__r_.__value_.__l.__data_, *a3);
    if (__p.__r_.__value_.__r.__words[0])
      CFRelease(__p.__r_.__value_.__l.__data_);
    v16 = CFDictionaryCreateMutableCopy(0, 0, v32[0]);
    cf[1] = v16;
    v27 = 0x676C6F62666D6174;
    v28 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v27, v17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__p;
    else
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v19 = __p.__r_.__value_.__l.__size_;
    v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, MutableCopy);
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v16, v20, cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    CFRelease(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, v16);
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, __p.__r_.__value_.__l.__data_);
    if (__p.__r_.__value_.__r.__words[0])
      CFRelease(__p.__r_.__value_.__l.__data_);
    if (v16)
      CFRelease(v16);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (theDict)
      CFRelease(theDict);
    if (v32[0])
      CFRelease(v32[0]);
    ++v10;
  }
  while (v8 != v10);
LABEL_43:
  mcp_applesauce::CF::Array_Builder::copy_array(this, Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5A67FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,const void *a28,const void *a29)
{
  if (a21 < 0)
    operator delete(__p);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a28);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a29);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 72);
  if (v2)
    v2(0, a1 + 40, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
  if (v10)
    v10(1, a2 + 40);
  return a1;
}

void sub_1B5A68190(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6981348;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  *a1 = &off_1E6981348;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[11];
  if (v2)
    v2(0, a1 + 7, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = &off_1E6981348;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5A682C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6981348;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  CFDictionaryRef *v5;
  __CFDictionary *MutableCopy;
  CFNumberRef v7;
  int16x8_t v8;
  std::string *p_valuePtr;
  CFIndex size;
  CFStringRef v11;
  int16x8_t v12;
  std::string *v13;
  CFIndex v14;
  CFStringRef v15;
  int16x8_t v16;
  int16x8_t v17;
  std::string *v18;
  CFIndex v19;
  CFStringRef v20;
  std::string *v21;
  CFIndex v22;
  CFStringRef v23;
  int16x8_t v24;
  std::string *v25;
  CFIndex v26;
  CFStringRef v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::runtime_error *exception;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  CFTypeRef v38;
  CFTypeRef cf;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  std::string valuePtr;
  CFNumberRef v46;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        valuePtr.__r_.__value_.__r.__words[0] = AMCP::Thing::convert_to<double>(a1 + 56);
        v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        v46 = v7;
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v8.i64[0] = 0x676C6F626E737274;
        v43 = 0x676C6F626E737274;
        v44 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&v43, v8);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_valuePtr = &valuePtr;
        else
          p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
        else
          size = valuePtr.__r_.__value_.__l.__size_;
        v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_valuePtr, size, 0x8000100u, 0);
        if (!v11)
        {
          v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v31, "Could not construct");
          __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v11, v7);
        CFRelease(v11);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        if (!v5[6])
        {
          v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v32, "Could not construct");
          __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v41 = 0x696E707473746D23;
        v42 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&v41, v12);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &valuePtr;
        else
          v13 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
        else
          v14 = valuePtr.__r_.__value_.__l.__size_;
        v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
        if (!v15)
        {
          v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v33, "Could not construct");
          __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v43, v5[6], v15);
        CFRelease(v15);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        if ((_BYTE)v44)
        {
          AMCP::Null::change_sample_rates((AMCP::Null *)&cf, (CFArrayRef *)&v43, (const void **)&v46);
          v41 = 0x696E707473746D23;
          v42 = 0;
          AMCP::Address::to_string(&valuePtr, (unsigned int *)&v41, v17);
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &valuePtr;
          else
            v18 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          else
            v19 = valuePtr.__r_.__value_.__l.__size_;
          v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
          if (!v20)
          {
            v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v36, "Could not construct");
            __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v20, cf);
          CFRelease(v20);
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          if (cf)
            CFRelease(cf);
        }
        if (!v5[6])
        {
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v34, "Could not construct");
          __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        cf = (CFTypeRef)0x6F75747073746D23;
        v40 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&cf, v16);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &valuePtr;
        else
          v21 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
        else
          v22 = valuePtr.__r_.__value_.__l.__size_;
        v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
        if (!v23)
        {
          v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v41, v5[6], v23);
        CFRelease(v23);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        if ((_BYTE)v42)
        {
          AMCP::Null::change_sample_rates((AMCP::Null *)&v38, (CFArrayRef *)&v41, (const void **)&v46);
          cf = (CFTypeRef)0x6F75747073746D23;
          v40 = 0;
          AMCP::Address::to_string(&valuePtr, (unsigned int *)&cf, v24);
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &valuePtr;
          else
            v25 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          else
            v26 = valuePtr.__r_.__value_.__l.__size_;
          v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, v26, 0x8000100u, 0);
          if (!v27)
          {
            v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v37, "Could not construct");
            __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v27, v38);
          CFRelease(v27);
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          if (v38)
            CFRelease(v38);
        }
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, MutableCopy);
        (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &valuePtr);
        if (valuePtr.__r_.__value_.__r.__words[0])
          CFRelease(valuePtr.__r_.__value_.__l.__data_);
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v41);
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v43);
        CFRelease(v7);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B5A68888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  const void *v23;
  const void *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (a22 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  CFRelease(v24);
  if (v23)
    CFRelease(v23);
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);
  std::__shared_weak_count *v3;

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 80);
  if (v2)
    v2(0, a1 + 48, 0, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v10)
    v10(1, a2 + 48);
  return a1;
}

void sub_1B5A68B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69812C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69812C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(v2 + 168);
  v4 = *a2;
  *(_QWORD *)(v2 + 168) = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6981248;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6981248;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result[1];
  v4 = *(_QWORD *)(v3 + 168);
  if (v4)
    result = CFRetain(*(CFTypeRef *)(v3 + 168));
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69811C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69811C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69811C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A68E94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69811C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(a2, (uint64_t)v4);
  if (v5)
    return (CFTypeRef *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A68F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981148;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981148;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981148;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A690F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981148;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF13DictionaryRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69810C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69810C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69810C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A69334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69810C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<CA::ChannelLayout>(a2, (uint64_t)v4);
  if (v5)
    return (_QWORD *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A6941C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA13ChannelLayoutEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981048;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981048;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981048;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A69598(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981048;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN2CA13ChannelLayoutEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void AMCP::Null::Device::update_stream_list(uint64_t a1, char **a2, CFTypeRef cf, char a4, uint64_t a5)
{
  CFArrayRef v9;
  CFArrayRef v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t Count;
  unint64_t v19;
  std::runtime_error *exception;
  const __CFArray *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  int16x8_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  CFArrayRef v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  const __CFDictionary *v65;
  char v66;
  CFArrayRef theArray;
  CFTypeRef cfa;
  uint64_t v69;
  int64x2_t v70;
  char *v71;
  _QWORD *v72;

  if (a4)
  {
    if (cf)
      CFRetain(cf);
    cfa = cf;
  }
  else
  {
    v9 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cfa, v9);
  }
  if (*(_BYTE *)(a5 + 8))
  {
    v10 = *(CFArrayRef *)a5;
    if (v10)
      CFRetain(v10);
    theArray = v10;
    if (!v10)
      goto LABEL_29;
  }
  else
  {
    v59 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v59);
    v10 = theArray;
    if (!theArray)
      goto LABEL_29;
  }
  if (CFArrayGetCount(v10) < (unint64_t)((a2[1] - *a2) >> 4))
  {
    if (theArray)
    {
      v11 = *a2;
      v12 = &v11[16 * (int)CFArrayGetCount(theArray)];
      if (v12 != a2[1])
      {
        v13 = v12;
        do
        {
          v14 = *(_QWORD *)v13;
          v13 += 16;
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
        }
        while (v13 != a2[1]);
        if (v12 != v13)
        {
          while (v13 != v12)
          {
            v13 -= 16;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v13);
          }
          a2[1] = v12;
        }
      }
      goto LABEL_20;
    }
LABEL_29:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_89;
  }
LABEL_20:
  v15 = theArray;
  if (!theArray)
    goto LABEL_29;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    Count = CFArrayGetCount(v15);
    v19 = (a2[1] - *a2) >> 4;
    if (v17 >= Count || v17 >= v19)
      break;
    if (theArray)
    {
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v69, theArray, v17);
      if (v70.i8[0])
      {
        if (v17 >= (a2[1] - *a2) >> 4)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)&(*a2)[v16] + 24))(*(_QWORD *)&(*a2)[v16], &v69);
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v69);
      ++v17;
      v15 = theArray;
      v16 += 16;
      if (theArray)
        continue;
    }
    goto LABEL_29;
  }
  if (!theArray)
    goto LABEL_29;
  if (v19 >= CFArrayGetCount(theArray))
    goto LABEL_79;
  v21 = theArray;
  if (!theArray)
  {
LABEL_88:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_89:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = (a2[1] - *a2) >> 4;
  while (v22 < CFArrayGetCount(v21))
  {
    if (theArray)
    {
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v65, theArray, v22);
      if (v66)
      {
        v23 = *(std::__shared_weak_count **)(a1 + 16);
        v62 = *(_QWORD *)(a1 + 8);
        v63 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        v26 = *(_DWORD *)(a1 + 40);
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v60, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
        AMCP::Null::make_object((uint64_t)&v64, (uint64_t)&v62, v26, &v60, &v65, 0, v27);
        v28 = v61;
        if (v61)
        {
          v29 = (unint64_t *)&v61->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = v63;
        if (v63)
        {
          v32 = (unint64_t *)&v63->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if ((_QWORD)v64)
        {
          v34 = a2[1];
          v35 = (unint64_t)a2[2];
          if ((unint64_t)v34 >= v35)
          {
            v40 = (v34 - *a2) >> 4;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v42 = v35 - (_QWORD)*a2;
            if (v42 >> 3 > v41)
              v41 = v42 >> 3;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
              v43 = 0xFFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            v72 = a2 + 2;
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v43);
            v46 = &v44[16 * v40];
            v47 = *((_QWORD *)&v64 + 1);
            *(_OWORD *)v46 = v64;
            if (v47)
            {
              v48 = (unint64_t *)(v47 + 8);
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v51 = *a2;
            v50 = a2[1];
            if (v50 == *a2)
            {
              v54 = vdupq_n_s64((unint64_t)v50);
              v52 = &v44[16 * v40];
            }
            else
            {
              v52 = &v44[16 * v40];
              do
              {
                v53 = *((_OWORD *)v50 - 1);
                v50 -= 16;
                *((_OWORD *)v52 - 1) = v53;
                v52 -= 16;
                *(_QWORD *)v50 = 0;
                *((_QWORD *)v50 + 1) = 0;
              }
              while (v50 != v51);
              v54 = *(int64x2_t *)a2;
            }
            v39 = v46 + 16;
            *a2 = v52;
            a2[1] = v46 + 16;
            v70 = v54;
            v55 = a2[2];
            a2[2] = &v44[16 * v45];
            v71 = v55;
            v69 = v54.i64[0];
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v69);
          }
          else
          {
            v36 = *((_QWORD *)&v64 + 1);
            *(_QWORD *)v34 = v64;
            *((_QWORD *)v34 + 1) = v36;
            if (v36)
            {
              v37 = (unint64_t *)(v36 + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            v39 = v34 + 16;
          }
          a2[1] = v39;
          (*(void (**)(_QWORD))(*(_QWORD *)v64 + 16))(v64);
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v65);
      ++v22;
      v21 = theArray;
      if (theArray)
        continue;
    }
    goto LABEL_88;
  }
LABEL_79:
  if (theArray)
    CFRelease(theArray);
  if (cfa)
    CFRelease(cfa);
}

void sub_1B5A69C54(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

CFIndex AMCP::Null::make_object_list(char **a1, uint64_t *a2, int a3, uint64_t *a4, CFArrayRef *a5, unsigned int **a6)
{
  CFIndex result;
  CFIndex v12;
  unint64_t v13;
  int16x8_t v14;
  std::string *p_p;
  CFIndex size;
  const applesauce::CF::DictionaryRef *v17;
  unsigned int stock_class_id;
  int16x8_t v19;
  unsigned int *v20;
  unsigned int *v21;
  AMCP *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  char *v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::runtime_error *exception;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  CFTypeRef v65;
  uint64_t v66;
  int v67;
  std::string __p;
  CFTypeRef v69;
  CFTypeRef cf;
  const __CFDictionary *v71;
  char v72;
  int valuePtr;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  _QWORD *v77;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!*a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = CFArrayGetCount(*a5);
  v12 = result;
  if (result)
  {
    v13 = 0;
    do
    {
      if (!*a5)
      {
        v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v71, *a5, v13);
      if (v72)
      {
        if (!v71)
        {
          v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
          __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v66 = 0x676C6F62636C6173;
        v67 = 0;
        AMCP::Address::to_string(&__p, (unsigned int *)&v66, v14);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v69 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
        if (!v69)
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "Could not construct");
          __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        valuePtr = 0;
        v65 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v65)
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v71, v69, &v65);
        if (!cf)
        {
          v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v58, "Could not construct");
          __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v17 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        if (cf)
          CFRelease(cf);
        if (v65)
          CFRelease(v65);
        if (v69)
          CFRelease(v69);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        stock_class_id = AMCP::Null::get_stock_class_id(&v71, v17);
        v21 = *a6;
        v20 = a6[1];
        if (*a6 == v20)
          goto LABEL_32;
        do
        {
          v22 = (AMCP *)*v21;
          if (*((_BYTE *)v21 + 4))
          {
            if ((AMCP::is_base_of(v22, stock_class_id) & 1) != 0)
              goto LABEL_31;
          }
          else if ((_DWORD)v22 == stock_class_id)
          {
            goto LABEL_31;
          }
          v21 += 2;
        }
        while (v21 != v20);
        v21 = v20;
LABEL_31:
        if (v21 != a6[1])
        {
LABEL_32:
          v23 = (std::__shared_weak_count *)a2[1];
          v63 = *a2;
          v64 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v26 = a4[1];
          v61 = *a4;
          v62 = (std::__shared_weak_count *)v26;
          if (v26)
          {
            v27 = (unint64_t *)(v26 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          AMCP::Null::make_object((uint64_t)&__p, (uint64_t)&v63, a3, &v61, &v71, stock_class_id, v19);
          v29 = v62;
          if (v62)
          {
            v30 = (unint64_t *)&v62->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v64;
          if (v64)
          {
            v33 = (unint64_t *)&v64->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v36 = a1[1];
          v35 = (unint64_t)a1[2];
          if ((unint64_t)v36 >= v35)
          {
            v37 = (v36 - *a1) >> 4;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v39 = v35 - (_QWORD)*a1;
            if (v39 >> 3 > v38)
              v38 = v39 >> 3;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
              v40 = 0xFFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            v77 = a1 + 2;
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v40);
            v43 = &v41[16 * v37];
            *(_OWORD *)v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            v45 = *a1;
            v44 = a1[1];
            if (v44 == *a1)
            {
              v48 = vdupq_n_s64((unint64_t)v44);
              v46 = &v41[16 * v37];
            }
            else
            {
              v46 = &v41[16 * v37];
              do
              {
                v47 = *((_OWORD *)v44 - 1);
                v44 -= 16;
                *((_OWORD *)v46 - 1) = v47;
                v46 -= 16;
                *(_QWORD *)v44 = 0;
                *((_QWORD *)v44 + 1) = 0;
              }
              while (v44 != v45);
              v48 = *(int64x2_t *)a1;
            }
            v49 = v43 + 16;
            *a1 = v46;
            a1[1] = v43 + 16;
            v75 = v48;
            v50 = a1[2];
            a1[2] = &v41[16 * v42];
            v76 = v50;
            v74 = v48.i64[0];
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v74);
            v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            a1[1] = v49;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            *(_OWORD *)v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            a1[1] = v36 + 16;
          }
        }
      }
      result = std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v71);
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_1B5A6A2BC(void *a1)
{
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMCP::Null::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69827D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69827D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Slider_Control::~Slider_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Slider_Control::populate_core@<X0>(AMCP::Null::Slider_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  CFIndex v10;
  CFStringRef v11;
  AMCP::Thing *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *v38;
  CFIndex size;
  CFStringRef v40;
  AMCP::Thing *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error *exception;
  std::runtime_error *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  uint64_t v50;
  std::string v51;
  void (*v52)(_QWORD, std::string *, _QWORD, _QWORD);
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unsigned int v56[4];
  uint64_t v57;
  std::__shared_weak_count *v58;
  _OWORD v59[2];
  void (*v60)(uint64_t, _OWORD *, __int128 *, _QWORD);
  CFTypeRef v61;
  char v62;
  _OWORD v63[2];
  void (*v64)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  double v65[2];
  void *__p[2];
  __int128 v67;
  uint64_t (*v68)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  void (*v73)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v74;
  int v75;
  _BYTE v76[24];
  _BYTE *v77;
  __int128 v78;
  __int128 v79;
  void (*v80)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v54, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v51.__r_.__value_.__s.__data_[0] = 0;
  v53 = 0;
  v6 = v54;
  v5 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  strcpy((char *)v56, "vrdsbolg");
  BYTE1(v56[2]) = 0;
  HIWORD(v56[2]) = 0;
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, v56, (int16x8_t)0);
  if ((SBYTE7(v67) & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((SBYTE7(v67) & 0x80u) == 0)
    v10 = BYTE7(v67);
  else
    v10 = (CFIndex)__p[1];
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v61, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  if (v62)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v61);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v63, v12);
    if (v68)
      v68(0, (uint64_t)__p, 0, 0);
  }
  if (!v64)
  {
    v57 = 0;
    v58 = 0;
    goto LABEL_57;
  }
  v50 = *(_QWORD *)&v56[1];
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  v64(1, v63, v59, 0);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  LODWORD(v65[0]) = 1935962742;
  *(_QWORD *)((char *)v65 + 4) = v50;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v57, SHIDWORD(v50), v65[0]);
  v15 = v57;
  v16 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  if (v60)
    v60(2, v59, &v71, 0);
  *((_QWORD *)&v79 + 1) = 0;
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E69819C8;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((_QWORD *)v17 + 5) = 0;
  if (v73)
    v73(2, &v71, v17 + 8, 0);
  *((_QWORD *)&v79 + 1) = v17;
  *(_OWORD *)__p = 0u;
  v67 = 0u;
  v68 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v78);
  v68 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)__p);
  if (v68)
    v68(0, (uint64_t)__p, 0, 0);
  v18 = (__int128 *)*((_QWORD *)&v79 + 1);
  if (*((__int128 **)&v79 + 1) == &v78)
  {
    v19 = 4;
    v18 = &v78;
  }
  else
  {
    if (!*((_QWORD *)&v79 + 1))
      goto LABEL_33;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_33:
  if (v73)
    v73(0, &v71, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(v15);
  v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v72 + 1) = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6981A48;
  v21[1] = v6;
  v21[2] = v5;
  v21[3] = 0x676C6F6273647276;
  *((_DWORD *)v21 + 8) = HIDWORD(v50);
  *((_QWORD *)&v72 + 1) = v21;
  *(_OWORD *)__p = 0u;
  v67 = 0u;
  v68 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v71);
  v68 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v20, (AMCP *)__p);
  if (v68)
    v68(0, (uint64_t)__p, 0, 0);
  v22 = (__int128 *)*((_QWORD *)&v72 + 1);
  if (*((__int128 **)&v72 + 1) == &v71)
  {
    v23 = 4;
    v22 = &v71;
  }
  else
  {
    if (!*((_QWORD *)&v72 + 1))
      goto LABEL_42;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_42:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v71, v15);
  v74 = *(_QWORD *)(v15 + 40);
  v75 = *(_DWORD *)(v15 + 48);
  v24 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  v25 = v71;
  v71 = 0uLL;
  *(_OWORD *)__p = v25;
  v67 = v72;
  LODWORD(v68) = (_DWORD)v73;
  if (*((_QWORD *)&v72 + 1))
  {
    v26 = *(_QWORD *)(v72 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &v67;
    v72 = 0uLL;
  }
  v69 = v74;
  v70 = v75;
  v77 = 0;
  v27 = operator new(0x40uLL);
  *v27 = &off_1E6981AC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v27 + 1), (uint64_t *)__p);
  v27[6] = v69;
  *((_DWORD *)v27 + 14) = v70;
  v77 = v27;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)&v78, (uint64_t)v76);
  v80 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v24, (AMCP *)&v78);
  if (v80)
    v80(0, (uint64_t)&v78, 0, 0);
  v28 = v77;
  if (v77 == v76)
  {
    v29 = 4;
    v28 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_55;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_55:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v71);
  if (v60)
    v60(0, v59, 0, 0);
LABEL_57:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v61);
  if (v64)
    v64(0, v63, 0, 0);
  if (v5)
  {
    v30 = (unint64_t *)&v5->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v57)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v57 + 40), &v57);
  v32 = v58;
  if (v58)
  {
    v33 = (unint64_t *)&v58->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v51);
  v35 = v55;
  if (v55)
  {
    v36 = (unint64_t *)&v55->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v69) = 0;
  *(_QWORD *)&v59[0] = 0x676C6F6273647272;
  DWORD2(v59[0]) = 0;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string(&v51, (unsigned int *)v59, (int16x8_t)0);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v51;
  else
    v38 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    size = v51.__r_.__value_.__l.__size_;
  v40 = CFStringCreateWithBytes(0, (const UInt8 *)v38, size, 0x8000100u, 0);
  if (!v40)
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v78, *((CFDictionaryRef *)this + 6), v40);
  CFRelease(v40);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (!BYTE8(v78))
    goto LABEL_91;
  AMCP::make_thing_from_description((AMCP *)&v51, (CFTypeRef *)&v78);
  AMCP::swap((AMCP::Thing *)&v51, (AMCP::Thing *)&v71, v41);
  if (v52)
    v52(0, &v51, 0, 0);
  if (v73)
  {
    LODWORD(v63[0]) = 1935962738;
    *(_QWORD *)((char *)v63 + 4) = *(_QWORD *)((char *)v59 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>((uint64_t *)&v51, (uint64_t)v63, (uint64_t)&v71);
  }
  else
  {
LABEL_91:
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v78);
  if (v73)
    v73(0, &v71, 0, 0);
  if (v51.__r_.__value_.__r.__words[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v51.__r_.__value_.__r.__words[0] + 40), &v51);
  v42 = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
  if (v51.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
}

void sub_1B5A6AC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Slider_Control::do_set_property(AMCP::Null::Slider_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  void **v7;
  CFIndex v8;
  CFStringRef v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  __CFDictionary *MutableCopy;
  int16x8_t v23;
  void **v24;
  CFIndex v25;
  CFStringRef v26;
  CFNumberRef v27;
  std::runtime_error *exception;
  std::runtime_error *v29;
  std::runtime_error *v30;
  std::runtime_error *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  CFTypeRef v36;
  char v37;
  void *v38;
  uint64_t valuePtr;
  void *__p[2];
  __int128 v41;
  uint64_t (*v42)(uint64_t, void **, _QWORD, void **);

  if (*(_DWORD *)a3 != 1935962742)
    return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a5.i64[0] = 0x676C6F6273647272;
  v33 = 0x676C6F6273647272;
  v34 = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v33, a5);
  if ((SBYTE7(v41) & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((SBYTE7(v41) & 0x80u) == 0)
    v8 = BYTE7(v41);
  else
    v8 = (CFIndex)__p[1];
  v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
  if (!v9)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v36, *((CFDictionaryRef *)this + 6), v9);
  CFRelease(v9);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  if (v37)
  {
    AMCP::make_thing_from_description((AMCP *)&v33, &v36);
    v32 = 0;
    if (v35)
    {
      v10 = (void *)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      v11 = v35;
      __p[0] = 0;
      if (v35)
      {
        v35(3, &v33, 0, __p);
        v11 = __p[0];
      }
      if (v11 == v10)
      {
        __p[0] = v10;
        v12 = ((uint64_t (*)(uint64_t, uint64_t *, _QWORD, void **))v35)(4, &v33, 0, __p);
        v13 = (unint64_t *)&v32;
        if (v12)
          v13 = (unint64_t *)v12;
        v14 = *v13;
        goto LABEL_29;
      }
      valuePtr = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      *(_OWORD *)__p = 0u;
      v41 = 0u;
      v42 = 0;
      v35(6, &v33, __p, &valuePtr);
      if (v42)
      {
        v38 = v10;
        v17 = v42(4, __p, 0, &v38);
        if (v17)
          v18 = (unint64_t *)v17;
        else
          v18 = (unint64_t *)&v32;
        v14 = *v18;
        if (v42)
          v42(0, __p, 0, 0);
        goto LABEL_29;
      }
    }
    v14 = 0;
LABEL_29:
    if (v35)
      v35(0, &v33, 0, 0);
    v16 = HIDWORD(v14);
    goto LABEL_32;
  }
  LODWORD(v14) = 0;
  LODWORD(v16) = 0;
LABEL_32:
  v19 = AMCP::Thing::convert_to<unsigned int>((uint64_t)a4);
  if (v19 >= v16)
    v20 = v16;
  else
    v20 = v19;
  if (v14 <= v20)
    v21 = v20;
  else
    v21 = v14;
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
  v23.i64[0] = 0x676C6F6273647276;
  v33 = 0x676C6F6273647276;
  v34 = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v33, v23);
  if ((SBYTE7(v41) & 0x80u) == 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if ((SBYTE7(v41) & 0x80u) == 0)
    v25 = BYTE7(v41);
  else
    v25 = (CFIndex)__p[1];
  v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
  if (!v26)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = v21;
  v27 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v27)
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v26, v27);
  CFRelease(v27);
  CFRelease(v26);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)__p, MutableCopy);
  (*(void (**)(AMCP::Null::Slider_Control *, void **))(*(_QWORD *)this + 24))(this, __p);
  if (__p[0])
    CFRelease(__p[0]);
  AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
  if (MutableCopy)
    CFRelease(MutableCopy);
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
  return 257;
}

void sub_1B5A6B0B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t, _OWORD *, _QWORD);
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _OWORD v24[2];
  void (*v25)(uint64_t, _OWORD *, __int128 *, _QWORD);
  __int128 v26;
  __int128 v27;
  void (*v28)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  void (*v33)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v34;
  int v35;
  _BYTE v36[24];
  _BYTE *v37;
  __int128 v38;
  __int128 v39;
  void (*v40)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a3 + 32);
  if (v5)
    v5(1, a3, v24, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  if (v25)
    v25(1, v24, &v26, 0);
  *((_QWORD *)&v39 + 1) = 0;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = &off_1E6981B48;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_QWORD *)v8 + 5) = 0;
  if (v28)
    v28(1, &v26, v8 + 8, 0);
  *((_QWORD *)&v39 + 1) = v8;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)&v38);
  v33 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)&v31);
  if (v33)
    v33(0, (uint64_t)&v31, 0, 0);
  v12 = (__int128 *)*((_QWORD *)&v39 + 1);
  if (*((__int128 **)&v39 + 1) == &v38)
  {
    v13 = 4;
    v12 = &v38;
  }
  else
  {
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_14;
    v13 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 8 * v13))(v12, v9, v10, v11);
LABEL_14:
  if (v28)
    v28(0, &v26, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v26, v6);
  v29 = *(_QWORD *)(v6 + 40);
  v30 = *(_DWORD *)(v6 + 48);
  v14 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  v15 = v26;
  v26 = 0uLL;
  v31 = v15;
  v32 = v27;
  LODWORD(v33) = (_DWORD)v28;
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = *(_QWORD *)(v27 + 8);
    if ((*((_QWORD *)&v15 + 1) & (*((_QWORD *)&v15 + 1) - 1)) != 0)
    {
      if (v16 >= *((_QWORD *)&v15 + 1))
        v16 %= *((_QWORD *)&v15 + 1);
    }
    else
    {
      v16 &= *((_QWORD *)&v15 + 1) - 1;
    }
    *(_QWORD *)(v15 + 8 * v16) = &v32;
    v27 = 0uLL;
  }
  v34 = v29;
  v35 = v30;
  v37 = 0;
  v17 = operator new(0x40uLL);
  *v17 = &off_1E6981BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v17 + 1), (uint64_t *)&v31);
  v17[6] = v34;
  *((_DWORD *)v17 + 14) = v35;
  v37 = v17;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v38, (uint64_t)v36);
  v40 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v14, (AMCP *)&v38);
  if (v40)
    v40(0, (uint64_t)&v38, 0, 0);
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_29;
    v22 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v18, v19, v20);
LABEL_29:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v31);
  result = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v26);
  if (v25)
    return ((uint64_t (*)(_QWORD, _OWORD *, _QWORD, _QWORD))v25)(0, v24, 0, 0);
  return result;
}

void sub_1B5A6B44C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981BC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A6B5C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981BC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A6B6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__15tupleIJjjEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981B48;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981B48;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981B48;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6B824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981B48;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__15tupleIJjjEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981AC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981AC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981AC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A6BA20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981AC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  _OWORD v3[2];
  BOOL (*v4)(_BOOL8, uint64_t, uint64_t, uint64_t *);

  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = *a2;
  v4 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((_QWORD *)(a1 + 8), (uint64_t)v3);
  if (v4)
    return v4(0, (uint64_t)v3, 0, 0);
  return result;
}

void sub_1B5A6BB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD, uint64_t *, _QWORD, _QWORD))
{
  if (a13)
    a13(0, &a9, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIjEEvRNS0_9OperationEEUlRKjE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6981A48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6981A48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6981A48;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6981A48;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A6C25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935962742EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69819C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69819C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69819C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6C5C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69819C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935962742EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Level_Control::~Level_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Level_Control::populate_core@<X0>(AMCP::Null::Level_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  CFIndex v10;
  CFStringRef v11;
  AMCP::Thing *v12;
  AMCP::Thing *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  CFIndex v38;
  CFStringRef v39;
  AMCP::Thing *v40;
  AMCP::Thing *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  __int128 *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int16x8_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void **v62;
  CFIndex v63;
  CFStringRef v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  CFIndex v69;
  CFStringRef v70;
  AMCP::Thing *v71;
  AMCP::Thing *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  __int128 *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  CFTypeRef *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void **v90;
  uint64_t v91;
  unint64_t v92;
  void **v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::runtime_error *exception;
  std::runtime_error *v100;
  std::runtime_error *v101;
  std::runtime_error *v102;
  std::runtime_error *v103;
  std::runtime_error *v104;
  std::runtime_error *v105;
  std::runtime_error *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  CFTypeRef v110[2];
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unsigned int v115[4];
  __int128 v116;
  unsigned int *v117;
  std::__shared_weak_count *v118;
  double v119[2];
  __int128 v120;
  __int128 v121;
  void (*v122)(uint64_t, __int128 *, __int128 *, _QWORD);
  void *v123[2];
  __int128 v124;
  uint64_t (*v125)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v126;
  int v127;
  __int128 v128;
  __int128 v129;
  void (*v130)(uint64_t, __int128 *, char *, _QWORD);
  char v131;
  __int128 v132;
  __int128 v133;
  void (*v134)(uint64_t, __int128 *, __int128 *, _QWORD);
  void *__p[2];
  __int128 v136;
  uint64_t (*v137)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v138;
  int v139;
  CFTypeRef v140;
  char v141;
  CFTypeRef *v142;
  __int128 v143;
  __int128 v144;
  uint64_t (*v145)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v113, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(v123[0]) = 0;
  LOBYTE(v126) = 0;
  v6 = v113;
  v5 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  strcpy((char *)v110, "vsclbolg");
  BYTE1(v110[1]) = 0;
  WORD1(v110[1]) = 0;
  v145 = 0;
  v143 = 0u;
  v144 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v110, (int16x8_t)0);
  if ((SBYTE7(v136) & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((SBYTE7(v136) & 0x80u) == 0)
    v10 = BYTE7(v136);
  else
    v10 = (CFIndex)__p[1];
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v100, "Could not construct");
    __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v140, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  if (v141)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v140);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v143, v13);
    if (v137)
      v137(0, (uint64_t)__p, 0, 0);
  }
  else if ((_BYTE)v126)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v143, (uint64_t)v123, v12);
  }
  if (!v145)
  {
    v117 = 0;
    v118 = 0;
    goto LABEL_46;
  }
  v107 = *(uint64_t *)((char *)v110 + 4);
  v122 = 0;
  v120 = 0u;
  v121 = 0u;
  v145(1, (uint64_t)&v143, (AMCP::Thing *)&v120, 0);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  LODWORD(v116) = 1818456950;
  *(_QWORD *)((char *)&v116 + 4) = v107;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, SHIDWORD(v107), *(double *)&v116);
  v16 = v117;
  v17 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  if (v122)
    v122(2, &v120, &v128, 0);
  *((_QWORD *)&v133 + 1) = 0;
  v18 = (char *)operator new(0x30uLL);
  *(_QWORD *)v18 = &off_1E6981C48;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *((_QWORD *)v18 + 5) = 0;
  if (v130)
    v130(2, &v128, v18 + 8, 0);
  *((_QWORD *)&v133 + 1) = v18;
  *(_OWORD *)__p = 0u;
  v136 = 0u;
  v137 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v132);
  v137 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v16, v17, (AMCP *)__p);
  if (v137)
    v137(0, (uint64_t)__p, 0, 0);
  v19 = (__int128 *)*((_QWORD *)&v133 + 1);
  if (*((__int128 **)&v133 + 1) == &v132)
  {
    v20 = 4;
    v19 = &v132;
  }
  else
  {
    if (!*((_QWORD *)&v133 + 1))
      goto LABEL_35;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_35:
  if (v130)
    v130(0, &v128, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<float>((uint64_t)v16);
  v21 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v129 + 1) = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_1E6981D48;
  v22[1] = v6;
  v22[2] = v5;
  v22[3] = 0x676C6F626C637376;
  *((_DWORD *)v22 + 8) = HIDWORD(v107);
  *((_QWORD *)&v129 + 1) = v22;
  *(_OWORD *)__p = 0u;
  v136 = 0u;
  v137 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v128);
  v137 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v16, v21, (AMCP *)__p);
  if (v137)
    v137(0, (uint64_t)__p, 0, 0);
  v23 = (__int128 *)*((_QWORD *)&v129 + 1);
  if (*((__int128 **)&v129 + 1) == &v128)
  {
    v24 = 4;
    v23 = &v128;
  }
  else
  {
    if (!*((_QWORD *)&v129 + 1))
      goto LABEL_44;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_44:
  AMCP::Core::Operation_Utilities::add_specific_property_setter<float>((uint64_t)v16);
  if (v122)
    v122(0, &v120, 0, 0);
LABEL_46:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v140);
  if (v145)
    v145(0, (uint64_t)&v143, 0, 0);
  if (v5)
  {
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v117)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v117 + 10, &v117);
  v27 = v118;
  if (v118)
  {
    v28 = (unint64_t *)&v118->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v123);
  v30 = v114;
  if (v114)
  {
    v31 = (unint64_t *)&v114->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v111, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(v123[0]) = 0;
  LOBYTE(v126) = 0;
  v34 = v111;
  v33 = v112;
  if (v112)
  {
    v35 = (unint64_t *)&v112->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  strcpy((char *)v110, "vdclbolg");
  BYTE1(v110[1]) = 0;
  WORD1(v110[1]) = 0;
  v145 = 0;
  v143 = 0u;
  v144 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Could not construct");
    __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v110, (int16x8_t)0);
  if ((SBYTE7(v136) & 0x80u) == 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  if ((SBYTE7(v136) & 0x80u) == 0)
    v38 = BYTE7(v136);
  else
    v38 = (CFIndex)__p[1];
  v39 = CFStringCreateWithBytes(0, (const UInt8 *)v37, v38, 0x8000100u, 0);
  if (!v39)
  {
    v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v102, "Could not construct");
    __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v140, *((CFDictionaryRef *)this + 6), v39);
  CFRelease(v39);
  if (SBYTE7(v136) < 0)
    operator delete(__p[0]);
  if (v141)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v140);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v143, v41);
    if (v137)
      v137(0, (uint64_t)__p, 0, 0);
  }
  else if ((_BYTE)v126)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v143, (uint64_t)v123, v40);
  }
  if (!v145)
  {
    v117 = 0;
    v118 = 0;
    goto LABEL_110;
  }
  v108 = *(uint64_t *)((char *)v110 + 4);
  v122 = 0;
  v120 = 0u;
  v121 = 0u;
  v145(1, (uint64_t)&v143, (AMCP::Thing *)&v120, 0);
  if (v33)
  {
    v42 = (unint64_t *)&v33->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  LODWORD(v116) = 1818453110;
  *(_QWORD *)((char *)&v116 + 4) = v108;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v117, SHIDWORD(v108), *(double *)&v116);
  v44 = v117;
  v45 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  if (v122)
    v122(2, &v120, &v128, 0);
  *((_QWORD *)&v133 + 1) = 0;
  v46 = (char *)operator new(0x30uLL);
  *(_QWORD *)v46 = &off_1E6981E48;
  *(_OWORD *)(v46 + 8) = 0u;
  *(_OWORD *)(v46 + 24) = 0u;
  *((_QWORD *)v46 + 5) = 0;
  if (v130)
    v130(2, &v128, v46 + 8, 0);
  *((_QWORD *)&v133 + 1) = v46;
  *(_OWORD *)__p = 0u;
  v136 = 0u;
  v137 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v132);
  v137 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v44, v45, (AMCP *)__p);
  if (v137)
    v137(0, (uint64_t)__p, 0, 0);
  v47 = (__int128 *)*((_QWORD *)&v133 + 1);
  if (*((__int128 **)&v133 + 1) == &v132)
  {
    v48 = 4;
    v47 = &v132;
  }
  else
  {
    if (!*((_QWORD *)&v133 + 1))
      goto LABEL_99;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_99:
  if (v130)
    v130(0, &v128, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<float>((uint64_t)v44);
  v49 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v129 + 1) = 0;
  v50 = operator new(0x28uLL);
  *v50 = &off_1E6981EC8;
  v50[1] = v34;
  v50[2] = v33;
  v50[3] = 0x676C6F626C636476;
  *((_DWORD *)v50 + 8) = HIDWORD(v108);
  *((_QWORD *)&v129 + 1) = v50;
  *(_OWORD *)__p = 0u;
  v136 = 0u;
  v137 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v128);
  v137 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v44, v49, (AMCP *)__p);
  if (v137)
    v137(0, (uint64_t)__p, 0, 0);
  v51 = (__int128 *)*((_QWORD *)&v129 + 1);
  if (*((__int128 **)&v129 + 1) == &v128)
  {
    v52 = 4;
    v51 = &v128;
  }
  else
  {
    if (!*((_QWORD *)&v129 + 1))
      goto LABEL_108;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_108:
  AMCP::Core::Operation_Utilities::add_specific_property_setter<float>((uint64_t)v44);
  if (v122)
    v122(0, &v120, 0, 0);
LABEL_110:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v140);
  if (v145)
    v145(0, (uint64_t)&v143, 0, 0);
  if (v33)
  {
    v53 = (unint64_t *)&v33->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v117)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v117 + 10, &v117);
  v55 = v118;
  if (v118)
  {
    v56 = (unint64_t *)&v118->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v123);
  v59 = v112;
  if (v112)
  {
    v60 = (unint64_t *)&v112->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (!*((_QWORD *)this + 6))
  {
    v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v103, "Could not construct");
    __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p[0] = (void *)0x676C6F626C636472;
  LODWORD(__p[1]) = 0;
  AMCP::Address::to_string((std::string *)v123, (unsigned int *)__p, v58);
  if ((SBYTE7(v124) & 0x80u) == 0)
    v62 = v123;
  else
    v62 = (void **)v123[0];
  if ((SBYTE7(v124) & 0x80u) == 0)
    v63 = BYTE7(v124);
  else
    v63 = (CFIndex)v123[1];
  v64 = CFStringCreateWithBytes(0, (const UInt8 *)v62, v63, 0x8000100u, 0);
  if (!v64)
  {
    v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v104, "Could not construct");
    __cxa_throw(v104, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v110, *((CFDictionaryRef *)this + 6), v64);
  CFRelease(v64);
  if (SBYTE7(v124) < 0)
    operator delete(v123[0]);
  if (LOBYTE(v110[1]))
  {
    AMCP::make_thing_from_description((AMCP *)v123, v110);
    __p[0] = 0;
    __p[1] = 0;
    v65 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)v123, __p);
    v67 = v66;
    if (v125)
      v125(0, (uint64_t)v123, 0, 0);
  }
  else
  {
    v67 = 0;
    v65 = 0.0;
  }
  LOBYTE(v128) = 0;
  v131 = 0;
  strcpy((char *)v115, "rdclbolg");
  BYTE1(v115[2]) = 0;
  HIWORD(v115[2]) = 0;
  v134 = 0;
  v132 = 0u;
  v133 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v105, "Could not construct");
    __cxa_throw(v105, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)v123, v115, (int16x8_t)0);
  if ((SBYTE7(v124) & 0x80u) == 0)
    v68 = v123;
  else
    v68 = (void **)v123[0];
  if ((SBYTE7(v124) & 0x80u) == 0)
    v69 = BYTE7(v124);
  else
    v69 = (CFIndex)v123[1];
  v70 = CFStringCreateWithBytes(0, (const UInt8 *)v68, v69, 0x8000100u, 0);
  if (!v70)
  {
    v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v106, "Could not construct");
    __cxa_throw(v106, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v117, *((CFDictionaryRef *)this + 6), v70);
  CFRelease(v70);
  if (SBYTE7(v124) < 0)
    operator delete(v123[0]);
  if ((_BYTE)v118)
  {
    AMCP::make_thing_from_description((AMCP *)v123, (CFTypeRef *)&v117);
    AMCP::swap((AMCP::Thing *)v123, (AMCP::Thing *)&v132, v72);
    if (v125)
      v125(0, (uint64_t)v123, 0, 0);
  }
  else if (v131)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v132, (uint64_t)&v128, v71);
  }
  if (!v134)
  {
    v73 = 0;
    v116 = 0uLL;
    goto LABEL_188;
  }
  LODWORD(v119[0]) = 1818453106;
  v109 = v115[2];
  *(double *)((char *)v119 + 4) = *(double *)&v115[1];
  v122 = 0;
  v120 = 0u;
  v121 = 0u;
  v134(1, &v132, &v120, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v116, v109, v119[0]);
  v73 = v116;
  v74 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  *(_OWORD *)__p = 0u;
  v136 = 0u;
  v137 = 0;
  if (v122)
    v122(1, &v120, (__int128 *)__p, 0);
  *((_QWORD *)&v144 + 1) = 0;
  v75 = (char *)operator new(0x30uLL);
  *(_QWORD *)v75 = &off_1E6981F48;
  *(_OWORD *)(v75 + 8) = 0u;
  *(_OWORD *)(v75 + 24) = 0u;
  *((_QWORD *)v75 + 5) = 0;
  if (v137)
    v137(1, (uint64_t)__p, (AMCP::Thing *)(v75 + 8), 0);
  *((_QWORD *)&v144 + 1) = v75;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v123, (uint64_t)&v143);
  v125 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v74, (AMCP *)v123);
  if (v125)
    v125(0, (uint64_t)v123, 0, 0);
  v76 = (__int128 *)*((_QWORD *)&v144 + 1);
  if (*((__int128 **)&v144 + 1) == &v143)
  {
    v77 = 4;
    v76 = &v143;
  }
  else
  {
    if (!*((_QWORD *)&v144 + 1))
      goto LABEL_171;
    v77 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
LABEL_171:
  if (v137)
    v137(0, (uint64_t)__p, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)__p, v73);
  v138 = *(_QWORD *)(v73 + 40);
  v139 = *(_DWORD *)(v73 + 48);
  v78 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  v79 = __p[0];
  v80 = (unint64_t)__p[1];
  __p[0] = 0;
  __p[1] = 0;
  v123[0] = v79;
  v123[1] = (void *)v80;
  v124 = v136;
  LODWORD(v125) = (_DWORD)v137;
  if (*((_QWORD *)&v136 + 1))
  {
    v81 = *(_QWORD *)(v136 + 8);
    if ((v80 & (v80 - 1)) != 0)
    {
      if (v81 >= v80)
        v81 %= v80;
    }
    else
    {
      v81 &= v80 - 1;
    }
    *((_QWORD *)v79 + v81) = &v124;
    v136 = 0uLL;
  }
  v126 = v138;
  v127 = v139;
  v142 = 0;
  v82 = operator new(0x40uLL);
  *v82 = &off_1E6981FC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v82 + 1), (uint64_t *)v123);
  v82[6] = v126;
  *((_DWORD *)v82 + 14) = v127;
  v142 = (CFTypeRef *)v82;
  v143 = 0u;
  v144 = 0u;
  v145 = 0;
  std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)&v143, (uint64_t)&v140);
  v145 = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v78, (AMCP *)&v143);
  if (v145)
    v145(0, (uint64_t)&v143, 0, 0);
  v83 = v142;
  if (v142 == &v140)
  {
    v84 = 4;
    v83 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_186;
    v84 = 5;
  }
  (*((void (**)(void))*v83 + v84))();
LABEL_186:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v123);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  if (v122)
    v122(0, &v120, 0, 0);
LABEL_188:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v117);
  if (v134)
    v134(0, &v132, 0, 0);
  if (v73)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v73 + 40), &v116);
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v128);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v128, 0, 1.5836601e190);
  v88 = v128;
  v89 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  __p[0] = &off_1E6982048;
  __p[1] = *(void **)&v65;
  *(_QWORD *)&v136 = v67;
  *((_QWORD *)&v136 + 1) = __p;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v123, (uint64_t)__p);
  v125 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v89, (AMCP *)v123);
  if (v125)
    v125(0, (uint64_t)v123, 0, 0);
  v90 = (void **)*((_QWORD *)&v136 + 1);
  if (*((void ***)&v136 + 1) == __p)
  {
    v91 = 4;
    v90 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v136 + 1))
      goto LABEL_204;
    v91 = 5;
  }
  (*((void (**)(void))*v90 + v91))();
LABEL_204:
  v92 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  __p[0] = &off_1E69820C8;
  __p[1] = *(void **)&v65;
  *(_QWORD *)&v136 = v67;
  *((_QWORD *)&v136 + 1) = __p;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
  v125 = 0;
  std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)v123, (uint64_t)__p);
  v125 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v92, (AMCP *)v123);
  if (v125)
    v125(0, (uint64_t)v123, 0, 0);
  v93 = (void **)*((_QWORD *)&v136 + 1);
  if (*((void ***)&v136 + 1) == __p)
  {
    v94 = 4;
    v93 = __p;
    goto LABEL_210;
  }
  if (*((_QWORD *)&v136 + 1))
  {
    v94 = 5;
LABEL_210:
    (*((void (**)(void))*v93 + v94))();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v88 + 40), &v128);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v110);
}

void sub_1B5A6D92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Level_Control::do_set_property(AMCP::Null::Level_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v9;
  double v10;
  double v11;
  double v12;
  std::string *v13;
  CFIndex v14;
  CFStringRef v15;
  double v16;
  double v17;
  double v18;
  float v20;
  __CFDictionary *MutableCopy;
  int16x8_t v22;
  std::string *v23;
  CFIndex v24;
  CFStringRef v25;
  float v26;
  CFNumberRef v27;
  int16x8_t v28;
  std::string *v29;
  CFIndex v30;
  CFStringRef v31;
  CFNumberRef v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int16x8_t v37;
  std::string *v38;
  CFIndex v39;
  CFStringRef v40;
  float v41;
  CFNumberRef v42;
  int16x8_t v43;
  std::string *v44;
  CFIndex v45;
  CFStringRef v46;
  CFNumberRef v47;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  uint64_t v59;
  uint64_t v60;
  std::string __p;
  void (*v62)(_QWORD, std::string *, _QWORD, _QWORD);
  CFTypeRef v63;
  char v64;
  double valuePtr;

  if (*(_DWORD *)a3 != 1818453110)
  {
    if (*(_DWORD *)a3 != 1818456950)
      return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
    if (*((_QWORD *)this + 6))
    {
      a5.i64[0] = 0x676C6F626C636472;
      v59 = 0x676C6F626C636472;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, a5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v9 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), v9);
      CFRelease(v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v64)
      {
        AMCP::make_thing_from_description((AMCP *)&__p, &v63);
        v59 = 0;
        v60 = 0;
        v10 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)&__p, &v59);
        v12 = v11;
        if (v62)
          v62(0, &__p, 0, 0);
      }
      else
      {
        v12 = 0.0;
        v10 = 0.0;
      }
      v20 = AMCP::Thing::convert_to<float>((uint64_t)a4);
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
      v22.i64[0] = 0x676C6F626C637376;
      v59 = 0x676C6F626C637376;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v22);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v24 = __p.__r_.__value_.__l.__size_;
      v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
      if (!v25)
      {
        v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
        __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v26 = fmaxf(fminf(v20, 1.0), 0.0);
      *(float *)&valuePtr = v26;
      v27 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (!v27)
      {
        v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v25, v27);
      CFRelease(v27);
      CFRelease(v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v28.i64[0] = 0x676C6F626C636476;
      v59 = 0x676C6F626C636476;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v28);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v30 = __p.__r_.__value_.__l.__size_;
      v31 = CFStringCreateWithBytes(0, (const UInt8 *)v29, v30, 0x8000100u, 0);
      if (!v31)
      {
        v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      valuePtr = v10 + v26 * (v12 - v10);
      v32 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!v32)
      {
        v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v31, v32);
      CFRelease(v32);
      CFRelease(v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
      (*(void (**)(AMCP::Null::Level_Control *, std::string *))(*(_QWORD *)this + 24))(this, &__p);
      if (__p.__r_.__value_.__r.__words[0])
        CFRelease(__p.__r_.__value_.__l.__data_);
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
      if (!MutableCopy)
        goto LABEL_85;
      goto LABEL_84;
    }
LABEL_86:
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*((_QWORD *)this + 6))
    goto LABEL_86;
  a5.i64[0] = 0x676C6F626C636472;
  v59 = 0x676C6F626C636472;
  LODWORD(v60) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v59, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
  if (!v15)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), v15);
  CFRelease(v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v64)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v63);
    v59 = 0;
    v60 = 0;
    v16 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)&__p, &v59);
    v18 = v17;
    if (v62)
      v62(0, &__p, 0, 0);
  }
  else
  {
    v18 = 0.0;
    v16 = 0.0;
  }
  v33 = AMCP::Thing::convert_to<float>((uint64_t)a4);
  v34 = v18;
  if (v33 >= v34)
    v33 = v18;
  v35 = v16;
  if (v33 <= v35)
    v36 = v16;
  else
    v36 = v33;
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
  v37.i64[0] = 0x676C6F626C637376;
  v59 = 0x676C6F626C637376;
  LODWORD(v60) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v59, v37);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &__p;
  else
    v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v39 = __p.__r_.__value_.__l.__size_;
  v40 = CFStringCreateWithBytes(0, (const UInt8 *)v38, v39, 0x8000100u, 0);
  if (!v40)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v41 = v18 - v16;
  *(float *)&valuePtr = (float)(v36 - v35) / v41;
  v42 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v42)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v40, v42);
  CFRelease(v42);
  CFRelease(v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v43.i64[0] = 0x676C6F626C636476;
  v59 = 0x676C6F626C636476;
  LODWORD(v60) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v59, v43);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &__p;
  else
    v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v45 = __p.__r_.__value_.__l.__size_;
  v46 = CFStringCreateWithBytes(0, (const UInt8 *)v44, v45, 0x8000100u, 0);
  if (!v46)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(float *)&valuePtr = v36;
  v47 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v47)
  {
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v46, v47);
  CFRelease(v47);
  CFRelease(v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
  (*(void (**)(AMCP::Null::Level_Control *, std::string *))(*(_QWORD *)this + 24))(this, &__p);
  if (__p.__r_.__value_.__r.__words[0])
    CFRelease(__p.__r_.__value_.__l.__data_);
  AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
  if (!MutableCopy)
    goto LABEL_85;
LABEL_84:
  CFRelease(MutableCopy);
LABEL_85:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v63);
  return 257;
}

void sub_1B5A6E2C0(void *a1)
{
  __clang_call_terminate(a1);
}

double AMCP::Thing::convert_or<CA::ValueRange>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _OWORD *);
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  double *v10;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t (*v15)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 32))
    return *(double *)a2;
  v4 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a1 + 32);
  *(_QWORD *)&v14[0] = 0;
  if (v5)
  {
    v5(3, a1, 0, v14);
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v4)
  {
    v16 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v16);
    if (v6)
      v7 = (_QWORD *)v6;
    else
      v7 = a2;
    return *(double *)v7;
  }
  v13 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v14, &v13);
  if (!v15)
    return *(double *)a2;
  v12 = v4;
  v9 = v15(4, v14, 0, &v12);
  if (v9)
    v10 = (double *)v9;
  else
    v10 = (double *)a2;
  v8 = *v10;
  if (v15)
    v15(0, v14, 0, 0);
  return v8;
}

void sub_1B5A6E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6981CC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A6E668(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6981DC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5A6E834(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(float)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69820C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69820C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  float v2;
  double v3;
  double v4;
  float v5;
  float v6;
  float v7;

  v2 = *a2;
  v4 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v5 = v3;
  if (*a2 >= v5)
    v2 = v3;
  v6 = v4;
  if (v2 <= v6)
    v2 = v4;
  v7 = v3 - v4;
  return (float)(v2 - v6) / v7;
}

uint64_t std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null13Level_Control13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::target_type()
{
}

void std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6982048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6982048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(double *)(a1 + 8) + fmaxf(fminf(*a2, 1.0), 0.0) * (*(double *)(a1 + 16) - *(double *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null13Level_Control13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

uint64_t std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981FC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981FC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981FC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A6F0C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981FC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::operator()(uint64_t a1)
{
  double v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<CA::ValueRange>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A6F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA10ValueRangeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981F48;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981F48;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981F48;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6F334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981F48;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN2CA10ValueRangeEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6981EC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6981EC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6981EC8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6981EC8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A6FB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818453110EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981E48;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981E48;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981E48;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A6FEA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981E48;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818453110EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981DC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981DC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981DC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A7009C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981DC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  _OWORD v3[2];
  BOOL (*v4)(_BOOL8, uint64_t, uint64_t, uint64_t *);

  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = *a2;
  v4 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((_QWORD *)(a1 + 8), (uint64_t)v3);
  if (v4)
    return v4(0, (uint64_t)v3, 0, 0);
  return result;
}

void sub_1B5A70190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD, uint64_t *, _QWORD, _QWORD))
{
  if (a13)
    a13(0, &a9, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIfEEvRNS0_9OperationEEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6981D48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6981D48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6981D48;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6981D48;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A708D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818456950EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981CC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6981CC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6981CC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A70BFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6981CC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::operator()(uint64_t a1)
{
  float v1;
  _BYTE v3[32];
  void (*v4)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (_QWORD *)(a1 + 8));
  v1 = AMCP::Thing::convert_to<float>((uint64_t)v3);
  if (v4)
    v4(0, v3, 0, 0);
  return v1;
}

void sub_1B5A70CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIfEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981C48;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6981C48;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6981C48;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A70E68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6981C48;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818456950EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Level_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Level_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Level_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Boolean_Control::~Boolean_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Null::Boolean_Control::populate_core(AMCP::Null::Boolean_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  CFIndex v10;
  CFStringRef v11;
  AMCP::Thing *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  uint64_t v40;
  _BYTE v41[48];
  uint64_t v42;
  std::__shared_weak_count *v43;
  unsigned int v44[4];
  uint64_t v45;
  std::__shared_weak_count *v46;
  _OWORD v47[2];
  void (*v48)(uint64_t, _OWORD *, __int128 *, _QWORD);
  CFTypeRef v49;
  char v50;
  _OWORD v51[2];
  void (*v52)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  double v53[2];
  void *__p[2];
  __int128 v55;
  uint64_t (*v56)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  void (*v61)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v62;
  int v63;
  _BYTE v64[24];
  _BYTE *v65;
  __int128 v66;
  __int128 v67;
  void (*v68)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v42, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v41[0] = 0;
  v41[40] = 0;
  v6 = v42;
  v5 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  strcpy((char *)v44, "lvcbbolg");
  BYTE1(v44[2]) = 0;
  HIWORD(v44[2]) = 0;
  v52 = 0;
  memset(v51, 0, sizeof(v51));
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, v44, (int16x8_t)0);
  if ((SBYTE7(v55) & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((SBYTE7(v55) & 0x80u) == 0)
    v10 = BYTE7(v55);
  else
    v10 = (CFIndex)__p[1];
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v49, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SBYTE7(v55) < 0)
    operator delete(__p[0]);
  if (v50)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v49);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v51, v12);
    if (v56)
      v56(0, (uint64_t)__p, 0, 0);
  }
  if (!v52)
  {
    v45 = 0;
    v46 = 0;
    goto LABEL_57;
  }
  v40 = *(_QWORD *)&v44[1];
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  v52(1, v51, v47, 0);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  LODWORD(v53[0]) = 1650685548;
  *(_QWORD *)((char *)v53 + 4) = v40;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v45, SHIDWORD(v40), v53[0]);
  v15 = v45;
  v16 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v59 = 0u;
  v60 = 0u;
  v61 = 0;
  if (v48)
    v48(2, v47, &v59, 0);
  *((_QWORD *)&v67 + 1) = 0;
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E6982148;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((_QWORD *)v17 + 5) = 0;
  if (v61)
    v61(2, &v59, v17 + 8, 0);
  *((_QWORD *)&v67 + 1) = v17;
  *(_OWORD *)__p = 0u;
  v55 = 0u;
  v56 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v66);
  v56 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)__p);
  if (v56)
    v56(0, (uint64_t)__p, 0, 0);
  v18 = (__int128 *)*((_QWORD *)&v67 + 1);
  if (*((__int128 **)&v67 + 1) == &v66)
  {
    v19 = 4;
    v18 = &v66;
  }
  else
  {
    if (!*((_QWORD *)&v67 + 1))
      goto LABEL_33;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_33:
  if (v61)
    v61(0, &v59, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(v15);
  v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v60 + 1) = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E69821C8;
  v21[1] = v6;
  v21[2] = v5;
  v21[3] = 0x676C6F626263766CLL;
  *((_DWORD *)v21 + 8) = HIDWORD(v40);
  *((_QWORD *)&v60 + 1) = v21;
  *(_OWORD *)__p = 0u;
  v55 = 0u;
  v56 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v59);
  v56 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v20, (AMCP *)__p);
  if (v56)
    v56(0, (uint64_t)__p, 0, 0);
  v22 = (__int128 *)*((_QWORD *)&v60 + 1);
  if (*((__int128 **)&v60 + 1) == &v59)
  {
    v23 = 4;
    v22 = &v59;
  }
  else
  {
    if (!*((_QWORD *)&v60 + 1))
      goto LABEL_42;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_42:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v59, v15);
  v62 = *(_QWORD *)(v15 + 40);
  v63 = *(_DWORD *)(v15 + 48);
  v24 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  v25 = v59;
  v59 = 0uLL;
  *(_OWORD *)__p = v25;
  v55 = v60;
  LODWORD(v56) = (_DWORD)v61;
  if (*((_QWORD *)&v60 + 1))
  {
    v26 = *(_QWORD *)(v60 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &v55;
    v60 = 0uLL;
  }
  v57 = v62;
  v58 = v63;
  v65 = 0;
  v27 = operator new(0x40uLL);
  *v27 = &off_1E6982248;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v27 + 1), (uint64_t *)__p);
  v27[6] = v57;
  *((_DWORD *)v27 + 14) = v58;
  v65 = v27;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v64);
  v68 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v24, (AMCP *)&v66);
  if (v68)
    v68(0, (uint64_t)&v66, 0, 0);
  v28 = v65;
  if (v65 == v64)
  {
    v29 = 4;
    v28 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_55;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_55:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v59);
  if (v48)
    v48(0, v47, 0, 0);
LABEL_57:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v49);
  if (v52)
    v52(0, v51, 0, 0);
  if (v5)
  {
    v30 = (unint64_t *)&v5->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v45)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v45 + 40), &v45);
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v41);
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1B5A716B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Boolean_Control::do_set_property(AMCP::Null::Boolean_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  const void *v8;
  std::string *p_p;
  CFIndex size;
  CFStringRef v11;
  uint64_t v12;
  std::runtime_error *exception;
  uint64_t v15;
  int v16;
  std::string __p;
  const void *v18;

  if (*(_DWORD *)a3 != 1650685548)
    return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
  AMCP::make_description_from_thing((AMCP *)&v18, a4);
  v8 = v18;
  if (v18 || !CFBooleanGetTypeID())
  {
    v7.i64[0] = 0x676C6F626263766CLL;
    v15 = 0x676C6F626263766CLL;
    v16 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v11, v8);
    CFRelease(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
    (*(void (**)(AMCP::Null::Boolean_Control *, std::string *))(*(_QWORD *)this + 24))(this, &__p);
    if (__p.__r_.__value_.__r.__words[0])
      CFRelease(__p.__r_.__value_.__l.__data_);
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
    if (v8)
      CFRelease(v8);
    v12 = 257;
    if (!MutableCopy)
      return v12;
    goto LABEL_21;
  }
  v12 = 1;
  if (MutableCopy)
LABEL_21:
    CFRelease(MutableCopy);
  return v12;
}

void sub_1B5A718E4(void *a1)
{
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982248;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982248;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6982248;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A719E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6982248;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  _OWORD v3[2];
  BOOL (*v4)(_BOOL8, uint64_t, uint64_t, uint64_t *);

  memset(v3, 0, sizeof(v3));
  LOBYTE(v3[0]) = *a2;
  v4 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((_QWORD *)(a1 + 8), (uint64_t)v3);
  if (v4)
    return v4(0, (uint64_t)v3, 0, 0);
  return result;
}

void sub_1B5A71AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD, uint64_t *, _QWORD, _QWORD))
{
  if (a13)
    a13(0, &a9, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIbEEvRNS0_9OperationEEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69821C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69821C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69821C8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69821C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A7221C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1650685548EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982148;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982148;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6982148;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A72580(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6982148;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1650685548EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69826E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69826E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Selector_Control::~Selector_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Selector_Control::populate_core@<X0>(AMCP::Null::Selector_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  CFIndex v10;
  CFStringRef v11;
  AMCP::Thing *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  CFIndex v42;
  CFStringRef v43;
  AMCP::Thing *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::runtime_error *exception;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[40];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unsigned int v70[4];
  uint64_t v71;
  std::__shared_weak_count *v72;
  CFTypeRef v73;
  char v74;
  __int128 v75;
  __int128 v76;
  void (*v77)(uint64_t, __int128 *, __int128 *, _QWORD);
  double v78[2];
  __int128 v79;
  __int128 v80;
  void (*v81)(uint64_t, __int128 *, __int128 *, _QWORD);
  void *__p[2];
  __int128 v83;
  uint64_t (*v84)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v85;
  int v86;
  __int128 v87;
  __int128 v88;
  void (*v89)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v90;
  int v91;
  _BYTE v92[24];
  _BYTE *v93;
  __int128 v94;
  __int128 v95;
  void (*v96)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v68, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v66[0] = 0;
  v67 = 0;
  v6 = v68;
  v5 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  strcpy((char *)v70, "iccsbolg");
  BYTE1(v70[2]) = 0;
  HIWORD(v70[2]) = 0;
  v81 = 0;
  v79 = 0u;
  v80 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, v70, (int16x8_t)0);
  if ((SBYTE7(v83) & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((SBYTE7(v83) & 0x80u) == 0)
    v10 = BYTE7(v83);
  else
    v10 = (CFIndex)__p[1];
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
    __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v73, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SBYTE7(v83) < 0)
    operator delete(__p[0]);
  if (v74)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v73);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v79, v12);
    if (v84)
      v84(0, (uint64_t)__p, 0, 0);
  }
  if (!v81)
  {
    v71 = 0;
    v72 = 0;
    goto LABEL_57;
  }
  v64 = *(_QWORD *)&v70[1];
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  v81(1, &v79, &v75, 0);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  LODWORD(v78[0]) = 1935893353;
  *(_QWORD *)((char *)v78 + 4) = v64;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v71, SHIDWORD(v64), v78[0]);
  v15 = v71;
  v16 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v87 = 0u;
  v88 = 0u;
  v89 = 0;
  if (v77)
    v77(2, &v75, &v87, 0);
  *((_QWORD *)&v95 + 1) = 0;
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E69822C8;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((_QWORD *)v17 + 5) = 0;
  if (v89)
    v89(2, &v87, v17 + 8, 0);
  *((_QWORD *)&v95 + 1) = v17;
  *(_OWORD *)__p = 0u;
  v83 = 0u;
  v84 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v94);
  v84 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)__p);
  if (v84)
    v84(0, (uint64_t)__p, 0, 0);
  v18 = (__int128 *)*((_QWORD *)&v95 + 1);
  if (*((__int128 **)&v95 + 1) == &v94)
  {
    v19 = 4;
    v18 = &v94;
  }
  else
  {
    if (!*((_QWORD *)&v95 + 1))
      goto LABEL_33;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_33:
  if (v89)
    v89(0, &v87, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(v15);
  v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v88 + 1) = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6982348;
  v21[1] = v6;
  v21[2] = v5;
  v21[3] = 0x676C6F6273636369;
  *((_DWORD *)v21 + 8) = HIDWORD(v64);
  *((_QWORD *)&v88 + 1) = v21;
  *(_OWORD *)__p = 0u;
  v83 = 0u;
  v84 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v87);
  v84 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v20, (AMCP *)__p);
  if (v84)
    v84(0, (uint64_t)__p, 0, 0);
  v22 = (__int128 *)*((_QWORD *)&v88 + 1);
  if (*((__int128 **)&v88 + 1) == &v87)
  {
    v23 = 4;
    v22 = &v87;
  }
  else
  {
    if (!*((_QWORD *)&v88 + 1))
      goto LABEL_42;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_42:
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v87, v15);
  v90 = *(_QWORD *)(v15 + 40);
  v91 = *(_DWORD *)(v15 + 48);
  v24 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  v25 = v87;
  v87 = 0uLL;
  *(_OWORD *)__p = v25;
  v83 = v88;
  LODWORD(v84) = (_DWORD)v89;
  if (*((_QWORD *)&v88 + 1))
  {
    v26 = *(_QWORD *)(v88 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &v83;
    v88 = 0uLL;
  }
  v85 = v90;
  v86 = v91;
  v93 = 0;
  v27 = operator new(0x40uLL);
  *v27 = &off_1E69823C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v27 + 1), (uint64_t *)__p);
  v27[6] = v85;
  *((_DWORD *)v27 + 14) = v86;
  v93 = v27;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v94, (uint64_t)v92);
  v96 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v24, (AMCP *)&v94);
  if (v96)
    v96(0, (uint64_t)&v94, 0, 0);
  v28 = v93;
  if (v93 == v92)
  {
    v29 = 4;
    v28 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_55;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_55:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v87);
  if (v77)
    v77(0, &v75, 0, 0);
LABEL_57:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v73);
  if (v81)
    v81(0, &v79, 0, 0);
  if (v5)
  {
    v30 = (unint64_t *)&v5->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v71)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v71 + 40), &v71);
  v32 = v72;
  if (v72)
  {
    v33 = (unint64_t *)&v72->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v66);
  v35 = v69;
  if (v69)
  {
    v36 = (unint64_t *)&v69->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  LOBYTE(v87) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (char *)&v87, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)__p[0] + 10, __p);
  v38 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v66[0] = 0;
  v67 = 0;
  strcpy((char *)v70, "iacsbolg");
  BYTE1(v70[2]) = 0;
  HIWORD(v70[2]) = 0;
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, v70, (int16x8_t)0);
  if ((SBYTE7(v83) & 0x80u) == 0)
    v41 = __p;
  else
    v41 = (void **)__p[0];
  if ((SBYTE7(v83) & 0x80u) == 0)
    v42 = BYTE7(v83);
  else
    v42 = (CFIndex)__p[1];
  v43 = CFStringCreateWithBytes(0, (const UInt8 *)v41, v42, 0x8000100u, 0);
  if (!v43)
  {
    v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v63, "Could not construct");
    __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v73, *((CFDictionaryRef *)this + 6), v43);
  CFRelease(v43);
  if (SBYTE7(v83) < 0)
    operator delete(__p[0]);
  if (!v74)
    goto LABEL_104;
  AMCP::make_thing_from_description((AMCP *)__p, &v73);
  AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v75, v44);
  if (v84)
    v84(0, (uint64_t)__p, 0, 0);
  if (!v77)
  {
LABEL_104:
    v45 = 0;
    v71 = 0;
    v72 = 0;
    goto LABEL_124;
  }
  LODWORD(v78[0]) = 1935892841;
  v65 = v70[2];
  *(double *)((char *)v78 + 4) = *(double *)&v70[1];
  v81 = 0;
  v79 = 0u;
  v80 = 0u;
  v77(1, &v75, &v79, 0);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v71, v65, v78[0]);
  v45 = v71;
  v46 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v87 = 0u;
  v88 = 0u;
  v89 = 0;
  if (v81)
    v81(1, &v79, &v87, 0);
  *((_QWORD *)&v95 + 1) = 0;
  v47 = (char *)operator new(0x30uLL);
  *(_QWORD *)v47 = &off_1E6982448;
  *(_OWORD *)(v47 + 8) = 0u;
  *(_OWORD *)(v47 + 24) = 0u;
  *((_QWORD *)v47 + 5) = 0;
  if (v89)
    v89(1, &v87, v47 + 8, 0);
  *((_QWORD *)&v95 + 1) = v47;
  *(_OWORD *)__p = 0u;
  v83 = 0u;
  v84 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v94);
  v84 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v45, v46, (AMCP *)__p);
  if (v84)
    v84(0, (uint64_t)__p, 0, 0);
  v48 = (__int128 *)*((_QWORD *)&v95 + 1);
  if (*((__int128 **)&v95 + 1) == &v94)
  {
    v49 = 4;
    v48 = &v94;
  }
  else
  {
    if (!*((_QWORD *)&v95 + 1))
      goto LABEL_107;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_107:
  if (v89)
    v89(0, &v87, 0, 0);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v87, v45);
  v90 = *(_QWORD *)(v45 + 40);
  v91 = *(_DWORD *)(v45 + 48);
  v50 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  v51 = v87;
  v87 = 0uLL;
  *(_OWORD *)__p = v51;
  v83 = v88;
  LODWORD(v84) = (_DWORD)v89;
  if (*((_QWORD *)&v88 + 1))
  {
    v52 = *(_QWORD *)(v88 + 8);
    if ((*((_QWORD *)&v51 + 1) & (*((_QWORD *)&v51 + 1) - 1)) != 0)
    {
      if (v52 >= *((_QWORD *)&v51 + 1))
        v52 %= *((_QWORD *)&v51 + 1);
    }
    else
    {
      v52 &= *((_QWORD *)&v51 + 1) - 1;
    }
    *(_QWORD *)(v51 + 8 * v52) = &v83;
    v88 = 0uLL;
  }
  v85 = v90;
  v86 = v91;
  v93 = 0;
  v53 = operator new(0x40uLL);
  *v53 = &off_1E69824C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v53 + 1), (uint64_t *)__p);
  v53[6] = v85;
  *((_DWORD *)v53 + 14) = v86;
  v93 = v53;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v94, (uint64_t)v92);
  v96 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v45, v50, (AMCP *)&v94);
  if (v96)
    v96(0, (uint64_t)&v94, 0, 0);
  v54 = v93;
  if (v93 == v92)
  {
    v55 = 4;
    v54 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_122;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_122:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v87);
  if (v81)
    v81(0, &v79, 0, 0);
LABEL_124:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v73);
  if (v77)
    v77(0, &v75, 0, 0);
  if (v45)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v45 + 40), &v71);
  v56 = v72;
  if (v72)
  {
    v57 = (unint64_t *)&v72->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v66);
}

void sub_1B5A732E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Selector_Control::do_set_property(AMCP::Null::Selector_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  void **v7;
  CFIndex v8;
  CFStringRef v9;
  void **v10;
  void **v11;
  _DWORD *v12;
  __CFDictionary *MutableCopy;
  int16x8_t v14;
  const void *v15;
  std::string *p_cf;
  CFIndex size;
  CFStringRef v18;
  int v19;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  uint64_t v24;
  int v25;
  std::string cf;
  const void *v27;
  void **v28;
  void **v29;
  uint64_t v30;
  _DWORD *v31;
  void *__p[2];
  __int128 v33;
  void (*v34)(_QWORD, void **, _QWORD, _QWORD);
  CFTypeRef v35;
  char v36;

  if (*(_DWORD *)a3 != 1935893353)
    return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a5.i64[0] = 0x676C6F6273636169;
  v30 = 0x676C6F6273636169;
  LODWORD(v31) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v30, a5);
  if ((SBYTE7(v33) & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((SBYTE7(v33) & 0x80u) == 0)
    v8 = BYTE7(v33);
  else
    v8 = (CFIndex)__p[1];
  v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
  if (!v9)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v35, *((CFDictionaryRef *)this + 6), v9);
  CFRelease(v9);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  if (!v36)
  {
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
    return 1;
  }
  v34 = 0;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>((uint64_t)__p, &v35);
  AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(&v30, (uint64_t)__p);
  AMCP::Thing::convert_to<std::vector<unsigned int>>(&v28, (uint64_t)a4);
  v10 = v28;
  if (v28 != v29)
  {
    if ((_DWORD *)v30 == v31)
    {
LABEL_38:
      v19 = 1;
      goto LABEL_43;
    }
    v11 = v28;
    do
    {
      v12 = (_DWORD *)v30;
      while (*v12 != *(_DWORD *)v11)
      {
        v12 += 4;
        if (v12 == v31)
          goto LABEL_38;
      }
      v11 = (void **)((char *)v11 + 4);
    }
    while (v11 != v29);
  }
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
  AMCP::make_description_from_thing((AMCP *)&v27, a4);
  v15 = v27;
  if (v27 || !CFArrayGetTypeID())
  {
    v14.i64[0] = 0x676C6F6273636369;
    v24 = 0x676C6F6273636369;
    v25 = 0;
    AMCP::Address::to_string(&cf, (unsigned int *)&v24, v14);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_cf = &cf;
    else
      p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
    else
      size = cf.__r_.__value_.__l.__size_;
    v18 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, size, 0x8000100u, 0);
    if (!v18)
    {
      v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v18, v15);
    CFRelease(v18);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&cf, MutableCopy);
    (*(void (**)(AMCP::Null::Selector_Control *, std::string *))(*(_QWORD *)this + 24))(this, &cf);
    if (cf.__r_.__value_.__r.__words[0])
      CFRelease(cf.__r_.__value_.__l.__data_);
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
    if (v15)
      CFRelease(v15);
    v19 = 0;
    if (!MutableCopy)
      goto LABEL_43;
    goto LABEL_42;
  }
  v19 = 1;
  if (MutableCopy)
LABEL_42:
    CFRelease(MutableCopy);
LABEL_43:
  if (v10)
    operator delete(v10);
  v28 = (void **)&v30;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v34)
    v34(0, __p, 0, 0);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
  if (v19)
    return 1;
  else
    return 257;
}

void sub_1B5A73764(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v2)
    v2(0, a1, 0, 0);
  return a1;
}

uint64_t std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69824C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69824C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69824C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A73A94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69824C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _BYTE v4[32];
  uint64_t (*v5)(_QWORD, _BYTE *, _QWORD, _QWORD);

  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (_QWORD *)(a1 + 8));
  result = AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(a2, (uint64_t)v4);
  if (v5)
    return (_QWORD *)v5(0, v4, 0, 0);
  return result;
}

void sub_1B5A73B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a14)
    a14(0, &a10, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982448;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982448;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6982448;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A73CF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6982448;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69823C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69823C8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69823C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5A740D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69823C8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  _OWORD v4[2];
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t *);

  v2 = (_QWORD *)(a1 + 8);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v5 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v2, (uint64_t)v4);
  if (v5)
    return v5(0, (uint64_t)v4, 0, 0);
  return result;
}

void sub_1B5A741E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(_QWORD, uint64_t *, _QWORD, _QWORD))
{
  if (a13)
    a13(0, &a9, 0, 0);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlRKS7_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6982348;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6982348;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6982348;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6982348;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A74928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935893353EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69822C8;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E69822C8;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69822C8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A74C8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E69822C8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935893353EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Null::Stereo_Pan_Control::~Stereo_Pan_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Null::Stereo_Pan_Control::populate_core@<X0>(AMCP::Null::Stereo_Pan_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  CFIndex v10;
  CFStringRef v11;
  AMCP::Thing *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const UInt8 *v32;
  CFIndex v33;
  CFStringRef v34;
  AMCP::Thing *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  uint64_t v44;
  _BYTE v45[40];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unsigned int v49[4];
  uint64_t v50;
  std::__shared_weak_count *v51;
  _OWORD v52[2];
  void (*v53)(uint64_t, _OWORD *, __int128 *, _QWORD);
  CFTypeRef v54;
  char v55;
  _OWORD v56[2];
  void (*v57)(uint64_t, _OWORD *, _OWORD *, _QWORD);
  double v58[2];
  void *__p[2];
  __int128 v60;
  uint64_t (*v61)(int, uint64_t, AMCP::Thing *, uint64_t *);
  unsigned int v62[6];
  unsigned int *v63;
  __int128 v64;
  __int128 v65;
  void (*v66)(uint64_t, __int128 *, char *, _QWORD);
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v47, *((_QWORD *)this + 3), *((std::__shared_weak_count **)this + 4));
  v45[0] = 0;
  v46 = 0;
  v6 = v47;
  v5 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  strcpy((char *)v49, "vcpsbolg");
  BYTE1(v49[2]) = 0;
  HIWORD(v49[2]) = 0;
  v57 = 0;
  memset(v56, 0, sizeof(v56));
  if (!*((_QWORD *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)__p, v49, (int16x8_t)0);
  if ((SBYTE7(v60) & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((SBYTE7(v60) & 0x80u) == 0)
    v10 = BYTE7(v60);
  else
    v10 = (CFIndex)__p[1];
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
    __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v54, *((CFDictionaryRef *)this + 6), v11);
  CFRelease(v11);
  if (SBYTE7(v60) < 0)
    operator delete(__p[0]);
  if (v55)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v54);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v56, v12);
    if (v61)
      v61(0, (uint64_t)__p, 0, 0);
  }
  if (!v57)
  {
    v50 = 0;
    v51 = 0;
    goto LABEL_44;
  }
  v44 = *(_QWORD *)&v49[1];
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  v57(1, v56, v52, 0);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  LODWORD(v58[0]) = 1936745334;
  *(_QWORD *)((char *)v58 + 4) = v44;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v50, SHIDWORD(v44), v58[0]);
  v15 = v50;
  v16 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v64 = 0u;
  v65 = 0u;
  v66 = 0;
  if (v53)
    v53(2, v52, &v64, 0);
  v63 = 0;
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = &off_1E6982548;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((_QWORD *)v17 + 5) = 0;
  if (v66)
    v66(2, &v64, v17 + 8, 0);
  v63 = (unsigned int *)v17;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v61 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v62);
  v61 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)__p);
  if (v61)
    v61(0, (uint64_t)__p, 0, 0);
  v18 = v63;
  if (v63 == v62)
  {
    v19 = 4;
    v18 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_33;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_33:
  if (v66)
    v66(0, &v64, 0, 0);
  AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(v15);
  v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  *((_QWORD *)&v65 + 1) = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E69825C8;
  v21[1] = v6;
  v21[2] = v5;
  v21[3] = 0x676C6F6273706376;
  *((_DWORD *)v21 + 8) = HIDWORD(v44);
  *((_QWORD *)&v65 + 1) = v21;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v61 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v64);
  v61 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v20, (AMCP *)__p);
  if (v61)
    v61(0, (uint64_t)__p, 0, 0);
  v22 = (__int128 *)*((_QWORD *)&v65 + 1);
  if (*((__int128 **)&v65 + 1) == &v64)
  {
    v23 = 4;
    v22 = &v64;
  }
  else
  {
    if (!*((_QWORD *)&v65 + 1))
      goto LABEL_42;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_42:
  AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(v15);
  if (v53)
    v53(0, v52, 0, 0);
LABEL_44:
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v54);
  if (v57)
    v57(0, v56, 0, 0);
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v50)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v50 + 40), &v50);
  v26 = v51;
  if (v51)
  {
    v27 = (unint64_t *)&v51->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v45);
  v29 = v48;
  if (v48)
  {
    v30 = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v45[0] = 0;
  v46 = 0;
  strcpy((char *)v62, "ccpsbolg");
  BYTE1(v62[2]) = 0;
  HIWORD(v62[2]) = 0;
  v61 = 0;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  if (!*((_QWORD *)this + 6))
  {
    v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v42, "Could not construct");
    __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  AMCP::Address::to_string((std::string *)&v64, v62, (int16x8_t)0);
  if ((SBYTE7(v65) & 0x80u) == 0)
    v32 = (const UInt8 *)&v64;
  else
    v32 = (const UInt8 *)v64;
  if ((SBYTE7(v65) & 0x80u) == 0)
    v33 = BYTE7(v65);
  else
    v33 = *((_QWORD *)&v64 + 1);
  v34 = CFStringCreateWithBytes(0, v32, v33, 0x8000100u, 0);
  if (!v34)
  {
    v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "Could not construct");
    __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v56, *((CFDictionaryRef *)this + 6), v34);
  CFRelease(v34);
  if (SBYTE7(v65) < 0)
    operator delete((void *)v64);
  if (!BYTE8(v56[0]))
    goto LABEL_78;
  AMCP::make_thing_from_description((AMCP *)&v64, (CFTypeRef *)v56);
  AMCP::swap((AMCP::Thing *)&v64, (AMCP::Thing *)__p, v35);
  if (v66)
    v66(0, &v64, 0, 0);
  if (v61)
  {
    LODWORD(v52[0]) = 1936745315;
    *(_QWORD *)((char *)v52 + 4) = *(_QWORD *)&v62[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>((uint64_t *)&v64, (uint64_t)v52, (uint64_t)__p);
  }
  else
  {
LABEL_78:
    v64 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v56);
  if (v61)
    v61(0, (uint64_t)__p, 0, 0);
  if ((_QWORD)v64)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v64 + 40), &v64);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v45);
}

void sub_1B5A75578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Null::Stereo_Pan_Control::do_set_property(AMCP::Null::Stereo_Pan_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  float v5;
  __CFDictionary *MutableCopy;
  int16x8_t v7;
  std::string *p_p;
  CFIndex size;
  CFStringRef v10;
  CFNumberRef v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  uint64_t v15;
  int v16;
  std::string __p;
  float valuePtr;

  if (*(_DWORD *)a3 != 1936745334)
    return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  v5 = AMCP::Thing::convert_to<float>((uint64_t)a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
  v7.i64[0] = 0x676C6F6273706376;
  v15 = 0x676C6F6273706376;
  v16 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = fmaxf(fminf(v5, 1.0), 0.0);
  v11 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v11)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v10, v11);
  CFRelease(v11);
  CFRelease(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
  (*(void (**)(AMCP::Null::Stereo_Pan_Control *, std::string *))(*(_QWORD *)this + 24))(this, &__p);
  if (__p.__r_.__value_.__r.__words[0])
    CFRelease(__p.__r_.__value_.__l.__data_);
  AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((_QWORD *)this + 1) + 32), *((_DWORD *)this + 22));
  if (MutableCopy)
    CFRelease(MutableCopy);
  return 257;
}

void sub_1B5A757FC(void *a1)
{
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69825C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69825C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v2 = (double *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69825C8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69825C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  std::runtime_error *exception;
  int v16;
  uint64_t v17;
  std::runtime_error v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *v25;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _BYTE v46[24];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v43;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v11 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 59;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "no model object");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 59;
    std::vector<void *>::vector(&v29);
    v16 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v16);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = *(_QWORD *)v46;
    exception[1].__imp_.__imp_ = *(const char **)v46;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v18 = *(std::runtime_error *)&v46[8];
    LODWORD(exception[3].__vftable) = v47;
    exception[2] = v18;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v43;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Null_Object.cpp";
      v44 = 1024;
      v45 = 61;
      *(_WORD *)v46 = 2080;
      *(_QWORD *)&v46[2] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "not handled");
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v46[8] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    *(_QWORD *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    v47 = 61;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v31 = off_1E69A20A0;
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v31);
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v25, (const std::runtime_error *)buf);
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v46;
    v25[1].__imp_.__imp_ = *(const char **)v46;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::runtime_error *)&v46[8];
    LODWORD(v25[3].__vftable) = v47;
    v25[2] = v28;
    v25->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v25[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v25[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5A75F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1936745334EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982548;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v2)
    v2(0, a1 + 1, 0, 0);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD *, _QWORD, _QWORD);

  *a1 = &off_1E6982548;
  v1 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))a1[5];
  if (v1)
    v1(0, a1 + 1, 0, 0);
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  void (*v3)(uint64_t, uint64_t, char *, _QWORD);

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6982548;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(a1 + 40);
  if (v3)
    v3(1, a1 + 8, v2 + 8, 0);
  return v2;
}

void sub_1B5A76270(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)a2 = &off_1E6982548;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2 + 8, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 40);
  if (v1)
    return v1(0, result + 8, 0, 0);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[5];
  if (v2)
    v2(0, __p + 1, 0, 0);
  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _QWORD);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 40);
  if (v2)
    return v2(1, result + 8, a2, 0);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1936745334EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unint64_t AMCP::Null::make_control_marker(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2, int16x8_t a3)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v6;
  const __CFNumber *v7;
  unsigned int v8;
  int16x8_t v9;
  std::string *v10;
  CFIndex v11;
  CFStringRef v12;
  const __CFNumber *v13;
  unint64_t v14;
  int16x8_t v15;
  std::string *v16;
  CFIndex v17;
  CFStringRef v18;
  const __CFNumber *v19;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  std::runtime_error *v27;
  CFTypeRef cf;
  uint64_t v29;
  int v30;
  std::string __p;
  const __CFNumber *valuePtr;

  if (!*this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_56;
  }
  a3.i64[0] = 0x676C6F62636C6173;
  v29 = 0x676C6F62636C6173;
  v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v6)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v6, &cf);
  v7 = valuePtr;
  if (!valuePtr)
    goto LABEL_55;
  v8 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v7);
  if (cf)
    CFRelease(cf);
  CFRelease(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*this)
    goto LABEL_55;
  v9.i64[0] = 0x676C6F6263736370;
  v29 = 0x676C6F6263736370;
  v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
  if (!v12)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v12, &cf);
  v13 = valuePtr;
  if (!valuePtr)
    goto LABEL_55;
  v14 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v13);
  if (cf)
    CFRelease(cf);
  CFRelease(v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*this)
    goto LABEL_55;
  v15.i64[0] = 0x676C6F6263656C6DLL;
  v29 = 0x676C6F6263656C6DLL;
  v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v17 = __p.__r_.__value_.__l.__size_;
  v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
  if (!v18)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = -1;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v18, &cf);
  v19 = valuePtr;
  if (!valuePtr)
  {
LABEL_55:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_56:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v19);
  if (cf)
    CFRelease(cf);
  CFRelease(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8 | (v14 << 32);
}

void sub_1B5A76890(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::get_max_number_channels_for_scope(AMCP::Null *this, const __CFDictionary **a2, const applesauce::CF::DictionaryRef *a3, int16x8_t a4)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v7;
  const __CFArray *v8;
  unint64_t v9;
  int16x8_t v10;
  std::string *v11;
  CFIndex v12;
  CFStringRef v13;
  int16x8_t v14;
  std::string *v15;
  CFIndex v16;
  CFStringRef v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFArrayRef v21;
  CFIndex v22;
  const void *v23;
  unsigned int v24;
  unint64_t v25;
  const __CFDictionary *v26;
  CFTypeRef v27;
  unsigned int v28;
  std::runtime_error *v30;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::runtime_error *exception;
  std::runtime_error *v34;
  std::runtime_error *v35;
  const __CFArray *v36;
  CFIndex v37;
  CFIndex Count;
  unsigned int v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef valuePtr;
  CFTypeRef v43;
  int v44;
  CFTypeRef cf;
  int v46;
  CFArrayRef theArray;
  int v48;
  CFTypeRef v49;
  std::string __p;
  CFArrayRef v51[2];

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_86:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(theArray) = 1937009955;
  HIDWORD(theArray) = (_DWORD)this;
  v48 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&theArray, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v7)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(v51, *a2, v7, &cf);
  if (cf)
    CFRelease(cf);
  CFRelease(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = v51[0];
  if (!v51[0])
    return 0;
  Count = CFArrayGetCount(v51[0]);
  v37 = CFArrayGetCount(v8);
  if (Count)
  {
    v39 = 0;
    v9 = 0;
    v36 = v8;
    while (1)
    {
      if (v9 == v37)
        goto LABEL_79;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v49, v8, v9);
      if (!v49)
        goto LABEL_85;
      cf = (CFTypeRef)0x676C6F62666D7423;
      v46 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&cf, v10);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &__p;
      else
        v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v12 = __p.__r_.__value_.__l.__size_;
      v13 = CFStringCreateWithBytes(0, (const UInt8 *)v11, v12, 0x8000100u, 0);
      if (!v13)
      {
        v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v31, "Could not construct");
        __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, (CFDictionaryRef)v49, v13);
      CFRelease(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v49)
      {
LABEL_85:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        goto LABEL_86;
      }
      v43 = (CFTypeRef)0x676C6F62666D6174;
      v44 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v43, v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v16 = __p.__r_.__value_.__l.__size_;
      v17 = CFStringCreateWithBytes(0, (const UInt8 *)v15, v16, 0x8000100u, 0);
      if (!v17)
      {
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
        __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, (CFDictionaryRef)v49, v17);
      CFRelease(v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((_BYTE)v48)
        break;
      if (!(_BYTE)v46)
        goto LABEL_72;
      if (!cf)
        goto LABEL_85;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v43, "channels per frame");
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      valuePtr = CFNumberCreate(0, kCFNumberIntType, &__p);
      if (!valuePtr)
      {
        v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "Could not construct");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&__p, (const __CFDictionary *)cf, v43, &valuePtr);
      v23 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_85;
      v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p.__r_.__value_.__l.__data_);
      CFRelease(v23);
      if (valuePtr)
        CFRelease(valuePtr);
      if (v43)
        CFRelease(v43);
LABEL_73:
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
      if (v49)
        CFRelease(v49);
      v39 += v24;
      ++v9;
      v8 = v36;
      if (v9 == Count)
        goto LABEL_79;
    }
    v18 = theArray;
    if (theArray)
    {
      v19 = CFArrayGetCount(theArray);
      v20 = v19;
      v21 = theArray;
      if (theArray)
      {
        v22 = CFArrayGetCount(theArray);
        if (v20)
          goto LABEL_51;
      }
      else
      {
        v22 = 0;
        if (v19)
        {
LABEL_51:
          v24 = 0;
          v25 = 0;
          while (v18 != v21 || v22 != v25)
          {
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&__p, v18, v25);
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_85;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "format");
            v41 = 0;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&v43, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, valuePtr, &v41);
            if (v41)
              CFRelease(v41);
            if (valuePtr)
              CFRelease(valuePtr);
            v26 = (const __CFDictionary *)v43;
            if (!v43)
              goto LABEL_85;
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v41, "channels per frame");
            LODWORD(valuePtr) = 0;
            v40 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v40)
            {
              v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v30, "Could not construct");
              __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v26, v41, &v40);
            v27 = valuePtr;
            if (!valuePtr)
              goto LABEL_85;
            v28 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
            CFRelease(v27);
            if (v40)
              CFRelease(v40);
            if (v41)
              CFRelease(v41);
            if (v24 <= v28)
              v24 = v28;
            CFRelease(v26);
            if (__p.__r_.__value_.__r.__words[0])
              CFRelease(__p.__r_.__value_.__l.__data_);
            if (v20 == ++v25)
              goto LABEL_73;
          }
          goto LABEL_73;
        }
      }
    }
LABEL_72:
    v24 = 0;
    goto LABEL_73;
  }
  v39 = 0;
LABEL_79:
  CFRelease(v8);
  return v39;
}

void sub_1B5A76F88(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::get_max_element_for_controls(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2, int16x8_t a3)
{
  std::string *p_p;
  CFIndex size;
  CFStringRef v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t v13;
  std::string *v14;
  CFIndex v15;
  CFStringRef v16;
  const __CFNumber *v17;
  unsigned int v18;
  std::runtime_error *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  CFTypeRef v24;
  const __CFNumber *valuePtr;
  CFTypeRef cf;
  uint64_t v27;
  int v28;
  std::string __p;
  CFArrayRef theArray;

  if (!*this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_46;
  }
  a3.i64[0] = 0x676C6F626374726CLL;
  v27 = 0x676C6F626374726CLL;
  v28 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v27, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
  if (!v6)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, *this, v6, &cf);
  if (cf)
    CFRelease(cf);
  CFRelease(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = theArray;
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  v9 = CFArrayGetCount(v7);
  if (Count)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      if (v10 == v12)
        goto LABEL_40;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v7, v12);
      if (!cf)
        break;
      v27 = 0x676C6F6263656C6DLL;
      v28 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v27, v13);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v15 = __p.__r_.__value_.__l.__size_;
      v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
      if (!v16)
      {
        v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Could not construct");
        __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      LODWORD(valuePtr) = 0;
      v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v24)
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)cf, v16, &v24);
      v17 = valuePtr;
      if (!valuePtr)
        break;
      v18 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      CFRelease(v17);
      if (v24)
        CFRelease(v24);
      CFRelease(v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v11 <= v18)
        v11 = v18;
      else
        v11 = v11;
      if (cf)
        CFRelease(cf);
      if (Count == ++v12)
        goto LABEL_40;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_46:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = 0;
LABEL_40:
  CFRelease(v7);
  return v11;
}

void sub_1B5A77378(void *a1)
{
  __clang_call_terminate(a1);
}

void std::vector<AMCP::Graph::Terminal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t i;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        for (i = -48; i != -96; i -= 24)
        {
          v7 = (void **)&v4[i];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        }
        v4 -= 112;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<AMCP::Graph::Terminal>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = 0;
    *(_QWORD *)(a1 + 16) = i - 112;
    v5 = i - 48;
    do
    {
      v7 = (void **)(v5 + v4);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v4 -= 24;
    }
    while (v4 != -48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AMCP::Graph::Node::create_core_object(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unint64_t *p_shared_owners;
  std::string::size_type size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  unsigned __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int128 v21;
  int v22;
  unsigned __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  AMCP::Utility::Kernel_Error_Category *v37;
  unsigned int v38;
  AMCP::Log::Scope_Registry *v39;
  AMCP::Utility::Kernel_Error_Category *v40;
  unsigned int v41;
  AMCP::Log::Scope_Registry *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  AMCP::IO_Core::Node *v49;
  std::__shared_weak_count *v50;
  char *v51;
  AMCP::Log::Scope_Registry *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t nth_terminal;
  __int128 v60;
  uint64_t v61;
  AMCP::Log::Scope_Registry *v62;
  int v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  char v94;
  void *v95;
  void *v96;
  int v97;
  void **v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  BOOL v106;
  BOOL v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  NSObject *v111;
  NSObject **v112;
  __int128 v113;
  std::__shared_weak_count *shared_owners;
  unint64_t v115;
  unint64_t *p_shared_weak_owners;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  int v126;
  double v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  _QWORD *v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __int128 v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  AMCP::Log::Scope_Registry *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  NSObject *v167;
  unint64_t *v168;
  unint64_t v169;
  _opaque_pthread_t *v170;
  mach_port_t v171;
  std::logic_error *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  std::logic_error v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  std::__shared_weak_count *v195;
  NSObject *v196;
  unint64_t *v197;
  unint64_t v198;
  _opaque_pthread_t *v199;
  mach_port_t v200;
  std::logic_error *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  std::logic_error v205;
  std::__shared_weak_count *v206;
  NSObject *v207;
  unint64_t *v208;
  unint64_t v209;
  _opaque_pthread_t *v210;
  mach_port_t v211;
  std::logic_error *v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  std::logic_error v216;
  std::__shared_weak_count *v217;
  NSObject *v218;
  unint64_t *v219;
  unint64_t v220;
  _opaque_pthread_t *v221;
  mach_port_t v222;
  uint64_t v223;
  std::runtime_error *exception;
  int v225;
  uint64_t v226;
  std::runtime_error v227;
  std::__shared_weak_count *v228;
  NSObject *v229;
  unint64_t *v230;
  unint64_t v231;
  _opaque_pthread_t *v232;
  mach_port_t v233;
  std::logic_error *v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  std::logic_error v238;
  std::__shared_weak_count *v239;
  NSObject *v240;
  unint64_t *v241;
  unint64_t v242;
  _opaque_pthread_t *v243;
  mach_port_t v244;
  uint64_t v245;
  std::runtime_error *v246;
  int v247;
  uint64_t v248;
  std::runtime_error v249;
  std::__shared_weak_count *v250;
  NSObject *v251;
  unint64_t *v252;
  unint64_t v253;
  _opaque_pthread_t *v254;
  mach_port_t v255;
  std::__shared_weak_count *v256;
  NSObject *v257;
  unint64_t *v258;
  unint64_t v259;
  _opaque_pthread_t *v260;
  mach_port_t v261;
  std::logic_error *v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  std::logic_error v266;
  AMCP::IO_Core::Node *v267;
  std::__shared_weak_count *v268;
  __int128 v269;
  __int128 v270;
  AMCP::Log::Scope_Registry *v271;
  std::__shared_weak_count *v272;
  __int128 v273;
  std::string v274;
  uint64_t (**v275)();
  std::string v276;
  std::string v277;
  std::logic_error v278;
  char v279;
  void *__p[2];
  __int128 v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  _BYTE v287[48];
  std::runtime_error v288;
  int v289;
  _BYTE v290[40];
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v274, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
      v4 = (std::__shared_weak_count *)operator new(0x288uLL);
      v5 = &v4->__vftable;
      v4->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      v4->__shared_weak_owners_ = 0;
      v4[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E697ADE8;
      v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982A08;
      LODWORD(v4[1].__shared_owners_) = 0;
      size = v274.__r_.__value_.__l.__size_;
      v4[1].__shared_weak_owners_ = v274.__r_.__value_.__r.__words[0];
      v4[2].__vftable = (std::__shared_weak_count_vtbl *)size;
      if (size)
      {
        v8 = (unint64_t *)(size + 16);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = a2[1];
      v4[2].__shared_owners_ = *a2;
      v4[2].__shared_weak_owners_ = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v4[3].__vftable = 0;
      v4[3].__shared_owners_ = 0;
      v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E696C2E0;
      v268 = v4;
      v267 = (AMCP::IO_Core::Node *)&v4[1];
      std::string::basic_string[abi:ne180100]<0>(v287, "AudioHAL Workgroup");
      std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      if (SBYTE7(v281) < 0)
        operator delete(__p[0]);
      if ((v287[23] & 0x80000000) != 0)
        operator delete(*(void **)v287);
      v5[19] = 0;
      v5[20] = 0;
      v13 = (char *)operator new(0x2F0uLL);
      *(_OWORD *)(v13 + 8) = 0u;
      *((_DWORD *)v13 + 8) = 0;
      *(_QWORD *)v13 = &off_1E696C368;
      *((_QWORD *)v13 + 6) = 0;
      *((_QWORD *)v13 + 14) = 0;
      *((_OWORD *)v13 + 8) = 0u;
      v14 = (unsigned __int128 *)(v13 + 128);
      *((_QWORD *)v13 + 18) = 850045863;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(_OWORD *)(v13 + 193) = 0u;
      v15 = 10;
      v16 = MEMORY[0x1E0DDB768] + 16;
      do
      {
        v17 = operator new();
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_QWORD *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 72) = 0;
        *(_DWORD *)(v17 + 80) = 0;
        *(_OWORD *)(v17 + 88) = 0u;
        *(_OWORD *)(v17 + 104) = 0u;
        *(_DWORD *)(v17 + 120) = 1065353216;
        *(_OWORD *)(v17 + 136) = 0u;
        *(_OWORD *)(v17 + 152) = 0u;
        *(_OWORD *)(v17 + 168) = 0u;
        *(_QWORD *)(v17 + 184) = 0;
        *(_QWORD *)(v17 + 128) = v16;
        *(_WORD *)(v17 + 192) = 0;
        *(_QWORD *)(v17 + 200) = 0;
        do
          v18 = __ldaxp(v14);
        while (__stlxp(v18, v14));
        atomic_store(v18, (unint64_t *)(v17 + 200));
        do
        {
          while (1)
          {
            v21 = __ldaxp(v14);
            v20 = *((_QWORD *)&v21 + 1);
            v19 = v21;
            v22 = (_QWORD)v21 != (_QWORD)v18;
            if (*((_QWORD *)&v21 + 1) != *((_QWORD *)&v18 + 1))
              ++v22;
            if (!v22)
              break;
            if (!__stlxp(v21, v14))
              goto LABEL_22;
          }
        }
        while (__stlxp(__PAIR128__(*((_QWORD *)&v18 + 1) + 1, v17), v14));
LABEL_22:
        if ((_QWORD)v21 != (_QWORD)v18 || *((_QWORD *)&v21 + 1) != *((_QWORD *)&v18 + 1))
        {
          do
          {
            atomic_store(v19, (unint64_t *)(v17 + 200));
            do
            {
              while (1)
              {
                v24 = __ldaxp(v14);
                v25 = (_QWORD)v24 != v19;
                if (*((_QWORD *)&v24 + 1) != v20)
                  ++v25;
                if (!v25)
                  break;
                if (!__stlxp(v24, v14))
                  goto LABEL_33;
              }
            }
            while (__stlxp(__PAIR128__(v20 + 1, v17), v14));
LABEL_33:
            v26 = *((_QWORD *)&v24 + 1) ^ v20;
            v27 = v24 ^ v19;
            v20 = *((_QWORD *)&v24 + 1);
            v19 = v24;
          }
          while (v27 | v26);
        }
        --v15;
      }
      while (v15);
      *((_QWORD *)v13 + 28) = 0;
      *((_QWORD *)v13 + 29) = 850045863;
      *((_OWORD *)v13 + 15) = 0u;
      *((_OWORD *)v13 + 16) = 0u;
      *((_OWORD *)v13 + 17) = 0u;
      *((_QWORD *)v13 + 36) = 0;
      *((_QWORD *)v13 + 37) = 1018212795;
      *((_OWORD *)v13 + 22) = 0u;
      *((_OWORD *)v13 + 23) = 0u;
      *((_OWORD *)v13 + 19) = 0u;
      *((_OWORD *)v13 + 20) = 0u;
      *(_OWORD *)(v13 + 332) = 0u;
      *((_DWORD *)v13 + 96) = 1065353216;
      *((_OWORD *)v13 + 25) = 0u;
      *((_OWORD *)v13 + 26) = 0u;
      *((_OWORD *)v13 + 27) = 0u;
      *((_QWORD *)v13 + 56) = 0;
      *((_QWORD *)v13 + 49) = MEMORY[0x1E0DDB768] + 16;
      *((_WORD *)v13 + 228) = 0;
      v13[464] = 0;
      v13[584] = 0;
      *((_OWORD *)v13 + 37) = 0u;
      *((_QWORD *)v13 + 76) = &off_1E69750F8;
      *((_QWORD *)v13 + 77) = MEMORY[0x1E0C83E28];
      *((_QWORD *)v13 + 79) = v13 + 608;
      *(_OWORD *)(v13 + 724) = 0u;
      *(_OWORD *)(v13 + 696) = 0u;
      *(_OWORD *)(v13 + 712) = 0u;
      *(_OWORD *)(v13 + 664) = 0u;
      *(_OWORD *)(v13 + 680) = 0u;
      v268[7].__vftable = (std::__shared_weak_count_vtbl *)(v13 + 32);
      v268[7].__shared_owners_ = (uint64_t)v13;
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
      v29 = operator new();
      v30 = v29;
      v31 = *(_OWORD *)(v5 + 21);
      v32 = v5[22];
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      *(_OWORD *)v29 = v31;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      v35 = (char *)operator new(0x180uLL, (std::align_val_t)0x40uLL);
      *((_QWORD *)v35 + 1) = 0;
      v36 = (unint64_t *)(v35 + 8);
      *((_QWORD *)v35 + 2) = 0;
      *(_QWORD *)v35 = &off_1E6994FF0;
      v35[64] = 0;
      *((_DWORD *)v35 + 17) = 0;
      *((_DWORD *)v35 + 32) = 0;
      *((_DWORD *)v35 + 48) = 0;
      *((_OWORD *)v35 + 16) = 0u;
      *((_OWORD *)v35 + 17) = 0u;
      *((_OWORD *)v35 + 18) = 0u;
      *((_OWORD *)v35 + 19) = 0u;
      *((_OWORD *)v35 + 20) = 0u;
      *((_OWORD *)v35 + 21) = 0u;
      *((_OWORD *)v35 + 22) = 0u;
      *(_DWORD *)v287 = 0;
      *(_WORD *)&v287[4] = 0;
      *(_DWORD *)&v287[8] = 4;
      v287[12] = 1;
      caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)(v35 + 64), v287);
      v37 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_init((pthread_cond_t *)(v35 + 256), 0);
      v38 = v37;
      AMCP::Utility::Kernel_Error_Category::get(v37);
      if (v38)
      {
        AMCP::Log::Scope_Registry::get(v39);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v217 = *(std::__shared_weak_count **)&v287[8];
        v218 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v219 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
        {
          v221 = pthread_self();
          v222 = pthread_mach_thread_np(v221);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v222;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "Thread_Control_State.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 26;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "kernel_error.operator BOOL()";
          _os_log_error_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the initialize the condition variable", v287, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v278);
        v223 = v38;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
        MEMORY[0x1B5E50220](v290, v223, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
        std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)v290);
        v281 = *(_OWORD *)&v290[16];
        v284 = 0;
        v285 = 0;
        v286 = -1;
        __p[0] = &off_1E69A12F8;
        v282 = &unk_1E69A1320;
        v283 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
        v288.__vftable = (std::runtime_error_vtbl *)"AMCP::IO_Core::Thread_Control_State::Thread_Control_State(Transport_State)";
        v288.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
        v289 = 26;
        std::vector<void *>::vector(&v277);
        v225 = backtrace((void **)v277.__r_.__value_.__l.__data_, (v277.__r_.__value_.__l.__size_ - v277.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v277.__r_.__value_.__l.__data_, v225);
        v275 = off_1E69A20A0;
        v276 = v277;
        memset(&v277, 0, sizeof(v277));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v287, (uint64_t)&v275);
        exception[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(exception, (const std::runtime_error *)v287);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
        exception[1] = *(std::runtime_error *)&v287[16];
        exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v226 = *(_QWORD *)&v287[40];
        exception[2].__imp_.__imp_ = *(const char **)&v287[40];
        if (v226)
          (*(void (**)(uint64_t))(*(_QWORD *)v226 + 24))(v226);
        v227 = v288;
        LODWORD(exception[4].__vftable) = v289;
        exception[3] = v227;
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
        exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
        exception[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
      }
      v40 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_init((pthread_mutex_t *)(v35 + 304), 0);
      v41 = v40;
      AMCP::Utility::Kernel_Error_Category::get(v40);
      if (v41)
      {
        AMCP::Log::Scope_Registry::get(v42);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v239 = *(std::__shared_weak_count **)&v287[8];
        v240 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v241 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
        {
          v243 = pthread_self();
          v244 = pthread_mach_thread_np(v243);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v244;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "Thread_Control_State.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 29;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "kernel_error.operator BOOL()";
          _os_log_error_impl(&dword_1B57BA000, v240, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the initialize the mutex", v287, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v278);
        v245 = v41;
        v246 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
        MEMORY[0x1B5E50220](v290, v245, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
        std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)v290);
        v281 = *(_OWORD *)&v290[16];
        v284 = 0;
        v285 = 0;
        v286 = -1;
        __p[0] = &off_1E69A12F8;
        v282 = &unk_1E69A1320;
        v283 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
        v288.__vftable = (std::runtime_error_vtbl *)"AMCP::IO_Core::Thread_Control_State::Thread_Control_State(Transport_State)";
        v288.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
        v289 = 29;
        std::vector<void *>::vector(&v277);
        v247 = backtrace((void **)v277.__r_.__value_.__l.__data_, (v277.__r_.__value_.__l.__size_ - v277.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v277.__r_.__value_.__l.__data_, v247);
        v275 = off_1E69A20A0;
        v276 = v277;
        memset(&v277, 0, sizeof(v277));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v287, (uint64_t)&v275);
        v246[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(v246, (const std::runtime_error *)v287);
        v246->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
        v246[1] = *(std::runtime_error *)&v287[16];
        v246[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v248 = *(_QWORD *)&v287[40];
        v246[2].__imp_.__imp_ = *(const char **)&v287[40];
        if (v248)
          (*(void (**)(uint64_t))(*(_QWORD *)v248 + 24))(v248);
        v249 = v288;
        LODWORD(v246[4].__vftable) = v289;
        v246[3] = v249;
        v246->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
        v246[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
        v246[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
      }
      *(_QWORD *)(v30 + 32) = v35 + 64;
      *(_QWORD *)(v30 + 40) = v35;
      *(_QWORD *)(v30 + 48) = 0;
      *(_DWORD *)(v30 + 56) = v28;
      *(_WORD *)(v30 + 60) = 0;
      *(_BYTE *)(v30 + 62) = 0;
      v43 = *(_QWORD *)v30;
      do
        v44 = __ldxr(v36);
      while (__stxr(v44 + 1, v36));
      __p[0] = &off_1E6995040;
      __p[1] = v35 + 64;
      *(_QWORD *)&v281 = v35;
      *((_QWORD *)&v281 + 1) = __p;
      v45 = (_BYTE *)(v43 + 576);
      *(_QWORD *)&v287[24] = v287;
      std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::__clone((uint64_t)__p, v287);
      v47 = *(_BYTE **)&v287[24];
      if ((_BYTE *)(v43 + 576) == v287)
      {
        v50 = v268;
        v49 = v267;
      }
      else
      {
        v48 = *(_BYTE **)(v43 + 600);
        v49 = v267;
        if (*(_BYTE **)&v287[24] == v287)
        {
          v50 = v268;
          if (v48 == v45)
          {
            (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v287 + 24))(v287, v290);
            (*(void (**)(_QWORD))(**(_QWORD **)&v287[24] + 32))(*(_QWORD *)&v287[24]);
            *(_QWORD *)&v287[24] = 0;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v43 + 600) + 24))(*(_QWORD *)(v43 + 600), v287);
            (*(void (**)(_QWORD))(**(_QWORD **)(v43 + 600) + 32))(*(_QWORD *)(v43 + 600));
            *(_QWORD *)(v43 + 600) = 0;
            *(_QWORD *)&v287[24] = v287;
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v290 + 24))(v290, v43 + 576);
            (*(void (**)(_BYTE *))(*(_QWORD *)v290 + 32))(v290);
            *(_QWORD *)(v43 + 600) = v45;
            v47 = *(_BYTE **)&v287[24];
          }
          else
          {
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v287 + 24))(v287, v43 + 576);
            (*(void (**)(_QWORD))(**(_QWORD **)&v287[24] + 32))(*(_QWORD *)&v287[24]);
            v47 = *(_BYTE **)(v43 + 600);
            *(_QWORD *)&v287[24] = v47;
            *(_QWORD *)(v43 + 600) = v45;
          }
        }
        else
        {
          v50 = v268;
          if (v48 == v45)
          {
            v47 = v287;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v45 + 24))(v43 + 576, v287);
            (*(void (**)(_QWORD))(**(_QWORD **)(v43 + 600) + 32))(*(_QWORD *)(v43 + 600));
            *(_QWORD *)(v43 + 600) = *(_QWORD *)&v287[24];
            *(_QWORD *)&v287[24] = v287;
            v108 = 4;
            goto LABEL_125;
          }
          *(_QWORD *)&v287[24] = *(_QWORD *)(v43 + 600);
          *(_QWORD *)(v43 + 600) = v47;
          v47 = v48;
        }
      }
      if (v47 == v287)
      {
        v108 = 4;
        v47 = v287;
      }
      else
      {
        if (!v47)
          goto LABEL_126;
        v108 = 5;
      }
LABEL_125:
      (*(void (**)(_BYTE *))(*(_QWORD *)v47 + 8 * v108))(v47);
LABEL_126:
      v109 = (void **)*((_QWORD *)&v281 + 1);
      if (*((void ***)&v281 + 1) == __p)
      {
        v110 = 4;
        v109 = __p;
      }
      else
      {
        if (!*((_QWORD *)&v281 + 1))
          goto LABEL_131;
        v110 = 5;
      }
      (*((void (**)(void **, uint64_t))*v109 + v110))(v109, v46);
LABEL_131:
      v50[9].__shared_owners_ = 850045863;
      v50[7].__shared_weak_owners_ = v30;
      LODWORD(v50[8].__vftable) = 0;
      v50[8].__shared_owners_ = 0;
      v50[8].__shared_weak_owners_ = 0;
      v50[9].__vftable = 0;
      *(_OWORD *)&v50[12].__shared_owners_ = 0u;
      v50[14].__vftable = 0;
      v50[14].__shared_owners_ = 0;
      v50[13].std::__shared_count = 0u;
      LOWORD(v50[13].__shared_weak_owners_) = 0;
      *(_OWORD *)&v50[9].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v50[10].__shared_owners_ = 0u;
      v50[11].std::__shared_count = 0u;
      *(_OWORD *)((char *)&v50[11].__shared_owners_ + 4) = 0u;
      v50[14].__shared_weak_owners_ = 0;
      v50[15].__vftable = (std::__shared_weak_count_vtbl *)850045863;
      *(_OWORD *)&v50[15].__shared_owners_ = 0u;
      v50[16].std::__shared_count = 0u;
      *(_OWORD *)&v50[16].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v50[17].__shared_owners_ = 0u;
      v50[18].std::__shared_count = 0u;
      v50[18].__shared_weak_owners_ = 850045863;
      v50[19].std::__shared_count = 0u;
      *(_OWORD *)&v50[19].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v50[20].__shared_owners_ = 0u;
      v50[21].std::__shared_count = 0u;
      *(_OWORD *)&v50[21].__shared_weak_owners_ = 0u;
      v50[22].__shared_owners_ = 850045863;
      *(_OWORD *)&v50[22].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v50[23].__shared_owners_ = 0u;
      v50[24].std::__shared_count = 0u;
      *(_OWORD *)&v50[24].__shared_weak_owners_ = 0u;
      v50[25].__shared_owners_ = (uint64_t)dispatch_semaphore_create(0);
      v50[25].__shared_weak_owners_ = 0x4090000000000000;
      LODWORD(v50[26].__vftable) = 1065353216;
      BYTE4(v50[26].__vftable) = 0;
      v50[26].__shared_owners_ = 0x100000000010;
      LOBYTE(v50[26].__shared_weak_owners_) = 1;
      AMCP::IO_Core::Node::build_core(v49);
      LODWORD(v50[7].~__shared_weak_count) = v50[1].__shared_owners_;
      v111 = dispatch_queue_create("AMCP IOC Manifest Dispatch Queue", 0);
      v112 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)&v50[12].__shared_owners_, v111);
      if (v111)
        dispatch_release(v111);
      if (!v50[12].__shared_owners_)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v112);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v250 = *(std::__shared_weak_count **)&v287[8];
        v251 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v252 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
            std::__shared_weak_count::__release_weak(v250);
          }
        }
        if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
        {
          v254 = pthread_self();
          v255 = pthread_mach_thread_np(v254);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v255;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "IOContext_Core.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 66;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "m_manifest_dispatch_queue.operator BOOL() == true";
          _os_log_error_impl(&dword_1B57BA000, v251, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", v287, 0x22u);
        }
        abort();
      }
      *(_QWORD *)&v113 = v49;
      *((_QWORD *)&v113 + 1) = v50;
      shared_owners = (std::__shared_weak_count *)v50[3].__shared_owners_;
      if (shared_owners)
      {
        if (shared_owners->__shared_owners_ != -1)
          goto LABEL_147;
        do
          v115 = __ldxr(p_shared_owners);
        while (__stxr(v115 + 1, p_shared_owners));
        v269 = v113;
        p_shared_weak_owners = (unint64_t *)&v50->__shared_weak_owners_;
        do
          v117 = __ldxr(p_shared_weak_owners);
        while (__stxr(v117 + 1, p_shared_weak_owners));
        v50[3].__vftable = (std::__shared_weak_count_vtbl *)v49;
        v50[3].__shared_owners_ = (uint64_t)v50;
        std::__shared_weak_count::__release_weak(shared_owners);
        v113 = v269;
      }
      else
      {
        do
          v118 = __ldxr(p_shared_owners);
        while (__stxr(v118 + 1, p_shared_owners));
        v119 = (unint64_t *)&v50->__shared_weak_owners_;
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
        v50[3].__vftable = (std::__shared_weak_count_vtbl *)v49;
        v50[3].__shared_owners_ = (uint64_t)v50;
      }
      do
        v121 = __ldaxr(p_shared_owners);
      while (__stlxr(v121 - 1, p_shared_owners));
      if (!v121)
      {
        v270 = v113;
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v113 = v270;
      }
LABEL_147:
      v122 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v113;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v77 = (std::__shared_weak_count *)v274.__r_.__value_.__l.__size_;
      if (!v274.__r_.__value_.__l.__size_)
        return;
      v125 = (unint64_t *)(v274.__r_.__value_.__l.__size_ + 8);
      do
        v79 = __ldaxr(v125);
      while (__stlxr(v79 - 1, v125));
      goto LABEL_253;
    case 1:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v287, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
      v80 = operator new(0x48uLL);
      v81 = v80;
      v80[1] = 0;
      v80[2] = 0;
      v80[3] = off_1E697ADE8;
      v82 = v80 + 3;
      *v80 = &off_1E69829B8;
      *((_DWORD *)v80 + 8) = 0;
      v83 = *(_QWORD *)&v287[8];
      v80[5] = *(_QWORD *)v287;
      v80[6] = v83;
      if (v83)
      {
        v84 = (unint64_t *)(v83 + 16);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = a2[1];
      v80[7] = *a2;
      v80[8] = v86;
      if (v86)
      {
        v87 = (unint64_t *)(v86 + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      *v82 = &off_1E69852A8;
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v80 + 3));
      *(_QWORD *)&v89 = v82;
      *((_QWORD *)&v89 + 1) = v81;
      v90 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v89;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v77 = *(std::__shared_weak_count **)&v287[8];
      if (!*(_QWORD *)&v287[8])
        return;
      v93 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
      do
        v79 = __ldaxr(v93);
      while (__stlxr(v79 - 1, v93));
      goto LABEL_253;
    case 2:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v271, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
      v51 = (char *)operator new(0x90uLL);
      *((_QWORD *)v51 + 1) = 0;
      *((_QWORD *)v51 + 2) = 0;
      *((_QWORD *)v51 + 3) = off_1E697ADE8;
      *(_QWORD *)v51 = &off_1E6982A58;
      *((_DWORD *)v51 + 8) = 0;
      v52 = v271;
      v53 = v272;
      *((_QWORD *)v51 + 5) = v271;
      *((_QWORD *)v51 + 6) = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_weak_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = a2[1];
      *((_QWORD *)v51 + 7) = *a2;
      *((_QWORD *)v51 + 8) = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      *(_OWORD *)(v51 + 72) = 0u;
      *((_QWORD *)v51 + 3) = &off_1E6974F38;
      *(_OWORD *)(v51 + 88) = 0u;
      *(_OWORD *)(v51 + 104) = 0u;
      *(_OWORD *)(v51 + 120) = 0u;
      *((_QWORD *)v51 + 17) = 0;
      nth_terminal = AMCP::Graph::Node::get_nth_terminal((uint64_t)v52, 0, 1u);
      v60 = *(_OWORD *)(nth_terminal + 16);
      *(_OWORD *)v290 = *(_OWORD *)nth_terminal;
      *(_OWORD *)&v290[16] = v60;
      *(_QWORD *)&v290[32] = *(_QWORD *)(nth_terminal + 32);
      if (*((_QWORD *)v271 + 11) - *((_QWORD *)v271 + 10) != 112)
      {
        AMCP::Log::Scope_Registry::get(v271);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v206 = *(std::__shared_weak_count **)&v287[8];
        v207 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v208 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
        {
          v210 = pthread_self();
          v211 = pthread_mach_thread_np(v210);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v211;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "Reflector.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 63;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "not (graph_node->get_number_of_terminals(Direction::input) == 1)";
          _os_log_error_impl(&dword_1B57BA000, v207, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", v287, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v273);
        v212 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v277);
        std::logic_error::logic_error(&v278, &v277);
        v213 = MEMORY[0x1E0DE5018];
        v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)__p, &v278);
        *((_QWORD *)&v281 + 1) = 0;
        v282 = 0;
        v283 = 0;
        LODWORD(v284) = -1;
        __p[0] = off_1E69A1208;
        *(_QWORD *)&v281 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
        *(_QWORD *)&v287[32] = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::No"
                               "de> &, const CA::StreamDescription &) const";
        *(_QWORD *)&v287[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v288.__vftable) = 63;
        std::vector<void *>::vector(&v274);
        v214 = backtrace((void **)v274.__r_.__value_.__l.__data_, (v274.__r_.__value_.__l.__size_ - v274.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v274.__r_.__value_.__l.__data_, v214);
        v275 = off_1E69A20A0;
        v276 = v274;
        memset(&v274, 0, sizeof(v274));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v287, (uint64_t)&v275);
        v212[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v212, (const std::logic_error *)v287);
        v212->__vftable = (std::logic_error_vtbl *)(v213 + 16);
        v212[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v215 = *(_QWORD *)&v287[24];
        v212[1].__imp_.__imp_ = *(const char **)&v287[24];
        if (v215)
          (*(void (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215);
        v216 = *(std::logic_error *)&v287[32];
        LODWORD(v212[3].__vftable) = v288.__vftable;
        v212[2] = v216;
        v212->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v212[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v212[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if (*((_QWORD *)v271 + 8) - *((_QWORD *)v271 + 7) != 112)
      {
        AMCP::Log::Scope_Registry::get(v271);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v228 = *(std::__shared_weak_count **)&v287[8];
        v229 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v230 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v231 = __ldaxr(v230);
          while (__stlxr(v231 - 1, v230));
          if (!v231)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
        if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
        {
          v232 = pthread_self();
          v233 = pthread_mach_thread_np(v232);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v233;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "Reflector.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 64;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "not (graph_node->get_number_of_terminals(Direction::output) == 1)";
          _os_log_error_impl(&dword_1B57BA000, v229, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", v287, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v273);
        v234 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v277);
        std::logic_error::logic_error(&v278, &v277);
        v235 = MEMORY[0x1E0DE5018];
        v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)__p, &v278);
        *((_QWORD *)&v281 + 1) = 0;
        v282 = 0;
        v283 = 0;
        LODWORD(v284) = -1;
        __p[0] = off_1E69A1208;
        *(_QWORD *)&v281 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
        *(_QWORD *)&v287[32] = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::No"
                               "de> &, const CA::StreamDescription &) const";
        *(_QWORD *)&v287[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v288.__vftable) = 64;
        std::vector<void *>::vector(&v274);
        v236 = backtrace((void **)v274.__r_.__value_.__l.__data_, (v274.__r_.__value_.__l.__size_ - v274.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v274.__r_.__value_.__l.__data_, v236);
        v275 = off_1E69A20A0;
        v276 = v274;
        memset(&v274, 0, sizeof(v274));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v287, (uint64_t)&v275);
        v234[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v234, (const std::logic_error *)v287);
        v234->__vftable = (std::logic_error_vtbl *)(v235 + 16);
        v234[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v237 = *(_QWORD *)&v287[24];
        v234[1].__imp_.__imp_ = *(const char **)&v287[24];
        if (v237)
          (*(void (**)(uint64_t))(*(_QWORD *)v237 + 24))(v237);
        v238 = *(std::logic_error *)&v287[32];
        LODWORD(v234[3].__vftable) = v288.__vftable;
        v234[2] = v238;
        v234->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v234[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v234[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v61 = AMCP::Graph::Node::get_nth_terminal((uint64_t)v271, 0, 0);
      if (*(double *)v290 != *(double *)v61
        || (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(*(int32x4_t *)&v290[8], *(int32x4_t *)(v61 + 8)), 0x1FuLL)), (int8x16_t)xmmword_1B5D68D90)) & 0xF) != 0|| *(_DWORD *)&v290[24] != *(_DWORD *)(v61 + 24)|| *(_QWORD *)&v290[28] != *(_QWORD *)(v61 + 28))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v61);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
        v195 = *(std::__shared_weak_count **)&v287[8];
        v196 = **(NSObject ***)v287;
        if (*(_QWORD *)&v287[8])
        {
          v197 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
        }
        if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        {
          v199 = pthread_self();
          v200 = pthread_mach_thread_np(v199);
          *(_DWORD *)v287 = 67109890;
          *(_DWORD *)&v287[4] = v200;
          *(_WORD *)&v287[8] = 2080;
          *(_QWORD *)&v287[10] = "Reflector.cpp";
          *(_WORD *)&v287[18] = 1024;
          *(_DWORD *)&v287[20] = 66;
          *(_WORD *)&v287[24] = 2080;
          *(_QWORD *)&v287[26] = "not (format == graph_node->get_nth_terminal(0, Direction::output).get_format())";
          _os_log_error_impl(&dword_1B57BA000, v196, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector node terminals must have the same format", v287, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v273);
        v201 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector node terminals must have the same format", (uint64_t)&v277);
        std::logic_error::logic_error(&v278, &v277);
        v202 = MEMORY[0x1E0DE5018];
        v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)__p, &v278);
        *((_QWORD *)&v281 + 1) = 0;
        v282 = 0;
        v283 = 0;
        LODWORD(v284) = -1;
        __p[0] = off_1E69A1208;
        *(_QWORD *)&v281 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
        *(_QWORD *)&v287[32] = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::No"
                               "de> &, const CA::StreamDescription &) const";
        *(_QWORD *)&v287[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v288.__vftable) = 66;
        std::vector<void *>::vector(&v274);
        v203 = backtrace((void **)v274.__r_.__value_.__l.__data_, (v274.__r_.__value_.__l.__size_ - v274.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v274.__r_.__value_.__l.__data_, v203);
        v275 = off_1E69A20A0;
        v276 = v274;
        memset(&v274, 0, sizeof(v274));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v287, (uint64_t)&v275);
        v201[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v201, (const std::logic_error *)v287);
        v201->__vftable = (std::logic_error_vtbl *)(v202 + 16);
        v201[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v204 = *(_QWORD *)&v287[24];
        v201[1].__imp_.__imp_ = *(const char **)&v287[24];
        if (v204)
          (*(void (**)(uint64_t))(*(_QWORD *)v204 + 24))(v204);
        v205 = *(std::logic_error *)&v287[32];
        LODWORD(v201[3].__vftable) = v288.__vftable;
        v201[2] = v205;
        v201->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v201[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v201[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v62 = v271;
      v63 = *((_DWORD *)v271 + 34);
      if (v63 == 2)
        goto LABEL_160;
      if (v63 != 1)
        goto LABEL_210;
      if (*((char *)v271 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v287, *((const std::string::value_type **)v271 + 3), *((_QWORD *)v271 + 4));
        v62 = v271;
      }
      else
      {
        *(_OWORD *)v287 = *(_OWORD *)((char *)v271 + 24);
        *(_QWORD *)&v287[16] = *((_QWORD *)v271 + 5);
      }
      if (*((char *)v62 + 135) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v62 + 14), *((_QWORD *)v62 + 15));
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v62 + 7);
        *(_QWORD *)&v281 = *((_QWORD *)v62 + 16);
      }
      v94 = v287[23];
      if (v287[23] >= 0)
        v95 = (void *)v287[23];
      else
        v95 = *(void **)&v287[8];
      v96 = (void *)BYTE7(v281);
      v97 = SBYTE7(v281);
      if (SBYTE7(v281) < 0)
        v96 = __p[1];
      if (v95 == v96)
      {
        if ((SBYTE7(v281) & 0x80u) == 0)
          v98 = __p;
        else
          v98 = (void **)__p[0];
        if ((v287[23] & 0x80) != 0)
        {
          v61 = memcmp(*(const void **)v287, v98, *(size_t *)&v287[8]);
          v107 = (_DWORD)v61 == 0;
        }
        else if (v287[23])
        {
          v99 = v287[23] - 1;
          v100 = v287;
          do
          {
            v102 = *v100++;
            v101 = v102;
            v104 = *(unsigned __int8 *)v98;
            v98 = (void **)((char *)v98 + 1);
            v103 = v104;
            v106 = v99-- != 0;
            v107 = v101 == v103;
          }
          while (v101 == v103 && v106);
        }
        else
        {
          v107 = 1;
        }
      }
      else
      {
        v107 = 0;
      }
      if (v97 < 0)
      {
        operator delete(__p[0]);
        if ((v94 & 0x80) == 0)
        {
LABEL_159:
          if (v107)
            goto LABEL_160;
LABEL_210:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v61);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
          v166 = *(std::__shared_weak_count **)&v287[8];
          v167 = **(NSObject ***)v287;
          if (*(_QWORD *)&v287[8])
          {
            v168 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
          {
            v170 = pthread_self();
            v171 = pthread_mach_thread_np(v170);
            *(_DWORD *)v287 = 67109890;
            *(_DWORD *)&v287[4] = v171;
            *(_WORD *)&v287[8] = 2080;
            *(_QWORD *)&v287[10] = "Reflector.cpp";
            *(_WORD *)&v287[18] = 1024;
            *(_DWORD *)&v287[20] = 71;
            *(_WORD *)&v287[24] = 2080;
            *(_QWORD *)&v287[26] = "not (clock_policy == Node_Clock_Policy::Is_Its_Own_Clock_Source || (clock_policy == N"
                                   "ode_Clock_Policy::Is_Set_From_Clock_UID && graph_node->get_uid() == graph_node->get_c"
                                   "lock_terminal()))";
            _os_log_error_impl(&dword_1B57BA000, v167, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector node must be its own clock.", v287, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v273);
          v172 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Reflector node must be its own clock.", (uint64_t)&v277);
          std::logic_error::logic_error(&v278, &v277);
          v173 = MEMORY[0x1E0DE5018];
          v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)__p, &v278);
          *((_QWORD *)&v281 + 1) = 0;
          v282 = 0;
          v283 = 0;
          LODWORD(v284) = -1;
          __p[0] = off_1E69A1208;
          *(_QWORD *)&v281 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
          *(_QWORD *)&v287[32] = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::"
                                 "Node> &, const CA::StreamDescription &) const";
          *(_QWORD *)&v287[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
          LODWORD(v288.__vftable) = 71;
          std::vector<void *>::vector(&v274);
          v174 = backtrace((void **)v274.__r_.__value_.__l.__data_, (v274.__r_.__value_.__l.__size_ - v274.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v274.__r_.__value_.__l.__data_, v174);
          v275 = off_1E69A20A0;
          v276 = v274;
          memset(&v274, 0, sizeof(v274));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v287, (uint64_t)&v275);
          v172[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v172, (const std::logic_error *)v287);
          v172->__vftable = (std::logic_error_vtbl *)(v173 + 16);
          v172[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v175 = *(_QWORD *)&v287[24];
          v172[1].__imp_.__imp_ = *(const char **)&v287[24];
          if (v175)
            (*(void (**)(uint64_t))(*(_QWORD *)v175 + 24))(v175);
          v176 = *(std::logic_error *)&v287[32];
          LODWORD(v172[3].__vftable) = v288.__vftable;
          v172[2] = v176;
          v172->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v172[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v172[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
      }
      else if ((v94 & 0x80) == 0)
      {
        goto LABEL_159;
      }
      operator delete(*(void **)v287);
      if (!v107)
        goto LABEL_210;
LABEL_160:
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v51 + 24));
      *(_OWORD *)(v51 + 104) = *(_OWORD *)v290;
      *(_OWORD *)(v51 + 120) = *(_OWORD *)&v290[16];
      *((_QWORD *)v51 + 17) = *(_QWORD *)&v290[32];
      v126 = *((_DWORD *)v51 + 8);
      v127 = *(double *)v290;
      std::string::basic_string[abi:ne180100]<0>(&v275, "reflector timebase ");
      std::to_string(&v277, *((_DWORD *)v51 + 8));
      if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v277;
      else
        v128 = (std::string *)v277.__r_.__value_.__r.__words[0];
      if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
      else
        v129 = v277.__r_.__value_.__l.__size_;
      v130 = std::string::append((std::string *)&v275, (const std::string::value_type *)v128, v129);
      v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      *(_QWORD *)&v287[16] = *((_QWORD *)&v130->__r_.__value_.__l + 2);
      *(_OWORD *)v287 = v131;
      v130->__r_.__value_.__l.__size_ = 0;
      v130->__r_.__value_.__r.__words[2] = 0;
      v130->__r_.__value_.__r.__words[0] = 0;
      v132 = std::string::append((std::string *)v287, ":", 1uLL);
      *(_OWORD *)__p = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(_QWORD *)&v281 = *((_QWORD *)&v132->__r_.__value_.__l + 2);
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      AMCP::Graph::make_mock_timebase((std::__shared_weak_count **)&v273, v126 + 95125, 0, (uint64_t)__p, v127);
      if (SBYTE7(v281) < 0)
        operator delete(__p[0]);
      if ((v287[23] & 0x80000000) != 0)
        operator delete(*(void **)v287);
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v277.__r_.__value_.__l.__data_);
      if (v276.__r_.__value_.__s.__data_[15] < 0)
        operator delete(v275);
      v133 = operator new(0xC8uLL);
      v133[1] = 0;
      v133[2] = 0;
      *v133 = &off_1E6983F18;
      *(_QWORD *)&v134 = AMCP::DAL::Synchronizer::Synchronizer((uint64_t)(v133 + 3), &v273);
      *((_QWORD *)&v134 + 1) = v133;
      v135 = (std::__shared_weak_count *)*((_QWORD *)v51 + 10);
      *(_OWORD *)(v51 + 72) = v134;
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v138 = v273;
      if (*((_QWORD *)&v273 + 1))
      {
        v139 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      *(_DWORD *)v287 = 2;
      *(_OWORD *)&v287[8] = 0x40C0000000000000uLL;
      *(_OWORD *)&v287[24] = v138;
      v141 = operator new(0xC8uLL);
      v141[1] = 0;
      v141[2] = 0;
      *v141 = &off_1E6974F90;
      v142 = AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer((uint64_t)(v141 + 3), (const CA::StreamDescription *)v290, (const AMCP::DAL::DAL_Time_Delta *)v287, (int64x2_t **)v51 + 9);
      v141[3] = &off_1E6996230;
      *(_QWORD *)((char *)v141 + 180) = 0x100000000;
      *((_DWORD *)v141 + 47) = 0;
      *((_BYTE *)v141 + 192) = 1;
      *(_QWORD *)&v143 = v142;
      *((_QWORD *)&v143 + 1) = v141;
      v144 = (std::__shared_weak_count *)*((_QWORD *)v51 + 12);
      *(_OWORD *)(v51 + 88) = v143;
      if (v144)
      {
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      v147 = *(std::__shared_weak_count **)&v287[32];
      if (*(_QWORD *)&v287[32])
      {
        v148 = (unint64_t *)(*(_QWORD *)&v287[32] + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      v150 = (std::__shared_weak_count *)*((_QWORD *)v51 + 6);
      if (!v150)
        goto LABEL_240;
      v151 = *((_QWORD *)v51 + 5);
      v152 = (unint64_t *)&v150->__shared_weak_owners_;
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
      v154 = std::__shared_weak_count::lock(v150);
      if (!v154)
      {
        v155 = v150;
LABEL_239:
        std::__shared_weak_count::__release_weak(v155);
        goto LABEL_240;
      }
      v155 = v154;
      std::__shared_weak_count::__release_weak(v150);
      if (v151)
      {
        v157 = *(_QWORD *)(v151 + 192);
        if (!v157)
        {
          AMCP::Log::Scope_Registry::get(v156);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v287, "com.apple.coreaudio", "AMCP");
          v256 = *(std::__shared_weak_count **)&v287[8];
          v257 = **(NSObject ***)v287;
          if (*(_QWORD *)&v287[8])
          {
            v258 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 - 1, v258));
            if (!v259)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
            }
          }
          if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
          {
            v260 = pthread_self();
            v261 = pthread_mach_thread_np(v260);
            *(_DWORD *)v287 = 67109890;
            *(_DWORD *)&v287[4] = v261;
            *(_WORD *)&v287[8] = 2080;
            *(_QWORD *)&v287[10] = "GraphNode.cpp";
            *(_WORD *)&v287[18] = 1024;
            *(_DWORD *)&v287[20] = 670;
            *(_WORD *)&v287[24] = 2080;
            *(_QWORD *)&v287[26] = "not (m_node_proc)";
            _os_log_error_impl(&dword_1B57BA000, v257, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v287, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v279);
          v262 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v277);
          std::logic_error::logic_error(&v278, &v277);
          v263 = MEMORY[0x1E0DE5018];
          v278.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)__p, &v278);
          *((_QWORD *)&v281 + 1) = 0;
          v282 = 0;
          v283 = 0;
          LODWORD(v284) = -1;
          __p[0] = off_1E69A1208;
          *(_QWORD *)&v281 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v287, (uint64_t)__p);
          *(_QWORD *)&v287[32] = "std::shared_ptr<Node_Proc> AMCP::Graph::Node::get_node_procs()";
          *(_QWORD *)&v287[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
          LODWORD(v288.__vftable) = 670;
          std::vector<void *>::vector(&v274);
          v264 = backtrace((void **)v274.__r_.__value_.__l.__data_, (v274.__r_.__value_.__l.__size_ - v274.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v274.__r_.__value_.__l.__data_, v264);
          v275 = off_1E69A20A0;
          v276 = v274;
          memset(&v274, 0, sizeof(v274));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v287, (uint64_t)&v275);
          v262[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v262, (const std::logic_error *)v287);
          v262->__vftable = (std::logic_error_vtbl *)(v263 + 16);
          v262[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v265 = *(_QWORD *)&v287[24];
          v262[1].__imp_.__imp_ = *(const char **)&v287[24];
          if (v265)
            (*(void (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265);
          v266 = *(std::logic_error *)&v287[32];
          LODWORD(v262[3].__vftable) = v288.__vftable;
          v262[2] = v266;
          v262->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v262[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v262[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v158 = *(std::__shared_weak_count **)(v151 + 200);
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldxr(v159);
          while (__stxr(v160 + 1, v159));
        }
        v161 = v273;
        if (*((_QWORD *)&v273 + 1))
        {
          v162 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
          do
            v163 = __ldxr(v162);
          while (__stxr(v163 + 1, v162));
        }
        *(_QWORD *)v287 = &off_1E6974FE0;
        *(_OWORD *)&v287[8] = v161;
        *(_QWORD *)&v287[24] = v287;
        std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v287, (_QWORD *)(v157 + 64));
        v164 = *(_QWORD **)&v287[24];
        if (*(_BYTE **)&v287[24] == v287)
        {
          v165 = 4;
          v164 = v287;
        }
        else
        {
          if (!*(_QWORD *)&v287[24])
            goto LABEL_222;
          v165 = 5;
        }
        (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_222:
        v178 = *((_QWORD *)v51 + 11);
        v177 = *((_QWORD *)v51 + 12);
        if (v177)
        {
          v179 = (unint64_t *)(v177 + 8);
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        *(_QWORD *)v287 = &off_1E6975060;
        *(_QWORD *)&v287[8] = v178;
        *(_QWORD *)&v287[16] = v177;
        *(_QWORD *)&v287[24] = v287;
        std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v287, (_QWORD *)(v157 + 32));
        v181 = *(_QWORD **)&v287[24];
        if (*(_BYTE **)&v287[24] == v287)
        {
          v182 = 4;
          v181 = v287;
        }
        else
        {
          if (!*(_QWORD *)&v287[24])
          {
LABEL_230:
            if (v158)
            {
              v183 = (unint64_t *)&v158->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            goto LABEL_235;
          }
          v182 = 5;
        }
        (*(void (**)(void))(*v181 + 8 * v182))();
        goto LABEL_230;
      }
LABEL_235:
      v185 = (unint64_t *)&v155->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        goto LABEL_239;
      }
LABEL_240:
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      *(_QWORD *)&v190 = v51 + 24;
      *((_QWORD *)&v190 + 1) = v51;
      v191 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v190;
      if (v191)
      {
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v77 = v272;
      if (v272)
      {
        v194 = (unint64_t *)&v272->__shared_owners_;
        do
          v79 = __ldaxr(v194);
        while (__stlxr(v79 - 1, v194));
LABEL_253:
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      return;
    case 3:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v287, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
      v64 = operator new(0x48uLL);
      v65 = v64;
      v64[1] = 0;
      v64[2] = 0;
      v64[3] = off_1E697ADE8;
      v66 = v64 + 3;
      *v64 = &off_1E6982AA8;
      *((_DWORD *)v64 + 8) = 0;
      v67 = *(_QWORD *)&v287[8];
      v64[5] = *(_QWORD *)v287;
      v64[6] = v67;
      if (v67)
      {
        v68 = (unint64_t *)(v67 + 16);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = a2[1];
      v64[7] = *a2;
      v64[8] = v70;
      if (v70)
      {
        v71 = (unint64_t *)(v70 + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      *v66 = &off_1E69981D0;
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v64 + 3));
      *(_QWORD *)&v73 = v66;
      *((_QWORD *)&v73 + 1) = v65;
      v74 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v73;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = *(std::__shared_weak_count **)&v287[8];
      if (!*(_QWORD *)&v287[8])
        return;
      v78 = (unint64_t *)(*(_QWORD *)&v287[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      goto LABEL_253;
    default:
      return;
  }
}

void sub_1B5A7987C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, caulk::mach::os_workgroup_interval_managed *a10, AMCP::IO_Core::Node *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,std::runtime_error a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t *v46;
  AMCP::Utility::Dispatch_Queue *v47;
  std::mutex *v48;
  void **v49;
  void *v51;
  std::__shared_weak_count *shared_owners;
  void *v53;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v47);
  std::mutex::~mutex(v48);
  v51 = *v49;
  if (*v49)
  {
    a13[8].__shared_weak_owners_ = (uint64_t)v51;
    operator delete(v51);
  }
  std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100](v46);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a9);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(a10);
  shared_owners = (std::__shared_weak_count *)a13[3].__shared_owners_;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  AMCP::IO_Core::Node::~Node(a11);
  std::__shared_weak_count::~__shared_weak_count(a13);
  operator delete(v53);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::__on_zero_shared(uint64_t a1)
{
  AMCP::IO_Core::IOContext_Core::~IOContext_Core((AMCP::IO_Core::IOContext_Core *)(a1 + 24));
}

void std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69829B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69829B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t AMCP::Graph::Node::get_nth_terminal(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *v15;
  std::string *p_p;
  uint64_t v17;
  void *exception;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::string __p;
  unint64_t v28;
  unsigned int v29;
  std::string v30;
  std::string v31;
  std::logic_error v32;
  std::logic_error v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  std::string v40;
  uint8_t buf[8];
  __int16 v42;
  char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE v47[28];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 24 * a3;
  v7 = *(_QWORD *)(v4 + 56);
  v6 = (_QWORD *)(v4 + 56);
  v5 = v7;
  v8 = v6 + 1;
  if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - v7) >> 4) <= a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      if (*(char *)(a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      else
        v40 = *(std::string *)(a1 + 24);
      v33 = *(std::logic_error *)&v40.__r_.__value_.__l.__data_;
      v15 = (void *)v40.__r_.__value_.__r.__words[2];
      memset(&v40, 0, sizeof(v40));
      v34 = v15;
      v35 = a2;
      LODWORD(v36) = a3;
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)&v33.__vftable);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - *v6) >> 4);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v14;
      v42 = 2080;
      v43 = "GraphNode.cpp";
      v44 = 1024;
      v45 = 132;
      v46 = 2080;
      *(_QWORD *)v47 = "not (index < m_terminals[wire_direction].size())";
      *(_WORD *)&v47[8] = 2080;
      *(_QWORD *)&v47[10] = p_p;
      *(_WORD *)&v47[18] = 2048;
      *(_QWORD *)&v47[20] = v17;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %s  size: %ld", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34) < 0)
        operator delete(v33.__vftable);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    exception = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v26 = *(std::string *)(a1 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    v19 = v26.__r_.__value_.__r.__words[2];
    memset(&v26, 0, sizeof(v26));
    __p.__r_.__value_.__r.__words[2] = v19;
    v28 = a2;
    v29 = a3;
    AMCP::Terminal_Identifier_to_string(&v30, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v30;
    else
      v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Index out of bounds - index: %s  size: %ld", (uint64_t)&v31, v20, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - *v6) >> 4));
    std::logic_error::logic_error(&v32, &v31);
    v32.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v33, &v32);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = -1;
    v33.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v34 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(_QWORD *)&v47[6] = "Terminal &AMCP::Graph::Node::get_nth_terminal(size_t, Direction)";
    *(_QWORD *)&v47[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v47[22] = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v23 = off_1E69A20A0;
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return v5 + 112 * a2;
}

void sub_1B5A7A5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (***AMCP::Graph::Node::get_nth_wire_ref(AMCP::Log::Scope_Registry *a1, uint64_t a2, unint64_t a3, unsigned int a4))()
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (***result)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  std::string::size_type v23;
  std::string *v24;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  void *exception;
  std::string::size_type v36;
  std::string *v37;
  std::logic_error v38;
  uint64_t v39;
  std::string v40;
  uint64_t v41;
  std::string v42;
  std::logic_error v43;
  char v44;
  std::string v45;
  std::string v46;
  std::string v47;
  _BYTE __p[32];
  unsigned int v49;
  std::string v50;
  std::string v51;
  std::logic_error v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t (**v58)();
  std::string v59;
  uint8_t buf[8];
  _BYTE v61[10];
  __int16 v62;
  int v63;
  __int16 v64;
  _BYTE v65[28];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v7 = a2 + 24 * a4;
  v9 = *(_QWORD *)(v7 + 56);
  v8 = (_QWORD *)(v7 + 56);
  v10 = v8 + 1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8[1] - v9) >> 4) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v25 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      if (*(char *)(a2 + 47) < 0)
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
      else
        v50 = *(std::string *)(a2 + 24);
      v52 = *(std::logic_error *)&v50.__r_.__value_.__l.__data_;
      v32 = (void *)v50.__r_.__value_.__r.__words[2];
      memset(&v50, 0, sizeof(v50));
      v53 = v32;
      v54 = a3;
      LODWORD(v55) = a4;
      AMCP::Terminal_Identifier_to_string((std::string *)__p, (const void **)&v52.__vftable);
      if (__p[23] >= 0)
        v33 = __p;
      else
        v33 = *(_BYTE **)__p;
      v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v8) >> 4);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v27;
      *(_WORD *)v61 = 2080;
      *(_QWORD *)&v61[2] = "GraphNode.cpp";
      v62 = 1024;
      v63 = 140;
      v64 = 2080;
      *(_QWORD *)v65 = "not (index < m_terminals[wire_direction].size())";
      *(_WORD *)&v65[8] = 2080;
      *(_QWORD *)&v65[10] = v33;
      *(_WORD *)&v65[18] = 2048;
      *(_QWORD *)&v65[20] = v34;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %s  size: %ld", buf, 0x36u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v53) < 0)
        operator delete(v52.__vftable);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    exception = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a2 + 47) < 0)
      std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    else
      v47 = *(std::string *)(a2 + 24);
    *(_OWORD *)__p = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    v36 = v47.__r_.__value_.__r.__words[2];
    memset(&v47, 0, sizeof(v47));
    *(_QWORD *)&__p[16] = v36;
    *(_QWORD *)&__p[24] = a3;
    v49 = a4;
    AMCP::Terminal_Identifier_to_string(&v51, (const void **)__p);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v51;
    else
      v37 = (std::string *)v51.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Index out of bounds - index: %s  size: %ld", (uint64_t)&v40, v37, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v8) >> 4));
    std::logic_error::logic_error(&v38, &v40);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v38);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(_QWORD *)&v65[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::Graph::Node::get_nth_wire_ref(size_t, Direction)";
    *(_QWORD *)&v65[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v65[22] = 140;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v46.__r_.__value_.__l.__data_);
    v59 = v46;
    v58 = off_1E69A20A0;
    memset(&v46, 0, sizeof(v46));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v58);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v11 = *(_QWORD *)(a2 + 192);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v61 = 2080;
      *(_QWORD *)&v61[2] = "GraphNode.cpp";
      v62 = 1024;
      v63 = 686;
      v64 = 2080;
      *(_QWORD *)v65 = "not (m_node_proc)";
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    v31 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error((std::logic_error *)&v46, &v40);
    v46.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v52, (const std::logic_error *)&v46);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(_QWORD *)&v65[6] = "Get_Terminal_Buffer_Handler AMCP::Graph::Node::get_get_buffer_proc() const";
    *(_QWORD *)&v65[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v65[22] = 686;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v51.__r_.__value_.__l.__data_);
    *(std::string *)&__p[8] = v51;
    *(_QWORD *)__p = off_1E69A20A0;
    memset(&v51, 0, sizeof(v51));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v31, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v58, v11 + 32);
  if (!v59.__r_.__value_.__r.__words[2])
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)v61;
    v15 = **(NSObject ***)buf;
    if (*(_QWORD *)v61)
    {
      v16 = (unint64_t *)(*(_QWORD *)v61 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      if (*(char *)(a2 + 47) < 0)
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
      else
        v45 = *(std::string *)(a2 + 24);
      v52 = *(std::logic_error *)&v45.__r_.__value_.__l.__data_;
      v20 = (void *)v45.__r_.__value_.__r.__words[2];
      memset(&v45, 0, sizeof(v45));
      v53 = v20;
      v54 = a3;
      LODWORD(v55) = a4;
      AMCP::Terminal_Identifier_to_string((std::string *)__p, (const void **)&v52.__vftable);
      if (__p[23] >= 0)
        v21 = __p;
      else
        v21 = *(_BYTE **)__p;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v61 = 2080;
      *(_QWORD *)&v61[2] = "GraphNode.cpp";
      v62 = 1024;
      v63 = 149;
      v64 = 2080;
      *(_QWORD *)v65 = "not (proc != nullptr)";
      *(_WORD *)&v65[8] = 2080;
      *(_QWORD *)&v65[10] = v21;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Get_Terminal_Buffer_Handler is missing for required Container - index: %s", buf, 0x2Cu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v53) < 0)
        operator delete(v52.__vftable);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    v22 = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a2 + 47) < 0)
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    else
      v42 = *(std::string *)(a2 + 24);
    *(_OWORD *)__p = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    v23 = v42.__r_.__value_.__r.__words[2];
    memset(&v42, 0, sizeof(v42));
    *(_QWORD *)&__p[16] = v23;
    *(_QWORD *)&__p[24] = a3;
    v49 = a4;
    AMCP::Terminal_Identifier_to_string(&v46, (const void **)__p);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v46;
    else
      v24 = (std::string *)v46.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Get_Terminal_Buffer_Handler is missing for required Container - index: %s", (uint64_t)&v51, v24);
    std::logic_error::logic_error(&v43, &v51);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v43);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(_QWORD *)&v65[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::Graph::Node::get_nth_wire_ref(size_t, Direction)";
    *(_QWORD *)&v65[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v65[22] = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v38);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v40.__r_.__value_.__r.__words[1] = v38;
    v41 = v39;
    v38.__vftable = 0;
    v38.__imp_.__imp_ = 0;
    v39 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v40);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v22, (uint64_t)buf);
  }
  LODWORD(v52.__vftable) = a4;
  *(_QWORD *)buf = a3;
  (*(void (**)(std::string::size_type, std::logic_error *, uint8_t *))(*(_QWORD *)v59.__r_.__value_.__r.__words[2]
                                                                                + 48))(v59.__r_.__value_.__r.__words[2], &v52, buf);
  result = (uint64_t (***)())v59.__r_.__value_.__r.__words[2];
  if ((uint64_t (***)())v59.__r_.__value_.__r.__words[2] == &v58)
  {
    v13 = 4;
    result = &v58;
  }
  else
  {
    if (!v59.__r_.__value_.__r.__words[2])
      return result;
    v13 = 5;
  }
  return (uint64_t (***)())(*result)[v13]();
}

void sub_1B5A7AFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 233) < 0)
    operator delete(*(void **)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v3 = result;
  v4 = result + 2;
  v5 = result[2];
  v6 = result[1];
  if (v6 >= v5)
  {
    v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - *result) >> 3);
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x276276276276276)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *result) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x13B13B13B13B13BLL)
      v17 = 0x276276276276276;
    else
      v17 = v15;
    v27[4] = v4;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v17);
    else
      v18 = 0;
    v19 = 0;
    v20 = v17 + 104 * v14;
    v27[0] = v17;
    v27[1] = v20;
    v27[3] = v17 + 104 * v18;
    v21 = *a2;
    v22 = a2[1];
    *(_QWORD *)(v20 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    do
    {
      v23 = (_QWORD *)(v20 + v19);
      v24 = (_QWORD *)((char *)a2 + v19);
      v23[5] = 0;
      v23[6] = 0;
      v23[7] = 0;
      *(_OWORD *)(v23 + 5) = *(__int128 *)((char *)a2 + v19 + 40);
      v23[7] = *(_QWORD *)((char *)a2 + v19 + 56);
      v24[5] = 0;
      v24[6] = 0;
      v24[7] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    v25 = v17 + 104 * v14;
    v26 = *((_QWORD *)a2 + 11);
    *(_BYTE *)(v25 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(v25 + 88) = v26;
    v27[2] = v20 + 104;
    std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v3, v27);
    v13 = v3[1];
    result = (uint64_t *)std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)v27);
  }
  else
  {
    v7 = 0;
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)(v6 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
    do
    {
      v10 = (_QWORD *)(v6 + v7);
      v11 = (_QWORD *)((char *)a2 + v7);
      v10[5] = 0;
      v10[6] = 0;
      v10[7] = 0;
      *(_OWORD *)(v10 + 5) = *(__int128 *)((char *)a2 + v7 + 40);
      v10[7] = *(_QWORD *)((char *)a2 + v7 + 56);
      v11[5] = 0;
      v11[6] = 0;
      v11[7] = 0;
      v7 += 24;
    }
    while (v7 != 48);
    v12 = *((_QWORD *)a2 + 11);
    *(_BYTE *)(v6 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(v6 + 88) = v12;
    v13 = v6 + 104;
  }
  v3[1] = v13;
  return result;
}

void AMCP::Graph::Node::edit_each_wire(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  std::string *v7;
  _QWORD *v8;
  unint64_t v9;
  std::string::size_type v10;
  char *v11;
  char *v12;
  char *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v19;
  char *v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  unint64_t v24;
  int v25;
  int v26;

  v5 = 0;
  v6 = 0;
  v16 = a1 + 56;
  v7 = (std::string *)(a1 + 24);
  do
  {
    v17 = v5;
    v8 = (_QWORD *)(v16 + 24 * v6);
    if (v8[1] != *v8)
    {
      v9 = 0;
      do
      {
        if (*(char *)(a1 + 47) < 0)
          std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
        else
          v21 = *v7;
        *(_OWORD *)__p = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        v10 = v21.__r_.__value_.__r.__words[2];
        memset(&v21, 0, sizeof(v21));
        v23 = v10;
        v24 = v9;
        v25 = v6;
        AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
        v11 = v19;
        v12 = v20;
        for (i = v19; i != v12; i += 8)
        {
          v14 = *(_QWORD *)i;
          v26 = v6;
          v15 = *(_QWORD *)(a3 + 24);
          if (!v15)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 48))(v15, &v26, v14);
        }
        if (v11)
          operator delete(v11);
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        ++v9;
      }
      while (v9 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[1] - *v8) >> 4));
    }
    v5 = 1;
    v6 = 1;
  }
  while ((v17 & 1) == 0);
}

void sub_1B5A7B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Node::for_each_connection(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  std::string *v7;
  _QWORD *v8;
  unint64_t v9;
  std::string::size_type v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char v18;
  std::string v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  void *__p;
  void *v29;
  char *v30;
  char *v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  unint64_t v35;
  int v36;
  _DWORD v37[3];

  v5 = 0;
  v6 = 0;
  v17 = a1 + 56;
  v7 = (std::string *)(a1 + 24);
  do
  {
    v18 = v5;
    v8 = (_QWORD *)(v17 + 24 * v6);
    if (v8[1] != *v8)
    {
      v9 = 0;
      do
      {
        if (*(char *)(a1 + 47) < 0)
          std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
        else
          v32 = *v7;
        v33 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        v10 = v32.__r_.__value_.__r.__words[2];
        memset(&v32, 0, sizeof(v32));
        v34 = v10;
        v35 = v9;
        v36 = v6;
        AMCP::Graph::Wire_Index::get_wires_for_terminal(&v30, a2, (unsigned __int8 **)&v33);
        v12 = v30;
        v11 = v31;
        if (v30 != v31)
        {
          do
          {
            if (*(_BYTE *)(*(_QWORD *)v12 + 408))
            {
              AMCP::Graph::Graph_Wire::Connection::Connection(&v20, (const AMCP::Graph::Graph_Wire::Connection *)(*(_QWORD *)v12 + 192));
              v37[0] = v6;
              v13 = *(_QWORD *)(a3 + 24);
              if (!v13)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, _DWORD *, std::string *))(*(_QWORD *)v13 + 48))(v13, v37, &v20);
              if (__p)
              {
                v29 = __p;
                operator delete(__p);
              }
              v14 = v27;
              if (v27)
              {
                p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                do
                  v16 = __ldaxr(p_shared_owners);
                while (__stlxr(v16 - 1, p_shared_owners));
                if (!v16)
                {
                  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                  std::__shared_weak_count::__release_weak(v14);
                }
              }
              if (v25)
              {
                v26 = v25;
                operator delete(v25);
              }
              if (v24 < 0)
                operator delete(v23);
              if (v22 < 0)
                operator delete(v21);
              if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v20.__r_.__value_.__l.__data_);
            }
            v12 += 8;
          }
          while (v12 != v11);
          v12 = v30;
        }
        if (v12)
          operator delete(v12);
        if (SHIBYTE(v34) < 0)
          operator delete((void *)v33);
        ++v9;
      }
      while (v9 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[1] - *v8) >> 4));
    }
    v5 = 1;
    v6 = 1;
  }
  while ((v18 & 1) == 0);
}

void sub_1B5A7B8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 121) < 0)
    operator delete(*(void **)(v13 - 144));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6982AF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6982AF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::operator()(AMCP::Log::Scope_Registry *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  std::logic_error *exception;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::logic_error v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::logic_error v22;
  std::logic_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  int v33;
  _BYTE v34[24];
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)result + 2);
  if (*(_BYTE *)(a3 + 108))
    v4 = *(_DWORD *)(a3 + 104) == v3;
  else
    v4 = 1;
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)v31;
    v6 = **(NSObject ***)buf;
    if (*(_QWORD *)v31)
    {
      v7 = (unint64_t *)(*(_QWORD *)v31 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v31 = 2080;
      *(_QWORD *)&v31[2] = "GraphTerminal.cpp";
      v32 = 1024;
      v33 = 59;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "not (BOOL(m_buffer_alignment) ? m_buffer_alignment == buffer_alignment : true)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s mismatch buffer alignment", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"mismatch buffer alignment", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v12 = MEMORY[0x1E0DE5018];
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v24 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(_QWORD *)&v34[8] = "void AMCP::Graph::Terminal::set_buffer_alignment(Buffer_Alignment)";
    *(_QWORD *)&v34[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphTerminal.cpp";
    v35 = 59;
    std::vector<void *>::vector(&v16);
    v13 = backtrace((void **)v16, (*((_QWORD *)&v16 + 1) - (_QWORD)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v13);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v18);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v12 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v14 = *(_QWORD *)v34;
    exception[1].__imp_.__imp_ = *(const char **)v34;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    v15 = *(std::logic_error *)&v34[8];
    LODWORD(exception[3].__vftable) = v35;
    exception[2] = v15;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  *(_DWORD *)(a3 + 104) = v3;
  *(_BYTE *)(a3 + 108) = 1;
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node32set_all_terminal_data_directionsE16Buffer_AlignmentE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::target_type()
{
}

uint64_t AMCP::Graph::Node::calculate_clocks_from_wires(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  int v8;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  AMCP::Log::Scope_Registry *clock_proc;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  unint64_t *v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  AMCP::Log::Scope_Registry *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  double v43;
  AMCP::Log::Scope_Registry *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t *i;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  size_t v64;
  std::string::size_type v65;
  char *v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  std::string::size_type v77;
  unint64_t v78;
  uint8x8_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  std::string *v86;
  float v87;
  float v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  int8x8_t prime;
  void *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint8x8_t v98;
  unint64_t v99;
  uint8x8_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t (***v104)();
  uint64_t (**v105)();
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  NSObject *v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  _QWORD *v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v131;
  NSObject *v132;
  _opaque_pthread_t *v133;
  mach_port_t v134;
  NSObject *v135;
  _opaque_pthread_t *v136;
  mach_port_t v137;
  NSObject *v138;
  _opaque_pthread_t *v139;
  mach_port_t v140;
  std::string *v141;
  void *v142;
  std::string *v143;
  uint64_t v144;
  void *v145;
  NSObject *v146;
  _opaque_pthread_t *v147;
  mach_port_t v148;
  _QWORD *v149;
  void *exception;
  _QWORD *v151;
  std::string *v152;
  uint64_t v153;
  void *v154;
  std::string *v155;
  std::string *v156;
  NSObject *v157;
  _opaque_pthread_t *v158;
  mach_port_t v159;
  _QWORD *v160;
  _QWORD *v161;
  void *v162;
  _QWORD *v163;
  std::string *v164;
  unsigned int v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  std::logic_error v169;
  std::string::size_type v170;
  std::string v171;
  std::logic_error v172;
  char v173;
  std::string v174;
  uint64_t (**v175)();
  std::string v176;
  std::string v177;
  std::string v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  __int128 v184;
  std::string v185;
  _BYTE v186[30];
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v184 = 0uLL;
  v183 = 0;
  v8 = *(_DWORD *)(a1 + 136);
  if (v8 == 2)
  {
    clock_proc = (AMCP::Log::Scope_Registry *)AMCP::Graph::Node::get_get_clock_proc((AMCP::Graph::Node *)&v185, *(_QWORD *)(a1 + 192));
    v31 = *(_QWORD *)v186;
    if (*(std::string **)v186 == &v185)
    {
      clock_proc = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(std::string *))(v185.__r_.__value_.__r.__words[0]
                                                                                         + 32))(&v185);
      if (v31)
      {
LABEL_31:
        AMCP::Graph::Node::get_get_clock_proc((AMCP::Graph::Node *)&v185, *(_QWORD *)(a1 + 192));
        if (!*(_QWORD *)v186)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v186 + 48))(&v171);
        v32 = *(std::string **)v186;
        if (*(std::string **)v186 == &v185)
        {
          v33 = 4;
          v32 = &v185;
        }
        else
        {
          if (!*(_QWORD *)v186)
          {
LABEL_39:
            if (!v171.__r_.__value_.__r.__words[0])
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
              v146 = *(NSObject **)v185.__r_.__value_.__l.__data_;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
              if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
              {
                v147 = pthread_self();
                v148 = pthread_mach_thread_np(v147);
                v149 = (_QWORD *)(a1 + 24);
                if (*(char *)(a1 + 47) < 0)
                  v149 = (_QWORD *)*v149;
                LODWORD(v185.__r_.__value_.__l.__data_) = 67110146;
                HIDWORD(v185.__r_.__value_.__r.__words[0]) = v148;
                LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
                WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v185.__r_.__value_.__r.__words[2]) = 347;
                *(_WORD *)v186 = 2080;
                *(_QWORD *)&v186[2] = "not (clock_source != nullptr)";
                *(_WORD *)&v186[10] = 2080;
                *(_QWORD *)&v186[12] = v149;
                _os_log_error_impl(&dword_1B57BA000, v146, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Calculated clock is null for node %s", (uint8_t *)&v185, 0x2Cu);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v172);
              exception = __cxa_allocate_exception(0x40uLL);
              v151 = (_QWORD *)(a1 + 24);
              if (*(char *)(a1 + 47) < 0)
                v151 = (_QWORD *)*v151;
              caulk::make_string((caulk *)"Calculated clock is null for node %s", (uint64_t)&v177, v151);
              std::logic_error::logic_error(&v169, &v177);
              v169.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error((std::logic_error *)&v178, &v169);
              v179 = 0;
              v180 = 0;
              v181 = 0;
              v182 = -1;
              v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
              v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
              *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, "
                                    "const std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<"
                                    "Meta_Timebase_Factory> &)";
              *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
              *(_DWORD *)&v186[24] = 347;
              applesauce::backtrace::snapshot_N<64>::snapshot_N(&v174.__r_.__value_.__l.__data_);
              v176 = v174;
              v175 = off_1E69A20A0;
              memset(&v174, 0, sizeof(v174));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v185);
            }
            std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v184, (uint64_t)v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
            size = (std::__shared_weak_count *)v171.__r_.__value_.__l.__size_;
            if (!v171.__r_.__value_.__l.__size_)
              goto LABEL_45;
            v34 = (unint64_t *)(v171.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v34);
            while (__stlxr(v29 - 1, v34));
LABEL_43:
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            goto LABEL_45;
          }
          v33 = 5;
        }
        v32 = (std::string *)(*(uint64_t (**)(void))(v32->__r_.__value_.__r.__words[0] + 8 * v33))();
        goto LABEL_39;
      }
    }
    else if (*(_QWORD *)v186)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v186 + 40))(*(_QWORD *)v186);
      goto LABEL_31;
    }
    AMCP::Log::Scope_Registry::get(clock_proc);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
    v113 = *(NSObject **)v185.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      v114 = pthread_self();
      v115 = pthread_mach_thread_np(v114);
      v116 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v116 = (_QWORD *)*v116;
      LODWORD(v185.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v185.__r_.__value_.__r.__words[0]) = v115;
      LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
      WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v185.__r_.__value_.__r.__words[2]) = 345;
      *(_WORD *)v186 = 2080;
      *(_QWORD *)&v186[2] = "not (get_get_clock_proc() != nullptr)";
      *(_WORD *)&v186[10] = 2080;
      *(_QWORD *)&v186[12] = v116;
      _os_log_error_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s is its own clock source but doesn't provide a clock function in its proc", (uint8_t *)&v185, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v169);
    v117 = __cxa_allocate_exception(0x40uLL);
    v118 = (_QWORD *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v118 = (_QWORD *)*v118;
    caulk::make_string((caulk *)"Node %s is its own clock source but doesn't provide a clock function in its proc", (uint64_t)&v177, v118);
    std::logic_error::logic_error((std::logic_error *)&v171, &v177);
    v171.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v178, (const std::logic_error *)&v171);
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = -1;
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
    *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const std:"
                          ":function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory> &)";
    *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v186[24] = 345;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v174.__r_.__value_.__l.__data_);
    v176 = v174;
    v175 = off_1E69A20A0;
    memset(&v174, 0, sizeof(v174));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v117, (uint64_t)&v185);
  }
  if (v8 == 1)
  {
    if (!a4)
      std::__throw_bad_function_call[abi:ne180100]();
    v13 = (_QWORD *)(a1 + 112);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 48))(&v185, a4, a1 + 112);
    v14 = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
    *(_OWORD *)&v185.__r_.__value_.__l.__data_ = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    v184 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
    if (v185.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v185.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((_QWORD)v184)
      goto LABEL_45;
    v21 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)(a1 + 112));
    if (!v21)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
      v157 = *(NSObject **)v185.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        v158 = pthread_self();
        v159 = pthread_mach_thread_np(v158);
        v160 = (_QWORD *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v160 = (_QWORD *)*v160;
        v161 = (_QWORD *)(a1 + 112);
        if (*(char *)(a1 + 135) < 0)
          v161 = (_QWORD *)*v13;
        LODWORD(v185.__r_.__value_.__l.__data_) = 67110402;
        HIDWORD(v185.__r_.__value_.__r.__words[0]) = v159;
        LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
        WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v185.__r_.__value_.__r.__words[2]) = 338;
        *(_WORD *)v186 = 2080;
        *(_QWORD *)&v186[2] = "not (nodes.find(m_clock_terminal) != nodes.end())";
        *(_WORD *)&v186[10] = 2080;
        *(_QWORD *)&v186[12] = v160;
        *(_WORD *)&v186[20] = 2080;
        *(_QWORD *)&v186[22] = v161;
        _os_log_error_impl(&dword_1B57BA000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %s: clock node not found in graph: %s", (uint8_t *)&v185, 0x36u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v169);
      v162 = __cxa_allocate_exception(0x40uLL);
      v163 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v163 = (_QWORD *)*v163;
      if (*(char *)(a1 + 135) < 0)
        v13 = (_QWORD *)*v13;
      caulk::make_string((caulk *)"%s: clock node not found in graph: %s", (uint64_t)&v177, v163, v13);
      std::logic_error::logic_error((std::logic_error *)&v171, &v177);
      v171.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v178, (const std::logic_error *)&v171);
      v179 = 0;
      v180 = 0;
      v181 = 0;
      v182 = -1;
      v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
      *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const st"
                            "d::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory> &)";
      *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
      *(_DWORD *)&v186[24] = 338;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v174.__r_.__value_.__l.__data_);
      v176 = v174;
      v175 = off_1E69A20A0;
      memset(&v174, 0, sizeof(v174));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v162, (uint64_t)&v185);
    }
    v22 = *((_QWORD *)v21 + 5);
    v24 = *(_QWORD *)(v22 + 144);
    v23 = *(_QWORD *)(v22 + 152);
    if (v23)
    {
      v25 = (unint64_t *)(v23 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    size = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    *(_QWORD *)&v184 = v24;
    *((_QWORD *)&v184 + 1) = v23;
    if (!size)
      goto LABEL_45;
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    goto LABEL_43;
  }
  if (v8)
    goto LABEL_45;
  v10 = operator new(0x20uLL);
  *v10 = &off_1E6982B88;
  v10[1] = a2;
  v10[2] = &v184;
  v10[3] = &v183;
  *(_QWORD *)v186 = v10;
  AMCP::Graph::Node::for_each_connection(a1, a3, (uint64_t)&v185);
  v11 = *(std::string **)v186;
  if (*(std::string **)v186 == &v185)
  {
    v12 = 4;
    v11 = &v185;
  }
  else
  {
    if (!*(_QWORD *)v186)
      goto LABEL_45;
    v12 = 5;
  }
  (*(void (**)(void))(v11->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_45:
  if ((_QWORD)v184)
    v35 = v183 == 0;
  else
    v35 = 0;
  v36 = v35;
  if (!v35)
    goto LABEL_231;
  *(_OWORD *)&v177.__r_.__value_.__r.__words[1] = 0uLL;
  v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177.__r_.__value_.__l.__size_;
  v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v178.__r_.__value_.__l.__size_, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  *(_QWORD *)v186 = 0;
  v37 = (char *)operator new(0x20uLL);
  *(_QWORD *)v37 = &off_1E6982C08;
  *(std::string *)(v37 + 8) = v178;
  *(_OWORD *)&v178.__r_.__value_.__r.__words[1] = 0uLL;
  *(_QWORD *)v186 = v37;
  AMCP::Graph::Node::for_each_connection(a1, a3, (uint64_t)&v185);
  v38 = *(AMCP::Log::Scope_Registry **)v186;
  if (*(std::string **)v186 == &v185)
  {
    v39 = 4;
    v38 = (AMCP::Log::Scope_Registry *)&v185;
    goto LABEL_57;
  }
  if (*(_QWORD *)v186)
  {
    v39 = 5;
LABEL_57:
    v38 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v38 + 8 * v39))();
  }
  v40 = (std::__shared_weak_count *)v178.__r_.__value_.__r.__words[2];
  if (v178.__r_.__value_.__r.__words[2])
  {
    v41 = (unint64_t *)(v178.__r_.__value_.__r.__words[2] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v177.__r_.__value_.__r.__words[2] != 1)
  {
    if (!v177.__r_.__value_.__r.__words[2])
    {
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
      v132 = *(NSObject **)v185.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        v133 = pthread_self();
        v134 = pthread_mach_thread_np(v133);
        if (*(char *)(a1 + 47) < 0)
          std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
        else
          v178 = *(std::string *)(a1 + 24);
        v141 = &v178;
        if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v141 = (std::string *)v178.__r_.__value_.__r.__words[0];
        LODWORD(v185.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v185.__r_.__value_.__r.__words[0]) = v134;
        LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
        WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v185.__r_.__value_.__r.__words[2]) = 359;
        *(_WORD *)v186 = 2080;
        *(_QWORD *)&v186[2] = "not (not terminal_sample_rates.empty())";
        *(_WORD *)&v186[10] = 2080;
        *(_QWORD *)&v186[12] = v141;
        _os_log_error_impl(&dword_1B57BA000, v132, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node is missing terminals: %s", (uint8_t *)&v185, 0x2Cu);
        if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v178.__r_.__value_.__l.__data_);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      v142 = __cxa_allocate_exception(0x40uLL);
      if (*(char *)(a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      else
        v171 = *(std::string *)(a1 + 24);
      v155 = &v171;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v155 = (std::string *)v171.__r_.__value_.__r.__words[0];
      caulk::make_string((caulk *)"Node is missing terminals: %s", (uint64_t)&v174, v155);
      std::logic_error::logic_error(&v172, &v174);
      v172.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v178, &v172);
      v179 = 0;
      v180 = 0;
      v181 = 0;
      v182 = -1;
      v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
      *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const st"
                            "d::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory> &)";
      *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
      *(_DWORD *)&v186[24] = 359;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v169);
      *(std::logic_error *)&v176.__r_.__value_.__l.__data_ = v169;
      v175 = off_1E69A20A0;
      v176.__r_.__value_.__r.__words[2] = v170;
      v169.__vftable = 0;
      v169.__imp_.__imp_ = 0;
      v170 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v142, (uint64_t)&v185);
    }
    AMCP::Log::Scope_Registry::get(v38);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
    v135 = *(NSObject **)v185.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      v136 = pthread_self();
      v137 = pthread_mach_thread_np(v136);
      if (*(char *)(a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      else
        v178 = *(std::string *)(a1 + 24);
      v143 = &v178;
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v143 = (std::string *)v178.__r_.__value_.__r.__words[0];
      v144 = *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 32);
      LODWORD(v185.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v185.__r_.__value_.__r.__words[0]) = v137;
      LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
      WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v185.__r_.__value_.__r.__words[2]) = 360;
      *(_WORD *)v186 = 2080;
      *(_QWORD *)&v186[2] = "not (terminal_sample_rates.size() == 1)";
      *(_WORD *)&v186[10] = 2080;
      *(_QWORD *)&v186[12] = v143;
      *(_WORD *)&v186[20] = 2048;
      *(_QWORD *)&v186[22] = v144;
      _os_log_error_impl(&dword_1B57BA000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s All terminals for node %s should have the same sample rate. (%0.0f)", (uint8_t *)&v185, 0x36u);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    v145 = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v171 = *(std::string *)(a1 + 24);
    v156 = &v171;
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v156 = (std::string *)v171.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"All terminals for node %s should have the same sample rate. (%0.0f)", (uint64_t)&v174, v156, *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 32));
    std::logic_error::logic_error(&v172, &v174);
    v172.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v178, &v172);
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = -1;
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
    *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const std:"
                          ":function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory> &)";
    *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v186[24] = 360;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v169);
    *(std::logic_error *)&v176.__r_.__value_.__l.__data_ = v169;
    v175 = off_1E69A20A0;
    v176.__r_.__value_.__r.__words[2] = v170;
    v169.__vftable = 0;
    v169.__imp_.__imp_ = 0;
    v170 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v145, (uint64_t)&v185);
  }
  v43 = *(double *)(v177.__r_.__value_.__r.__words[0] + 32);
  if (v43 == (*(double (**)(_QWORD))(*(_QWORD *)v184 + 152))(v184))
    goto LABEL_230;
  if (*(_DWORD *)(a1 + 136) == 2)
  {
    AMCP::Log::Scope_Registry::get(v44);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
    v138 = *(NSObject **)v185.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v185);
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
    {
      v139 = pthread_self();
      v140 = pthread_mach_thread_np(v139);
      if (*(char *)(a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      else
        v178 = *(std::string *)(a1 + 24);
      v152 = &v178;
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v152 = (std::string *)v178.__r_.__value_.__r.__words[0];
      v153 = *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 32);
      LODWORD(v185.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v185.__r_.__value_.__r.__words[0]) = v140;
      LOWORD(v185.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v185.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
      WORD1(v185.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v185.__r_.__value_.__r.__words[2]) = 365;
      *(_WORD *)v186 = 2080;
      *(_QWORD *)&v186[2] = "not (can_use_meta_timebase())";
      *(_WORD *)&v186[10] = 2080;
      *(_QWORD *)&v186[12] = v152;
      *(_WORD *)&v186[20] = 2048;
      *(_QWORD *)&v186[22] = v153;
      _os_log_error_impl(&dword_1B57BA000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Terminals must match clock sample rate if a node provides its own clock: %s (%0.0f)", (uint8_t *)&v185, 0x36u);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    v154 = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v171 = *(std::string *)(a1 + 24);
    v164 = &v171;
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v164 = (std::string *)v171.__r_.__value_.__r.__words[0];
    caulk::make_string((caulk *)"Terminals must match clock sample rate if a node provides its own clock: %s (%0.0f)", (uint64_t)&v174, v164, *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 32));
    std::logic_error::logic_error(&v172, &v174);
    v172.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v178, &v172);
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = -1;
    v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v178.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v185, (uint64_t)&v178);
    *(_QWORD *)&v186[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const std:"
                          ":function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory> &)";
    *(_QWORD *)&v186[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v186[24] = 365;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v169);
    *(std::logic_error *)&v176.__r_.__value_.__l.__data_ = v169;
    v175 = off_1E69A20A0;
    v176.__r_.__value_.__r.__words[2] = v170;
    v169.__vftable = 0;
    v169.__imp_.__imp_ = 0;
    v170 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v185, (uint64_t)&v175);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v154, (uint64_t)&v185);
  }
  v45 = *a5;
  v46 = v184;
  v168 = v184;
  if (*((_QWORD *)&v184 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  if ((*(double (**)(_QWORD))(*(_QWORD *)v46 + 152))(v46) != v43)
  {
    v50 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v46 + 16))(v46);
    *(double *)&v178.__r_.__value_.__l.__data_ = v43;
    if (*(char *)(v50 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v178.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v50, *(_QWORD *)(v50 + 8));
    }
    else
    {
      v51 = *(_OWORD *)v50;
      v179 = *(_QWORD *)(v50 + 16);
      *(_OWORD *)&v178.__r_.__value_.__r.__words[1] = v51;
    }
    v165 = v36;
    v52 = std::hash<std::pair<double,std::string>>::operator()((double *)&v178);
    v53 = *(int8x8_t *)(v45 + 8);
    if (v53)
    {
      v54 = v52;
      v55 = (uint8x8_t)vcnt_s8(v53);
      v55.i16[0] = vaddlv_u8(v55);
      v56 = v55.u32[0];
      if (v55.u32[0] > 1uLL)
      {
        v57 = v52;
        if (v52 >= *(_QWORD *)&v53)
          v57 = v52 % *(_QWORD *)&v53;
      }
      else
      {
        v57 = (*(_QWORD *)&v53 - 1) & v52;
      }
      v58 = *(uint64_t ***)(*(_QWORD *)v45 + 8 * v57);
      if (v58)
      {
        for (i = *v58; i; i = (uint64_t *)*i)
        {
          v60 = i[1];
          if (v60 == v54)
          {
            if ((std::equal_to<std::pair<double,std::string>>::operator()[abi:ne180100]((uint64_t)(i + 2), (uint64_t)&v178) & 1) != 0)
            {
              v49 = *((_OWORD *)i + 3);
              v119 = i[7];
              if (v119)
              {
                v120 = (unint64_t *)(v119 + 8);
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
              }
              v36 = v165;
              goto LABEL_218;
            }
          }
          else
          {
            if (v56 > 1)
            {
              if (v60 >= *(_QWORD *)&v53)
                v60 %= *(_QWORD *)&v53;
            }
            else
            {
              v60 &= *(_QWORD *)&v53 - 1;
            }
            if (v60 != v57)
              break;
          }
        }
      }
    }
    v61 = operator new();
    *(_QWORD *)v61 = &off_1E696B6A0;
    v62 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v46 + 16))(v46);
    v63 = (char *)v62;
    if (*(char *)(v62 + 23) >= 0)
      v64 = *(unsigned __int8 *)(v62 + 23);
    else
      v64 = *(_QWORD *)(v62 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v185, v64 + 3);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = (std::string::size_type)&v185;
    else
      v65 = v185.__r_.__value_.__r.__words[0];
    if (v64)
    {
      if (v63[23] >= 0)
        v66 = v63;
      else
        v66 = *(char **)v63;
      memmove((void *)v65, v66, v64);
    }
    *(_DWORD *)(v65 + v64) = 2108704;
    std::to_string((std::string *)&v175, (int)v43);
    if (v176.__r_.__value_.__s.__data_[15] >= 0)
      v67 = (const std::string::value_type *)&v175;
    else
      v67 = (const std::string::value_type *)v175;
    if (v176.__r_.__value_.__s.__data_[15] >= 0)
      v68 = v176.__r_.__value_.__s.__data_[15];
    else
      v68 = v176.__r_.__value_.__r.__words[0];
    v69 = std::string::append(&v185, v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    *(_QWORD *)(v61 + 24) = *((_QWORD *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)(v61 + 8) = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (v176.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v175);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v185.__r_.__value_.__l.__data_);
    *(double *)(v61 + 32) = v43;
    *(_OWORD *)(v61 + 40) = v46;
    if (*((_QWORD *)&v46 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v174.__r_.__value_.__r.__words[0] = v61;
    v185.__r_.__value_.__r.__words[0] = v61;
    v73 = (std::__shared_weak_count *)operator new();
    v73->__shared_owners_ = 0;
    v74 = (unint64_t *)&v73->__shared_owners_;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696B7C8;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
    v174.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
    v185.__r_.__value_.__r.__words[0] = v178.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v179) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v185.__r_.__value_.__r.__words[1], (const std::string::value_type *)v178.__r_.__value_.__l.__size_, v178.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v185.__r_.__value_.__r.__words[1] = *(_OWORD *)&v178.__r_.__value_.__r.__words[1];
      *(_QWORD *)v186 = v179;
    }
    *(_QWORD *)&v186[8] = v61;
    *(_QWORD *)&v186[16] = v73;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    v76 = std::hash<std::pair<double,std::string>>::operator()((double *)&v185);
    v77 = v76;
    v78 = *(_QWORD *)(v45 + 8);
    if (v78)
    {
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
      v79.i16[0] = vaddlv_u8(v79);
      v80 = v79.u32[0];
      if (v79.u32[0] > 1uLL)
      {
        v65 = v76;
        if (v76 >= v78)
          v65 = v76 % v78;
      }
      else
      {
        v65 = (v78 - 1) & v76;
      }
      v81 = *(_QWORD **)(*(_QWORD *)v45 + 8 * v65);
      if (v81)
      {
        v82 = (_QWORD *)*v81;
        if (*v81)
        {
          do
          {
            v83 = v82[1];
            if (v83 == v77)
            {
              if ((std::equal_to<std::pair<double,std::string>>::operator()[abi:ne180100]((uint64_t)(v82 + 2), (uint64_t)&v185) & 1) != 0)
              {
                v36 = v165;
                goto LABEL_195;
              }
            }
            else
            {
              if (v80 > 1)
              {
                if (v83 >= v78)
                  v83 %= v78;
              }
              else
              {
                v83 &= v78 - 1;
              }
              if (v83 != v65)
                break;
            }
            v82 = (_QWORD *)*v82;
          }
          while (v82);
        }
      }
    }
    v84 = operator new(0x40uLL);
    v85 = (_QWORD *)(v45 + 16);
    v175 = (uint64_t (**)())v84;
    v176.__r_.__value_.__r.__words[0] = v45 + 16;
    v176.__r_.__value_.__s.__data_[8] = 0;
    *v84 = 0;
    v84[1] = v77;
    v84[2] = v185.__r_.__value_.__r.__words[0];
    v86 = (std::string *)(v84 + 3);
    if ((v186[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v86, (const std::string::value_type *)v185.__r_.__value_.__l.__size_, v185.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)&v185.__r_.__value_.__r.__words[1];
      v84[5] = *(_QWORD *)v186;
    }
    *((_OWORD *)v84 + 3) = *(_OWORD *)&v186[8];
    *(_OWORD *)&v186[8] = 0uLL;
    v176.__r_.__value_.__s.__data_[8] = 1;
    v87 = (float)(unint64_t)(*(_QWORD *)(v45 + 24) + 1);
    v88 = *(float *)(v45 + 32);
    if (v78 && (float)(v88 * (float)v78) >= v87)
    {
LABEL_185:
      v104 = *(uint64_t (****)())(*(_QWORD *)v45 + 8 * v65);
      v105 = v175;
      if (v104)
      {
        *v175 = (uint64_t (*)())*v104;
        v36 = v165;
      }
      else
      {
        *v175 = *(uint64_t (**)())(v45 + 16);
        *(_QWORD *)(v45 + 16) = v105;
        *(_QWORD *)(*(_QWORD *)v45 + 8 * v65) = v85;
        v36 = v165;
        if (!*v105)
          goto LABEL_194;
        v106 = *((_QWORD *)*v105 + 1);
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v106 >= v78)
            v106 %= v78;
        }
        else
        {
          v106 &= v78 - 1;
        }
        v104 = (uint64_t (***)())(*(_QWORD *)v45 + 8 * v106);
      }
      *v104 = v105;
LABEL_194:
      v175 = 0;
      ++*(_QWORD *)(v45 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v175);
      v73 = *(std::__shared_weak_count **)&v186[16];
      if (*(_QWORD *)&v186[16])
      {
LABEL_195:
        v107 = (unint64_t *)&v73->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if ((v186[7] & 0x80000000) != 0)
        operator delete((void *)v185.__r_.__value_.__l.__size_);
      v49 = *(_OWORD *)&v174.__r_.__value_.__l.__data_;
      v109 = (std::__shared_weak_count *)v174.__r_.__value_.__l.__size_;
      if (v174.__r_.__value_.__l.__size_)
      {
        v110 = (unint64_t *)(v174.__r_.__value_.__l.__size_ + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
        do
          v112 = __ldaxr(v110);
        while (__stlxr(v112 - 1, v110));
        if (!v112)
        {
          v166 = v49;
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
          v49 = v166;
        }
      }
LABEL_218:
      if (SHIBYTE(v179) < 0)
      {
        v167 = v49;
        operator delete((void *)v178.__r_.__value_.__l.__size_);
        v49 = v167;
      }
      goto LABEL_220;
    }
    v89 = 1;
    if (v78 >= 3)
      v89 = (v78 & (v78 - 1)) != 0;
    v90 = v89 | (2 * v78);
    v91 = vcvtps_u32_f32(v87 / v88);
    if (v90 <= v91)
      prime = (int8x8_t)v91;
    else
      prime = (int8x8_t)v90;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v78 = *(_QWORD *)(v45 + 8);
    if (*(_QWORD *)&prime > v78)
      goto LABEL_151;
    if (*(_QWORD *)&prime < v78)
    {
      v99 = vcvtps_u32_f32((float)*(unint64_t *)(v45 + 24) / *(float *)(v45 + 32));
      if (v78 < 3 || (v100 = (uint8x8_t)vcnt_s8((int8x8_t)v78), v100.i16[0] = vaddlv_u8(v100), v100.u32[0] > 1uLL))
      {
        v99 = std::__next_prime(v99);
      }
      else
      {
        v101 = 1 << -(char)__clz(v99 - 1);
        if (v99 >= 2)
          v99 = v101;
      }
      if (*(_QWORD *)&prime <= v99)
        prime = (int8x8_t)v99;
      if (*(_QWORD *)&prime >= v78)
      {
        v78 = *(_QWORD *)(v45 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_151:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v93 = operator new(8 * *(_QWORD *)&prime);
          v94 = *(void **)v45;
          *(_QWORD *)v45 = v93;
          if (v94)
            operator delete(v94);
          v95 = 0;
          *(int8x8_t *)(v45 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v45 + 8 * v95++) = 0;
          while (*(_QWORD *)&prime != v95);
          v96 = (_QWORD *)*v85;
          if (*v85)
          {
            v97 = v96[1];
            v98 = (uint8x8_t)vcnt_s8(prime);
            v98.i16[0] = vaddlv_u8(v98);
            if (v98.u32[0] > 1uLL)
            {
              if (v97 >= *(_QWORD *)&prime)
                v97 %= *(_QWORD *)&prime;
            }
            else
            {
              v97 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v45 + 8 * v97) = v85;
            v102 = (_QWORD *)*v96;
            if (*v96)
            {
              do
              {
                v103 = v102[1];
                if (v98.u32[0] > 1uLL)
                {
                  if (v103 >= *(_QWORD *)&prime)
                    v103 %= *(_QWORD *)&prime;
                }
                else
                {
                  v103 &= *(_QWORD *)&prime - 1;
                }
                if (v103 != v97)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v45 + 8 * v103))
                  {
                    *(_QWORD *)(*(_QWORD *)v45 + 8 * v103) = v96;
                    goto LABEL_176;
                  }
                  *v96 = *v102;
                  *v102 = **(_QWORD **)(*(_QWORD *)v45 + 8 * v103);
                  **(_QWORD **)(*(_QWORD *)v45 + 8 * v103) = v102;
                  v102 = v96;
                }
                v103 = v97;
LABEL_176:
                v96 = v102;
                v102 = (_QWORD *)*v102;
                v97 = v103;
              }
              while (v102);
            }
          }
          v78 = (unint64_t)prime;
          goto LABEL_180;
        }
        v131 = *(void **)v45;
        *(_QWORD *)v45 = 0;
        if (v131)
          operator delete(v131);
        v78 = 0;
        *(_QWORD *)(v45 + 8) = 0;
      }
    }
LABEL_180:
    if ((v78 & (v78 - 1)) != 0)
    {
      if (v77 >= v78)
        v65 = v77 % v78;
      else
        v65 = v77;
    }
    else
    {
      v65 = (v78 - 1) & v77;
    }
    goto LABEL_185;
  }
  v49 = v168;
  v168 = 0uLL;
LABEL_220:
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  v184 = v49;
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  if (*((_QWORD *)&v168 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v168 + 1) + 16))(*((_QWORD *)&v168 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v168 + 1));
    }
  }
LABEL_230:
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 144), v184, *((uint64_t *)&v184 + 1));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v177.__r_.__value_.__l.__size_);
LABEL_231:
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  return v36;
}

void sub_1B5A7D760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,_QWORD *a47,int a48,__int16 a49,char a50,char a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a47);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v58 - 208);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Node::get_get_clock_proc(AMCP::Graph::Node *this, uint64_t a2)
{
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "GraphNode.cpp";
      v24 = 1024;
      v25 = 694;
      v26 = 2080;
      *(_QWORD *)v27 = "not (m_node_proc)";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "Get_Node_Clock_Handler AMCP::Graph::Node::get_get_clock_proc() const";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    v29 = 694;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)this, a2 + 64);
}

void sub_1B5A7DF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982C08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982C08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E6982C08;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E6982C08;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

double *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  std::string *p_p;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  _BOOL4 v20;
  unsigned __int8 *v21;
  double *result;
  double v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  double v28;
  double *v29;
  uint64_t *v30;
  uint64_t *v31;
  std::string __p;

  v6 = (AMCP::Log::Scope_Registry *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v5 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
  else
    __p = *(std::string *)(v5 + 24);
  v7 = a3[23];
  if ((v7 & 0x80u) == 0)
    v8 = a3[23];
  else
    v8 = *((_QWORD *)a3 + 1);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v8 != size)
  {
    v20 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v7 & 0x80) != 0)
  {
    v20 = memcmp(*(const void **)a3, p_p, *((_QWORD *)a3 + 1)) == 0;
    goto LABEL_25;
  }
  if (a3[23])
  {
    v12 = v7 - 1;
    v13 = a3;
    do
    {
      v15 = *v13++;
      v14 = v15;
      v17 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      v16 = v17;
      v19 = v12-- != 0;
      v20 = v14 == v16;
    }
    while (v14 == v16 && v19);
LABEL_25:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  v20 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  if (v20)
    v21 = a3;
  else
    v21 = a3 + 40;
  result = (double *)get_terminal(v6, v21);
  v23 = *result;
  v24 = *(uint64_t ***)(a1 + 8);
  v26 = v24 + 1;
  v25 = v24[1];
  if (v25)
  {
    while (1)
    {
      while (1)
      {
        v27 = (uint64_t **)v25;
        v28 = *((double *)v25 + 4);
        if (v23 >= v28)
          break;
        v25 = (uint64_t *)*v25;
        v26 = v27;
        if (!*v27)
          goto LABEL_38;
      }
      if (v28 >= v23)
        break;
      v25 = (uint64_t *)v25[1];
      if (!v25)
      {
        v26 = v27 + 1;
        goto LABEL_38;
      }
    }
  }
  else
  {
    v27 = v24 + 1;
LABEL_38:
    v29 = (double *)operator new(0x28uLL);
    v29[4] = v23;
    *v29 = 0.0;
    v29[1] = 0.0;
    *((_QWORD *)v29 + 2) = v27;
    *v26 = (uint64_t *)v29;
    v30 = (uint64_t *)**v24;
    if (v30)
    {
      *v24 = v30;
      v31 = *v26;
    }
    else
    {
      v31 = (uint64_t *)v29;
    }
    result = (double *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v24[1], v31);
    v24[2] = (uint64_t *)((char *)v24[2] + 1);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node30get_sample_rates_for_terminalsERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

void std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6982B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6982B88;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(uint64_t a1, int *a2, std::string *__str)
{
  int v5;
  int data;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::logic_error *exception;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::logic_error v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::string v35;
  std::logic_error v36;
  std::logic_error v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  _BYTE v44[32];
  int v45;
  _BYTE v46[32];
  int v47;
  uint8_t buf[8];
  _BYTE v49[10];
  __int16 v50;
  int v51;
  _BYTE v52[24];
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)(a1 + 24))
    return;
  v5 = *a2;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  if (v5 == 1)
  {
    std::string::operator=((std::string *)v46, __str);
    *(_QWORD *)&v46[24] = __str[1].__r_.__value_.__l.__data_;
    v47 = __str[1].__r_.__value_.__r.__words[1];
    std::string::operator=((std::string *)v44, (std::string *)((char *)__str + 40));
    *(_QWORD *)&v44[24] = *((_QWORD *)&__str[2].__r_.__value_.__l + 2);
    data = (int)__str[3].__r_.__value_.__l.__data_;
  }
  else
  {
    std::string::operator=((std::string *)v46, (std::string *)((char *)__str + 40));
    *(_QWORD *)&v46[24] = *((_QWORD *)&__str[2].__r_.__value_.__l + 2);
    v47 = (int)__str[3].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)v44, __str);
    *(_QWORD *)&v44[24] = __str[1].__r_.__value_.__l.__data_;
    data = __str[1].__r_.__value_.__r.__words[1];
  }
  v45 = data;
  v7 = *(_QWORD **)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v44))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v49;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v49)
    {
      v21 = (unint64_t *)(*(_QWORD *)v49 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v49 = 2080;
      *(_QWORD *)&v49[2] = "GraphNode.cpp";
      v50 = 1024;
      v51 = 314;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "not (nodes.find(this_term.m_node) != nodes.end())";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to calculate clock for node outside of the current subgraph.", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to calculate clock for node outside of the current subgraph.", (uint64_t)&v35);
    std::logic_error::logic_error(&v36, &v35);
    v26 = MEMORY[0x1E0DE5018];
    v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v38 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(_QWORD *)&v52[8] = "auto AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const std::"
                         "function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory>"
                         " &)::(anonymous class)::operator()(Direction, const Graph_Wire::Connection &) const";
    *(_QWORD *)&v52[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    v53 = 314;
    std::vector<void *>::vector(&v30);
    v27 = backtrace((void **)v30, (*((_QWORD *)&v30 + 1) - (_QWORD)v30) >> 3);
    std::vector<void *>::resize((char **)&v30, v27);
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    v32 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v32);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v26 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v28 = *(_QWORD *)v52;
    exception[1].__imp_.__imp_ = *(const char **)v52;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    v29 = *(std::logic_error *)&v52[8];
    LODWORD(exception[3].__vftable) = v53;
    exception[2] = v29;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v46))
  {
    v8 = *(_QWORD *)(get_terminal_for_key((uint64_t)v46, v7) + 104);
    v9 = (v8 & 0xFF00000000) != 0 && v5 == 1;
    v10 = v9 && (_DWORD)v8 == 1;
    if (v10 || (v8 & 0xFF00000000) != 0 && !(v5 | v8))
    {
      v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(_QWORD **)(a1 + 8), v46);
      if (!v11)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v12 = *((_QWORD *)v11 + 5);
      v13 = *(_QWORD *)(v12 + 144);
      v14 = *(std::__shared_weak_count **)(v12 + 152);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      if (v13)
      {
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](*(_QWORD **)(a1 + 16), v13, (uint64_t)v14);
        if (!v14)
          goto LABEL_28;
LABEL_24:
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_28;
      }
      **(_BYTE **)(a1 + 24) = 1;
      if (v14)
        goto LABEL_24;
    }
  }
LABEL_28:
  if ((v44[23] & 0x80000000) != 0)
    operator delete(*(void **)v44);
  if ((v46[23] & 0x80000000) != 0)
    operator delete(*(void **)v46);
}

void sub_1B5A7E898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node27calculate_clocks_from_wiresERKNS0_8Node_MapERNS0_10Wire_IndexERKNSt3__18functionIFNS7_10shared_ptrINS0_8TimebaseEEERKNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEERKNS9_INS0_21Meta_Timebase_FactoryEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

void AMCP::Graph::Node::calculate_all_drift_correction(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)(a1 + 24), a1 + 24);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  *(_QWORD *)&v20 = a2;
  *((_QWORD *)&v20 + 1) = a3;
  v15 = operator new(0x38uLL);
  *v15 = &off_1E6982C88;
  v15[1] = a5;
  v15[2] = v10;
  v15[3] = v11;
  *((_OWORD *)v15 + 2) = v20;
  v15[6] = a4;
  v22 = v15;
  AMCP::Graph::Node::edit_each_wire(a1, a3, (uint64_t)v21);
  v16 = v22;
  if (v22 == v21)
  {
    v17 = 4;
    v16 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_10;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_10:
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5A7EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E6982C88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&off_1E6982C88;
  a2->n128_u64[1] = v2;
  v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  __int128 v30;
  int v31;
  std::string __str;
  uint64_t v33;
  int v34;
  std::string v35;
  uint64_t v36;
  int v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  void *v43;
  void *v44;

  if (!*(_BYTE *)(a3 + 408))
    return;
  v5 = *a2;
  AMCP::Graph::Graph_Wire::Connection::Connection(&__str, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
  v31 = 0;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  if (v5 == 1)
  {
    std::string::operator=((std::string *)__p, &__str);
    *((_QWORD *)&v30 + 1) = v33;
    v6 = v34;
  }
  else
  {
    std::string::operator=((std::string *)__p, &v35);
    *((_QWORD *)&v30 + 1) = v36;
    v6 = v37;
  }
  v31 = v6;
  v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(_QWORD **)(a1 + 32), (unsigned __int8 *)__p);
  if (v7)
  {
    v8 = v7;
    if (v5)
    {
LABEL_7:
      v9 = *(_QWORD **)(a1 + 48);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v9, (unsigned __int8 *)__p))AMCP::Graph::Node::calculate_all_drift_correction(*((_QWORD *)v8 + 5), *(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), (uint64_t)v9, *(_QWORD *)(a1 + 8));
      goto LABEL_9;
    }
    v13 = *((_QWORD *)v7 + 5);
    v15 = *(_QWORD *)(v13 + 144);
    v14 = *(std::__shared_weak_count **)(v13 + 152);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (*(_DWORD *)(a3 + 140))
      goto LABEL_56;
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      v19 = v15 == 0;
    else
      v19 = 1;
    if (v19)
    {
      if (!(v18 | v15))
        goto LABEL_56;
    }
    else
    {
      v20 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v22 = v20[23];
      if ((v22 & 0x80u) == 0)
        v23 = v20[23];
      else
        v23 = *((_QWORD *)v20 + 1);
      v24 = *(unsigned __int8 *)(v21 + 23);
      v25 = (char)v24;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v21 + 8);
      if (v23 == v24)
      {
        if (v25 >= 0)
          v26 = (unsigned __int8 *)v21;
        else
          v26 = *(unsigned __int8 **)v21;
        if ((v22 & 0x80) == 0)
        {
          if (v20[23])
          {
            while (*v20 == *v26)
            {
              ++v20;
              ++v26;
              if (!--v22)
                goto LABEL_56;
            }
            goto LABEL_53;
          }
LABEL_56:
          if (v14)
          {
            v27 = (unint64_t *)&v14->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          goto LABEL_7;
        }
        if (!memcmp(*(const void **)v20, v26, *((_QWORD *)v20 + 1)))
          goto LABEL_56;
      }
    }
LABEL_53:
    if (*(_BYTE *)(a3 + 408))
      *(_DWORD *)(a3 + 332) = 1;
    ++**(_QWORD **)(a1 + 8);
    goto LABEL_56;
  }
LABEL_9:
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v10 = v42;
  if (v42)
  {
    v11 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0)
    operator delete(v38);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1B5A7F028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;

  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (a14 < 0)
    operator delete(__p);
  if (a50)
    operator delete(a50);
  if (a47)
  {
    v55 = (unint64_t *)&a47->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))a47->__on_zero_shared)(a47);
      std::__shared_weak_count::__release_weak(a47);
    }
  }
  if (a39)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  if (a30 < 0)
    operator delete(a25);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node30calculate_all_drift_correctionERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEERmE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

void AMCP::Graph::Node::set_all_wire_source_clocks(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)(a1 + 24), a1 + 24);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(std::__shared_weak_count **)(a1 + 152);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &off_1E6982D18;
  *((_QWORD *)v13 + 1) = v8;
  *((_QWORD *)v13 + 2) = v9;
  *(_OWORD *)(v13 + 24) = v18;
  *((_QWORD *)v13 + 5) = a4;
  v20 = v13;
  AMCP::Graph::Node::edit_each_wire(a1, a3, (uint64_t)v19);
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_10;
    v15 = 5;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_10:
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B5A7F2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982D18;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982D18;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6982D18;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6982D18;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  __int128 v21;
  int v22;
  std::string __str;
  uint64_t v24;
  int v25;
  std::string v26;
  uint64_t v27;
  int v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  void *v34;
  void *v35;

  if (*(_BYTE *)(a3 + 408))
  {
    v5 = *a2;
    AMCP::Graph::Graph_Wire::Connection::Connection(&__str, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
    v22 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    if (v5 == 1)
    {
      std::string::operator=((std::string *)__p, &__str);
      *((_QWORD *)&v21 + 1) = v24;
      v6 = v25;
    }
    else
    {
      std::string::operator=((std::string *)__p, &v26);
      *((_QWORD *)&v21 + 1) = v27;
      v6 = v28;
    }
    v22 = v6;
    v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(_QWORD **)(a1 + 24), (unsigned __int8 *)__p);
    if (v7)
    {
      v8 = v7;
      if (!v5)
      {
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a3 + 416), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
        v13 = *((_QWORD *)v8 + 5);
        v14 = *(_QWORD *)(v13 + 144);
        v15 = *(std::__shared_weak_count **)(v13 + 152);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a3 + 432), v14, (uint64_t)v15);
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        else
        {
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a3 + 432), v14, 0);
        }
      }
      v9 = *(_QWORD **)(a1 + 40);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v9, (unsigned __int8 *)__p))AMCP::Graph::Node::set_all_wire_source_clocks(*((_QWORD *)v8 + 5), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), (uint64_t)v9);
    }
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    v10 = v33;
    if (v33)
    {
      v11 = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v30 < 0)
      operator delete(v29);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B5A7F67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  unint64_t *p_shared_owners;
  unint64_t v53;

  if (a14 < 0)
    operator delete(__p);
  if (a50)
    operator delete(a50);
  if (a47)
  {
    p_shared_owners = (unint64_t *)&a47->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a47->__on_zero_shared)(a47);
      std::__shared_weak_count::__release_weak(a47);
    }
  }
  if (a39)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  if (a30 < 0)
    operator delete(a25);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node26set_all_wire_source_clocksERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

unsigned __int8 *AMCP::Graph::Node::calculate_latency(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *result;
  uint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  int v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int128 v42;
  const char *v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 192))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v21;
      v38 = 2080;
      v39 = "GraphNode.cpp";
      v40 = 1024;
      v41 = 493;
      LOWORD(v42) = 2080;
      *(_QWORD *)((char *)&v42 + 2) = "not (m_node_proc)";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v31 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *((_QWORD *)&v42 + 1) = "void AMCP::Graph::Node::calculate_latency(const Node_Map &, Wire_Index &, std::unordered_set"
                            "<Graph_Node_UID> &)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    v44 = 493;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    v26 = v23;
    v27 = v24;
    v23 = 0uLL;
    v24 = 0;
    v25 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (unsigned __int8 *)(a1 + 24);
  result = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a4, (unsigned __int8 *)(a1 + 24));
  if (!result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, v8, (uint64_t)v8);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 408);
    if (v10)
    {
      v11 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      v12 = (int)v11;
      if ((v11 & 0x80000000) != 0)
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v13 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v15;
          v38 = 2080;
          v39 = "GraphNode.cpp";
          v40 = 1024;
          v41 = 501;
          LOWORD(v42) = 2080;
          *(_QWORD *)((char *)&v42 + 2) = "not (this_nodes_latency >= 0)";
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Tail time is not allowed to be less than zero", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
        v16 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Tail time is not allowed to be less than zero", (uint64_t)&v28);
        std::logic_error::logic_error(&v29, &v28);
        v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v30, &v29);
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = -1;
        v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v31 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
        *((_QWORD *)&v42 + 1) = "void AMCP::Graph::Node::calculate_latency(const Node_Map &, Wire_Index &, std::unordered"
                                "_set<Graph_Node_UID> &)";
        v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
        v44 = 501;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
        v26 = v23;
        v27 = v24;
        v23 = 0uLL;
        v24 = 0;
        v25 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v16, (uint64_t)buf);
      }
    }
    else
    {
      v12 = 0;
    }
    LODWORD(v30.__vftable) = 0;
    v17 = operator new(0x28uLL);
    *v17 = &off_1E6982D98;
    v17[1] = &v30;
    v17[2] = a2;
    v17[3] = a3;
    v17[4] = a4;
    *(_QWORD *)&v42 = v17;
    AMCP::Graph::Node::for_each_connection(a1, a3, (uint64_t)buf);
    result = (unsigned __int8 *)v42;
    if ((uint8_t *)v42 == buf)
    {
      v18 = 4;
      result = buf;
    }
    else
    {
      if (!(_QWORD)v42)
      {
LABEL_14:
        *(_DWORD *)(a1 + 164) = LODWORD(v30.__vftable) + v12;
        return result;
      }
      v18 = 5;
    }
    result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v18))();
    goto LABEL_14;
  }
  return result;
}

void sub_1B5A7FBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 120);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 144);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6982D98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6982D98;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(unsigned __int8 *result, _DWORD *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  int v6;
  _DWORD *v7;

  if (!*a2)
  {
    v3 = result;
    v4 = (_QWORD *)*((_QWORD *)result + 2);
    result = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v4, (unsigned __int8 *)(a3 + 40));
    if (result)
    {
      v5 = result;
      result = AMCP::Graph::Node::calculate_latency(*((_QWORD *)result + 5), (uint64_t)v4, *((_QWORD **)v3 + 3), *((_QWORD **)v3 + 4));
      v6 = *(_DWORD *)(*((_QWORD *)v5 + 5) + 164);
      v7 = (_DWORD *)*((_QWORD *)v3 + 1);
      if (v6 > *v7)
        *v7 = v6;
    }
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node17calculate_latencyERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6982E18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6982E18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v3;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  std::logic_error *exception;
  uint64_t v21;
  int v22;
  uint64_t v23;
  std::logic_error v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  std::string v30;
  std::logic_error v31;
  std::logic_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  std::string __p;
  std::string v40;
  std::string v41;
  _BYTE v42[24];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v3 = 1;
  else
    v3 = *(_BYTE *)(a3 + 408) == 0;
  if (!v3)
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v41 = *(std::string *)a3;
    v40 = v41;
    if (*(char *)(a3 + 63) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
    else
      v41 = *(std::string *)(a3 + 40);
    __p = v41;
    v6 = *(_QWORD **)(a1 + 16);
    v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&__p);
    if (v7)
    {
      v8 = v7;
      v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&v40);
      if (v9)
      {
        v10 = **(_DWORD **)(a1 + 8);
        v11 = *(_DWORD *)(*((_QWORD *)v8 + 5) + 164);
        v12 = *(AMCP::Log::Scope_Registry **)(*(_QWORD *)(*((_QWORD *)v9 + 5) + 192) + 408);
        if (v12)
          v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v12 + 48))(v12);
        v13 = (v10 - (_DWORD)v12 - v11);
        if ((int)v13 < 0)
        {
          AMCP::Log::Scope_Registry::get(v12);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v41, "com.apple.coreaudio", "AMCP");
          size = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
          v15 = *(NSObject **)v41.__r_.__value_.__l.__data_;
          if (v41.__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v18 = pthread_self();
            v19 = pthread_mach_thread_np(v18);
            LODWORD(v41.__r_.__value_.__l.__data_) = 67110146;
            HIDWORD(v41.__r_.__value_.__r.__words[0]) = v19;
            LOWORD(v41.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
            WORD1(v41.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v41.__r_.__value_.__r.__words[2]) = 584;
            *(_WORD *)v42 = 2080;
            *(_QWORD *)&v42[2] = "not (offset >= 0)";
            *(_WORD *)&v42[10] = 1024;
            *(_DWORD *)&v42[12] = v13;
            _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid latency offset %d", (uint8_t *)&v41, 0x28u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
          exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"invalid latency offset %d", (uint64_t)&v30, v13);
          std::logic_error::logic_error(&v31, &v30);
          v21 = MEMORY[0x1E0DE5018];
          v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v32, &v31);
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v37 = -1;
          v32.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v33 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v41, (uint64_t)&v32);
          *(_QWORD *)&v42[8] = "auto AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int32_t, const Node_"
                               "Map &, Wire_Index &)::(anonymous class)::operator()(Direction, Graph_Wire &) const";
          *(_QWORD *)&v42[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
          v43 = 584;
          std::vector<void *>::vector(&v25);
          v22 = backtrace((void **)v25, (*((_QWORD *)&v25 + 1) - (_QWORD)v25) >> 3);
          std::vector<void *>::resize((char **)&v25, v22);
          v28 = v25;
          v29 = v26;
          v25 = 0uLL;
          v26 = 0;
          v27 = off_1E69A20A0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v41, (uint64_t)&v27);
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(exception, (const std::logic_error *)&v41);
          exception->__vftable = (std::logic_error_vtbl *)(v21 + 16);
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v23 = *(_QWORD *)v42;
          exception[1].__imp_.__imp_ = *(const char **)v42;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          v24 = *(std::logic_error *)&v42[8];
          LODWORD(exception[3].__vftable) = v43;
          exception[2] = v24;
          exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        if (*(_BYTE *)(a3 + 408))
          *(_DWORD *)(a3 + 376) = v13;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_1B5A80330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 137) < 0)
    operator delete(*(void **)(v42 - 160));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node44calculate_latency_adjustment_for_connectionsEiRKNS0_8Node_MapERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

void std::vector<AMCP::Graph::Call_Audio_IO_Proc::Proc_Connection_Info>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v4[48 * a2];
    goto LABEL_18;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4) >= v6)
  {
    bzero(a1[1], 48 * ((48 * v6 - 48) / 0x30) + 48);
    v19 = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
LABEL_18:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x555555555555555)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v9;
  if (v10 > 0x555555555555555)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = 3 * v10;
  v12 = (char *)operator new(48 * v10);
  v13 = &v12[48 * v5];
  v14 = &v12[16 * v11];
  v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v13, v15);
  v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      v17 = *((_OWORD *)v3 - 3);
      v18 = *((_OWORD *)v3 - 2);
      *(_OWORD *)(v13 - 20) = *(_OWORD *)(v3 - 20);
      *((_OWORD *)v13 - 3) = v17;
      *((_OWORD *)v13 - 2) = v18;
      v13 -= 48;
      v3 -= 48;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
    operator delete(v3);
}

_QWORD *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982F78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982F78;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6982F78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E6982F78;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  AMCP::Graph::Call_Audio_IO_Proc::operator()(*(_QWORD *)(a1 + 8), *a2, *(unsigned int *)(a1 + 24), a3, a4, a5);
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node21demand_client_io_procERNS0_10Wire_IndexEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6982F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;
  void *v6;
  _QWORD *result;
  uint64_t v8;
  void **v9;

  v2 = 0;
  v3 = a1 + 192;
  do
  {
    v9 = (void **)(v3 + v2);
    std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&v9);
    v2 -= 24;
  }
  while (v2 != -48);
  for (i = 0; i != -48; i -= 24)
  {
    v9 = (void **)(a1 + 144 + i);
    std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  for (j = 0; j != -48; j -= 24)
  {
    v6 = *(void **)(a1 + j + 96);
    if (v6)
    {
      *(_QWORD *)(a1 + j + 104) = v6;
      operator delete(v6);
    }
  }
  result = *(_QWORD **)(a1 + 64);
  if (result == (_QWORD *)(a1 + 40))
  {
    v8 = 4;
    result = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982E98;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6982E98;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_1E6982E98;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  return result;
}

_QWORD *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E6982E98;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[4] = result[4];
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::operator()(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  std::string *v5;
  uint64_t terminal;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  void *v25;
  int v26;
  std::__shared_weak_count *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void *__p;
  void *v33;

  if (*(_BYTE *)(a3 + 408))
  {
    v4 = *a2;
    AMCP::Graph::Graph_Wire::Connection::Connection(&v17, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
    if (v4)
      v5 = (std::string *)&v19;
    else
      v5 = &v17;
    terminal = get_terminal((AMCP::Log::Scope_Registry *)(a1 + 2), (unsigned __int8 *)v5);
    if (v26 || v29 == 1 || v28 == 1 || v31 || (*(_DWORD *)(terminal + 100) == 1 ? (v7 = v30 == 0) : (v7 = 0), !v7))
    {
      v8 = &v21;
      if (!v4)
        v8 = &v18;
      v9 = *(_QWORD *)(a1[1] + 24 * v4) + 48 * *v8;
      *(_DWORD *)(v9 + 40) = 1;
      v10 = *(_OWORD *)terminal;
      v11 = *(_OWORD *)(terminal + 16);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(terminal + 32);
      *(_OWORD *)v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
    }
    v12 = *(_QWORD *)(terminal + 104);
    v13 = a1[4];
    *(_DWORD *)v13 = v12;
    *(_BYTE *)(v13 + 4) = BYTE4(v12);
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    v14 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (v23 < 0)
      operator delete(v22);
    if (v20 < 0)
      operator delete(v19);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B5A80BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  unint64_t *p_shared_owners;
  unint64_t v46;

  if (__p)
    operator delete(__p);
  if (a40)
  {
    p_shared_owners = (unint64_t *)&a40->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  if (a32)
    operator delete(a32);
  if (a31 < 0)
    operator delete(a26);
  if (a23 < 0)
    operator delete(a18);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node21demand_client_io_procERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::target_type()
{
}

uint64_t HALS_PlugInStream::Activate(HALS_PlugInStream *this, HALS_Object *a2)
{
  HALS_Object::Activate(this, a2);
  HALS_PlugInStream::BuildFormatList(this);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 32))((char *)this + 64);
}

void HALS_PlugInStream::~HALS_PlugInStream(HALS_PlugInStream *this)
{
  HALS_PlugInStream::~HALS_PlugInStream(this);
  JUMPOUT(0x1B5E50688);
}

{
  *(_QWORD *)this = off_1E6982FF8;
  *((_QWORD *)this + 8) = &unk_1E69830F8;
  HALB_FormatList::~HALB_FormatList((HALS_PlugInStream *)((char *)this + 104));
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInStream *)((char *)this + 64));
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_PlugInStream::HasProperty(HALS_PlugInStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector != 1668641652)
    {
      v8 = 1819173229;
      goto LABEL_6;
    }
    v16 = *((_DWORD *)this + 24);
    return v16 != 0;
  }
  if (mSelector == 1952542835)
  {
    v16 = *((unsigned __int8 *)this + 52);
    return v16 != 0;
  }
  v8 = 1851878764;
LABEL_6:
  if (mSelector == v8)
  {
    v9 = *((_QWORD *)this + 9);
    v10 = *(_QWORD *)(v9 + 400);
    v11 = *(std::__shared_weak_count **)(v9 + 408);
    v32 = v10;
    v33 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *((unsigned int *)this + 21);
    if (a4)
      v15 = *((unsigned int *)a4 + 58);
    else
      v15 = 0;
    v30 = 0x676C6F626C6E616DLL;
    v31 = 0;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 544))(v10, v14, v15, &v30);
    if (v11)
    {
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        v20 = v11;
LABEL_23:
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else if ((HALS_Stream::HasProperty(this, a2, a3, a4) & 1) != 0)
  {
    return 1;
  }
  else
  {
    if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a3->mSelector))return 0;
    v21 = *((_QWORD *)this + 9);
    v22 = *(_QWORD *)(v21 + 400);
    v23 = *(std::__shared_weak_count **)(v21 + 408);
    v32 = v22;
    v33 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    if (a4)
      v26 = *((unsigned int *)a4 + 58);
    else
      v26 = 0;
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v22
                                                                                                  + 544))(v22, *((unsigned int *)this + 21), v26, a3);
    if (v23)
    {
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        v20 = v23;
        goto LABEL_23;
      }
    }
  }
  return v17;
}

void sub_1B5A80ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInStream::IsPropertySettable(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  mSelector = a3->mSelector;
  if (a3->mSelector == 1952542835)
    return 0;
  if (mSelector != 1935762292)
  {
    if (mSelector != 1668641652)
    {
      if (HALS_Stream::HasProperty(this, a2, a3, a4))
        return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
      if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a3->mSelector))
      {
        v11 = *((_QWORD *)this + 9);
        v12 = *(_QWORD *)(v11 + 400);
        v13 = *(std::__shared_weak_count **)(v11 + 408);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        if (a4)
          v16 = *((unsigned int *)a4 + 58);
        else
          v16 = 0;
        v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v12 + 552))(v12, *((unsigned int *)this + 21), v16, a3);
        if (v13)
        {
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        return v10;
      }
    }
    return 0;
  }
  return 1;
}

void sub_1B5A81034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInStream::GetPropertyDataSize(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector;
  HALB_Mutex *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int PropertyDataSize;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;

  v33 = 0;
  v34 = &v33;
  v35 = 0x2000000000;
  v36 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector != 1936092513)
      {
        if (mSelector != 1952542835)
          goto LABEL_23;
        v15 = 4;
LABEL_17:
        v36 = v15;
        goto LABEL_22;
      }
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 0x40000000;
      v31[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v31[3] = &unk_1E6983150;
      v31[4] = &v33;
      v31[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      v14 = v31;
    }
    else if (mSelector == 1885762657)
    {
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 0x40000000;
      v29[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v29[3] = &unk_1E69831A0;
      v29[4] = &v33;
      v29[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      v14 = v29;
    }
    else
    {
      if (mSelector != 1936092451)
        goto LABEL_23;
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 0x40000000;
      v30[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
      v30[3] = &unk_1E6983178;
      v30[4] = &v33;
      v30[5] = this;
      v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      v14 = v30;
    }
    goto LABEL_21;
  }
  if (mSelector > 1851878763)
  {
    if (mSelector == 1851878764)
      goto LABEL_16;
    if (mSelector != 1885762595)
      goto LABEL_23;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 0x40000000;
    v28[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5;
    v28[3] = &unk_1E69831C8;
    v28[4] = &v33;
    v28[5] = this;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
    v14 = v28;
LABEL_21:
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v14);
    goto LABEL_22;
  }
  if (mSelector == 1668641652)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 0x40000000;
    v32[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
    v32[3] = &unk_1E6983128;
    v32[4] = &v33;
    v32[5] = this;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
    v14 = v32;
    goto LABEL_21;
  }
  if (mSelector == 1819173229)
  {
LABEL_16:
    v15 = 8;
    goto LABEL_17;
  }
LABEL_23:
  if (HALS_Stream::HasProperty(this, a2, a3, a6))
  {
    PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
    *((_DWORD *)v34 + 6) = PropertyDataSize;
  }
  else if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    v19 = *((_QWORD *)this + 9);
    v20 = *(_QWORD *)(v19 + 400);
    v21 = *(std::__shared_weak_count **)(v19 + 408);
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    if (a6)
      v24 = *((unsigned int *)a6 + 58);
    else
      v24 = 0;
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v20 + 560))(v20, *((unsigned int *)this + 21), v24, a3, a4, a5);
    *((_DWORD *)v34 + 6) = v25;
    if (v21)
    {
      v26 = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
LABEL_22:
  v16 = *((unsigned int *)v34 + 6);
  _Block_object_dispose(&v33, 8);
  return v16;
}

void sub_1B5A813F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugInStream::GetPropertyData(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, _DWORD *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  HALS_Object *v19;
  HALS_IODevice *v20;
  double v21;
  signed int mSelector;
  HALB_Mutex *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  HALB_Mutex *v47;
  uint64_t v48;
  uint64_t v49;
  int NeighborStartingChannel;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  HALB_Mutex *v72;
  uint64_t v73;
  int64x2_t v74;
  uint64_t v75;
  HALB_Mutex *v76;
  _DWORD *v77;
  HALB_Mutex *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  HALB_Mutex *v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  HALB_Mutex *v96;
  HALB_Mutex *v97;
  int64x2_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  int v129;
  int v130;
  unint64_t *v131;
  unint64_t v132;
  BOOL v133;
  _DWORD *v134;
  __int128 v135;
  uint64_t v136;
  HALB_Mutex *v137;
  _QWORD *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  int v144;
  int v145;
  BOOL v146;
  _DWORD *v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unint64_t *v161;
  unint64_t v162;
  _DWORD *exception;
  NSObject *v164;
  const char *v165;
  _DWORD *v166;
  HALS_Object *v167;
  HALS_ObjectMap *v169;
  _QWORD v170[9];
  _QWORD v171[7];
  int v172;
  _QWORD v173[7];
  int v174;
  _QWORD v175[9];
  _QWORD v176[7];
  int v177;
  BOOL v178;
  _QWORD v179[7];
  int v180;
  BOOL v181;
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[8];
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _DWORD *v188;
  _QWORD v189[8];
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _DWORD *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  __n128 (*v197)(uint64_t, uint64_t);
  uint64_t (*v198)();
  uint64_t v199;
  int v200;
  _BYTE buf[12];
  __int16 v202;
  int v203;
  _BYTE v204[24];
  uint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  if (a9)
    v16 = *((_BYTE *)a9 + 258) == 0;
  else
    v16 = 1;
  v194 = 0;
  v195 = &v194;
  v196 = 0x5002000000;
  v197 = __Block_byref_object_copy__6682;
  v198 = __Block_byref_object_dispose__6683;
  v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v169 = (HALS_ObjectMap *)v17;
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 182;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v204, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v18 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(_QWORD *)v17 + 696))(v17, a9);
  v167 = v19;
  v21 = *(double *)&v18;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935762291)
  {
    if (mSelector <= 1885762591)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_278;
            *(_DWORD *)v204 = 136315394;
            *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v204[12] = 1024;
            *(_DWORD *)&v204[14] = 241;
            v164 = MEMORY[0x1E0C81028];
            v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
            goto LABEL_277;
          }
          v65 = *((_QWORD *)this + 9);
          v66 = *(_QWORD *)(v65 + 400);
          v67 = *(std::__shared_weak_count **)(v65 + 408);
          *(_QWORD *)v204 = v66;
          *(_QWORD *)&v204[8] = v67;
          if (v67)
          {
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(p_shared_owners);
            while (__stxr(v69 + 1, p_shared_owners));
          }
          v70 = *((unsigned int *)this + 21);
          if (a9)
            v71 = *((unsigned int *)a9 + 58);
          else
            v71 = 0;
          strcpy(buf, "cntlbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(v199) = 0;
          v200 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v66 + 568))(v66, v70, v71, buf, 0, 0, 4, &v200, &v199);
          v122 = v199;
          if (v67)
          {
            v123 = (unint64_t *)&v67->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          if ((_BYTE)v167)
            v122 = (v21
                                / (*(double (**)(HALS_ObjectMap *))(*(_QWORD *)v169 + 264))(v169)
                                * (double)v122);
          *a6 = v122;
          goto LABEL_243;
        }
        v39 = 1851878764;
      }
      else
      {
        if (mSelector == 1668641652)
        {
          v58 = a4 / 0xC;
          if (*((_DWORD *)this + 24) < a4 / 0xC)
            v58 = *((_DWORD *)this + 24);
          if (v58)
          {
            v59 = 0;
            v60 = 0;
            do
            {
              if (v60 < *((unsigned int *)this + 24))
              {
                v61 = (char *)&a6[v59];
                v62 = (uint64_t *)(*((_QWORD *)this + 11) + v59 * 4);
                v63 = *v62;
                *((_DWORD *)v61 + 2) = *((_DWORD *)v62 + 2);
                *(_QWORD *)v61 = v63;
              }
              ++v60;
              v59 += 3;
            }
            while (3 * v58 != v59);
          }
          v64 = 12 * v58;
          goto LABEL_244;
        }
        v39 = 1819173229;
      }
      if (mSelector != v39)
        goto LABEL_124;
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 190;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioObjectPropertyName";
        goto LABEL_277;
      }
      v40 = *((_QWORD *)this + 9);
      v41 = *(_QWORD *)(v40 + 400);
      v42 = *(std::__shared_weak_count **)(v40 + 408);
      *(_QWORD *)v204 = v41;
      *(_QWORD *)&v204[8] = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = *((unsigned int *)this + 21);
      if (a9)
        v46 = *((unsigned int *)a9 + 58);
      else
        v46 = 0;
      strcpy(buf, "manlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v199 = 0;
      v200 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v41 + 568))(v41, v45, v46, buf, 0, 0, 8, &v200, &v199);
      *(_QWORD *)a6 = v199;
      if (v42)
      {
        v100 = (unint64_t *)&v42->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v64 = 8;
LABEL_244:
      *a5 = v64;
      goto LABEL_245;
    }
    if (mSelector <= 1885762622)
    {
      if (mSelector != 1885762592)
      {
        if (mSelector != 1885762595)
          goto LABEL_124;
        *(_QWORD *)v204 = 0;
        *(_QWORD *)&v204[8] = v204;
        *(_QWORD *)&v204[16] = 0x2000000000;
        v205 = 0;
        v171[0] = MEMORY[0x1E0C809B0];
        v171[1] = 0x40000000;
        v171[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_19;
        v171[3] = &unk_1E6983320;
        v172 = a4;
        v171[4] = v204;
        v171[5] = this;
        v171[6] = a6;
        v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v171);
        v48 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
        if ((_BYTE)v167 && v48)
        {
          v49 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
          do
          {
            *(double *)a6 = v21;
            a6 += 10;
            --v49;
          }
          while (v49);
        }
        goto LABEL_97;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 297;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_277;
      }
      v81 = *((_QWORD *)this + 9);
      v82 = *(_QWORD *)(v81 + 400);
      v83 = *(std::__shared_weak_count **)(v81 + 408);
      *(_QWORD *)v204 = v82;
      *(_QWORD *)&v204[8] = v83;
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v86 = *((unsigned int *)this + 21);
      if (a9)
        v87 = *((unsigned int *)a9 + 58);
      else
        v87 = 0;
      strcpy(buf, " tfpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v199) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, uint64_t *, _DWORD *))(*(_QWORD *)v82 + 568))(v82, v86, v87, buf, 0, 0, 40, &v199, a6);
      if (v83)
      {
        v125 = (unint64_t *)&v83->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      goto LABEL_176;
    }
    if (mSelector == 1885762623)
    {
      if (a4 > 0x27)
      {
        *a5 = 40;
        *(_QWORD *)v204 = 0;
        *(_QWORD *)&v204[8] = v204;
        *(_QWORD *)&v204[16] = 0x2000000000;
        LOBYTE(v205) = 0;
        v170[0] = MEMORY[0x1E0C809B0];
        v170[1] = 0x40000000;
        v170[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_21;
        v170[3] = &unk_1E6983348;
        v170[6] = v18;
        v170[7] = v19;
        v170[4] = v204;
        v170[5] = this;
        v170[8] = a6;
        v76 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v76, (uint64_t)v170);
        if (!*(_BYTE *)(*(_QWORD *)&v204[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInStream.cpp";
            v202 = 1024;
            v203 = 436;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
          }
          v77 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v77 = &off_1E69A1B30;
          v77[2] = 560226676;
        }
        goto LABEL_123;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 418;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
LABEL_277:
        _os_log_impl(&dword_1B57BA000, v164, OS_LOG_TYPE_ERROR, v165, v204, 0x12u);
      }
LABEL_278:
      v166 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v166 = &off_1E69A1B30;
      v166[2] = 561211770;
    }
    if (mSelector != 1885762657)
    {
      if (mSelector != 1885762669)
        goto LABEL_124;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 306;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_277;
      }
      *a5 = 40;
      v25 = *((_QWORD *)this + 9);
      v26 = *(_QWORD *)(v25 + 400);
      v27 = *(std::__shared_weak_count **)(v25 + 408);
      *(_QWORD *)v204 = v26;
      *(_QWORD *)&v204[8] = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *((unsigned int *)this + 21);
      if (a9)
        v31 = *((unsigned int *)a9 + 58);
      else
        v31 = 0;
      strcpy(buf, " tfpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v199) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, uint64_t *, _DWORD *))(*(_QWORD *)v26 + 568))(v26, v30, v31, buf, 0, 0, 40, &v199, (_DWORD *)v195 + 10);
      if (v27)
      {
        v131 = (unint64_t *)&v27->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (a8)
        v133 = (_DWORD)a7 == 40;
      else
        v133 = 0;
      if (v133)
        v134 = a8;
      else
        v134 = a6;
      v184[0] = MEMORY[0x1E0C809B0];
      v184[1] = 0x40000000;
      v184[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
      v184[3] = &unk_1E6983218;
      *(double *)&v184[6] = v21;
      v184[7] = v167;
      v135 = *((_OWORD *)v134 + 1);
      v185 = *(_OWORD *)v134;
      v186 = v135;
      v136 = *((_QWORD *)v134 + 4);
      v184[5] = this;
      v184[4] = &v194;
      v187 = v136;
      v188 = a6;
      v137 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      v138 = v184;
      goto LABEL_217;
    }
    *(_QWORD *)v204 = 0;
    *(_QWORD *)&v204[8] = v204;
    *(_QWORD *)&v204[16] = 0x2000000000;
    v205 = 0;
    v173[0] = MEMORY[0x1E0C809B0];
    v173[1] = 0x40000000;
    v173[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
    v173[3] = &unk_1E69832F8;
    v174 = a4;
    v173[4] = v204;
    v173[5] = this;
    v173[6] = a6;
    v72 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v72, (uint64_t)v173);
    v73 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
    if ((_BYTE)v167 && v73)
    {
      v74 = vdupq_n_s64(*(unint64_t *)&v21);
      v75 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
      do
      {
        *(double *)a6 = v21;
        *(int64x2_t *)(a6 + 10) = v74;
        a6 += 14;
        --v75;
      }
      while (v75);
    }
LABEL_121:
    v80 = 56 * v73;
    goto LABEL_122;
  }
  if (mSelector > 1936092512)
  {
    if (mSelector > 1936092531)
    {
      if (mSelector != 1936092532)
      {
        if (mSelector == 1952542835)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_278;
            *(_DWORD *)v204 = 136315394;
            *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v204[12] = 1024;
            *(_DWORD *)&v204[14] = 442;
            v164 = MEMORY[0x1E0C81028];
            v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
            goto LABEL_277;
          }
          if (*((_DWORD *)this + 14) == 1)
          {
            *a6 = 1;
          }
          else
          {
            v102 = *((_QWORD *)this + 9);
            v103 = *(_QWORD *)(v102 + 400);
            v104 = *(std::__shared_weak_count **)(v102 + 408);
            *(_QWORD *)v204 = v103;
            *(_QWORD *)&v204[8] = v104;
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = *((unsigned int *)this + 21);
            if (a9)
              v108 = *((unsigned int *)a9 + 58);
            else
              v108 = 0;
            strcpy(buf, "spatbolg");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v103 + 544))(v103, v107, v108, buf);
            if (v104)
            {
              v151 = (unint64_t *)&v104->__shared_owners_;
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            if (v150)
            {
              v153 = *((_QWORD *)this + 9);
              v154 = *(_QWORD *)(v153 + 400);
              v155 = *(_QWORD *)(v153 + 408);
              *(_QWORD *)v204 = v154;
              *(_QWORD *)&v204[8] = v155;
              if (v155)
              {
                v156 = (unint64_t *)(v155 + 8);
                do
                  v157 = __ldxr(v156);
                while (__stxr(v157 + 1, v156));
              }
              v158 = *((unsigned int *)this + 21);
              if (a9)
                v159 = *((unsigned int *)a9 + 58);
              else
                v159 = 0;
              strcpy(buf, "spatbolg");
              buf[9] = 0;
              *(_WORD *)&buf[10] = 0;
              LODWORD(v199) = 0;
              v200 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v154 + 568))(v154, v158, v159, buf, 0, 0, 4, &v200, &v199);
              *a6 = v199;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v204);
            }
            else
            {
              *a6 = 0;
            }
          }
        }
        else
        {
          if (mSelector != 1952805485)
            goto LABEL_124;
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_278;
            *(_DWORD *)v204 = 136315394;
            *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v204[12] = 1024;
            *(_DWORD *)&v204[14] = 211;
            v164 = MEMORY[0x1E0C81028];
            v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
            goto LABEL_277;
          }
          v32 = *((_QWORD *)this + 9);
          v33 = *(_QWORD *)(v32 + 400);
          v34 = *(std::__shared_weak_count **)(v32 + 408);
          *(_QWORD *)v204 = v33;
          *(_QWORD *)&v204[8] = v34;
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = *((unsigned int *)this + 21);
          if (a9)
            v38 = *((unsigned int *)a9 + 58);
          else
            v38 = 0;
          strcpy(buf, "mretbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(v199) = 0;
          v200 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v33 + 568))(v33, v37, v38, buf, 0, 0, 4, &v200, &v199);
          *a6 = v199;
          if (v34)
          {
            v139 = (unint64_t *)&v34->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        goto LABEL_243;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 254;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_277;
      }
      v89 = *((_QWORD *)this + 9);
      v90 = *(_QWORD *)(v89 + 400);
      v91 = *(std::__shared_weak_count **)(v89 + 408);
      *(_QWORD *)v204 = v90;
      *(_QWORD *)&v204[8] = v91;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v94 = *((unsigned int *)this + 21);
      if (a9)
        v95 = *((unsigned int *)a9 + 58);
      else
        v95 = 0;
      strcpy(buf, " tfpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v199) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, uint64_t *, _DWORD *))(*(_QWORD *)v90 + 568))(v90, v94, v95, buf, 0, 0, 40, &v199, a6);
      if (v91)
      {
        v127 = (unint64_t *)&v91->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (a6[2] == 1819304813 && (a6[3] & 0x40) == 0)
      {
        if (v16)
          v129 = 9;
        else
          v129 = 11;
        v130 = 4 * a6[7];
        a6[3] = v129;
        a6[4] = v130;
        a6[5] = 1;
        a6[6] = v130;
        a6[8] = 32;
      }
LABEL_176:
      if ((_BYTE)v167)
        *(double *)a6 = v21;
      v64 = 40;
      goto LABEL_244;
    }
    if (mSelector != 1936092513)
    {
      if (mSelector != 1936092525)
        goto LABEL_124;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 264;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
        goto LABEL_277;
      }
      *a5 = 40;
      v51 = *((_QWORD *)this + 9);
      v52 = *(_QWORD *)(v51 + 400);
      v53 = *(std::__shared_weak_count **)(v51 + 408);
      *(_QWORD *)v204 = v52;
      *(_QWORD *)&v204[8] = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = *((unsigned int *)this + 21);
      if (a9)
        v57 = *((unsigned int *)a9 + 58);
      else
        v57 = 0;
      strcpy(buf, " tfpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v199) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, uint64_t *, _DWORD *))(*(_QWORD *)v52 + 568))(v52, v56, v57, buf, 0, 0, 40, &v199, (_DWORD *)v195 + 10);
      if (v53)
      {
        v141 = (unint64_t *)&v53->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v143 = v195;
      if (*((_DWORD *)v195 + 12) == 1819304813 && (*((_BYTE *)v195 + 52) & 0x40) == 0)
      {
        if (v16)
          v144 = 9;
        else
          v144 = 11;
        v145 = 4 * *((_DWORD *)v195 + 17);
        *((_DWORD *)v195 + 13) = v144;
        *((_DWORD *)v143 + 14) = v145;
        *((_DWORD *)v143 + 15) = 1;
        *((_DWORD *)v143 + 16) = v145;
        *((_DWORD *)v143 + 18) = 32;
      }
      if (a8)
        v146 = (_DWORD)a7 == 40;
      else
        v146 = 0;
      if (v146)
        v147 = a8;
      else
        v147 = a6;
      v189[0] = MEMORY[0x1E0C809B0];
      v189[1] = 0x40000000;
      v189[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v189[3] = &unk_1E69831F0;
      *(double *)&v189[6] = v21;
      v189[7] = v167;
      v148 = *((_OWORD *)v147 + 1);
      v190 = *(_OWORD *)v147;
      v191 = v148;
      v149 = *((_QWORD *)v147 + 4);
      v189[5] = this;
      v189[4] = &v194;
      v192 = v149;
      v193 = a6;
      v137 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      v138 = v189;
LABEL_217:
      HALB_CommandGate::ExecuteCommand(v137, (uint64_t)v138);
      goto LABEL_245;
    }
    *(_QWORD *)v204 = 0;
    *(_QWORD *)&v204[8] = v204;
    *(_QWORD *)&v204[16] = 0x2000000000;
    v205 = 0;
    v179[0] = MEMORY[0x1E0C809B0];
    v179[1] = 0x40000000;
    v179[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    v179[3] = &unk_1E6983280;
    v181 = v16;
    v180 = a4;
    v179[4] = v204;
    v179[5] = this;
    v179[6] = a6;
    v97 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v97, (uint64_t)v179);
    v73 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
    if ((_BYTE)v167 && v73)
    {
      v98 = vdupq_n_s64(*(unint64_t *)&v21);
      v99 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
      do
      {
        *(double *)a6 = v21;
        *(int64x2_t *)(a6 + 10) = v98;
        a6 += 14;
        --v99;
      }
      while (v99);
    }
    goto LABEL_121;
  }
  if (mSelector <= 1935960433)
  {
    if (mSelector == 1935762292)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 339;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
        goto LABEL_277;
      }
      v183[0] = MEMORY[0x1E0C809B0];
      v183[1] = 0x40000000;
      v183[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
      v183[3] = &__block_descriptor_tmp_10_6696;
      v183[4] = this;
      v183[5] = a6;
      v96 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v96, (uint64_t)v183);
      goto LABEL_243;
    }
    if (mSelector != 1935894638)
      goto LABEL_124;
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_278;
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 219;
      v164 = MEMORY[0x1E0C81028];
      v165 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
      goto LABEL_277;
    }
    if (*((_DWORD *)this + 14) == 1)
    {
      NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v169, v20);
    }
    else
    {
      v109 = *((_QWORD *)this + 9);
      v110 = *(_QWORD *)(v109 + 400);
      v111 = *(std::__shared_weak_count **)(v109 + 408);
      *(_QWORD *)v204 = v110;
      *(_QWORD *)&v204[8] = v111;
      if (v111)
      {
        v112 = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v114 = *((unsigned int *)this + 21);
      if (a9)
        v115 = *((unsigned int *)a9 + 58);
      else
        v115 = 0;
      strcpy(buf, "nhcsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v199) = 0;
      v200 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v110 + 568))(v110, v114, v115, buf, 0, 0, 4, &v200, &v199);
      v160 = v199;
      *a6 = v199;
      if (v111)
      {
        v161 = (unint64_t *)&v111->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
        v160 = *a6;
      }
      if (v160)
        goto LABEL_243;
      NeighborStartingChannel = 1;
    }
    *a6 = NeighborStartingChannel;
LABEL_243:
    v64 = 4;
    goto LABEL_244;
  }
  switch(mSelector)
  {
    case 1935960434:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_278;
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 348;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
        goto LABEL_277;
      }
      v182[0] = MEMORY[0x1E0C809B0];
      v182[1] = 0x40000000;
      v182[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v182[3] = &__block_descriptor_tmp_12_6698;
      v182[4] = this;
      v182[5] = a6;
      v88 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v88, (uint64_t)v182);
      goto LABEL_243;
    case 1936092451:
      *(_QWORD *)v204 = 0;
      *(_QWORD *)&v204[8] = v204;
      *(_QWORD *)&v204[16] = 0x2000000000;
      v205 = 0;
      v176[0] = MEMORY[0x1E0C809B0];
      v176[1] = 0x40000000;
      v176[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
      v176[3] = &unk_1E69832A8;
      v178 = v16;
      v177 = a4;
      v176[4] = v204;
      v176[5] = this;
      v176[6] = a6;
      v78 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v78, (uint64_t)v176);
      v48 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
      if ((_BYTE)v167 && v48)
      {
        v79 = *(_QWORD *)(*(_QWORD *)&v204[8] + 24);
        do
        {
          *(double *)a6 = v21;
          a6 += 10;
          --v79;
        }
        while (v79);
      }
LABEL_97:
      v80 = 40 * v48;
LABEL_122:
      *a5 = v80;
LABEL_123:
      _Block_object_dispose(v204, 8);
      goto LABEL_245;
    case 1936092479:
      if (a4 > 0x27)
      {
        *a5 = 40;
        *(_QWORD *)v204 = 0;
        *(_QWORD *)&v204[8] = v204;
        *(_QWORD *)&v204[16] = 0x2000000000;
        LOBYTE(v205) = 0;
        v175[0] = MEMORY[0x1E0C809B0];
        v175[1] = 0x40000000;
        v175[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15;
        v175[3] = &unk_1E69832D0;
        v175[6] = v18;
        v175[7] = v19;
        v175[4] = v204;
        v175[5] = this;
        v175[8] = a6;
        v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v175);
        if (!*(_BYTE *)(*(_QWORD *)&v204[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInStream.cpp";
            v202 = 1024;
            v203 = 393;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", buf, 0x12u);
          }
          v24 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v24 = &off_1E69A1B30;
          v24[2] = 560226676;
        }
        goto LABEL_123;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v204 = 136315394;
        *(_QWORD *)&v204[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v204[12] = 1024;
        *(_DWORD *)&v204[14] = 375;
        v164 = MEMORY[0x1E0C81028];
        v165 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
        goto LABEL_277;
      }
      goto LABEL_278;
  }
LABEL_124:
  if (HALS_Stream::HasProperty(this, a2, a3, a9))
  {
    HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, (uint64_t *)a6, a7, a8, a9);
  }
  else if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    v116 = *((_QWORD *)this + 9);
    v117 = *(_QWORD *)(v116 + 400);
    v118 = *(_QWORD *)(v116 + 408);
    *(_QWORD *)v204 = v117;
    *(_QWORD *)&v204[8] = v118;
    if (v118)
    {
      v119 = (unint64_t *)(v118 + 8);
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    if (a9)
      v121 = *((unsigned int *)a9 + 58);
    else
      v121 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, _DWORD *))(*(_QWORD *)v117 + 568))(v117, *((unsigned int *)this + 21), v121, a3, a7, a8, a4, a5, a6);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v204);
  }
LABEL_245:
  HALS_ObjectMap::ReleaseObject(v169, v19);
  _Block_object_dispose(&v194, 8);
}

void sub_1B5A82C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, HALS_ObjectMap *a12)
{
  uint64_t v12;
  HALS_Object *v14;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v12 - 160);
  HALS_ObjectMap::ReleaseObject(a12, v14);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Unwind_Resume(a1);
}

void HALS_PlugInStream::SetPropertyData(HALS_PlugInStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const AudioStreamBasicDescription *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  HALS_Device *v17;
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v19;
  HALS_Object *v20;
  uint64_t v21;
  Float64 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Float64 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Float64 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  AudioStreamBasicDescription *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  int v49;
  HALB_Mutex *v50;
  uint64_t v51;
  Float64 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  AudioStreamBasicDescription *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  HALB_Mutex *v62;
  uint64_t v63;
  Float64 v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Float64 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL4 v82;
  unint64_t *v83;
  unint64_t v84;
  _DWORD *exception;
  int v86;
  _DWORD *v87;
  NSObject *v88;
  const char *v89;
  _DWORD *v90;
  _QWORD v91[6];
  double v92[5];
  AudioStreamBasicDescription v93;
  _BOOL4 v94;
  uint64_t v95;
  int v96;
  AudioStreamBasicDescription buf;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_PlugInStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v17 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 478;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::SetPropertyData: owning device is missing", (uint8_t *)&buf, 0x12u);
    }
    v86 = 560947818;
LABEL_100:
    v87 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v87 = &off_1E69A1B30;
    v87[2] = v86;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_6;
  if (!HALS_Device::IsHogModeOwnerOrFree(v17, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 479;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::SetPropertyData: the given process does not own hog mode", (uint8_t *)&buf, 0x12u);
    }
    v86 = 560492391;
    goto LABEL_100;
  }
  mSelector = a3->mSelector;
LABEL_6:
  switch(mSelector)
  {
    case 0x70667420u:
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_108;
        LODWORD(buf.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 519;
        v88 = MEMORY[0x1E0C81028];
        v89 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_107;
      }
      v28 = *((_QWORD *)this + 9);
      v29 = *(double *)(v28 + 400);
      v30 = *(std::__shared_weak_count **)(v28 + 408);
      buf.mSampleRate = v29;
      *(_QWORD *)&buf.mFormatID = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      v33 = *((unsigned int *)this + 21);
      if (a8)
        v34 = *((unsigned int *)a8 + 58);
      else
        v34 = 0;
      v95 = 0x676C6F6270667420;
      v96 = 0;
      v94 = 0;
      (*(void (**)(Float64, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *, double *))(**(_QWORD **)&v29 + 568))(COERCE_FLOAT64(*(_QWORD *)&v29), v33, v34, &v95, 0, 0, 40, &v94, v92);
      if (v30)
      {
        v59 = (unint64_t *)&v30->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      HALB_FormatList::BestMatchForPhysicalFormat((HALS_PlugInStream *)((char *)this + 104), a5, &v93, v58, v92[0]);
      if (a8 && (v93.mFormatID != 1819304813 || (v93.mFormatFlags & 0x40) != 0))
      {
        v61 = *((_DWORD *)v17 + 4);
        *(_QWORD *)&buf.mSampleRate = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf.mFormatID = 0x40000000;
        *(_QWORD *)&buf.mBytesPerPacket = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
        *(_QWORD *)&buf.mBytesPerFrame = &__block_descriptor_tmp_14_2053;
        *(_QWORD *)&buf.mBitsPerChannel = a8;
        v98 = v61;
        v62 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
        HALB_CommandGate::ExecuteCommand(v62, (uint64_t)&buf);
      }
      v63 = *((_QWORD *)this + 9);
      v64 = *(double *)(v63 + 400);
      v53 = *(std::__shared_weak_count **)(v63 + 408);
      buf.mSampleRate = v64;
      *(_QWORD *)&buf.mFormatID = v53;
      if (v53)
      {
        v65 = (unint64_t *)&v53->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = *((unsigned int *)this + 21);
      if (a8)
        v68 = *((unsigned int *)a8 + 58);
      else
        v68 = 0;
      v95 = 0x676C6F6270667420;
      v96 = 0;
      (*(void (**)(Float64, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, AudioStreamBasicDescription *))(**(_QWORD **)&v64 + 576))(COERCE_FLOAT64(*(_QWORD *)&v64), v67, v68, &v95, 0, 0, 40, &v93);
      if (!v53)
        goto LABEL_86;
      v78 = (unint64_t *)&v53->__shared_owners_;
      do
        v77 = __ldaxr(v78);
      while (__stlxr(v77 - 1, v78));
      goto LABEL_77;
    case 0x73666D74u:
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_108;
        LODWORD(buf.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 500;
        v88 = MEMORY[0x1E0C81028];
        v89 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_107;
      }
      v21 = *((_QWORD *)this + 9);
      v22 = *(double *)(v21 + 400);
      v23 = *(std::__shared_weak_count **)(v21 + 408);
      buf.mSampleRate = v22;
      *(_QWORD *)&buf.mFormatID = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *((unsigned int *)this + 21);
      if (a8)
        v27 = *((unsigned int *)a8 + 58);
      else
        v27 = 0;
      v95 = 0x676C6F6270667420;
      v96 = 0;
      v94 = 0;
      (*(void (**)(Float64, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *, double *))(**(_QWORD **)&v22 + 568))(COERCE_FLOAT64(*(_QWORD *)&v22), v26, v27, &v95, 0, 0, 40, &v94, v92);
      if (v23)
      {
        v46 = (unint64_t *)&v23->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v48 = *(_OWORD *)&a5->mBytesPerPacket;
      *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a5->mSampleRate;
      *(_OWORD *)&buf.mBytesPerPacket = v48;
      *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)&a5->mBitsPerChannel;
      if (buf.mFormatID == 1819304813)
      {
        buf.mBitsPerChannel = 0;
        *(_OWORD *)&buf.mFormatFlags = 0uLL;
      }
      HALB_FormatList::BestMatchForPhysicalFormat((HALS_PlugInStream *)((char *)this + 104), &buf, &v93, v45, v92[0]);
      if (a8 && (v93.mFormatID != 1819304813 || (v93.mFormatFlags & 0x40) != 0))
      {
        v49 = *((_DWORD *)v17 + 4);
        *(_QWORD *)&buf.mSampleRate = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf.mFormatID = 0x40000000;
        *(_QWORD *)&buf.mBytesPerPacket = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
        *(_QWORD *)&buf.mBytesPerFrame = &__block_descriptor_tmp_14_2053;
        *(_QWORD *)&buf.mBitsPerChannel = a8;
        v98 = v49;
        v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
        HALB_CommandGate::ExecuteCommand(v50, (uint64_t)&buf);
      }
      v51 = *((_QWORD *)this + 9);
      v52 = *(double *)(v51 + 400);
      v53 = *(std::__shared_weak_count **)(v51 + 408);
      buf.mSampleRate = v52;
      *(_QWORD *)&buf.mFormatID = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = *((unsigned int *)this + 21);
      if (a8)
        v57 = *((unsigned int *)a8 + 58);
      else
        v57 = 0;
      v95 = 0x676C6F6270667420;
      v96 = 0;
      (*(void (**)(Float64, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, AudioStreamBasicDescription *))(**(_QWORD **)&v52 + 576))(COERCE_FLOAT64(*(_QWORD *)&v52), v56, v57, &v95, 0, 0, 40, &v93);
      if (!v53)
        goto LABEL_86;
      v76 = (unint64_t *)&v53->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
LABEL_77:
      if (v77)
        goto LABEL_86;
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      v79 = v53;
LABEL_85:
      std::__shared_weak_count::__release_weak(v79);
      goto LABEL_86;
    case 0x73616374u:
      if (a4 > 3)
      {
        if (!*((_DWORD *)this + 14))
        {
          v69 = *((_QWORD *)this + 9);
          v70 = *(double *)(v69 + 400);
          v71 = *(std::__shared_weak_count **)(v69 + 408);
          buf.mSampleRate = v70;
          *(_QWORD *)&buf.mFormatID = v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = *((unsigned int *)this + 21);
          if (a8)
            v75 = *((unsigned int *)a8 + 58);
          else
            v75 = 0;
          v82 = LODWORD(a5->mSampleRate) != 0;
          v95 = 0x676C6F6273616374;
          v96 = 0;
          v94 = v82;
          (*(void (**)(Float64, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, _BOOL4 *))(**(_QWORD **)&v70 + 576))(COERCE_FLOAT64(*(_QWORD *)&v70), v74, v75, &v95, 0, 0, 4, &v94);
          if (v71)
          {
            v83 = (unint64_t *)&v71->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
        v91[0] = MEMORY[0x1E0C809B0];
        v91[1] = 0x40000000;
        v91[2] = ___ZN17HALS_PlugInStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v91[3] = &__block_descriptor_tmp_23_6679;
        v91[4] = this;
        v91[5] = a5;
        v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v91);
        goto LABEL_86;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_108:
        v90 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v90 = &off_1E69A1B30;
        v90[2] = 561211770;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 487;
      v88 = MEMORY[0x1E0C81028];
      v89 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_107:
      _os_log_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_ERROR, v89, (uint8_t *)&buf, 0x12u);
      goto LABEL_108;
  }
  if (HALS_Stream::HasProperty(this, a2, a3, a8))
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v35, v36, v37, v38, (uint64_t)a8);
  if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    v39 = *((_QWORD *)this + 9);
    v40 = *(double *)(v39 + 400);
    v41 = *(std::__shared_weak_count **)(v39 + 408);
    buf.mSampleRate = v40;
    *(_QWORD *)&buf.mFormatID = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = a8 ? *((unsigned int *)a8 + 58) : 0;
    (*(void (**)(Float64, _QWORD, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const AudioStreamBasicDescription *))(**(_QWORD **)&v40 + 576))(COERCE_FLOAT64(*(_QWORD *)&v40), *((unsigned int *)this + 21), v44, a3, a6, a7, a4, a5);
    if (v41)
    {
      v80 = (unint64_t *)&v41->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        v79 = v41;
        goto LABEL_85;
      }
    }
  }
LABEL_86:
  HALS_ObjectMap::ReleaseObject(v17, v20);
}

void sub_1B5A83654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  HALS_ObjectMap *v29;
  HALS_Object *v31;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  HALS_ObjectMap::ReleaseObject(v29, v31);
  _Unwind_Resume(a1);
}

void HALS_PlugInStream::HandlePlugIn_PropertiesChanged(HALS_PlugInStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  char v6;
  const AudioObjectPropertyAddress *v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;

  if ((_DWORD)a2)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
    do
    {
      mSelector = v7->mSelector;
      ++v7;
      v6 |= mSelector == 1885762657;
      --v8;
    }
    while (v8);
    if ((v6 & 1) != 0)
      HALS_PlugInStream::BuildFormatList(this);
  }
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void `non-virtual thunk to'HALS_PlugInStream::~HALS_PlugInStream(HALS_PlugInStream *this)
{
  HALS_PlugInStream::~HALS_PlugInStream((HALS_PlugInStream *)((char *)this - 64));
}

{
  HALS_PlugInStream::~HALS_PlugInStream((HALS_PlugInStream *)((char *)this - 64));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'HALS_PlugInStream::HandlePlugIn_PropertiesChanged(HALS_PlugInStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_PlugInStream::HandlePlugIn_PropertiesChanged((HALS_PlugInStream *)((char *)this - 64), a2, a3);
}

uint64_t HALS_PlugInStream::BuildFormatList(HALS_PlugInStream *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  HALB_Mutex *v20;
  _QWORD v22[6];
  unsigned int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;

  v2 = *((_QWORD *)this + 9);
  v3 = *(_QWORD *)(v2 + 400);
  v4 = *(std::__shared_weak_count **)(v2 + 408);
  v24 = v3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v26 = 0;
  v7 = *((unsigned int *)this + 21);
  v27 = 0x676C6F6270667461;
  v28 = 0;
  v8 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v3 + 560))(v3, v7, 0, &v27, 0, 0)/ 0x38;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v26 = v8;
  v11 = operator new[]();
  v12 = *((_QWORD *)this + 9);
  v13 = *(_QWORD *)(v12 + 400);
  v14 = *(std::__shared_weak_count **)(v12 + 408);
  v24 = v13;
  v25 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *((unsigned int *)this + 21);
  v27 = 0x676C6F6270667461;
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v13 + 568))(v13, v17, 0, &v27, 0, 0, 56 * v8, &v26, v11);
  v26 /= 0x38u;
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZN17HALS_PlugInStream15BuildFormatListEv_block_invoke;
  v22[3] = &__block_descriptor_tmp_24_6673;
  v23 = v26;
  v22[4] = this;
  v22[5] = v11;
  v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v22);
  return MEMORY[0x1B5E50664](v11, 0x1000C8021716A34);
}

void sub_1B5A839AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1B5E50664](v10, 0x1000C8021716A34);
  _Unwind_Resume(a1);
}

void ___ZN17HALS_PlugInStream15BuildFormatListEv_block_invoke(uint64_t a1, uint64_t a2, const AudioStreamRangedDescription *a3)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  HALB_FormatList *v7;

  v3 = *(_QWORD **)(a1 + 32);
  v3[15] = v3[14];
  v3[18] = v3[17];
  if (*(_DWORD *)(a1 + 48))
  {
    v5 = 0;
    v6 = 0;
    v7 = (HALB_FormatList *)(v3 + 13);
    do
    {
      HALB_FormatList::AddPhysicalFormat(v7, (const AudioStreamRangedDescription *)(*(_QWORD *)(a1 + 40) + v5), a3);
      ++v6;
      v5 += 56;
    }
    while (v6 < *(unsigned int *)(a1 + 48));
  }
}

uint64_t ___ZN17HALS_PlugInStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 100) = **(_DWORD **)(result + 40) != 0;
  return result;
}

__n128 __Block_byref_object_copy__6682(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  HALB_FormatList **v5;
  AudioStreamBasicDescription *v6;
  void (**v7)(HALB_FormatList *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = &off_1E69749F0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[17], v5[18], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v5 + 13), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

void sub_1B5A83B34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A83B24);
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  HALB_FormatList **v5;
  AudioStreamBasicDescription *v6;
  void (**v7)(HALB_FormatList *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = &off_1E69749F0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[17], v5[18], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 13), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

void sub_1B5A83BF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A83BE4);
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 100);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 104, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 104, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A83CB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 136), *(const HALB_FormatList **)(v2 + 144), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 112), *(AudioStreamBasicDescription **)(v2 + 120), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B5A83D54(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A83D44);
}

__n128 ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1 / 0x38uLL;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(v2 + 136);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 144) - v9) >> 3)))
        break;
      v10 = v9 + v5;
      v5 += 56;
      v11 = v4 + 56 * v6;
      result = *(__n128 *)v10;
      v13 = *(_OWORD *)(v10 + 16);
      v14 = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)v11 = result;
      v6 = *(_QWORD *)(v3 + 24) + 1;
      *(_QWORD *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_19(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(_QWORD *)(a1 + 40) + 104, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B5A83E5C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_21(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 136), *(const HALB_FormatList **)(v2 + 144), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 136), *(AudioStreamBasicDescription **)(v2 + 144), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B5A83EFC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5A83EECLL);
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 12 * *(_DWORD *)(*(_QWORD *)(result + 40) + 96);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(_QWORD *)(*(_QWORD *)(result + 40) + 120)
                                                                    - *(_QWORD *)(*(_QWORD *)(result + 40) + 112)) >> 3);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

void sub_1B5A8402C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5A84144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5A84298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B5A8432C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(uint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  double v17;
  void *__p[2];
  char v20;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "current sample");
  v10 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v10)
    v10 = AMCP::Thing::convert_to<unsigned long long>(v10 + 40);
  *(_QWORD *)a1 = v10;
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "current host");
  v11 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v11)
    v11 = AMCP::Thing::convert_to<unsigned long long>(v11 + 40);
  *(_QWORD *)(a1 + 8) = v11;
  if (v20 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 16) = vcvtmd_s64_f64(a4);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = vcvtmd_s64_f64(a5 - a4);
  std::string::basic_string[abi:ne180100]<0>(__p, "IO rate scalar");
  v12 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v12)
    v13 = AMCP::Thing::convert_to<double>((uint64_t)(v12 + 40));
  else
    v13 = 0.0;
  *(double *)(a1 + 40) = v13;
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zts host");
  v14 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v14)
    v14 = AMCP::Thing::convert_to<unsigned long long>(v14 + 40);
  *(_QWORD *)(a1 + 56) = v14;
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zts sample");
  v15 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v15)
    v15 = AMCP::Thing::convert_to<long long>(v15 + 40);
  *(_QWORD *)(a1 + 48) = v15;
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zts rate scalar");
  v16 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v16)
    v17 = AMCP::Thing::convert_to<double>((uint64_t)(v16 + 40));
  else
    v17 = 0.0;
  *(double *)(a1 + 64) = v17;
  if (v20 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B5A84528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x38E38E38E38E38FLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x38E38E38E38E38FLL)
  {
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Timestamp_Writer::Timestamp_Data,caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  caulk::rt_safe_memory_resource *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 72) % 0x48uLL + *(_QWORD *)(a1 + 8);
  v3 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](v3, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3));
  return a1;
}

void AMCP::DAL::get_timestamp_writer_queue(AMCP::DAL *this)
{
  unsigned __int8 v1;
  NSObject *v2;

  if ((v1 & 1) == 0
  {
    v2 = dispatch_queue_create("Time Stamp Writer Queue", 0);
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)AMCP::DAL::get_timestamp_writer_queue(void)::s_timestamp_writer_queue, v2);
    if (v2)
      dispatch_release(v2);
  }
}

uint64_t *applesauce::dispatch::v1::async<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &>(dispatch_queue_s *,AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &)::{lambda(void *)#1}::__invoke(AMCP::Log::Scope_Registry *a1)
{
  _QWORD *v1;
  const char *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  const char *v7;
  FILE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  const char *v19;
  AMCP::Log::Scope_Registry *v20;
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = a1;
  v1 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (*v1 != v1[1])
  {
    v2 = *(const char **)a1;
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = *(std::__shared_weak_count **)v22;
    v4 = **(NSObject ***)buf;
    if (*(_QWORD *)v22)
    {
      v5 = (unint64_t *)(*(_QWORD *)v22 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      if (v2[23] >= 0)
        v19 = v2;
      else
        v19 = *(const char **)v2;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Timestamp_Writer.cpp";
      v23 = 1024;
      v24 = 109;
      v25 = 2080;
      v26 = v19;
      _os_log_debug_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Timestamp_Writer::write_timestamp_file: writing time stamps to %s", buf, 0x22u);
    }
    if (v2[23] >= 0)
      v7 = v2;
    else
      v7 = *(const char **)v2;
    v8 = fopen(v7, "w");
    if (v8)
    {
      v9 = *(_QWORD *)(*v1 + 16);
      v10 = *(_QWORD *)(*v1 + 24);
      v12 = *(_QWORD *)(*v1 + 48);
      v11 = *(_QWORD *)(*v1 + 56);
      fwrite("Current Sample Time\tCurrent Host Time\tIO Sample Time\tIO Host Time\tIO Frame Size\tIO Sample Diff\tIO Host Diff\tRate Scalar\tZTS Sample\tZTS Host\tZTS Sample Diff\tZTS Host Diff\tZTS Host/Frame\n", 0xB9uLL, 1uLL, v8);
      v13 = *v1;
      v14 = v1[1];
      if (*v1 != v14)
      {
        do
        {
          fprintf(v8, "%lld\t%lld\t%lld\t%lld\t%lld\t%lld\t%lld\t%0.5f", *(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 16) - v9, *(_QWORD *)(v13 + 24) - v10, *(double *)(v13 + 40));
          v15 = *(_QWORD *)(v13 + 48);
          if (v15 == v12)
            fputc(10, v8);
          else
            fprintf(v8, "\t%lld\t%lld\t%lld\t%lld\t%0.5f\n", v15, *(_QWORD *)(v13 + 56), v15 - v12, *(_QWORD *)(v13 + 56) - v11, (double)(unint64_t)(*(_QWORD *)(v13 + 56) - v11) / (double)(v15 - v12));
          v9 = *(_QWORD *)(v13 + 16);
          v10 = *(_QWORD *)(v13 + 24);
          v12 = *(_QWORD *)(v13 + 48);
          v11 = *(_QWORD *)(v13 + 56);
          v13 += 72;
        }
        while (v13 != v14);
      }
      fclose(v8);
    }
  }
  return std::unique_ptr<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0,std::default_delete<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v20);
}

void sub_1B5A84980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5A848C0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0,std::default_delete<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 16);
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1B5E50688](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::__on_zero_shared(uint64_t result)
{
  if (*(char *)(result + 47) < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 48) + 24))(*(_QWORD *)(result + 48), *(_QWORD *)(result + 24), *(_QWORD *)(result + 40) & 0x7FFFFFFFFFFFFFFFLL, 1);
  return result;
}

void std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69833F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69833F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::rt_safe_memory_resource *std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::__on_zero_shared(_QWORD *a1)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)a1[3];
  if (result)
  {
    a1[4] = result;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](result, 0x8E38E38E38E38E39 * ((uint64_t)(a1[5] - (_QWORD)result) >> 3));
  }
  return result;
}

uint64_t AMCP::IO_Core::Play_State_Manager::start(uint64_t *a1, int a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  AMCP::Log::Scope_Registry *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  const char *v28;
  void **v29;
  void *__p[2];
  char v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6), byte_1EDB88044))
  {
    v7 = *((unsigned __int8 *)a3 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = a3[1];
    if (v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = *(std::__shared_weak_count **)v34;
      v9 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v10 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v6)
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v14 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        v15 = a2 ? "Prewarm" : "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        v16 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "Play_State_Manager.cpp";
        v35 = 1024;
        v36 = 22;
        v37 = 2080;
        v38 = (uint64_t *)v14;
        v39 = 2080;
        v40 = v15;
        v41 = 2080;
        v42 = v16;
        _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::start >>: request(%s)  --  %s", buf, 0x36u);
        if (v32 < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (a2 == 1)
  {
    v17 = *a1;
    v18 = a1;
  }
  else
  {
    if (a2)
      goto LABEL_29;
    v18 = a1 + 1;
    v17 = a1[1];
  }
  if (v17 != -1)
    *v18 = v17 + 1;
LABEL_29:
  if (a1[1])
    v19 = 2;
  else
    v19 = *a1 != 0;
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v20), byte_1EDB88044))
  {
    v21 = *((unsigned __int8 *)a3 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = a3[1];
    if (v21)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v22 = *(std::__shared_weak_count **)v34;
      v23 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v24 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        if (a2)
          v28 = "Prewarm";
        else
          v28 = "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        if (v32 >= 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "Play_State_Manager.cpp";
        v35 = 1024;
        v36 = 44;
        v37 = 2080;
        v38 = a3;
        v39 = 2080;
        v40 = (void *)v28;
        v41 = 2080;
        v42 = v29;
        _os_log_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::start <<: request(%s) --  %s", buf, 0x36u);
        if (v32 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v19;
}

uint64_t AMCP::IO_Core::Play_State_Manager::stop(uint64_t *a1, int a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  AMCP::Log::Scope_Registry *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  const char *v27;
  void **v28;
  AMCP::Log::Scope_Registry *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  const char *v37;
  void **v38;
  void *__p[2];
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6), byte_1EDB88044))
  {
    v7 = *((unsigned __int8 *)a3 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = a3[1];
    if (v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = *(std::__shared_weak_count **)v43;
      v9 = **(NSObject ***)buf;
      if (*(_QWORD *)v43)
      {
        v10 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v6)
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v14 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        v15 = a2 ? "Prewarm" : "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        v16 = v41 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)v43 = 2080;
        *(_QWORD *)&v43[2] = "Play_State_Manager.cpp";
        v44 = 1024;
        v45 = 56;
        v46 = 2080;
        v47 = (uint64_t *)v14;
        v48 = 2080;
        v49 = v15;
        v50 = 2080;
        v51 = v16;
        _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop >>: request(%s) --  %s", buf, 0x36u);
        if (v41 < 0)
          operator delete(__p[0]);
      }
    }
  }
  v17 = a1[1];
  if (v17 || *a1)
  {
    if (a2 == 1)
    {
      if (*a1)
        --*a1;
    }
    else if (!a2)
    {
      if (!v17)
        goto LABEL_33;
      a1[1] = --v17;
    }
    if (v17)
    {
      v18 = 2;
LABEL_34:
      AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
      if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
        || (AMCP::Logging_Settings::instance(v19), byte_1EDB88044))
      {
        v20 = *((unsigned __int8 *)a3 + 23);
        if ((v20 & 0x80u) != 0)
          v20 = a3[1];
        if (v20)
        {
          AMCP::Log::Scope_Registry::get(v19);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v21 = *(std::__shared_weak_count **)v43;
          v22 = **(NSObject ***)buf;
          if (*(_QWORD *)v43)
          {
            v23 = (unint64_t *)(*(_QWORD *)v43 + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            if (*((char *)a3 + 23) < 0)
              a3 = (uint64_t *)*a3;
            if (a2)
              v27 = "Prewarm";
            else
              v27 = "Play";
            AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
            if (v41 >= 0)
              v28 = __p;
            else
              v28 = (void **)__p[0];
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)&buf[4] = v26;
            *(_WORD *)v43 = 2080;
            *(_QWORD *)&v43[2] = "Play_State_Manager.cpp";
            v44 = 1024;
            v45 = 87;
            v46 = 2080;
            v47 = a3;
            v48 = 2080;
            v49 = (void *)v27;
            v50 = 2080;
            v51 = v28;
            _os_log_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop <<: request(%s) --  %s", buf, 0x36u);
            if (v41 < 0)
              operator delete(__p[0]);
          }
        }
      }
      return v18;
    }
LABEL_33:
    v18 = *a1 != 0;
    goto LABEL_34;
  }
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v29), byte_1EDB88044))
  {
    v30 = *((unsigned __int8 *)a3 + 23);
    if ((v30 & 0x80u) != 0)
      v30 = a3[1];
    if (v30)
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v31 = *(std::__shared_weak_count **)v43;
      v32 = **(NSObject ***)buf;
      if (*(_QWORD *)v43)
      {
        v33 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        v35 = pthread_self();
        v36 = pthread_mach_thread_np(v35);
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        if (a2)
          v37 = "Prewarm";
        else
          v37 = "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        if (v41 >= 0)
          v38 = __p;
        else
          v38 = (void **)__p[0];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v36;
        *(_WORD *)v43 = 2080;
        *(_QWORD *)&v43[2] = "Play_State_Manager.cpp";
        v44 = 1024;
        v45 = 63;
        v46 = 2080;
        v47 = a3;
        v48 = 2080;
        v49 = (void *)v37;
        v50 = 2080;
        v51 = v38;
        _os_log_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop << EXTRA STOP CALLS: %s --  %s", buf, 0x36u);
        if (v41 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void AMCP::IO_Core::Play_State_Manager::get_state_snapshot(AMCP::IO_Core::Play_State_Manager *this, unint64_t *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if ((unint64_t)v6 >= v5)
      {
        v9 = v6 - v4;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v5 - (_QWORD)v4) >> 1 > v10)
          v10 = (uint64_t)(v5 - (_QWORD)v4) >> 1;
        if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
        else
          v12 = 0;
        v13 = (_DWORD *)(v11 + 4 * v9);
        *v13 = 0;
        v8 = v13 + 1;
        while (v6 != v4)
        {
          v14 = *--v6;
          *--v13 = v14;
        }
        v5 = v11 + 4 * v12;
        *(_QWORD *)this = v13;
        *((_QWORD *)this + 1) = v8;
        *((_QWORD *)this + 2) = v5;
        if (v4)
          operator delete(v4);
        v4 = v13;
      }
      else
      {
        *v6 = 0;
        v8 = v6 + 1;
      }
      *((_QWORD *)this + 1) = v8;
      ++v7;
      v6 = v8;
    }
    while (v7 < a2[1]);
  }
  else
  {
    v4 = 0;
    v8 = 0;
  }
  if (*a2)
  {
    v15 = 0;
    v16 = *((_QWORD *)this + 2);
    do
    {
      if ((unint64_t)v8 >= v16)
      {
        v18 = v8 - v4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v16 - (_QWORD)v4) >> 1 > v19)
          v19 = (uint64_t)(v16 - (_QWORD)v4) >> 1;
        if (v16 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        else
          v21 = 0;
        v22 = (_DWORD *)(v20 + 4 * v18);
        *v22 = 1;
        v17 = v22 + 1;
        while (v8 != v4)
        {
          v23 = *--v8;
          *--v22 = v23;
        }
        v16 = v20 + 4 * v21;
        *(_QWORD *)this = v22;
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v16;
        if (v4)
          operator delete(v4);
        v4 = v22;
      }
      else
      {
        *v8 = 1;
        v17 = v8 + 1;
      }
      *((_QWORD *)this + 1) = v17;
      ++v15;
      v8 = v17;
    }
    while (v15 < *a2);
  }
}

void sub_1B5A855FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server(HALB_IOBufferManager_Server *this)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  for (i = 0; i != -48; i -= 24)
  {
    v4 = *(void **)((char *)this + i + 32);
    if (v4)
    {
      *(_QWORD *)((char *)this + i + 40) = v4;
      operator delete(v4);
    }
  }
}

void HALB_IOBufferManager_Server::AddIOBuffer(HALB_IOBufferManager_Server *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char *v6;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int> *v8;
  unsigned int *v9;
  unsigned int *end;
  std::vector<unsigned int>::pointer *p_end;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  std::allocator<unsigned int> *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  std::__split_buffer<unsigned int> __v;

  v6 = (char *)this + 24 * a2;
  v9 = (unsigned int *)*((_QWORD *)v6 + 1);
  v8 = (std::vector<unsigned int> *)(v6 + 8);
  begin = v9;
  p_end = &v8->__end_;
  end = v8->__end_;
  v12 = (char *)end - (char *)v9;
  v13 = (unint64_t)((char *)end - (char *)v9) >> 2;
  v14 = a3 + 1 - v13;
  if (a3 + 1 > v13)
  {
    v39 = 0;
    v15 = (std::vector<unsigned int>::pointer)((char *)begin + v12);
    v16 = (char *)this + 24 * a2;
    v19 = *((_QWORD *)v16 + 3);
    v17 = (std::allocator<unsigned int> *)(v16 + 24);
    v18 = v19;
    if (v14 > (v19 - (uint64_t)end) >> 2)
    {
      v20 = v12 >> 2;
      v21 = (v12 >> 2) + v14;
      if (v21 >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v22 = v18 - (_QWORD)begin;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      __v.__end_cap_.__value_ = v17;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      else
        v24 = 0;
      v36 = (unsigned int *)(v23 + 4 * v20);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v23;
      __v.__begin_ = v36;
      __v.__end_cap_.__value_ = (unsigned int *)(v23 + 4 * v24);
      v37 = 4 * v14;
      v38 = &v36[v14];
      do
      {
        *v36++ = v39;
        v37 -= 4;
      }
      while (v37);
      __v.__end_ = v38;
      std::vector<unsigned int>::__swap_out_circular_buffer(v8, &__v, v15);
      if (__v.__first_)
        operator delete(__v.__first_);
      goto LABEL_33;
    }
    v25 = (char *)end - (char *)v15;
    if (v14 <= end - v15)
    {
      v28 = end;
      v27 = v14;
    }
    else
    {
      v26 = 0;
      v27 = v25 >> 2;
      v28 = &end[v14 - (v25 >> 2)];
      do
      {
        end[v26 / 4] = 0;
        v26 += 4;
      }
      while (4 * v14 - 4 * v27 != v26);
      *p_end = v28;
      if (end == v15)
      {
LABEL_33:
        begin = v8->__begin_;
        v12 = (char *)*p_end - (char *)v8->__begin_;
        goto LABEL_34;
      }
    }
    v29 = &v15[v14];
    v30 = &v28[-v14];
    v31 = v28;
    if (v30 < end)
    {
      v31 = v28;
      do
      {
        v32 = *v30++;
        *v31++ = v32;
      }
      while (v30 < end);
    }
    *p_end = v31;
    if (v28 != v29)
      memmove(&v28[-(v28 - v29)], v15, (char *)v28 - (char *)v29);
    v33 = v39;
    if (v15 > &v39)
      v33 = 0;
    v34 = -v27;
    do
      *v15++ = v33;
    while (!__CFADD__(v34++, 1));
    goto LABEL_33;
  }
LABEL_34:
  if (a3 >= (unint64_t)(v12 >> 2))
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  begin[a3] = a4;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>()
{
  uint64_t result;
  char *__stringp;
  size_t v2;
  char v3[128];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 128;
  result = sysctlbyname("kern.osrelease", v3, &v2, 0, 0);
  if (!(_DWORD)result)
  {
    __stringp = v3;
    strsep(&__stringp, ".");
    result = atoi(v3);
    ShouldUsePageMaxMask(void)::kernelVersion = result;
  }
  return result;
}

void HALB_IOBufferManager_Server::Allocate(HALB_IOBufferManager_Server *this, char a2)
{
  _DWORD *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  char *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  int *v30;
  int **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  HALB_MlockFailHandling *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int *v42;
  char *v43;
  unsigned int v44;
  _DWORD *v45;
  _DWORD *exception;
  char v48;
  char v49;
  _BYTE buf[12];
  __int16 v51;
  int v52;
  _BYTE __str[12];
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)MEMORY[0x1E0C85AC0];
  if (*((_BYTE *)this + 4))
    goto LABEL_6;
  v4 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
  if (v4 != -1)
  {
    *(_QWORD *)__str = &v49;
    *(_QWORD *)buf = __str;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion < 20)
LABEL_6:
    v5 = (*v3 + 304) & ~*v3;
  else
    v5 = 0x4000;
  v6 = 0;
  v7 = 1;
  do
  {
    v48 = v7;
    v8 = (char *)this + 24 * v6;
    v10 = *((_DWORD *)v8 + 2);
    v9 = v8 + 8;
    v11 = v9 + 8;
    v12 = (*((_DWORD *)v9 + 2) - v10) & 0xFFFFFFFC;
    if (*((_BYTE *)this + 4))
      goto LABEL_13;
    v13 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
    if (v13 != -1)
    {
      *(_QWORD *)__str = &v49;
      *(_QWORD *)buf = __str;
      std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
    }
    if (ShouldUsePageMaxMask(void)::kernelVersion < 20)
LABEL_13:
      v14 = (v12 + 4 + *v3) & ~*v3;
    else
      v14 = (v12 + 16387) & 0xFFFFC000;
    v5 += v14;
    v15 = *(_QWORD *)v9;
    if (*v11 != *(_QWORD *)v9)
    {
      v16 = 0;
      v17 = 1;
      do
      {
        v18 = *(_DWORD *)(v15 + 4 * v16);
        if (*((_BYTE *)this + 4))
          goto LABEL_21;
        v19 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
        if (v19 != -1)
        {
          *(_QWORD *)__str = &v49;
          *(_QWORD *)buf = __str;
          std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
        }
        if (ShouldUsePageMaxMask(void)::kernelVersion < 20)
LABEL_21:
          v20 = (v18 + *v3) & ~*v3;
        else
          v20 = (v18 + 0x3FFF) & 0xFFFFC000;
        v5 += v20;
        v16 = v17;
        v15 = *(_QWORD *)v9;
        ++v17;
      }
      while (v16 < (uint64_t)(*v11 - *(_QWORD *)v9) >> 2);
    }
    v7 = 0;
    v6 = 1;
  }
  while ((v48 & 1) != 0);
  if ((a2 & 1) != 0)
  {
    v21 = operator new();
    *(_QWORD *)v21 = &off_1E696EBC0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = v5;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 47) = 0;
    *(_WORD *)(v21 + 55) = 1;
    *(_WORD *)(v21 + 58) = 438;
    *(_DWORD *)(v21 + 60) = 0;
    HALB_SharedBuffer::Allocate_Server((HALB_SharedBuffer *)v21);
  }
  else
  {
    snprintf(__str, 0x1FuLL, "AudioIO%X", *(_DWORD *)this);
    v21 = operator new();
    *(_QWORD *)v21 = &off_1E696EBC0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = v5;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 47) = 0;
    *(_WORD *)(v21 + 55) = 1;
    *(_WORD *)(v21 + 58) = 438;
    *(_DWORD *)(v21 + 60) = 0;
    if (strlen(__str) >= 0x1F)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALB_SharedBuffer.cpp";
        v51 = 1024;
        v52 = 95;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::HALB_SharedBuffer(2): name is too long", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    strlcpy((char *)(v21 + 24), __str, 0x1FuLL);
    HALB_SharedBuffer::Allocate_Server((HALB_SharedBuffer *)v21);
  }
  *((_QWORD *)this + 7) = v21;
  v22 = *(_QWORD *)(v21 + 8);
  if (!v22)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315394;
      *(_QWORD *)&__str[4] = "HALB_IOBufferManager.cpp";
      v54 = 1024;
      v55 = 136;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::WriteTOC: the shared buffer isn't valid", __str, 0x12u);
      v22 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    }
    else
    {
      v22 = 0;
    }
  }
  if (*((_BYTE *)this + 4))
    goto LABEL_37;
  v23 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
  if (v23 != -1)
  {
    *(_QWORD *)__str = &v49;
    *(_QWORD *)buf = __str;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion <= 19)
LABEL_37:
    v24 = ~*v3 & (unint64_t)(*(_QWORD *)v3 + 304);
  else
    v24 = 0x4000;
  v25 = 0;
  v26 = 0;
  v27 = v22 + v24;
  v28 = 1;
  do
  {
    v29 = v28;
    v31 = (int **)((char *)this + 24 * v25 + 8);
    v30 = *v31;
    v32 = (char *)v31[1] - (char *)*v31;
    v33 = v32 >> 2;
    *(_DWORD *)(v27 + 4 * v26++) = v32 >> 2;
    if ((v32 >> 2))
    {
      v34 = ((unint64_t)v32 >> 2);
      do
      {
        if (!v33)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v35 = *v30++;
        *(_DWORD *)(v27 + 4 * v26++) = v35;
        --v33;
        --v34;
      }
      while (v34);
    }
    v28 = 0;
    v25 = 1;
  }
  while ((v29 & 1) != 0);
  v36 = *((_QWORD *)this + 7);
  v37 = *(HALB_MlockFailHandling **)(v36 + 8);
  if (v37)
  {
    if (*(_BYTE *)(v36 + 56))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      *(_DWORD *)__str = 136315394;
      *(_QWORD *)&__str[4] = "HALB_SharedBuffer.cpp";
      v54 = 1024;
      v55 = 291;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Lock: trying to lock an already locked buffer", __str, 0x12u);
      if (*(_BYTE *)(v36 + 56))
        return;
      v37 = *(HALB_MlockFailHandling **)(v36 + 8);
    }
    v38 = HALB_MlockFailHandling::_mlock(v37, *(_QWORD *)(v36 + 16));
    if (v38)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v40 = *(_QWORD *)(v36 + 8);
        v39 = *(_QWORD *)(v36 + 16);
        v41 = *__error();
        v42 = __error();
        v43 = strerror(*v42);
        *(_DWORD *)__str = 136316674;
        *(_QWORD *)&__str[4] = "HALB_SharedBuffer.cpp";
        v54 = 1024;
        v55 = 297;
        v56 = 2080;
        v57 = v36 + 24;
        v58 = 2048;
        v59 = v40;
        v60 = 2048;
        v61 = v39;
        v62 = 1024;
        v63 = v41;
        v64 = 2080;
        v65 = v43;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Lock: mlock failed: name %s, addr %p, byte size %zu, errno %d %s", __str, 0x40u);
      }
      v44 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
      if (v44 == 2)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__str = 136315650;
          *(_QWORD *)&__str[4] = "HALB_SharedBuffer.cpp";
          v54 = 1024;
          v55 = 301;
          v56 = 1024;
          LODWORD(v57) = v38;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Lock: failed to lock the buffer, Error: 0x%X", __str, 0x18u);
        }
        v45 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v45 = &off_1E69A1B30;
        v45[2] = v38;
      }
    }
    else
    {
      atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
    }
    *(_BYTE *)(v36 + 56) = v38 == 0;
  }
}

void sub_1B5A86020(_Unwind_Exception *a1)
{
  uint64_t v1;
  mach_port_name_t *v2;

  caulk::mach::mach_port::~mach_port(v2);
  MEMORY[0x1B5E50688](v1, 0x1081C40D3AE782ALL);
  _Unwind_Resume(a1);
}

unint64_t HALB_IOBufferManager_Server::GetIOBuffer(HALB_IOBufferManager_Server *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v38;
  _BYTE *v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (char *)this + 24 * a2;
  v9 = *((_QWORD *)v7 + 1);
  v8 = v7 + 8;
  v10 = (v8[1] - v9) >> 2;
  if (v10 <= a3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALB_IOBufferManager.cpp";
    v41 = 1024;
    v42 = 237;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOBuffer: the stream index is out of range", buf, 0x12u);
    v10 = (uint64_t)(v8[1] - *v8) >> 2;
  }
  if (v10 <= v6)
    return 0;
  v11 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*((_BYTE *)this + 4))
    goto LABEL_11;
  v12 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
  if (v12 != -1)
  {
    *(_QWORD *)buf = &v38;
    v39 = buf;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion <= 19)
LABEL_11:
    v13 = ~*MEMORY[0x1E0C85AC0] & (unint64_t)(*MEMORY[0x1E0C85AC0] + 304);
  else
    v13 = 0x4000;
  v15 = (_DWORD *)(v11 + v13);
  v16 = 4 * (v15[*v15 + 1] + *v15);
  if (*((_BYTE *)this + 4))
    goto LABEL_17;
  v17 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
  if (v17 != -1)
  {
    *(_QWORD *)buf = &v38;
    v39 = buf;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion < 20)
LABEL_17:
    v18 = (v16 + 8 + *MEMORY[0x1E0C85AC0]) & ~*MEMORY[0x1E0C85AC0];
  else
    v18 = (v16 + 16391) & 0xFFFFC000;
  v19 = 0;
  v20 = 0;
  result = 0;
  v21 = (unint64_t)v15 + v18;
  do
  {
    v35 = v19;
    if (!result)
    {
      v23 = 0;
      v22 = 0;
      v24 = (char *)this + 24 * v20;
      v25 = v24 + 8;
      v26 = v24 + 16;
      while (1)
      {
        v27 = v23;
        if (v23 >= (unint64_t)((uint64_t)(*v26 - *v25) >> 2))
        {
          result = 0;
          goto LABEL_21;
        }
        v28 = *(_DWORD *)(*v25 + 4 * v23);
        if (v20 == a2 && a3 == v23)
        {
          *a4 = v28;
          if (v28)
            result = v21;
          else
            result = 0;
          v22 = 1;
        }
        else
        {
          if (*((_BYTE *)this + 4))
            goto LABEL_36;
          v29 = atomic_load(&ShouldUsePageMaxMask(void)::checked);
          if (v29 != -1)
          {
            *(_QWORD *)buf = &v38;
            v39 = buf;
            std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
          }
          if (ShouldUsePageMaxMask(void)::kernelVersion < 20)
LABEL_36:
            v30 = (v28 + *MEMORY[0x1E0C85AC0]) & ~*MEMORY[0x1E0C85AC0];
          else
            v30 = (v28 + 0x3FFF) & 0xFFFFC000;
          v21 += v30;
          v31 = *((_QWORD *)this + 7);
          v32 = *(_QWORD *)(v31 + 8);
          v33 = *(_QWORD *)(v31 + 16);
          if (v21 >= v32 + v33 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALB_IOBufferManager.cpp";
            v41 = 1024;
            v42 = 269;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOBuffer: Buffer pointer out of bounds", buf, 0x12u);
            v34 = *((_QWORD *)this + 7);
            v32 = *(_QWORD *)(v34 + 8);
            v33 = *(_QWORD *)(v34 + 16);
          }
          if (v21 >= v32 + v33)
          {
            result = 0;
            *a4 = 0;
            return result;
          }
          result = 0;
        }
        v23 = v27 + 1;
        if (result)
          goto LABEL_21;
      }
    }
    v22 = 0;
LABEL_21:
    v19 = 1;
    v20 = 1;
  }
  while (((v22 | v35) & 1) == 0);
  return result;
}

vm_address_t HALB_IOBufferManager_Server::AllocateBuffer(vm_size_t size)
{
  unsigned int v1;
  unsigned int *v2;
  kern_return_t v3;
  kern_return_t v4;
  kern_return_t v5;
  vm_address_t v6;
  int v7;
  int *v8;
  char *v9;
  unsigned int v10;
  NSObject *v12;
  const char *v13;
  _DWORD *exception;
  vm_address_t address;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  vm_address_t v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)size)
  {
    v1 = size;
    address = 0;
    v2 = (unsigned int *)MEMORY[0x1E0C83DA0];
    v3 = vm_allocate(*MEMORY[0x1E0C83DA0], &address, size, 1);
    if (v3)
    {
      v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v17 = "HALB_IOBufferManager.cpp";
        v18 = 1024;
        v19 = 312;
        v20 = 1024;
        LODWORD(v21) = v5;
        v12 = MEMORY[0x1E0C81028];
        v13 = "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to allocate the buffer, Error: 0x%X";
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x18u);
      }
    }
    else
    {
      if (!address)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "HALB_IOBufferManager.cpp";
          v18 = 1024;
          v19 = 313;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: vm_allocate returned nullptr", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 5;
LABEL_20:
      }
      v4 = HALB_MlockFailHandling::_mlock((HALB_MlockFailHandling *)address, v1);
      if (!v4)
        return address;
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v6 = address;
        v7 = *__error();
        v8 = __error();
        v9 = strerror(*v8);
        *(_DWORD *)buf = 136316418;
        v17 = "HALB_IOBufferManager.cpp";
        v18 = 1024;
        v19 = 319;
        v20 = 2048;
        v21 = v6;
        v22 = 1024;
        v23 = v1;
        v24 = 1024;
        v25 = v7;
        v26 = 2080;
        v27 = v9;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to lock the buffer: addr %p, byte size %u, errno %d %s", buf, 0x32u);
      }
      v10 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
      if (v10 != 2)
        return address;
      MEMORY[0x1B5E513FC](*v2, address, v1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v17 = "HALB_IOBufferManager.cpp";
        v18 = 1024;
        v19 = 323;
        v20 = 1024;
        LODWORD(v21) = v5;
        v12 = MEMORY[0x1E0C81028];
        v13 = "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to lock the buffer, Error: 0x%X";
        goto LABEL_18;
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v5;
    goto LABEL_20;
  }
  return 0;
}

uint64_t HALB_MlockFailHandling::_mlock(HALB_MlockFailHandling *this, size_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 v4;
  std::chrono::steady_clock::time_point v5;
  BOOL v6;
  int v8;
  BOOL v9;
  int v10;
  CFDictionaryRef v11;
  _BYTE v13[2];
  __int16 v14;
  uint64_t ReporterID;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
  if (v2 == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "HALB_IOBufferManager.cpp";
      v18 = 1024;
      v19 = 693;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_MlockFailHandling::_mlock: synthesized a failure and did not lock", buf, 0x12u);
    }
    return 35;
  }
  else
  {
    v3 = mlock(this, a2);
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v17 = "HALB_IOBufferManager.cpp";
        v18 = 1024;
        v19 = 683;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  wiredlog: mlock failure event seen.", buf, 0x12u);
      }
      do
        v4 = __ldaxr(HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall);
      while (__stlxr(1u, HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall));
      if ((v4 & 1) == 0)
      {
        v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef
          && (double)(v5.__d_.__rep_ - HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef) / 1000000000.0 <= 10.0)
        {
          atomic_store(0, HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall);
        }
        else
        {
          HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef = std::chrono::steady_clock::now().__d_.__rep_;
          atomic_store(0, HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall);
          if (MEMORY[0x1E0DDE868])
            v6 = MEMORY[0x1E0DDE8A0] == 0;
          else
            v6 = 1;
          v8 = !v6 && MEMORY[0x1E0DDE858] != 0;
          if (MEMORY[0x1E0DDE8A8])
            v9 = MEMORY[0x1E0DDE848] == 0;
          else
            v9 = 1;
          if (v9)
            v10 = 0;
          else
            v10 = v8;
          v13[0] = v10;
          v14 = 19;
          ReporterID = 0;
          if (v10 == 1)
          {
            ReporterID = CAReportingClientCreateReporterID();
            CAReportingClientStartReporter();
            if (v13[0])
            {
              v11 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v17 = "HALB_IOBufferManager.cpp";
                v18 = 1024;
                v19 = 666;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  wiredlog: requesting report from service.", buf, 0x12u);
              }
              CAReportingClientSendMessage();
              CFRelease(v11);
            }
          }
          HALB_MlockFailHandling::WiredLoggerSession::~WiredLoggerSession((HALB_MlockFailHandling::WiredLoggerSession *)v13);
        }
      }
    }
  }
  return v3;
}

void sub_1B5A86A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_MlockFailHandling::WiredLoggerSession::~WiredLoggerSession((HALB_MlockFailHandling::WiredLoggerSession *)&a9);
  _Unwind_Resume(a1);
}

void HALB_MlockFailHandling::WiredLoggerSession::~WiredLoggerSession(HALB_MlockFailHandling::WiredLoggerSession *this)
{
  if (*(_BYTE *)this)
  {
    CAReportingClientStopReporter();
    CAReportingClientDestroyReporterID();
  }
}

void HALB_IOBufferManager_Server::FreeBuffer(HALB_IOBufferManager_Server *this, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int *v8;
  char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  HALB_IOBufferManager_Server *v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v4 = a2;
    v5 = munlock(this, a2);
    if (!v5)
      JUMPOUT(0x1B5E513FCLL);
    v6 = v5;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v7 = *__error();
      v8 = __error();
      v9 = strerror(*v8);
      v10 = 136316418;
      v11 = "HALB_IOBufferManager.cpp";
      v12 = 1024;
      v13 = 338;
      v14 = 2048;
      v15 = this;
      v16 = 1024;
      v17 = a2;
      v18 = 1024;
      v19 = v7;
      v20 = 2080;
      v21 = v9;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: munlock failed: addr %p, byte size %u, errno %d %s", (uint8_t *)&v10, 0x32u);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "HALB_IOBufferManager.cpp";
      v12 = 1024;
      v13 = 340;
      v14 = 1024;
      LODWORD(v15) = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: munlock failed, Error: 0x%X", (uint8_t *)&v10, 0x18u);
    }
    MEMORY[0x1B5E513FC](*MEMORY[0x1E0C83DA0], this, v4);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "HALB_IOBufferManager.cpp";
      v12 = 1024;
      v13 = 344;
      v14 = 1024;
      LODWORD(v15) = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: vm_deallocate failed, Error: 0x%X", (uint8_t *)&v10, 0x18u);
    }
  }
}

void HALS_MetaStream::Activate(HALS_MetaStream *this)
{
  HALS_Object *v2;

  (*(void (**)(HALS_MetaStream *))(*(_QWORD *)this + 296))(this);
  HALS_Object::Activate(this, v2);
}

void HALS_MetaStream::~HALS_MetaStream(AMCP::Utility::Dispatch_Queue **this)
{
  HALS_MetaStream::~HALS_MetaStream(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unsigned __int8 v4;

  *this = (AMCP::Utility::Dispatch_Queue *)off_1E6983490;
  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  v3 = this[18];
  if (v3)
    HALS_ObjectMap::ReleaseObject_LongTerm(v3, v2);
  if (g_static_start_options == 1)
  {
    do
    {
      AMCP::Utility::Dispatch_Queue::flush_all_work(this[21]);
      v4 = atomic_load((unsigned __int8 *)this[21] + 33);
    }
    while ((v4 & 1) != 0);
  }
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](this + 21, 0);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)(this + 10));
  HALS_Object::~HALS_Object((HALS_Object *)this);
}

uint64_t HALS_MetaStream::HasProperty(HALS_MetaStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v9;
  HALB_Mutex *v10;
  HALS_IODevice *v11;
  unsigned int *v12;
  HALS_ObjectMap *v13;
  uint64_t HasProperty;
  HALS_Object *v15;
  HALS_Object *v16;
  _QWORD v17[8];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v31;

  if (!(*(unsigned int (**)(HALS_MetaStream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 176))(this, a3, a4))return 0;
  if (a3->mSelector == 1935894638)
    return HALS_Stream::HasProperty(this, a2, a3, a4);
  v26 = 0;
  v27 = &v26;
  v28 = 0x3002000000;
  v29 = __Block_byref_object_copy__6876;
  v30 = __Block_byref_object_dispose__6877;
  v31 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK15HALS_MetaStream11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v17[3] = &unk_1E69835D8;
  v17[4] = &v26;
  v17[5] = &v18;
  v17[6] = &v22;
  v17[7] = this;
  v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v17);
  v11 = (HALS_IODevice *)v27[5];
  if (v11)
  {
    v12 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v11, *((_BYTE *)v23 + 24), *((_DWORD *)v19 + 6));
    v13 = (HALS_ObjectMap *)v12;
    if (v12)
      HasProperty = (*(uint64_t (**)(unsigned int *, _QWORD, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)v12 + 88))(v12, v12[4], a3, a4);
    else
      HasProperty = HALS_Stream::HasProperty(this, a2, a3, a4);
    v9 = HasProperty;
    HALS_ObjectMap::ReleaseObject(v13, v15);
  }
  else
  {
    v9 = HALS_Stream::HasProperty(this, a2, a3, a4);
  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  HALS_ObjectMap::ReleaseObject(v31, v16);
  return v9;
}

void sub_1B5A86EE0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  HALS_ObjectMap *v21;
  uint64_t v22;
  HALS_Object *v24;

  HALS_ObjectMap::ReleaseObject(v21, a2);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v22 - 96), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v22 - 56), v24);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::IsPropertySettable(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  HALB_Mutex *v9;
  HALS_IODevice *v10;
  unsigned int *v11;
  HALS_ObjectMap *v12;
  uint64_t IsPropertySettable;
  HALS_Object *v14;
  uint64_t v15;
  HALS_Object *v16;
  _DWORD *exception;
  _QWORD v18[8];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v32;

  if (((*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1935894638)
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  v27 = 0;
  v28 = &v27;
  v29 = 0x3002000000;
  v30 = __Block_byref_object_copy__6876;
  v31 = __Block_byref_object_dispose__6877;
  v32 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZNK15HALS_MetaStream18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v18[3] = &unk_1E6983600;
  v18[4] = &v27;
  v18[5] = &v19;
  v18[6] = &v23;
  v18[7] = this;
  v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v18);
  v10 = (HALS_IODevice *)v28[5];
  if (v10)
  {
    v11 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v10, *((_BYTE *)v24 + 24), *((_DWORD *)v20 + 6));
    v12 = (HALS_ObjectMap *)v11;
    if (v11)
      IsPropertySettable = (*(uint64_t (**)(unsigned int *, _QWORD, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)v11 + 96))(v11, v11[4], a3, a4);
    else
      IsPropertySettable = HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    v15 = IsPropertySettable;
    HALS_ObjectMap::ReleaseObject(v12, v14);
  }
  else
  {
    v15 = HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  HALS_ObjectMap::ReleaseObject(v32, v16);
  return v15;
}

void sub_1B5A87150(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  HALS_ObjectMap *v21;
  uint64_t v22;
  HALS_Object *v24;

  HALS_ObjectMap::ReleaseObject(v21, a2);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v22 - 96), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v22 - 56), v24);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::GetPropertyDataSize(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v12;
  HALB_Mutex *v13;
  HALS_IODevice *v14;
  unsigned int *v15;
  AudioObjectPropertySelector mSelector;
  uint64_t PropertyDataSize;
  HALS_Object *v18;
  HALB_Mutex *v19;
  _QWORD *v20;
  uint64_t v21;
  HALS_Object *v22;
  _DWORD *exception;
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[8];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;

  if (((*(uint64_t (**)(HALS_MetaStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x3002000000;
  v41 = __Block_byref_object_copy__6876;
  v42 = __Block_byref_object_dispose__6877;
  v43 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 0;
  v12 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 0x40000000;
  v29[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
  v29[3] = &unk_1E6983628;
  v29[4] = &v38;
  v29[5] = &v30;
  v29[6] = &v34;
  v29[7] = this;
  v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v29);
  v14 = (HALS_IODevice *)v39[5];
  if (v14)
  {
    v15 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v14, *((_BYTE *)v35 + 24), *((_DWORD *)v31 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    v15 = 0;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935894637)
  {
    if (mSelector == 1885762595)
    {
      if (v15)
        goto LABEL_22;
      v25[0] = v12;
      v25[1] = 0x40000000;
      v25[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5;
      v25[3] = &unk_1E69836C8;
      v25[4] = &v44;
      v25[5] = this;
      v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
      v20 = v25;
    }
    else
    {
      if (mSelector != 1885762657)
      {
LABEL_21:
        if (!v15)
          goto LABEL_9;
LABEL_22:
        PropertyDataSize = (*(uint64_t (**)(unsigned int *, _QWORD, AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)v15 + 104))(v15, v15[4], a3, a4, a5, a6);
        goto LABEL_23;
      }
      if (v15)
        goto LABEL_22;
      v26[0] = v12;
      v26[1] = 0x40000000;
      v26[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v26[3] = &unk_1E69836A0;
      v26[4] = &v44;
      v26[5] = this;
      v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
      v20 = v26;
    }
  }
  else
  {
    switch(mSelector)
    {
      case 0x73666D61u:
        if (v15)
          goto LABEL_22;
        v28[0] = v12;
        v28[1] = 0x40000000;
        v28[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
        v28[3] = &unk_1E6983650;
        v28[4] = &v44;
        v28[5] = this;
        v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
        v20 = v28;
        break;
      case 0x73666D23u:
        if (v15)
          goto LABEL_22;
        v27[0] = v12;
        v27[1] = 0x40000000;
        v27[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
        v27[3] = &unk_1E6983678;
        v27[4] = &v44;
        v27[5] = this;
        v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
        v20 = v27;
        break;
      case 0x7363686Eu:
LABEL_9:
        PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
LABEL_23:
        v21 = PropertyDataSize;
        *((_DWORD *)v45 + 6) = PropertyDataSize;
        goto LABEL_24;
      default:
        goto LABEL_21;
    }
  }
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v20);
  v21 = *((unsigned int *)v45 + 6);
LABEL_24:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v15, v18);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
  HALS_ObjectMap::ReleaseObject(v43, v22);
  _Block_object_dispose(&v44, 8);
  return v21;
}

void sub_1B5A87598(_Unwind_Exception *a1)
{
  uint64_t v1;
  HALS_Object *v3;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v1 - 136), v3);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::GetPropertyData(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, HALS_Client *a9)
{
  _BOOL4 v17;
  HALB_Mutex *v18;
  HALS_IODevice *v19;
  unsigned int *v20;
  signed int mSelector;
  HALB_Mutex *v22;
  HALB_Mutex *v23;
  _DWORD *v24;
  HALB_Mutex *v25;
  HALB_Mutex *v26;
  HALS_Object *v27;
  HALB_Mutex *v28;
  _DWORD *v29;
  BOOL v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  HALB_Mutex *v34;
  HALB_Mutex *v35;
  HALB_Mutex *v36;
  HALB_Mutex *v37;
  int v38;
  HALB_Mutex *v39;
  BOOL v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t v43;
  HALB_Mutex *v44;
  HALS_Object *v45;
  HALS_ObjectMap *v46;
  uint64_t v47;
  HALS_ObjectMap *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  HALS_Object *v58;
  int v59;
  int v60;
  _DWORD *exception;
  NSObject *v62;
  const char *v63;
  _DWORD *v64;
  NSObject *v65;
  const char *v66;
  _DWORD *v67;
  _BOOL4 v68;
  _QWORD v69[5];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD v74[7];
  _QWORD v75[7];
  int v76;
  _QWORD v77[7];
  int v78;
  _QWORD v79[5];
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _QWORD v85[7];
  _QWORD v86[7];
  int v87;
  BOOL v88;
  _QWORD v89[7];
  int v90;
  BOOL v91;
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[5];
  _QWORD v95[9];
  _QWORD v96[3];
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t, HALS_Object *);
  HALS_ObjectMap *v111;
  uint8_t buf[4];
  const char *v113;
  __int16 v114;
  int v115;
  _BYTE v116[24];
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  if (a9)
    v17 = *((_BYTE *)a9 + 258) == 0;
  else
    v17 = 1;
  v106 = 0;
  v107 = &v106;
  v108 = 0x3002000000;
  v109 = __Block_byref_object_copy__6876;
  v110 = __Block_byref_object_dispose__6877;
  v111 = 0;
  v102 = 0;
  v103 = &v102;
  v104 = 0x2000000000;
  v105 = 0;
  v98 = 0;
  v99 = &v98;
  v100 = 0x2000000000;
  v101 = 0;
  v96[0] = 0;
  v96[1] = v96;
  v96[2] = 0x2000000000;
  v97 = 0;
  v95[0] = MEMORY[0x1E0C809B0];
  v95[1] = 0x40000000;
  v95[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
  v95[3] = &unk_1E69836F0;
  v95[8] = this;
  v95[4] = &v106;
  v95[5] = &v98;
  v95[6] = &v102;
  v95[7] = v96;
  v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v95);
  v68 = v17;
  v19 = (HALS_IODevice *)v107[5];
  if (v19)
  {
    v20 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v19, *((_BYTE *)v103 + 24), *((_DWORD *)v99 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    v20 = 0;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935894637)
  {
    if (mSelector <= 1885762656)
    {
      if (mSelector == 1885762592)
        goto LABEL_39;
      if (mSelector != 1885762595)
      {
        if (mSelector == 1885762623)
        {
          if (v20)
            goto LABEL_79;
          if (a4 > 0x27)
          {
            *a5 = 40;
            *(_QWORD *)v116 = 0;
            *(_QWORD *)&v116[8] = v116;
            *(_QWORD *)&v116[16] = 0x2000000000;
            LOBYTE(v117) = 0;
            v74[0] = MEMORY[0x1E0C809B0];
            v74[1] = 0x40000000;
            v74[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
            v74[3] = &unk_1E6983860;
            v74[4] = v116;
            v74[5] = this;
            v74[6] = a6;
            v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v74);
            if (!*(_BYTE *)(*(_QWORD *)&v116[8] + 24))
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v113 = "HALS_MetaStream.cpp";
                v114 = 1024;
                v115 = 536;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
              }
              v24 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v24 = &off_1E69A1B30;
              v24[2] = 560226676;
            }
            goto LABEL_68;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v116 = 136315394;
            *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 532;
            v65 = MEMORY[0x1E0C81028];
            v66 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
            goto LABEL_121;
          }
LABEL_122:
          v67 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v67 = &off_1E69A1B30;
          v67[2] = 561211770;
        }
        goto LABEL_78;
      }
      if (v20)
        goto LABEL_79;
      *(_QWORD *)v116 = 0;
      *(_QWORD *)&v116[8] = v116;
      *(_QWORD *)&v116[16] = 0x2000000000;
      v117 = 0;
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 0x40000000;
      v75[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_24;
      v75[3] = &unk_1E6983838;
      v76 = a4;
      v75[4] = v116;
      v75[5] = this;
      v75[6] = a6;
      v39 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v39, (uint64_t)v75);
LABEL_66:
      v38 = 40 * *(_DWORD *)(*(_QWORD *)&v116[8] + 24);
      goto LABEL_67;
    }
    if (mSelector == 1885762657)
    {
      if (!v20)
      {
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v116[8] = v116;
        *(_QWORD *)&v116[16] = 0x2000000000;
        v117 = 0;
        v77[0] = MEMORY[0x1E0C809B0];
        v77[1] = 0x40000000;
        v77[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_22;
        v77[3] = &unk_1E6983810;
        v78 = a4;
        v77[4] = v116;
        v77[5] = this;
        v77[6] = a6;
        v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v77);
        goto LABEL_63;
      }
LABEL_79:
      (*(void (**)(unsigned int *, _QWORD, AudioObjectPropertyAddress *, uint64_t, unsigned int *, uint64_t *, uint64_t, uint64_t *, HALS_Client *))(*(_QWORD *)v20 + 112))(v20, v20[4], a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_80;
    }
    if (mSelector == 1885762669)
    {
      if (v20)
        goto LABEL_79;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_122;
        *(_DWORD *)v116 = 136315394;
        *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v116[12] = 1024;
        *(_DWORD *)&v116[14] = 550;
        v65 = MEMORY[0x1E0C81028];
        v66 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_121;
      }
      *a5 = 40;
      if (a8)
        v40 = (_DWORD)a7 == 40;
      else
        v40 = 0;
      if (v40)
        v41 = a8;
      else
        v41 = a6;
      v42 = *((_OWORD *)v41 + 1);
      v70 = *(_OWORD *)v41;
      v71 = v42;
      v43 = v41[4];
      v69[0] = MEMORY[0x1E0C809B0];
      v69[1] = 0x40000000;
      v69[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28;
      v69[3] = &__block_descriptor_tmp_29_6912;
      v69[4] = this;
      v72 = v43;
      v73 = a6;
      v44 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v44, (uint64_t)v69);
      goto LABEL_80;
    }
    if (mSelector != 1935762292)
      goto LABEL_78;
    if (v20)
      goto LABEL_79;
    if (!*((_BYTE *)this + 72))
    {
LABEL_88:
      HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_80;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_122;
      *(_DWORD *)v116 = 136315394;
      *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v116[12] = 1024;
      *(_DWORD *)&v116[14] = 333;
      v65 = MEMORY[0x1E0C81028];
      v66 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
      goto LABEL_121;
    }
    v94[0] = MEMORY[0x1E0C809B0];
    v94[1] = 0x40000000;
    v94[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
    v94[3] = &__block_descriptor_tmp_11_6894;
    v94[4] = a6;
    v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v94);
    goto LABEL_60;
  }
  if (mSelector <= 1936092478)
  {
    if (mSelector != 1935894638)
    {
      if (mSelector != 1935960434)
      {
        if (mSelector != 1936092451)
          goto LABEL_78;
        if (v20)
          goto LABEL_79;
        *(_QWORD *)v116 = 0;
        *(_QWORD *)&v116[8] = v116;
        *(_QWORD *)&v116[16] = 0x2000000000;
        v117 = 0;
        v86[0] = MEMORY[0x1E0C809B0];
        v86[1] = 0x40000000;
        v86[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
        v86[3] = &unk_1E69837A0;
        v88 = v68;
        v87 = a4;
        v86[4] = v116;
        v86[5] = this;
        v86[6] = a6;
        v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v86);
        goto LABEL_66;
      }
      if (a4 > 3)
      {
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 0x40000000;
        v93[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12;
        v93[3] = &__block_descriptor_tmp_13_6896;
        v93[4] = this;
        v93[5] = a6;
        v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v93);
        goto LABEL_60;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_110:
        v64 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v64 = &off_1E69A1B30;
        v64[2] = 561211770;
      }
      *(_DWORD *)v116 = 136315394;
      *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v116[12] = 1024;
      *(_DWORD *)&v116[14] = 347;
      v62 = MEMORY[0x1E0C81028];
      v63 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
LABEL_109:
      _os_log_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_ERROR, v63, v116, 0x12u);
      goto LABEL_110;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_110;
      *(_DWORD *)v116 = 136315394;
      *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v116[12] = 1024;
      *(_DWORD *)&v116[14] = 356;
      v62 = MEMORY[0x1E0C81028];
      v63 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
      goto LABEL_109;
    }
    v92[0] = MEMORY[0x1E0C809B0];
    v92[1] = 0x40000000;
    v92[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
    v92[3] = &__block_descriptor_tmp_15_6898;
    v92[4] = this;
    v92[5] = a6;
    v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v92);
LABEL_60:
    *a5 = 4;
    goto LABEL_80;
  }
  if (mSelector <= 1936092524)
  {
    if (mSelector != 1936092479)
    {
      if (mSelector == 1936092513)
      {
        if (!v20)
        {
          *(_QWORD *)v116 = 0;
          *(_QWORD *)&v116[8] = v116;
          *(_QWORD *)&v116[16] = 0x2000000000;
          v117 = 0;
          v89[0] = MEMORY[0x1E0C809B0];
          v89[1] = 0x40000000;
          v89[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v89[3] = &unk_1E6983778;
          v91 = v68;
          v90 = a4;
          v89[5] = this;
          v89[4] = v116;
          v89[6] = a6;
          v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v89);
LABEL_63:
          v38 = 56 * *(_DWORD *)(*(_QWORD *)&v116[8] + 24);
LABEL_67:
          *a5 = v38;
LABEL_68:
          _Block_object_dispose(v116, 8);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (v20)
      goto LABEL_79;
    if (a4 > 0x27)
    {
      *a5 = 40;
      *(_QWORD *)v116 = 0;
      *(_QWORD *)&v116[8] = v116;
      *(_QWORD *)&v116[16] = 0x2000000000;
      LOBYTE(v117) = 0;
      v85[0] = MEMORY[0x1E0C809B0];
      v85[1] = 0x40000000;
      v85[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18;
      v85[3] = &unk_1E69837C8;
      v85[4] = v116;
      v85[5] = this;
      v85[6] = a6;
      v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v85);
      if (!*(_BYTE *)(*(_QWORD *)&v116[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v113 = "HALS_MetaStream.cpp";
          v114 = 1024;
          v115 = 405;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", buf, 0x12u);
        }
        v29 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v29 = &off_1E69A1B30;
        v29[2] = 560226676;
      }
      goto LABEL_68;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v116 = 136315394;
      *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v116[12] = 1024;
      *(_DWORD *)&v116[14] = 401;
      v65 = MEMORY[0x1E0C81028];
      v66 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
LABEL_121:
      _os_log_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_ERROR, v66, v116, 0x12u);
      goto LABEL_122;
    }
    goto LABEL_122;
  }
  if (mSelector == 1936092525)
  {
    if (v20)
      goto LABEL_79;
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_122;
      *(_DWORD *)v116 = 136315394;
      *(_QWORD *)&v116[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v116[12] = 1024;
      *(_DWORD *)&v116[14] = 419;
      v65 = MEMORY[0x1E0C81028];
      v66 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
      goto LABEL_121;
    }
    *a5 = 40;
    if (a8)
      v30 = (_DWORD)a7 == 40;
    else
      v30 = 0;
    if (v30)
      v31 = a8;
    else
      v31 = a6;
    v32 = *(_OWORD *)v31;
    v81 = *((_OWORD *)v31 + 1);
    v33 = v31[4];
    v80 = v32;
    v79[0] = MEMORY[0x1E0C809B0];
    v79[1] = 0x40000000;
    v79[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
    v79[3] = &__block_descriptor_tmp_21_6905;
    v82 = v33;
    v83 = a6;
    v79[4] = this;
    v84 = v68;
    v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v79);
    goto LABEL_80;
  }
  if (mSelector != 1936092532)
  {
LABEL_78:
    if (v20)
      goto LABEL_79;
    goto LABEL_88;
  }
LABEL_39:
  if (v20)
  {
    (*(void (**)(unsigned int *, _QWORD, AudioObjectPropertyAddress *, uint64_t, unsigned int *, uint64_t *, uint64_t, uint64_t *, HALS_Client *))(*(_QWORD *)v20 + 112))(v20, v20[4], a3, a4, a5, a6, a7, a8, a9);
    *(double *)a6 = (*(double (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
    goto LABEL_80;
  }
  if (*((_BYTE *)this + 72))
  {
    v46 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if ((_DWORD)v46)
    {
      v47 = HALS_ObjectMap::CopyObjectByObjectID(v46);
      v48 = (HALS_ObjectMap *)v47;
      if (v47)
      {
        v49 = *(_QWORD *)(v47 + 248);
        v50 = *(_QWORD *)(v47 + 256);
        *(_QWORD *)v116 = v49;
        *(_QWORD *)&v116[8] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        v53 = *(_OWORD *)(v49 + 24);
        v54 = *(_OWORD *)(v49 + 40);
        a6[4] = *(_QWORD *)(v49 + 56);
        *(_OWORD *)a6 = v53;
        *((_OWORD *)a6 + 1) = v54;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v116);
      }
      else
      {
        *(_OWORD *)a6 = k_default_multitap_format;
        *((_OWORD *)a6 + 1) = unk_1B5D60538;
        a6[4] = 32;
      }
      *(double *)a6 = HALS_MetaStream::GetTapSampleRate(this);
      if (*((_DWORD *)a6 + 2) == 1819304813 && (*((_BYTE *)a6 + 12) & 0x40) == 0)
      {
        if (v68)
          v59 = 9;
        else
          v59 = 11;
        v60 = 4 * *((_DWORD *)a6 + 7);
        *((_DWORD *)a6 + 3) = v59;
        *((_DWORD *)a6 + 4) = v60;
        *((_DWORD *)a6 + 5) = 1;
        *((_DWORD *)a6 + 6) = v60;
        *((_DWORD *)a6 + 8) = 32;
      }
      HALS_ObjectMap::ReleaseObject(v48, v58);
      goto LABEL_80;
    }
    *(_OWORD *)a6 = k_default_multitap_format;
    *((_OWORD *)a6 + 1) = unk_1B5D60538;
    a6[4] = 32;
    *(double *)a6 = HALS_MetaStream::GetTapSampleRate(this);
    if (*((_DWORD *)a6 + 2) != 1819304813)
      goto LABEL_80;
  }
  else
  {
    *(double *)a6 = (*(double (**)(_QWORD))(**((_QWORD **)this + 8) + 264))(*((_QWORD *)this + 8));
    a6[1] = 0x96C70636DLL;
    v55 = *((_DWORD *)this + 34);
    *((_DWORD *)a6 + 4) = 4 * v55;
    *((_DWORD *)a6 + 5) = 1;
    *((_DWORD *)a6 + 6) = 4 * v55;
    *((_DWORD *)a6 + 7) = v55;
    *((_DWORD *)a6 + 8) = 32;
  }
  if ((*((_BYTE *)a6 + 12) & 0x40) == 0)
  {
    if (v68)
      v56 = 9;
    else
      v56 = 11;
    v57 = 4 * *((_DWORD *)a6 + 7);
    *((_DWORD *)a6 + 3) = v56;
    *((_DWORD *)a6 + 4) = v57;
    *((_DWORD *)a6 + 5) = 1;
    *((_DWORD *)a6 + 6) = v57;
    *((_DWORD *)a6 + 8) = 32;
  }
LABEL_80:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v27);
  _Block_object_dispose(v96, 8);
  _Block_object_dispose(&v98, 8);
  _Block_object_dispose(&v102, 8);
  _Block_object_dispose(&v106, 8);
  HALS_ObjectMap::ReleaseObject(v111, v45);
}

