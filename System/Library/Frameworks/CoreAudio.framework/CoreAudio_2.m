void sub_1B58A8DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = *(std::__shared_weak_count **)(v25 - 120);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971148;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971148;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6971148;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E6971148;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v10[3];
  CFTypeRef cf;
  AMCP::Address *v12;
  std::__shared_weak_count *v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(v2 + 104);
  if (v3)
    CFRetain(*(CFTypeRef *)(v2 + 104));
  cf = v3;
  AMCP::Meta::Device::get_device_core(&v12, *(std::__shared_mutex_base **)(*(_QWORD *)(v2 + 8) + 16), (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  if (v12)
  {
    v4 = *(_DWORD *)(a1 + 24);
    v10[0] = 1819569763;
    v10[1] = v4;
    v10[2] = 0;
    v5 = AMCP::Core::Core::call_operation_function<unsigned int>(v12, v10);
  }
  else
  {
    v5 = 0;
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1B58A9130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device35make_clock_device_delegate_propertyILj1819569763EEEvRNS_4Core13Operation_SetEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971048;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971048;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6971048;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6971048;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  const __CFString *v3;
  uint64_t v4;
  std::__shared_mutex_base *v5;
  CFComparisonResult v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  const __CFString *v14;
  std::__shared_mutex_base *v15;
  char v16;
  __int128 v17;
  uint64_t v18[2];
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFString *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = a1 + 8;
  v5 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 8) + 176);
  v14 = v3;
  v15 = v5;
  v16 = 1;
  std::__shared_mutex_base::lock(v5);
  v6 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(*(_QWORD *)(a1 + 8) + 104), &v14);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
  if (v6)
  {
    v7 = operator new(0x20uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E69A0170;
    *((_BYTE *)v7 + 24) = 0;
    v18[0] = (uint64_t)(v7 + 3);
    v18[1] = (uint64_t)v7;
    v19 = 0;
    v20 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 32);
    v10 = *(_DWORD *)(*(_QWORD *)v4 + 40);
    v9 = *(_DWORD *)(*(_QWORD *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v15, v18);
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = &v14;
    v22 = 0;
    v11 = (char *)operator new(0x38uLL);
    *(_QWORD *)v11 = &off_1E69710B8;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v11 + 8), (uint64_t *)&v15);
    *(_OWORD *)(v11 + 40) = v17;
    v22 = v11;
    AMCP::Core::Conductor::enqueue_config_change(v8, v9, v10, 9, (uint64_t)v21);
    v12 = v22;
    if (v22 == v21)
    {
      v13 = 4;
      v12 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_9:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v15);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
        v3 = v14;
        goto LABEL_10;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
    goto LABEL_9;
  }
LABEL_10:
  if (v3)
    CFRelease(v3);
}

void sub_1B58A9494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69710B8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69710B8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E69710B8;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B58A9638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69710B8;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  const void **v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v12;
  NSObject *sig;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_mutex_base *v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v19;
    sig = v18->__mut_.__m_.__sig;
    if (*(_QWORD *)v19)
    {
      v14 = (unint64_t *)(*(_QWORD *)v19 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(sig, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(v18) = 67109890;
      HIDWORD(v18) = v17;
      *(_WORD *)v19 = 2080;
      *(_QWORD *)&v19[2] = "Meta_Device_Core.cpp";
      v20 = 1024;
      v21 = 369;
      v22 = 2080;
      v23 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, sig, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v18, 0x22u);
    }
    abort();
  }
  v18 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 40) + 176);
  v19[0] = 1;
  std::__shared_mutex_base::lock(v18);
  v3 = *(const void ***)(a1 + 48);
  v4 = **(_QWORD **)(a1 + 40);
  v5 = *(const void **)(v4 + 104);
  v6 = *v3;
  *(_QWORD *)(v4 + 104) = *v3;
  if (v6)
    CFRetain(v6);
  if (v5)
    CFRelease(v5);
  v7 = **(_QWORD **)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(const void **)(v7 + 104);
  if (!v9)
  {
    v10 = *(const void **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = 0;
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v7 + 104));
  v10 = *(const void **)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v9;
  CFRetain(v9);
  if (v10)
LABEL_10:
    CFRelease(v10);
LABEL_11:
  if (v9)
    CFRelease(v9);
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
}

void sub_1B58A98C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK4$_13clEN10applesauce2CF9StringRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void AMCP::Meta::Device::update_core(AMCP::Meta::Device *this)
{
  unsigned int *v2;
  _QWORD *i;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  __int128 v9;
  int v10;
  unsigned int *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  int v14;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v11, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 10));
  v2 = v11;
  if (v11)
  {
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v10 = 1065353216;
    AMCP::Meta::Device::update_core_common((uint64_t)this, (uint64_t)__p);
    v13 = (uint64_t)(v2 + 12);
    LOBYTE(v14) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    for (i = (_QWORD *)v9; i; i = (_QWORD *)*i)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(i[4] + 40), i + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    v13 = 0x676C6F626F776E72;
    v14 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v13, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v9);
    v4 = __p[0];
    __p[0] = 0;
    if (v4)
      operator delete(v4);
  }
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B58A9A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned int *caulk::concurrent::shared_spin_lock::lock(unsigned int *this)
{
  unsigned int *v1;
  unsigned int i;
  uint64_t v4;

  v1 = this;
  do
  {
    if (__ldaxr(this))
    {
      for (i = 0; ; ++i)
      {
        __clrex();
        if (i >= 0x65)
        {
          v4 = mach_absolute_time();
          this = (unsigned int *)mach_wait_until(v4 + 24000);
        }
        while (!__ldaxr(v1))
        {
          if (!__stlxr(0x80000000, v1))
            return this;
        }
      }
    }
  }
  while (__stlxr(0x80000000, this));
  return this;
}

uint64_t std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100](uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (*(_BYTE *)(result + 8))
  {
    v1 = *(unsigned int **)result;
    while (1)
    {
      v2 = __ldaxr(v1);
      if (v2 != 0x80000000)
        break;
      if (!__stlxr(0, v1))
        return result;
    }
    __clrex();
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2, unsigned int *a3)
{
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v14[32];
  void (*v15)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(a1, a2))
    return (_QWORD *)*a3;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)a1, (unsigned int *)a2);
  v6 = v16;
  if (!v16)
    goto LABEL_9;
  v7 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v6);
      v6 = (_QWORD *)AMCP::Thing::convert_to<unsigned int>((uint64_t)v14);
      if (v15)
        v15(0, v14, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v8 = 1;
    goto LABEL_10;
  }
  v6 = (_QWORD *)AMCP::Core::Operation::call_function<unsigned int>(v6);
LABEL_5:
  v8 = 0;
LABEL_10:
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
    return (_QWORD *)*a3;
  return v6;
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970FC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970FC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970FC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970FC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result[1];
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
    result = CFRetain(*(CFTypeRef *)(v3 + 104));
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986BB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986BB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6986BB8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58A9ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6986BB8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *v13;
  int v14;
  const char *v15;
  std::runtime_error v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  const char *v25;
  std::runtime_error v26;
  CFTypeRef cf;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<applesauce::CF::StringRef>(&cf, a2);
  v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = *(std::__shared_weak_count **)v43;
    v18 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v19 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::StringRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v24);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v25 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v25)
      (*(void (**)(const char *))(*(_QWORD *)v25 + 24))(v25);
    v26 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v43;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v9 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::StringRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v14 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v14);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v13, (const std::runtime_error *)buf);
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v46;
    v13[1].__imp_.__imp_ = v46;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v47;
    LODWORD(v13[3].__vftable) = v48;
    v13[2] = v16;
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 48))(v6, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B58AA4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970EC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970EC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970EC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970EC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  const __CFString *v3;
  uint64_t v4;
  std::__shared_mutex_base *v5;
  CFComparisonResult v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  const __CFString *v14;
  std::__shared_mutex_base *v15;
  char v16;
  __int128 v17;
  uint64_t v18[2];
  int v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFString *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = a1 + 8;
  v5 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 8) + 176);
  v14 = v3;
  v15 = v5;
  v16 = 1;
  std::__shared_mutex_base::lock(v5);
  v6 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(*(_QWORD *)(a1 + 8) + 96), &v14);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
  if (v6)
  {
    v7 = operator new(0x20uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E69A0170;
    *((_BYTE *)v7 + 24) = 0;
    v18[0] = (uint64_t)(v7 + 3);
    v18[1] = (uint64_t)v7;
    v19 = 0;
    v20 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 32);
    v10 = *(_DWORD *)(*(_QWORD *)v4 + 40);
    v9 = *(_DWORD *)(*(_QWORD *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v15, v18);
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = &v14;
    v22 = 0;
    v11 = (char *)operator new(0x38uLL);
    *(_QWORD *)v11 = &off_1E6970F38;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v11 + 8), (uint64_t *)&v15);
    *(_OWORD *)(v11 + 40) = v17;
    v22 = v11;
    AMCP::Core::Conductor::enqueue_config_change(v8, v9, v10, 9, (uint64_t)v21);
    v12 = v22;
    if (v22 == v21)
    {
      v13 = 4;
      v12 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_9:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v15);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
        v3 = v14;
        goto LABEL_10;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
    goto LABEL_9;
  }
LABEL_10:
  if (v3)
    CFRelease(v3);
}

void sub_1B58AA978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970F38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970F38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6970F38;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B58AAB1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6970F38;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  const void **v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v12;
  NSObject *sig;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_mutex_base *v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v19;
    sig = v18->__mut_.__m_.__sig;
    if (*(_QWORD *)v19)
    {
      v14 = (unint64_t *)(*(_QWORD *)v19 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(sig, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(v18) = 67109890;
      HIDWORD(v18) = v17;
      *(_WORD *)v19 = 2080;
      *(_QWORD *)&v19[2] = "Meta_Device_Core.cpp";
      v20 = 1024;
      v21 = 339;
      v22 = 2080;
      v23 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, sig, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v18, 0x22u);
    }
    abort();
  }
  v18 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 40) + 176);
  v19[0] = 1;
  std::__shared_mutex_base::lock(v18);
  v3 = *(const void ***)(a1 + 48);
  v4 = **(_QWORD **)(a1 + 40);
  v5 = *(const void **)(v4 + 96);
  v6 = *v3;
  *(_QWORD *)(v4 + 96) = *v3;
  if (v6)
    CFRetain(v6);
  if (v5)
    CFRelease(v5);
  v7 = **(_QWORD **)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(const void **)(v7 + 96);
  if (!v9)
  {
    v10 = *(const void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = 0;
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v7 + 96));
  v10 = *(const void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v9;
  CFRetain(v9);
  if (v10)
LABEL_10:
    CFRelease(v10);
LABEL_11:
  if (v9)
    CFRelease(v9);
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
}

void sub_1B58AADA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK4$_11clEN10applesauce2CF9StringRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970E48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970E48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970E48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970E48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result[1];
  v4 = *(_QWORD *)(v3 + 96);
  if (v4)
    result = CFRetain(*(CFTypeRef *)(v3 + 96));
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698D280;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698D280;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698D280;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58AB094(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698D280;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *v13;
  int v14;
  const char *v15;
  std::runtime_error v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  const char *v25;
  std::runtime_error v26;
  CFTypeRef cf;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, a2);
  v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = *(std::__shared_weak_count **)v43;
    v18 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v19 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::DictionaryRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v24);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v25 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v25)
      (*(void (**)(const char *))(*(_QWORD *)v25 + 24))(v25);
    v26 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v43;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v9 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::DictionaryRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v14 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v14);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v13, (const std::runtime_error *)buf);
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v46;
    v13[1].__imp_.__imp_ = v46;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v47;
    LODWORD(v13[3].__vftable) = v48;
    v13[2] = v16;
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 48))(v6, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B58AB664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970D48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970D48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970D48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970D48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  void *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *info;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  char **p_data;
  uint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  CFTypeRef v23;
  CFTypeRef cf[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __CFString v29;
  __CFString *v30;
  uint8_t buf[8];
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = a1 + 8;
  v23 = v3;
  v29.data = (char *)(*(_QWORD *)(a1 + 8) + 176);
  LOBYTE(v29.length) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)v29.data);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)cf = 0u;
  v25 = 0u;
  if (v3)
  {
    CFRetain(v3);
    v29.isa = v3;
    v5 = applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v3, CFSTR("uid"));
    if (v5)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)buf, (CFDictionaryRef)v3, CFSTR("uid"));
      v7 = cf[0];
      cf[0] = *(CFTypeRef *)buf;
      *(_QWORD *)buf = v7;
      if (v7)
        CFRelease(v7);
      Aggregate_Device_Description::fill_out_optional_strings((Aggregate_Device_Description *)cf, (CFDictionaryRef *)&v29);
      Aggregate_Device_Description::fill_out_optional_BOOLeans((Aggregate_Device_Description *)cf, &v29);
      *(_QWORD *)buf = 0;
      v32 = 0uLL;
      Aggregate_Device_Description::fill_out_subdevice_list((uint64_t *)cf, (const __CFDictionary *)v3, (uint64_t *)buf);
      v29.info = (uint64_t)buf;
      std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29.info);
      goto LABEL_16;
    }
  }
  else
  {
    v29.isa = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v8 = (std::__shared_weak_count *)v32;
  v9 = **(NSObject ***)buf;
  if ((_QWORD)v32)
  {
    v10 = (unint64_t *)(v32 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v21 = pthread_self();
    v22 = pthread_mach_thread_np(v21);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v22;
    LOWORD(v32) = 2080;
    *(_QWORD *)((char *)&v32 + 2) = "Aggregate_Device_Description.cpp";
    WORD5(v32) = 1024;
    HIDWORD(v32) = 118;
    _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to construct aggregate with no UID", buf, 0x18u);
  }
LABEL_16:
  if (v29.isa)
    CFRelease(v29.isa);
  Aggregate_Device_Description::get_composition_dictionary((Aggregate_Device_Description *)buf, v6);
  Aggregate_Device_Description::get_composition_dictionary((Aggregate_Device_Description *)&v29.info, (uint64_t)cf);
  info = (const void *)v29.info;
  v13 = (*(_QWORD *)buf | v29.info) == 0;
  if (*(_QWORD *)buf && v29.info)
  {
    v13 = CFEqual(*(CFTypeRef *)buf, (CFTypeRef)v29.info) != 0;
    info = (const void *)v29.info;
  }
  if (info)
    CFRelease(info);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  Aggregate_Device_Description::~Aggregate_Device_Description((Aggregate_Device_Description *)cf);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v29.data);
  if (!v13)
  {
    v14 = operator new(0x20uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E69A0170;
    *((_BYTE *)v14 + 24) = 0;
    *(_QWORD *)buf = v14 + 3;
    *(_QWORD *)&v32 = v14;
    DWORD2(v32) = 0;
    v33 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 32);
    v17 = *(_DWORD *)(*(_QWORD *)v4 + 40);
    v16 = *(_DWORD *)(*(_QWORD *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)cf, (uint64_t *)buf);
    *(_QWORD *)&v26 = v4;
    *((_QWORD *)&v26 + 1) = &v23;
    v30 = 0;
    v18 = (char *)operator new(0x38uLL);
    *(_QWORD *)v18 = &off_1E6970DB8;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v18 + 8), (uint64_t *)cf);
    *(_OWORD *)(v18 + 40) = v26;
    v30 = (__CFString *)v18;
    AMCP::Core::Conductor::enqueue_config_change(v15, v16, v17, 9, (uint64_t)&v29.data);
    p_data = (char **)v30;
    if (v30 == (__CFString *)&v29.data)
    {
      v20 = 4;
      p_data = &v29.data;
    }
    else
    {
      if (!v30)
      {
LABEL_31:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)cf);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
        goto LABEL_32;
      }
      v20 = 5;
    }
    (*(void (**)(void))&(*p_data)[8 * v20])();
    goto LABEL_31;
  }
LABEL_32:
  if (v23)
    CFRelease(v23);
}

void sub_1B58ABD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970DB8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970DB8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6970DB8;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B58ABF04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6970DB8;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  CFTypeRef *v3;
  uint64_t v4;
  void *v5;
  uint64_t i;
  uint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  AMCP::Log::Scope_Registry *v9;
  int v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  mach_port_t v17;
  void **v18;
  void **v19;
  NSObject *v20;
  os_log_type_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  const __CFString **v28;
  void **v29;
  const __CFString **v30;
  void **v31;
  std::__shared_weak_count *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  mach_port_t v38;
  void **v39;
  void **v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  const __CFString *v44;
  CFTypeRef v45;
  void *isa;
  std::__shared_weak_count *v48;
  NSObject *v49;
  unint64_t *v50;
  unint64_t v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  std::runtime_error *v54;
  std::runtime_error *exception;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::__shared_mutex_base *v58;
  char v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  CFTypeRef cf;
  __CFString v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  void **v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v48 = *(std::__shared_weak_count **)v69;
    v49 = **(NSObject ***)buf;
    if (*(_QWORD *)v69)
    {
      v50 = (unint64_t *)(*(_QWORD *)v69 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v52 = pthread_self();
      v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v53;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = "Meta_Device_Core.cpp";
      v70 = 1024;
      v71 = 310;
      v72 = 2080;
      v73 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v58 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 40) + 176);
  v59 = 1;
  std::__shared_mutex_base::lock(v58);
  v3 = *(CFTypeRef **)(a1 + 48);
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 80);
  v5 = (void *)*v3;
  if (*v3)
    CFRetain(*v3);
  memset(&v67.info, 0, 24);
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(&v67.info, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16)) >> 3));
  v7 = *(_QWORD *)(v4 + 16);
  for (i = *(_QWORD *)(v4 + 24);
        i != v7;
  *(_QWORD *)(v4 + 24) = v7;
  if (!v5)
  {
    v67.isa = 0;
    goto LABEL_70;
  }
  CFRetain(v5);
  v67.isa = v5;
  if (!applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v5, CFSTR("uid")))
    goto LABEL_70;
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)&cf, (CFDictionaryRef)v5, CFSTR("uid"));
  v8 = (AMCP::Log::Scope_Registry *)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, (const __CFString **)v4);
  if (v8)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
    v10 = *(_DWORD *)(v64 + 16);
    switch(v10)
    {
      case 1:
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v32 = *(std::__shared_weak_count **)v69;
        v33 = **(NSObject ***)buf;
        if (*(_QWORD *)v69)
        {
          v34 = (unint64_t *)(*(_QWORD *)v69 + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          goto LABEL_59;
        v36 = pthread_self();
        v37 = pthread_mach_thread_np(v36);
        if (!*(_QWORD *)v4)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v38 = v37;
        v39 = v62;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v62, *(const __CFString **)v4);
        if (v63 < 0)
          v39 = (void **)v62[0];
        if (!cf)
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (v61 >= 0)
          v40 = __p;
        else
          v40 = (void **)__p[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)v69 = 2080;
        *(_QWORD *)&v69[2] = "Aggregate_Device_Description.cpp";
        v70 = 1024;
        v71 = 250;
        v72 = 2080;
        v73 = (const char *)v39;
        v74 = 2080;
        v75 = v40;
        v20 = v33;
        v21 = OS_LOG_TYPE_DEFAULT;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v22 = *(std::__shared_weak_count **)v69;
        v23 = **(NSObject ***)buf;
        if (*(_QWORD *)v69)
        {
          v24 = (unint64_t *)(*(_QWORD *)v69 + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          goto LABEL_59;
        v26 = pthread_self();
        v27 = pthread_mach_thread_np(v26);
        v28 = (const __CFString **)applesauce::CF::StringRef::operator->((_QWORD *)v4);
        v29 = v62;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v62, *v28);
        if (v63 < 0)
          v29 = (void **)v62[0];
        v30 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *v30);
        if (v61 >= 0)
          v31 = __p;
        else
          v31 = (void **)__p[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)v69 = 2080;
        *(_QWORD *)&v69[2] = "Aggregate_Device_Description.cpp";
        v70 = 1024;
        v71 = 250;
        v72 = 2080;
        v73 = (const char *)v29;
        v74 = 2080;
        v75 = v31;
        _os_log_debug_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Updating aggregate UID from %s to %s", buf, 0x2Cu);
        goto LABEL_55;
      case 3:
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v11 = *(std::__shared_weak_count **)v69;
        v12 = **(NSObject ***)buf;
        if (*(_QWORD *)v69)
        {
          v13 = (unint64_t *)(*(_QWORD *)v69 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_59;
        v15 = pthread_self();
        v16 = pthread_mach_thread_np(v15);
        if (!*(_QWORD *)v4)
        {
          v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
          __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v17 = v16;
        v18 = v62;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v62, *(const __CFString **)v4);
        if (v63 < 0)
          v18 = (void **)v62[0];
        if (!cf)
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "Could not construct");
          __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (v61 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v69 = 2080;
        *(_QWORD *)&v69[2] = "Aggregate_Device_Description.cpp";
        v70 = 1024;
        v71 = 250;
        v72 = 2080;
        v73 = (const char *)v18;
        v74 = 2080;
        v75 = v19;
        v20 = v12;
        v21 = OS_LOG_TYPE_INFO;
        break;
      default:
        goto LABEL_59;
    }
    _os_log_impl(&dword_1B57BA000, v20, v21, "%6u %32s:%-5d Updating aggregate UID from %s to %s", buf, 0x2Cu);
LABEL_55:
    if (v61 < 0)
      operator delete(__p[0]);
    if (v63 < 0)
      operator delete(v62[0]);
LABEL_59:
    v41 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(const __CFString **)v4;
    v45 = cf;
    *(_QWORD *)v4 = cf;
    if (v45)
      CFRetain(v45);
    if (v44)
      CFRelease(v44);
  }
  if (cf)
    CFRelease(cf);
LABEL_70:
  Aggregate_Device_Description::fill_out_optional_strings((Aggregate_Device_Description *)v4, (CFDictionaryRef *)&v67);
  Aggregate_Device_Description::fill_out_optional_BOOLeans((Aggregate_Device_Description *)v4, &v67);
  isa = v67.isa;
  Aggregate_Device_Description::fill_out_subdevice_list((uint64_t *)v4, (const __CFDictionary *)v67.isa, &v67.info);
  if (isa)
    CFRelease(isa);
  *(_QWORD *)buf = &v67.info;
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v5)
    CFRelease(v5);
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
}

void sub_1B58AC740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,const void *a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,__int16 *a30)
{
  const void *v30;
  void *v31;

  __cxa_free_exception(v31);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  applesauce::CF::StringRef::~StringRef(&a23);
  Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary(&a24);
  a30 = &a25;
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (v30)
    CFRelease(v30);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_9clEN10applesauce2CF13DictionaryRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698D080;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698D080;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698D080;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58AC944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698D080;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::runtime_error *v14;
  int v15;
  const char *v16;
  std::runtime_error v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::runtime_error *exception;
  int v25;
  const char *v26;
  std::runtime_error v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v43;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v20 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = applesauce::CF::DictionaryRef, Argument_Types = <>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v25 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v25);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v26 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v26)
      (*(void (**)(const char *))(*(_QWORD *)v26 + 24))(v26);
    v27 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v27;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v43;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v10 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = applesauce::CF::DictionaryRef, Argument_Types = <>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v15 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v15);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v14, (const std::runtime_error *)buf);
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v16 = v46;
    v14[1].__imp_.__imp_ = v46;
    if (v16)
      (*(void (**)(const char *))(*(_QWORD *)v16 + 24))(v16);
    v17 = v47;
    LODWORD(v14[3].__vftable) = v48;
    v14[2] = v17;
    v14->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v7 + 48))(buf);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(a2, (CFTypeRef *)buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
}

void sub_1B58ACF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970CC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970CC8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970CC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970CC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::operator()(uint64_t a1@<X0>, Aggregate_Device_Description *a2@<X8>)
{
  Aggregate_Device_Description::get_composition_dictionary(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80));
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970C48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970C48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970C48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970C48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)(v2 + 56), *(_QWORD *)(v2 + 64), (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 2);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6970BC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58AD4E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6970BC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *v13;
  int v14;
  const char *v15;
  std::runtime_error v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  const char *v25;
  std::runtime_error v26;
  CFTypeRef cf;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&cf, a2);
  v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = *(std::__shared_weak_count **)v43;
    v18 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v19 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::ArrayRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v24);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v25 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v25)
      (*(void (**)(const char *))(*(_QWORD *)v25 + 24))(v25);
    v26 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v43;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v9 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const applesauce::CF::ArrayRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v14 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v14);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v13, (const std::runtime_error *)buf);
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v46;
    v13[1].__imp_.__imp_ = v46;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v47;
    LODWORD(v13[3].__vftable) = v48;
    v13[2] = v16;
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 48))(v6, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B58ADAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF8ArrayRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970AB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970AB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17[4];
  __int128 v18;
  std::__shared_mutex_base *v19;
  char *v20;
  int v21;
  int v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = a1 + 8;
  v16 = v3;
  v19 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 8) + 176);
  LOBYTE(v20) = 1;
  std::__shared_mutex_base::lock(v19);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (v3)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v8 = CFEqual((CFTypeRef)v5, (CFTypeRef)v3);
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
    if (v8)
    {
LABEL_17:
      CFRelease((CFTypeRef)v3);
      return;
    }
LABEL_11:
    v9 = (char *)operator new(0x20uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E69A0170;
    v9[24] = 0;
    v19 = (std::__shared_mutex_base *)(v9 + 24);
    v20 = v9;
    v21 = 0;
    v22 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 32);
    v12 = *(_DWORD *)(*(_QWORD *)v4 + 40);
    v11 = *(_DWORD *)(*(_QWORD *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v17, (uint64_t *)&v19);
    *(_QWORD *)&v18 = v4;
    *((_QWORD *)&v18 + 1) = &v16;
    v24 = 0;
    v13 = (char *)operator new(0x38uLL);
    *(_QWORD *)v13 = &off_1E6970B38;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v13 + 8), v17);
    *(_OWORD *)(v13 + 40) = v18;
    v24 = v13;
    AMCP::Core::Conductor::enqueue_config_change(v10, v11, v12, 9, (uint64_t)v23);
    v14 = v24;
    if (v24 == v23)
    {
      v15 = 4;
      v14 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_16;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v19);
    v3 = v16;
    if (!v16)
      return;
    goto LABEL_17;
  }
  v7 = v3 | v5;
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
  if (v7)
    goto LABEL_11;
}

void sub_1B58ADFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a10);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a16);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970B38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970B38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6970B38;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B58AE154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6970B38;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  const void **v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  unint64_t j;
  const __CFString **v19;
  const __CFString **v20;
  CFTypeRef v21;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  std::__shared_mutex_base *v29;
  char v30;
  CFTypeRef cf;
  const __CFString **v32;
  const __CFString **v33;
  uint64_t v34;
  uint8_t buf[8];
  __int128 v36;
  __int128 v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = (std::__shared_weak_count *)v36;
    v24 = **(NSObject ***)buf;
    if ((_QWORD)v36)
    {
      v25 = (unint64_t *)(v36 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v28;
      LOWORD(v36) = 2080;
      *(_QWORD *)((char *)&v36 + 2) = "Meta_Device_Core.cpp";
      WORD5(v36) = 1024;
      HIDWORD(v36) = 274;
      LOWORD(v37) = 2080;
      *(_QWORD *)((char *)&v37 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v29 = (std::__shared_mutex_base *)(**(_QWORD **)(a1 + 40) + 176);
  v30 = 1;
  std::__shared_mutex_base::lock(v29);
  v3 = *(const void ***)(a1 + 48);
  v4 = **(_QWORD **)(a1 + 40);
  v5 = *(const void **)(v4 + 48);
  v6 = *v3;
  *(_QWORD *)(v4 + 48) = *v3;
  if (v6)
    CFRetain(v6);
  if (v5)
    CFRelease(v5);
  v7 = **(_QWORD **)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(const __CFArray **)(v7 + 48);
  if (v9)
    CFRetain(*(CFTypeRef *)(v7 + 48));
  v33 = 0;
  v34 = 0;
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = (uint64_t *)(v8 + 16);
  v32 = 0;
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(&v32, v10, v11, 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 3));
  v14 = *(_QWORD *)(v8 + 16);
  for (i = *(_QWORD *)(v8 + 24);
        i != v14;
  *(_QWORD *)(v8 + 24) = v14;
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    v16 = CFArrayGetCount(v9);
    if (Count)
    {
      v17 = v16;
      for (j = 0; j != Count; ++j)
      {
        if (j == v17)
          break;
        applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&cf, v9, j);
        v19 = v32;
        v20 = v33;
        if (v32 == v33)
          goto LABEL_21;
        while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, v19))
        {
          v19 += 7;
          if (v19 == v20)
          {
            v19 = v20;
            break;
          }
        }
        if (v19 == v33)
        {
LABEL_21:
          v38 = 0;
          v36 = 0u;
          v37 = 0u;
          v39 = 127;
          v40 = 1;
          v21 = cf;
          *(_QWORD *)buf = cf;
          if (cf)
            CFRetain(cf);
          std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](v12, (uint64_t)buf);
          if (v21)
            CFRelease(v21);
        }
        else
        {
          std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](v12, (uint64_t)v19);
        }
        if (cf)
          CFRelease(cf);
      }
    }
    *(_QWORD *)buf = &v32;
    std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    CFRelease(v9);
  }
  else
  {
    *(_QWORD *)buf = &v32;
    std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v29);
}

void sub_1B58AE528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_6clEN10applesauce2CF8ArrayRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6970A38;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58AE6D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6970A38;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>((uint64_t)&cf, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(a2, &cf);
  if (cf)
    CFRelease(cf);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF8ArrayRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Array"
          "Ref, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Array"
          "Ref, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B58AEBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69709A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69709A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69709A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69709A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result[1];
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
    result = CFRetain(*(CFTypeRef *)(v3 + 48));
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970928;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970928;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970928;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970928;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

std::vector<char> *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v18[28];
  int v19;
  AMCP::Core::Core *v20;
  std::__shared_weak_count *v21;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(v3 + 112);
  v5 = *(uint64_t **)(v3 + 120);
  if (v4 != v5)
  {
    v7 = 0;
    while (1)
    {
      v8 = *v4;
      v9 = (std::__shared_weak_count *)v4[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v20, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(v8 + 24));
      if (v20)
      {
        AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)v18, v20);
        v7 += v19;
      }
      v12 = v21;
      if (!v21)
        goto LABEL_12;
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v9)
        {
LABEL_13:
          v15 = (unint64_t *)&v9->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_12:
        if (v9)
          goto LABEL_13;
      }
      v4 += 2;
      if (v4 == v5)
        return AMCP::Meta::create_layout_from_channel_count(a2, v7);
    }
  }
  v7 = 0;
  return AMCP::Meta::create_layout_from_channel_count(a2, v7);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::target_type()
{
}

std::vector<char> *AMCP::Meta::create_layout_from_channel_count(std::vector<char> *this, unsigned int a2)
{
  unsigned int v3;
  std::vector<char> *result;
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v7;
  std::vector<char>::value_type __x;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  __x = 0;
  result = std::vector<char>::vector(this, 20 * v3 + 12, &__x);
  begin = result->__begin_;
  *(_QWORD *)begin = 0;
  *((_DWORD *)begin + 2) = a2;
  end = result->__end_;
  if (end - begin != 12)
  {
    v7 = begin + 12;
    do
    {
      *(_QWORD *)v7 = 0xFFFFFFFFLL;
      *((_QWORD *)v7 + 1) = 0;
      *((_DWORD *)v7 + 4) = 0;
      v7 += 20;
    }
    while (v7 != end);
  }
  return result;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698CB08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698CB08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698CB08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58AF2D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698CB08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  _BYTE *v4;

  AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)&__p, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a2, __p, (uint64_t)v4, v4 - (_BYTE *)__p);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1B58AF3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA13ChannelLayoutEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69708A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69708A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69708A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69708A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

std::vector<char> *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v18[28];
  int v19;
  AMCP::Core::Core *v20;
  std::__shared_weak_count *v21;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(v3 + 136);
  v5 = *(uint64_t **)(v3 + 144);
  if (v4 != v5)
  {
    v7 = 0;
    while (1)
    {
      v8 = *v4;
      v9 = (std::__shared_weak_count *)v4[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v20, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(v8 + 24));
      if (v20)
      {
        AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)v18, v20);
        v7 += v19;
      }
      v12 = v21;
      if (!v21)
        goto LABEL_12;
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v9)
        {
LABEL_13:
          v15 = (unint64_t *)&v9->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_12:
        if (v9)
          goto LABEL_13;
      }
      v4 += 2;
      if (v4 == v5)
        return AMCP::Meta::create_layout_from_channel_count(a2, v7);
    }
  }
  v7 = 0;
  return AMCP::Meta::create_layout_from_channel_count(a2, v7);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::target_type()
{
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E699BE38;
  *((_QWORD *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 20) = *(_OWORD *)(a1 + 20);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_QWORD *)a2 = &off_1E699BE38;
  v2 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_mutex_base *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v8[24];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_mutex_base **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = operator new(0x28uLL);
  *v6 = &off_1E699BEA8;
  v6[1] = a1 + 20;
  v6[2] = a1 + 32;
  v6[3] = a1 + 36;
  v6[4] = a1 + 48;
  v9 = v6;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v4, v5, (uint64_t)v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 40))(v6);
}

void sub_1B58AF820(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities47make_owned_object_with_properties_list_propertyIjJNS_7AddressENS_9DirectionEEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerEjRKS3_SC_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E699BEA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISX_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699BEA8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclESW_(_QWORD *a1, AMCP::Core::Core **a2)
{
  AMCP::Core::Core *v2;
  const AMCP::Address *v3;
  _DWORD *v4;
  const AMCP::Address *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v9;
  BOOL v10;

  v2 = *a2;
  v3 = (const AMCP::Address *)a1[1];
  v4 = (_DWORD *)a1[2];
  v5 = (const AMCP::Address *)a1[3];
  v6 = (_DWORD *)a1[4];
  v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(*a2, v3);
  if (!HIDWORD(v7))
    return 0;
  if (*(_DWORD *)v3 == 1668047219 || *(_DWORD *)v3 == 1650682995)
  {
    if ((AMCP::is_base_of((AMCP *)*v4, v7) & 1) == 0)
      return 0;
  }
  else if (*v4 != (_DWORD)v7)
  {
    return 0;
  }
  v9 = AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(v2, v5);
  if (HIDWORD(v9))
  {
    v10 = *(_DWORD *)v5 == 1650682995 || *(_DWORD *)v5 == 1668047219;
    if (!v10 && *v6 == (_DWORD)v9)
      return 1;
  }
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS_7AddressERKNS_9DirectionEENSt3__19enable_ifILb1EvEEEENS9_6vectorIjNS9_9allocatorIjEEEERNS0_6BrokerEjS5_RKT_DpOT0_EUlSK_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
}

uint64_t AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  unsigned int v2;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  void (*v15)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)a1, (unsigned int *)a2);
  v5 = v16;
  if (!v16)
    goto LABEL_10;
  v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v5);
      LODWORD(v5) = AMCP::Thing::convert_to<AMCP::Direction>((uint64_t)v14);
      if (v15)
        v15(0, v14, 0, 0);
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
LABEL_10:
    v7 = 1;
    goto LABEL_11;
  }
  LODWORD(v5) = AMCP::Core::Operation::call_function<AMCP::Direction>(v5);
LABEL_5:
  v7 = 0;
  v2 = v5 >> 8;
LABEL_11:
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v7)
        goto LABEL_16;
LABEL_18:
      v12 = 0x100000000;
      return v12 | v5 | (v2 << 8);
    }
  }
  if (!v7)
    goto LABEL_18;
LABEL_16:
  v12 = 0;
  LOBYTE(v5) = 0;
  return v12 | v5 | (v2 << 8);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Direction>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Direction, Argu"
          "ment_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Direction, Argu"
          "ment_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B58AFF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[492];
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698CE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698CE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698CE18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58B01B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698CE18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  _BYTE *v4;

  AMCP::Core::Operation::call_function<CA::ValueRangeList>((uint64_t)&__p, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((_QWORD *)a2, __p, (uint64_t)v4, (v4 - (_BYTE *)__p) >> 4);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1B58B02B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA14ValueRangeListEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<CA::ValueRangeList>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRangeList, A"
          "rgument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRangeList, A"
          "rgument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B58B06F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970828;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970828;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970828;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970828;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  uint64_t v19;
  int v20;
  CFTypeRef cf;
  AMCP::Address *v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::runtime_error v30;
  std::runtime_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  uint8_t buf[8];
  _BYTE v41[10];
  __int16 v42;
  int v43;
  const char *v44;
  const char *v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(const void **)(v3 + 104);
  if (v4)
    CFRetain(*(CFTypeRef *)(v3 + 104));
  cf = v4;
  AMCP::Meta::Device::get_device_core(&v22, *(std::__shared_mutex_base **)(*(_QWORD *)(v3 + 8) + 16), (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  if (v22)
  {
    v19 = 0x676C6F626E737223;
    v20 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v38, (int8x8_t *)v22, (unsigned int *)&v19);
    if (!v38)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v41;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v41)
      {
        v14 = (unint64_t *)(*(_QWORD *)v41 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v41 = 2080;
        *(_QWORD *)&v41[2] = "Core.h";
        v42 = 1024;
        v43 = 202;
        _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v29);
      std::runtime_error::runtime_error(&v30, &v29);
      std::runtime_error::runtime_error(&v31, &v30);
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = -1;
      v31.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v32 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
      v44 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = CA::ValueRangeList, Argument_Types = <>]";
      v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      v46 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
      v27 = v24;
      v28 = v25;
      v24 = 0uLL;
      v25 = 0;
      v26 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v26);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    AMCP::Core::Operation::call_function<CA::ValueRangeList>(a2, v38);
    v6 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v41 = 0;
    CA::ValueRangeList::AddRange((double **)a2, (double *)buf);
  }
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B58B0C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  v33 = *(void **)v31;
  if (*(_QWORD *)v31)
  {
    *(_QWORD *)(v31 + 8) = v33;
    operator delete(v33);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698C9A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698C9A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698C9A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58B0F4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698C9A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  double v4;

  v2 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Thing::convert_to<double>(a2);
  return AMCP::Core::Operation::call_function<void,double const&>(v2, (uint64_t)&v4);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIdEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<void,double const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const double &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const double &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B58B1438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69706A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69706A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69706A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69706A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13[4];
  __int128 v14;
  uint64_t v15[2];
  int v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x20uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69A0170;
  v15[1] = (uint64_t)v4;
  *((_BYTE *)v4 + 24) = 0;
  v15[0] = (uint64_t)(v4 + 3);
  v16 = 0;
  v17 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 32);
  v8 = *(_DWORD *)(v5 + 40);
  v7 = *(_DWORD *)(v5 + 44);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v13, v15);
  *(_QWORD *)&v14 = a1 + 8;
  *((_QWORD *)&v14 + 1) = a2;
  v19 = 0;
  v9 = (char *)operator new(0x38uLL);
  *(_QWORD *)v9 = &off_1E6970718;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v13);
  *(_OWORD *)(v9 + 40) = v14;
  v19 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v6, v7, v8, 9, (uint64_t)v18);
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
    goto LABEL_5;
  }
  if (v19)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
}

void sub_1B58B1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a10);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6970718;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6970718;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *_ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6970718;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B58B1988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 _ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEPNS0_6__baseISH_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6970718;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7destroyEv(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE18destroy_deallocateEv(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEEclEv(_QWORD **a1)
{
  _BOOL8 is_valid;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_mutex_base *v8;
  uint8_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  uint64_t v28;
  int v29;
  int8x8_t *v30;
  std::__shared_weak_count *v31;
  std::__shared_mutex_base *v32;
  char v33;
  uint8_t buf[8];
  __int128 v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 1));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = (std::__shared_weak_count *)v35;
    v23 = **(NSObject ***)buf;
    if ((_QWORD)v35)
    {
      v24 = (unint64_t *)(v35 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v27;
      LOWORD(v35) = 2080;
      *(_QWORD *)((char *)&v35 + 2) = "Meta_Device_Core.cpp";
      WORD5(v35) = 1024;
      HIDWORD(v35) = 158;
      LOWORD(v36[0]) = 2080;
      *(_QWORD *)((char *)v36 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v32 = (std::__shared_mutex_base *)(*a1[5] + 176);
  v33 = 1;
  std::__shared_mutex_base::lock(v32);
  v3 = (_QWORD *)*a1[5];
  v5 = v3[1];
  v4 = (std::__shared_weak_count *)v3[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v3 = (_QWORD *)*a1[5];
  }
  if (v3[13])
  {
    v8 = *(std::__shared_mutex_base **)(v5 + 16);
    v28 = 0x676C6F6275696420;
    v29 = 0;
    *(_QWORD *)buf = &off_1E6970788;
    *(_QWORD *)&v35 = &v28;
    *((_QWORD *)&v35 + 1) = v3 + 13;
    v36[0] = buf;
    AMCP::Core::Broker::fetch_first_core_if (&v30, v8, (uint64_t)buf);
    v9 = (uint8_t *)v36[0];
    if ((uint8_t *)v36[0] == buf)
    {
      v10 = 4;
      v9 = buf;
    }
    else
    {
      if (!v36[0])
      {
LABEL_12:
        if (v30)
          AMCP::Core::Core::set_simple_property_value<1853059700u>(v30, a1[6]);
        v11 = v31;
        if (v31)
        {
          v12 = (unint64_t *)&v31->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v3 = (_QWORD *)*a1[5];
        goto LABEL_20;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
    goto LABEL_12;
  }
LABEL_20:
  v14 = (unsigned int *)v3[7];
  v15 = (unsigned int *)v3[8];
  while (v14 != v15)
  {
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, *(std::__shared_mutex_base **)(v5 + 16), *v14);
    if (*(_QWORD *)buf)
      AMCP::Core::Core::set_simple_property_value<1853059700u>(*(int8x8_t **)buf, a1[6]);
    v16 = (std::__shared_weak_count *)v35;
    if ((_QWORD)v35)
    {
      v17 = (unint64_t *)(v35 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    ++v14;
  }
  if (v4)
  {
    v19 = (unint64_t *)&v4->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v32);
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_1clIdEEDaRKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_;
}

void AMCP::Core::Core::set_simple_property_value<1853059700u>(int8x8_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD v11[4];
  BOOL (*v12)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  int v16;

  v15 = 0x676C6F626E737274;
  v16 = 0;
  if (AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v15))
  {
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, a1, (unsigned int *)&v15);
    v4 = v13;
    if (v13)
    {
      v5 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
      {
        AMCP::Core::Operation::call_function<void,double const&>(v4, (uint64_t)a2);
LABEL_5:
        v6 = v14;
        if (!v14)
          return;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
LABEL_15:
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v9 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v9))
      {
        memset(&v11[1], 0, 24);
        v11[0] = *a2;
        v12 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
        AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v11);
        if (v12)
          v12(0, (uint64_t)v11, 0, 0);
        goto LABEL_5;
      }
    }
    v6 = v14;
    if (!v14)
      return;
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
    goto LABEL_15;
  }
}

void sub_1B58B1E80(void *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58B1E6CLL);
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6970788;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6970788;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  const __CFString **v2;
  const AMCP::Address *v3;
  BOOL v4;
  _BOOL8 v5;
  CFTypeRef cf;
  char v8;

  v3 = *(const AMCP::Address **)(a1 + 8);
  v2 = *(const __CFString ***)(a1 + 16);
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, *a2, v3);
  v5 = 0;
  if (v8)
  {
    v4 = *(_DWORD *)v3 == 1650682995 || *(_DWORD *)v3 == 1668047219;
    if (!v4
      && applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, v2) == kCFCompareEqualTo)
    {
      v5 = 1;
    }
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENSt3__19enable_ifILb1EvEEEENS6_10shared_ptrINS0_4CoreEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSJ_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENSt3__19enable_ifILb1EvEEEENS6_10shared_ptrINS0_4CoreEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSJ_E_;
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970628;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6970628;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6970628;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6970628;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 160);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698ADE0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58B2314(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698ADE0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698ADE0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698ADE0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58B23F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698ADE0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<int>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIiEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<int>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = int, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = int, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B58B28D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<int ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[257];
}

uint64_t std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

double AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  double result;
  _QWORD *v7;
  uint64_t v8;
  _OWORD v9[2];
  void (*v10)(_QWORD, _OWORD *, _QWORD, _QWORD);

  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
LABEL_4:
      v7 = *(_QWORD **)(a2 + 24);
      if (v7 == (_QWORD *)a2)
      {
        v8 = 4;
        v7 = (_QWORD *)a2;
      }
      else
      {
        if (!v7)
          goto LABEL_14;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      *a4 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
      return result;
    case 4:
      AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
      return result;
    case 6:
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      AMCP::swap((AMCP::Thing *)v9, a3, a3);
      if (v10)
        v10(0, v9, 0, 0);
      return result;
    default:
      return result;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E698AD50;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E698AD50;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIiEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::target_type()
{
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_BYTE *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69991A0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69991A0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIbEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6971528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6971528;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  _DWORD *v9;
  std::__shared_weak_count *v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v4;
  AMCP::Meta::Device::get_device_core(&v9, *(std::__shared_mutex_base **)(*(_QWORD *)(v3 + 8) + 16), (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  if (v9 && *v9 == **(_DWORD **)(a1 + 16))
    **(_BYTE **)(a1 + 24) = 1;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B58B2F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device32object_exists_and_is_a_subdeviceEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69715A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69715A8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69715A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69715A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v4;
  int *v6;
  int *v7;
  _DWORD *v8;
  _DWORD *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t *v20;
  int v21;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    v26 = v4 + 176;
    v27 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v4 + 176));
    v6 = a4[3];
    v7 = a4[4];
    if (v6 != v7)
    {
      v8 = *(_DWORD **)(v4 + 64);
      while (1)
      {
        v9 = *(_DWORD **)(v4 + 56);
        if (v9 != v8)
        {
          v9 = *(_DWORD **)(v4 + 56);
          while (*v9 != *v6)
          {
            if (++v9 == v8)
              goto LABEL_10;
          }
        }
        if (v9 != v8)
          break;
LABEL_10:
        if (++v6 == v7)
          goto LABEL_11;
      }
LABEL_58:
      AMCP::Meta::Device::update_cached_properties_from_composition((AMCP::Meta::Device *)v4);
      AMCP::Meta::Device::update_subdevices((AMCP::Meta::Device *)v4);
      AMCP::Meta::Device::update_core((AMCP::Meta::Device *)v4);
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v26);
    }
LABEL_11:
    v10 = *a4;
    v11 = a4[1];
    if (*a4 == v11)
    {
LABEL_19:
      v17 = (uint64_t *)a4[8];
      if (v17)
      {
        v18 = *(_DWORD **)(v4 + 64);
        do
        {
          v19 = *(_DWORD **)(v4 + 56);
          if (v19 != v18)
          {
            v19 = *(_DWORD **)(v4 + 56);
            while (*v19 != *((_DWORD *)v17 + 4))
            {
              if (++v19 == v18)
                goto LABEL_56;
            }
          }
          if (v19 != v18)
          {
            v20 = v17 + 10;
            while (1)
            {
              v20 = (uint64_t *)*v20;
              if (!v20)
                break;
              v21 = *((_DWORD *)v20 + 4);
              if (v21 > 1935763059)
              {
                if (v21 > 1936879203)
                {
                  if (v21 == 1936879204 || v21 == 1937009955)
                    goto LABEL_58;
                }
                else if (v21 == 1935763060 || v21 == 1936487523)
                {
                  goto LABEL_58;
                }
              }
              else if (v21 > 1819569762)
              {
                if (v21 == 1819569763 || v21 == 1853059700)
                  goto LABEL_58;
              }
              else if (v21 == 1718444404 || v21 == 1718449187)
              {
                goto LABEL_58;
              }
            }
          }
LABEL_56:
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v26);
    }
    while (1)
    {
      v29 = *v10;
      v28 = 0;
      v12 = *(_QWORD *)(v4 + 80);
      v13 = operator new(0x20uLL);
      *v13 = &off_1E6971528;
      v13[1] = v4;
      v13[2] = &v29;
      v13[3] = &v28;
      v31 = v13;
      Aggregate_Device_Description::for_each_subdevice(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)v30);
      v15 = v31;
      if (v31 == v30)
        break;
      if (v31)
      {
        v16 = 5;
LABEL_16:
        (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
      }
      if (v28)
        goto LABEL_58;
      if (++v10 == v11)
        goto LABEL_19;
    }
    v15 = v30;
    v16 = 4;
    goto LABEL_16;
  }
  return result;
}

void sub_1B58B3344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device29create_config_change_listenerEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::target_type()
{
}

void AMCP::IO_Core::Device_Connection::get_device_uid(AMCP::IO_Core::Device_Connection *this, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a2[1];
  if (!v2 || (v2 = std::__shared_weak_count::lock(v2), (v4 = v2) == 0) || !*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v34;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v34)
    {
      v10 = (unint64_t *)(*(_QWORD *)v34 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "Device_Connection.cpp";
      v35 = 1024;
      v36 = 33;
      v37 = 2080;
      *(_QWORD *)v38 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "CF::String AMCP::IO_Core::Device_Connection::get_device_uid() const";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v40 = 33;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *(_QWORD *)(*a2 + 96);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "Device.cpp";
      v35 = 1024;
      v36 = 186;
      v37 = 2080;
      *(_QWORD *)v38 = "not (m_engine)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    v18 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "CF::String AMCP::IO_Core::Device_Node_State::get_device_uid() const";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device.cpp";
    v40 = 186;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1B58B3850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6971638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E6971638;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  double sample_time;
  double v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  double v24;
  _QWORD v26[4];
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = *(double *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 192);
  v5 = *(std::__shared_weak_count **)(a2 + 200);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 72))(v26);
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v26);
  v9 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (round(sample_time) >= round(v9))
  {
    v18 = round(*(double *)(a2 + 56));
    v19 = round(*(double *)(a2 + 64));
    v20 = round(v3);
    if (v18 >= v19 || v20 < v18)
    {
      v22 = v3 + 1.0;
      if (v18 < v19)
      {
        v23 = round(v22);
        if (v20 >= v18)
          v24 = *(double *)(a2 + 56);
        else
          v24 = v3;
        if (v19 >= v23)
          v22 = *(double *)(a2 + 64);
        if (v20 < v23)
        {
          v3 = v24;
        }
        else
        {
          v22 = *(double *)(a2 + 64);
          v3 = *(double *)(a2 + 56);
        }
      }
      *(double *)(a2 + 56) = v3;
      *(double *)(a2 + 64) = v22;
    }
  }
  return 1;
}

void sub_1B58B3C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Connection27register_earliest_read_timeEjRKNS_3DAL8DAL_TimeEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void AMCP::IO_Core::Device_Connection::begin_cycle(os_unfair_lock_s **a1, std::string::size_type a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  AMCP::Log::Scope_Registry *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t host_time;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *p_buf;
  uint64_t v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  os_unfair_lock_s *v44;
  double v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  double v49;
  char v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *i;
  double v71;
  double v72;
  double v73;
  double v74;
  std::string::size_type v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::string::size_type v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double *v102;
  unint64_t v103;
  double v104;
  uint64_t v105;
  AMCP::Log::Scope_Registry *other_data_bytes;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  double sample_time;
  int v129;
  std::__shared_weak_count *v130;
  AMCP::Log::Scope_Registry *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  OpaqueAudioConverter *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::string::size_type v145;
  std::string::size_type v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  AMCP::Log::Scope_Registry *v155;
  uint32_t os_unfair_lock_opaque;
  std::__shared_weak_count *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  std::string::size_type v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *size;
  NSObject *v219;
  unint64_t *v220;
  unint64_t v221;
  _opaque_pthread_t *v222;
  mach_port_t v223;
  void *exception;
  std::__shared_weak_count *v225;
  NSObject *v226;
  unint64_t *v227;
  unint64_t v228;
  _opaque_pthread_t *v229;
  mach_port_t v230;
  void *v231;
  std::__shared_weak_count *v232;
  NSObject *v233;
  unint64_t *v234;
  unint64_t v235;
  _opaque_pthread_t *v236;
  mach_port_t v237;
  void *v238;
  std::__shared_weak_count *v239;
  NSObject *v240;
  unint64_t *v241;
  unint64_t v242;
  _opaque_pthread_t *v243;
  mach_port_t v244;
  void *v245;
  std::__shared_weak_count *v246;
  NSObject *v247;
  unint64_t *v248;
  unint64_t v249;
  _opaque_pthread_t *v250;
  mach_port_t v251;
  void *v252;
  NSObject *v253;
  _opaque_pthread_t *v254;
  mach_port_t v255;
  void *v256;
  uint64_t v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t v260;
  AMCP::DAL::DAL_Time *v261;
  double *v263;
  AMCP::IO_Core::Stream_Connection *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  char v267[8];
  double v268;
  std::__shared_weak_count *v269;
  std::string v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  std::string v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  std::logic_error v283;
  __int128 v284;
  int v285;
  __int128 v286;
  uint64_t v287;
  _BYTE v288[24];
  uint64_t v289;
  std::string v290;
  std::logic_error v291;
  char v292;
  _BYTE v293[24];
  __int128 v294;
  AMCP::Log::Scope_Registry *v295;
  uint64_t v296;
  double *v297;
  double *v298;
  AMCP::Log::Scope_Registry *v299;
  std::logic_error v300;
  __int128 v301;
  const char *v302;
  int v303;
  std::__shared_weak_count *v304;
  __int128 outOutputData;
  uint64_t v306;
  uint64_t v307;
  std::string v308;
  uint64_t v309;
  std::string buf;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  uint64_t v317;

  v317 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (v4 = std::__shared_weak_count::lock(v4), (v6 = v4) == 0) || (v7 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    v219 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v220 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
    {
      v222 = pthread_self();
      v223 = pthread_mach_thread_np(v222);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v223;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 102;
      LOWORD(v311) = 2080;
      *(_QWORD *)((char *)&v311 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v219, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v270);
    std::logic_error::logic_error((std::logic_error *)&v308, &v270);
    v308.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v299, (const std::logic_error *)&v308);
    v301 = 0uLL;
    v302 = 0;
    v303 = -1;
    v299 = (AMCP::Log::Scope_Registry *)off_1E69A1208;
    v300.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v299);
    *((_QWORD *)&v311 + 1) = "void AMCP::IO_Core::Device_Connection::begin_cycle(Object_ID, const Graph::IO_Proc_Cycle_In"
                             "fo &, const DAL::DAL_Time_Delta &) const";
    *(_QWORD *)&v312 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v312) = 102;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v293);
    *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = *(_OWORD *)v293;
    v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_QWORD *)&v278 = *(_QWORD *)&v293[16];
    memset(v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v277);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  v8 = *(_QWORD *)&v7[24]._os_unfair_lock_opaque;
  v9 = *(std::__shared_weak_count **)&v7[26]._os_unfair_lock_opaque;
  if (!v9)
  {
    v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8);
    if ((v12 & 1) != 0)
      goto LABEL_12;
LABEL_39:
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v35 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v37;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 103;
      LOWORD(v311) = 2080;
      *(_QWORD *)((char *)&v311 + 2) = "not (device_state->get_engine()->has_time())";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    v38 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v270);
    std::logic_error::logic_error((std::logic_error *)&v308, &v270);
    v308.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v299, (const std::logic_error *)&v308);
    v301 = 0uLL;
    v302 = 0;
    v303 = -1;
    v299 = (AMCP::Log::Scope_Registry *)off_1E69A1208;
    v300.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v299);
    *((_QWORD *)&v311 + 1) = "void AMCP::IO_Core::Device_Connection::begin_cycle(Object_ID, const Graph::IO_Proc_Cycle_In"
                             "fo &, const DAL::DAL_Time_Delta &) const";
    *(_QWORD *)&v312 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v312) = 103;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v293);
    *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = *(_OWORD *)v293;
    v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_QWORD *)&v278 = *(_QWORD *)&v293[16];
    memset(v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v277);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v38, (uint64_t)&buf);
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8);
  v13 = (char)v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if ((v13 & 1) == 0)
    goto LABEL_39;
LABEL_12:
  v16 = *(AMCP::Log::Scope_Registry **)&v7[24]._os_unfair_lock_opaque;
  v15 = *(_QWORD *)&v7[26]._os_unfair_lock_opaque;
  v299 = v16;
  v300.__vftable = (std::logic_error_vtbl *)v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(unsigned int *)(a2 + 176);
  v261 = (AMCP::DAL::DAL_Time *)(a2 + 80);
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  v21 = *(_QWORD *)&v7[30]._os_unfair_lock_opaque;
  v277.__r_.__value_.__r.__words[0] = *(_QWORD *)&v7[28]._os_unfair_lock_opaque;
  v277.__r_.__value_.__l.__size_ = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&buf, a3, (uint64_t *)&v277);
  if ((buf.__r_.__value_.__s.__data_[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&buf);
  (*(void (**)(AMCP::Log::Scope_Registry *, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 240))(v16, v19, host_time, vcvtmd_s64_f64(*(double *)&buf.__r_.__value_.__l.__size_));
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
  if (*((_QWORD *)&v311 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
  if (v277.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)v300.__vftable;
  if (v300.__vftable)
  {
    v31 = (unint64_t *)&v300.~logic_error_0;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69982C8;
  buf.__r_.__value_.__l.__size_ = a2;
  *(_QWORD *)&v311 = &buf;
  AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v7, (uint64_t)&buf);
  p_buf = (std::string *)v311;
  if ((std::string *)v311 == &buf)
  {
    v34 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!(_QWORD)v311)
      goto LABEL_44;
    v34 = 5;
  }
  (*(void (**)(void))(p_buf->__r_.__value_.__r.__words[0] + 8 * v34))();
LABEL_44:
  v39 = *(std::__shared_weak_count **)&v7[30]._os_unfair_lock_opaque;
  v265 = *(_QWORD *)&v7[28]._os_unfair_lock_opaque;
  v266 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v267, a3, &v265);
  v42 = (std::__shared_weak_count *)a1[1];
  if (!v42 || (v42 = std::__shared_weak_count::lock(v42), (v43 = v42) == 0) || (v44 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v42);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v232 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    v233 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v234 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
    {
      v236 = pthread_self();
      v237 = pthread_mach_thread_np(v236);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v237;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 182;
      LOWORD(v311) = 2080;
      *(_QWORD *)((char *)&v311 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v233, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    v238 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v270);
    std::logic_error::logic_error((std::logic_error *)&v308, &v270);
    v308.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v299, (const std::logic_error *)&v308);
    v301 = 0uLL;
    v302 = 0;
    v303 = -1;
    v299 = (AMCP::Log::Scope_Registry *)off_1E69A1208;
    v300.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v299);
    *((_QWORD *)&v311 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Graph::IO_Pr"
                             "oc_Cycle_Info &, const DAL_Time_Delta &) const";
    *(_QWORD *)&v312 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v312) = 182;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v293);
    *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = *(_OWORD *)v293;
    v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_QWORD *)&v278 = *(_QWORD *)&v293[16];
    memset(v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v277);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v238, (uint64_t)&buf);
  }
  if ((v267[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v267);
  v45 = v268;
  os_unfair_lock_lock(v44 + 1);
  v46 = (std::__shared_weak_count *)a1[1];
  if (!v46 || (v46 = std::__shared_weak_count::lock(v46), (v47 = v46) == 0) || !*a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v46);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v239 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    v240 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v241 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v242 = __ldaxr(v241);
      while (__stlxr(v242 - 1, v241));
      if (!v242)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
    {
      v243 = pthread_self();
      v244 = pthread_mach_thread_np(v243);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v244;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 153;
      LOWORD(v311) = 2080;
      *(_QWORD *)((char *)&v311 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v240, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    v245 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v270);
    std::logic_error::logic_error((std::logic_error *)&v308, &v270);
    v308.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v299, (const std::logic_error *)&v308);
    v301 = 0uLL;
    v302 = 0;
    v303 = -1;
    v299 = (AMCP::Log::Scope_Registry *)off_1E69A1208;
    v300.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v299);
    *((_QWORD *)&v311 + 1) = "Sample_Time_Range AMCP::IO_Core::Device_Connection::get_total_read_range() const";
    *(_QWORD *)&v312 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v312) = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v293);
    *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = *(_OWORD *)v293;
    v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_QWORD *)&v278 = *(_QWORD *)&v293[16];
    memset(v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v277);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v245, (uint64_t)&buf);
  }
  v48 = *(_QWORD **)&(*a1)[16]._os_unfair_lock_opaque;
  if (v48)
  {
    v49 = 0.0;
    v50 = 1;
    v51 = 0.0;
    do
    {
      AMCP::IO_Core::Stream_Connection::get_unique_read_range((AMCP::IO_Core::Stream_Connection *)(v48 + 7));
      if ((v50 & 1) != 0)
      {
        v51 = v53;
        v49 = v52;
      }
      else
      {
        v54 = round(v52);
        v55 = round(v53);
        if (v54 < v55)
        {
          v56 = round(v49);
          v57 = round(v51);
          if (v56 >= v54)
            v58 = v52;
          else
            v58 = v49;
          if (v55 >= v57)
            v59 = v53;
          else
            v59 = v51;
          if (v56 < v57)
            v51 = v59;
          else
            v51 = v53;
          if (v56 < v57)
            v49 = v58;
          else
            v49 = v52;
        }
      }
      v50 = 0;
      v48 = (_QWORD *)*v48;
    }
    while (v48);
  }
  else
  {
    v49 = 0.0;
    v51 = 0.0;
  }
  v260 = vcvtmd_s64_f64(v45);
  v60 = (unint64_t *)&v47->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (round(v51 - v49) > 8102.0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v46);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v253 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR))
    {
      v254 = pthread_self();
      v255 = pthread_mach_thread_np(v254);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v255;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 190;
      LOWORD(v311) = 2080;
      *(_QWORD *)((char *)&v311 + 2) = "not (total_read_range.length() <= 8102_S)";
      _os_log_error_impl(&dword_1B57BA000, v253, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    v256 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v270);
    std::logic_error::logic_error((std::logic_error *)&v308, &v270);
    v308.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v299, (const std::logic_error *)&v308);
    v301 = 0uLL;
    v302 = 0;
    v303 = -1;
    v299 = (AMCP::Log::Scope_Registry *)off_1E69A1208;
    v300.__imp_.__imp_ = (const char *)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v299);
    *((_QWORD *)&v311 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Graph::IO_Pr"
                             "oc_Cycle_Info &, const DAL_Time_Delta &) const";
    *(_QWORD *)&v312 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v312) = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v293);
    *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = *(_OWORD *)v293;
    v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_QWORD *)&v278 = *(_QWORD *)&v293[16];
    memset(v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v277);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v256, (uint64_t)&buf);
  }
  v63 = *(_QWORD *)&v44[24]._os_unfair_lock_opaque;
  v62 = *(std::__shared_weak_count **)&v44[26]._os_unfair_lock_opaque;
  buf.__r_.__value_.__r.__words[0] = v63;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(unsigned int *)(a2 + 176);
  v67 = AMCP::DAL::DAL_Time::get_host_time(v261);
  v259 = v6;
  v257 = vcvtmd_s64_f64(v49);
  v258 = vcvtmd_s64_f64(v51 - v49);
  (*(void (**)(std::string::size_type, uint64_t, uint64_t, double))(*(_QWORD *)v63 + 256))(v63, v66, v67, (double)(unint64_t)v257);
  if (v62)
  {
    v68 = (unint64_t *)&v62->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  for (i = *(uint64_t **)&v44[16]._os_unfair_lock_opaque; i; i = (uint64_t *)*i)
  {
    v264 = (AMCP::IO_Core::Stream_Connection *)(i + 7);
    AMCP::IO_Core::Stream_Connection::get_unique_read_range((AMCP::IO_Core::Stream_Connection *)(i + 7));
    v72 = v71;
    v74 = v73;
    if (round(v71) < round(v73))
    {
      v76 = i[31];
      v75 = i[32];
      v277.__r_.__value_.__r.__words[0] = v76;
      v277.__r_.__value_.__l.__size_ = v75;
      if (v75)
      {
        v77 = (unint64_t *)(v75 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
        v79 = i[31];
        v80 = i[32];
        v308.__r_.__value_.__r.__words[0] = v79;
        v308.__r_.__value_.__l.__size_ = v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
      }
      else
      {
        *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v76;
        v79 = v76;
      }
      AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)v293, v79);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v299, (uint64_t *)v293, v72, v74);
      (*(void (**)(std::string *__return_ptr, std::string::size_type, AMCP::Log::Scope_Registry **))(*(_QWORD *)v76 + 160))(&buf, v76, &v299);
      v83 = v304;
      if (v304)
      {
        v84 = (unint64_t *)&v304->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
      if (*((_QWORD *)&v301 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = *(std::__shared_weak_count **)&v293[8];
      if (*(_QWORD *)&v293[8])
      {
        v90 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = (std::__shared_weak_count *)v308.__r_.__value_.__l.__size_;
      if (v308.__r_.__value_.__l.__size_)
      {
        v93 = (unint64_t *)(v308.__r_.__value_.__l.__size_ + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
      if (v277.__r_.__value_.__l.__size_)
      {
        v96 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
    else
    {
      AMCP::DAL::create_null_writable_range((AMCP::DAL *)&buf);
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&buf, (AMCP::DAL::DAL_Time *)&v312))
    {
      AMCP::IO_Core::Stream_Connection::get_unique_read_range(v264);
      v99 = v98;
      v101 = v100;
      AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v297, (uint64_t)&buf);
      v102 = v297;
      v263 = v298;
      if (v297 != v298)
      {
        v103 = vcvtmd_s64_f64(v101 - v99);
        v104 = (double)(uint64_t)floor(v99);
        while (1)
        {
          v105 = i[50];
          if (!v105)
            break;
          AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)&v277, (uint64_t)v264);
          (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v277.__r_.__value_.__l.__data_
                                                                           + 56))(&v299);
          other_data_bytes = (AMCP::Log::Scope_Registry *)AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(v299, *v102, v102[1]);
          v295 = other_data_bytes;
          v296 = v107;
          v108 = (std::__shared_weak_count *)v300.__vftable;
          if (v300.__vftable)
          {
            v109 = (unint64_t *)&v300.~logic_error_0;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
          if (v277.__r_.__value_.__l.__size_)
          {
            v112 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
LABEL_140:
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
LABEL_142:
          if (!v295)
          {
            AMCP::Log::Scope_Registry::get(other_data_bytes);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
            v225 = (std::__shared_weak_count *)v300.__vftable;
            v226 = *(NSObject **)v299;
            if (v300.__vftable)
            {
              v227 = (unint64_t *)&v300.~logic_error_0;
              do
                v228 = __ldaxr(v227);
              while (__stlxr(v228 - 1, v227));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
            {
              v229 = pthread_self();
              v230 = pthread_mach_thread_np(v229);
              LODWORD(v299) = 67109890;
              HIDWORD(v299) = v230;
              LOWORD(v300.__vftable) = 2080;
              *(std::logic_error_vtbl **)((char *)&v300.__vftable + 2) = (std::logic_error_vtbl *)"Device_Connection.cpp";
              WORD1(v300.__imp_.__imp_) = 1024;
              HIDWORD(v300.__imp_.__imp_) = 206;
              LOWORD(v301) = 2080;
              *(_QWORD *)((char *)&v301 + 2) = "not (not bytes.empty())";
              _os_log_error_impl(&dword_1B57BA000, v226, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v299, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v290);
            v231 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v308);
            std::logic_error::logic_error((std::logic_error *)v288, &v308);
            *(_QWORD *)v288 = MEMORY[0x1E0DE5018] + 16;
            std::logic_error::logic_error((std::logic_error *)&v277, (const std::logic_error *)v288);
            v278 = 0uLL;
            *(_QWORD *)&v279 = 0;
            DWORD2(v279) = -1;
            v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
            v277.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v277);
            *((_QWORD *)&v301 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Grap"
                                     "h::IO_Proc_Cycle_Info &, const DAL_Time_Delta &) const";
            v302 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
            v303 = 206;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&outOutputData);
            *(_OWORD *)&v293[8] = outOutputData;
            *(_QWORD *)v293 = off_1E69A20A0;
            *(_QWORD *)&v294 = v306;
            outOutputData = 0uLL;
            v306 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v299, (uint64_t)v293);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v231, (uint64_t)&v299);
          }
          *(_QWORD *)v293 = &v295;
          *(_OWORD *)&v293[8] = 0u;
          v294 = 0u;
          v116 = i[31];
          v117 = i[32];
          v308.__r_.__value_.__r.__words[0] = v116;
          v308.__r_.__value_.__l.__size_ = v117;
          if (v117)
          {
            v118 = (unint64_t *)(v117 + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v116 + 56))(&v277);
          v120 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v277.__r_.__value_.__l.__data_);
          AMCP::DAL::sample_group_from_samples<float>((unint64_t *)&v299, (uint64_t **)(v120 + 56));
          v121 = *(_QWORD *)v299;
          v300.__vftable = (std::logic_error_vtbl *)v299;
          std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v299, (v300.__imp_.__imp_ - (const char *)v299) >> 4);
          v122 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
          if (v277.__r_.__value_.__l.__size_)
          {
            v123 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v125 = (std::__shared_weak_count *)v308.__r_.__value_.__l.__size_;
          if (v308.__r_.__value_.__l.__size_)
          {
            v126 = (unint64_t *)(v308.__r_.__value_.__l.__size_ + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          *(_QWORD *)&v293[8] = v121;
          *(_QWORD *)&v293[16] = v296 - v121;
          *(_QWORD *)&v294 = v295;
          *((_QWORD *)&v294 + 1) = v103;
          sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v102 + 2));
          v129 = *((_DWORD *)i + 92);
          v131 = *(AMCP::Log::Scope_Registry **)&v44[24]._os_unfair_lock_opaque;
          v130 = *(std::__shared_weak_count **)&v44[26]._os_unfair_lock_opaque;
          v299 = v131;
          v300.__vftable = (std::logic_error_vtbl *)v130;
          if (v130)
          {
            v132 = (unint64_t *)&v130->__shared_owners_;
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v134 = *(unsigned int *)(a2 + 176);
          v135 = AMCP::DAL::DAL_Time::get_host_time(v261);
          (*(void (**)(AMCP::Log::Scope_Registry *, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _BYTE *, double))(*(_QWORD *)v131 + 264))(v131, v134, v135, *((unsigned int *)i + 24), v129 * vcvtmd_s64_f64(sample_time - v99), v103, v293, v104);
          if (!v130)
            goto LABEL_163;
          v136 = (unint64_t *)&v130->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
            if (v105)
            {
LABEL_164:
              v138 = (OpaqueAudioConverter *)i[50];
              AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)&v277, (uint64_t)v264);
              (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v277.__r_.__value_.__l.__data_
                                                                               + 56))(&v299);
              if (v299)
              {
                (*(void (**)(std::string *__return_ptr, AMCP::Log::Scope_Registry *, AMCP::Log::Scope_Registry **, double, double))(*(_QWORD *)v299 + 64))(&v308, v299, &v299, *v102, v102[1]);
              }
              else
              {
                v308.__r_.__value_.__r.__words[0] = 0;
                v309 = 0;
              }
              v139 = (std::__shared_weak_count *)v300.__vftable;
              if (v300.__vftable)
              {
                v140 = (unint64_t *)&v300.~logic_error_0;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              v142 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
              if (v277.__r_.__value_.__l.__size_)
              {
                v143 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              v145 = i[31];
              v146 = i[32];
              v277.__r_.__value_.__r.__words[0] = v145;
              v277.__r_.__value_.__l.__size_ = v146;
              if (v146)
              {
                v147 = (unint64_t *)(v146 + 8);
                do
                  v148 = __ldxr(v147);
                while (__stxr(v148 + 1, v147));
              }
              (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v145 + 56))(&v299);
              if (v299)
              {
                (*(void (**)(__int128 *__return_ptr, AMCP::Log::Scope_Registry *, AMCP::Log::Scope_Registry **, double, double))(*(_QWORD *)v299 + 64))(&outOutputData, v299, &v299, *v102, v102[1]);
              }
              else
              {
                *(_QWORD *)&outOutputData = 0;
                v307 = 0;
              }
              v149 = (std::__shared_weak_count *)v300.__vftable;
              if (v300.__vftable)
              {
                v150 = (unint64_t *)&v300.~logic_error_0;
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v152 = (std::__shared_weak_count *)v277.__r_.__value_.__l.__size_;
              if (v277.__r_.__value_.__l.__size_)
              {
                v153 = (unint64_t *)(v277.__r_.__value_.__l.__size_ + 8);
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              v155 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(v138, vcvtmd_s64_f64(v102[1] - *v102), (const AudioBufferList *)v308.__r_.__value_.__l.__data_, (AudioBufferList *)outOutputData);
              if ((_DWORD)v155)
              {
                AMCP::Log::Scope_Registry::get(v155);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
                v246 = (std::__shared_weak_count *)v300.__vftable;
                v247 = *(NSObject **)v299;
                if (v300.__vftable)
                {
                  v248 = (unint64_t *)&v300.~logic_error_0;
                  do
                    v249 = __ldaxr(v248);
                  while (__stlxr(v249 - 1, v248));
                  if (!v249)
                  {
                    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                    std::__shared_weak_count::__release_weak(v246);
                  }
                }
                if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
                {
                  v250 = pthread_self();
                  v251 = pthread_mach_thread_np(v250);
                  LODWORD(v299) = 67109890;
                  HIDWORD(v299) = v251;
                  LOWORD(v300.__vftable) = 2080;
                  *(std::logic_error_vtbl **)((char *)&v300.__vftable + 2) = (std::logic_error_vtbl *)"Device_Connection.cpp";
                  WORD1(v300.__imp_.__imp_) = 1024;
                  HIDWORD(v300.__imp_.__imp_) = 229;
                  LOWORD(v301) = 2080;
                  *(_QWORD *)((char *)&v301 + 2) = "not (the_error == noErr)";
                  _os_log_error_impl(&dword_1B57BA000, v247, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device_Connection::read_all_input_streams: AudioConverterConvertComplexBuffer format conversion failed", (uint8_t *)&v299, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v292);
                v252 = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Device_Connection::read_all_input_streams: AudioConverterConvertComplexBuffer format conversion failed", (uint64_t)&v290);
                std::logic_error::logic_error(&v291, &v290);
                v291.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error((std::logic_error *)&v277, &v291);
                v278 = 0uLL;
                *(_QWORD *)&v279 = 0;
                DWORD2(v279) = -1;
                v277.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
                v277.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v277);
                *((_QWORD *)&v301 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const "
                                         "Graph::IO_Proc_Cycle_Info &, const DAL_Time_Delta &) const";
                v302 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
                v303 = 229;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v286);
                *(_OWORD *)&v288[8] = v286;
                *(_QWORD *)v288 = off_1E69A20A0;
                v289 = v287;
                v286 = 0uLL;
                v287 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v299, (uint64_t)v288);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v252, (uint64_t)&v299);
              }
              std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&outOutputData);
              std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v308);
            }
          }
          else
          {
LABEL_163:
            if (v105)
              goto LABEL_164;
          }
          os_unfair_lock_opaque = v44[22]._os_unfair_lock_opaque;
          if (*((char *)i + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v283, (const std::string::value_type *)i[2], i[3]);
          }
          else
          {
            v283 = (std::logic_error)*((_OWORD *)i + 1);
            *(_QWORD *)&v284 = i[4];
          }
          *((_QWORD *)&v284 + 1) = i[5];
          v285 = *((_DWORD *)i + 12);
          LODWORD(v299) = os_unfair_lock_opaque;
          v300 = v283;
          v301 = v284;
          v283 = (std::logic_error)0;
          *(_QWORD *)&v284 = 0;
          LODWORD(v302) = v285;
          AMCP::DAL::Writable_Range::commit_direct_write(v316, (uint64_t)&v299, (uint64_t)v102);
          if (SBYTE7(v301) < 0)
            operator delete(v300.__vftable);
          v102 += 14;
          if (v102 == v263)
            goto LABEL_203;
        }
        (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v316 + 56))(&v299);
        other_data_bytes = (AMCP::Log::Scope_Registry *)AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(v299, *v102, v102[1]);
        v295 = other_data_bytes;
        v296 = v114;
        v111 = (std::__shared_weak_count *)v300.__vftable;
        if (!v300.__vftable)
          goto LABEL_142;
        v115 = (unint64_t *)&v300.~logic_error_0;
        do
          v113 = __ldaxr(v115);
        while (__stlxr(v113 - 1, v115));
        goto LABEL_140;
      }
LABEL_203:
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&buf, (AMCP::DAL::DAL_Time *)&v312))
      {
        v277 = buf;
        v157 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
        v158 = v311;
        v278 = v311;
        if (*((_QWORD *)&v311 + 1))
        {
          v159 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
          do
            v160 = __ldxr(v159);
          while (__stxr(v160 + 1, v159));
        }
        v279 = v312;
        v280 = v313;
        v162 = v314;
        v161 = v315;
        v281 = v314;
        v282 = v315;
        if (v315)
        {
          v163 = (unint64_t *)&v315->__shared_owners_;
          do
            v164 = __ldxr(v163);
          while (__stxr(v164 + 1, v163));
        }
        v165 = i[31];
        v166 = i[32];
        *(_QWORD *)v293 = v165;
        *(_QWORD *)&v293[8] = v166;
        if (v166)
        {
          v167 = (unint64_t *)(v166 + 8);
          do
            v168 = __ldxr(v167);
          while (__stxr(v168 + 1, v167));
        }
        v270 = v277;
        v271 = v158;
        v272 = v157;
        if (v157)
        {
          v169 = (unint64_t *)&v157->__shared_owners_;
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 1, v169));
        }
        v273 = v279;
        v274 = v280;
        v275 = v162;
        v276 = v161;
        if (v161)
        {
          v171 = (unint64_t *)&v161->__shared_owners_;
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
        }
        (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v165
                                                                                                 + 144))(&v299, v165, &v270);
        v173 = v276;
        if (v276)
        {
          v174 = (unint64_t *)&v276->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v176 = v272;
        if (v272)
        {
          v177 = (unint64_t *)&v272->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
        v179 = *(std::__shared_weak_count **)&v293[8];
        if (*(_QWORD *)&v293[8])
        {
          v180 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        AMCP::IO_Core::Stream_Connection::maybe_capture_audio((uint64_t)v264, (uint64_t)&v299);
        v182 = v304;
        if (v304)
        {
          v183 = (unint64_t *)&v304->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        v185 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
        if (*((_QWORD *)&v301 + 1))
        {
          v186 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
        v188 = v282;
        if (v282)
        {
          v189 = (unint64_t *)&v282->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v191 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
        if (*((_QWORD *)&v278 + 1))
        {
          v192 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
      }
      v299 = (AMCP::Log::Scope_Registry *)&v297;
      std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v299);
    }
    i[14] = 0;
    i[15] = 0;
    v194 = v315;
    if (v315)
    {
      v195 = (unint64_t *)&v315->__shared_owners_;
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v311 + 1);
    if (*((_QWORD *)&v311 + 1))
    {
      v198 = (unint64_t *)(*((_QWORD *)&v311 + 1) + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
  }
  v201 = *(_QWORD *)&v44[24]._os_unfair_lock_opaque;
  v200 = *(std::__shared_weak_count **)&v44[26]._os_unfair_lock_opaque;
  buf.__r_.__value_.__r.__words[0] = v201;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v200;
  if (v200)
  {
    v202 = (unint64_t *)&v200->__shared_owners_;
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
  }
  v204 = *(unsigned int *)(a2 + 176);
  v205 = AMCP::DAL::DAL_Time::get_host_time(v261);
  (*(void (**)(std::string::size_type, uint64_t, uint64_t, unint64_t, unint64_t, double))(*(_QWORD *)v201 + 272))(v201, v204, v205, v258, v260, (double)v257);
  if (v200)
  {
    v206 = (unint64_t *)&v200->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  os_unfair_lock_unlock(v44 + 1);
  v208 = (unint64_t *)&v43->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  v210 = v269;
  if (v269)
  {
    v211 = (unint64_t *)&v269->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v266;
  if (v266)
  {
    v214 = (unint64_t *)&v266->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = (unint64_t *)&v259->__shared_owners_;
  do
    v217 = __ldaxr(v216);
  while (__stlxr(v217 - 1, v216));
  if (!v217)
  {
    ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
    std::__shared_weak_count::__release_weak(v259);
  }
}

void sub_1B58B5B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  os_unfair_lock_s *v39;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  os_unfair_lock_unlock(v39);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (v38)
  {
    v43 = (unint64_t *)&v38->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void AMCP::IO_Core::Device_Connection::end_cycle(uint64_t a1, uint64_t a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  os_unfair_lock_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  os_unfair_lock_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  os_unfair_lock_t v20;
  uint8_t *v21;
  os_unfair_lock_s *v22;
  char v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::logic_error_vtbl *v29;
  const char *imp;
  double v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t host_time;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  std::logic_error_vtbl *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  NSObject *v78;
  unint64_t *v79;
  unint64_t v80;
  _opaque_pthread_t *v81;
  mach_port_t v82;
  void *exception;
  std::__shared_weak_count *v84;
  NSObject *v85;
  unint64_t *v86;
  unint64_t v87;
  _opaque_pthread_t *v88;
  mach_port_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  NSObject *v92;
  unint64_t *v93;
  unint64_t v94;
  _opaque_pthread_t *v95;
  mach_port_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  AMCP::DAL::DAL_Time_Delta *v99;
  os_unfair_lock_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t (**v103)();
  std::string v104;
  std::__shared_weak_count *v105;
  std::logic_error i;
  std::logic_error v107;
  uint64_t v108;
  std::string v109;
  uint64_t v110;
  std::string v111;
  std::logic_error v112;
  std::logic_error v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  uint8_t buf[8];
  _BYTE v121[10];
  __int16 v122;
  int v123;
  __int128 v124;
  const char *v125;
  int v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (v4 = std::__shared_weak_count::lock(v4), (v7 = v4) == 0) || (v8 = *(os_unfair_lock_t *)a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v77 = *(std::__shared_weak_count **)v121;
    v78 = **(NSObject ***)buf;
    if (*(_QWORD *)v121)
    {
      v79 = (unint64_t *)(*(_QWORD *)v121 + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      v81 = pthread_self();
      v82 = pthread_mach_thread_np(v81);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v82;
      *(_WORD *)v121 = 2080;
      *(_QWORD *)&v121[2] = "Device_Connection.cpp";
      v122 = 1024;
      v123 = 117;
      LOWORD(v124) = 2080;
      *(_QWORD *)((char *)&v124 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v78, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v112);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v109);
    std::logic_error::logic_error(&v107, &v109);
    v107.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v113, &v107);
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = -1;
    v113.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v114 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v113);
    *((_QWORD *)&v124 + 1) = "void AMCP::IO_Core::Device_Connection::end_cycle(const Graph::IO_Proc_Cycle_Info &, const D"
                             "AL::DAL_Time_Delta &) const";
    v125 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v126 = 117;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
    v103 = off_1E69A20A0;
    v104 = v111;
    memset(&v111, 0, sizeof(v111));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v103);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v9 = *(std::__shared_weak_count **)&v8[30]._os_unfair_lock_opaque;
  v101 = *(_QWORD *)&v8[28]._os_unfair_lock_opaque;
  v102 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v103, a3, &v101);
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v12
    || (v12 = std::__shared_weak_count::lock(v12), (v13 = v12) == 0)
    || (v99 = a3, (v14 = *(os_unfair_lock_t *)a1) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v84 = *(std::__shared_weak_count **)v121;
    v85 = **(NSObject ***)buf;
    if (*(_QWORD *)v121)
    {
      v86 = (unint64_t *)(*(_QWORD *)v121 + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v88 = pthread_self();
      v89 = pthread_mach_thread_np(v88);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v89;
      *(_WORD *)v121 = 2080;
      *(_QWORD *)&v121[2] = "Device_Connection.cpp";
      v122 = 1024;
      v123 = 252;
      LOWORD(v124) = 2080;
      *(_QWORD *)((char *)&v124 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v85, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&i);
    v90 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v112, &v111);
    v112.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v113, &v112);
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = -1;
    v113.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v114 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v113);
    *((_QWORD *)&v124 + 1) = "void AMCP::IO_Core::Device_Connection::write_all_output_streams(const Graph::IO_Proc_Cycle_"
                             "Info &, const DAL_Time_Delta &) const";
    v125 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v126 = 252;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v107);
    v109.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v109.__r_.__value_.__r.__words[1] = v107;
    v110 = v108;
    v107.__vftable = 0;
    v107.__imp_.__imp_ = 0;
    v108 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v109);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v90, (uint64_t)buf);
  }
  os_unfair_lock_lock(*(os_unfair_lock_t *)a1);
  v100 = v14;
  v17 = *(_QWORD *)&v14[6]._os_unfair_lock_opaque;
  v16 = v14 + 6;
  v15 = v17;
  if (v17 && !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v15 + 128), (AMCP::DAL::DAL_Time *)(v15 + 168)))
  {
    v25 = v100;
    goto LABEL_51;
  }
  v18 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v18 || (v18 = std::__shared_weak_count::lock(v18), (v19 = v18) == 0) || (v20 = *(os_unfair_lock_t *)a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v91 = *(std::__shared_weak_count **)v121;
    v92 = **(NSObject ***)buf;
    if (*(_QWORD *)v121)
    {
      v93 = (unint64_t *)(*(_QWORD *)v121 + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      v95 = pthread_self();
      v96 = pthread_mach_thread_np(v95);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v96;
      *(_WORD *)v121 = 2080;
      *(_QWORD *)&v121[2] = "Device_Connection.cpp";
      v122 = 1024;
      v123 = 288;
      LOWORD(v124) = 2080;
      *(_QWORD *)((char *)&v124 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v92, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v119);
    v97 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v112, &v111);
    v112.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v113, &v112);
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = -1;
    v113.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v114 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v113);
    *((_QWORD *)&v124 + 1) = "Sample_Time_Range AMCP::IO_Core::Device_Connection::calculate_write_range() const";
    v125 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v126 = 288;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v107);
    v109.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v109.__r_.__value_.__r.__words[1] = v107;
    v110 = v108;
    v107.__vftable = 0;
    v107.__imp_.__imp_ = 0;
    v108 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v109);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v97, (uint64_t)buf);
  }
  v113.__vftable = 0;
  v113.__imp_.__imp_ = 0;
  *(_QWORD *)buf = &off_1E6971748;
  *(_QWORD *)v121 = &v113;
  v21 = buf;
  *(_QWORD *)&v124 = buf;
  v22 = v20 + 6;
  do
  {
    v22 = *(os_unfair_lock_s **)&v22->_os_unfair_lock_opaque;
    if (!v22)
      break;
    if (!v21)
      std::__throw_bad_function_call[abi:ne180100]();
    v23 = (*(uint64_t (**)(uint8_t *, uint32_t *))(*(_QWORD *)v21 + 48))(v21, &v22[14]._os_unfair_lock_opaque);
    v21 = (uint8_t *)v124;
  }
  while ((v23 & 1) != 0);
  if (v21 == buf)
  {
    v24 = 4;
    v21 = buf;
  }
  else
  {
    if (!v21)
      goto LABEL_25;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v24))();
LABEL_25:
  v26 = (unint64_t *)&v19->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v28 = v13;
  v98 = v7;
  v29 = v113.__vftable;
  imp = v113.__imp_.__imp_;
  i = v113;
  if ((v103 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v103);
  v31 = *(double *)&v104.__r_.__value_.__l.__data_;
  v33 = *(_QWORD *)&v100[24]._os_unfair_lock_opaque;
  v32 = *(std::__shared_weak_count **)&v100[26]._os_unfair_lock_opaque;
  *(_QWORD *)buf = v33;
  *(_QWORD *)v121 = v32;
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(unsigned int *)(a2 + 176);
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  v38 = vcvtmd_s64_f64(v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, double))(*(_QWORD *)v33 + 280))(v33, v36, host_time, vcvtmd_s64_f64(*(double *)&imp - *(double *)&v29), v38, (double)(uint64_t)floor(*(double *)&v29));
  v13 = v28;
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  for (i = (std::logic_error)0;
        ;
        AMCP::IO_Core::Device_Connection::write_stream((uint64_t *)a1, a2, (uint64_t)&v16[14], (double *)&i))
  {
    v16 = *(os_unfair_lock_s **)&v16->_os_unfair_lock_opaque;
    if (!v16)
      break;
  }
  v42 = *(_QWORD *)&v100[24]._os_unfair_lock_opaque;
  v41 = *(std::__shared_weak_count **)&v100[26]._os_unfair_lock_opaque;
  *(_QWORD *)buf = v42;
  *(_QWORD *)v121 = v41;
  if (v41)
  {
    v43 = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(unsigned int *)(a2 + 176);
  v46 = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, double))(*(_QWORD *)v42 + 296))(v42, v45, v46, vcvtmd_s64_f64(*(double *)&i.__imp_.__imp_ - *(double *)&i.__vftable), v38, (double)(uint64_t)floor(*(double *)&i.__vftable));
  v7 = v98;
  if (v41)
  {
    v47 = (unint64_t *)&v41->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v25 = v100;
LABEL_51:
  os_unfair_lock_unlock(v25);
  v49 = (unint64_t *)&v13->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v51 = v105;
  if (v105)
  {
    v52 = (unint64_t *)&v105->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v102;
  if (v102)
  {
    v55 = (unint64_t *)&v102->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v58 = *(std::logic_error_vtbl **)&v8[24]._os_unfair_lock_opaque;
  v57 = *(const char **)&v8[26]._os_unfair_lock_opaque;
  v113.__vftable = v58;
  v113.__imp_.__imp_ = v57;
  if (v57)
  {
    v59 = (unint64_t *)(v57 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(unsigned int *)(a2 + 176);
  v62 = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  v63 = *(_QWORD *)&v8[30]._os_unfair_lock_opaque;
  v103 = *(uint64_t (***)())&v8[28]._os_unfair_lock_opaque;
  v104.__r_.__value_.__r.__words[0] = v63;
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)buf, v99, (uint64_t *)&v103);
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  (*((void (**)(std::logic_error_vtbl *, uint64_t, uint64_t, unint64_t))v58->~logic_error + 31))(v58, v61, v62, vcvtmd_s64_f64(*(double *)v121));
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)v104.__r_.__value_.__r.__words[0];
  if (v104.__r_.__value_.__r.__words[0])
  {
    v70 = (unint64_t *)(v104.__r_.__value_.__r.__words[0] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)v113.__imp_.__imp_;
  if (v113.__imp_.__imp_)
  {
    v73 = (unint64_t *)(v113.__imp_.__imp_ + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (unint64_t *)&v7->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B58B706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, os_unfair_lock_t lock, char a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  os_unfair_lock_unlock(lock);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a9)
  {
    v48 = (unint64_t *)&a9->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Connection::write_stream(uint64_t *a1, uint64_t a2, uint64_t a3, double *a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *exception;
  double *v60;
  OpaqueAudioConverter *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  AMCP::Log::Scope_Registry *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  AMCP::Log::Scope_Registry *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  double sample_time;
  double v96;
  AMCP::Log::Scope_Registry *v97;
  __n128 v98;
  double v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  unint64_t v111;
  int *v112;
  int v113;
  int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  uint64_t v119;
  unint64_t v120;
  int64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *size;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t host_time;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  NSObject *v153;
  _opaque_pthread_t *v154;
  mach_port_t v155;
  void *v156;
  NSObject *v157;
  _opaque_pthread_t *v158;
  mach_port_t v159;
  void *v160;
  NSObject *v161;
  _opaque_pthread_t *v162;
  mach_port_t v163;
  void *v164;
  NSObject *v165;
  _opaque_pthread_t *v166;
  mach_port_t v167;
  void *v168;
  NSObject *v169;
  _opaque_pthread_t *v170;
  mach_port_t v171;
  void *v172;
  NSObject *v173;
  _opaque_pthread_t *v174;
  mach_port_t v175;
  void *v176;
  std::__shared_weak_count *v177;
  double *v178;
  std::logic_error v180;
  uint64_t v181;
  std::string v182;
  uint64_t v183;
  std::string v184;
  std::logic_error v185;
  char v186;
  double *v187;
  double *v188;
  _BYTE v189[24];
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  AudioBufferList *outOutputData[2];
  uint64_t v195;
  uint64_t v196;
  _BYTE v197[32];
  uint64_t v198;
  uint8_t buf[8];
  _BYTE v200[10];
  __int16 v201;
  int v202;
  __int16 v203;
  _BYTE v204[14];
  const char *v205;
  int v206;
  std::__shared_weak_count *v207;
  AMCP::DAL::DAL_Time_Range *v208;
  _BYTE v209[24];
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v177 = v5) == 0) || (v8 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v53 = *(std::__shared_weak_count **)v200;
    v54 = **(NSObject ***)buf;
    if (*(_QWORD *)v200)
    {
      v55 = (unint64_t *)(*(_QWORD *)v200 + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v57 = pthread_self();
      v58 = pthread_mach_thread_np(v57);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v58;
      *(_WORD *)v200 = 2080;
      *(_QWORD *)&v200[2] = "Device_Connection.cpp";
      v201 = 1024;
      v202 = 305;
      v203 = 2080;
      *(_QWORD *)v204 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v187);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)v197);
    std::logic_error::logic_error((std::logic_error *)&v182, (const std::string *)v197);
    v182.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v209, (const std::logic_error *)&v182);
    v210 = 0uLL;
    *(_QWORD *)&v211 = 0;
    DWORD2(v211) = -1;
    *(_QWORD *)v209 = off_1E69A1208;
    *(_QWORD *)&v209[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v209);
    *(_QWORD *)&v204[6] = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &, const S"
                          "tream_Connection &, Sample_Time_Range &) const";
    v205 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v206 = 305;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)outOutputData);
    *(_OWORD *)&v189[8] = *(_OWORD *)outOutputData;
    *(_QWORD *)v189 = off_1E69A20A0;
    *(_QWORD *)&v190 = v195;
    outOutputData[0] = 0;
    outOutputData[1] = 0;
    v195 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v189);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v9 = (_OWORD *)(a3 + 72);
  v10 = (__int128 *)(a3 + 112);
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 72), (AMCP::DAL::DAL_Time *)(a3 + 112)))
    goto LABEL_71;
  v11 = *(_QWORD *)(a3 + 192);
  v12 = *(_QWORD *)(a3 + 200);
  *(_QWORD *)v189 = v11;
  *(_QWORD *)&v189[8] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v11 + 72))(v209);
  v15 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v209, (AMCP::DAL::DAL_Time *)&v211);
  v16 = v214;
  if (v214)
  {
    p_shared_owners = (unint64_t *)&v214->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
  if (*((_QWORD *)&v210 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (*(_QWORD *)&v189[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v189[8] + 16))(*(_QWORD *)&v189[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v189[8]);
      if (v15)
        goto LABEL_23;
LABEL_71:
      AMCP::DAL::create_null_readable_range((AMCP::DAL *)buf);
      goto LABEL_72;
    }
  }
  if (!v15)
    goto LABEL_71;
LABEL_23:
  v24 = *(_QWORD *)(a3 + 192);
  v25 = *(_QWORD *)(a3 + 200);
  *(_QWORD *)v189 = v24;
  *(_QWORD *)&v189[8] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_OWORD *)v209 = *v9;
  v28 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)&v209[16] = *(_QWORD *)(a3 + 88);
  *(_QWORD *)&v210 = v28;
  v29 = *(_QWORD *)(a3 + 104);
  *((_QWORD *)&v210 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v211 = *v10;
  v32 = *(_QWORD *)(a3 + 136);
  v212 = *(_QWORD *)(a3 + 128);
  v213 = v32;
  v33 = *(std::__shared_weak_count **)(a3 + 144);
  v214 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v24 + 144))(buf, v24, v209);
  v36 = v214;
  if (v214)
  {
    v37 = (unint64_t *)&v214->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
  if (*((_QWORD *)&v210 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (*(_QWORD *)&v189[8])
  {
    v42 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v189[8] + 16))(*(_QWORD *)&v189[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v189[8]);
    }
  }
  *(_OWORD *)v197 = 0uLL;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v189, (uint64_t *)v197);
  *v9 = *(_OWORD *)v189;
  *(_QWORD *)(a3 + 88) = *(_QWORD *)&v189[16];
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a3 + 96, &v190);
  *v10 = v191;
  *(_QWORD *)(a3 + 128) = v192;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a3 + 136, &v193);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
  if (*((_QWORD *)&v193 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(std::__shared_weak_count **)&v197[8];
  if (*(_QWORD *)&v197[8])
  {
    v51 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_72:
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v205))
  {
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v187, v208, (uint64_t)buf);
    v60 = v187;
    v178 = v188;
    while (v60 != v178)
    {
      v61 = *(OpaqueAudioConverter **)(a3 + 344);
      if (v61)
      {
        v62 = *(_QWORD *)(a3 + 192);
        v63 = *(_QWORD *)(a3 + 200);
        *(_QWORD *)v189 = v62;
        *(_QWORD *)&v189[8] = v63;
        if (v63)
        {
          v64 = (unint64_t *)(v63 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v62 + 56))(v209);
        if (*(_QWORD *)v209)
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _BYTE *, double, double))(**(_QWORD **)v209 + 64))(v197, *(_QWORD *)v209, v209, *v60, v60[1]);
        }
        else
        {
          *(_QWORD *)v197 = 0;
          v198 = 0;
        }
        v71 = *(std::__shared_weak_count **)&v209[8];
        if (*(_QWORD *)&v209[8])
        {
          v72 = (unint64_t *)(*(_QWORD *)&v209[8] + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v74 = *(std::__shared_weak_count **)&v189[8];
        if (*(_QWORD *)&v189[8])
        {
          v75 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)v189, a3);
        (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)v189 + 56))(v209);
        if (*(_QWORD *)v209)
        {
          (*(void (**)(AudioBufferList **__return_ptr, _QWORD, _BYTE *, double, double))(**(_QWORD **)v209
                                                                                                  + 64))(outOutputData, *(_QWORD *)v209, v209, *v60, v60[1]);
        }
        else
        {
          outOutputData[0] = 0;
          v196 = 0;
        }
        v77 = *(std::__shared_weak_count **)&v209[8];
        if (*(_QWORD *)&v209[8])
        {
          v78 = (unint64_t *)(*(_QWORD *)&v209[8] + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = *(std::__shared_weak_count **)&v189[8];
        if (*(_QWORD *)&v189[8])
        {
          v81 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(v61, vcvtmd_s64_f64(v60[1] - *v60), *(const AudioBufferList **)v197, outOutputData[0]);
        if ((_DWORD)v83)
        {
          AMCP::Log::Scope_Registry::get(v83);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
          v165 = **(NSObject ***)v209;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
          if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
          {
            v166 = pthread_self();
            v167 = pthread_mach_thread_np(v166);
            *(_DWORD *)v209 = 67109890;
            *(_DWORD *)&v209[4] = v167;
            *(_WORD *)&v209[8] = 2080;
            *(_QWORD *)&v209[10] = "Device_Connection.cpp";
            *(_WORD *)&v209[18] = 1024;
            *(_DWORD *)&v209[20] = 320;
            LOWORD(v210) = 2080;
            *(_QWORD *)((char *)&v210 + 2) = "not (the_error == noErr)";
            _os_log_error_impl(&dword_1B57BA000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device_Connection::write_stream: AudioConverterConvertComplexBuffer format conversion failed", v209, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v186);
          v168 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Device_Connection::write_stream: AudioConverterConvertComplexBuffer format conversion failed", (uint64_t)&v184);
          std::logic_error::logic_error(&v185, &v184);
          v185.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v189, &v185);
          v190 = 0uLL;
          *(_QWORD *)&v191 = 0;
          DWORD2(v191) = -1;
          *(_QWORD *)v189 = off_1E69A1208;
          *(_QWORD *)&v189[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
          *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &"
                                   ", const Stream_Connection &, Sample_Time_Range &) const";
          *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
          DWORD2(v211) = 320;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v180);
          v182.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          *(std::logic_error *)&v182.__r_.__value_.__r.__words[1] = v180;
          v183 = v181;
          v180.__vftable = 0;
          v180.__imp_.__imp_ = 0;
          v181 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)&v182);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v168, (uint64_t)v209);
        }
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)outOutputData);
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)v197);
        AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)v189, a3);
        (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)v189 + 56))(v209);
        v70 = *(AMCP::Log::Scope_Registry **)v209;
        if (*(_QWORD *)v209)
        {
          v70 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(AudioBufferList **__return_ptr, _QWORD, _BYTE *, double, double))(**(_QWORD **)v209 + 144))(outOutputData, *(_QWORD *)v209, v209, *v60, v60[1]);
        }
        else
        {
          outOutputData[0] = 0;
          outOutputData[1] = 0;
          v195 = 0;
        }
        v84 = *(std::__shared_weak_count **)&v209[8];
        if (*(_QWORD *)&v209[8])
        {
          v85 = (unint64_t *)(*(_QWORD *)&v209[8] + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = *(std::__shared_weak_count **)&v189[8];
        if (!*(_QWORD *)&v189[8])
          goto LABEL_133;
        v88 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
      }
      else
      {
        v66 = *(_QWORD *)(a3 + 192);
        v67 = *(_QWORD *)(a3 + 200);
        *(_QWORD *)v189 = v66;
        *(_QWORD *)&v189[8] = v67;
        if (v67)
        {
          v68 = (unint64_t *)(v67 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v66 + 56))(v209);
        v70 = *(AMCP::Log::Scope_Registry **)v209;
        if (*(_QWORD *)v209)
        {
          v70 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(AudioBufferList **__return_ptr, _QWORD, _BYTE *, double, double))(**(_QWORD **)v209 + 144))(outOutputData, *(_QWORD *)v209, v209, *v60, v60[1]);
        }
        else
        {
          outOutputData[0] = 0;
          outOutputData[1] = 0;
          v195 = 0;
        }
        v90 = *(std::__shared_weak_count **)&v209[8];
        if (*(_QWORD *)&v209[8])
        {
          v91 = (unint64_t *)(*(_QWORD *)&v209[8] + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v87 = *(std::__shared_weak_count **)&v189[8];
        if (!*(_QWORD *)&v189[8])
          goto LABEL_133;
        v93 = (unint64_t *)(*(_QWORD *)&v189[8] + 8);
        do
          v89 = __ldaxr(v93);
        while (__stlxr(v89 - 1, v93));
      }
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
LABEL_133:
      if (outOutputData[0] == outOutputData[1])
      {
        AMCP::Log::Scope_Registry::get(v70);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
        v157 = **(NSObject ***)v209;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          v158 = pthread_self();
          v159 = pthread_mach_thread_np(v158);
          *(_DWORD *)v209 = 67109890;
          *(_DWORD *)&v209[4] = v159;
          *(_WORD *)&v209[8] = 2080;
          *(_QWORD *)&v209[10] = "Device_Connection.cpp";
          *(_WORD *)&v209[18] = 1024;
          *(_DWORD *)&v209[20] = 324;
          LOWORD(v210) = 2080;
          *(_QWORD *)((char *)&v210 + 2) = "not (not samples.empty())";
          _os_log_error_impl(&dword_1B57BA000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v209, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        v160 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v182);
        std::logic_error::logic_error(&v180, &v182);
        v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v189, &v180);
        v190 = 0uLL;
        *(_QWORD *)&v191 = 0;
        DWORD2(v191) = -1;
        *(_QWORD *)v189 = off_1E69A1208;
        *(_QWORD *)&v189[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
        *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &, "
                                 "const Stream_Connection &, Sample_Time_Range &) const";
        *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
        DWORD2(v211) = 324;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v184.__r_.__value_.__l.__data_);
        *(std::string *)&v197[8] = v184;
        *(_QWORD *)v197 = off_1E69A20A0;
        memset(&v184, 0, sizeof(v184));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)v197);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v160, (uint64_t)v209);
      }
      if ((AudioBufferList *)((char *)outOutputData[1] - (char *)outOutputData[0]) != (AudioBufferList *)16)
      {
        AMCP::Log::Scope_Registry::get(v70);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
        v161 = **(NSObject ***)v209;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
        if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
        {
          v162 = pthread_self();
          v163 = pthread_mach_thread_np(v162);
          *(_DWORD *)v209 = 67109890;
          *(_DWORD *)&v209[4] = v163;
          *(_WORD *)&v209[8] = 2080;
          *(_QWORD *)&v209[10] = "Device_Connection.cpp";
          *(_WORD *)&v209[18] = 1024;
          *(_DWORD *)&v209[20] = 325;
          LOWORD(v210) = 2080;
          *(_QWORD *)((char *)&v210 + 2) = "not (samples.size() == 1)";
          _os_log_error_impl(&dword_1B57BA000, v161, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We only handle interleaved sample streams currently", v209, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        v164 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"We only handle interleaved sample streams currently", (uint64_t)&v182);
        std::logic_error::logic_error(&v180, &v182);
        v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v189, &v180);
        v190 = 0uLL;
        *(_QWORD *)&v191 = 0;
        DWORD2(v191) = -1;
        *(_QWORD *)v189 = off_1E69A1208;
        *(_QWORD *)&v189[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
        *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &, "
                                 "const Stream_Connection &, Sample_Time_Range &) const";
        *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
        DWORD2(v211) = 325;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v184.__r_.__value_.__l.__data_);
        *(std::string *)&v197[8] = v184;
        *(_QWORD *)v197 = off_1E69A20A0;
        memset(&v184, 0, sizeof(v184));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)v197);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v164, (uint64_t)v209);
      }
      v94 = *(_QWORD *)outOutputData[0];
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v60 + 2));
      v96 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v60 + 7));
      v98.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)v209, (AMCP::DAL::DAL_Time *)(v60 + 7), (AMCP::DAL::DAL_Time *)(v60 + 2));
      if ((v209[0] & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v209);
      v99 = *(double *)&v209[8];
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
      if (*((_QWORD *)&v210 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v100->__on_zero_shared)(v100, v98);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = round(*a4);
      v104 = round(a4[1]);
      if (v103 < v104)
      {
        v107 = round(sample_time);
        v108 = round(v96);
        if (v107 >= v103)
          v109 = *a4;
        else
          v109 = sample_time;
        if (v104 >= v108)
          v110 = a4[1];
        else
          v110 = v96;
        if (v107 < v108)
          v96 = v110;
        else
          v96 = a4[1];
        if (v107 < v108)
          v106 = v109;
        else
          v106 = *a4;
        v105 = sample_time - v106;
      }
      else
      {
        v105 = 0.0;
        v106 = sample_time;
      }
      v111 = vcvtmd_s64_f64(v99);
      *a4 = v106;
      a4[1] = v96;
      v112 = (int *)(a3 + 176);
      if (v61)
        v112 = (int *)(a3 + 312);
      v113 = *v112;
      v114 = (int *)(a3 + 168);
      if (v61)
        v114 = (int *)(a3 + 304);
      if (v113)
      {
        v115 = (unsigned int *)(a3 + 180);
        if (v61)
          v115 = (unsigned int *)(a3 + 316);
        if (v111 * *v115 != *(_QWORD *)&outOutputData[0]->mBuffers[0].mNumberChannels)
        {
          AMCP::Log::Scope_Registry::get(v97);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
          v169 = **(NSObject ***)v209;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
          if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
          {
            v170 = pthread_self();
            v171 = pthread_mach_thread_np(v170);
            *(_DWORD *)v209 = 67109890;
            *(_DWORD *)&v209[4] = v171;
            *(_WORD *)&v209[8] = 2080;
            *(_QWORD *)&v209[10] = "Device_Connection.cpp";
            *(_WORD *)&v209[18] = 1024;
            *(_DWORD *)&v209[20] = 360;
            LOWORD(v210) = 2080;
            *(_QWORD *)((char *)&v210 + 2) = "not (number_of_frames * format.mChannelsPerFrame == samples[0].m_number_of_samples)";
            _os_log_error_impl(&dword_1B57BA000, v169, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The actual buffer size doesn't match the range!", v209, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
          v172 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"The actual buffer size doesn't match the range!", (uint64_t)&v182);
          std::logic_error::logic_error(&v180, &v182);
          v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v189, &v180);
          v190 = 0uLL;
          *(_QWORD *)&v191 = 0;
          DWORD2(v191) = -1;
          *(_QWORD *)v189 = off_1E69A1208;
          *(_QWORD *)&v189[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
          *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &"
                                   ", const Stream_Connection &, Sample_Time_Range &) const";
          *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
          DWORD2(v211) = 360;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v184.__r_.__value_.__l.__data_);
          *(std::string *)&v197[8] = v184;
          *(_QWORD *)v197 = off_1E69A20A0;
          memset(&v184, 0, sizeof(v184));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)v197);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v172, (uint64_t)v209);
        }
        v116 = v113 * v111;
        v117 = v113 * vcvtmd_s64_f64(v105);
      }
      else
      {
        v118 = (unsigned int *)(a3 + 172);
        if (v61)
          v118 = (unsigned int *)(a3 + 308);
        v119 = *v118;
        if (v111 < v119 || (v120 = v111 / v119, v111 != v111 / v119 * v119))
        {
          AMCP::Log::Scope_Registry::get(v97);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
          v153 = **(NSObject ***)v209;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
          if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
          {
            v154 = pthread_self();
            v155 = pthread_mach_thread_np(v154);
            *(_DWORD *)v209 = 67109890;
            *(_DWORD *)&v209[4] = v155;
            *(_WORD *)&v209[8] = 2080;
            *(_QWORD *)&v209[10] = "Device_Connection.cpp";
            *(_WORD *)&v209[18] = 1024;
            *(_DWORD *)&v209[20] = 349;
            LOWORD(v210) = 2080;
            *(_QWORD *)((char *)&v210 + 2) = "not (number_of_frames >= format.mFramesPerPacket && number_of_frames % form"
                                             "at.mFramesPerPacket == 0)";
            _os_log_error_impl(&dword_1B57BA000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The number of frames is not a multiple of the packet size!", v209, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
          v156 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"The number of frames is not a multiple of the packet size!", (uint64_t)&v182);
          std::logic_error::logic_error(&v180, &v182);
          v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v189, &v180);
          v190 = 0uLL;
          *(_QWORD *)&v191 = 0;
          DWORD2(v191) = -1;
          *(_QWORD *)v189 = off_1E69A1208;
          *(_QWORD *)&v189[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
          *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &"
                                   ", const Stream_Connection &, Sample_Time_Range &) const";
          *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
          DWORD2(v211) = 349;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v184.__r_.__value_.__l.__data_);
          *(std::string *)&v197[8] = v184;
          *(_QWORD *)v197 = off_1E69A20A0;
          memset(&v184, 0, sizeof(v184));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)v197);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v156, (uint64_t)v209);
        }
        v121 = vcvtmd_s64_f64(v105);
        v122 = v121 / v119;
        if (v121 != v121 / v119 * v119)
        {
          AMCP::Log::Scope_Registry::get(v97);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v209, "com.apple.coreaudio", "AMCP");
          v173 = **(NSObject ***)v209;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v209);
          if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
          {
            v174 = pthread_self();
            v175 = pthread_mach_thread_np(v174);
            *(_DWORD *)v209 = 67109890;
            *(_DWORD *)&v209[4] = v175;
            *(_WORD *)&v209[8] = 2080;
            *(_QWORD *)&v209[10] = "Device_Connection.cpp";
            *(_WORD *)&v209[18] = 1024;
            *(_DWORD *)&v209[20] = 350;
            LOWORD(v210) = 2080;
            *(_QWORD *)((char *)&v210 + 2) = "not (frame_offset.get() % format.mFramesPerPacket == 0)";
            _os_log_error_impl(&dword_1B57BA000, v173, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The offset of this write is not a multiple of the packet size!", v209, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
          v176 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"The offset of this write is not a multiple of the packet size!", (uint64_t)&v182);
          std::logic_error::logic_error(&v180, &v182);
          v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v189, &v180);
          v190 = 0uLL;
          *(_QWORD *)&v191 = 0;
          DWORD2(v191) = -1;
          *(_QWORD *)v189 = off_1E69A1208;
          *(_QWORD *)&v189[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v209, (uint64_t)v189);
          *((_QWORD *)&v210 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &"
                                   ", const Stream_Connection &, Sample_Time_Range &) const";
          *(_QWORD *)&v211 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
          DWORD2(v211) = 350;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v184.__r_.__value_.__l.__data_);
          *(std::string *)&v197[8] = v184;
          *(_QWORD *)v197 = off_1E69A20A0;
          memset(&v184, 0, sizeof(v184));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v209, (uint64_t)v197);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v176, (uint64_t)v209);
        }
        v123 = *v114;
        v116 = *v114 * v120;
        v117 = v123 * v122;
      }
      v124 = v116;
      *(_QWORD *)v197 = v116;
      *(_QWORD *)&v197[8] = v94;
      if (!v94 && v116)
        std::terminate();
      *(_QWORD *)v209 = v197;
      *(_OWORD *)&v209[8] = 0u;
      v210 = 0u;
      v125 = *(_QWORD *)(a3 + 192);
      v126 = *(_QWORD *)(a3 + 200);
      v184.__r_.__value_.__r.__words[0] = v125;
      v184.__r_.__value_.__l.__size_ = v126;
      if (v126)
      {
        v127 = (unint64_t *)(v126 + 8);
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v125 + 56))(&v182);
      v129 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v182.__r_.__value_.__l.__data_);
      AMCP::DAL::sample_group_from_samples<float>((unint64_t *)v189, (uint64_t **)(v129 + 56));
      v130 = **(_QWORD **)v189;
      *(_QWORD *)&v189[8] = *(_QWORD *)v189;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)v189, (uint64_t)(*(_QWORD *)&v189[16] - *(_QWORD *)v189) >> 4);
      size = (std::__shared_weak_count *)v182.__r_.__value_.__l.__size_;
      if (v182.__r_.__value_.__l.__size_)
      {
        v132 = (unint64_t *)(v182.__r_.__value_.__l.__size_ + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v134 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
      if (v184.__r_.__value_.__l.__size_)
      {
        v135 = (unint64_t *)(v184.__r_.__value_.__l.__size_ + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      *(_QWORD *)&v209[8] = v130;
      *(_QWORD *)&v209[16] = (*(_DWORD *)&v197[8] - v130);
      *(_QWORD *)&v210 = v124;
      *((_QWORD *)&v210 + 1) = v111;
      v138 = *(_QWORD *)(v8 + 96);
      v137 = *(std::__shared_weak_count **)(v8 + 104);
      *(_QWORD *)v189 = v138;
      *(_QWORD *)&v189[8] = v137;
      if (v137)
      {
        v139 = (unint64_t *)&v137->__shared_owners_;
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      v141 = *(unsigned int *)(a2 + 176);
      host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _BYTE *, double))(*(_QWORD *)v138 + 288))(v138, v141, host_time, *(unsigned int *)(a3 + 40), v117, v111, v209, (double)(uint64_t)floor(sample_time));
      if (v137)
      {
        v143 = (unint64_t *)&v137->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      if (outOutputData[0])
      {
        outOutputData[1] = outOutputData[0];
        std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)outOutputData[0], (int64_t)(v195 - (unint64_t)outOutputData[0]) >> 4);
      }
      v60 += 12;
    }
    *(_QWORD *)v209 = &v187;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v209);
  }
  v145 = v207;
  if (v207)
  {
    v146 = (unint64_t *)&v207->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = *(std::__shared_weak_count **)&v204[6];
  if (*(_QWORD *)&v204[6])
  {
    v149 = (unint64_t *)(*(_QWORD *)&v204[6] + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = (unint64_t *)&v177->__shared_owners_;
  do
    v152 = __ldaxr(v151);
  while (__stlxr(v152 - 1, v151));
  if (!v152)
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
}

void sub_1B58B8C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *p_shared_owners;
  unint64_t v69;

  if (a41)
  {
    a42 = (uint64_t)a41;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)a41, (a43 - (uint64_t)a41) >> 4);
  }
  *(_QWORD *)(v60 - 224) = &a28;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v60 - 224));
  v62 = (std::__shared_weak_count *)a60;
  if (a60)
  {
    v63 = (unint64_t *)(a60 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)a55;
  if (a55)
  {
    v66 = (unint64_t *)(a55 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (a9)
  {
    p_shared_owners = (unint64_t *)&a9->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6971748;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6971748;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, _QWORD *a2)
{
  double *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  AMCP::DAL::DAL_Time *v25;
  double sample_time;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  double *v39;
  double *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[4];
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  AMCP::DAL::DAL_Time_Range *v52;
  double **v53;

  v3 = *(double **)(a1 + 8);
  v4 = a2 + 9;
  v5 = a2 + 14;
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 9), (AMCP::DAL::DAL_Time *)(a2 + 14)))
  {
    v6 = a2[24];
    v41 = *(_OWORD *)v4;
    v8 = a2[12];
    v7 = (std::__shared_weak_count *)a2[13];
    v42 = v4[2];
    v43 = v8;
    v44 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v45 = *(_OWORD *)v5;
    v12 = a2[17];
    v11 = (std::__shared_weak_count *)a2[18];
    v46 = v5[2];
    v47 = v12;
    v48 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v6 + 144))(v49, v6, &v41);
    v15 = v48;
    if (v48)
    {
      v16 = (unint64_t *)&v48->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v44;
    if (v44)
    {
      v19 = (unint64_t *)&v44->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v39, v52, (uint64_t)v49);
    v21 = v39;
    v22 = v40;
    if (v39 != v40)
    {
      v24 = *v3;
      v23 = v3[1];
      do
      {
        v25 = (AMCP::DAL::DAL_Time *)(v21 + 2);
        if (round(v24) < round(v23))
        {
          sample_time = AMCP::DAL::DAL_Time::get_sample_time(v25);
          v27 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v21 + 7));
          v24 = *v3;
          v23 = v3[1];
          v28 = round(*v3);
          v29 = round(v23);
          if (v28 < v29)
          {
            v30 = round(sample_time);
            v31 = round(v27);
            if (v30 < v31)
            {
              if (v30 < v28)
                v24 = sample_time;
              if (v29 < v31)
                v23 = v27;
            }
          }
          else
          {
            v23 = v27;
            v24 = sample_time;
          }
        }
        else
        {
          v24 = AMCP::DAL::DAL_Time::get_sample_time(v25);
          v23 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v21 + 7));
        }
        *v3 = v24;
        v3[1] = v23;
        v21 += 12;
      }
      while (v21 != v22);
    }
    v53 = &v39;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v53);
    v32 = v51;
    if (v51)
    {
      v33 = (unint64_t *)&v51->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v50;
    if (v50)
    {
      v36 = (unint64_t *)&v50->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  return 1;
}

void sub_1B58B96AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  v33 = a32;
  if (a32)
  {
    p_shared_owners = (unint64_t *)&a32->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP7IO_Core17Device_Connection21calculate_write_rangeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69716C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69716C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::logic_error *exception;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::logic_error v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  std::logic_error *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::logic_error v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint8_t buf[8];
  _BYTE v49[10];
  __int16 v50;
  int v51;
  _BYTE v52[24];
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 40);
  v3 = *((_QWORD *)a1 + 1);
  if (v2 == v3)
  {
    v4 = (double *)*((_QWORD *)a1 + 2);
    v5 = *v4;
    if (*v4 != floor(*v4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v49;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v49)
      {
        v14 = (unint64_t *)(*(_QWORD *)v49 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v49 = 2080;
        *(_QWORD *)&v49[2] = "Device_Connection.cpp";
        v50 = 1024;
        v51 = 137;
        *(_WORD *)v52 = 2080;
        *(_QWORD *)&v52[2] = "not (required_samples.start().get_double() == required_samples.start().floor().get_double())";
        _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v39);
      std::logic_error::logic_error(&v40, &v39);
      v19 = MEMORY[0x1E0DE5018];
      v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v41, &v40);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = -1;
      v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v42 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
      *(_QWORD *)&v52[8] = "auto AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_ID, size_t, con"
                           "st DAL::Sample_Time_Range &)::(anonymous class)::operator()(Stream_Connection &) const";
      *(_QWORD *)&v52[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v53 = 137;
      std::vector<void *>::vector(&v34);
      v20 = backtrace((void **)v34, (*((_QWORD *)&v34 + 1) - (_QWORD)v34) >> 3);
      std::vector<void *>::resize((char **)&v34, v20);
      v37 = v34;
      v38 = v35;
      v34 = 0uLL;
      v35 = 0;
      v36 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v19 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v21 = *(_QWORD *)v52;
      exception[1].__imp_.__imp_ = *(const char **)v52;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v22 = *(std::logic_error *)&v52[8];
      LODWORD(exception[3].__vftable) = v53;
      exception[2] = v22;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v6 = v4[1];
    if (v6 != floor(v6))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = *(std::__shared_weak_count **)v49;
      v24 = **(NSObject ***)buf;
      if (*(_QWORD *)v49)
      {
        v25 = (unint64_t *)(*(_QWORD *)v49 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v49 = 2080;
        *(_QWORD *)&v49[2] = "Device_Connection.cpp";
        v50 = 1024;
        v51 = 138;
        *(_WORD *)v52 = 2080;
        *(_QWORD *)&v52[2] = "not (required_samples.end().get_double() == required_samples.end().floor().get_double())";
        _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
      v29 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v39);
      std::logic_error::logic_error(&v40, &v39);
      v30 = MEMORY[0x1E0DE5018];
      v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v41, &v40);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = -1;
      v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v42 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
      *(_QWORD *)&v52[8] = "auto AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_ID, size_t, con"
                           "st DAL::Sample_Time_Range &)::(anonymous class)::operator()(Stream_Connection &) const";
      *(_QWORD *)&v52[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      v53 = 138;
      std::vector<void *>::vector(&v34);
      v31 = backtrace((void **)v34, (*((_QWORD *)&v34 + 1) - (_QWORD)v34) >> 3);
      std::vector<void *>::resize((char **)&v34, v31);
      v37 = v34;
      v38 = v35;
      v34 = 0uLL;
      v35 = 0;
      v36 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
      v29[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v29, (const std::logic_error *)buf);
      v29->__vftable = (std::logic_error_vtbl *)(v30 + 16);
      v29[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v32 = *(_QWORD *)v52;
      v29[1].__imp_.__imp_ = *(const char **)v52;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v33 = *(std::logic_error *)&v52[8];
      LODWORD(v29[3].__vftable) = v53;
      v29[2] = v33;
      v29->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v29[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v29[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v7 = round(*(double *)(a2 + 56));
    v8 = round(*(double *)(a2 + 64));
    if (v7 < v8)
    {
      v9 = round(v5);
      v10 = round(v6);
      if (v9 >= v7)
        v5 = *(double *)(a2 + 56);
      if (v8 >= v10)
        v6 = *(double *)(a2 + 64);
      if (v9 >= v10)
      {
        v6 = *(double *)(a2 + 64);
        v5 = *(double *)(a2 + 56);
      }
      *(double *)(a2 + 56) = v5;
      *(double *)(a2 + 64) = v6;
    }
    else
    {
      *(_OWORD *)(a2 + 56) = *(_OWORD *)v4;
    }
  }
  return v2 != v3;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Connection31set_required_samples_for_streamEjmRKN5caulk10time_rangeINS_3DAL11Sample_TimeES5_EEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

void AMCP::IO_Core::Device_Connection::get_timebase(AMCP::IO_Core::Device_Connection *this, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *exception;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::logic_error v26;
  std::logic_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint8_t buf[8];
  _BYTE v35[10];
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a2[1];
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0) || (v6 = *a2) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = *(std::__shared_weak_count **)v35;
    v14 = **(NSObject ***)buf;
    if (*(_QWORD *)v35)
    {
      v15 = (unint64_t *)(*(_QWORD *)v35 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v35 = 2080;
      *(_QWORD *)&v35[2] = "Device_Connection.cpp";
      v36 = 1024;
      v37 = 384;
      v38 = 2080;
      *(_QWORD *)v39 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v28 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v39[6] = "Timebase_Ref AMCP::IO_Core::Device_Connection::get_timebase() const";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    v41 = 384;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    v22 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = *(_QWORD *)(v6 + 112);
  v7 = *(_QWORD *)(v6 + 120);
  *(_QWORD *)this = v8;
  *((_QWORD *)this + 1) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B58BA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void ADS::ObjectManager::~ObjectManager(ADS::ObjectManager *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E69717C8;
  v1 = (void **)((char *)this + 16);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table((uint64_t)this + 40);
  v2 = v1;
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E69717C8;
  v1 = (void **)((char *)this + 16);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table((uint64_t)this + 40);
  v2 = v1;
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

ADS::ObjectManager *ADS::ObjectManager::ObjectManager(ADS::ObjectManager *this)
{
  uint64_t *v2;
  _QWORD v4[5];

  *(_QWORD *)this = &off_1E69717C8;
  *((_DWORD *)this + 2) = 32;
  *((_OWORD *)this + 1) = 0u;
  v2 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  v4[4] = (char *)this + 32;
  v4[0] = operator new(0x2800uLL);
  v4[1] = v4[0];
  v4[2] = v4[0];
  v4[3] = v4[0] + 10240;
  std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(v2, v4);
  std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)v4);
  return this;
}

void sub_1B58BA5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table(v9 + 40);
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ADS::ObjectManager::StaticInitializer(ADS::ObjectManager *this)
{
  ADS::ObjectManager *v1;
  CADeprecated::CAMutex *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (ADS::ObjectManager *)operator new();
  ADS::ObjectManager::ObjectManager(v1);
  ADS::ObjectManager::sInstance = (uint64_t)v1;
  if (!ADS::ObjectManager::sMutex)
  {
    v2 = (CADeprecated::CAMutex *)operator new();
    CADeprecated::CAMutex::CAMutex(v2, "SA_ObjectMap Mutex");
    ADS::ObjectManager::sMutex = (uint64_t)v2;
    if (!ADS::ObjectManager::sInstance && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "ADS_ObjectManager.cpp";
      v5 = 1024;
      v6 = 42;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::ObjectManager::StaticInitializer: failed to create the object map", (uint8_t *)&v3, 0x12u);
    }
  }
}

void sub_1B58BA830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x1B5E50688](v2, 0x10F1C40976EDA9DLL);
  _Unwind_Resume(a1);
}

uint64_t ADS::ObjectManager::GetNextObjectID(ADS::ObjectManager *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  v1 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
    v3 = *(unsigned int *)(ADS::ObjectManager::sInstance + 8);
    *(_DWORD *)(ADS::ObjectManager::sInstance + 8) = v3 + 1;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  }
  else
  {
    v3 = *(unsigned int *)(ADS::ObjectManager::sInstance + 8);
    *(_DWORD *)(ADS::ObjectManager::sInstance + 8) = v3 + 1;
  }
  return v3;
}

void ADS::ObjectManager::MapObject(ADS::ObjectManager *this, uint64_t a2, ADS::BaseObject *a3)
{
  unint64_t v3;
  __int32 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int32 *v19;
  __int32 **v20;
  __int32 *v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  __int32 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  std::string::size_type v36;
  __int128 v37;
  uint64_t v38;
  unsigned int *begin;
  _DWORD *v40;
  __int32 *v41;
  unint64_t v42;
  __int32 v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  int v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  std::string *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  int8x8_t prime;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  std::string v91;
  _QWORD v92[2];
  __int128 v93;
  std::vector<unsigned int> __p;
  __int32 v95;
  std::string buf;
  void *v97[5];

  v5 = (int)this;
  v97[3] = *(void **)MEMORY[0x1E0C80C00];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (!v5 || !a2)
    return;
  v6 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
  else
    v7 = 0;
  v8 = ADS::ObjectManager::sInstance;
  v95 = v5;
  v9 = (uint64_t *)(ADS::ObjectManager::sInstance + 16);
  v10 = std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(*(_QWORD *)(ADS::ObjectManager::sInstance + 16), *(_QWORD *)(ADS::ObjectManager::sInstance + 24), &v95);
  v11 = (void **)v10;
  if (v10 != *(_QWORD *)(v8 + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v12 = *v11;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_ObjectManager.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 202;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v5;
      LOWORD(v97[0]) = 2048;
      *(void **)((char *)v97 + 2) = (void *)a2;
      WORD1(v97[1]) = 2048;
      *(void **)((char *)&v97[1] + 4) = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_MapObject: %d cannot be mapped to object %p because it is already mapped to %p", (uint8_t *)&buf, 0x2Cu);
      if (!v7)
        return;
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (*v9 == v10)
  {
LABEL_14:
    v13 = (_QWORD *)v10;
  }
  else
  {
    v13 = (_QWORD *)*v9;
    while (*v13 != a2)
    {
      v13 += 5;
      if (v13 == (_QWORD *)v10)
        goto LABEL_14;
    }
  }
  v14 = *(_DWORD *)(a2 + 12);
  if (v13 != (_QWORD *)v10)
  {
    v15 = *v9 + 8 * (((uint64_t)v13 - *v9) >> 3);
    v18 = *(_QWORD *)(v15 + 32);
    v17 = (unint64_t *)(v15 + 32);
    v16 = v18;
    v20 = (__int32 **)(v17 - 1);
    v19 = (__int32 *)*(v17 - 1);
    if ((unint64_t)v19 >= v18)
    {
      v24 = (void **)(v17 - 2);
      v25 = (__int32 *)*(v17 - 2);
      v26 = v19 - v25;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v28 = v16 - (_QWORD)v25;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
      v30 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v29)
        v30 = v27;
      if (v30)
      {
        v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
        v19 = *v20;
        v25 = (__int32 *)*v24;
      }
      else
      {
        v31 = 0;
      }
      v41 = (__int32 *)(v30 + 4 * v26);
      v42 = v30 + 4 * v31;
      *v41 = v5;
      v21 = v41 + 1;
      while (v19 != v25)
      {
        v43 = *--v19;
        *--v41 = v43;
      }
      *v24 = v41;
      *v20 = v21;
      *v17 = v42;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v19 = v5;
      v21 = v19 + 1;
    }
    *v20 = v21;
    if (v14 == 1633969526 || v14 == 1633905771)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v93, *(CFTypeRef *)(a2 + 96));
      *(_QWORD *)&v93 = &off_1E69A0F60;
      OS::CF::String::AsStdString(&buf, (uint64_t)&v93);
      v44 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)(v8 + 40), (unsigned __int8 *)&buf);
      v45 = v44;
      v47 = (char *)*((_QWORD *)v44 + 6);
      v46 = *((_QWORD *)v44 + 7);
      if ((unint64_t)v47 >= v46)
      {
        v49 = (char *)*((_QWORD *)v44 + 5);
        v50 = (v47 - v49) >> 2;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v52 = v46 - (_QWORD)v49;
        if (v52 >> 1 > v51)
          v51 = v52 >> 1;
        v29 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
        v53 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v29)
          v53 = v51;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
          v49 = (char *)*((_QWORD *)v45 + 5);
          v47 = (char *)*((_QWORD *)v45 + 6);
        }
        else
        {
          v54 = 0;
        }
        v60 = (_DWORD *)(v53 + 4 * v50);
        v61 = v53 + 4 * v54;
        *v60 = v95;
        v48 = v60 + 1;
        while (v47 != v49)
        {
          v62 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *--v60 = v62;
        }
        *((_QWORD *)v45 + 5) = v60;
        *((_QWORD *)v45 + 6) = v48;
        *((_QWORD *)v45 + 7) = v61;
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_DWORD *)v47 = v95;
        v48 = v47 + 4;
      }
      *((_QWORD *)v45 + 6) = v48;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v93);
    }
    goto LABEL_71;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = v5;
  *(_QWORD *)&v93 = a2;
  *((_QWORD *)&v93 + 1) = 1;
  std::vector<unsigned int>::vector(&__p, 1uLL, (const std::vector<unsigned int>::value_type *)&buf);
  v22 = *(_QWORD *)(v8 + 32);
  v23 = *(_QWORD *)(v8 + 24);
  if (v23 >= v22)
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *v9) >> 3);
    v33 = v32 + 1;
    if (v32 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *v9) >> 3);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0x333333333333333)
      v3 = 0x666666666666666;
    else
      v3 = v33;
    v97[1] = (void *)(v8 + 32);
    if (v3 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v35 = (char *)operator new(40 * v3);
    v36 = (std::string::size_type)&v35[40 * v32];
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    buf.__r_.__value_.__l.__size_ = v36;
    v37 = *(_OWORD *)&__p.__begin_;
    *(_OWORD *)v36 = v93;
    *(_OWORD *)(v36 + 16) = v37;
    *(_QWORD *)(v36 + 32) = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    buf.__r_.__value_.__r.__words[2] = v36 + 40;
    v97[0] = &v35[40 * v3];
    std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(v9, &buf);
    v38 = *(_QWORD *)(v8 + 24);
    std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)&buf);
    begin = __p.__begin_;
    *(_QWORD *)(v8 + 24) = v38;
    if (begin)
    {
      __p.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    *(_OWORD *)v23 = v93;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(std::vector<unsigned int> *)(v23 + 16) = __p;
    *(_QWORD *)(v8 + 24) = v23 + 40;
  }
  if (v14 != 1633969526 && v14 != 1633905771)
  {
LABEL_71:
    if (!v7)
      return;
    goto LABEL_72;
  }
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v92, *(CFTypeRef *)(a2 + 96));
  v92[0] = &off_1E69A0F60;
  OS::CF::String::AsStdString(&v91, (uint64_t)v92);
  v40 = operator new(4uLL);
  *v40 = v5;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    buf = v91;
  memset(v97, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v97, v40, (uint64_t)(v40 + 1), 1uLL);
  v55 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&buf);
  v56 = v55;
  v57 = *(_QWORD *)(v8 + 48);
  if (!v57)
    goto LABEL_87;
  v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
  v58.i16[0] = vaddlv_u8(v58);
  v59 = v58.u32[0];
  if (v58.u32[0] > 1uLL)
  {
    v3 = v55;
    if (v55 >= v57)
      v3 = v55 % v57;
  }
  else
  {
    v3 = (v57 - 1) & v55;
  }
  v63 = *(unsigned __int8 ***)(*(_QWORD *)(v8 + 40) + 8 * v3);
  if (!v63 || (v64 = *v63) == 0)
  {
LABEL_87:
    v66 = (char *)operator new(0x40uLL);
    v67 = (_QWORD *)(v8 + 56);
    *(_QWORD *)&v93 = v66;
    *((_QWORD *)&v93 + 1) = v8 + 56;
    LOBYTE(__p.__begin_) = 0;
    *(_QWORD *)v66 = 0;
    *((_QWORD *)v66 + 1) = v56;
    v68 = (std::string *)(v66 + 16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *((_QWORD *)v66 + 4) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v66 + 40) = *(_OWORD *)v97;
    *((void **)v66 + 7) = v97[2];
    memset(v97, 0, 24);
    LOBYTE(__p.__begin_) = 1;
    v69 = (float)(unint64_t)(*(_QWORD *)(v8 + 64) + 1);
    v70 = *(float *)(v8 + 72);
    if (v57 && (float)(v70 * (float)v57) >= v69)
    {
LABEL_136:
      v87 = *(_QWORD **)(*(_QWORD *)(v8 + 40) + 8 * v3);
      v88 = v93;
      if (v87)
      {
        *(_QWORD *)v93 = *v87;
      }
      else
      {
        *(_QWORD *)v93 = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(v8 + 56) = v88;
        *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * v3) = v67;
        if (!*(_QWORD *)v88)
        {
LABEL_145:
          *(_QWORD *)&v93 = 0;
          ++*(_QWORD *)(v8 + 64);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v93);
          goto LABEL_146;
        }
        v89 = *(_QWORD *)(*(_QWORD *)v88 + 8);
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v89 >= v57)
            v89 %= v57;
        }
        else
        {
          v89 &= v57 - 1;
        }
        v87 = (_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * v89);
      }
      *v87 = v88;
      goto LABEL_145;
    }
    v71 = 1;
    if (v57 >= 3)
      v71 = (v57 & (v57 - 1)) != 0;
    v72 = v71 | (2 * v57);
    v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73)
      prime = (int8x8_t)v73;
    else
      prime = (int8x8_t)v72;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v57 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)&prime > v57)
      goto LABEL_102;
    if (*(_QWORD *)&prime < v57)
    {
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(v8 + 64) / *(float *)(v8 + 72));
      if (v57 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (*(_QWORD *)&prime <= v81)
        prime = (int8x8_t)v81;
      if (*(_QWORD *)&prime >= v57)
      {
        v57 = *(_QWORD *)(v8 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_102:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v75 = operator new(8 * *(_QWORD *)&prime);
          v76 = *(void **)(v8 + 40);
          *(_QWORD *)(v8 + 40) = v75;
          if (v76)
            operator delete(v76);
          v77 = 0;
          *(int8x8_t *)(v8 + 48) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * v77++) = 0;
          while (*(_QWORD *)&prime != v77);
          v78 = (_QWORD *)*v67;
          if (*v67)
          {
            v79 = v78[1];
            v80 = (uint8x8_t)vcnt_s8(prime);
            v80.i16[0] = vaddlv_u8(v80);
            if (v80.u32[0] > 1uLL)
            {
              if (v79 >= *(_QWORD *)&prime)
                v79 %= *(_QWORD *)&prime;
            }
            else
            {
              v79 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * v79) = v67;
            v84 = (_QWORD *)*v78;
            if (*v78)
            {
              do
              {
                v85 = v84[1];
                if (v80.u32[0] > 1uLL)
                {
                  if (v85 >= *(_QWORD *)&prime)
                    v85 %= *(_QWORD *)&prime;
                }
                else
                {
                  v85 &= *(_QWORD *)&prime - 1;
                }
                if (v85 != v79)
                {
                  v86 = *(_QWORD *)(v8 + 40);
                  if (!*(_QWORD *)(v86 + 8 * v85))
                  {
                    *(_QWORD *)(v86 + 8 * v85) = v78;
                    goto LABEL_127;
                  }
                  *v78 = *v84;
                  *v84 = **(_QWORD **)(*(_QWORD *)(v8 + 40) + 8 * v85);
                  **(_QWORD **)(*(_QWORD *)(v8 + 40) + 8 * v85) = v84;
                  v84 = v78;
                }
                v85 = v79;
LABEL_127:
                v78 = v84;
                v84 = (_QWORD *)*v84;
                v79 = v85;
              }
              while (v84);
            }
          }
          v57 = (unint64_t)prime;
          goto LABEL_131;
        }
        v90 = *(void **)(v8 + 40);
        *(_QWORD *)(v8 + 40) = 0;
        if (v90)
          operator delete(v90);
        v57 = 0;
        *(_QWORD *)(v8 + 48) = 0;
      }
    }
LABEL_131:
    if ((v57 & (v57 - 1)) != 0)
    {
      if (v56 >= v57)
        v3 = v56 % v57;
      else
        v3 = v56;
    }
    else
    {
      v3 = (v57 - 1) & v56;
    }
    goto LABEL_136;
  }
  while (1)
  {
    v65 = *((_QWORD *)v64 + 1);
    if (v65 == v56)
      break;
    if (v59 > 1)
    {
      if (v65 >= v57)
        v65 %= v57;
    }
    else
    {
      v65 &= v57 - 1;
    }
    if (v65 != v3)
      goto LABEL_87;
LABEL_86:
    v64 = *(unsigned __int8 **)v64;
    if (!v64)
      goto LABEL_87;
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v64 + 16, (unsigned __int8 *)&buf))
    goto LABEL_86;
  if (v97[0])
    operator delete(v97[0]);
LABEL_146:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  operator delete(v40);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v92);
  if (v7)
LABEL_72:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1B58BB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  int v30;
  void *v31;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a18);
  std::pair<std::string const,std::vector<unsigned int>>::~pair((uint64_t)&a24);
  operator delete(v31);
  if (a15 < 0)
    operator delete(__p);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(uint64_t a1, uint64_t a2, __int32 *a3)
{
  uint64_t v3;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = *(__int32 **)(v3 + 24);
      v7 = wmemchr(*(__int32 **)(v3 + 16), *a3, ((uint64_t)v6 - *(_QWORD *)(v3 + 16)) >> 2);
      v8 = v7 ? v7 : v6;
      if (v8 != *(__int32 **)(v3 + 24))
        break;
      v3 += 40;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t std::pair<std::string const,std::vector<unsigned int>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t ADS::ObjectManager::CopyObjectByObjectID(ADS::ObjectManager *this)
{
  __int32 v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v1 = (int)this;
  v18 = *MEMORY[0x1E0C80C00];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (!v1)
    return 0;
  v2 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
  else
    v3 = 0;
  v5 = ADS::ObjectManager::sInstance;
  v13 = v1;
  v6 = *(_QWORD *)(ADS::ObjectManager::sInstance + 16);
  v7 = (uint64_t *)std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(v6, *(_QWORD *)(ADS::ObjectManager::sInstance + 24), &v13);
  if (v7 != *(uint64_t **)(v5 + 24))
  {
    v8 = v6 + 8 * (((uint64_t)v7 - v6) >> 3);
    v11 = *(_QWORD *)(v8 + 8);
    v9 = (_QWORD *)(v8 + 8);
    v10 = v11;
    if (v11 != -1)
    {
      *v9 = v10 + 1;
      v4 = *v7;
      if (!v3)
        return v4;
      goto LABEL_13;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "ADS_ObjectManager.cpp";
      v16 = 1024;
      v17 = 280;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_CopyObjectByObjectID: not copying because the reference count is at maximum", buf, 0x12u);
    }
  }
  v4 = 0;
  if (v3)
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v4;
}

void sub_1B58BB744(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ADS::ObjectManager::ReleaseObject(ADS::ObjectManager *this, ADS::BaseObject *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  dispatch_queue_t *v30;
  unsigned __int8 v31;
  _QWORD v32[2];
  std::string __p;
  _BYTE buf[24];
  void *v35;
  _QWORD *v36;
  ADS::ObjectManager *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (this)
  {
    v3 = ADS::ObjectManager::sMutex;
    if (ADS::ObjectManager::sMutex)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
    else
      v4 = 0;
    v5 = (_QWORD *)ADS::ObjectManager::sInstance;
    v6 = *(_OWORD **)(ADS::ObjectManager::sInstance + 16);
    v7 = *(_OWORD **)(ADS::ObjectManager::sInstance + 24);
    v8 = v6;
    if (v6 != v7)
    {
      while (*(ADS::ObjectManager **)v8 != this)
      {
        v8 = (_OWORD *)((char *)v8 + 40);
        if (v8 == v7)
        {
          v8 = *(_OWORD **)(ADS::ObjectManager::sInstance + 24);
          break;
        }
      }
    }
    if (v8 != v7)
    {
      v9 = (uint64_t)v6 + 8 * (((char *)v8 - (char *)v6) >> 3);
      v12 = *(_QWORD *)(v9 + 8);
      v10 = (_QWORD *)(v9 + 8);
      v11 = v12;
      if (v12)
      {
        v13 = v11 - 1;
        *v10 = v13;
        if (!v13)
        {
          v14 = *((_DWORD *)this + 3);
          if (v14 == 1633969526 || v14 == 1633905771)
          {
            v15 = v5 + 5;
            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v32, *((CFTypeRef *)this + 12));
            v32[0] = &off_1E69A0F60;
            OS::CF::String::AsStdString(&__p, (uint64_t)v32);
            v16 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v5 + 5, (unsigned __int8 *)&__p);
            if (v16)
            {
              v17 = (int8x8_t)v5[6];
              v18 = *((_QWORD *)v16 + 1);
              v19 = (uint8x8_t)vcnt_s8(v17);
              v19.i16[0] = vaddlv_u8(v19);
              if (v19.u32[0] > 1uLL)
              {
                if (v18 >= *(_QWORD *)&v17)
                  v18 %= *(_QWORD *)&v17;
              }
              else
              {
                v18 &= *(_QWORD *)&v17 - 1;
              }
              v20 = *(unsigned __int8 **)(*v15 + 8 * v18);
              do
              {
                v21 = v20;
                v20 = *(unsigned __int8 **)v20;
              }
              while (v20 != v16);
              if (v21 == (unsigned __int8 *)(v5 + 7))
                goto LABEL_34;
              v22 = *((_QWORD *)v21 + 1);
              if (v19.u32[0] > 1uLL)
              {
                if (v22 >= *(_QWORD *)&v17)
                  v22 %= *(_QWORD *)&v17;
              }
              else
              {
                v22 &= *(_QWORD *)&v17 - 1;
              }
              if (v22 != v18)
              {
LABEL_34:
                if (!*(_QWORD *)v16)
                  goto LABEL_35;
                v23 = *(_QWORD *)(*(_QWORD *)v16 + 8);
                if (v19.u32[0] > 1uLL)
                {
                  if (v23 >= *(_QWORD *)&v17)
                    v23 %= *(_QWORD *)&v17;
                }
                else
                {
                  v23 &= *(_QWORD *)&v17 - 1;
                }
                if (v23 != v18)
LABEL_35:
                  *(_QWORD *)(*v15 + 8 * v18) = 0;
              }
              v24 = *(_QWORD *)v16;
              if (*(_QWORD *)v16)
              {
                v25 = *(_QWORD *)(v24 + 8);
                if (v19.u32[0] > 1uLL)
                {
                  if (v25 >= *(_QWORD *)&v17)
                    v25 %= *(_QWORD *)&v17;
                }
                else
                {
                  v25 &= *(_QWORD *)&v17 - 1;
                }
                if (v25 != v18)
                {
                  *(_QWORD *)(*v15 + 8 * v25) = v21;
                  v24 = *(_QWORD *)v16;
                }
              }
              *(_QWORD *)v21 = v24;
              *(_QWORD *)v16 = 0;
              --v5[8];
              *(_QWORD *)buf = v16;
              *(_QWORD *)&buf[8] = v5 + 7;
              buf[16] = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
            v7 = (_OWORD *)v5[3];
          }
          v26 = (_OWORD *)((char *)v8 + 40);
          if ((_OWORD *)((char *)v8 + 40) != v7)
          {
            do
            {
              v8 = v26;
              *(_OWORD *)((char *)v26 - 40) = *v26;
              v28 = (_QWORD *)v26 - 3;
              v27 = (void *)*((_QWORD *)v26 - 3);
              if (v27)
              {
                *((_QWORD *)v26 - 2) = v27;
                operator delete(v27);
                *v28 = 0;
                v28[1] = 0;
                v28[2] = 0;
              }
              *(_OWORD *)((char *)v8 - 24) = v8[1];
              *((_QWORD *)v8 - 1) = *((_QWORD *)v8 + 4);
              *((_QWORD *)v8 + 3) = 0;
              *((_QWORD *)v8 + 4) = 0;
              *((_QWORD *)v8 + 2) = 0;
              v26 = (_OWORD *)((char *)v8 + 40);
            }
            while ((_OWORD *)((char *)v8 + 40) != v7);
            v7 = (_OWORD *)v5[3];
          }
          while (v7 != v8)
          {
            v29 = (void *)*((_QWORD *)v7 - 3);
            if (v29)
            {
              *((_QWORD *)v7 - 2) = v29;
              operator delete(v29);
            }
            v7 = (_OWORD *)((char *)v7 - 40);
          }
          v5[3] = v8;
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZN3ADS13ObjectManager14_ReleaseObjectEPNS_10BaseObjectE_block_invoke;
          v35 = &__block_descriptor_tmp_3_1588;
          v36 = v5;
          v37 = this;
          v30 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            v31 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if ((v31 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            dispatch_async(*v30, buf);
          }
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_ObjectManager.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 367;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_ReleaseObject: not releasing because the reference count is already at 0", buf, 0x12u);
      }
    }
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
}

void sub_1B58BBB90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ADS13ObjectManager14_ReleaseObjectEPNS_10BaseObjectE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void AMCP::Graph::Manifest_Overload::~Manifest_Overload(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B5E50688);
}

void std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize(uint64_t a1, unint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  void **v20;

  v4 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v5 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 40 * ((40 * v6 - 40) / 0x28) + 40);
      *(_QWORD *)(a1 + 8) = &v3[5 * ((40 * v6 - 40) / 0x28) + 5];
      return;
    }
    if (a2 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v9;
    if (v10 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 5 * v10;
    v12 = (char *)operator new(40 * v10);
    v13 = &v12[40 * v5];
    v14 = &v12[8 * v11];
    v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 3) = 0;
        v18 = *(_OWORD *)(v3 - 5);
        v3 -= 5;
        *(_OWORD *)(v13 - 40) = v18;
        v13 -= 40;
        *((_QWORD *)v17 - 3) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v3 + 3);
        v3[3] = 0;
        v3[4] = 0;
      }
      while (v3 != v4);
      v19 = *(char **)a1;
      v3 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != (void **)v19)
      {
        do
        {
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v3 - 2));
          v20 = v3 - 5;
          std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v20);
          v3 -= 5;
        }
        while (v3 != (void **)v19);
        v3 = (void **)v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__base_destruct_at_end[abi:ne180100](a1, &v4[5 * a2]);
}

void std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 5;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 2));
      v6 = v5;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t AMCP::Graph::Manifest_Task::Manifest_Task(uint64_t a1, _QWORD *a2, int a3, unint64_t a4, unint64_t a5, __int128 *a6, double a7)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v9 = a2[1];
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a6;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 64) = v12;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = a3;
  std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize(a1, a4);
  std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize(a1 + 24, a5);
  return a1;
}

void sub_1B58BBF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v14;
  uint64_t i;

  v14 = *(_QWORD *)(v10 + 104);
  *(_QWORD *)(v10 + 104) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v11);
  for (i = 24; i != -24; i -= 24)
  {
    a10 = (void **)(v10 + i);
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Task::get_nth_connection_list(AMCP::Log::Scope_Registry *a1, unint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  unint64_t v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::logic_error v18;
  std::logic_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[28];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)a1 + 24 * a3);
  v5 = v4 + 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) <= a2)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v5 - *v4) >> 3);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v9;
      v27 = 2080;
      v28 = "Manifest_Task.cpp";
      v29 = 1024;
      v30 = 71;
      v31 = 2080;
      *(_QWORD *)v32 = "not (index < m_connection_group[c].size())";
      *(_WORD *)&v32[8] = 2048;
      *(_QWORD *)&v32[10] = a2;
      *(_WORD *)&v32[18] = 2048;
      *(_QWORD *)&v32[20] = v10;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v17, a2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v5 - *v4) >> 3));
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v19, &v18);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v20 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(_QWORD *)&v32[6] = "const std::vector<Manifest_Task::Connection> &AMCP::Graph::Manifest_Task::get_nth_connection_li"
                         "st(size_t, Connection_Direction) const";
    *(_QWORD *)&v32[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v32[22] = 71;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    v15 = v12;
    v16 = v13;
    v12 = 0uLL;
    v13 = 0;
    v14 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return *v4 + 40 * a2;
}

void sub_1B58BC258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  int v30;
  uint64_t v31;
  uint64_t v33;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v31 - 112) = &unk_1E69A2000;
  v33 = *(_QWORD *)(v31 - 104);
  if (v33 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33))
    *(_QWORD *)(v31 - 104) = 0;
  MEMORY[0x1B5E500E8](v31 - 128);
  a28 = &unk_1E69A2000;
  if (a29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a29 + 32))(a29))
    a29 = 0;
  MEMORY[0x1B5E500E8](&a26);
  MEMORY[0x1B5E500DC](&a24);
  if (a23 < 0)
    operator delete(a18);
  if (v30)
    __cxa_free_exception(v29);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v31 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Task::add_connection(char *a1, int a2, unint64_t a3, _QWORD *a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  AMCP::Log::Scope_Registry *v10;
  _QWORD *v11;
  char **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  _QWORD *v38;
  void *exception;
  _QWORD *v40;
  NSObject *v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  void *v49;
  std::logic_error v50;
  std::string::size_type v51;
  std::logic_error v52;
  char v53;
  std::string v54;
  uint64_t (**v55)();
  std::string v56;
  std::string v57;
  std::logic_error v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint8_t buf[8];
  int64x2_t v65;
  _BYTE v66[30];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*a4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      v38 = a1 + 64;
      if (a1[87] < 0)
        v38 = (_QWORD *)*v38;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v37;
      v65.i16[0] = 2080;
      *(uint64_t *)((char *)v65.i64 + 2) = (uint64_t)"Manifest_Task.cpp";
      v65.i16[5] = 1024;
      v65.i32[3] = 79;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not (connection)";
      *(_WORD *)&v66[10] = 2080;
      *(_QWORD *)&v66[12] = v38;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s null connection passed to add_connection in %s", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    exception = __cxa_allocate_exception(0x40uLL);
    v40 = a1 + 64;
    if (a1[87] < 0)
      v40 = (_QWORD *)*v40;
    caulk::make_string((caulk *)"null connection passed to add_connection in %s", (uint64_t)&v57, v40);
    std::logic_error::logic_error(&v50, &v57);
    v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v58, &v50);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v59 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v66[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v66[24] = 79;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v54.__r_.__value_.__l.__data_);
    v55 = off_1E69A20A0;
    v56 = v54;
    memset(&v54, 0, sizeof(v54));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = &a1[24 * a2];
  v7 = v6 + 8;
  v8 = *(_QWORD *)v6;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 3) <= a3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v41 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - *(_QWORD *)v6) >> 3);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v43;
      v65.i16[0] = 2080;
      *(uint64_t *)((char *)v65.i64 + 2) = (uint64_t)"Manifest_Task.cpp";
      v65.i16[5] = 1024;
      v65.i32[3] = 80;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not (terminal_index < m_connection_group[direction].size())";
      *(_WORD *)&v66[10] = 2048;
      *(_QWORD *)&v66[12] = a3;
      *(_WORD *)&v66[20] = 2048;
      *(_QWORD *)&v66[22] = v44;
      _os_log_error_impl(&dword_1B57BA000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    v45 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v57, a3, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - *(_QWORD *)v6) >> 3));
    std::logic_error::logic_error(&v50, &v57);
    v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v58, &v50);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v59 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v66[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v66[24] = 80;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v54.__r_.__value_.__l.__data_);
    v55 = off_1E69A20A0;
    v56 = v54;
    memset(&v54, 0, sizeof(v54));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v45, (uint64_t)buf);
  }
  memset(&v57, 0, sizeof(v57));
  v10 = (AMCP::Log::Scope_Registry *)std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(&v57, *(_QWORD **)(v8 + 40 * a3), *(_QWORD **)(v8 + 40 * a3 + 8), (uint64_t)(*(_QWORD *)(v8 + 40 * a3 + 8) - *(_QWORD *)(v8 + 40 * a3)) >> 4);
  v11 = (_QWORD *)v57.__r_.__value_.__r.__words[0];
  if (v57.__r_.__value_.__r.__words[0] != v57.__r_.__value_.__l.__size_)
  {
    while (*a4 != *v11)
    {
      v11 += 2;
      if (v11 == (_QWORD *)v57.__r_.__value_.__l.__size_)
        goto LABEL_8;
    }
  }
  if (v11 != (_QWORD *)v57.__r_.__value_.__l.__size_)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v46 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = pthread_self();
      v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v48;
      v65.i16[0] = 2080;
      *(uint64_t *)((char *)v65.i64 + 2) = (uint64_t)"Manifest_Task.cpp";
      v65.i16[5] = 1024;
      v65.i32[3] = 87;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "not (iter == connection_list.end())";
      _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Duplicate connection", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v49 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Duplicate connection", (uint64_t)&v54);
    std::logic_error::logic_error(&v52, &v54);
    v52.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v58, &v52);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v59 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v66[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(_QWORD *)&v66[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v66[24] = 87;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
    v55 = off_1E69A20A0;
    *(std::logic_error *)&v56.__r_.__value_.__l.__data_ = v50;
    v56.__r_.__value_.__r.__words[2] = v51;
    v50.__vftable = 0;
    v50.__imp_.__imp_ = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v49, (uint64_t)buf);
  }
LABEL_8:
  v12 = (char **)(*(_QWORD *)v6 + 40 * a3);
  v13 = v12[1];
  v14 = (unint64_t)v12[2];
  if ((unint64_t)v13 >= v14)
  {
    v19 = (v13 - *v12) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v21 = v14 - (_QWORD)*v12;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    *(_QWORD *)&v66[8] = v12 + 2;
    v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v22);
    v25 = &v23[16 * v19];
    v26 = *(_OWORD *)a4;
    *(_OWORD *)v25 = *(_OWORD *)a4;
    if (*((_QWORD *)&v26 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v30 = *v12;
    v29 = v12[1];
    if (v29 == *v12)
    {
      v33 = vdupq_n_s64((unint64_t)v29);
      v31 = &v23[16 * v19];
    }
    else
    {
      v31 = &v23[16 * v19];
      do
      {
        v32 = *((_OWORD *)v29 - 1);
        v29 -= 16;
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 16;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != v30);
      v33 = *(int64x2_t *)v12;
    }
    v18 = v25 + 16;
    *v12 = v31;
    v12[1] = v25 + 16;
    v65 = v33;
    v34 = v12[2];
    v12[2] = &v23[16 * v24];
    *(_QWORD *)v66 = v34;
    *(_QWORD *)buf = v33.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *(_QWORD *)v13 = *a4;
    v15 = a4[1];
    *((_QWORD *)v13 + 1) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v13 + 16;
  }
  v12[1] = v18;
  *(_QWORD *)buf = &v57;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B58BCAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  a37 = &a31;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a37);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1B58BCE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::DAL::Fixed_Buffer::Fixed_Buffer(_QWORD *a1, uint64_t a2, _QWORD *a3, double a4)
{
  AMCP::DAL::DAL_Time_Range *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  *a1 = &off_1E699F3C8;
  v7 = (AMCP::DAL::DAL_Time_Range *)(a1 + 1);
  v8 = a3[1];
  *(_QWORD *)&v26 = *a3;
  *((_QWORD *)&v26 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v27 = 2;
  v28 = 0;
  v29 = 0;
  v30 = v26;
  v26 = 0uLL;
  v11 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  v22 = 2;
  v23 = 0;
  v24 = 0;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  v25 = v11;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range(v7, (const AMCP::DAL::DAL_Time *)&v27, (const AMCP::DAL::DAL_Time *)&v22);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  AMCP::DAL::Container::Container(a1 + 11, a2, a4);
  return a1;
}

void sub_1B58BD018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 72);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 32);
  _Unwind_Resume(a1);
}

void std::shared_ptr<AMCP::DAL::DAL_Buffer>::reset[abi:ne180100]<AMCP::DAL::Fixed_Buffer,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E6995F18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B58BD0EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL10DAL_BufferEE27__shared_ptr_default_deleteIS3_NS2_12Fixed_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMCP::Graph::Manifest_Task::set_up_connections(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string ***v13;
  AMCP::Log::Scope_Registry *v14;
  std::string **v15;
  std::string **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type size;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::__shared_weak_count *data;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  double v34;
  std::string::size_type v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  AMCP::Log::Scope_Registry *v39;
  double v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  std::string *v51;
  std::string::pointer v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  std::string::size_type v56;
  std::string::pointer v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::string *v72;
  std::string::size_type v73;
  std::string::pointer v74;
  unint64_t *v75;
  unint64_t v76;
  _BOOL8 v77;
  _BOOL4 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string::size_type v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  double sample_time;
  double v100;
  double v101;
  double v102;
  AMCP::Log::Scope_Registry *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  uint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  __int128 v127;
  uint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t **v141;
  AMCP::Log::Scope_Registry *v142;
  uint64_t *v143;
  uint64_t *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::string::size_type v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  BOOL v160;
  unsigned __int8 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  __int128 v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::string::size_type v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  std::__shared_weak_count *v227;
  uint64_t *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  unint64_t *v232;
  unint64_t v233;
  std::string::size_type v234;
  std::string::size_type v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  unint64_t v248;
  std::string::size_type v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  double v269;
  double v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  __int128 v279;
  uint64_t *v280;
  unint64_t *v281;
  unint64_t v282;
  __int128 v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  __int128 v294;
  uint64_t *v295;
  unint64_t *v296;
  unint64_t v297;
  __int128 v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  NSObject *v309;
  unint64_t *v310;
  unint64_t v311;
  _opaque_pthread_t *v312;
  mach_port_t v313;
  std::logic_error *exception;
  uint64_t v315;
  int v316;
  uint64_t v317;
  std::logic_error v318;
  std::__shared_weak_count *v319;
  NSObject *v320;
  unint64_t *v321;
  unint64_t v322;
  _opaque_pthread_t *v323;
  mach_port_t v324;
  _QWORD *v325;
  std::logic_error *v326;
  _QWORD *v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  std::logic_error v331;
  std::__shared_weak_count *v332;
  NSObject *v333;
  unint64_t *v334;
  unint64_t v335;
  _opaque_pthread_t *v336;
  mach_port_t v337;
  std::logic_error *v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  std::logic_error v342;
  std::__shared_weak_count *v343;
  NSObject *v344;
  unint64_t *v345;
  unint64_t v346;
  _opaque_pthread_t *v347;
  mach_port_t v348;
  std::logic_error *v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  std::logic_error v353;
  std::__shared_weak_count *v354;
  NSObject *v355;
  unint64_t *v356;
  unint64_t v357;
  _opaque_pthread_t *v358;
  mach_port_t v359;
  std::logic_error *v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  std::logic_error v364;
  std::__shared_weak_count *v365;
  NSObject *v366;
  unint64_t *v367;
  unint64_t v368;
  _opaque_pthread_t *v369;
  mach_port_t v370;
  std::logic_error *v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  std::logic_error v375;
  std::__shared_weak_count *v376;
  NSObject *v377;
  unint64_t *v378;
  unint64_t v379;
  _opaque_pthread_t *v380;
  mach_port_t v381;
  void *v382;
  int v383;
  std::__shared_weak_count *v384;
  NSObject *v385;
  unint64_t *v386;
  unint64_t v387;
  _opaque_pthread_t *v388;
  mach_port_t v389;
  std::logic_error *v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  std::logic_error v394;
  std::__shared_weak_count *v395;
  NSObject *v396;
  unint64_t *v397;
  unint64_t v398;
  _opaque_pthread_t *v399;
  mach_port_t v400;
  _QWORD *v401;
  std::logic_error *v402;
  _QWORD *v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  std::logic_error v407;
  std::__shared_weak_count *v408;
  NSObject *v409;
  unint64_t *v410;
  unint64_t v411;
  _opaque_pthread_t *v412;
  mach_port_t v413;
  std::logic_error *v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  std::logic_error v418;
  std::__shared_weak_count *v419;
  NSObject *v420;
  unint64_t *v421;
  unint64_t v422;
  _opaque_pthread_t *v423;
  mach_port_t v424;
  std::logic_error *v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  std::logic_error v429;
  std::__shared_weak_count *v430;
  NSObject *v431;
  unint64_t *v432;
  unint64_t v433;
  _opaque_pthread_t *v434;
  mach_port_t v435;
  std::logic_error *v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  std::logic_error v440;
  std::__shared_weak_count *v441;
  NSObject *v442;
  unint64_t *v443;
  unint64_t v444;
  _opaque_pthread_t *v445;
  mach_port_t v446;
  std::logic_error *v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  std::logic_error v451;
  std::__shared_weak_count *v452;
  NSObject *v453;
  unint64_t *v454;
  unint64_t v455;
  _opaque_pthread_t *v456;
  mach_port_t v457;
  void *v458;
  uint64_t v459;
  uint64_t **v460;
  uint64_t *v461;
  uint64_t v462;
  std::string ***v463;
  std::string ***v465;
  uint64_t *v466;
  uint64_t v467;
  __int128 v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  int v471;
  __int128 v472;
  uint64_t v473;
  std::__shared_weak_count *v474;
  uint64_t v475;
  _BYTE v476[24];
  uint64_t v477;
  uint64_t *v478;
  _BYTE v479[24];
  uint64_t v480;
  std::__shared_weak_count *v481;
  uint64_t v482;
  std::logic_error v483;
  void *v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  __int128 v487;
  uint64_t v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  std::string v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  std::string v494;
  std::string::pointer v495;
  std::__shared_weak_count *v496;
  std::logic_error v497;
  char *v498;
  std::logic_error v499;
  _BYTE v500[32];
  std::__shared_weak_count *v501;
  uint64_t v502;
  int v503;
  char v504;
  _BYTE buf[24];
  _BYTE v506[32];
  uint64_t v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  _BYTE v510[24];
  _BYTE v511[24];
  int v512;
  uint64_t v513;

  v513 = *MEMORY[0x1E0C80C00];
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v462 = (uint64_t)(a3 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((a3[2] - *a3) >> 3) < v7)
  {
    if (v7 > 0x2E8BA2E8BA2E8BALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v8 = a3[1] - *a3;
    v478 = a3 + 2;
    *(_QWORD *)v476 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v7);
    *(_QWORD *)&v476[8] = *(_QWORD *)v476 + v8;
    *(_QWORD *)&v476[16] = *(_QWORD *)v476 + v8;
    v477 = *(_QWORD *)v476 + 88 * v9;
    std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(a3, v476);
    std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)v476);
  }
  v459 = (uint64_t)(a4 + 2);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  if (0x2E8BA2E8BA2E8BA3 * ((a4[2] - *a4) >> 3) < v10)
  {
    if (v10 > 0x2E8BA2E8BA2E8BALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = a4[1] - *a4;
    v478 = a4 + 2;
    *(_QWORD *)v476 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v10);
    *(_QWORD *)&v476[8] = *(_QWORD *)v476 + v11;
    *(_QWORD *)&v476[16] = *(_QWORD *)v476 + v11;
    v477 = *(_QWORD *)v476 + 88 * v12;
    std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(a4, v476);
    std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer((uint64_t)v476);
  }
  v13 = *(std::string ****)a1;
  v463 = *(std::string ****)(a1 + 8);
  v461 = a4;
  if (*(std::string ****)a1 != v463)
  {
    do
    {
      AMCP::DAL::create_null_readable_range((AMCP::DAL *)v476);
      v16 = *v13;
      v15 = v13[1];
      v465 = v13;
      while (v16 != v15)
      {
        v17 = *(_QWORD *)(a2 + 24);
        v18 = *(std::__shared_weak_count **)(a2 + 32);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (!v17)
        {
          AMCP::Log::Scope_Registry::get(v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v308 = *(std::__shared_weak_count **)&buf[8];
          v309 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v310 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v311 = __ldaxr(v310);
            while (__stlxr(v311 - 1, v310));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
              std::__shared_weak_count::__release_weak(v308);
            }
          }
          if (os_log_type_enabled(v309, OS_LOG_TYPE_ERROR))
          {
            v312 = pthread_self();
            v313 = pthread_mach_thread_np(v312);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v313;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 347;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (execution_context.m_time_interval.get_clock() != nullptr)";
            _os_log_error_impl(&dword_1B57BA000, v309, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time interval", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Bad time interval", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v315 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 347;
          std::vector<void *>::vector(&v491);
          v316 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v316);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(exception, (const std::logic_error *)buf);
          exception->__vftable = (std::logic_error_vtbl *)(v315 + 16);
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v317 = *(_QWORD *)v506;
          exception[1].__imp_.__imp_ = *(const char **)v506;
          if (v317)
            (*(void (**)(uint64_t))(*(_QWORD *)v317 + 24))(v317);
          v318 = *(std::logic_error *)&v506[8];
          LODWORD(exception[3].__vftable) = *(_DWORD *)&v506[24];
          exception[2] = v318;
          exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        if ((*(_BYTE *)a2 & 2) == 0)
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
        if (round(*(double *)(a2 + 8)) == 0.0)
        {
          AMCP::Log::Scope_Registry::get(v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v319 = *(std::__shared_weak_count **)&buf[8];
          v320 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v321 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v322 = __ldaxr(v321);
            while (__stlxr(v322 - 1, v321));
            if (!v322)
            {
              ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
              std::__shared_weak_count::__release_weak(v319);
            }
          }
          if (os_log_type_enabled(v320, OS_LOG_TYPE_ERROR))
          {
            v323 = pthread_self();
            v324 = pthread_mach_thread_np(v323);
            v325 = (_QWORD *)(a1 + 64);
            if (*(char *)(a1 + 87) < 0)
              v325 = (_QWORD *)*v325;
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&buf[4] = v324;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 348;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (execution_context.m_time_interval.get_sample_delta() != 0_S)";
            *(_WORD *)&v506[10] = 2080;
            *(_QWORD *)&v506[12] = v325;
            _os_log_error_impl(&dword_1B57BA000, v320, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero time interval manifest task %s", buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v326 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          v327 = (_QWORD *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0)
            v327 = (_QWORD *)*v327;
          caulk::make_string((caulk *)"Zero time interval manifest task %s", (uint64_t)&v494, v327);
          std::logic_error::logic_error(&v497, &v494);
          v328 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 348;
          std::vector<void *>::vector(&v491);
          v329 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v329);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          v326[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v326, (const std::logic_error *)buf);
          v326->__vftable = (std::logic_error_vtbl *)(v328 + 16);
          v326[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v330 = *(_QWORD *)v506;
          v326[1].__imp_.__imp_ = *(const char **)v506;
          if (v330)
            (*(void (**)(uint64_t))(*(_QWORD *)v330 + 24))(v330);
          v331 = *(std::logic_error *)&v506[8];
          LODWORD(v326[3].__vftable) = *(_DWORD *)&v506[24];
          v326[2] = v331;
          v326->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v326[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v326[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        size = (*v16)[5].__r_.__value_.__l.__size_;
        v23 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          do
            v26 = __ldaxr(v24);
          while (__stlxr(v26 - 1, v24));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (!size)
        {
          AMCP::Log::Scope_Registry::get(v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v332 = *(std::__shared_weak_count **)&buf[8];
          v333 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v334 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v335 = __ldaxr(v334);
            while (__stlxr(v335 - 1, v334));
            if (!v335)
            {
              ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
              std::__shared_weak_count::__release_weak(v332);
            }
          }
          if (os_log_type_enabled(v333, OS_LOG_TYPE_ERROR))
          {
            v336 = pthread_self();
            v337 = pthread_mach_thread_np(v336);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v337;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 349;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (c->get_timebase() != nullptr)";
            _os_log_error_impl(&dword_1B57BA000, v333, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v338 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v339 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 349;
          std::vector<void *>::vector(&v491);
          v340 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v340);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          v338[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v338, (const std::logic_error *)buf);
          v338->__vftable = (std::logic_error_vtbl *)(v339 + 16);
          v338[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v341 = *(_QWORD *)v506;
          v338[1].__imp_.__imp_ = *(const char **)v506;
          if (v341)
            (*(void (**)(uint64_t))(*(_QWORD *)v341 + 24))(v341);
          v342 = *(std::logic_error *)&v506[8];
          LODWORD(v338[3].__vftable) = *(_DWORD *)&v506[24];
          v338[2] = v342;
          v338->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v338[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v338[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v27 = *v16;
        if (!*v16)
        {
          AMCP::Log::Scope_Registry::get(v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v343 = *(std::__shared_weak_count **)&buf[8];
          v344 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v345 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v346 = __ldaxr(v345);
            while (__stlxr(v346 - 1, v345));
            if (!v346)
            {
              ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
              std::__shared_weak_count::__release_weak(v343);
            }
          }
          if (os_log_type_enabled(v344, OS_LOG_TYPE_ERROR))
          {
            v347 = pthread_self();
            v348 = pthread_mach_thread_np(v347);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v348;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 350;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (c.get() != nullptr)";
            _os_log_error_impl(&dword_1B57BA000, v344, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v349 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v350 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 350;
          std::vector<void *>::vector(&v491);
          v351 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v351);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          v349[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v349, (const std::logic_error *)buf);
          v349->__vftable = (std::logic_error_vtbl *)(v350 + 16);
          v349[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v352 = *(_QWORD *)v506;
          v349[1].__imp_.__imp_ = *(const char **)v506;
          if (v352)
            (*(void (**)(uint64_t))(*(_QWORD *)v352 + 24))(v352);
          v353 = *(std::logic_error *)&v506[8];
          LODWORD(v349[3].__vftable) = *(_DWORD *)&v506[24];
          v349[2] = v353;
          v349->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v349[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v349[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v28 = v27[12].__r_.__value_.__r.__words[2];
        data = (std::__shared_weak_count *)v27[13].__r_.__value_.__l.__data_;
        if (data)
        {
          v30 = (unint64_t *)&data->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = (unint64_t *)&data->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
            std::__shared_weak_count::__release_weak(data);
          }
        }
        if (!v28)
        {
          AMCP::Log::Scope_Registry::get(v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v354 = *(std::__shared_weak_count **)&buf[8];
          v355 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v356 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v357 = __ldaxr(v356);
            while (__stlxr(v357 - 1, v356));
            if (!v357)
            {
              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
              std::__shared_weak_count::__release_weak(v354);
            }
          }
          if (os_log_type_enabled(v355, OS_LOG_TYPE_ERROR))
          {
            v358 = pthread_self();
            v359 = pthread_mach_thread_np(v358);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v359;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 351;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (c->get_buffer() != nullptr)";
            _os_log_error_impl(&dword_1B57BA000, v355, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Buffer has not been allocated in begin_processing", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v360 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Buffer has not been allocated in begin_processing", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v361 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 351;
          std::vector<void *>::vector(&v491);
          v362 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v362);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          v360[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v360, (const std::logic_error *)buf);
          v360->__vftable = (std::logic_error_vtbl *)(v361 + 16);
          v360[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v363 = *(_QWORD *)v506;
          v360[1].__imp_.__imp_ = *(const char **)v506;
          if (v363)
            (*(void (**)(uint64_t))(*(_QWORD *)v363 + 24))(v363);
          v364 = *(std::logic_error *)&v506[8];
          LODWORD(v360[3].__vftable) = *(_DWORD *)&v506[24];
          v360[2] = v364;
          v360->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v360[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v360[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v34 = *(double *)&(*v16)[3].__r_.__value_.__r.__words[2];
        v35 = (*v16)[5].__r_.__value_.__l.__size_;
        v36 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        *(_QWORD *)buf = v35;
        *(_QWORD *)&buf[8] = v36;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v40 = (*(double (**)(std::string::size_type))(*(_QWORD *)v35 + 152))(v35);
        if (v36)
        {
          v41 = (unint64_t *)&v36->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v34 != v40)
        {
          AMCP::Log::Scope_Registry::get(v39);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v365 = *(std::__shared_weak_count **)&buf[8];
          v366 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v367 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v368 = __ldaxr(v367);
            while (__stlxr(v368 - 1, v367));
            if (!v368)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
          if (os_log_type_enabled(v366, OS_LOG_TYPE_ERROR))
          {
            v369 = pthread_self();
            v370 = pthread_mach_thread_np(v369);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v370;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 352;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (c->get_format().mSampleRate == c->get_timebase()->get_sample_rate())";
            _os_log_error_impl(&dword_1B57BA000, v366, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v371 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v372 = MEMORY[0x1E0DE5018];
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 352;
          std::vector<void *>::vector(&v491);
          v373 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v373);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          v371[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v371, (const std::logic_error *)buf);
          v371->__vftable = (std::logic_error_vtbl *)(v372 + 16);
          v371[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v374 = *(_QWORD *)v506;
          v371[1].__imp_.__imp_ = *(const char **)v506;
          if (v374)
            (*(void (**)(uint64_t))(*(_QWORD *)v374 + 24))(v374);
          v375 = *(std::logic_error *)&v506[8];
          LODWORD(v371[3].__vftable) = *(_DWORD *)&v506[24];
          v371[2] = v375;
          v371->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v371[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v371[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(a1);
        (*(void (**)(_QWORD, uint64_t, std::string **))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), a2, v16);
        v44 = (*v16)[5].__r_.__value_.__l.__size_;
        v45 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          do
            v48 = __ldxr(v46);
          while (__stxr(v48 + 1, v46));
          *(_QWORD *)&v49 = v44;
          *((_QWORD *)&v49 + 1) = v45;
          *(_DWORD *)buf = 2;
          *(_QWORD *)&buf[8] = v43;
          *(_QWORD *)&buf[16] = 0;
          *(_OWORD *)v506 = v49;
          do
            v50 = __ldaxr(v46);
          while (__stlxr(v50 - 1, v46));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        else
        {
          *(_DWORD *)buf = 2;
          *(_QWORD *)&buf[8] = v43;
          *(_QWORD *)&buf[16] = 0;
          *(_OWORD *)v506 = v44;
        }
        v51 = *v16;
        *(_OWORD *)v510 = *(_OWORD *)&(*v16)[7].__r_.__value_.__l.__data_;
        v52 = v51[8].__r_.__value_.__l.__data_;
        *(_QWORD *)&v510[16] = *((_QWORD *)&v51[7].__r_.__value_.__l + 2);
        *(_QWORD *)v511 = v52;
        v53 = v51[8].__r_.__value_.__l.__size_;
        *(_QWORD *)&v511[8] = v53;
        if (v53)
        {
          v54 = (unint64_t *)(v53 + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v57 = (*v16)[8].__r_.__value_.__l.__data_;
          v56 = (*v16)[8].__r_.__value_.__l.__size_;
          v494 = (*v16)[7];
          v495 = v57;
          v496 = (std::__shared_weak_count *)v56;
          if (v56)
          {
            v58 = (unint64_t *)(v56 + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
        }
        else
        {
          v494 = v51[7];
          v495 = v52;
          v496 = 0;
        }
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v500, (uint64_t)&v494, (uint64_t)buf);
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v483, (const AMCP::DAL::DAL_Time *)v510, (const AMCP::DAL::DAL_Time *)v500);
        v60 = v501;
        if (v501)
        {
          v61 = (unint64_t *)&v501->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = v496;
        if (v496)
        {
          v64 = (unint64_t *)&v496->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = *(std::__shared_weak_count **)&v511[8];
        if (*(_QWORD *)&v511[8])
        {
          v67 = (unint64_t *)(*(_QWORD *)&v511[8] + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = *(std::__shared_weak_count **)&v506[8];
        if (*(_QWORD *)&v506[8])
        {
          v70 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = *v16;
        *(_OWORD *)buf = *(_OWORD *)&(*v16)[8].__r_.__value_.__r.__words[2];
        v73 = v72[9].__r_.__value_.__r.__words[2];
        *(_QWORD *)&buf[16] = v72[9].__r_.__value_.__l.__size_;
        *(_QWORD *)v506 = v73;
        v74 = v72[10].__r_.__value_.__l.__data_;
        *(_QWORD *)&v506[8] = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v487);
        v78 = v77;
        v79 = *(std::__shared_weak_count **)&v506[8];
        if (*(_QWORD *)&v506[8])
        {
          v80 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (v78)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v77);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v376 = *(std::__shared_weak_count **)&buf[8];
          v377 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v378 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v379 = __ldaxr(v378);
            while (__stlxr(v379 - 1, v378));
            if (!v379)
            {
              ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
              std::__shared_weak_count::__release_weak(v376);
            }
          }
          if (os_log_type_enabled(v377, OS_LOG_TYPE_ERROR))
          {
            v380 = pthread_self();
            v381 = pthread_mach_thread_np(v380);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v381;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 363;
            *(_WORD *)v506 = 2080;
            *(_QWORD *)&v506[2] = "not (time_range.end() <= c->get_producer_write_position())";
            _os_log_error_impl(&dword_1B57BA000, v377, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v499);
          v382 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v494);
          std::logic_error::logic_error(&v497, &v494);
          v497.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v510, &v497);
          memset(v511, 0, sizeof(v511));
          v512 = -1;
          *(_QWORD *)v510 = off_1E69A1208;
          *(_QWORD *)&v510[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v510);
          *(_QWORD *)&v506[8] = "DAL::Readable_Range AMCP::Graph::Manifest_Task::calculate_read_times_and_create_range(co"
                                "nst Manifest_Execution_Context &, const Connection &)";
          *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v506[24] = 363;
          std::vector<void *>::vector(&v491);
          v383 = backtrace((void **)v491.__r_.__value_.__l.__data_, (v491.__r_.__value_.__l.__size_ - v491.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v491.__r_.__value_.__l.__data_, v383);
          *(std::string *)&v500[8] = v491;
          *(_QWORD *)v500 = off_1E69A20A0;
          memset(&v491, 0, sizeof(v491));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v500);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v382, (uint64_t)buf);
        }
        v82 = (*v16)[12].__r_.__value_.__r.__words[2];
        *(std::logic_error *)buf = v483;
        *(_QWORD *)&buf[16] = v484;
        *(_QWORD *)v506 = v485;
        *(_QWORD *)&v506[8] = v486;
        if (v486)
        {
          v83 = (unint64_t *)&v486->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        *(_OWORD *)&v506[16] = v487;
        v507 = v488;
        v508 = v489;
        v509 = v490;
        if (v490)
        {
          v85 = (unint64_t *)&v490->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, _BYTE *))(*(_QWORD *)v82 + 144))(&v467, v82, buf);
        v87 = v509;
        if (v509)
        {
          v88 = (unint64_t *)&v509->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v90 = *(std::__shared_weak_count **)&v506[8];
        if (*(_QWORD *)&v506[8])
        {
          v91 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = v490;
        if (v490)
        {
          v94 = (unint64_t *)&v490->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v96 = v486;
        if (v486)
        {
          v97 = (unint64_t *)&v486->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v479);
        v100 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v476);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v479);
        v101 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v467);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v471);
        if (round(sample_time) == 0.0 || round(v101) < round(v100))
        {
          v102 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v471);
          if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v471) != (double)(uint64_t)floor(v102))
          {
            AMCP::Log::Scope_Registry::get(v103);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v452 = *(std::__shared_weak_count **)&buf[8];
            v453 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v454 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v455 = __ldaxr(v454);
              while (__stlxr(v455 - 1, v454));
              if (!v455)
              {
                ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
                std::__shared_weak_count::__release_weak(v452);
              }
            }
            if (os_log_type_enabled(v453, OS_LOG_TYPE_ERROR))
            {
              v456 = pthread_self();
              v457 = pthread_mach_thread_np(v456);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v457;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Manifest_Task.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 177;
              *(_WORD *)v506 = 2080;
              *(_QWORD *)&v506[2] = "not (connection_range.get_time_range().end().get_sample_time().floor().get() == conn"
                                    "ection_range.get_time_range().end().get_sample_time().get_double())";
              _os_log_error_impl(&dword_1B57BA000, v453, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v497);
            v458 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)v500);
            std::logic_error::logic_error((std::logic_error *)&v491, (const std::string *)v500);
            v491.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
            std::logic_error::logic_error(&v483, (const std::logic_error *)&v491);
            v485 = 0;
            v486 = 0;
            *(_QWORD *)&v487 = 0;
            DWORD2(v487) = -1;
            v483.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v484 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v483);
            *(_QWORD *)&v506[8] = "void AMCP::Graph::Manifest_Task::set_up_connections(const Manifest_Execution_Context &"
                                  ", rt_safe_vector<DAL::Readable_Range> &, rt_safe_vector<DAL::Writable_Range> &)";
            *(_QWORD *)&v506[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
            *(_DWORD *)&v506[24] = 177;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v494.__r_.__value_.__l.__data_);
            *(_OWORD *)&v510[8] = *(_OWORD *)&v494.__r_.__value_.__l.__data_;
            *(_QWORD *)v510 = off_1E69A20A0;
            *(_QWORD *)v511 = *((_QWORD *)&v494.__r_.__value_.__l + 2);
            memset(&v494, 0, sizeof(v494));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v510);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v458, (uint64_t)buf);
          }
          *(_DWORD *)v476 = v467;
          *(_OWORD *)&v476[8] = v468;
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v477, v469, (uint64_t)v470);
          *(_DWORD *)v479 = v471;
          *(_OWORD *)&v479[8] = v472;
          v14 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v480, v473, (uint64_t)v474);
          v482 = v475;
        }
        v104 = v474;
        if (v474)
        {
          v105 = (unint64_t *)&v474->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = v470;
        if (v470)
        {
          v108 = (unint64_t *)&v470->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v16 += 2;
      }
      v110 = a3[1];
      v111 = a3[2];
      if (v110 >= v111)
      {
        v121 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v110 - *a3) >> 3);
        v122 = v121 + 1;
        if ((unint64_t)(v121 + 1) > 0x2E8BA2E8BA2E8BALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v123 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v111 - *a3) >> 3);
        if (2 * v123 > v122)
          v122 = 2 * v123;
        if (v123 >= 0x1745D1745D1745DLL)
          v124 = 0x2E8BA2E8BA2E8BALL;
        else
          v124 = v122;
        v470 = (std::__shared_weak_count *)v462;
        if (v124)
          v124 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v124);
        else
          v125 = 0;
        v126 = (char *)(v124 + 88 * v121);
        v467 = v124;
        *(_QWORD *)&v468 = v126;
        v469 = v124 + 88 * v125;
        v127 = *(_OWORD *)v476;
        *((_QWORD *)v126 + 2) = *(_QWORD *)&v476[16];
        *(_OWORD *)v126 = v127;
        *((_QWORD *)v126 + 3) = v477;
        v128 = v478;
        *((_QWORD *)v126 + 4) = v478;
        if (v128)
        {
          v129 = (unint64_t *)(v128 + 1);
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        v131 = *(_OWORD *)v479;
        *((_QWORD *)v126 + 7) = *(_QWORD *)&v479[16];
        *(_OWORD *)(v126 + 40) = v131;
        *((_QWORD *)v126 + 8) = v480;
        v132 = v481;
        *((_QWORD *)v126 + 9) = v481;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        *((_QWORD *)v126 + 10) = v482;
        *((_QWORD *)&v468 + 1) = v126 + 88;
        std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(a3, &v467);
        v120 = a3[1];
        std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)&v467);
      }
      else
      {
        v112 = *(_OWORD *)v476;
        *(_QWORD *)(v110 + 16) = *(_QWORD *)&v476[16];
        *(_OWORD *)v110 = v112;
        *(_QWORD *)(v110 + 24) = v477;
        v113 = v478;
        *(_QWORD *)(v110 + 32) = v478;
        if (v113)
        {
          v114 = (unint64_t *)(v113 + 1);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        v116 = *(_OWORD *)v479;
        *(_QWORD *)(v110 + 56) = *(_QWORD *)&v479[16];
        *(_OWORD *)(v110 + 40) = v116;
        *(_QWORD *)(v110 + 64) = v480;
        v117 = v481;
        *(_QWORD *)(v110 + 72) = v481;
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        *(_QWORD *)(v110 + 80) = v482;
        v120 = v110 + 88;
        a3[1] = v110 + 88;
      }
      a3[1] = v120;
      v135 = v481;
      if (v481)
      {
        v136 = (unint64_t *)&v481->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v138 = (std::__shared_weak_count *)v478;
      if (v478)
      {
        v139 = (unint64_t *)(v478 + 1);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v13 = v465 + 5;
    }
    while (v465 + 5 != v463);
  }
  v141 = *(uint64_t ***)(a1 + 24);
  v460 = *(uint64_t ***)(a1 + 32);
  while (v141 != v460)
  {
    AMCP::DAL::create_null_writable_range((AMCP::DAL *)v476);
    v144 = *v141;
    v143 = v141[1];
    v466 = v143;
    while (v144 != v143)
    {
      v146 = *(_QWORD *)(a2 + 24);
      v145 = *(std::__shared_weak_count **)(a2 + 32);
      if (v145)
      {
        v147 = (unint64_t *)&v145->__shared_owners_;
        do
          v148 = __ldxr(v147);
        while (__stxr(v148 + 1, v147));
        do
          v149 = __ldaxr(v147);
        while (__stlxr(v149 - 1, v147));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      if (!v146)
      {
        AMCP::Log::Scope_Registry::get(v142);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v384 = *(std::__shared_weak_count **)&v510[8];
        v385 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v386 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 - 1, v386));
          if (!v387)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        if (os_log_type_enabled(v385, OS_LOG_TYPE_ERROR))
        {
          v388 = pthread_self();
          v389 = pthread_mach_thread_np(v388);
          *(_DWORD *)v510 = 67109890;
          *(_DWORD *)&v510[4] = v389;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 371;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (execution_context.m_time_interval.get_clock() != nullptr)";
          _os_log_error_impl(&dword_1B57BA000, v385, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time interval", v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v390 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Bad time interval", (uint64_t)&v491);
        std::logic_error::logic_error(&v499, &v491);
        v391 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 371;
        std::vector<void *>::vector(&v497);
        v392 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v392);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v390[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v390, (const std::logic_error *)v510);
        v390->__vftable = (std::logic_error_vtbl *)(v391 + 16);
        v390[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v393 = *(_QWORD *)v511;
        v390[1].__imp_.__imp_ = *(const char **)v511;
        if (v393)
          (*(void (**)(uint64_t))(*(_QWORD *)v393 + 24))(v393);
        v394 = *(std::logic_error *)&v511[8];
        LODWORD(v390[3].__vftable) = v512;
        v390[2] = v394;
        v390->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v390[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v390[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      if ((*(_BYTE *)a2 & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
      if (round(*(double *)(a2 + 8)) == 0.0)
      {
        AMCP::Log::Scope_Registry::get(v142);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v395 = *(std::__shared_weak_count **)&v510[8];
        v396 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v397 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v398 = __ldaxr(v397);
          while (__stlxr(v398 - 1, v397));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
        if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
        {
          v399 = pthread_self();
          v400 = pthread_mach_thread_np(v399);
          v401 = (_QWORD *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0)
            v401 = (_QWORD *)*v401;
          *(_DWORD *)v510 = 67110146;
          *(_DWORD *)&v510[4] = v400;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 372;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (execution_context.m_time_interval.get_sample_delta() != 0_S)";
          *(_WORD *)&v511[10] = 2080;
          *(_QWORD *)&v511[12] = v401;
          _os_log_error_impl(&dword_1B57BA000, v396, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero time interval manifest task %s", v510, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v402 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        v403 = (_QWORD *)(a1 + 64);
        if (*(char *)(a1 + 87) < 0)
          v403 = (_QWORD *)*v403;
        caulk::make_string((caulk *)"Zero time interval manifest task %s", (uint64_t)&v491, v403, &v489, &v485, &v492, &v508, v506, &v473, &v469, v511);
        std::logic_error::logic_error(&v499, &v491);
        v404 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 372;
        std::vector<void *>::vector(&v497);
        v405 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v405);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v402[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v402, (const std::logic_error *)v510);
        v402->__vftable = (std::logic_error_vtbl *)(v404 + 16);
        v402[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v406 = *(_QWORD *)v511;
        v402[1].__imp_.__imp_ = *(const char **)v511;
        if (v406)
          (*(void (**)(uint64_t))(*(_QWORD *)v406 + 24))(v406);
        v407 = *(std::logic_error *)&v511[8];
        LODWORD(v402[3].__vftable) = v512;
        v402[2] = v407;
        v402->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v402[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v402[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v150 = (_QWORD *)*v144;
      *(_OWORD *)v510 = *(_OWORD *)(*v144 + 208);
      v151 = v150[29];
      *(_QWORD *)&v510[16] = v150[28];
      *(_QWORD *)v511 = v151;
      v152 = v150[30];
      *(_QWORD *)&v511[8] = v152;
      if (v152)
      {
        v153 = (unint64_t *)(v152 + 8);
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
        do
          v155 = __ldxr(v153);
        while (__stxr(v155 + 1, v153));
        v150 = (_QWORD *)*v144;
      }
      *(_QWORD *)v500 = v151;
      *(_QWORD *)&v500[8] = v152;
      v156 = v150[16];
      v157 = (std::__shared_weak_count *)v150[17];
      v494.__r_.__value_.__r.__words[0] = v156;
      v494.__r_.__value_.__l.__size_ = (std::string::size_type)v157;
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      v160 = (v151 | v156) == 0;
      if (!v151 || !v156)
        goto LABEL_211;
      v161 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v151 + 16))(v151);
      v151 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v156 + 16))(v156);
      v162 = v161[23];
      if ((v162 & 0x80u) == 0)
        v163 = v161[23];
      else
        v163 = *((_QWORD *)v161 + 1);
      v164 = *(unsigned __int8 *)(v151 + 23);
      v165 = (char)v164;
      if ((v164 & 0x80u) != 0)
        v164 = *(_QWORD *)(v151 + 8);
      if (v163 == v164)
      {
        if (v165 >= 0)
          v166 = (unsigned __int8 *)v151;
        else
          v166 = *(unsigned __int8 **)v151;
        if ((v162 & 0x80) != 0)
        {
          v151 = memcmp(*(const void **)v161, v166, *((_QWORD *)v161 + 1));
          v160 = (_DWORD)v151 == 0;
          goto LABEL_211;
        }
        if (v161[23])
        {
          v167 = v162 - 1;
          do
          {
            v169 = *v161++;
            v168 = v169;
            v171 = *v166++;
            v170 = v171;
            v173 = v167-- != 0;
            v160 = v168 == v170;
          }
          while (v168 == v170 && v173);
LABEL_211:
          if (!v157)
            goto LABEL_216;
          goto LABEL_212;
        }
        v160 = 1;
        if (!v157)
          goto LABEL_216;
      }
      else
      {
        v160 = 0;
        if (!v157)
          goto LABEL_216;
      }
LABEL_212:
      v174 = (unint64_t *)&v157->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
LABEL_216:
      v176 = *(std::__shared_weak_count **)&v500[8];
      if (*(_QWORD *)&v500[8])
      {
        v177 = (unint64_t *)(*(_QWORD *)&v500[8] + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v179 = *(std::__shared_weak_count **)&v511[8];
      if (*(_QWORD *)&v511[8])
      {
        v180 = (unint64_t *)(*(_QWORD *)&v511[8] + 8);
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      if (!v160)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v151);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v408 = *(std::__shared_weak_count **)&v510[8];
        v409 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v410 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        if (os_log_type_enabled(v409, OS_LOG_TYPE_ERROR))
        {
          v412 = pthread_self();
          v413 = pthread_mach_thread_np(v412);
          *(_DWORD *)v510 = 67109890;
          *(_DWORD *)&v510[4] = v413;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 373;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (is_same_timebase(c->get_producer_write_position().get_clock(), c->get_timebase()))";
          _os_log_error_impl(&dword_1B57BA000, v409, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v414 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v491);
        std::logic_error::logic_error(&v499, &v491);
        v415 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 373;
        std::vector<void *>::vector(&v497);
        v416 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v416);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v414[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v414, (const std::logic_error *)v510);
        v414->__vftable = (std::logic_error_vtbl *)(v415 + 16);
        v414[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v417 = *(_QWORD *)v511;
        v414[1].__imp_.__imp_ = *(const char **)v511;
        if (v417)
          (*(void (**)(uint64_t))(*(_QWORD *)v417 + 24))(v417);
        v418 = *(std::logic_error *)&v511[8];
        LODWORD(v414[3].__vftable) = v512;
        v414[2] = v418;
        v414->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v414[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v414[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v183 = *(_QWORD *)(*v144 + 128);
      v182 = *(std::__shared_weak_count **)(*v144 + 136);
      if (v182)
      {
        v184 = (unint64_t *)&v182->__shared_owners_;
        do
          v185 = __ldxr(v184);
        while (__stxr(v185 + 1, v184));
        do
          v186 = __ldaxr(v184);
        while (__stlxr(v186 - 1, v184));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      if (!v183)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v151);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v419 = *(std::__shared_weak_count **)&v510[8];
        v420 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v421 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
            std::__shared_weak_count::__release_weak(v419);
          }
        }
        if (os_log_type_enabled(v420, OS_LOG_TYPE_ERROR))
        {
          v423 = pthread_self();
          v424 = pthread_mach_thread_np(v423);
          *(_DWORD *)v510 = 67109890;
          *(_DWORD *)&v510[4] = v424;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 374;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (c->get_timebase() != nullptr)";
          _os_log_error_impl(&dword_1B57BA000, v420, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v425 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v491);
        std::logic_error::logic_error(&v499, &v491);
        v426 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 374;
        std::vector<void *>::vector(&v497);
        v427 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v427);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v425[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v425, (const std::logic_error *)v510);
        v425->__vftable = (std::logic_error_vtbl *)(v426 + 16);
        v425[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v428 = *(_QWORD *)v511;
        v425[1].__imp_.__imp_ = *(const char **)v511;
        if (v428)
          (*(void (**)(uint64_t))(*(_QWORD *)v428 + 24))(v428);
        v429 = *(std::logic_error *)&v511[8];
        LODWORD(v425[3].__vftable) = v512;
        v425[2] = v429;
        v425->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v425[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v425[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v187 = *v144;
      if (!*v144)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v151);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v430 = *(std::__shared_weak_count **)&v510[8];
        v431 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v432 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
            std::__shared_weak_count::__release_weak(v430);
          }
        }
        if (os_log_type_enabled(v431, OS_LOG_TYPE_ERROR))
        {
          v434 = pthread_self();
          v435 = pthread_mach_thread_np(v434);
          *(_DWORD *)v510 = 67109890;
          *(_DWORD *)&v510[4] = v435;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 375;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (c.get() != nullptr)";
          _os_log_error_impl(&dword_1B57BA000, v431, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v436 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v491);
        std::logic_error::logic_error(&v499, &v491);
        v437 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 375;
        std::vector<void *>::vector(&v497);
        v438 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v438);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v436[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v436, (const std::logic_error *)v510);
        v436->__vftable = (std::logic_error_vtbl *)(v437 + 16);
        v436[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v439 = *(_QWORD *)v511;
        v436[1].__imp_.__imp_ = *(const char **)v511;
        if (v439)
          (*(void (**)(uint64_t))(*(_QWORD *)v439 + 24))(v439);
        v440 = *(std::logic_error *)&v511[8];
        LODWORD(v436[3].__vftable) = v512;
        v436[2] = v440;
        v436->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v436[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v436[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v189 = *(_QWORD *)(v187 + 304);
      v188 = *(std::__shared_weak_count **)(v187 + 312);
      if (v188)
      {
        v190 = (unint64_t *)&v188->__shared_owners_;
        do
          v191 = __ldxr(v190);
        while (__stxr(v191 + 1, v190));
        v192 = (unint64_t *)&v188->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      if (!v189)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v151);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v441 = *(std::__shared_weak_count **)&v510[8];
        v442 = **(NSObject ***)v510;
        if (*(_QWORD *)&v510[8])
        {
          v443 = (unint64_t *)(*(_QWORD *)&v510[8] + 8);
          do
            v444 = __ldaxr(v443);
          while (__stlxr(v444 - 1, v443));
          if (!v444)
          {
            ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
            std::__shared_weak_count::__release_weak(v441);
          }
        }
        if (os_log_type_enabled(v442, OS_LOG_TYPE_ERROR))
        {
          v445 = pthread_self();
          v446 = pthread_mach_thread_np(v445);
          *(_DWORD *)v510 = 67109890;
          *(_DWORD *)&v510[4] = v446;
          *(_WORD *)&v510[8] = 2080;
          *(_QWORD *)&v510[10] = "Manifest_Task.cpp";
          *(_WORD *)&v510[18] = 1024;
          *(_DWORD *)&v510[20] = 376;
          *(_WORD *)v511 = 2080;
          *(_QWORD *)&v511[2] = "not (c->get_buffer() != nullptr)";
          _os_log_error_impl(&dword_1B57BA000, v442, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Buffer has not been allocated in begin_processing", v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v504);
        v447 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Buffer has not been allocated in begin_processing", (uint64_t)&v491);
        std::logic_error::logic_error(&v499, &v491);
        v448 = MEMORY[0x1E0DE5018];
        v499.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v500, &v499);
        v501 = 0;
        *(_QWORD *)&v500[24] = 0;
        v502 = 0;
        v503 = -1;
        *(_QWORD *)v500 = off_1E69A1208;
        *(_QWORD *)&v500[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v500);
        *(_QWORD *)&v511[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(_QWORD *)&v511[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v512 = 376;
        std::vector<void *>::vector(&v497);
        v449 = backtrace((void **)&v497.~logic_error, (unint64_t)(v497.__imp_.__imp_ - (const char *)v497.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v497, v449);
        *(std::logic_error *)&v494.__r_.__value_.__r.__words[1] = v497;
        v494.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v495 = v498;
        v497.__vftable = 0;
        v497.__imp_.__imp_ = 0;
        v498 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v494);
        v447[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v447, (const std::logic_error *)v510);
        v447->__vftable = (std::logic_error_vtbl *)(v448 + 16);
        v447[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v450 = *(_QWORD *)v511;
        v447[1].__imp_.__imp_ = *(const char **)v511;
        if (v450)
          (*(void (**)(uint64_t))(*(_QWORD *)v450 + 24))(v450);
        v451 = *(std::logic_error *)&v511[8];
        LODWORD(v447[3].__vftable) = v512;
        v447[2] = v451;
        v447->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v447[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v447[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(a1);
      (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 104) + 32))(*(_QWORD *)(a1 + 104), a2, v144);
      v195 = *(_QWORD *)(*v144 + 128);
      v196 = *(std::__shared_weak_count **)(*v144 + 136);
      if (v196)
      {
        v197 = (unint64_t *)&v196->__shared_owners_;
        do
          v198 = __ldxr(v197);
        while (__stxr(v198 + 1, v197));
        do
          v199 = __ldxr(v197);
        while (__stxr(v199 + 1, v197));
        *(_QWORD *)&v200 = v195;
        *((_QWORD *)&v200 + 1) = v196;
        *(_DWORD *)v510 = 2;
        *(_QWORD *)&v510[8] = v194;
        *(_QWORD *)&v510[16] = 0;
        *(_OWORD *)v511 = v200;
        do
          v201 = __ldaxr(v197);
        while (__stlxr(v201 - 1, v197));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      else
      {
        *(_DWORD *)v510 = 2;
        *(_QWORD *)&v510[8] = v194;
        *(_QWORD *)&v510[16] = 0;
        *(_OWORD *)v511 = v195;
      }
      v202 = *v144;
      *(_OWORD *)v500 = *(_OWORD *)(*v144 + 208);
      v203 = *(_QWORD *)(v202 + 232);
      *(_QWORD *)&v500[16] = *(_QWORD *)(v202 + 224);
      *(_QWORD *)&v500[24] = v203;
      v204 = *(std::__shared_weak_count **)(v202 + 240);
      v501 = v204;
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldxr(v205);
        while (__stxr(v206 + 1, v205));
        v208 = *(_QWORD *)(*v144 + 232);
        v207 = *(std::__shared_weak_count **)(*v144 + 240);
        v491 = *(std::string *)(*v144 + 208);
        v492 = v208;
        v493 = v207;
        if (v207)
        {
          v209 = (unint64_t *)&v207->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
        }
      }
      else
      {
        v491 = *(std::string *)(v202 + 208);
        v492 = v203;
        v493 = 0;
      }
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v494, (uint64_t)&v491, (uint64_t)v510);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)v500, (const AMCP::DAL::DAL_Time *)&v494);
      v211 = v496;
      if (v496)
      {
        v212 = (unint64_t *)&v496->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v214 = v493;
      if (v493)
      {
        v215 = (unint64_t *)&v493->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v217 = v501;
      if (v501)
      {
        v218 = (unint64_t *)&v501->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      v220 = *(std::__shared_weak_count **)&v511[8];
      if (*(_QWORD *)&v511[8])
      {
        v221 = (unint64_t *)(*(_QWORD *)&v511[8] + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = *(_QWORD *)(*v144 + 312);
      v494.__r_.__value_.__r.__words[0] = *(_QWORD *)(*v144 + 304);
      v494.__r_.__value_.__l.__size_ = v223;
      if (v223)
      {
        v224 = (unint64_t *)(v223 + 8);
        do
          v225 = __ldxr(v224);
        while (__stxr(v225 + 1, v224));
      }
      v226 = v141[3];
      if (v226)
      {
        v228 = *(uint64_t **)(*v144 + 304);
        v227 = *(std::__shared_weak_count **)(*v144 + 312);
        if (!v227)
        {
          if (v226 == v228)
            goto LABEL_302;
LABEL_294:
          v235 = (std::string::size_type)v141[3];
          v234 = (std::string::size_type)v141[4];
          if (v234)
          {
            v236 = (unint64_t *)(v234 + 8);
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 1, v236));
          }
          v238 = (std::__shared_weak_count *)v494.__r_.__value_.__l.__size_;
          v494.__r_.__value_.__r.__words[0] = v235;
          v494.__r_.__value_.__l.__size_ = v234;
          if (v238)
          {
            v239 = (unint64_t *)&v238->__shared_owners_;
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
            if (!v240)
            {
              ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
              std::__shared_weak_count::__release_weak(v238);
            }
          }
          goto LABEL_302;
        }
        v229 = (unint64_t *)&v227->__shared_owners_;
        do
          v230 = __ldxr(v229);
        while (__stxr(v230 + 1, v229));
        v231 = v141[3];
        v232 = (unint64_t *)&v227->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
        if (v231 != v228)
          goto LABEL_294;
      }
LABEL_302:
      v241 = *v144;
      v242 = *(_QWORD *)(*v144 + 304);
      v243 = *(std::__shared_weak_count **)(*v144 + 312);
      if (v243)
      {
        v244 = (unint64_t *)&v243->__shared_owners_;
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
        if (v494.__r_.__value_.__r.__words[0] == v242)
        {
          v247 = *(_DWORD *)(v241 + 152);
          do
            v248 = __ldaxr(v244);
          while (__stlxr(v248 - 1, v244));
          if (v248)
          {
            if (v247)
              goto LABEL_323;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
            if (v247)
              goto LABEL_323;
          }
        }
        else
        {
          do
            v246 = __ldaxr(v244);
          while (__stlxr(v246 - 1, v244));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
      }
      else if (v494.__r_.__value_.__r.__words[0] == v242 && *(_DWORD *)(v241 + 152))
      {
        goto LABEL_323;
      }
      if (*(char *)(v241 + 31) < 0)
        std::string::__init_copy_ctor_external((std::string *)v500, *(const std::string::value_type **)(v241 + 8), *(_QWORD *)(v241 + 16));
      else
        *(std::string *)v500 = *(std::string *)(v241 + 8);
      *(_QWORD *)&v500[24] = *(_QWORD *)(v241 + 32);
      LODWORD(v501) = *(_DWORD *)(v241 + 40);
      *(_DWORD *)v510 = 0;
      *(_OWORD *)&v510[8] = *(_OWORD *)v500;
      *(_QWORD *)v511 = *(_QWORD *)&v500[16];
      memset(v500, 0, 24);
      *(_QWORD *)&v511[8] = *(_QWORD *)&v500[24];
      *(_DWORD *)&v511[16] = (_DWORD)v501;
      (*(void (**)(std::string::size_type, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)v494.__r_.__value_.__l.__data_
                                                                               + 96))(v494.__r_.__value_.__r.__words[0], v510, buf, 0);
      if ((v511[7] & 0x80000000) != 0)
        operator delete(*(void **)&v510[8]);
LABEL_323:
      v249 = v494.__r_.__value_.__r.__words[0];
      v483 = *(std::logic_error *)buf;
      v484 = *(void **)&buf[16];
      v485 = *(_QWORD *)v506;
      v486 = *(std::__shared_weak_count **)&v506[8];
      if (*(_QWORD *)&v506[8])
      {
        v250 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
        do
          v251 = __ldxr(v250);
        while (__stxr(v251 + 1, v250));
      }
      v487 = *(_OWORD *)&v506[16];
      v488 = v507;
      v489 = v508;
      v490 = v509;
      if (v509)
      {
        v252 = (unint64_t *)&v509->__shared_owners_;
        do
          v253 = __ldxr(v252);
        while (__stxr(v253 + 1, v252));
      }
      (*(void (**)(uint64_t *__return_ptr, std::string::size_type, std::logic_error *))(*(_QWORD *)v249 + 160))(&v467, v249, &v483);
      v254 = v490;
      if (v490)
      {
        v255 = (unint64_t *)&v490->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = v486;
      if (v486)
      {
        v258 = (unint64_t *)&v486->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      v260 = (std::__shared_weak_count *)v494.__r_.__value_.__l.__size_;
      if (v494.__r_.__value_.__l.__size_)
      {
        v261 = (unint64_t *)(v494.__r_.__value_.__l.__size_ + 8);
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
          std::__shared_weak_count::__release_weak(v260);
        }
      }
      v263 = v509;
      if (v509)
      {
        v264 = (unint64_t *)&v509->__shared_owners_;
        do
          v265 = __ldaxr(v264);
        while (__stlxr(v265 - 1, v264));
        if (!v265)
        {
          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
      v266 = *(std::__shared_weak_count **)&v506[8];
      if (*(_QWORD *)&v506[8])
      {
        v267 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
          std::__shared_weak_count::__release_weak(v266);
        }
      }
      if (round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v479)) == 0.0
        || (v269 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v476),
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v479),
            v270 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v467),
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v471),
            round(v270) < round(v269)))
      {
        *(_DWORD *)v476 = v467;
        *(_OWORD *)&v476[8] = v468;
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v477, v469, (uint64_t)v470);
        *(_DWORD *)v479 = v471;
        *(_OWORD *)&v479[8] = v472;
        v142 = (AMCP::Log::Scope_Registry *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v480, v473, (uint64_t)v474);
        v482 = v475;
      }
      v271 = v474;
      if (v474)
      {
        v272 = (unint64_t *)&v474->__shared_owners_;
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 - 1, v272));
        if (!v273)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
      v274 = v470;
      if (v470)
      {
        v275 = (unint64_t *)&v470->__shared_owners_;
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
      v144 += 2;
      v143 = v466;
    }
    v277 = v461[1];
    v278 = v461[2];
    if (v277 >= v278)
    {
      v288 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v277 - *v461) >> 3);
      v289 = v288 + 1;
      if ((unint64_t)(v288 + 1) > 0x2E8BA2E8BA2E8BALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v290 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v278 - *v461) >> 3);
      if (2 * v290 > v289)
        v289 = 2 * v290;
      if (v290 >= 0x1745D1745D1745DLL)
        v291 = 0x2E8BA2E8BA2E8BALL;
      else
        v291 = v289;
      v470 = (std::__shared_weak_count *)v459;
      if (v291)
        v291 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v291);
      else
        v292 = 0;
      v293 = (char *)(v291 + 88 * v288);
      v467 = v291;
      *(_QWORD *)&v468 = v293;
      v469 = v291 + 88 * v292;
      v294 = *(_OWORD *)v476;
      *((_QWORD *)v293 + 2) = *(_QWORD *)&v476[16];
      *(_OWORD *)v293 = v294;
      *((_QWORD *)v293 + 3) = v477;
      v295 = v478;
      *((_QWORD *)v293 + 4) = v478;
      if (v295)
      {
        v296 = (unint64_t *)(v295 + 1);
        do
          v297 = __ldxr(v296);
        while (__stxr(v297 + 1, v296));
      }
      v298 = *(_OWORD *)v479;
      *((_QWORD *)v293 + 7) = *(_QWORD *)&v479[16];
      *(_OWORD *)(v293 + 40) = v298;
      *((_QWORD *)v293 + 8) = v480;
      v299 = v481;
      *((_QWORD *)v293 + 9) = v481;
      if (v299)
      {
        v300 = (unint64_t *)&v299->__shared_owners_;
        do
          v301 = __ldxr(v300);
        while (__stxr(v301 + 1, v300));
      }
      *((_QWORD *)v293 + 10) = v482;
      *((_QWORD *)&v468 + 1) = v293 + 88;
      std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(v461, &v467);
      v287 = v461[1];
      std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer((uint64_t)&v467);
    }
    else
    {
      v279 = *(_OWORD *)v476;
      *(_QWORD *)(v277 + 16) = *(_QWORD *)&v476[16];
      *(_OWORD *)v277 = v279;
      *(_QWORD *)(v277 + 24) = v477;
      v280 = v478;
      *(_QWORD *)(v277 + 32) = v478;
      if (v280)
      {
        v281 = (unint64_t *)(v280 + 1);
        do
          v282 = __ldxr(v281);
        while (__stxr(v282 + 1, v281));
      }
      v283 = *(_OWORD *)v479;
      *(_QWORD *)(v277 + 56) = *(_QWORD *)&v479[16];
      *(_OWORD *)(v277 + 40) = v283;
      *(_QWORD *)(v277 + 64) = v480;
      v284 = v481;
      *(_QWORD *)(v277 + 72) = v481;
      if (v284)
      {
        v285 = (unint64_t *)&v284->__shared_owners_;
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
      }
      *(_QWORD *)(v277 + 80) = v482;
      v287 = v277 + 88;
      v461[1] = v277 + 88;
    }
    v461[1] = v287;
    v302 = v481;
    if (v481)
    {
      v303 = (unint64_t *)&v481->__shared_owners_;
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
    v305 = (std::__shared_weak_count *)v478;
    if (v478)
    {
      v306 = (unint64_t *)(v478 + 1);
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }
    v141 += 5;
  }
}

void sub_1B58C0BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;

  if (a38)
  {
    p_shared_owners = (unint64_t *)&a38->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))a38->__on_zero_shared)(a38);
      std::__shared_weak_count::__release_weak(a38);
    }
  }
  if (a33)
  {
    v52 = (unint64_t *)&a33->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a33->__on_zero_shared)(a33);
      std::__shared_weak_count::__release_weak(a33);
    }
  }
  if (a49)
  {
    v54 = (unint64_t *)&a49->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a49->__on_zero_shared)(a49);
      std::__shared_weak_count::__release_weak(a49);
    }
  }
  if (a44)
  {
    v56 = (unint64_t *)&a44->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))a44->__on_zero_shared)(a44);
      std::__shared_weak_count::__release_weak(a44);
    }
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::create_null_readable_range(AMCP::DAL *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[32];
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;

  v11 = 0;
  v12 = 0;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v13, &v11, 0.0, 0.0);
  AMCP::DAL::Readable_Range::Readable_Range((uint64_t)this, (uint64_t)v13, 0);
  v2 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B58C1990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::create_null_writable_range(AMCP::DAL *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[32];
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;

  v11 = 0;
  v12 = 0;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v13, &v11, 0.0, 0.0);
  AMCP::DAL::Writable_Range::Writable_Range((uint64_t)this, (uint64_t)v13, 0);
  v2 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B58C1AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  void (**v21)(AMCP::Graph::Input_Path_Calculator *__hidden);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  std::string v28;
  std::logic_error v29;
  std::logic_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BYTE v43[14];
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 104))
  {
    v1 = this;
    v2 = *(uint64_t **)this;
    v3 = *(uint64_t **)(this + 8);
    if (*(uint64_t **)this != v3)
    {
      v4 = 0;
      v5 = *(uint64_t **)this;
      do
      {
        v7 = *v5;
        v6 = v5[1];
        v5 += 5;
        v4 += (v6 - v7) >> 4;
      }
      while (v5 != v3);
      if (v4)
      {
        while (2)
        {
          for (i = *v2; i != v2[1]; i += 16)
          {
            if (*(_DWORD *)(*(_QWORD *)i + 156) != 1)
            {
              v9 = 0;
              goto LABEL_14;
            }
          }
          v2 += 5;
          if (v2 != v3)
            continue;
          break;
        }
      }
    }
    v9 = 1;
LABEL_14:
    v10 = *(uint64_t **)(this + 24);
    v11 = *(uint64_t **)(this + 32);
    if (v10 == v11)
      goto LABEL_27;
    v12 = 0;
    v13 = *(uint64_t **)(this + 24);
    do
    {
      v15 = *v13;
      v14 = v13[1];
      v13 += 5;
      v12 += (v14 - v15) >> 4;
    }
    while (v13 != v11);
    if (!v12)
    {
LABEL_27:
      if (!v9)
      {
        this = operator new();
        v21 = &off_1E699F318;
        goto LABEL_32;
      }
      if (!*(_DWORD *)(this + 112))
      {
        this = operator new();
        v21 = &off_1E699F370;
        goto LABEL_32;
      }
    }
    else
    {
      do
      {
        for (j = *v10; j != v10[1]; j += 16)
        {
          if (*(_DWORD *)(*(_QWORD *)j + 156) != 1)
            goto LABEL_27;
        }
        v10 += 5;
      }
      while (v10 != v11);
      if ((v9 & 1) == 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v17 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = pthread_self();
          v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v19;
          v38 = 2080;
          v39 = "Manifest_Task.cpp";
          v40 = 1024;
          v41 = 585;
          v42 = 2080;
          *(_QWORD *)v43 = "not (are_sources_aligned_for_input and not are_destinations_are_aligned_for_input)";
          _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v28);
        std::logic_error::logic_error(&v29, &v28);
        v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v30, &v29);
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = -1;
        v30.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v31 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
        *(_QWORD *)&v43[6] = "void AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator()";
        v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v45 = 585;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
        v26 = v23;
        v27 = v24;
        v23 = 0uLL;
        v24 = 0;
        v25 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v25);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
    }
    this = operator new();
    v21 = &off_1E699F2C0;
LABEL_32:
    *(_QWORD *)this = v21;
    *(_QWORD *)(this + 8) = v1;
    v22 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 104) = this;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return this;
}

void sub_1B58C1E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x2E8BA2E8BA2E8BBLL)
  {
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 88;
      v6 = *(_OWORD *)(v3 - 88);
      *(_QWORD *)(v4 - 72) = *(_QWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v6;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      v7 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      v4 -= 88;
      v3 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 24);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3));
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x2E8BA2E8BA2E8BBLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

uint64_t AMCP::DAL::Writable_Range::Writable_Range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  AMCP::DAL::DAL_Timed_Segment::DAL_Timed_Segment(a1, &v11, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1B58C222C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 24);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3));
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x2E8BA2E8BA2E8BBLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

uint64_t AMCP::DAL::Readable_Range::Readable_Range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  AMCP::DAL::DAL_Timed_Segment::DAL_Timed_Segment(a1, &v11, a3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  AMCP::DAL::DAL_Timed_Segment::DAL_Timed_Segment(a1, &v11, *(_QWORD *)(a3 + 80));
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1B58C240C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Graph::Manifest_Task::update_connection_write_positions(AMCP::Log::Scope_Registry *result, int a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **nth_connection_list;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  double v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  std::logic_error_vtbl *v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  AMCP::Log::Scope_Registry *v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  double sample_time;
  double v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  AMCP::Log::Scope_Registry *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::logic_error **v80;
  std::logic_error **v81;
  std::logic_error *v82;
  const char *imp;
  std::logic_error_vtbl *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  NSObject *v103;
  unint64_t *v104;
  unint64_t v105;
  _opaque_pthread_t *v106;
  mach_port_t v107;
  void *v108;
  int v109;
  std::__shared_weak_count *v110;
  NSObject *v111;
  unint64_t *v112;
  unint64_t v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  void *v116;
  int v117;
  std::__shared_weak_count *v118;
  NSObject *v119;
  unint64_t *v120;
  unint64_t v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  void *v124;
  int v125;
  std::__shared_weak_count *v126;
  NSObject *v127;
  unint64_t *v128;
  unint64_t v129;
  _opaque_pthread_t *v130;
  mach_port_t v131;
  void *v132;
  int v133;
  std::__shared_weak_count *v134;
  NSObject *v135;
  unint64_t *v136;
  unint64_t v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  void *v140;
  int v141;
  std::__shared_weak_count *v142;
  NSObject *v143;
  unint64_t *v144;
  unint64_t v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  void *v148;
  int v149;
  std::__shared_weak_count *v150;
  NSObject *v151;
  unint64_t *v152;
  unint64_t v153;
  _opaque_pthread_t *v154;
  mach_port_t v155;
  void *v156;
  int v157;
  NSObject *v158;
  _opaque_pthread_t *v159;
  mach_port_t v160;
  void *exception;
  NSObject *v162;
  _opaque_pthread_t *v163;
  mach_port_t v164;
  void *v165;
  AMCP::Log::Scope_Registry *v166;
  uint64_t *v167;
  std::__shared_weak_count *v169;
  std::string v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  std::logic_error v175;
  uint64_t v176;
  std::logic_error v177;
  char v178;
  __int128 v179;
  uint64_t (**v180)();
  std::string v181;
  std::__shared_weak_count *v182;
  std::string v183;
  std::logic_error v184;
  std::logic_error_vtbl *v185;
  const char *v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  int v189;
  uint8_t buf[8];
  __int128 v191;
  __int128 v192;
  const char *v193;
  int v194;
  std::__shared_weak_count *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v4 = a3[1];
  if (*(_QWORD *)(*((_QWORD *)result + 6) + 24))
  {
    if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                  * ((uint64_t)(*((_QWORD *)result + 1) - *(_QWORD *)result) >> 3))
    {
      AMCP::Log::Scope_Registry::get(result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v158 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
      {
        v159 = pthread_self();
        v160 = pthread_mach_thread_np(v159);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v160;
        LOWORD(v191) = 2080;
        *(_QWORD *)((char *)&v191 + 2) = "Manifest_Task.cpp";
        WORD5(v191) = 1024;
        HIDWORD(v191) = 203;
        LOWORD(v192) = 2080;
        *(_QWORD *)((char *)&v192 + 2) = "not (not m_handlers->m_Node_Process_Handler or incoming_connections.size() == g"
                                         "et_number_of_connection_lists(Connection_Direction::Source))";
        _os_log_error_impl(&dword_1B57BA000, v158, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v172);
      std::logic_error::logic_error(&v175, &v172);
      v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v184, &v175);
      v186 = 0;
      v187 = 0;
      v188 = 0;
      v189 = -1;
      v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
      *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Task::update_connection_write_positions(Object_ID, const rt_sa"
                               "fe_vector<DAL::Readable_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
      v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
      v194 = 203;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v183.__r_.__value_.__l.__data_);
      v180 = off_1E69A20A0;
      v181 = v183;
      memset(&v183, 0, sizeof(v183));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                               * ((uint64_t)(*((_QWORD *)result + 4)
                                                                          - *((_QWORD *)result + 3)) >> 3))
    {
      AMCP::Log::Scope_Registry::get(result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v162 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
      {
        v163 = pthread_self();
        v164 = pthread_mach_thread_np(v163);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v164;
        LOWORD(v191) = 2080;
        *(_QWORD *)((char *)&v191 + 2) = "Manifest_Task.cpp";
        WORD5(v191) = 1024;
        HIDWORD(v191) = 204;
        LOWORD(v192) = 2080;
        *(_QWORD *)((char *)&v192 + 2) = "not (not m_handlers->m_Node_Process_Handler or outgoing_connections.size() == g"
                                         "et_number_of_connection_lists(Connection_Direction::Destination))";
        _os_log_error_impl(&dword_1B57BA000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
      v165 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v172);
      std::logic_error::logic_error(&v175, &v172);
      v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v184, &v175);
      v186 = 0;
      v187 = 0;
      v188 = 0;
      v189 = -1;
      v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
      *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Task::update_connection_write_positions(Object_ID, const rt_sa"
                               "fe_vector<DAL::Readable_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
      v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
      v194 = 204;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v183.__r_.__value_.__l.__data_);
      v180 = off_1E69A20A0;
      v181 = v183;
      memset(&v183, 0, sizeof(v183));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v165, (uint64_t)buf);
    }
  }
  if (v4 != v5)
  {
    v6 = 0;
    v166 = result;
    do
    {
      nth_connection_list = (uint64_t **)AMCP::Graph::Manifest_Task::get_nth_connection_list(result, v6, 0);
      v9 = *nth_connection_list;
      v8 = nth_connection_list[1];
      v167 = v8;
      while (v9 != v8)
      {
        v10 = (uint64_t *)*v9;
        v11 = (_QWORD *)(*a3 + 88 * v6);
        v12 = *(_DWORD *)(*v9 + 144);
        v14 = v11[3];
        v13 = (std::__shared_weak_count *)v11[4];
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        v19 = (*(double (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14);
        v21 = v10[24];
        v20 = (std::__shared_weak_count *)v10[25];
        *(_QWORD *)buf = v21;
        *(_QWORD *)&v191 = v20;
        if (v20)
        {
          v22 = (unint64_t *)&v20->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        if (!v21)
          goto LABEL_32;
        v169 = v13;
        v24 = v6;
        v25 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v26 = v25[23];
        if ((v26 & 0x80u) == 0)
          v27 = v25[23];
        else
          v27 = *((_QWORD *)v25 + 1);
        v28 = *(unsigned __int8 *)(v17 + 23);
        v29 = (char)v28;
        if ((v28 & 0x80u) != 0)
          v28 = *(_QWORD *)(v17 + 8);
        if (v27 == v28)
        {
          if (v29 >= 0)
            v18 = (unsigned __int8 *)v17;
          else
            v18 = *(unsigned __int8 **)v17;
          if ((v26 & 0x80) != 0)
          {
            v17 = memcmp(*(const void **)v25, v18, *((_QWORD *)v25 + 1));
            LOBYTE(v21) = (_DWORD)v17 == 0;
            goto LABEL_31;
          }
          if (!v25[23])
          {
LABEL_28:
            LOBYTE(v21) = 1;
            v6 = v24;
            v13 = v169;
            goto LABEL_43;
          }
          while (*v25 == *v18)
          {
            ++v25;
            ++v18;
            if (!--v26)
              goto LABEL_28;
          }
        }
        LOBYTE(v21) = 0;
LABEL_31:
        v6 = v24;
        v13 = v169;
LABEL_32:
        if ((v21 & 1) == 0 && !v12)
        {
          v30 = (std::logic_error_vtbl *)v10[24];
          v31 = (char *)v10[25];
          v184.__vftable = v30;
          v184.__imp_.__imp_ = v31;
          if (v31)
          {
            v32 = (unint64_t *)(v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          LOBYTE(v21) = v19 == (*((double (**)(std::logic_error_vtbl *))v30->~logic_error + 19))(v30);
          if (v31)
          {
            v34 = (unint64_t *)(v31 + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              (*(void (**)(char *))(*(_QWORD *)v31 + 16))(v31);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
            }
          }
          v20 = (std::__shared_weak_count *)v191;
        }
LABEL_43:
        if (v20)
        {
          v36 = (unint64_t *)&v20->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v18);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if ((v21 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v102 = (std::__shared_weak_count *)v191;
          v103 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v104 = (unint64_t *)(v191 + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            v106 = pthread_self();
            v107 = pthread_mach_thread_np(v106);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v107;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 319;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (is_same_timebase(read_position_clock, m_consumer_read_position.get_clo"
                                             "ck()) || (drift_correction_disabled && read_position_sr == m_consumer_read_"
                                             "position.get_clock()->get_sample_rate()))";
            _os_log_error_impl(&dword_1B57BA000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
          v108 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v172);
          std::logic_error::logic_error(&v175, &v172);
          v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v175);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 319;
          std::vector<void *>::vector(&v183);
          v109 = backtrace((void **)v183.__r_.__value_.__l.__data_, (v183.__r_.__value_.__l.__size_ - v183.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v183.__r_.__value_.__l.__data_, v109);
          v180 = off_1E69A20A0;
          v181 = v183;
          memset(&v183, 0, sizeof(v183));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v108, (uint64_t)buf);
        }
        v38 = v10[16];
        if (v38)
        {
          v39 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14, v18);
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10[16] + 16))(v10[16]);
          v40 = v39[23];
          if ((v40 & 0x80u) == 0)
            v41 = v39[23];
          else
            v41 = *((_QWORD *)v39 + 1);
          v42 = *(unsigned __int8 *)(v17 + 23);
          v43 = (char)v42;
          if ((v42 & 0x80u) != 0)
            v42 = *(_QWORD *)(v17 + 8);
          if (v41 == v42)
          {
            if (v43 >= 0)
              v18 = (unsigned __int8 *)v17;
            else
              v18 = *(unsigned __int8 **)v17;
            if ((v40 & 0x80) != 0)
            {
              v17 = memcmp(*(const void **)v39, v18, *((_QWORD *)v39 + 1));
              LOBYTE(v38) = (_DWORD)v17 == 0;
              if (!(_DWORD)v17)
                goto LABEL_69;
              goto LABEL_65;
            }
            if (!v39[23])
              goto LABEL_70;
            while (*v39 == *v18)
            {
              ++v39;
              ++v18;
              if (!--v40)
                goto LABEL_70;
            }
          }
          LOBYTE(v38) = 0;
        }
LABEL_65:
        if (!v12)
        {
          if (v19 != (*(double (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v10[16] + 152))(v10[16], v18))
            goto LABEL_197;
          goto LABEL_70;
        }
LABEL_69:
        if ((v38 & 1) == 0)
        {
LABEL_197:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v150 = (std::__shared_weak_count *)v191;
          v151 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v152 = (unint64_t *)(v191 + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
          {
            v154 = pthread_self();
            v155 = pthread_mach_thread_np(v154);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v155;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 321;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (is_same_timebase(read_position_clock, m_timebase) || (drift_correction"
                                             "_disabled && read_position_sr == m_timebase->get_sample_rate()))";
            _os_log_error_impl(&dword_1B57BA000, v151, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
          v156 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v172);
          std::logic_error::logic_error(&v175, &v172);
          v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v175);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 321;
          std::vector<void *>::vector(&v183);
          v157 = backtrace((void **)v183.__r_.__value_.__l.__data_, (v183.__r_.__value_.__l.__size_ - v183.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v183.__r_.__value_.__l.__data_, v157);
          v180 = off_1E69A20A0;
          v181 = v183;
          memset(&v183, 0, sizeof(v183));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v156, (uint64_t)buf);
        }
LABEL_70:
        v44 = (AMCP::Log::Scope_Registry *)v10[38];
        if (!v44)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v110 = (std::__shared_weak_count *)v191;
          v111 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v112 = (unint64_t *)(v191 + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            v114 = pthread_self();
            v115 = pthread_mach_thread_np(v114);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v115;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 322;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (m_buffer)";
            _os_log_error_impl(&dword_1B57BA000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
          v116 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v172);
          std::logic_error::logic_error(&v175, &v172);
          v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v175);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 322;
          std::vector<void *>::vector(&v183);
          v117 = backtrace((void **)v183.__r_.__value_.__l.__data_, (v183.__r_.__value_.__l.__size_ - v183.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v183.__r_.__value_.__l.__data_, v117);
          v180 = off_1E69A20A0;
          v181 = v183;
          memset(&v183, 0, sizeof(v183));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v116, (uint64_t)buf);
        }
        if (*((_DWORD *)v10 + 38) != 3)
        {
          (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v44 + 64))(buf);
          v44 = (AMCP::Log::Scope_Registry *)AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v10 + 26), (AMCP::DAL::DAL_Time *)buf);
          v45 = (int)v44;
          v46 = v195;
          if (v195)
          {
            v47 = (unint64_t *)&v195->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (v45)
          {
            AMCP::Log::Scope_Registry::get(v44);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v118 = (std::__shared_weak_count *)v191;
            v119 = **(NSObject ***)buf;
            if ((_QWORD)v191)
            {
              v120 = (unint64_t *)(v191 + 8);
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
            {
              v122 = pthread_self();
              v123 = pthread_mach_thread_np(v122);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v123;
              LOWORD(v191) = 2080;
              *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
              WORD5(v191) = 1024;
              HIDWORD(v191) = 325;
              LOWORD(v192) = 2080;
              *(_QWORD *)((char *)&v192 + 2) = "not (zeroed_reads or m_producer_write_position >= m_buffer->get_time_range().start())";
              _os_log_error_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
            v124 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v172);
            std::logic_error::logic_error(&v175, &v172);
            v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v184, &v175);
            v186 = 0;
            v187 = 0;
            v188 = 0;
            v189 = -1;
            v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
            *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
            v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
            v194 = 325;
            std::vector<void *>::vector(&v183);
            v125 = backtrace((void **)v183.__r_.__value_.__l.__data_, (v183.__r_.__value_.__l.__size_ - v183.__r_.__value_.__r.__words[0]) >> 3);
            std::vector<void *>::resize(&v183.__r_.__value_.__l.__data_, v125);
            v180 = off_1E69A20A0;
            v181 = v183;
            memset(&v183, 0, sizeof(v183));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v124, (uint64_t)buf);
          }
        }
        if (!v10[37])
        {
          AMCP::Log::Scope_Registry::get(v44);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v126 = (std::__shared_weak_count *)v191;
          v127 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v128 = (unint64_t *)(v191 + 8);
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
          {
            v130 = pthread_self();
            v131 = pthread_mach_thread_np(v130);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v131;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 326;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (is_processing())";
            _os_log_error_impl(&dword_1B57BA000, v127, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
          v132 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v172);
          std::logic_error::logic_error(&v175, &v172);
          v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v175);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 326;
          std::vector<void *>::vector(&v183);
          v133 = backtrace((void **)v183.__r_.__value_.__l.__data_, (v183.__r_.__value_.__l.__size_ - v183.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v183.__r_.__value_.__l.__data_, v133);
          v180 = off_1E69A20A0;
          v181 = v183;
          memset(&v183, 0, sizeof(v183));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v180);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v132, (uint64_t)buf);
        }
        if (v13)
        {
          v52 = (unint64_t *)&v13->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v11 + 5));
        v55 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v11);
        v56 = v10[25];
        *(_QWORD *)&v179 = v10[24];
        *((_QWORD *)&v179 + 1) = v56;
        if (v56)
        {
          v57 = (unint64_t *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        *(_DWORD *)buf = 2;
        *(double *)&v191 = sample_time - v55;
        *((_QWORD *)&v191 + 1) = 0;
        v192 = v179;
        v179 = 0uLL;
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v180, (uint64_t)(v10 + 21), (uint64_t)buf);
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (*((_QWORD *)&v179 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v179 + 1) + 16))(*((_QWORD *)&v179 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v179 + 1));
          }
        }
        v64 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v10 + 21), (AMCP::DAL::DAL_Time *)&v180);
        if (!v64)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v64);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v134 = (std::__shared_weak_count *)v191;
          v135 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v136 = (unint64_t *)(v191 + 8);
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            v138 = pthread_self();
            v139 = pthread_mach_thread_np(v138);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v139;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 330;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (new_target_position > m_consumer_read_position)";
            _os_log_error_impl(&dword_1B57BA000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
          v140 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v183);
          std::logic_error::logic_error(&v177, &v183);
          v177.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v177);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 330;
          std::vector<void *>::vector(&v175);
          v141 = backtrace((void **)&v175.~logic_error, (unint64_t)(v175.__imp_.__imp_ - (const char *)v175.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v175, v141);
          v172.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          *(std::logic_error *)&v172.__r_.__value_.__r.__words[1] = v175;
          v173 = v176;
          v175.__vftable = 0;
          v175.__imp_.__imp_ = 0;
          v176 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v172);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v140, (uint64_t)buf);
        }
        v65 = v10[41];
        if (v65)
        {
          v66 = *v10;
          vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21)));
          vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v180));
          AMCP::Graph::Manifest_Log::add_message(v65, 4, "Manifest_Buffer(%ld), prev position: %lld, update_read_position: %lld", v67, v68, v69, v70, v71, v66);
        }
        *((_DWORD *)v10 + 42) = (_DWORD)v180;
        *((_OWORD *)v10 + 11) = *(_OWORD *)&v181.__r_.__value_.__l.__data_;
        std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v10 + 24, v181.__r_.__value_.__r.__words[2], (uint64_t)v182);
        v72 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21));
        if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21)) != (double)(uint64_t)floor(v72))
        {
          AMCP::Log::Scope_Registry::get(v73);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v142 = (std::__shared_weak_count *)v191;
          v143 = **(NSObject ***)buf;
          if ((_QWORD)v191)
          {
            v144 = (unint64_t *)(v191 + 8);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
          {
            v146 = pthread_self();
            v147 = pthread_mach_thread_np(v146);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v147;
            LOWORD(v191) = 2080;
            *(_QWORD *)((char *)&v191 + 2) = "Manifest_Buffer.cpp";
            WORD5(v191) = 1024;
            HIDWORD(v191) = 341;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "not (m_consumer_read_position.get_sample_time().floor().get() == m_consumer"
                                             "_read_position.get_sample_time().get_double())";
            _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
          v148 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v183);
          std::logic_error::logic_error(&v177, &v183);
          v177.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v184, &v177);
          v186 = 0;
          v187 = 0;
          v188 = 0;
          v189 = -1;
          v184.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v185 = (std::logic_error_vtbl *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v184);
          *((_QWORD *)&v192 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          v194 = 341;
          std::vector<void *>::vector(&v175);
          v149 = backtrace((void **)&v175.~logic_error, (unint64_t)(v175.__imp_.__imp_ - (const char *)v175.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v175, v149);
          v172.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          *(std::logic_error *)&v172.__r_.__value_.__r.__words[1] = v175;
          v173 = v176;
          v175.__vftable = 0;
          v175.__imp_.__imp_ = 0;
          v176 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v172);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v148, (uint64_t)buf);
        }
        v74 = v182;
        if (v182)
        {
          v75 = (unint64_t *)&v182->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v9 += 2;
        v8 = v167;
      }
      ++v6;
      result = v166;
    }
    while (v6 < 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  }
  v77 = *((_QWORD *)result + 3);
  v78 = *((_QWORD *)result + 4);
  if (v77 != v78)
  {
    v79 = 0;
    do
    {
      v80 = *(std::logic_error ***)v77;
      v81 = *(std::logic_error ***)(v77 + 8);
      if (*(std::logic_error ***)v77 != v81)
      {
        do
        {
          v82 = *v80;
          v184 = (*v80)[13];
          imp = v82[14].__imp_.__imp_;
          v185 = v82[14].__vftable;
          v186 = imp;
          v84 = v82[15].__vftable;
          v187 = (std::__shared_weak_count *)v84;
          if (v84)
          {
            v85 = (unint64_t *)&v84->~logic_error_0;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          AMCP::DAL::DAL_Time::operator-((uint64_t)&v172, (AMCP::DAL::DAL_Time *)(*a4 + 88 * v79 + 40), (AMCP::DAL::DAL_Time *)(*a4 + 88 * v79));
          boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v180, (uint64_t)&v184, (uint64_t)&v172);
          AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v184, (const AMCP::DAL::DAL_Time *)&v180);
          v87 = v182;
          if (v182)
          {
            v88 = (unint64_t *)&v182->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v90 = v174;
          if (v174)
          {
            v91 = (unint64_t *)&v174->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position((uint64_t)*v80, a2, (uint64_t *)(v77 + 24), buf);
          v93 = v195;
          if (v195)
          {
            v94 = (unint64_t *)&v195->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v96 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v97 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v99 = v187;
          if (v187)
          {
            v100 = (unint64_t *)&v187->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          v80 += 2;
        }
        while (v80 != v81);
      }
      result = *(AMCP::Log::Scope_Registry **)(v77 + 24);
      if (result)
        result = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)result + 88))(result);
      ++v79;
      v77 += 40;
    }
    while (v77 != v78);
  }
  return result;
}

void sub_1B58C3E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v58;

  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *AMCP::Graph::Manifest_Task::process_once(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  _QWORD *i;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  double v21;
  AMCP::Log::Scope_Registry *v22;
  double v23;
  double sample_time;
  double v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v65;
  _opaque_pthread_t *v66;
  mach_port_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  void *exception;
  std::runtime_error *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79[3];
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  _BYTE v90[24];
  uint64_t v91;
  std::string v92;
  std::logic_error v93;
  _BYTE v94[24];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char v99;
  _BYTE buf[24];
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint8_t v105[8];
  __int128 v106;
  _BYTE v107[24];
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  AMCP::Log::Scope_Registry *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 88) != 3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v105, "com.apple.coreaudio", "AMCP");
    v70 = **(NSObject ***)v105;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v105);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      v71 = pthread_self();
      v72 = pthread_mach_thread_np(v71);
      *(_DWORD *)v105 = 67109890;
      *(_DWORD *)&v105[4] = v72;
      LOWORD(v106) = 2080;
      *(_QWORD *)((char *)&v106 + 2) = "Manifest_Task.cpp";
      WORD5(v106) = 1024;
      HIDWORD(v106) = 249;
      *(_WORD *)v107 = 2080;
      *(_QWORD *)&v107[2] = "not (is_processing())";
      _os_log_error_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s process_once() called before begin_processing()", v105, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v92);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"process_once() called before begin_processing()", (uint64_t)&v83);
    std::logic_error::logic_error((std::logic_error *)v90, &v83);
    *(_QWORD *)v90 = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)v90);
    v101 = 0uLL;
    *(_QWORD *)&v102 = 0;
    DWORD2(v102) = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *(_QWORD *)&buf[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v105, (uint64_t)buf);
    *(_QWORD *)&v107[8] = "void AMCP::Graph::Manifest_Task::process_once(Object_ID, const IO_Proc_Cycle_Info &, const Man"
                          "ifest_Execution_Context &, uint64_t, Process_Once_Option)";
    *(_QWORD *)&v107[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    LODWORD(v108) = 249;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v80);
    *(_OWORD *)&v94[8] = v80;
    *(_QWORD *)v94 = off_1E69A20A0;
    v95 = v81;
    v80 = 0uLL;
    v81 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v105, (uint64_t)v94);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v105);
  }
  v8 = a4;
  memset(v79, 0, sizeof(v79));
  v76 = 0;
  v77 = 0;
  v78 = 0;
  AMCP::Graph::Manifest_Task::set_up_connections(a1, a4, v79, (uint64_t *)&v76);
  if (a6 == 1)
  {
    v75 = v8;
    v13 = v76;
    for (i = v77; v13 != i; v13 += 11)
    {
      AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)buf, v13[10]);
      v14 = (std::__shared_weak_count *)v13[4];
      v86 = v13[3];
      v87 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v105, (uint64_t)buf, &v86, 4096.0);
      v17 = v87;
      if (v87)
      {
        v18 = (unint64_t *)&v87->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      LODWORD(v83.__r_.__value_.__l.__data_) = a2;
      *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0u;
      v84 = 0u;
      v85 = 0;
      AMCP::DAL::Fixed_Buffer::set_range((uint64_t)v105, v13);
      v20.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v80, (AMCP::DAL::DAL_Time *)(v13 + 5), (AMCP::DAL::DAL_Time *)v13);
      if ((v80 & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v80);
      v21 = *((double *)&v80 + 1);
      v22 = v111;
      if (v111)
        v22 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, __n128))(*(_QWORD *)v111 + 48))(v111, v20);
      else
        v23 = 0.0;
      if (round(v23) < round(v21))
      {
        AMCP::Log::Scope_Registry::get(v22);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v65 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          v66 = pthread_self();
          v67 = pthread_mach_thread_np(v66);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v67;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Fixed_Buffer.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 197;
          LOWORD(v101) = 2080;
          *(_QWORD *)((char *)&v101 + 2) = "not (number_of_frames <= get_capacity())";
          _os_log_error_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid size in change_size", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v99);
        v68 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid size in change_size", (uint64_t)&v92);
        std::logic_error::logic_error(&v93, &v92);
        v93.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v94, &v93);
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = -1;
        *(_QWORD *)v94 = off_1E69A1208;
        *(_QWORD *)&v94[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v94);
        *((_QWORD *)&v101 + 1) = "void AMCP::DAL::Fixed_Buffer::change_size(Sample_Time)";
        *(_QWORD *)&v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
        DWORD2(v102) = 197;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v88);
        *(_OWORD *)&v90[8] = v88;
        v69 = v89;
        v89 = 0;
        *(_QWORD *)v90 = off_1E69A20A0;
        v91 = v69;
        v88 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v90);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v68, (uint64_t)buf);
      }
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v106);
      AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v108);
      v25 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v106);
      AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v108);
      *(_OWORD *)v94 = *(_OWORD *)&v107[8];
      if (*(_QWORD *)&v107[16])
      {
        v26 = (unint64_t *)(*(_QWORD *)&v107[16] + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (uint64_t *)v94, sample_time, v21 + v25);
      v106 = *(_OWORD *)buf;
      *(_QWORD *)v107 = *(_QWORD *)&buf[16];
      v28 = v101;
      v101 = 0uLL;
      v29 = *(std::__shared_weak_count **)&v107[16];
      *(_OWORD *)&v107[8] = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v108 = v102;
      v109 = v103;
      v32 = v104;
      v104 = 0uLL;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      v110 = v32;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&v94[8];
      if (*(_QWORD *)&v94[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v94[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v82;
      if (v82)
      {
        v46 = (unint64_t *)&v82->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)v105, (uint64_t)buf);
      AMCP::DAL::Writable_Range::receive_data((uint64_t)v13, (uint64_t)&v83, (AMCP::DAL::DAL_Time *)buf);
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (SBYTE7(v84) < 0)
        operator delete((void *)v83.__r_.__value_.__l.__size_);
      *(_QWORD *)v105 = &off_1E699F3C8;
      v54 = v112;
      if (v112)
      {
        v55 = (unint64_t *)&v112->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)&v107[16];
      if (*(_QWORD *)&v107[16])
      {
        v61 = (unint64_t *)(*(_QWORD *)&v107[16] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
    v8 = v75;
  }
  else
  {
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
    if (v63)
    {
      *(_DWORD *)v105 = a2;
      (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t *, _QWORD **))(*(_QWORD *)v63 + 48))(v63, v105, a3, v79, &v76);
    }
  }
  if (!*(_BYTE *)(v8 + 113) && mach_absolute_time() >= a5)
  {
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, (const std::string *)(a1 + 64));
    v74->__vftable = (std::runtime_error_vtbl *)&off_1E6971818;
  }
  AMCP::Graph::Manifest_Task::update_connection_write_positions((AMCP::Log::Scope_Registry *)a1, a2, v79, &v76);
  *(_QWORD *)v105 = &v76;
  std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v105);
  *(_QWORD *)v105 = v79;
  return std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v105);
}

void sub_1B58C4ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  __cxa_free_exception(v25);
  a25 = &a13;
  std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a25);
  a25 = &a16;
  std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a25);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 24);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 64);
        v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 88);
      }
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](v5, 0x2E8BA2E8BA2E8BA3 * ((v6[2] - v5) >> 3));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 24);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 64);
        v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 88);
      }
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](v5, 0x2E8BA2E8BA2E8BA3 * ((v6[2] - v5) >> 3));
  }
  return result;
}

void AMCP::DAL::DAL_Timed_Segment::get_format(AMCP::DAL::DAL_Timed_Segment *this, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&v8, a2);
  v3 = v8;
  if (v8)
  {
    v4 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)this = *(_OWORD *)(v8 + 8);
    *((_OWORD *)this + 1) = v4;
    *((_QWORD *)this + 4) = *(_QWORD *)(v3 + 40);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void AMCP::DAL::Fixed_Buffer::~Fixed_Buffer(AMCP::DAL::Fixed_Buffer *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E699F3C8;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E699F3C8;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  JUMPOUT(0x1B5E50688);
}

double AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(AMCP::Graph::Manifest_Task *this, AMCP::Graph::Manifest_Task *a2)
{
  AMCP::Graph::Manifest_Task *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double sample_time;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (this == a2)
    return 4294967300.0;
  v3 = this;
  v4 = 4294967300.0;
  do
  {
    v5 = *(_QWORD *)v3;
    v6 = *((_QWORD *)v3 + 1);
    while (v5 != v6)
    {
      v7 = *(_QWORD **)v5;
      v30 = *(_OWORD *)(*(_QWORD *)v5 + 208);
      v8 = v7[29];
      v31 = v7[28];
      v32 = v8;
      v9 = (std::__shared_weak_count *)v7[30];
      v33 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v30);
      v13 = *(_QWORD **)v5;
      v26 = *(_OWORD *)(*(_QWORD *)v5 + 168);
      v14 = v13[24];
      v27 = v13[23];
      v28 = v14;
      v15 = (std::__shared_weak_count *)v13[25];
      v29 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v26);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v33;
      if (v33)
      {
        v23 = (unint64_t *)&v33->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (round(sample_time - v18) < round(v4))
        v4 = sample_time - v18;
      v5 += 16;
    }
    v3 = (AMCP::Graph::Manifest_Task *)((char *)v3 + 40);
  }
  while (v3 != a2);
  return v4;
}

void sub_1B58C5528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Packetized_File_Reader::~Packetized_File_Reader(AMCP::DAL::Packetized_File_Reader *this)
{
  AMCP::DAL::Packetized_File_Reader::~Packetized_File_Reader(this);
  JUMPOUT(0x1B5E50688);
}

{
  OpaqueExtAudioFile *v2;
  char *v3;

  *(_QWORD *)this = &off_1E6971840;
  v2 = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (v2)
  {
    ExtAudioFileDispose(v2);
    *((_QWORD *)this + 6) = 0;
  }
  v3 = (char *)this + 128;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v3);
  *(_QWORD *)this = off_1E698AE60;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

caulk::rt_safe_memory_resource *AMCP::DAL::Packetized_File_Reader::read_data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  caulk::rt_safe_memory_resource *v26;
  uint64_t (***v27)();
  uint64_t v28;
  UInt32 v29;
  AMCP::Log::Scope_Registry *v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  _BOOL8 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int16 *v45;
  size_t v46;
  int v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int16 v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  std::string::size_type v59;
  _QWORD *v60;
  size_t v61;
  _WORD *v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  NSObject *v104;
  _opaque_pthread_t *v105;
  mach_port_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  _opaque_pthread_t *v112;
  mach_port_t v113;
  NSObject *v114;
  _opaque_pthread_t *v115;
  mach_port_t v116;
  void *v117;
  NSObject *v118;
  _opaque_pthread_t *v119;
  mach_port_t v120;
  void *v121;
  NSObject *v122;
  _opaque_pthread_t *v123;
  mach_port_t v124;
  void *exception;
  _BYTE *v126;
  uint64_t v127;
  unsigned int v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  std::logic_error v132;
  uint64_t v133;
  std::string v134;
  uint64_t v135;
  std::logic_error v136;
  char v137;
  std::string v138;
  UInt32 ioNumberFrames;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[2];
  _BYTE v143[32];
  uint64_t (**v144)();
  std::logic_error v145;
  uint64_t (***v146)();
  std::__shared_weak_count *v147;
  uint64_t v148;
  int v149;
  _BYTE __p[40];
  const char *v151;
  int v152;
  std::string ioData;
  __int128 v154;
  _BYTE buf[40];
  __int128 v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 48))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v122 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      v123 = pthread_self();
      v124 = pthread_mach_thread_np(v123);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v124;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 214;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Read: m_audio_File is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v140);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Reader::Read: m_audio_File is null", (uint64_t)&ioData);
    std::logic_error::logic_error((std::logic_error *)&v134, &ioData);
    v134.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v134);
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    v151 = 0;
    v152 = -1;
    *(_QWORD *)__p = off_1E69A1208;
    *(_QWORD *)&__p[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)__p);
    *(_QWORD *)&buf[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings &, co"
                          "nst Writable_Range &) const";
    *(_QWORD *)&v156 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    DWORD2(v156) = 214;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v143);
    v145 = *(std::logic_error *)v143;
    v144 = off_1E69A20A0;
    v146 = *(uint64_t (****)())&v143[16];
    memset(v143, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v144);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)a1 + 40))(buf);
  v6 = *(_DWORD *)&buf[20];
  AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v140, a2);
  v7 = v140;
  v8 = v141;
  if (v140 == v141)
    goto LABEL_92;
  v126 = a3;
  v9 = 0;
  v128 = v6;
  v127 = a2;
  do
  {
    v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)buf = *(_OWORD *)v7;
    v11 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)&buf[32] = *(_QWORD *)(v7 + 32);
    *(_OWORD *)&buf[16] = v10;
    v12 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)&v156 = v11;
    *((_QWORD *)&v156 + 1) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_OWORD *)(v7 + 56);
    v16 = *(_QWORD *)(v7 + 80);
    v158 = *(std::__shared_weak_count **)(v7 + 72);
    v157 = v15;
    v17 = *(std::__shared_weak_count **)(v7 + 88);
    v159 = v16;
    v160 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = *(std::__shared_weak_count **)(v7 + 104);
    v161 = *(_QWORD *)(v7 + 96);
    v162 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v24 = *(double *)buf;
    v23 = *(double *)&buf[8];
    v25 = *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128);
    if (!v25)
    {
      AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)&ioData, v161, v162);
      goto LABEL_18;
    }
    ioData.__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)&v154 + 1) = 0;
    v26 = AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)(-1431655765 * (v25 >> 3)));
    v144 = &off_1E69A1390;
    v146 = &v144;
    *(_QWORD *)__p = v26;
    std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&__p[8], (uint64_t)&v144);
    v27 = v146;
    if (v146 == &v144)
    {
      v27 = &v144;
      v28 = 4;
    }
    else
    {
      if (!v146)
        goto LABEL_50;
      v28 = 5;
    }
    (*v27)[v28]();
LABEL_50:
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100]((uint64_t *)&ioData, (uint64_t *)__p);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)__p);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = *(_DWORD *)(a1 + 20);
    if ((v57 & 0x20) != 0)
    {
LABEL_51:
      if (v56 < *(unsigned int *)(a1 + 36))
      {
        v58 = 1;
        goto LABEL_55;
      }
    }
    else
    {
      while (!v56)
      {
        v58 = *(_DWORD *)(a1 + 36);
LABEL_55:
        v59 = ioData.__r_.__value_.__r.__words[0] + v55;
        *(_DWORD *)(v59 + 8) = v58;
        v60 = (_QWORD *)(*(_QWORD *)(a1 + 128) + v54);
        *(_DWORD *)(v59 + 12) = v60[1];
        *(_QWORD *)(v59 + 16) = *v60;
        ++v56;
        v55 += 16;
        v54 += 24;
        if ((v57 & 0x20) != 0)
          goto LABEL_51;
      }
    }
LABEL_18:
    v29 = vcvtmd_s64_f64(v23 - v24) / v6;
    ioNumberFrames = v29;
    v30 = (AMCP::Log::Scope_Registry *)ExtAudioFileRead(*(ExtAudioFileRef *)(a1 + 48), &ioNumberFrames, (AudioBufferList *)ioData.__r_.__value_.__l.__data_);
    if ((_DWORD)v30)
    {
      AMCP::Log::Scope_Registry::get(v30);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v104 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        v105 = pthread_self();
        v106 = pthread_mach_thread_np(v105);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v106;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 227;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (the_error == noErr)";
        _os_log_error_impl(&dword_1B57BA000, v104, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: reading the data failed", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
      v107 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Packetized_File_Reader::Packetized_File_Reader: reading the data failed", (uint64_t)&v134);
      std::logic_error::logic_error(&v132, &v134);
      v132.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v144, &v132);
      v146 = 0;
      v147 = 0;
      v148 = 0;
      v149 = -1;
      v144 = (uint64_t (**)())off_1E69A1208;
      v145.__imp_.__imp_ = (const char *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v144);
      *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings &, "
                            "const Writable_Range &) const";
      v151 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      v152 = 227;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v138.__r_.__value_.__l.__data_);
      *(std::string *)&v143[8] = v138;
      *(_QWORD *)v143 = off_1E69A20A0;
      memset(&v138, 0, sizeof(v138));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v143);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v107, (uint64_t)__p);
    }
    if (ioNumberFrames)
    {
      v31 = *(_DWORD *)(a1 + 16);
      v32 = *(_DWORD *)(a1 + 96);
      if (v31 == v32)
      {
        v33 = v161;
        v34 = v162;
        *(_QWORD *)__p = v161;
        *(_QWORD *)&__p[8] = v162;
        if (v162)
        {
          v35 = &v162->__shared_owners_;
          do
            v36 = __ldxr((unint64_t *)v35);
          while (__stxr(v36 + 1, (unint64_t *)v35));
        }
        if (v33)
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 72))(v33, &ioData);
        if (v34)
        {
          v37 = (unint64_t *)&v34->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
        if (v31 != 1667326771 || v32 != 1633889587)
        {
          AMCP::Log::Scope_Registry::get(v30);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          v118 = **(NSObject ***)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
          {
            v119 = pthread_self();
            v120 = pthread_mach_thread_np(v119);
            *(_DWORD *)__p = 67109890;
            *(_DWORD *)&__p[4] = v120;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 234;
            *(_WORD *)&__p[24] = 2080;
            *(_QWORD *)&__p[26] = "not (m_format.mFormatID == kAudioFormat60958AC3 && m_file_format.mFormatID == kAudioFormatAC3)";
            _os_log_error_impl(&dword_1B57BA000, v118, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Incorrect client format", __p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
          v121 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Incorrect client format", (uint64_t)&v134);
          std::logic_error::logic_error(&v132, &v134);
          v132.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v144, &v132);
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v149 = -1;
          v144 = (uint64_t (**)())off_1E69A1208;
          v145.__imp_.__imp_ = (const char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v144);
          *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings"
                                " &, const Writable_Range &) const";
          v151 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
          v152 = 234;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v138.__r_.__value_.__l.__data_);
          *(std::string *)&v143[8] = v138;
          *(_QWORD *)v143 = off_1E69A20A0;
          memset(&v138, 0, sizeof(v138));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v143);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v121, (uint64_t)__p);
        }
        v39 = ioData.__r_.__value_.__r.__words[0];
        AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)v143, v161, v162);
        v41 = *(_DWORD *)(*(_QWORD *)v143 + 12);
        v42 = *(unsigned int *)(a1 + 24);
        if (v41 < v42)
          goto LABEL_137;
        v43 = *(unsigned int *)(v39 + 12);
        if (v41 < v43)
          goto LABEL_137;
        v44 = *(_DWORD *)(a1 + 96);
        v45 = *(unsigned __int16 **)(v39 + 16);
        if (v44 == 1667326771)
          v46 = v43 - 8;
        else
          v46 = *(unsigned int *)(v39 + 12);
        v47 = v45[4 * (v44 == 1667326771)];
        if (v47 != 2935 && v47 != 30475)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v40);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          v108 = *(std::__shared_weak_count **)&__p[8];
          v109 = **(NSObject ***)__p;
          if (*(_QWORD *)&__p[8])
          {
            v110 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v40 = os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
          if (v40)
          {
            v112 = pthread_self();
            v113 = pthread_mach_thread_np(v112);
            *(_DWORD *)__p = 67109634;
            *(_DWORD *)&__p[4] = v113;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 72;
            _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d convert_ac3_to_cac3: missing sync word", __p, 0x18u);
          }
LABEL_137:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v40);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          v114 = **(NSObject ***)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
          {
            v115 = pthread_self();
            v116 = pthread_mach_thread_np(v115);
            *(_DWORD *)__p = 67109890;
            *(_DWORD *)&__p[4] = v116;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 240;
            *(_WORD *)&__p[24] = 2080;
            *(_QWORD *)&__p[26] = "not (the_error == noErr)";
            _os_log_error_impl(&dword_1B57BA000, v114, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to convert ac3 to cac3", __p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v137);
          v117 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Failed to convert ac3 to cac3", (uint64_t)&v138);
          std::logic_error::logic_error(&v136, &v138);
          v136.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v144, &v136);
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v149 = -1;
          v144 = (uint64_t (**)())off_1E69A1208;
          v145.__imp_.__imp_ = (const char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v144);
          *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings"
                                " &, const Writable_Range &) const";
          v151 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
          v152 = 240;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v132);
          *(std::logic_error *)&v134.__r_.__value_.__r.__words[1] = v132;
          v135 = v133;
          v132.__vftable = 0;
          v132.__imp_.__imp_ = 0;
          v133 = 0;
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v134);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v117, (uint64_t)__p);
        }
        v49 = v8;
        v50 = *(_DWORD *)(a1 + 16);
        v51 = *(_QWORD *)(*(_QWORD *)v143 + 16);
        if (v44 == 1633889587 && v50 == 1667326771)
        {
          v52 = v45[2];
          if (v47 == 30475)
            LOBYTE(v52) = HIBYTE(v45[2]);
          *(_DWORD *)v51 = 1310718066;
          *(_WORD *)(v51 + 4) = ((v52 & 7) << 8) | 1;
          *(_WORD *)(v51 + 6) = 8 * v46;
          v53 = (_WORD *)(v51 + 8);
        }
        else
        {
          v53 = *(_WORD **)(*(_QWORD *)v143 + 16);
        }
        if (v47 == 30475)
        {
          if (v46 >= 2)
          {
            v61 = v46 >> 1;
            v62 = v53;
            do
            {
              v63 = *v45++;
              *v62++ = bswap32(v63) >> 16;
              --v61;
            }
            while (v61);
          }
        }
        else
        {
          memcpy(v53, v45, v46);
        }
        if (v50 == 1667326771)
          bzero((char *)v53 + (v46 & 0xFFFFFFFFFFFFFFFELL), v51 - ((_QWORD)v53 + (v46 & 0xFFFFFFFFFFFFFFFELL)) + v42);
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)v143);
        v6 = v128;
        v8 = v49;
        a2 = v127;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v130, "packetized_file_reader_node");
    v64 = v130;
    v142[0] = v131;
    *(_QWORD *)((char *)v142 + 7) = *(_QWORD *)((char *)&v131 + 7);
    v65 = HIBYTE(v131);
    v130 = 0;
    v131 = 0uLL;
    *(_DWORD *)__p = 0;
    *(_QWORD *)&__p[8] = v64;
    *(_QWORD *)&__p[16] = v142[0];
    *(_QWORD *)&__p[23] = *(_QWORD *)((char *)v142 + 7);
    __p[31] = v65;
    v142[0] = 0;
    *(_QWORD *)((char *)v142 + 7) = 0;
    *(_QWORD *)&__p[32] = 0;
    LODWORD(v151) = 0;
    AMCP::DAL::Writable_Range::commit_direct_write(*(_QWORD *)(a2 + 80), (uint64_t)__p, (uint64_t)buf);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&ioData);
    v66 = v162;
    if (v162)
    {
      v67 = &v162->__shared_owners_;
      do
        v68 = __ldaxr((unint64_t *)v67);
      while (__stlxr(v68 - 1, (unint64_t *)v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v160;
    if (v160)
    {
      v70 = (unint64_t *)&v160->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (*((_QWORD *)&v156 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v9 += v29;
    v7 += 112;
  }
  while (v7 != v8);
  a3 = v126;
  if (!v9)
  {
LABEL_92:
    *a3 = 0;
    a3[80] = 0;
    goto LABEL_93;
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v75 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&__p[24] = v75;
  v76 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)&__p[32] = v76;
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
    *(_QWORD *)&v129 = v75;
    *((_QWORD *)&v129 + 1) = v76;
    do
      v79 = __ldxr(v77);
    while (__stxr(v79 + 1, v77));
  }
  else
  {
    v129 = v75;
  }
  LODWORD(ioData.__r_.__value_.__l.__data_) = 2;
  *(double *)&ioData.__r_.__value_.__l.__size_ = (double)(v9 * v6);
  ioData.__r_.__value_.__r.__words[2] = 0;
  v154 = v129;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v144, (uint64_t)__p, (uint64_t)&ioData);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)__p, (const AMCP::DAL::DAL_Time *)&v144);
  v81 = v147;
  if (v147)
  {
    v82 = (unint64_t *)&v147->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  *(_OWORD *)v126 = *(_OWORD *)buf;
  v87 = *(_QWORD *)&buf[24];
  *((_QWORD *)v126 + 2) = *(_QWORD *)&buf[16];
  *((_QWORD *)v126 + 3) = v87;
  v88 = *(_QWORD *)&buf[32];
  *((_QWORD *)v126 + 4) = *(_QWORD *)&buf[32];
  if (v88)
  {
    v89 = (unint64_t *)(v88 + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  *(_OWORD *)(v126 + 40) = v156;
  v91 = *((_QWORD *)&v157 + 1);
  *((_QWORD *)v126 + 7) = v157;
  *((_QWORD *)v126 + 8) = v91;
  v92 = v158;
  *((_QWORD *)v126 + 9) = v158;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    v95 = v158;
    v126[80] = 1;
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  else
  {
    v126[80] = 1;
  }
  v98 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v99 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(std::__shared_weak_count **)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v102 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_93:
  *(_QWORD *)buf = &v140;
  return std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B58C6548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t v64;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&a64);
  v66 = *(std::__shared_weak_count **)(v64 - 136);
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(std::__shared_weak_count **)(v64 - 152);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *(std::__shared_weak_count **)(v64 - 192);
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  *(_QWORD *)(v64 - 240) = &a38;
  std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v64 - 240));
  _Unwind_Resume(a1);
}

OpaqueExtAudioFile *AMCP::DAL::Packetized_File_Reader::close(AMCP::DAL::Packetized_File_Reader *this)
{
  OpaqueExtAudioFile *result;

  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (result)
  {
    result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((_QWORD *)this + 6) = 0;
  }
  return result;
}

__n128 AMCP::DAL::Packetized_File_Handler::get_format@<Q0>(AMCP::DAL::Packetized_File_Handler *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 8);
  v3 = *(_OWORD *)((char *)this + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 5);
  return result;
}

void AMCP::DAL::Packetized_File_Handler::get_name(AMCP::DAL::Packetized_File_Handler *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

uint64_t std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *a2;
  *a2 = 0;
  v5 = a2 + 1;
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](a1, v4);
  v7 = (uint64_t **)(a1 + 4);
  v6 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v6 == a1 + 1)
  {
    v8 = 4;
    v6 = a1 + 1;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_6:
  v11 = a2[4];
  v10 = a2 + 4;
  v9 = (uint64_t *)v11;
  if (v11)
  {
    if (v9 == v5)
    {
      *v7 = a1 + 1;
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v10 + 24))(*v10, a1 + 1);
      return a1;
    }
    *v7 = v9;
  }
  else
  {
    v10 = a1 + 4;
  }
  *v10 = 0;
  return a1;
}

void std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69A1390;
  return result;
}

void std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69A1390;
}

caulk::rt_safe_memory_resource *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
  if (*MEMORY[0x1E0DDB4F0])
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, *a2);
  __break(1u);
  return result;
}

uint64_t std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7Utility10create_ablEjEUlP15AudioBufferListE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::target_type()
{
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = v2;
    v6 = v1;
    if (v4 != v2)
    {
      do
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((caulk::rt_safe_memory_resource *)((char *)v4 - 24));
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](v5, 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 3));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0xAAAAAAAAAAAAAABLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  AMCP::DAL::Audio_Samples_Data *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  caulk::rt_safe_memory_resource *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  AMCP::DAL::Audio_Samples_Data *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t *v27;

  v3 = *a1;
  v4 = (AMCP::DAL::Audio_Samples_Data *)a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v21 = (AMCP::DAL::Audio_Samples_Data *)(v3 + 24 * a2);
      while (v4 != v21)
      {
        v4 = (AMCP::DAL::Audio_Samples_Data *)((char *)v4 - 24);
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data(v4);
      }
      a1[1] = (uint64_t)v21;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      v22 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v22);
      a1[1] = (uint64_t)v4 + v22;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v27 = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v10);
      v12 = (char *)v11 + 24 * v5;
      v14 = (char *)v11 + 24 * v13;
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v15);
      v16 = &v12[v15];
      v18 = *a1;
      v17 = a1[1];
      if (v17 == *a1)
      {
        v20 = vdupq_n_s64(v17);
      }
      else
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v12 - 1) = *(_QWORD *)(v17 - 8);
          *(_OWORD *)(v12 - 24) = v19;
          v12 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        v20 = *(int64x2_t *)a1;
      }
      *a1 = (uint64_t)v12;
      a1[1] = (uint64_t)v16;
      v25 = v20;
      v23 = a1[2];
      a1[2] = (uint64_t)v14;
      v26 = v23;
      v24 = v20.i64[0];
      std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer((uint64_t)&v24);
    }
  }
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0xAAAAAAAAAAAAAABLL)
  {
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(i - 24));
  }
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3));
  return a1;
}

uint64_t AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  __int128 v9;
  CFIndex v10;
  const UInt8 *v11;
  const __CFURL *v12;
  const __CFURL *v13;
  ExtAudioFileRef *v14;
  AMCP::Utility::OSStatus_Error_Category *v15;
  unsigned int v16;
  AMCP::Log::Scope_Registry *v17;
  AMCP::Utility::OSStatus_Error_Category *Property;
  unsigned int v19;
  AMCP::Log::Scope_Registry *v20;
  AMCP::Log::Scope_Registry *v21;
  AMCP::Log::Scope_Registry *v22;
  unsigned __int8 *v23;
  __int128 v24;
  __int128 v25;
  AMCP::Utility::OSStatus_Error_Category *v26;
  unsigned int v27;
  AMCP::Log::Scope_Registry *v28;
  int v29;
  int v30;
  uint64_t v32;
  char i;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  std::logic_error *exception;
  uint64_t v41;
  int v42;
  uint64_t v43;
  std::logic_error v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  std::runtime_error *v51;
  int v52;
  uint64_t v53;
  std::runtime_error v54;
  std::__shared_weak_count *v55;
  NSObject *v56;
  unint64_t *v57;
  unint64_t v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  std::runtime_error *v61;
  int v62;
  uint64_t v63;
  std::runtime_error v64;
  std::__shared_weak_count *v65;
  NSObject *v66;
  unint64_t *v67;
  unint64_t v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  std::runtime_error *v71;
  int v72;
  uint64_t v73;
  std::runtime_error v74;
  std::__shared_weak_count *v75;
  NSObject *v76;
  unint64_t *v77;
  unint64_t v78;
  _opaque_pthread_t *v79;
  mach_port_t v80;
  std::logic_error *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  std::logic_error v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  unint64_t *v88;
  unint64_t v89;
  _opaque_pthread_t *v90;
  mach_port_t v91;
  std::logic_error *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  std::logic_error v96;
  std::__shared_weak_count *v97;
  NSObject *v98;
  unint64_t *v99;
  unint64_t v100;
  _opaque_pthread_t *v101;
  mach_port_t v102;
  std::logic_error *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  std::logic_error v107;
  std::__shared_weak_count *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  _opaque_pthread_t *v112;
  mach_port_t v113;
  std::logic_error *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  std::logic_error v118;
  char v119;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;
  std::string v122;
  uint64_t v123;
  std::runtime_error cf;
  __int128 v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  uint64_t (**v133)();
  _BYTE v134[24];
  std::logic_error v135;
  _BYTE buf[48];
  std::runtime_error v137;
  int v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E698AE60;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  v7 = v6;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v7)
      goto LABEL_12;
  }
  else if (!v6)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v8)
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, (uint64_t)(v8 + 40));
  else
    cf.__vftable = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)buf, (const __CFDictionary **)&cf);
  v9 = *(_OWORD *)&buf[16];
  *(_OWORD *)v4 = *(_OWORD *)buf;
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)&buf[32];
  if (cf.__vftable)
    CFRelease(cf.__vftable);
LABEL_12:
  *(_QWORD *)a1 = &off_1E6971840;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&cf, "name");
  std::string::basic_string[abi:ne180100]<0>(&v133, "");
  AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)buf, a2, (unsigned __int8 *)&cf, (__n128 *)&v133);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)buf;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)&buf[16];
  if ((v134[15] & 0x80000000) != 0)
    operator delete(v133);
  if (SBYTE7(v125) < 0)
    operator delete(cf.__vftable);
  if (*(char *)(a1 + 79) < 0)
  {
    v11 = *(const UInt8 **)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 79);
    v11 = (const UInt8 *)v5;
  }
  v12 = CFURLCreateFromFileSystemRepresentation(0, v11, v10, 0);
  v13 = v12;
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v34 = *(std::__shared_weak_count **)&buf[8];
    v35 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v36 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 139;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not ((theURL) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: failed to make a URL for the path", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Reader::Packetized_File_Reader: failed to make a URL for the path", (uint64_t)&v122);
    std::logic_error::logic_error(&v135, &v122);
    v41 = MEMORY[0x1E0DE5018];
    v135.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v135);
    *((_QWORD *)&v125 + 1) = 0;
    v126 = 0;
    v127 = 0;
    LODWORD(v128) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v125 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(_QWORD *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v137.__vftable) = 139;
    std::vector<void *>::vector(&v131);
    v42 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v42);
    v133 = off_1E69A20A0;
    *(_OWORD *)v134 = v131;
    *(_QWORD *)&v134[16] = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v133);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v41 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v43 = *(_QWORD *)&buf[24];
    exception[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    v44 = *(std::logic_error *)&buf[32];
    LODWORD(exception[3].__vftable) = v137.__vftable;
    exception[2] = v44;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v14 = (ExtAudioFileRef *)(a1 + 48);
  v15 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileOpenURL(v12, (ExtAudioFileRef *)(a1 + 48));
  v16 = v15;
  AMCP::Utility::OSStatus_Error_Category::get(v15);
  CFRelease(v13);
  if (v16)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = *(std::__shared_weak_count **)&buf[8];
    v46 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v49 = pthread_self();
      v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 142;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: got an error opening the file", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v135);
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v133, v16, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v133);
    v125 = *(_OWORD *)&v134[8];
    v128 = 0;
    v129 = 0;
    v130 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v126 = &unk_1E69A1320;
    v127 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    v137.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    v137.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    v138 = 142;
    std::vector<void *>::vector(&v131);
    v52 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v52);
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v122.__r_.__value_.__r.__words[1] = v131;
    v123 = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v122);
    v51[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v51, (const std::runtime_error *)buf);
    v51->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v51[1] = *(std::runtime_error *)&buf[16];
    v51[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v53 = *(_QWORD *)&buf[40];
    v51[2].__imp_.__imp_ = *(const char **)&buf[40];
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
    v54 = v137;
    LODWORD(v51[4].__vftable) = v138;
    v51[3] = v54;
    v51->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    v51[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    v51[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
  ioPropertyDataSize = 40;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(*v14, 0x66666D74u, &ioPropertyDataSize, (void *)(a1 + 88));
  v19 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v19)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v55 = *(std::__shared_weak_count **)&buf[8];
    v56 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      v59 = pthread_self();
      v60 = pthread_mach_thread_np(v59);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v60;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 150;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: couldn't get the file's format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v135);
    v61 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v133, v19, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v133);
    v125 = *(_OWORD *)&v134[8];
    v128 = 0;
    v129 = 0;
    v130 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v126 = &unk_1E69A1320;
    v127 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    v137.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    v137.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    v138 = 150;
    std::vector<void *>::vector(&v131);
    v62 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v62);
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v122.__r_.__value_.__r.__words[1] = v131;
    v123 = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v122);
    v61[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v61, (const std::runtime_error *)buf);
    v61->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v61[1] = *(std::runtime_error *)&buf[16];
    v61[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v63 = *(_QWORD *)&buf[40];
    v61[2].__imp_.__imp_ = *(const char **)&buf[40];
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
    v64 = v137;
    LODWORD(v61[4].__vftable) = v138;
    v61[3] = v64;
    v61->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    v61[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    v61[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  v21 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  v22 = v21;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v22)
      goto LABEL_26;
LABEL_29:
    v24 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v4 + 16) = v24;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 120);
    goto LABEL_35;
  }
  if (!v21)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v23)
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, (uint64_t)(v23 + 40));
  else
    cf.__vftable = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)buf, (const __CFDictionary **)&cf);
  v25 = *(_OWORD *)&buf[16];
  *(_OWORD *)v4 = *(_OWORD *)buf;
  *(_OWORD *)(v4 + 16) = v25;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)&buf[32];
  v21 = (AMCP::Log::Scope_Registry *)cf.__vftable;
  if (cf.__vftable)
    CFRelease(cf.__vftable);
LABEL_35:
  if (*(_DWORD *)(a1 + 104) && *(_DWORD *)(a1 + 108))
  {
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v86 = *(std::__shared_weak_count **)&buf[8];
    v87 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v88 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      v90 = pthread_self();
      v91 = pthread_mach_thread_np(v90);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v91;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 163;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (isFormatVBR == true)";
      _os_log_error_impl(&dword_1B57BA000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not packetized!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outPropertyData);
    v92 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not packetized!", (uint64_t)&v122);
    std::logic_error::logic_error(&v135, &v122);
    v93 = MEMORY[0x1E0DE5018];
    v135.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v135);
    *((_QWORD *)&v125 + 1) = 0;
    v126 = 0;
    v127 = 0;
    LODWORD(v128) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v125 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(_QWORD *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v137.__vftable) = 163;
    std::vector<void *>::vector(&v131);
    v94 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v94);
    v133 = off_1E69A20A0;
    *(_OWORD *)v134 = v131;
    *(_QWORD *)&v134[16] = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v133);
    v92[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v92, (const std::logic_error *)buf);
    v92->__vftable = (std::logic_error_vtbl *)(v93 + 16);
    v92[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v95 = *(_QWORD *)&buf[24];
    v92[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95);
    v96 = *(std::logic_error *)&buf[32];
    LODWORD(v92[3].__vftable) = v137.__vftable;
    v92[2] = v96;
    v92->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v92[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v92[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  outPropertyData = 0;
  ioPropertyDataSize = 4;
  v26 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(*v14, 0x666D7073u, &ioPropertyDataSize, &outPropertyData);
  v27 = v26;
  AMCP::Utility::OSStatus_Error_Category::get(v26);
  if (v27)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v65 = *(std::__shared_weak_count **)&buf[8];
    v66 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v69 = pthread_self();
      v70 = pthread_mach_thread_np(v69);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v70;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 170;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: couldn't get file's max packet size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v135);
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v133, v27, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v133);
    v125 = *(_OWORD *)&v134[8];
    v128 = 0;
    v129 = 0;
    v130 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v126 = &unk_1E69A1320;
    v127 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    v137.__vftable = (std::runtime_error_vtbl *)"AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    v137.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    v138 = 170;
    std::vector<void *>::vector(&v131);
    v72 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v72);
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v122.__r_.__value_.__r.__words[1] = v131;
    v123 = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v122);
    v71[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v71, (const std::runtime_error *)buf);
    v71->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v71[1] = *(std::runtime_error *)&buf[16];
    v71[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v73 = *(_QWORD *)&buf[40];
    v71[2].__imp_.__imp_ = *(const char **)&buf[40];
    if (v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
    v74 = v137;
    LODWORD(v71[4].__vftable) = v138;
    v71[3] = v74;
    v71->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    v71[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    v71[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
  if (!outPropertyData)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v75 = *(std::__shared_weak_count **)&buf[8];
    v76 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v77 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      v79 = pthread_self();
      v80 = pthread_mach_thread_np(v79);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v80;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 172;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (max_packet_size != 0)";
      _os_log_error_impl(&dword_1B57BA000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s zero length file", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v119);
    v81 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"zero length file", (uint64_t)&v122);
    std::logic_error::logic_error(&v135, &v122);
    v82 = MEMORY[0x1E0DE5018];
    v135.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v135);
    *((_QWORD *)&v125 + 1) = 0;
    v126 = 0;
    v127 = 0;
    LODWORD(v128) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v125 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(_QWORD *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v137.__vftable) = 172;
    std::vector<void *>::vector(&v131);
    v83 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
    std::vector<void *>::resize((char **)&v131, v83);
    v133 = off_1E69A20A0;
    *(_OWORD *)v134 = v131;
    *(_QWORD *)&v134[16] = v132;
    v131 = 0uLL;
    v132 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v133);
    v81[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v81, (const std::logic_error *)buf);
    v81->__vftable = (std::logic_error_vtbl *)(v82 + 16);
    v81[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v84 = *(_QWORD *)&buf[24];
    v81[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
    v85 = *(std::logic_error *)&buf[32];
    LODWORD(v81[3].__vftable) = v137.__vftable;
    v81[2] = v85;
    v81->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v81[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v81[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v29 = *(_DWORD *)(a1 + 16);
  v30 = *(_DWORD *)(a1 + 96);
  if (v29 != v30)
  {
    if (v29 != 1667326771 || v30 != 1633889587)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v97 = *(std::__shared_weak_count **)&buf[8];
      v98 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v99 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v101 = pthread_self();
        v102 = pthread_mach_thread_np(v101);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v102;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 176;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "not (m_format.mFormatID == kAudioFormat60958AC3 && m_file_format.mFormatID == kAudioFormatAC3)";
        _os_log_error_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Incorrect client format", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v119);
      v103 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Incorrect client format", (uint64_t)&v122);
      std::logic_error::logic_error(&v135, &v122);
      v104 = MEMORY[0x1E0DE5018];
      v135.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&cf, &v135);
      *((_QWORD *)&v125 + 1) = 0;
      v126 = 0;
      v127 = 0;
      LODWORD(v128) = -1;
      cf.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
      *(_QWORD *)&v125 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
      *(_QWORD *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      LODWORD(v137.__vftable) = 176;
      std::vector<void *>::vector(&v131);
      v105 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
      std::vector<void *>::resize((char **)&v131, v105);
      v133 = off_1E69A20A0;
      *(_OWORD *)v134 = v131;
      *(_QWORD *)&v134[16] = v132;
      v131 = 0uLL;
      v132 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v133);
      v103[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v103, (const std::logic_error *)buf);
      v103->__vftable = (std::logic_error_vtbl *)(v104 + 16);
      v103[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v106 = *(_QWORD *)&buf[24];
      v103[1].__imp_.__imp_ = *(const char **)&buf[24];
      if (v106)
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 24))(v106);
      v107 = *(std::logic_error *)&buf[32];
      LODWORD(v103[3].__vftable) = v137.__vftable;
      v103[2] = v107;
      v103->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v103[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v103[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    if ((*(_BYTE *)(a1 + 100) & 0x20) != 0 && *(_DWORD *)(a1 + 116) != 1)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v108 = *(std::__shared_weak_count **)&buf[8];
      v109 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v110 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        v112 = pthread_self();
        v113 = pthread_mach_thread_np(v112);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v113;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 178;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "not (num_streams == 1)";
        _os_log_error_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid number of channel streams", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v119);
      v114 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid number of channel streams", (uint64_t)&v122);
      std::logic_error::logic_error(&v135, &v122);
      v115 = MEMORY[0x1E0DE5018];
      v135.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&cf, &v135);
      *((_QWORD *)&v125 + 1) = 0;
      v126 = 0;
      v127 = 0;
      LODWORD(v128) = -1;
      cf.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
      *(_QWORD *)&v125 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
      *(_QWORD *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      LODWORD(v137.__vftable) = 178;
      std::vector<void *>::vector(&v131);
      v116 = backtrace((void **)v131, (*((_QWORD *)&v131 + 1) - (_QWORD)v131) >> 3);
      std::vector<void *>::resize((char **)&v131, v116);
      v133 = off_1E69A20A0;
      *(_OWORD *)v134 = v131;
      *(_QWORD *)&v134[16] = v132;
      v131 = 0uLL;
      v132 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v133);
      v114[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(v114, (const std::logic_error *)buf);
      v114->__vftable = (std::logic_error_vtbl *)(v115 + 16);
      v114[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v117 = *(_QWORD *)&buf[24];
      v114[1].__imp_.__imp_ = *(const char **)&buf[24];
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
      v118 = *(std::logic_error *)&buf[32];
      LODWORD(v114[3].__vftable) = v137.__vftable;
      v114[2] = v118;
      v114->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      v114[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      v114[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::resize((uint64_t *)(a1 + 128), 1uLL);
    v32 = 0;
    for (i = 1; (i & 1) != 0; i = 0)
    {
      AMCP::DAL::Audio_Samples_Data::allocate((AMCP::DAL::Audio_Samples_Data *)(*(_QWORD *)(a1 + 128) + 24 * v32), outPropertyData);
      v32 = 1;
    }
  }
  return a1;
}

void sub_1B58C86D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, __int16 a15, char a16, char a17, void *a18, void *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,CFTypeRef cf,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,std::runtime_error a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  ExtAudioFileRef *v44;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (*v44)
    {
      ExtAudioFileDispose(*v44);
      *v44 = 0;
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1B58C8EA0()
{
  JUMPOUT(0x1B58C8EB4);
}

void sub_1B58C8EAC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B58C8EB4);
}

void AMCP::Control::~Control(AMCP::Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Slider_Control::~Slider_Control(AMCP::Slider_Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Level_Control::~Level_Control(AMCP::Level_Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Boolean_Control::~Boolean_Control(AMCP::Boolean_Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Selector_Control::~Selector_Control(AMCP::Selector_Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Stereo_Pan_Control::~Stereo_Pan_Control(AMCP::Stereo_Pan_Control *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t AMCP::Control::Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E69718A8;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6163746C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 30;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58C9320(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Control *AMCP::Control::Control(AMCP::Control *this, const AMCP::Device *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  std::__shared_mutex_base *v13;
  _QWORD *v14;
  unsigned int first_object_id_if;
  uint64_t v16;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  NSObject **v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a2 + 4);
  v13 = *(std::__shared_mutex_base **)(**(_QWORD **)v12 + 16);
  v14 = operator new(0x20uLL);
  *v14 = &off_1E69719F8;
  v14[1] = a2;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  *((_DWORD *)v14 + 6) = a5;
  *((_DWORD *)v14 + 7) = a6;
  v26[0] = v14;
  first_object_id_if = AMCP::Core::Broker::fetch_first_object_id_if (v13, (uint64_t)&v21);
  AMCP::Object::Object((uint64_t)this, v12, first_object_id_if);
  (*(void (**)(_QWORD *))(*v14 + 40))(v14);
  *(_QWORD *)this = &off_1E69718A8;
  v16 = AMCP::Object::constructed_correct_class(this, (AMCP *)0x6163746C);
  if ((v16 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    v18 = *v21;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v20;
      v22 = 2080;
      v23 = "Control.cpp";
      v24 = 1024;
      v25 = 60;
      LOWORD(v26[0]) = 2080;
      *(_QWORD *)((char *)v26 + 2) = "constructed_correct_class(k_class_id_control)";
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v21, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58C9508(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69719F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69719F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t result;
  unsigned int simple_required;
  int v6;
  int v7;
  int v8;

  result = AMCP::is_base_of((AMCP *)0x6163746C, *(_DWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) == AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2))
    {
      simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
      result = AMCP::is_base_of((AMCP *)*(unsigned int *)(a1 + 16), simple_required);
      if ((_DWORD)result)
      {
        v6 = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);
        v7 = AMCP::Core::Core::get_simple_required_property<1668506480u>(*a2);
        v8 = AMCP::Core::Core::get_simple_required_property<1667591277u>(*a2);
        result = 0;
        if (v6 == *(_DWORD *)(a1 + 20) && v7 == *(_DWORD *)(a1 + 24))
          return v8 == *(_DWORD *)(a1 + 28);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7ControlC1ERKNS_6DeviceEjjjjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668506480u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "pcscbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "cscp");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B58C9820(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1667591277u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "mlecbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "celm");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B58C9998(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Control::get_scope(AMCP::Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1668506480u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Control::get_element(AMCP::Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1667591277u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

BOOL AMCP::Control::is_read_only(AMCP::Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "odrcbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "crdo");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 1;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B58C9CC4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Control::Value_Observer::Value_Observer(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;

  v5 = **a2;
  v6 = (std::__shared_weak_count *)(*a2)[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *a1 = v5;
    a1[1] = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = v5;
    a1[1] = 0;
  }
  a1[2] = a3;
  return a1;
}

void AMCP::Control::Value_Observer::~Value_Observer(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;

  AMCP::Control::Value_Observer::reset((AMCP::Control::Value_Observer *)this);
  v2 = this[1];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void AMCP::Control::Value_Observer::reset(AMCP::Control::Value_Observer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    if (*(_QWORD *)this)
    {
      v5 = *((_QWORD *)this + 2);
      if (v5)
        AMCP::Core::Conductor::destroy_control_value_observer(*(AMCP::Core::Conductor **)(*(_QWORD *)this + 32), v5);
    }
    *((_QWORD *)this + 2) = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void AMCP::Control::create_value_observer(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *exception;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::runtime_error v25;
  std::runtime_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !*(_QWORD *)(a1 + 16))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = *(std::__shared_weak_count **)v34;
    v14 = **(NSObject ***)buf;
    if (*(_QWORD *)v34)
    {
      v15 = (unint64_t *)(*(_QWORD *)v34 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "Control.cpp";
      v35 = 1024;
      v36 = 119;
      v37 = 2080;
      *(_QWORD *)v38 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v25, "No underlying object");
    std::runtime_error::runtime_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v27 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v38[6] = "Control::Value_Observer AMCP::Control::create_value_observer(const Value_Observer_Proc &)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    v40 = 119;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v22 = off_1E69A20A0;
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = *(uint64_t ***)(a1 + 32);
  v9 = *(_QWORD *)(**v8 + 32);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 8);
  v10 = AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::register_observer(v9 + 2432, (unsigned int *)buf, a2);
  AMCP::Control::Value_Observer::Value_Observer(a3, v8, v10);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B58CA108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Slider_Control::Slider_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E69718C8;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x736C6472);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 130;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_slider_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58CA350(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Slider_Control *AMCP::Slider_Control::Slider_Control(AMCP::Slider_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  AMCP::Control *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Control::Control(this, a2, 1936483442, a5, a3, a4);
  *(_QWORD *)v6 = &off_1E69718C8;
  v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x736C6472);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v9 = *v12;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      v13 = 2080;
      v14 = "Control.cpp";
      v15 = 1024;
      v16 = 136;
      v17 = 2080;
      v18 = "constructed_correct_class(k_class_id_slider_control)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58CA4BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::Slider_Control::get_value(AMCP::Slider_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "vrdsbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "sdrv");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B58CA6F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Slider_Control::set_value(AMCP::Slider_Control *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F6273647276;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,unsigned int const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LODWORD(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CA8BC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CA86CLL);
}

uint64_t AMCP::Slider_Control::set_value_and_wait(AMCP::Slider_Control *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F6273647276;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,unsigned int const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LODWORD(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CAAB0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CAA60);
}

unint64_t AMCP::Slider_Control::get_range(AMCP::Slider_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *__p[2];
  char v17;
  _BYTE buf[10];
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "rrdsbolg");
      buf[9] = 0;
      LOWORD(v19) = 0;
      v6 = AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v13 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          v17 = 4;
          strcpy((char *)__p, "sdrr");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)&buf[8] = 2080;
          v19 = "Core.h";
          v20 = 1024;
          v21 = 391;
          v22 = 2080;
          v23 = "optional_value.operator BOOL() == true";
          v24 = 2080;
          v25 = __p;
          v26 = 1024;
          v27 = 1735159650;
          v28 = 1024;
          v29 = 0;
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v8 = v6;
      v9 = HIDWORD(v6);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return v8 | (v9 << 32);
}

void sub_1B58CACD4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v13[32];
  void (*v14)(_QWORD, _BYTE *, _QWORD, _QWORD);
  unint64_t v15;
  std::__shared_weak_count *v16;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)a1, (unsigned int *)a2);
  v5 = v15;
  if (!v15)
    goto LABEL_10;
  v6 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)v5, v6))
  {
    v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v13, (_QWORD *)v5);
      v5 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>((uint64_t)v13);
      if (v14)
        v14(0, v13, 0, 0);
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
LABEL_10:
    v7 = 1;
    goto LABEL_11;
  }
  v5 = AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>((_QWORD *)v5);
LABEL_5:
  v7 = 0;
  v2 = v5 >> 8;
LABEL_11:
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v7)
        return v5 | (v2 << 8);
      goto LABEL_16;
    }
  }
  if (v7)
LABEL_16:
    LOBYTE(v5) = 0;
  return v5 | (v2 << 8);
}

uint64_t AMCP::Level_Control::Level_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E69718E8;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6C65766C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 202;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_level_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58CAF38(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Level_Control *AMCP::Level_Control::Level_Control(AMCP::Level_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  AMCP::Control *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Control::Control(this, a2, 1818588780, a5, a3, a4);
  *(_QWORD *)v6 = &off_1E69718E8;
  v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x6C65766C);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v9 = *v12;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      v13 = 2080;
      v14 = "Control.cpp";
      v15 = 1024;
      v16 = 208;
      v17 = 2080;
      v18 = "constructed_correct_class(k_class_id_level_control)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58CB0A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

float AMCP::Level_Control::get_scalar_value(AMCP::Level_Control *this)
{
  std::__shared_weak_count *v2;
  float v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v3 = 0.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
      {
        strcpy(buf, "vsclbolg");
        buf[9] = 0;
        LOWORD(v17) = 0;
        v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v11 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v12 = pthread_self();
            v13 = pthread_mach_thread_np(v12);
            v15 = 4;
            strcpy((char *)__p, "lcsv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v13;
            *(_WORD *)&buf[8] = 2080;
            v17 = "Core.h";
            v18 = 1024;
            v19 = 391;
            v20 = 2080;
            v21 = "optional_value.operator BOOL() == true";
            v22 = 2080;
            v23 = __p;
            v24 = 1024;
            v25 = 1735159650;
            v26 = 1024;
            v27 = 0;
            _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v15 < 0)
              operator delete(__p[0]);
          }
          abort();
        }
        v3 = *(float *)&v7;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_1B58CB2D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  float v2;
  _QWORD *v5;
  unint64_t v6;
  float v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  void (*v16)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v17;
  std::__shared_weak_count *v18;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v17, (int8x8_t *)a1, (unsigned int *)a2);
  v5 = v17;
  if (!v17)
    goto LABEL_9;
  v6 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v15, v5);
      v2 = AMCP::Thing::convert_to<float>((uint64_t)v15);
      if (v16)
        v16(0, v15, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v8 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<float>(v5);
  v2 = v7;
LABEL_5:
  v8 = 0;
LABEL_10:
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v8)
        goto LABEL_15;
LABEL_17:
      v13 = 0x100000000;
      return v13 | LODWORD(v2);
    }
  }
  if (!v8)
    goto LABEL_17;
LABEL_15:
  v13 = 0;
  LODWORD(v2) &= 0xFFFFFF00;
  return v13 | LODWORD(v2);
}

uint64_t AMCP::Level_Control::set_scalar_value(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F626C637376;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58CB5D0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CB580);
}

uint64_t AMCP::Level_Control::set_scalar_value_and_wait(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F626C637376;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58CB7C4(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CB774);
}

float AMCP::Level_Control::get_decibel_value(AMCP::Level_Control *this)
{
  std::__shared_weak_count *v2;
  float v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v3 = 0.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
      {
        strcpy(buf, "vdclbolg");
        buf[9] = 0;
        LOWORD(v17) = 0;
        v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v11 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v12 = pthread_self();
            v13 = pthread_mach_thread_np(v12);
            v15 = 4;
            strcpy((char *)__p, "lcdv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v13;
            *(_WORD *)&buf[8] = 2080;
            v17 = "Core.h";
            v18 = 1024;
            v19 = 391;
            v20 = 2080;
            v21 = "optional_value.operator BOOL() == true";
            v22 = 2080;
            v23 = __p;
            v24 = 1024;
            v25 = 1735159650;
            v26 = 1024;
            v27 = 0;
            _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v15 < 0)
              operator delete(__p[0]);
          }
          abort();
        }
        v3 = *(float *)&v7;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_1B58CB9CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Level_Control::set_decibel_value(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F626C636476;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58CBB94(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CBB44);
}

uint64_t AMCP::Level_Control::set_decibel_value_and_wait(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F626C636476;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58CBD88(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CBD38);
}

double AMCP::Level_Control::get_decibel_range(AMCP::Level_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  double v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v8;
  unint64_t v9;
  double v10;
  char v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *__p;
  std::__shared_weak_count *v23;
  char v24;
  uint64_t v25;
  int v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[18];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0.0;
  v3 = std::__shared_weak_count::lock(v2);
  v4 = 0.0;
  if (v3)
  {
    v5 = v3;
    v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (!v6)
    {
LABEL_20:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return v4;
    }
    v25 = 0x676C6F626C636472;
    v26 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v6, (const AMCP::Address *)&v25);
    if (!(_DWORD)has_property)
    {
LABEL_25:
      AMCP::Log::Scope_Registry::get(has_property);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v19 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        v24 = 4;
        strcpy((char *)&__p, "lcdr");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v21;
        v28 = 2080;
        v29 = "Core.h";
        v30 = 1024;
        v31 = 391;
        v32 = 2080;
        *(_QWORD *)v33 = "optional_value.operator BOOL() == true";
        *(_WORD *)&v33[8] = 2080;
        *(_QWORD *)&v33[10] = &__p;
        v34 = 1024;
        v35 = 1735159650;
        v36 = 1024;
        v37 = 0;
        _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v24 < 0)
          operator delete(__p);
      }
      abort();
    }
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v6, (unsigned int *)&v25);
    v8 = __p;
    if (__p)
    {
      v9 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
      {
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<CA::ValueRange>(v8);
        v4 = v10;
LABEL_8:
        v11 = 0;
LABEL_14:
        v13 = v23;
        if (v23)
        {
          v14 = (unint64_t *)&v23->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if ((v11 & 1) == 0)
          goto LABEL_20;
        goto LABEL_25;
      }
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12);
      if (has_property)
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v8);
        v4 = AMCP::Thing::convert_to<CA::ValueRange>((uint64_t)buf);
        if (*(_QWORD *)&v33[6])
          has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v33[6])(0, buf, 0, 0);
        goto LABEL_8;
      }
    }
    v11 = 1;
    goto LABEL_14;
  }
  return v4;
}

void sub_1B58CC078(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<CA::ValueRange>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRange, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRange, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B58CC460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[360];
}

float AMCP::Level_Control::convert_scalar_value_to_decibels(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  int8x8_t *v5;
  std::__shared_weak_count *v6;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  float v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  NSObject *v42;
  unint64_t *v43;
  unint64_t v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  std::runtime_error v52;
  std::string::size_type v53;
  uint64_t (**v54)();
  std::string v55;
  std::string v56;
  std::runtime_error v57;
  std::runtime_error v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  uint8_t buf[8];
  _BYTE v66[10];
  __int16 v67;
  int v68;
  __int16 v69;
  _BYTE v70[14];
  const char *v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3)) == 0 || (v5 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = *(std::__shared_weak_count **)v66;
    v21 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v22 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Control.cpp";
      v67 = 1024;
      v68 = 314;
      v69 = 2080;
      *(_QWORD *)v70 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v52, "No underlying object");
    std::runtime_error::runtime_error(&v58, &v52);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "float32_t AMCP::Level_Control::convert_scalar_value_to_decibels(float32_t) const";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    v72 = 314;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v56.__r_.__value_.__l.__data_);
    v54 = off_1E69A20A0;
    v55 = v56;
    memset(&v56, 0, sizeof(v56));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v3;
  v48 = 0x676C6F626C637364;
  v49 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v50, v5, (unsigned int *)&v48);
  v8 = v50;
  if (!v50)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v34 = *(std::__shared_weak_count **)v66;
    v35 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v36 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Core.h";
      v67 = 1024;
      v68 = 202;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v40 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = float, Argument_Types = <float>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v72 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v40, (uint64_t)buf);
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v41 = *(std::__shared_weak_count **)v66;
    v42 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v43 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v46;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Operation.h";
      v67 = 1024;
      v68 = 154;
      _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v47 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v72 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v47, (uint64_t)buf);
  }
  v11 = v10;
  if (!*((_QWORD *)v10 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>(),
        (v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = *(std::__shared_weak_count **)v66;
    v28 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v29 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Operation.h";
      v67 = 1024;
      v68 = 161;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v33 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v72 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v33, (uint64_t)buf);
  }
  *(float *)buf = a2;
  v12 = *((_QWORD *)v10 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (*(float (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v14 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CCEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(float)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[362];
}

float AMCP::Level_Control::convert_decibel_value_to_scalar(AMCP::Level_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  int8x8_t *v5;
  std::__shared_weak_count *v6;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  float v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  NSObject *v42;
  unint64_t *v43;
  unint64_t v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  std::runtime_error v52;
  std::string::size_type v53;
  uint64_t (**v54)();
  std::string v55;
  std::string v56;
  std::runtime_error v57;
  std::runtime_error v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  uint8_t buf[8];
  _BYTE v66[10];
  __int16 v67;
  int v68;
  __int16 v69;
  _BYTE v70[14];
  const char *v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3)) == 0 || (v5 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = *(std::__shared_weak_count **)v66;
    v21 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v22 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Control.cpp";
      v67 = 1024;
      v68 = 321;
      v69 = 2080;
      *(_QWORD *)v70 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v52, "No underlying object");
    std::runtime_error::runtime_error(&v58, &v52);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "float32_t AMCP::Level_Control::convert_decibel_value_to_scalar(float32_t) const";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    v72 = 321;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v56.__r_.__value_.__l.__data_);
    v54 = off_1E69A20A0;
    v55 = v56;
    memset(&v56, 0, sizeof(v56));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v3;
  v48 = 0x676C6F626C637364;
  v49 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v50, v5, (unsigned int *)&v48);
  v8 = v50;
  if (!v50)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v34 = *(std::__shared_weak_count **)v66;
    v35 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v36 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Core.h";
      v67 = 1024;
      v68 = 202;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v40 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = float, Argument_Types = <float, BOOL>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v72 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v40, (uint64_t)buf);
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v41 = *(std::__shared_weak_count **)v66;
    v42 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v43 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v46;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Operation.h";
      v67 = 1024;
      v68 = 154;
      _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v47 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float, BOOL>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v72 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v47, (uint64_t)buf);
  }
  v11 = v10;
  if (!*((_QWORD *)v10 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>(),
        (v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = *(std::__shared_weak_count **)v66;
    v28 = **(NSObject ***)buf;
    if (*(_QWORD *)v66)
    {
      v29 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = "Operation.h";
      v67 = 1024;
      v68 = 161;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v33 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v56);
    std::runtime_error::runtime_error(&v57, &v56);
    std::runtime_error::runtime_error(&v58, &v57);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v58.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v59 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v58);
    *(_QWORD *)&v70[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float, BOOL>]";
    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v72 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
    v54 = off_1E69A20A0;
    *(std::runtime_error *)&v55.__r_.__value_.__l.__data_ = v52;
    v55.__r_.__value_.__r.__words[2] = v53;
    v52.__vftable = 0;
    v52.__imp_.__imp_ = 0;
    v53 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v54);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v33, (uint64_t)buf);
  }
  *(float *)buf = a2;
  LOBYTE(v58.__vftable) = 1;
  v12 = *((_QWORD *)v10 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (*(float (**)(uint64_t, uint8_t *, std::runtime_error *))(*(_QWORD *)v12 + 48))(v12, buf, &v58);
  v14 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CD9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[364];
}

uint64_t AMCP::Boolean_Control::Boolean_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E6971908;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x746F676C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 332;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_BOOLean_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58CDDF8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Boolean_Control *AMCP::Boolean_Control::Boolean_Control(AMCP::Boolean_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  AMCP::Control *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Control::Control(this, a2, 1953458028, a5, a3, a4);
  *(_QWORD *)v6 = &off_1E6971908;
  v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x746F676C);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v9 = *v12;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      v13 = 2080;
      v14 = "Control.cpp";
      v15 = 1024;
      v16 = 338;
      v17 = 2080;
      v18 = "constructed_correct_class(k_class_id_BOOLean_control)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58CDF64(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Boolean_Control::get_value(AMCP::Boolean_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "lvcbbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "bcvl");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B58CE1A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Boolean_Control::set_value(AMCP::Boolean_Control *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F626263766CLL;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LOBYTE(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CE36C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CE31CLL);
}

uint64_t AMCP::Boolean_Control::set_value_and_wait(AMCP::Boolean_Control *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F626263766CLL;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LOBYTE(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B58CE560(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CE510);
}

uint64_t AMCP::Selector_Control::Selector_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E6971928;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x736C6374);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 394;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_selector_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58CE6C0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Selector_Control *AMCP::Selector_Control::Selector_Control(AMCP::Selector_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  AMCP::Control *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Control::Control(this, a2, 1936483188, a5, a3, a4);
  *(_QWORD *)v6 = &off_1E6971928;
  v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x736C6374);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v9 = *v12;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      v13 = 2080;
      v14 = "Control.cpp";
      v15 = 1024;
      v16 = 400;
      v17 = 2080;
      v18 = "constructed_correct_class(k_class_id_selector_control)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58CE82C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Selector_Control::is_multi_value(AMCP::Selector_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "mccsbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "sccm");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B58CEA6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Selector_Control::get_value(AMCP::Selector_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    AMCP::Core::Core::get_simple_required_property<1935893353u>(&__p, v5);
    v6 = *(unsigned int *)__p;
    operator delete(__p);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void AMCP::Core::Core::get_simple_required_property<1935893353u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  void *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *__p[2];
  char v9;
  void *v10;
  uint64_t v11;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "iccsbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v9 = 4;
      strcpy((char *)__p, "scci");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
    operator delete(v4);
}

void sub_1B58CECD4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Selector_Control::set_value(AMCP::Selector_Control *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v14;
  _DWORD *v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = operator new(4uLL);
    __p = v8;
    *v8 = a2;
    v14 = v8 + 1;
    v15 = v8 + 1;
    v9 = AMCP::Core::Core::set_simple_property_value<1935893353u>(v7, (uint64_t)&__p);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = 0;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v9;
}

uint64_t AMCP::Core::Core::set_simple_property_value<1935893353u>(int8x8_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F6273636369;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v15 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v4, a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58CEF18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CEF00);
}

uint64_t AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const std::vector<unsigned int> &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const std::vector<unsigned int> &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B58CF334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[368];
}

uint64_t AMCP::Selector_Control::set_value_and_wait(AMCP::Selector_Control *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v14;
  _DWORD *v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = operator new(4uLL);
    __p = v8;
    *v8 = a2;
    v14 = v8 + 1;
    v15 = v8 + 1;
    v9 = AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(v7, (uint64_t)&__p);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = 0;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v9;
}

uint64_t AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(int8x8_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F6273636369;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v15 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v4, a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58CF750(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58CF738);
}

void AMCP::Selector_Control::get_multi_value(AMCP::Selector_Control *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1935893353u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t AMCP::Selector_Control::set_multi_value(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
    v8 = AMCP::Core::Core::set_simple_property_value<1935893353u>(v7, a2);
  else
    v8 = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

uint64_t AMCP::Selector_Control::set_multi_value_and_wait(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
    v8 = AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(v7, a2);
  else
    v8 = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void AMCP::Selector_Control::get_item_list(AMCP::Selector_Control *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  void *__p[2];
  uint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  void **v30;
  uint8_t buf[24];
  __int16 v32;
  _BYTE v33[18];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4 || (v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v6 = v5;
  v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (!v7)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_23;
  }
  v21 = 0x676C6F6273636169;
  v22 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v7, (const AMCP::Address *)&v21);
  if (!(_DWORD)has_property)
    goto LABEL_27;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, (int8x8_t *)v7, (unsigned int *)&v21);
  v9 = v28;
  if (!v28)
    goto LABEL_14;
  v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10))
  {
    v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v12);
    if (has_property)
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v9);
      AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(__p, (uint64_t)buf);
      v23 = *(_OWORD *)__p;
      v24 = v27;
      __p[1] = 0;
      v27 = 0;
      __p[0] = 0;
      v25 = 1;
      v30 = __p;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (*(_QWORD *)&v33[6])
        has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v33[6])(0, buf, 0, 0);
      goto LABEL_8;
    }
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
  AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t)buf, v9);
  v23 = *(_OWORD *)buf;
  v24 = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  v25 = 1;
  __p[0] = buf;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_8:
  v11 = 0;
LABEL_15:
  v13 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((v11 & 1) != 0)
  {
LABEL_27:
    LOBYTE(v23) = 0;
    v25 = 0;
    goto LABEL_28;
  }
  if (!v25)
  {
LABEL_28:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      HIBYTE(v27) = 4;
      strcpy((char *)__p, "scai");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 391;
      v32 = 2080;
      *(_QWORD *)v33 = "optional_value.operator BOOL() == true";
      *(_WORD *)&v33[8] = 2080;
      *(_QWORD *)&v33[10] = __p;
      v34 = 1024;
      v35 = 1735159650;
      v36 = 1024;
      v37 = 0;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2, v23, *((uint64_t *)&v23 + 1), (uint64_t)(*((_QWORD *)&v23 + 1) - v23) >> 4);
  *(_QWORD *)buf = &v23;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_23:
  v16 = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1B58CFCC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<unsigned int, unsigned int, applesauce::CF::StringRef>>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<unsigned int, unsigned int, applesauce::CF::StringRef>>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B58D00C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[370];
}

uint64_t AMCP::Stereo_Pan_Control::Stereo_Pan_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E6971948;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x7370616E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Control.cpp";
      v13 = 1024;
      v14 = 520;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_stereo_pan_control)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B58D03CC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Stereo_Pan_Control *AMCP::Stereo_Pan_Control::Stereo_Pan_Control(AMCP::Stereo_Pan_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  AMCP::Control *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  NSObject **v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = AMCP::Control::Control(this, a2, 1936744814, a5, a3, a4);
  *(_QWORD *)v6 = &off_1E6971948;
  v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x7370616E);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    v9 = *v12;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      v13 = 2080;
      v14 = "Control.cpp";
      v15 = 1024;
      v16 = 526;
      v17 = 2080;
      v18 = "constructed_correct_class(k_class_id_stereo_pan_control)";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B58D0538(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

float AMCP::Stereo_Pan_Control::get_value(AMCP::Stereo_Pan_Control *this)
{
  std::__shared_weak_count *v2;
  float v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v3 = 0.5;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
      {
        strcpy(buf, "vcpsbolg");
        buf[9] = 0;
        LOWORD(v17) = 0;
        v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v11 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v12 = pthread_self();
            v13 = pthread_mach_thread_np(v12);
            v15 = 4;
            strcpy((char *)__p, "spcv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v13;
            *(_WORD *)&buf[8] = 2080;
            v17 = "Core.h";
            v18 = 1024;
            v19 = 391;
            v20 = 2080;
            v21 = "optional_value.operator BOOL() == true";
            v22 = 2080;
            v23 = __p;
            v24 = 1024;
            v25 = 1735159650;
            v26 = 1024;
            v27 = 0;
            _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v15 < 0)
              operator delete(__p[0]);
          }
          abort();
        }
        v3 = *(float *)&v7;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_1B58D076C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Stereo_Pan_Control::set_value(AMCP::Stereo_Pan_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F6273706376;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58D0934(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58D08E4);
}

uint64_t AMCP::Stereo_Pan_Control::set_value_and_wait(AMCP::Stereo_Pan_Control *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v25 = 0x676C6F6273706376;
    v26 = 0;
    if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v25))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v25);
      v8 = v23;
      if (v23)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
LABEL_8:
          v10 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v7 = 1;
          goto LABEL_24;
        }
        v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13))
        {
          memset(v21, 0, sizeof(v21));
          *(float *)v21 = a2;
          v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
          if (v22)
            v22(0, (uint64_t)v21, 0, 0);
          goto LABEL_8;
        }
      }
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v7 = 0;
  }
LABEL_24:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B58D0B28(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58D0AD8);
}

unint64_t AMCP::Stereo_Pan_Control::get_channels(AMCP::Stereo_Pan_Control *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *__p[2];
  char v17;
  _BYTE buf[10];
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "ccpsbolg");
      buf[9] = 0;
      LOWORD(v19) = 0;
      v6 = AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v13 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          v17 = 4;
          strcpy((char *)__p, "spcc");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)&buf[8] = 2080;
          v19 = "Core.h";
          v20 = 1024;
          v21 = 391;
          v22 = 2080;
          v23 = "optional_value.operator BOOL() == true";
          v24 = 2080;
          v25 = __p;
          v26 = 1024;
          v27 = 1735159650;
          v28 = 1024;
          v29 = 0;
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v8 = v6;
      v9 = HIDWORD(v6);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return v8 | (v9 << 32);
}

void sub_1B58D0D4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Core::compute_system_differences(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t j;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t **v46;
  uint64_t *k;
  unint64_t v48;
  _QWORD *v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  int v66;
  const char *v67;
  unsigned int *v69;
  void *__p[2];
  void *v71[2];
  int v72;
  void *v73[5];
  void *v74[5];
  void *v75[5];
  void *v76[5];
  void *v77[5];
  void *v78[5];
  void *v79[5];
  __int128 v80;
  __int128 v81;
  float v82;
  void *v83;
  unsigned int *v84;
  void *v85;
  _BYTE *v86;
  void *v87;
  _BYTE *v88;
  void *v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;

  v92 = 0;
  v93 = 0;
  v94 = 0;
  v6 = a2[2];
  if (v6)
  {
    v7 = 0;
    v3 = 0;
    v8 = 0;
    v9 = v93;
    while (1)
    {
      if ((unint64_t)v8 >= v3)
      {
        v10 = v8 - v7;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
        {
          v93 = v9;
          v94 = v3;
          v92 = v7;
          goto LABEL_140;
        }
        if ((uint64_t)(v3 - (_QWORD)v7) >> 1 > v11)
          v11 = (uint64_t)(v3 - (_QWORD)v7) >> 1;
        if (v3 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
        else
          v13 = 0;
        v14 = (unsigned int *)(v12 + 4 * v10);
        *v14 = *(_DWORD *)(v6 + 16);
        v9 = v14 + 1;
        while (v8 != v7)
        {
          v15 = *--v8;
          *--v14 = v15;
        }
        v3 = v12 + 4 * v13;
        if (v7)
          operator delete(v7);
        v7 = v14;
      }
      else
      {
        *v8 = *(_DWORD *)(v6 + 16);
        v9 = v8 + 1;
      }
      v6 = *(_QWORD *)v6;
      v8 = v9;
      if (!v6)
      {
        v93 = v9;
        v94 = v3;
        v92 = v7;
        break;
      }
    }
  }
  v90 = 0;
  v89 = 0;
  v91 = 0;
  v16 = a3[2];
  if (!v16)
    goto LABEL_43;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = v90;
  do
  {
    if ((unint64_t)v19 >= v18)
    {
      v21 = (v19 - v17) >> 2;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
      {
        v91 = v18;
        v90 = v20;
        v89 = v17;
LABEL_140:
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v18 - (_QWORD)v17) >> 1 > v22)
        v22 = (uint64_t)(v18 - (_QWORD)v17) >> 1;
      if (v18 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      else
        v24 = 0;
      v3 = v23 + 4 * v21;
      *(_DWORD *)v3 = *(_DWORD *)(v16 + 16);
      v20 = (unsigned int *)(v3 + 4);
      while (v19 != v17)
      {
        v25 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *(_DWORD *)(v3 - 4) = v25;
        v3 -= 4;
      }
      v18 = v23 + 4 * v24;
      if (v17)
        operator delete(v17);
      v17 = (char *)v3;
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(v16 + 16);
      v20 = (unsigned int *)(v19 + 4);
    }
    v16 = *(_QWORD *)v16;
    v19 = (char *)v20;
  }
  while (v16);
  v91 = v18;
  v90 = v20;
  v89 = v17;
LABEL_43:
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  AMCP::Utility::compute_differences_sorted<unsigned int>((uint64_t)&v83, &v92, (unsigned int **)&v89);
  v80 = 0u;
  v81 = 0u;
  v82 = 1.0;
  v26 = (unsigned int *)v83;
  v69 = v84;
  if (v83 != v84)
  {
    while (2)
    {
      v27 = *v26;
      v28 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(*a2, a2[1], *v26);
      if (v28)
      {
        v29 = v28;
        v30 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(*a3, a3[1], v27);
        if (v30)
        {
          v31 = v30;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v71 = 0u;
          v72 = 1065353216;
          v101 = 0u;
          v102 = 0u;
          v103 = 1065353216;
          v98 = 0u;
          v99 = 0u;
          v100 = 1065353216;
          v95 = 0u;
          v96 = 0u;
          v97 = 1065353216;
          for (i = v29[5]; i; i = *(_QWORD *)i)
          {
            v3 = i + 16;
            v33 = std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(v31 + 3, (unsigned int *)(i + 16));
            if (v33)
            {
              v34 = v33;
              if ((uint64_t *)i != v33)
              {
                v35 = *(_QWORD *)(i + 64);
                v36 = v33[8];
                if (v35 && v36)
                {
                  if (!((uint64_t (*)(uint64_t, uint64_t, uint64_t *, _QWORD))v35)(5, i + 32, v33 + 4, 0))
                    goto LABEL_55;
                }
                else if (v35 | v36)
                {
LABEL_55:
                  v3 = (unint64_t)(v34 + 2);
                  v37 = (void **)&v101;
                  goto LABEL_56;
                }
              }
              v37 = __p;
            }
            else
            {
              v37 = (void **)&v98;
            }
LABEL_56:
            std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>((uint64_t)v37, (unsigned int *)v3, v3);
          }
          for (j = v31[5]; j; j = *(_QWORD *)j)
          {
            if (!std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(v29 + 3, (unsigned int *)(j + 16)))std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>((uint64_t)&v95, (unsigned int *)(j + 16), j + 16);
          }
          _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_((uint64_t)v76, (uint64_t)__p, (uint64_t)&v101, (uint64_t)&v98, (uint64_t)&v95);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v96);
          v39 = (void *)v95;
          *(_QWORD *)&v95 = 0;
          if (v39)
            operator delete(v39);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v99);
          v40 = (void *)v98;
          *(_QWORD *)&v98 = 0;
          if (v40)
            operator delete(v40);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v102);
          v41 = (void *)v101;
          *(_QWORD *)&v101 = 0;
          if (v41)
            operator delete(v41);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v71[0]);
          v42 = __p[0];
          __p[0] = 0;
          if (v42)
            operator delete(v42);
          _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_((uint64_t)__p, (uint64_t)v76, (uint64_t)v77, (uint64_t)v78, (uint64_t)v79);
          v43 = *v26;
          v44 = *((_QWORD *)&v80 + 1);
          if (*((_QWORD *)&v80 + 1))
          {
            v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v80 + 8));
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              v3 = *v26;
              if (*((_QWORD *)&v80 + 1) <= v43)
                v3 = v43 % *((_QWORD *)&v80 + 1);
            }
            else
            {
              v3 = (DWORD2(v80) - 1) & v43;
            }
            v46 = *(uint64_t ***)(v80 + 8 * v3);
            if (v46)
            {
              for (k = *v46; k; k = (uint64_t *)*k)
              {
                v48 = k[1];
                if (v48 == v43)
                {
                  if (*((_DWORD *)k + 4) == (_DWORD)v43)
                    goto LABEL_107;
                }
                else
                {
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v48 >= *((_QWORD *)&v80 + 1))
                      v48 %= *((_QWORD *)&v80 + 1);
                  }
                  else
                  {
                    v48 &= *((_QWORD *)&v80 + 1) - 1;
                  }
                  if (v48 != v3)
                    break;
                }
              }
            }
          }
          v49 = operator new(0xB8uLL);
          *(_QWORD *)&v101 = v49;
          *((_QWORD *)&v101 + 1) = &v81;
          *v49 = 0;
          v49[1] = v43;
          *((_DWORD *)v49 + 4) = *v26;
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 3), (uint64_t *)__p);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 8), (uint64_t *)v73);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 13), (uint64_t *)v74);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 18), (uint64_t *)v75);
          LOBYTE(v102) = 1;
          v50 = (float)(unint64_t)(*((_QWORD *)&v81 + 1) + 1);
          if (!v44 || (float)(v82 * (float)v44) < v50)
          {
            v51 = (v44 & (v44 - 1)) != 0;
            if (v44 < 3)
              v51 = 1;
            v52 = v51 | (2 * v44);
            v53 = vcvtps_u32_f32(v50 / v82);
            if (v52 <= v53)
              v54 = v53;
            else
              v54 = v52;
            std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v80, v54);
            v44 = *((_QWORD *)&v80 + 1);
            if ((*((_QWORD *)&v80 + 1) & (*((_QWORD *)&v80 + 1) - 1)) != 0)
            {
              if (*((_QWORD *)&v80 + 1) <= v43)
                v3 = v43 % *((_QWORD *)&v80 + 1);
              else
                v3 = v43;
            }
            else
            {
              v3 = (DWORD2(v80) - 1) & v43;
            }
          }
          v55 = v80;
          v56 = *(_QWORD **)(v80 + 8 * v3);
          if (v56)
          {
            *v49 = *v56;
          }
          else
          {
            *v49 = v81;
            *(_QWORD *)&v81 = v49;
            *(_QWORD *)(v55 + 8 * v3) = &v81;
            if (!*v49)
            {
LABEL_106:
              *(_QWORD *)&v101 = 0;
              ++*((_QWORD *)&v81 + 1);
              std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v101);
LABEL_107:
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v75[2]);
              v58 = v75[0];
              v75[0] = 0;
              if (v58)
                operator delete(v58);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v74[2]);
              v59 = v74[0];
              v74[0] = 0;
              if (v59)
                operator delete(v59);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v73[2]);
              v60 = v73[0];
              v73[0] = 0;
              if (v60)
                operator delete(v60);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v71[0]);
              v61 = __p[0];
              __p[0] = 0;
              if (v61)
                operator delete(v61);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v79[2]);
              v62 = v79[0];
              v79[0] = 0;
              if (v62)
                operator delete(v62);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v78[2]);
              v63 = v78[0];
              v78[0] = 0;
              if (v63)
                operator delete(v63);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v77[2]);
              v64 = v77[0];
              v77[0] = 0;
              if (v64)
                operator delete(v64);
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v76[2]);
              v65 = v76[0];
              v76[0] = 0;
              if (v65)
                operator delete(v65);
              if (++v26 != v69)
                continue;
              goto LABEL_124;
            }
            v57 = *(_QWORD *)(*v49 + 8);
            if ((v44 & (v44 - 1)) != 0)
            {
              if (v57 >= v44)
                v57 %= v44;
            }
            else
            {
              v57 &= v44 - 1;
            }
            v56 = (_QWORD *)(v80 + 8 * v57);
          }
          *v56 = v49;
          goto LABEL_106;
        }
        v66 = 50;
        v67 = "after_iter != in_after.end()";
      }
      else
      {
        v66 = 47;
        v67 = "before_iter != in_before.end()";
      }
      break;
    }
    __assert_rtn("compute_system_differences", "Snapshot.cpp", v66, v67);
  }
LABEL_124:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 3, v85, (uint64_t)v86, (v86 - (_BYTE *)v85) >> 2);
  std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map((uint64_t)(a1 + 6), (uint64_t)&v80);
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v80);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v83)
  {
    v84 = (unsigned int *)v83;
    operator delete(v83);
  }
  if (v89)
    operator delete(v89);
  if (v92)
    operator delete(v92);
}

void sub_1B58D153C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void *v12;
  void *v13;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a10 + 32) = v12;
    operator delete(v12);
  }
  v13 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v13;
    operator delete(v13);
  }
  __clang_call_terminate(a1);
}

void AMCP::Utility::compute_differences_sorted<unsigned int>(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  void **v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;

  v5 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = (void **)(a1 + 24);
    if (v5 == a3[1])
    {
LABEL_58:
      v46 = a1 + 24;
      while (v6 != v7)
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](&v46, v6++);
    }
    else
    {
      while (1)
      {
        v10 = *v6;
        v11 = *v5;
        if (*v6 == *v5)
        {
          v13 = *(unsigned int **)(a1 + 8);
          v12 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v13 >= v12)
          {
            v18 = *(unsigned int **)a1;
            v19 = ((uint64_t)v13 - *(_QWORD *)a1) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              goto LABEL_65;
            v21 = v12 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
              v18 = *(unsigned int **)a1;
              v13 = *(unsigned int **)(a1 + 8);
              v10 = *v6;
            }
            else
            {
              v23 = 0;
            }
            v39 = (unsigned int *)(v22 + 4 * v19);
            *v39 = v10;
            v14 = v39 + 1;
            while (v13 != v18)
            {
              v40 = *--v13;
              *--v39 = v40;
            }
            *(_QWORD *)a1 = v39;
            *(_QWORD *)(a1 + 8) = v14;
            *(_QWORD *)(a1 + 16) = v22 + 4 * v23;
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v13 = v10;
            v14 = v13 + 1;
          }
          *(_QWORD *)(a1 + 8) = v14;
          ++v6;
          ++v5;
        }
        else if (v10 >= v11)
        {
          v25 = *(char **)(a1 + 56);
          v24 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v25 >= v24)
          {
            v33 = *(char **)(a1 + 48);
            v34 = (v25 - v33) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
LABEL_65:
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v36 = v24 - (_QWORD)v33;
            if (v36 >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
              v33 = *(char **)(a1 + 48);
              v25 = *(char **)(a1 + 56);
              v11 = *v5;
            }
            else
            {
              v38 = 0;
            }
            v43 = (unsigned int *)(v37 + 4 * v34);
            *v43 = v11;
            v26 = v43 + 1;
            while (v25 != v33)
            {
              v44 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *--v43 = v44;
            }
            *(_QWORD *)(a1 + 48) = v43;
            *(_QWORD *)(a1 + 56) = v26;
            *(_QWORD *)(a1 + 64) = v37 + 4 * v38;
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v25 = v11;
            v26 = v25 + 4;
          }
          ++v5;
          *(_QWORD *)(a1 + 56) = v26;
        }
        else
        {
          v16 = *(char **)(a1 + 32);
          v15 = *(_QWORD *)(a1 + 40);
          if ((unint64_t)v16 >= v15)
          {
            v27 = (char *)*v8;
            v28 = (v16 - (_BYTE *)*v8) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              goto LABEL_65;
            v30 = v15 - (_QWORD)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v31);
              v27 = *(char **)(a1 + 24);
              v16 = *(char **)(a1 + 32);
              v10 = *v6;
            }
            else
            {
              v32 = 0;
            }
            v41 = (unsigned int *)(v31 + 4 * v28);
            *v41 = v10;
            v17 = v41 + 1;
            while (v16 != v27)
            {
              v42 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *--v41 = v42;
            }
            *(_QWORD *)(a1 + 24) = v41;
            *(_QWORD *)(a1 + 32) = v17;
            *(_QWORD *)(a1 + 40) = v31 + 4 * v32;
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_DWORD *)v16 = v10;
            v17 = v16 + 4;
          }
          ++v6;
          *(_QWORD *)(a1 + 32) = v17;
        }
        v7 = a2[1];
        if (v6 == v7)
          break;
        if (v5 == a3[1])
          goto LABEL_58;
      }
    }
  }
  v45 = a3[1];
  if (v5 != v45)
  {
    v46 = a1 + 48;
    do
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](&v46, v5++);
    while (v5 != v45);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1, a2);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(v9 + 40, a3);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 80, a4);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 120, a5);
  return a1;
}

void sub_1B58D19F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 128);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 88);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 48);
  return std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD *, _QWORD, _QWORD);

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))v1[8];
      if (v3)
        v3(0, v1 + 4, 0, 0);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1B58D1BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  void (*v16)(uint64_t, uint64_t, _QWORD *, _QWORD);
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = v7 & 0xFF000000 | (unint64_t)(v6 << 32) | *(_QWORD *)&v8 & 0xFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v7 & 0xFF000000 | (unint64_t)(v6 << 32) | *(_QWORD *)&v8 & 0xFFFFFFLL;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == __PAIR64__(v7, v6) && *((_DWORD *)i + 6) == v8)
            return;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x48uLL);
  *v15 = 0;
  v15[1] = v9;
  v15[2] = *(_QWORD *)a3;
  *((_DWORD *)v15 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v15[8] = 0;
  v16 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(a3 + 48);
  if (v16)
    v16(1, a3 + 16, v15 + 4, 0);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B58D1E50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void (*v3)(_QWORD, _QWORD *, _QWORD, _QWORD);

  if (a1)
  {
    v3 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD))__p[8];
    if (v3)
      v3(0, __p + 4, 0, 0);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = v4 & 0xFF000000 | (unint64_t)(v3 << 32) | *(_QWORD *)&v5 & 0xFFFFFFLL;
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4 & 0xFF000000 | (unint64_t)(v3 << 32) | *(_QWORD *)&v5 & 0xFFFFFFLL;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = (uint64_t *)*result)
  {
    v11 = result[1];
    if (v6 == v11)
    {
      if (result[2] == __PAIR64__(v4, v3) && *((_DWORD *)result + 6) == v5)
        return result;
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
      }
      else
      {
        v11 &= *(_QWORD *)&v2 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

uint64_t std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>(a1, *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_1B58D2008(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0xB8uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  v24 = 0;
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl((uint64_t)(v13 + 3), (uint64_t)(a3 + 2));
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v13 = *v21;
LABEL_38:
    *v21 = v13;
    goto LABEL_39;
  }
  *v13 = *v12;
  *v12 = v13;
  *(_QWORD *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    v22 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
}

void sub_1B58D2250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1, a2);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(v4 + 40, a2 + 40);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 80, a2 + 80);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 120, a2 + 120);
  return a1;
}

void sub_1B58D22C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;

  v4 = *a1;
  v6 = *(_DWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
      v8 = *(_DWORD **)v4;
      v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_DWORD *)(v13 + 4 * v9);
    v16 = v13 + 4 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *AMCP::Core::make_external_diff(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t *v5;
  unsigned int *i;
  unsigned int *j;
  unsigned int *k;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  char *v13;
  int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  char *v20;
  unsigned int *v21;
  const char *v22;
  const char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  char *v33;
  unsigned int *v34;
  _BYTE v35[24];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)&v35[8] = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  *(_QWORD *)(a1 + 48) = v34;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v35;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)&v35[8] = 0;
  v34 = 0;
  result = boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(&v34);
  v5 = *(uint64_t **)(a2 + 64);
  if (v5)
  {
    v22 = "emplace";
    v23 = "this->priv_in_range_or_end(position)";
    do
    {
      if (v5[11] || v5[16] || v5[21])
      {
        memset(v32, 0, sizeof(v32));
        for (i = (unsigned int *)v5[10]; i; i = *(unsigned int **)i)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v32, 0, i + 4, (uint64_t)(i + 8));
        memset(v31, 0, sizeof(v31));
        for (j = (unsigned int *)v5[15]; j; j = *(unsigned int **)j)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v31, 0, j + 4, (uint64_t)(j + 8));
        memset(v30, 0, sizeof(v30));
        for (k = (unsigned int *)v5[20]; k; k = *(unsigned int **)k)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v30, 0, k + 4, (uint64_t)(k + 8));
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v24, (const char *)v32);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v26, (const char *)v31);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v28, (const char *)v30);
        v33 = 0;
        v10 = *(unsigned int **)(a1 + 48);
        v9 = *(_QWORD *)(a1 + 56);
        if (!v10 && v9)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        v11 = (unsigned int *)(v5 + 2);
        v12 = &v10[20 * v9];
        v34 = v12;
        if (boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>>::priv_insert_unique_prepare(v10, &v34, *((_DWORD *)v5 + 4), (unsigned int **)&v33))
        {
          v13 = v33;
          v14 = 1862;
          if (v10 > (unsigned int *)v33 || v33 > (char *)v12)
            goto LABEL_35;
          v15 = *(_QWORD *)(a1 + 64);
          if (v15 < v9)
          {
            v14 = 2821;
            v22 = "priv_insert_forward_range";
            v23 = "this->m_holder.capacity() >= this->m_holder.m_size";
LABEL_35:
            __assert_rtn(v22, "vector.hpp", v14, v23);
          }
          if (v15 == v9)
          {
            boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>*,unsigned int const&,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>(&v34, (char *)(a1 + 48), v33, (uint64_t)&v24, (_DWORD *)v5 + 4);
          }
          else if (v12 == (unsigned int *)v33)
          {
            *v12 = *v11;
            v21 = &v10[20 * v9];
            *((_QWORD *)v21 + 1) = v24;
            *((_OWORD *)v21 + 1) = v25;
            v25 = 0uLL;
            v24 = 0;
            *((_QWORD *)v21 + 4) = v26;
            *(_OWORD *)(v21 + 10) = v27;
            v27 = 0uLL;
            v26 = 0;
            *((_QWORD *)v21 + 7) = v28;
            *((_OWORD *)v21 + 4) = v29;
            v28 = 0;
            v29 = 0uLL;
            *(_QWORD *)(a1 + 56) = v9 + 1;
          }
          else
          {
            v16 = v12 - 20;
            *v12 = *(v12 - 20);
            v17 = &v10[20 * v9];
            *((_QWORD *)v17 + 1) = *((_QWORD *)v12 - 9);
            *((_OWORD *)v17 + 1) = *((_OWORD *)v12 - 4);
            *((_QWORD *)v12 - 9) = 0;
            *((_QWORD *)v12 - 8) = 0;
            *((_QWORD *)v17 + 4) = *((_QWORD *)v12 - 6);
            *(_OWORD *)(v17 + 10) = *(_OWORD *)(v12 - 10);
            *((_QWORD *)v12 - 7) = 0;
            *((_QWORD *)v12 - 6) = 0;
            *((_QWORD *)v12 - 5) = 0;
            *((_QWORD *)v12 - 4) = 0;
            *((_QWORD *)v17 + 7) = *((_QWORD *)v12 - 3);
            *((_OWORD *)v17 + 4) = *((_OWORD *)v12 - 1);
            *((_QWORD *)v12 - 2) = 0;
            *((_QWORD *)v12 - 1) = 0;
            *((_QWORD *)v12 - 3) = 0;
            *(_QWORD *)(a1 + 56) = v9 + 1;
            if (v12 - 20 != (unsigned int *)v13)
            {
              v18 = (char *)(v12 - 20);
              do
              {
                v19 = *((_DWORD *)v18 - 20);
                v18 -= 80;
                *v16 = v19;
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)v16 + 1, (char **)v16 - 9);
                v16 = (unsigned int *)v18;
              }
              while (v18 != v13);
            }
            LODWORD(v34) = *v11;
            v20 = v24;
            *(_OWORD *)&v35[8] = v25;
            v24 = 0;
            v25 = 0uLL;
            *(_QWORD *)v35 = v20;
            v36 = v26;
            v37 = v27;
            v27 = 0uLL;
            v26 = 0;
            v38 = v28;
            v39 = v29;
            v29 = 0uLL;
            v28 = 0;
            *(_DWORD *)v13 = (_DWORD)v34;
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)v13 + 1, (char **)v35);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v38);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v36);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v35);
          }
        }
        else
        {
          if (v9 < 0xCCCCCCCCCCCCCCCDLL * ((v33 - (char *)v10) >> 4))
            __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)&v10[4 * ((v33 - (char *)v10) >> 4) + 2], &v24);
        }
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v28);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v26);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v24);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v30);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v31);
        result = boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v32);
      }
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B58D2894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a2)
  {
    v18 = *(void **)v16;
    if (*(_QWORD *)v16)
    {
      *(_QWORD *)(v16 + 8) = v18;
      operator delete(v18);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1[1];
  if (v2)
  {
    v3 = (_QWORD *)(*a1 + 32);
    do
    {
      --v2;
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3 + 3);
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3);
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3 - 3);
      v3 += 10;
    }
    while (v2);
  }
  if (a1[2])
    operator delete((void *)*a1);
  return a1;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  unsigned int **v30;
  BOOL inserted;
  unsigned int *v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  unsigned int *v37;
  AMCP::Thing *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  void (*v44)(uint64_t, uint64_t, _OWORD *, _QWORD);
  unsigned int *v45;
  void (*v46)(uint64_t, uint64_t);
  BOOL v48;
  char v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  _OWORD v55[2];
  void (*v56)(_QWORD, _OWORD *, _QWORD, _QWORD);
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v51 = 0;
  if (!a3)
  {
    v9 = *(unsigned int **)a2;
    v28 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2)
      v29 = 1;
    else
      v29 = v28 == 0;
    if (!v29)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v18 = &v9[14 * v28];
LABEL_36:
    v53 = v18;
    v30 = &v53;
    goto LABEL_37;
  }
  v9 = *(unsigned int **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = &v9[14 * v10];
  if (v12 == a3)
    goto LABEL_15;
  v13 = *a4;
  v14 = a4[1];
  v16 = *a3;
  v15 = a3[1];
  v17 = *a4 == *a3;
  if (v14 >= v15)
    v17 = 0;
  if (v13 < v16 || v17 || v13 == v16 && v14 == v15 && a4[2] < a3[2])
  {
LABEL_15:
    v51 = a3;
    if (v9 == a3)
      goto LABEL_29;
    v19 = *(a3 - 14);
    v20 = *(a3 - 13);
    v18 = a3 - 14;
    v21 = *a4;
    v22 = a4[1];
    v23 = v19 == *a4;
    if (v20 >= v22)
      v23 = 0;
    if (v19 < v21
      || v23
      || ((v24 = *(a3 - 12), v25 = a4[2], v19 == v21) ? (v26 = v20 == v22) : (v26 = 0),
          !v26 ? (v27 = 0) : (v27 = 1),
          v26 && v24 < v25))
    {
LABEL_29:
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_38;
    }
    v48 = v19 == v21 && v22 < v20;
    if (v25 < v24)
      v49 = v27;
    else
      v49 = 0;
    if (v21 >= v19 && !v48 && (v49 & 1) == 0)
    {
      v51 = a3 - 14;
      *(_BYTE *)(a1 + 8) = 0;
      goto LABEL_70;
    }
    goto LABEL_36;
  }
  v52 = v12;
  v30 = &v52;
  v9 = a3;
LABEL_37:
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::priv_insert_unique_prepare(v9, v30, a4, &v51);
  *(_BYTE *)(a1 + 8) = inserted;
  if (!inserted)
  {
LABEL_70:
    if (*(_QWORD *)(a2 + 8) < (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v51 - *(_QWORD *)a2) >> 3)))
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    v50 = *(_QWORD *)a2 + 8 * (((uint64_t)v51 - *(_QWORD *)a2) >> 3);
    *(_QWORD *)a1 = v50;
    AMCP::Thing::operator=((AMCP::Thing *)(v50 + 16), a5, (AMCP::Thing *)a3);
    return;
  }
LABEL_38:
  v32 = v51;
  v33 = *(unsigned int **)a2;
  if (*(_QWORD *)a2 > (unint64_t)v51)
    goto LABEL_72;
  v34 = *(_QWORD *)(a2 + 8);
  if (!v33 && v34)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v35 = &v33[14 * v34];
  if (v51 > v35)
LABEL_72:
    __assert_rtn("emplace", "vector.hpp", 1862, "this->priv_in_range_or_end(position)");
  v36 = *(_QWORD *)(a2 + 16);
  if (v36 < v34)
    __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
  if (v36 == v34)
  {
    boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,boost::container::dtl::pair<AMCP::Address,AMCP::Thing>*,AMCP::Address const&,AMCP::Thing const&>>(&v53, (char *)a2, (uint64_t)v51, a5, (uint64_t)a4);
    v32 = v53;
  }
  else if (v35 == v51)
  {
    *(_QWORD *)v51 = *(_QWORD *)a4;
    v32[2] = a4[2];
    v45 = &v33[14 * v34];
    *((_OWORD *)v45 + 1) = 0u;
    v45 += 4;
    *((_QWORD *)v45 + 4) = 0;
    *((_OWORD *)v45 + 1) = 0u;
    v46 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
    if (v46)
      v46(1, a5);
    ++*(_QWORD *)(a2 + 8);
  }
  else
  {
    v37 = v35 - 14;
    boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair((uint64_t)v35, (uint64_t)(v35 - 14));
    ++*(_QWORD *)(a2 + 8);
    if (v37 != v32)
    {
      v39 = v37;
      do
      {
        v40 = *((_QWORD *)v39 - 7);
        v39 -= 14;
        *(_QWORD *)v37 = v40;
        v37[2] = *(v37 - 12);
        AMCP::swap((AMCP::Thing *)(v37 - 10), (AMCP::Thing *)(v37 + 4), v38);
        v37 = v39;
      }
      while (v39 != v32);
    }
    v41 = *a4;
    v42 = a4[1];
    LODWORD(v53) = *a4;
    HIDWORD(v53) = v42;
    v43 = a4[2];
    v54 = v43;
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v44 = *(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(a5 + 32);
    if (v44)
    {
      v44(1, a5, v55, 0);
      v41 = v53;
      v42 = HIDWORD(v53);
      v43 = v54;
    }
    *v32 = v41;
    v32[1] = v42;
    v32[2] = v43;
    AMCP::swap((AMCP::Thing *)v55, (AMCP::Thing *)(v32 + 4), v38);
    if (v56)
      v56(0, v55, 0, 0);
  }
  *(_QWORD *)a1 = v32;
}

void sub_1B58D2DEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  void (**v3)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = a1[1];
  if (v2)
  {
    v3 = (void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*a1 + 48);
    do
    {
      if (*v3)
        (*v3)(0, (uint64_t)(v3 - 4), 0, 0);
      v3 += 7;
      --v2;
    }
    while (v2);
  }
  if (a1[2])
    operator delete((void *)*a1);
  return a1;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>>::priv_insert_unique_prepare(unsigned int *a1, unsigned int **a2, unsigned int a3, unsigned int **a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  if (*a2 != a1)
  {
    v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)*a2 - (char *)a1) >> 4);
    do
    {
      if (v4 != 1 && !a1)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!a1)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v5 = v4 >> 1;
      v6 = &a1[20 * (v4 >> 1)];
      v8 = *v6;
      v7 = v6 + 20;
      v4 += ~(v4 >> 1);
      if (v8 >= a3)
        v4 = v5;
      else
        a1 = v7;
    }
    while (v4);
  }
  *a4 = a1;
  if (a1 == *a2)
    return 1;
  if (!a1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a1 > a3;
}

char **std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>(char **a1, char **a2)
{
  char **v4;

  v4 = boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(a1, a2);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(v4 + 3, a2 + 3);
  return boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(a1 + 6, a2 + 6);
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>*,unsigned int const&,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>(_QWORD *a1, char *a2, char *a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;

  v5 = *((_QWORD *)a2 + 2);
  if (v5 != *((_QWORD *)a2 + 1))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (v5 == 0x199999999999999)
    goto LABEL_28;
  if (v5 >> 61 > 4)
    v6 = -1;
  else
    v6 = 8 * v5;
  if (v5 >> 61)
    v7 = v6;
  else
    v7 = 8 * v5 / 5;
  if (v7 >= 0x199999999999999)
    v7 = 0x199999999999999;
  v8 = v5 + 1 > v7 ? v5 + 1 : v7;
  if (v8 > 0x199999999999999)
LABEL_28:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v14 = *(char **)a2;
  v15 = (char *)operator new(80 * v8);
  v16 = v15;
  v17 = *(char **)a2;
  v18 = *(_QWORD *)a2 + 80 * *((_QWORD *)a2 + 1);
  v19 = v15;
  if (*(char **)a2 != a3)
  {
    v20 = *(char **)a2;
    v19 = v15;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
      *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
      *((_QWORD *)v20 + 5) = 0;
      *((_QWORD *)v20 + 6) = 0;
      *((_QWORD *)v20 + 4) = 0;
      *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
      *((_OWORD *)v19 + 4) = *((_OWORD *)v20 + 4);
      *((_QWORD *)v20 + 7) = 0;
      *((_QWORD *)v20 + 8) = 0;
      *((_QWORD *)v20 + 9) = 0;
      v19 += 80;
      v20 += 80;
    }
    while (v20 != a3);
  }
  *(_DWORD *)v19 = *a5;
  *((_QWORD *)v19 + 1) = *(_QWORD *)a4;
  *((_OWORD *)v19 + 1) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)v19 + 4) = *(_QWORD *)(a4 + 24);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *((_QWORD *)v19 + 7) = *(_QWORD *)(a4 + 48);
  *((_OWORD *)v19 + 4) = *(_OWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  if ((char *)v18 != a3)
  {
    v21 = v19 + 144;
    v22 = a3;
    do
    {
      *((_DWORD *)v21 - 16) = *(_DWORD *)v22;
      *((_QWORD *)v21 - 7) = *((_QWORD *)v22 + 1);
      *(v21 - 3) = *((_OWORD *)v22 + 1);
      *((_QWORD *)v22 + 2) = 0;
      *((_QWORD *)v22 + 3) = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v21 - 4) = *((_QWORD *)v22 + 4);
      *(_OWORD *)((char *)v21 - 24) = *(_OWORD *)(v22 + 40);
      *((_QWORD *)v22 + 5) = 0;
      *((_QWORD *)v22 + 6) = 0;
      *((_QWORD *)v22 + 4) = 0;
      *((_QWORD *)v21 - 1) = *((_QWORD *)v22 + 7);
      *v21 = *((_OWORD *)v22 + 4);
      v21 += 5;
      *((_QWORD *)v22 + 7) = 0;
      *((_QWORD *)v22 + 8) = 0;
      *((_QWORD *)v22 + 9) = 0;
      v22 += 80;
    }
    while (v22 != (char *)v18);
  }
  v23 = *((_QWORD *)a2 + 1);
  if (v17)
  {
    if (v23)
    {
      v24 = v17 + 32;
      do
      {
        --v23;
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24 + 3);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24 - 3);
        v24 += 10;
      }
      while (v23);
    }
    operator delete(*(void **)a2);
    v23 = *((_QWORD *)a2 + 1);
  }
  *(_QWORD *)a2 = v16;
  *((_QWORD *)a2 + 1) = v23 + 1;
  *((_QWORD *)a2 + 2) = v8;
  *a1 = &v16[a3 - v14];
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_1E69963E0;
  exception[1] = this;
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E50688);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "unknown boost::container exception";
}

char **boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(char **a1, char **a2)
{
  char *v4;
  char *v5;
  void (**v6)(_QWORD, uint64_t, _QWORD, _QWORD);

  if (a2 != a1)
  {
    v4 = *a1;
    v5 = a1[1];
    if (v5)
    {
      v6 = (void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v4 + 48);
      do
      {
        if (*v6)
          (*v6)(0, (uint64_t)(v6 - 4), 0, 0);
        v6 += 7;
        --v5;
      }
      while (v5);
      v4 = *a1;
    }
    a1[1] = 0;
    if (v4)
      operator delete(v4);
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return a1;
}

_QWORD *boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(_QWORD *a1, const char *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t, uint64_t, char *, _QWORD);

  v4 = *((_QWORD *)a2 + 1);
  *a1 = 0;
  a1[1] = v4;
  a1[2] = 0;
  if (v4)
  {
    if (v4 >= 0x24924924924924ALL)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    v5 = (char *)operator new(56 * v4);
    *a1 = v5;
    a1[2] = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)a2;
    do
    {
      v9 = &v5[v7];
      *(_QWORD *)v9 = *(_QWORD *)(v8 + v7);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(v8 + v7 + 8);
      *(_OWORD *)&v5[v7 + 16] = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((_QWORD *)v9 + 6) = 0;
      v10 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(v8 + v7 + 48);
      if (v10)
        v10(1, v8 + v7 + 16, &v5[v7 + 16], 0);
      v7 += 56;
      --v6;
    }
    while (v6);
  }
  return a1;
}

void sub_1B58D3484(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (*(_QWORD *)(v1 + 16))
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::priv_insert_unique_prepare(unsigned int *a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;

  if (*a2 != a1)
  {
    v4 = 0x6DB6DB6DB6DB6DB7 * (((char *)*a2 - (char *)a1) >> 3);
    v5 = *a3;
    v6 = a3[1];
    do
    {
      if (v4 != 1 && !a1)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!a1)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v4 >> 1;
      v8 = &a1[14 * (v4 >> 1)];
      v9 = *v8;
      v10 = v8[1];
      v11 = *v8 == v5;
      if (v10 >= v6)
        v11 = 0;
      if (v9 < v5 || v11 || (v9 == v5 ? (v12 = v10 == v6) : (v12 = 0), v12 ? (v13 = v8[2] >= a3[2]) : (v13 = 1), !v13))
      {
        a1 = v8 + 14;
        v7 = v4 + ~v7;
      }
      v4 = v7;
    }
    while (v7);
  }
  *a4 = a1;
  if (a1 == *a2)
    return 1;
  if (!a1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v14 = *a3;
  v15 = a3[1];
  v17 = *a1;
  v16 = a1[1];
  v18 = v15 < v16 && *a3 == *a1;
  v19 = 1;
  if (v14 >= v17 && !v18)
    return v14 == v17 && v15 == v16 && a3[2] < a1[2];
  return v19;
}

AMCP::Thing *AMCP::Thing::operator=(AMCP::Thing *a1, uint64_t a2, AMCP::Thing *a3)
{
  void (*v4)(uint64_t);
  _OWORD v6[2];
  void (*v7)(_QWORD, _OWORD *, _QWORD, _QWORD);

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = *(void (**)(uint64_t))(a2 + 32);
  if (v4)
    v4(1);
  AMCP::swap((AMCP::Thing *)v6, a1, a3);
  if (v7)
    v7(0, v6, 0, 0);
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,boost::container::dtl::pair<AMCP::Address,AMCP::Thing>*,AMCP::Address const&,AMCP::Thing const&>>(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  char *v31;

  v5 = *((_QWORD *)a2 + 2);
  if (v5 != *((_QWORD *)a2 + 1))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (v5 == 0x249249249249249)
    goto LABEL_32;
  if (v5 >> 61 > 4)
    v6 = -1;
  else
    v6 = 8 * v5;
  if (v5 >> 61)
    v7 = v6;
  else
    v7 = 8 * v5 / 5;
  if (v7 >= 0x249249249249249)
    v7 = 0x249249249249249;
  v8 = v5 + 1 > v7 ? v5 + 1 : v7;
  if (v8 > 0x249249249249249)
LABEL_32:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v27 = *(_QWORD *)a2;
  v13 = (char *)operator new(56 * v8);
  v14 = v13;
  v15 = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1);
  v29 = v13;
  v31 = a2;
  v17 = (uint64_t)v13;
  if (v15 != a3)
  {
    v18 = v15;
    v17 = (uint64_t)v13;
    do
    {
      boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(v17, v18);
      v18 += 56;
      v17 += 56;
    }
    while (v18 != a3);
  }
  v30 = v17;
  *(_QWORD *)v17 = *(_QWORD *)a5;
  *(_DWORD *)(v17 + 8) = *(_DWORD *)(a5 + 8);
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_QWORD *)(v17 + 48) = 0;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a4 + 32);
  if (v19)
    v19(1, a4, v17 + 16, 0);
  v20 = v15 + 56 * v16;
  if (v20 != a3)
  {
    v21 = v17 + 56;
    v22 = a3;
    do
    {
      v23 = boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(v21, v22);
      v22 += 56;
      v21 = v23 + 56;
    }
    while (v22 != v20);
  }
  v29 = 0;
  v30 = 0;
  boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range((uint64_t *)&v29);
  if (v15)
  {
    v24 = *((_QWORD *)a2 + 1);
    if (v24)
    {
      v25 = (void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v15 + 48);
      do
      {
        if (*v25)
          (*v25)(0, (uint64_t)(v25 - 4), 0, 0);
        v25 += 7;
        --v24;
      }
      while (v24);
    }
    operator delete(*(void **)a2);
  }
  v26 = *((_QWORD *)a2 + 1) + 1;
  *(_QWORD *)a2 = v14;
  *((_QWORD *)a2 + 1) = v26;
  *((_QWORD *)a2 + 2) = v8;
  *a1 = &v14[a3 - v27];
}

void sub_1B58D38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range((uint64_t *)va);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(uint64_t a1, uint64_t a2)
{
  int v3;
  void (*v4)(uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(void (**)(uint64_t, uint64_t))(a2 + 48);
  if (v4)
    v4(2, a2 + 16);
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    v4 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 48);
    if (v4)
    {
      v4(0, v2 + 16, 0, 0);
      v2 = *a1;
      v3 = a1[1];
    }
    v2 += 56;
    *a1 = v2;
  }
  return a1;
}

void AMCP::make_description_from_thing(AMCP *this, const AMCP::Thing *a2)
{
  void (*v4)(uint64_t, const AMCP::Thing *, _QWORD, uint64_t *);
  CFTypeRef v5;
  CFURLRef v6;
  CFDataRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFDictionaryRef CFDictionaryRef;
  CFTypeRef v11;
  CFTypeRef cf[2];
  CFTypeRef v13;
  CFURLRef url;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (void (*)(uint64_t, const AMCP::Thing *, _QWORD, uint64_t *))*((_QWORD *)a2 + 4);
  v15 = 0;
  if (v4)
    v4(3, a2, 0, &v15);
  if (v15 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf, (uint64_t)a2);
    v5 = cf[0];
    if (cf[0])
      goto LABEL_30;
    goto LABEL_71;
  }
  if (v15 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf, (uint64_t)a2);
    v5 = cf[0];
    if (cf[0])
      goto LABEL_30;
    goto LABEL_71;
  }
  if (v15 != AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>())
  {
    if (v15 == AMCP::Implementation::get_type_marker<BOOL>())
    {
      AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(cf, (uint64_t)a2);
      v5 = cf[0];
      if (cf[0])
        goto LABEL_30;
      goto LABEL_71;
    }
    if (v15 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
      || v15 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
    {
      AMCP::Thing::convert_to<applesauce::CF::DataRef>(cf, (uint64_t)a2);
      v5 = cf[0];
      if (cf[0])
      {
LABEL_30:
        CFRetain(cf[0]);
        *(_QWORD *)this = v5;
        CFRelease(v5);
        return;
      }
      goto LABEL_71;
    }
    if (v15 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
      && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
      && !AMCP::is_one_of<AudioValueRange,CA::ValueRange,applesauce::CF::DictionaryRef>(&v15)
      && v15 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
      && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
      && !AMCP::is_one_of<AudioStreamBasicDescription,CA::StreamDescription,applesauce::CF::DictionaryRef>(&v15))
    {
      if (AMCP::is_one_of<std::vector<AudioStreamBasicDescription>,std::vector<CA::StreamDescription>,applesauce::CF::ArrayRef>(&v15))
        goto LABEL_42;
      if (!AMCP::is_one_of<AudioStreamRangedDescription,CA::RangedStreamDescription,applesauce::CF::DictionaryRef>(&v15))
      {
        if (AMCP::is_one_of<std::vector<AudioStreamRangedDescription>,std::vector<CA::RangedStreamDescription>,applesauce::CF::ArrayRef>(&v15))
          goto LABEL_42;
        if (v15 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
          && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          if (v15 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
            || v15 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
            || v15 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
            || v15 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            goto LABEL_42;
          }
          if (v15 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
            && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
          {
            if (v15 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
              && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              if (AMCP::is_one_of<BOOL,char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(&v15))
              {
                AMCP::Thing::convert_to<applesauce::CF::NumberRef>(cf, (uint64_t)a2);
                applesauce::CF::NumberRef::operator applesauce::CF::TypeRef(this, cf[0]);
                applesauce::CF::NumberRef::~NumberRef(cf);
                return;
              }
              if (!AMCP::is_one_of<std::vector<BOOL>,std::vector<char>,std::vector<signed char>,std::vector<unsigned char>,std::vector<short>,std::vector<unsigned short>,std::vector<int>,std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(&v15))
              {
                if (v15 == AMCP::Implementation::get_type_marker<std::string>()
                  || v15 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
                {
                  AMCP::Thing::convert_to<applesauce::CF::StringRef>(cf, (uint64_t)a2);
                  applesauce::CF::StringRef::operator applesauce::CF::TypeRef(this, cf[0]);
                  applesauce::CF::StringRef::~StringRef(cf);
                  return;
                }
                if (v15 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
                  && v15 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
                {
                  if (AMCP::is_one_of<mcp_applesauce::CF::PropertyListRef,applesauce::CF::StringRef,applesauce::CF::DataRef,applesauce::CF::NumberRef,applesauce::CF::BooleanRef,applesauce::CF::DateRef,applesauce::CF::ArrayRef,applesauce::CF::DictionaryRef>(&v15))
                  {
                    AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(cf, (uint64_t)a2);
                    mcp_applesauce::CF::PropertyListRef::operator applesauce::CF::TypeRef(this, cf[0]);
                    mcp_applesauce::CF::PropertyListRef::~PropertyListRef(cf);
                    return;
                  }
                  goto LABEL_71;
                }
              }
            }
LABEL_42:
            AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf, (uint64_t)a2);
            applesauce::CF::ArrayRef::operator applesauce::CF::TypeRef(this, cf[0]);
            applesauce::CF::ArrayRef::~ArrayRef(cf);
            return;
          }
        }
      }
    }
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf, (uint64_t)a2);
    applesauce::CF::DictionaryRef::operator applesauce::CF::TypeRef(this, cf[0]);
    applesauce::CF::DictionaryRef::~DictionaryRef(cf);
    return;
  }
  AMCP::Thing::convert_to<applesauce::CF::URLRef>(&url, (uint64_t)a2);
  v6 = url;
  if (!url)
  {
LABEL_71:
    *(_QWORD *)this = 0;
    return;
  }
  v7 = CFURLCreateData(0, url, 0x8000100u, 1u);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v13, v7);
  if (v13)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v11, "Really A CFURL");
    v8 = v11;
    if (v11)
      CFRetain(v11);
    v16 = v8;
    v9 = v13;
    if (v13)
      CFRetain(v13);
    v17 = v9;
    cf[0] = &v16;
    cf[1] = (CFTypeRef)1;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)cf);
    CFRetain(CFDictionaryRef);
    *(_QWORD *)this = CFDictionaryRef;
    CFRelease(CFDictionaryRef);
    if (v17)
      CFRelease(v17);
    if (v16)
      CFRelease(v16);
    if (v11)
      CFRelease(v11);
    if (v13)
      CFRelease(v13);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  CFRelease(v6);
}

void sub_1B58D3EF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Address::to_string(std::string *this, unsigned int *a2, int16x8_t a3)
{
  int32x4_t v5;
  uint32x4_t v6;
  std::string *v7;
  int16x8_t v8;
  int32x4_t v9;
  uint32x4_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  std::string v18;
  std::string::value_type __s[8];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  a3.i32[0] = bswap32(*a2);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v5.i64[0] = 0x1F0000001FLL;
  v5.i64[1] = 0x1F0000001FLL;
  v6.i64[0] = 0x5F0000005FLL;
  v6.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v6, (uint32x4_t)vsraq_n_s32(v5, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  *((_BYTE *)&v21.__r_.__value_.__s + 23) = 4;
  LODWORD(v21.__r_.__value_.__l.__data_) = vmovn_s16(a3).u32[0];
  v21.__r_.__value_.__s.__data_[4] = 0;
  v7 = std::string::append(&v21, "/", 1uLL);
  v8 = *(int16x8_t *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(int16x8_t *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v8.i32[0] = bswap32(a2[1]);
  *(int8x8_t *)v8.i8 = vzip1_s8(*(int8x8_t *)v8.i8, *(int8x8_t *)v8.i8);
  v9.i64[0] = 0x1F0000001FLL;
  v9.i64[1] = 0x1F0000001FLL;
  v10.i64[0] = 0x5F0000005FLL;
  v10.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v8.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v10, (uint32x4_t)vsraq_n_s32(v9, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v8.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v8.i8, (int8x8_t)0x2E002E002E002ELL);
  v20 = 4;
  *(_DWORD *)__s = vmovn_s16(v8).u32[0];
  __s[4] = 0;
  v11 = std::string::append(&v22, __s, 4uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, "/", 1uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, a2[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v24, (const std::string::value_type *)v15, size);
  *this = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

_QWORD *applesauce::CF::DictionaryRef::operator applesauce::CF::TypeRef(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<AudioValueRange,CA::ValueRange,applesauce::CF::DictionaryRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<AudioValueRange>()
      || *a1 == AMCP::Implementation::get_type_marker<CA::ValueRange>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<AudioStreamBasicDescription,CA::StreamDescription,applesauce::CF::DictionaryRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
      || *a1 == AMCP::Implementation::get_type_marker<CA::StreamDescription>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<std::vector<AudioStreamBasicDescription>,std::vector<CA::StreamDescription>,applesauce::CF::ArrayRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

_QWORD *applesauce::CF::ArrayRef::operator applesauce::CF::TypeRef(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<AudioStreamRangedDescription,CA::RangedStreamDescription,applesauce::CF::DictionaryRef>(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  const std::type_info *v8;
  int v9;
  const std::type_info *v10;

  v3 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v2 & 1) == 0)
  {
    v3 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v7)
    {
      v3 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  if (*a1 == v3[59])
    return 1;
  v5 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v4 & 1) == 0)
  {
    v5 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v9)
    {
      v5 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return *a1 == v5[61] || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<std::vector<AudioStreamRangedDescription>,std::vector<CA::RangedStreamDescription>,applesauce::CF::ArrayRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

BOOL AMCP::is_one_of<BOOL,char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<BOOL>()
      || AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a1);
}

_QWORD *applesauce::CF::NumberRef::operator applesauce::CF::TypeRef(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<std::vector<BOOL>,std::vector<char>,std::vector<signed char>,std::vector<unsigned char>,std::vector<short>,std::vector<unsigned short>,std::vector<int>,std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<char>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<signed char>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<short>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<int>>()
      || AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a1);
}

_QWORD *applesauce::CF::StringRef::operator applesauce::CF::TypeRef(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<mcp_applesauce::CF::PropertyListRef,applesauce::CF::StringRef,applesauce::CF::DataRef,applesauce::CF::NumberRef,applesauce::CF::BooleanRef,applesauce::CF::DateRef,applesauce::CF::ArrayRef,applesauce::CF::DictionaryRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

_QWORD *mcp_applesauce::CF::PropertyListRef::operator applesauce::CF::TypeRef(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_device_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v34, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v35, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v36, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v37, 1735554416, 1, 0, 1, &AMCP::Property_Traits<1735554416u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634169456u>::k_valid_scopes, 0, 1735554416, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v38, 1634169456, 1, 0, 0, &AMCP::Property_Traits<1634169456u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1633906541u>::k_valid_scopes, 0, 1634169456, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v39, 1633906541, 1, 0, 1, &AMCP::Property_Traits<1633906541u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634562932u>::k_valid_scopes, 0, 1633906541, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v40, 1634562932, 1, 0, 1, &AMCP::Property_Traits<1634562932u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634755428u>::k_valid_scopes, 0, 1634562932, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v41, 1634755428, 1, 0, 1, &AMCP::Property_Traits<1634755428u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668445298u>::k_valid_scopes, 0, 1634755428, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v42, 1668445298, 1, 0, 0, &AMCP::Property_Traits<1668445298u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1886549620u>::k_valid_scopes, 0, 1668445298, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v43, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x690uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1680;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v44, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 420;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B58D4F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1680;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

void DSP_Dictionariable::TooledDictionary::~TooledDictionary(DSP_Dictionariable::TooledDictionary *this)
{
  DSP_Dictionariable::TooledDictionary::~TooledDictionary(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

void DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(DSP_Dictionariable::DictionariableKvp *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E699E9B8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

void DSP_Dictionariable::DictionarySet::maybe_add_under_key(uint64_t **a1, __CFDictionary **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef Mutable;

  if (*(_BYTE *)(a3 + 8) && *(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3) >= 1)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v7 = *a1;
    v6 = a1[1];
    while (v7 != v6)
    {
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)*v7 + 16))(*v7, &Mutable);
      ++v7;
    }
    if (!*(_BYTE *)(a3 + 8))
      std::__throw_bad_optional_access[abi:ne180100]();
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *(const void **)a3, cf);
    if (cf)
      CFRelease(cf);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v8 = *a1;
    v9 = a1[1];
    while (v8 != v9)
    {
      v10 = *v8++;
      (*(void (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v10 + 16))(v10, a2);
    }
  }
}

void sub_1B58D5178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(uint64_t **a1, CFDictionaryRef *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v13[16];
  _QWORD v14[3];

  if (*(_BYTE *)(a3 + 8) && *(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3) >= 1)
  {
    v14[0] = &off_1E699E9F8;
    v14[1] = 0;
    v14[2] = a2;
    if (!*(_BYTE *)(a3 + 8))
      std::__throw_bad_optional_access[abi:ne180100]();
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(v13, *a2, *(const void **)a3);
    if (v13[8])
    {
      v6 = *a1;
      v7 = a1[1];
      v8 = 1;
      while (v6 != v7)
      {
        v8 = v8 & (*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)*v6 + 24))(*v6, v13);
        ++v6;
      }
    }
    else
    {
      v8 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v14);
  }
  else
  {
    v9 = *a1;
    v10 = a1[1];
    v8 = 1;
    while (v9 != v10)
    {
      v11 = *v9++;
      v8 = v8 & (*(unsigned int (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)v11 + 24))(v11, a2);
    }
  }
  return v8;
}

void sub_1B58D528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void DSP_Dictionariable::DictionarySet::add_to(DSP_Dictionariable::DictionarySet *this, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable;
  _QWORD *v5;
  _QWORD *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  CFTypeRef v9;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v9 = Mutable;
  v6 = *(_QWORD **)this;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v6 == v5)
  {
    v7 = Mutable;
  }
  else
  {
    do
    {
      (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v6 + 16))(*v6, &v9);
      ++v6;
    }
    while (v6 != v5);
    v7 = v9;
  }
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v7);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
}

void sub_1B58D53F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void HALB_MachPort::~HALB_MachPort(mach_port_name_t *this)
{
  HALB_MachPort::DestroyPort(*this, *((unsigned __int8 *)this + 4), *((unsigned __int8 *)this + 5));
}

void AMCP::Address::make_string_for_scope(AMCP::Address *this@<X0>, _QWORD *a2@<X8>, int16x8_t a3@<Q0>)
{
  char *v3;
  int32x4_t v4;
  uint32x4_t v5;
  void *__p;
  char v7;

  if ((int)this > 1768845427)
  {
    switch((_DWORD)this)
    {
      case 0x696E7074:
        v3 = "Input";
        goto LABEL_14;
      case 0x6F757470:
        v3 = "Output";
        goto LABEL_14;
      case 0x70747275:
        v3 = "Pass Thru";
        goto LABEL_14;
    }
  }
  else
  {
    switch((_DWORD)this)
    {
      case 0:
        v3 = "Unused";
        goto LABEL_14;
      case 0x2A2A2A2A:
        v3 = "Wild Card";
        goto LABEL_14;
      case 0x676C6F62:
        v3 = "Global";
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(a2, v3);
        return;
    }
  }
  a3.i32[0] = bswap32(this);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"Scope '%s'", (uint64_t)a2, &__p);
  if (v7 < 0)
    operator delete(__p);
}

void HALB_CFBundle::~HALB_CFBundle(HALB_CFBundle *this)
{
  HALB_CFBundle::~HALB_CFBundle(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E6971AA0;
  if (*((_BYTE *)this + 16))
  {
    v2 = (const void *)*((_QWORD *)this + 1);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

const __CFString *HALB_CFBundle::CopyLocalizedString(HALB_CFBundle *this, CFStringRef key, const __CFString *a3, CFTypeRef cf, const __CFString *a5)
{
  __CFBundle *v7;
  const __CFString *result;

  v7 = (__CFBundle *)*((_QWORD *)this + 1);
  if (!v7)
    goto LABEL_10;
  if (key)
  {
    result = CFBundleCopyLocalizedString(v7, key, 0, 0);
    if (result != key)
      goto LABEL_6;
    CFRelease(key);
  }
  result = 0;
LABEL_6:
  if (a3)
  {
    if (!result)
    {
      result = CFBundleCopyLocalizedString(*((CFBundleRef *)this + 1), a3, 0, 0);
      if (result == a3)
      {
        CFRelease(a3);
        if (cf)
          goto LABEL_11;
        return 0;
      }
    }
  }
  if (result)
    return result;
LABEL_10:
  if (cf)
  {
LABEL_11:
    CFRetain(cf);
    return (const __CFString *)cf;
  }
  return 0;
}

void HALS_IOEngine::FlushAllQueues(HALS_IOEngine *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOEngine *)((char *)this + 64));
}

uint64_t HALS_IOEngine::DoAnyQueuesHaveWorkAfterFlush(HALS_IOEngine *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 97);
  return v1 & 1;
}

uint64_t HALS_IOEngine::GetDSPLatencyForStreamAtIndex(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::SupportsIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::IsolatedReadFromStream(HALS_IOEngine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine::SetupForIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::TeardownForIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

double HALS_IOEngine::GetEarliestCurrentPositionForOutputStream(HALS_IOEngine *this)
{
  return 0.0;
}

uint64_t HALS_IOEngine::CanSkipBeginEndIOOperation(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::IsEngineMixing(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::NotifyWaitingTapThatIOHasFullyStarted(HALS_IOEngine *this)
{
  return 0;
}

void HALS_IOEngine::get_timebase(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void HALS_IssueDetector::Initialize(HALS_IssueDetector *this)
{
  int v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    v2 = AudioIssueDetectorLibraryLoader(void)::libSym(this);
    if (!v2)
      return;
  }
  else
  {
    v2 = -1;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315650;
    v4 = "HALS_IssueDetector.h";
    v5 = 1024;
    v6 = 184;
    v7 = 1024;
    v8 = v2;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientInitialize", (uint8_t *)&v3, 0x18u);
  }
}

_QWORD *std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x1555555555555556)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B58D5898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v6;
  uint64_t v7;
  const std::vector<unsigned int>::value_type *v8;
  std::vector<unsigned int>::const_iterator v9;
  unint64_t v10;
  unint64_t v11;
  const unsigned int *v12;
  const unsigned int *v13;
  std::vector<unsigned int>::value_type v14;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  HALS_ObjectMap *v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v21;
  std::vector<unsigned int> v22;

  v21 = a1;
  if (*(_BYTE *)(a1 + 28))
  {
    v22.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62676F6E65;
    LODWORD(v22.__end_) = 0;
    HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)*(unsigned int *)(a1 + 24), 0, 1, (const AudioObjectPropertyAddress *)&v22, a5);
  }
  memset(&v22, 0, sizeof(v22));
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v7)
  {
    do
    {
      v8 = (const std::vector<unsigned int>::value_type *)(v6 + 8);
      v9.__i_ = v22.__begin_;
      if (v22.__end_ == v22.__begin_)
      {
        v9.__i_ = v22.__end_;
      }
      else
      {
        v10 = v22.__end_ - v22.__begin_;
        do
        {
          v11 = v10 >> 1;
          v12 = &v9.__i_[v10 >> 1];
          v14 = *v12;
          v13 = v12 + 1;
          v10 += ~(v10 >> 1);
          if (v14 < *v8)
            v9.__i_ = v13;
          else
            v10 = v11;
        }
        while (v10);
      }
      if (v22.__end_ == v9.__i_ || *v9.__i_ != *v8)
        std::vector<unsigned int>::insert(&v22, v9, v8);
      v6 += 12;
    }
    while (v6 != v7);
    begin = v22.__begin_;
    end = v22.__end_;
    if (v22.__begin_ != v22.__end_)
    {
      do
      {
        v17 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*begin);
        v19 = v17;
        if (v17)
          HALS_Client::SendIsRunningSomewhereElse(v17, *(_DWORD *)(a1 + 24), a1);
        HALS_ObjectMap::ReleaseObject(v19, v18);
        ++begin;
      }
      while (begin != end);
      begin = v22.__begin_;
    }
    if (begin)
    {
      v22.__end_ = begin;
      operator delete(begin);
    }
  }
  return std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&v21);
}

void sub_1B58D59F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B5E50688](v2, 0x1020C403997D5A5);
  }
  return a1;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3;
  unsigned int *i;
  const unsigned int *end;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  std::__wrap_iter<const unsigned int *>::iterator_type v9;
  const unsigned int *v10;
  std::vector<unsigned int>::pointer v11;
  unsigned int v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  std::__split_buffer<unsigned int> __v;

  v3 = __x;
  i = (unsigned int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18)
    {
      v20 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == i)
          v23 = 1;
        else
          v23 = v15 >> 1;
        v24 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        v21 = (unsigned int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v22 = v16 + 2;
        if (v16 >= -1)
          v22 = v16 + 1;
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *v21 = *v3;
    __v.__end_ = v21 + 1;
    i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (i <= v3)
      v3 += this->__end_ > v3;
    *i = *v3;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_1B58D5C68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  uint64_t *v8;
  void **p_p;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  HALS_Object *v14;
  HALS_Object *v15;
  HALS_Object *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  HALS_Object *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *__p;
  HALS_Object *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  _BYTE buf[18];
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v34 = 0;
  v35 = 0;
  v2 = *(unsigned int **)a1;
  v1 = *(unsigned int **)(a1 + 8);
  v28 = v1;
  v29 = a1;
  while (v2 != v1)
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    if (v4)
    {
      HALS_IOContext::GetIssueReporters((HALS_IOContext *)buf, (uint64_t)v4);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v30, __p, (uint64_t)v34, (v34 - (HALS_Object *)__p) >> 3);
      v5 = v30;
      v6 = v31;
      v7 = *(void **)buf;
      v8 = *(uint64_t **)&buf[8];
      p_p = &__p;
      v36 = &__p;
      if (v30 == v31)
      {
        v11 = *(uint64_t **)buf;
LABEL_13:
        v37 = p_p;
        while (v11 != v8)
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v37, v11++);
      }
      else
      {
        v10 = v30;
        v11 = *(uint64_t **)buf;
        while (v11 != v8)
        {
          v12 = *v11;
          v13 = *v10;
          if (*v11 >= *v10)
          {
            std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v36, v10);
            v11 += v13 >= v12;
            ++v10;
          }
          else
          {
            std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v36, v11++);
          }
          if (v10 == v6)
          {
            p_p = v36;
            goto LABEL_13;
          }
        }
        v37 = v36;
        while (v10 != v6)
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v37, v10++);
      }
      std::__sort<std::__less<long long,long long> &,long long *>();
      v15 = (HALS_Object *)__p;
      v14 = v34;
      if (__p == v34)
      {
LABEL_29:
        if (v14 != v15)
        {
          v3 = v14;
          v34 = v15;
        }
      }
      else
      {
        v16 = (HALS_Object *)((char *)__p + 8);
        while (v16 != v34)
        {
          v17 = (_QWORD *)((char *)v16 - 8);
          v18 = *((_QWORD *)v16 - 1);
          v19 = *(_QWORD *)v16;
          v16 = (HALS_Object *)((char *)v16 + 8);
          if (v18 == v19)
          {
            for (i = (HALS_Object *)(v17 + 2); i != v14; i = (HALS_Object *)((char *)i + 8))
            {
              v21 = v18;
              v18 = *(_QWORD *)i;
              if (v21 != *(_QWORD *)i)
              {
                v17[1] = v18;
                ++v17;
              }
            }
            v15 = (HALS_Object *)(v17 + 1);
            goto LABEL_29;
          }
        }
      }
      if (v5)
        operator delete(v5);
      if (v7)
        operator delete(v7);
    }
    HALS_ObjectMap::ReleaseObject(v4, v3);
    ++v2;
    v1 = v28;
  }
  v22 = *(_QWORD *)(a1 + 24);
  if (v22)
  {
    if ((void **)(v22 + 40) != &__p)
      std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v22 + 40), (char *)__p, (uint64_t)v34, (v34 - (HALS_Object *)__p) >> 3);
    v23 = *(_QWORD *)(v22 + 32);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      v24 = AudioIssueDetectorLibraryLoader(void)::libSym(v23, &__p);
      if (!v24)
        goto LABEL_47;
    }
    else
    {
      v24 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(v22 + 32);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IssueDetector.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      v39 = 1024;
      v40 = v24;
      v41 = 2048;
      v42 = v25;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientUpdateReportingSessions, mDetectorID = %llu", buf, 0x22u);
    }
  }
LABEL_47:
  if (__p)
  {
    v34 = (HALS_Object *)__p;
    operator delete(__p);
  }
  return std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](&v29);
}

void sub_1B58D5FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 24);
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B5E50688](v2, 0x30C400AA40F66);
  }
  return a1;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<void const*>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v6 = *(_QWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      v8 = *(_QWORD **)v4;
      v6 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)(v13 + 8 * v9);
    v16 = v13 + 8 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void HALS_IOEngine::HALS_IOEngine(HALS_IOEngine *this, HALS_IODevice *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v6;
  NSObject **v7;
  dispatch_object_t object[41];

  object[40] = *(dispatch_object_t *)MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1701734254, 0, (uint64_t)a2, a5);
  *(_QWORD *)v6 = off_1E6971AD0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_WORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  v7 = (NSObject **)(v6 + 64);
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 850045863;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_QWORD *)(v6 + 216) = 850045863;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_QWORD *)(v6 + 304) = 850045863;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *((_QWORD *)this + 47) = dispatch_semaphore_create(0);
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_WORD *)this + 208) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 850045863;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_QWORD *)this + 67) = 850045863;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_QWORD *)this + 78) = 850045863;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = dispatch_semaphore_create(0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "com.apple.audio.HALS_Engine-updater");
  AMCP::Utility::Dispatch_Queue::operator=(v7, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
}

void HALS_IOEngine::~HALS_IOEngine(HALS_IOEngine *this)
{
  char *v2;

  *(_QWORD *)this = off_1E6971AD0;
  v2 = (char *)this + 48;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOEngine *)((char *)this + 384));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOEngine *)((char *)this + 64));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  HALS_Object::~HALS_Object(this);
}

uint64_t ___ZN13HALS_IOEngine23SetIOContextStreamUsageEjbjPb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned int *)(a1 + 52), *(_QWORD *)(a1 + 40));
}

void sub_1B58D6480(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN13HALS_IOEngine28DeferSetIOContextStreamUsageEjbjPb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  char v5;
  uint64_t v6;
  HALB_Mutex *v7;
  uint64_t result;
  _QWORD v9[7];
  char v10;

  v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    v5 = *(_BYTE *)(a1 + 52);
    v6 = *(_QWORD *)(a1 + 32);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN13HALS_IOEngine23SetIOContextStreamUsageEjbjPb_block_invoke;
    v9[3] = &__block_descriptor_tmp_1911;
    v10 = v5;
    v9[6] = *(_QWORD *)(a1 + 44);
    v9[4] = v2;
    v9[5] = v6;
    v7 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v9);
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return MEMORY[0x1B5E50664](result, 0x1000C8077774924);
  return result;
}

void sub_1B58D654C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58D6518);
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  HALS_ObjectMap *v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  unsigned int *v6;

  v6 = a1;
  v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  v4 = v2;
  if (v2)
    HALS_Client::SendIsRunningSomewhereElse(v2, a1[1], (uint64_t)(a1 + 2));
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_1B58D65CC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HALS_ObjectMap *v10;

  HALS_ObjectMap::ReleaseObject(v10, a2);
  std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B5E50688](v2, 0x1020C405E66F15BLL);
  }
  return a1;
}

HALB_Mutex *std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](HALB_Mutex **a1, HALB_Mutex *a2)
{
  HALB_Mutex *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_Mutex::~HALB_Mutex(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_IssueDetector::~HALS_IssueDetector(HALS_IssueDetector *this)
{
  HALS_IssueDetector::~HALS_IssueDetector(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E698E7C8;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
      AudioIssueDetectorLibraryLoader(void)::libSym(v2);
    *((_QWORD *)this + 4) = 0;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315394;
    v6 = "HALS_IssueDetector.h";
    v7 = 1024;
    v8 = 109;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  calling AudioIssueDetectorClientDispose already disposed", (uint8_t *)&v5, 0x12u);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void sub_1B58D67E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<HALS_IssueDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698E778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IssueDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698E778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_IssueDetector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::~HALS_IOContext_Manager_Graph_Builder_Connection(HALS_IOContext_Manager_Graph_Builder_Connection *this)
{
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::object_has_expired(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v7, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 96), a2);
  v3 = v7;
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 == 0;
}

uint64_t HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v10;
  std::__shared_weak_count *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 8) + 96);
  v12[0] = &off_1E6971EC8;
  v12[1] = a2;
  v13 = v12;
  AMCP::Core::Broker::fetch_first_core_if (&v10, v2, (uint64_t)v12);
  v3 = v13;
  if (v13 == v12)
  {
    v4 = 4;
    v3 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v10)
    v5 = *v10;
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v10;
  std::__shared_weak_count *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 8) + 96);
  v12[0] = &off_1E6971F48;
  v12[1] = a2;
  v13 = v12;
  AMCP::Core::Broker::fetch_first_core_if (&v10, v2, (uint64_t)v12);
  v3 = v13;
  if (v13 == v12)
  {
    v4 = 4;
    v3 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v10)
    v5 = *v10;
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_node_description(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  AMCP::Core::Core *v7;
  std::__shared_weak_count *v8;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v7, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 96), a2);
  if (v7)
  {
    AMCP::Core::Core::get_simple_required_property<1852073061u>((AMCP::Node_Description *)a3, v7);
  }
  else
  {
    *(_QWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0x100000000;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_device_an_aggregate(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  _BOOL8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  AMCP::Core::Core *v7;
  std::__shared_weak_count *v8;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v7, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 96), a2);
  if (v7)
    v2 = AMCP::Core::Core::get_simple_required_property<1668047219u>(v7) == 1633773415;
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

uint64_t *HALS_IOContext_Manager_Graph_Builder_Connection::get_stream(uint64_t a1, unsigned int a2, uint64_t *mcp_object, unint64_t a4)
{
  uint64_t *v7;
  int v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  HALS_Object *v17;
  char v18;
  HALS_System *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a2);
  if (!v7)
    return 0;
  v8 = *((_DWORD *)v7 + 5);
  v23 = 0;
  v24 = 0;
  HALS_System::GetInstance(&v20, 0, &v23);
  v10 = HALS_System::CopyDeviceByObjectID(v20, v8, *(HALS_Client **)(a1 + 16));
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v10)
        goto LABEL_12;
LABEL_16:
      v18 = 1;
      goto LABEL_18;
    }
  }
  if (!v10)
    goto LABEL_16;
LABEL_12:
  v20 = 0;
  v21 = 0;
  v22 = 0;
  HALS_Device::CopyStreamList((uint64_t)v10, (_DWORD)mcp_object == 1, (char **)&v20);
  if (a4 < ((char *)v21 - (char *)v20) >> 3
    && (mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(*(_QWORD *)(a1 + 8) + 16), *(_DWORD *)(*((_QWORD *)v20 + a4) + 16)), (unint64_t)mcp_object >> 32))
  {
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v20, v17);
    v18 = 0;
  }
  else
  {
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v20, v17);
    v18 = 1;
  }
LABEL_18:
  HALS_ObjectMap::ReleaseObject(v10, v9);
  if ((v18 & 1) != 0)
    return 0;
  return mcp_object;
}

void sub_1B58D6D78(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  HALS_ObjectMap *v3;
  HALS_Object *v5;
  va_list va;

  va_start(va, a3);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_reference_stream(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  unint64_t v2;
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  AMCP::Core::Core *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 96), a2);
  if (v8)
  {
    v10 = 0x676C6F6274617073;
    v11 = 0;
    v2 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v8, (const AMCP::Address *)&v10);
    if (HIDWORD(v2))
      v3 = (_DWORD)v2 != 0;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_uid_for_meta_device_clock(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, applesauce::CF::StringRef *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  HALS_Object *v14;
  CFComparisonResult v15;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  HALS_System *v20;
  std::__shared_weak_count *v21;
  int v22;
  const __CFString *v23;

  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(*((_QWORD *)this + 1) + 16), a2);
  if (!v5)
    goto LABEL_21;
  v6 = *((unsigned int *)v5 + 5);
  v18 = 0;
  v19 = 0;
  HALS_System::GetInstance(&v20, 0, &v18);
  v7 = HALS_System::CopyDeviceByObjectID(v20, v6, *((HALS_Client **)this + 2));
  v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v19;
  if (!v19)
    goto LABEL_11;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_11:
    if (v7)
      goto LABEL_12;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v7)
  {
LABEL_20:
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
LABEL_21:
    *(_QWORD *)a3 = 0;
    return;
  }
LABEL_12:
  v20 = (HALS_System *)0x676C6F6261706364;
  LODWORD(v21) = 0;
  v23 = 0;
  LODWORD(v17) = 0;
  (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, const __CFString **, const __CFString **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v6, &v20, 8, &v17, &v23, 0, 0, 0);
  applesauce::CF::StringRef::StringRef(a3, v23);
  v20 = 0;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)a3, (const __CFString **)&v20) == kCFCompareEqualTo)goto LABEL_16;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, "");
  v15 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)a3, &v23);
  if (v23)
    CFRelease(v23);
  if (v15 == kCFCompareEqualTo)
  {
LABEL_16:
    v20 = (HALS_System *)0x676C6F62616D7374;
    LODWORD(v21) = 0;
    v23 = 0;
    v22 = 0;
    (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, int *, const __CFString **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v6, &v20, 8, &v22, &v23, 0, 0, 0);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, v23);
    v16 = *(const __CFString **)a3;
    *(_QWORD *)a3 = v17;
    v17 = v16;
    if (v16)
      CFRelease(v16);
  }
  HALS_ObjectMap::ReleaseObject(v7, v14);
}

void sub_1B58D7084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v5;
  HALS_ObjectMap *v6;
  HALS_Object *v8;
  va_list va;

  va_start(va, a5);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  applesauce::CF::StringRef::~StringRef(v5);
  HALS_ObjectMap::ReleaseObject(v6, v8);
  _Unwind_Resume(a1);
}

double HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate(uint64_t a1, const __CFString **a2)
{
  uint64_t v3;
  CFComparisonResult v4;
  double v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  CFTypeRef cf;
  std::__shared_weak_count *v18;

  v3 = *(_QWORD *)(a1 + 8) + 144;
  while (1)
  {
    v3 = *(_QWORD *)v3;
    if (!v3)
      break;
    (*(void (**)(CFTypeRef *__return_ptr))(**(_QWORD **)(v3 + 24) + 16))(&cf);
    v4 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a2);
    if (cf)
      CFRelease(cf);
    if (v4 == kCFCompareEqualTo)
      return (*(double (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 24))(*(_QWORD *)(v3 + 24));
  }
  v15 = 0;
  v16 = 0;
  HALS_System::GetInstance(&cf, 0, &v15);
  v7 = HALS_System::CopyDeviceByUID((HALS_System *)cf, *a2, 0);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v7)
        goto LABEL_17;
LABEL_19:
      v5 = 0.0;
      goto LABEL_20;
    }
  }
  if (!v7)
    goto LABEL_19;
LABEL_17:
  v5 = (*(double (**)(HALS_ObjectMap *))(*(_QWORD *)v7 + 264))(v7);
LABEL_20:
  HALS_ObjectMap::ReleaseObject(v7, v6);
  return v5;
}

void sub_1B58D7238(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  HALS_ObjectMap *v11;

  HALS_ObjectMap::ReleaseObject(v11, a2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_aggregate_composition(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, applesauce::CF::DictionaryRef *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  HALS_Object *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  HALS_System *v17;
  std::__shared_weak_count *v18;
  int v19;
  CFTypeRef v20;

  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(*((_QWORD *)this + 1) + 16), a2);
  if (v5)
  {
    v6 = *((unsigned int *)v5 + 5);
    v15 = 0;
    v16 = 0;
    HALS_System::GetInstance(&v17, 0, &v15);
    v7 = HALS_System::CopyDeviceByObjectID(v17, v6, *((HALS_Client **)this + 2));
    v8 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v16;
    if (!v16)
      goto LABEL_11;
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v7)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (v7)
      {
LABEL_12:
        v17 = (HALS_System *)0x676C6F6261636F6DLL;
        LODWORD(v18) = 0;
        v20 = 0;
        v19 = 0;
        (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, int *, CFTypeRef *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 112))(v7, v6, &v17, 8, &v19, &v20, 0, 0, 0);
        applesauce::CF::DictionaryRef::DictionaryRef(a3, v20);
        HALS_ObjectMap::ReleaseObject(v7, v14);
        return;
      }
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  *(_QWORD *)a3 = 0;
}

void sub_1B58D73DC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  HALS_ObjectMap *v13;

  HALS_ObjectMap::ReleaseObject(v13, a2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::maybe_get_master_device_and_sample_rate(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, CFDictionaryRef *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  AMCP::Log::Scope_Registry *v7;
  const __CFString *v8;
  double clock_sample_rate;
  CFTypeRef v10;
  AMCP::Log::Scope_Registry *Count;
  int v12;
  const __CFArray *v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  CFIndex v18;
  unint64_t i;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  CFTypeRef v23;
  double v24;
  AMCP::Log::Scope_Registry *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  BOOL v36;
  const char *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  char *v43;
  const char *v44;
  NSObject *v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  unint64_t v48;
  char *v49;
  int v50;
  char *v51;
  const char *v52;
  std::runtime_error *exception;
  const __CFString *v54;
  const __CFString *v55;
  CFTypeRef v56;
  CFTypeRef v57;
  const __CFString *v58;
  unsigned __int8 v59;
  CFTypeRef v60;
  unsigned __int8 v61;
  CFTypeRef v62;
  char v63;
  CFTypeRef v64;
  CFTypeRef cf;
  _BYTE v66[10];
  __int16 v67;
  int v68;
  __int16 v69;
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_132;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
  v6 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(*a2, cf);
  v7 = (AMCP::Log::Scope_Registry *)cf;
  if (cf)
    CFRelease(cf);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    v45 = *(NSObject **)cf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      v48 = 0;
      v49 = 0;
      v50 = 47;
      do
      {
        v51 = &aLibraryCachesC_32[v48];
        if (v50 == 47)
          v49 = &aLibraryCachesC_32[v48];
        v50 = v51[1];
        if (!v51[1])
          break;
        v36 = v48++ >= 0xFFF;
      }
      while (!v36);
      if (v49)
        v52 = v49 + 1;
      else
        v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
      LODWORD(cf) = 67109890;
      HIDWORD(cf) = v47;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = v52;
      v67 = 1024;
      v68 = 191;
      v69 = 2080;
      v70 = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
      _os_log_error_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&cf, 0x22u);
    }
    abort();
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_132;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "clock");
  v62 = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v64, *a2, cf, &v62);
  if (v62)
    CFRelease(v62);
  if (cf)
    CFRelease(cf);
  v8 = (const __CFString *)v64;
  if (v64)
    goto LABEL_17;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_132;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v62, "master");
  v60 = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, *a2, v62, &v60);
  v8 = (const __CFString *)cf;
  v64 = cf;
  cf = 0;
  if (v60)
    CFRelease(v60);
  if (v62)
    CFRelease(v62);
  if (v8)
  {
LABEL_17:
    CFRetain(v8);
    v54 = v8;
    clock_sample_rate = HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate((uint64_t)this, &v54);
    CFRelease(v8);
    if (clock_sample_rate == 0.0)
      clock_sample_rate = 44100.0;
    v10 = v64;
    if (v64)
      CFRetain(v64);
    *(double *)a3 = clock_sample_rate;
    *(_QWORD *)(a3 + 8) = v10;
    goto LABEL_22;
  }
  if (!*a2)
    goto LABEL_131;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "subdevices");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v62, *a2, cf);
  Count = (AMCP::Log::Scope_Registry *)cf;
  if (cf)
    CFRelease(cf);
  if (!v63)
    goto LABEL_37;
  if (!v62)
    goto LABEL_131;
  Count = (AMCP::Log::Scope_Registry *)CFArrayGetCount((CFArrayRef)v62);
  if (!Count)
  {
LABEL_37:
    AMCP::Log::Scope_Registry::get(Count);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)v66;
    v15 = *(NSObject **)cf;
    if (*(_QWORD *)v66)
    {
      v16 = (unint64_t *)(*(_QWORD *)v66 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      v32 = 0;
      v33 = 0;
      v34 = 47;
      do
      {
        v35 = &aLibraryCachesC_32[v32];
        if (v34 == 47)
          v33 = &aLibraryCachesC_32[v32];
        v34 = v35[1];
        if (!v35[1])
          break;
        v36 = v32++ >= 0xFFF;
      }
      while (!v36);
      if (v33)
        v37 = v33 + 1;
      else
        v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
      LODWORD(cf) = 67109634;
      HIDWORD(cf) = v31;
      *(_WORD *)v66 = 2080;
      *(_QWORD *)&v66[2] = v37;
      v67 = 1024;
      v68 = 203;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
LABEL_44:
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v62);
    goto LABEL_23;
  }
  if (!v62)
    goto LABEL_131;
  applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, (CFArrayRef)v62, 0);
  if (!v62)
    goto LABEL_131;
  applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&v60, (CFArrayRef)v62);
  v12 = v61;
  if (v61)
  {
    v13 = (const __CFArray *)v60;
    if (v60)
      goto LABEL_46;
LABEL_131:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_132:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = (const __CFArray *)v62;
  if (!v62)
    goto LABEL_131;
LABEL_46:
  v8 = 0;
  v18 = CFArrayGetCount(v13);
  if (!v18)
    goto LABEL_84;
  for (i = 0; i != v18; ++i)
  {
    if (!v62)
    {
LABEL_130:
      v64 = v8;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      goto LABEL_132;
    }
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v58, (CFArrayRef)v62, i);
    if (v66[0] == v59)
    {
      if (v66[0])
      {
        v20 = (const __CFString *)cf;
        cf = v58;
        v58 = v20;
      }
    }
    else if (v66[0])
    {
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&cf);
    }
    else
    {
      cf = v58;
      v58 = 0;
      v66[0] = 1;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v58);
    if (v12)
    {
      if (!v60)
        goto LABEL_130;
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v58, (CFArrayRef)v60, i);
      if (v66[0] == v59)
      {
        if (v66[0])
        {
          v21 = (const __CFString *)cf;
          cf = v58;
          v58 = v21;
        }
      }
      else if (v66[0])
      {
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&cf);
      }
      else
      {
        cf = v58;
        v58 = 0;
        v66[0] = 1;
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v58);
      if (v66[0])
      {
        if (!cf)
          goto LABEL_130;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v57, "uid");
        v56 = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v58, (const __CFDictionary *)cf, v57, &v56);
        v22 = v58;
        v58 = v8;
        if (v8)
          CFRelease(v8);
        if (v56)
          CFRelease(v56);
        v23 = v57;
        if (!v57)
          goto LABEL_79;
LABEL_78:
        CFRelease(v23);
LABEL_79:
        v8 = v22;
      }
    }
    else if (v66[0])
    {
      if (!cf)
        goto LABEL_130;
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v57, "uid");
      v56 = 0;
      applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v58, (const __CFDictionary *)cf, v57, &v56);
      v22 = v58;
      v58 = v8;
      if (v8)
        CFRelease(v8);
      if (v56)
        CFRelease(v56);
      v23 = v57;
      if (!v57)
        goto LABEL_79;
      goto LABEL_78;
    }
    if (v8)
    {
      CFRetain(v8);
      v55 = v8;
      v24 = HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate((uint64_t)this, &v55);
      CFRelease(v8);
      if (v24 != 0.0)
      {
        v64 = v8;
        CFRetain(v8);
        *(double *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v8;
        *(_BYTE *)(a3 + 16) = 1;
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        goto LABEL_44;
      }
    }
  }
  v64 = v8;
LABEL_84:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  v25 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v62);
  if (v8)
    goto LABEL_17;
  AMCP::Log::Scope_Registry::get(v25);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
  v26 = *(std::__shared_weak_count **)v66;
  v27 = *(NSObject **)cf;
  if (*(_QWORD *)v66)
  {
    v28 = (unint64_t *)(*(_QWORD *)v66 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    v38 = pthread_self();
    v39 = pthread_mach_thread_np(v38);
    v40 = 0;
    v41 = 0;
    v42 = 47;
    do
    {
      v43 = &aLibraryCachesC_32[v40];
      if (v42 == 47)
        v41 = &aLibraryCachesC_32[v40];
      v42 = v43[1];
      if (!v43[1])
        break;
      v36 = v40++ >= 0xFFF;
    }
    while (!v36);
    if (v41)
      v44 = v41 + 1;
    else
      v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
    LODWORD(cf) = 67109634;
    HIDWORD(cf) = v39;
    *(_WORD *)v66 = 2080;
    *(_QWORD *)&v66[2] = v44;
    v67 = 1024;
    v68 = 244;
    _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
LABEL_22:
  *(_BYTE *)(a3 + 16) = 1;
LABEL_23:
  if (v64)
    CFRelease(v64);
}

void sub_1B58D7D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (a2)
  {
    __cxa_free_exception(v20);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::should_create_mono_mix_map(HALS_IOContext_Manager_Graph_Builder_Connection *this)
{
  std::__shared_weak_count *v1;
  int v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v9 = 0;
  v10 = 0;
  HALS_System::GetInstance(&v11, 0, &v9);
  v1 = v12;
  v2 = *(unsigned __int8 *)(v11 + 1224);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v2 != 0;
}

void sub_1B58D7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_tapped_object_list(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  CFTypeRef v7;
  HALS_Object *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int *v16;
  int *v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unint64_t v28;
  char *v29;
  uint64_t *mcp_object;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  int *v39;
  uint64_t v40;
  int *v41;
  HALS_ObjectMap *v42;
  HALS_System *v43;
  HALS_System *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  CFTypeRef v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v51 = 0;
  v52 = 0;
  HALS_System::GetInstance(&v47, 0, &v51);
  v6 = (uint64_t)v47;
  v7 = *a2;
  if (*a2)
    CFRetain(*a2);
  v50 = v7;
  v9 = HALS_System::CopyTapByUID(v6, v7, *(_QWORD *)(a1 + 16));
  if (v7)
    CFRelease(v7);
  v10 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v52;
  if (!v52)
    goto LABEL_14;
  v14 = (unint64_t *)&v52->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v9)
      goto LABEL_58;
  }
  else
  {
LABEL_14:
    if (!v9)
      goto LABEL_58;
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, *(const void **)(v9 + 208), *(_QWORD *)(v9 + 216), (uint64_t)(*(_QWORD *)(v9 + 216) - *(_QWORD *)(v9 + 208)) >> 2);
  v16 = v47;
  v17 = (int *)v48;
  if (v47 != (int *)v48)
  {
    v39 = (int *)v48;
    v40 = v9;
    while (1)
    {
      v45 = 0;
      v46 = 0;
      HALS_System::GetInstance(&v43, 0, &v45);
      v19 = (HALS_ObjectMap *)HALS_System::CopyClientByObjectID(v43, *v16);
      v20 = (std::__shared_weak_count *)v44;
      if (v44)
      {
        v21 = (unint64_t *)((char *)v44 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v46;
      if (!v46)
        goto LABEL_26;
      v24 = (unint64_t *)&v46->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (v19)
        {
LABEL_27:
          (*(void (**)(HALS_System **__return_ptr, HALS_ObjectMap *))(*(_QWORD *)v19 + 200))(&v43, v19);
          v26 = (unsigned int *)v43;
          v27 = (unsigned int *)v44;
          if (v43 != v44)
          {
            v41 = v16;
            v42 = v19;
            v28 = (unint64_t)a3[2];
            v29 = *a3;
            do
            {
              mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(*(_QWORD *)(a1 + 8) + 16), *v26);
              v31 = (int)mcp_object;
              if ((unint64_t)mcp_object >> 32)
              {
                v32 = a3[1];
                if ((unint64_t)v32 >= v28)
                {
                  v34 = (v32 - v29) >> 2;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v28 - (_QWORD)v29) >> 1 > v35)
                    v35 = (uint64_t)(v28 - (_QWORD)v29) >> 1;
                  if (v28 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                    v36 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v36 = v35;
                  if (v36)
                    v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v36);
                  else
                    v18 = 0;
                  v37 = (char *)(v36 + 4 * v34);
                  *(_DWORD *)v37 = v31;
                  v33 = v37 + 4;
                  while (v32 != v29)
                  {
                    v38 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v37 - 1) = v38;
                    v37 -= 4;
                  }
                  v28 = v36 + 4 * (_QWORD)v18;
                  *a3 = v37;
                  a3[1] = v33;
                  a3[2] = (char *)v28;
                  if (v29)
                    operator delete(v29);
                  v29 = v37;
                }
                else
                {
                  *(_DWORD *)v32 = (_DWORD)mcp_object;
                  v33 = v32 + 4;
                }
                a3[1] = v33;
              }
              ++v26;
            }
            while (v26 != v27);
            v19 = v42;
            v26 = (unsigned int *)v43;
            v9 = v40;
            v16 = v41;
            v17 = v39;
          }
          if (v26)
          {
            v44 = (HALS_System *)v26;
            operator delete(v26);
          }
        }
      }
      else
      {
LABEL_26:
        if (v19)
          goto LABEL_27;
      }
      HALS_ObjectMap::ReleaseObject(v19, v18);
      if (++v16 == v17)
      {
        v16 = v47;
        break;
      }
    }
  }
  if (v16)
    operator delete(v16);
LABEL_58:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v8);
}

void sub_1B58D820C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  HALS_ObjectMap *v23;
  void *v25;

  HALS_ObjectMap::ReleaseObject(v23, a2);
  v25 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_tap_mono(uint64_t a1, const void **a2)
{
  uint64_t v4;
  const void *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v16 = 0;
  v17 = 0;
  HALS_System::GetInstance(&v18, 0, &v16);
  v4 = v18;
  v5 = *a2;
  if (v5)
    CFRetain(v5);
  v7 = (HALS_ObjectMap *)HALS_System::CopyTapByUID(v4, v5, *(_QWORD *)(a1 + 16));
  if (v5)
    CFRelease(v5);
  v8 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v7)
        goto LABEL_15;
LABEL_17:
      v14 = 0;
      goto LABEL_18;
    }
  }
  if (!v7)
    goto LABEL_17;
LABEL_15:
  v14 = *((_BYTE *)v7 + 80) != 0;
LABEL_18:
  HALS_ObjectMap::ReleaseObject(v7, v6);
  return v14;
}

void sub_1B58D83F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<applesauce::CF::StringRef>(CFDictionaryRef theDict, const void *a2)
{
  _BOOL8 result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryContainsKey(theDict, a2) != 0;
  }
  return result;
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(_BYTE *a1, CFArrayRef theArray)
{
  const void *ValueAtIndex;
  const void *v5;
  CFTypeID v6;
  char v7;

  if (!CFArrayGetCount(theArray))
    goto LABEL_6;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  v5 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_6;
  CFRetain(ValueAtIndex);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_7:
  a1[8] = v7;
}

void std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
}

HALS_ObjectMap ***HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(HALS_ObjectMap ***a1, HALS_Object *a2)
{
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    v3 = *a1;
  }
  if (v3)
  {
    a1[1] = v3;
    operator delete(v3);
  }
  return a1;
}

void AMCP::Core::Core::get_simple_required_property<1852073061u>(AMCP::Node_Description *a1, AMCP::Core::Core *this)
{
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v5;
  unint64_t v6;
  uint64_t j;
  unint64_t v8;
  uint64_t i;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t k;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  uint64_t v18;
  int v19;
  _BYTE v20[8];
  void *v21;
  char v22;
  void *__p;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  uint64_t (*v28)(_QWORD, void **, _QWORD, _QWORD);
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint8_t *v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  _BYTE v39[15];
  char v40;
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v18 = 0x676C6F626E646465;
  v19 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v18);
  if (!(_DWORD)has_property)
  {
LABEL_36:
    v20[0] = 0;
    v25 = 0;
    goto LABEL_37;
  }
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v29, (int8x8_t *)this, (unsigned int *)&v18);
  v5 = v29;
  if (!v29)
    goto LABEL_20;
  v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8);
    if (has_property)
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v26, v5);
      AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)buf, (uint64_t)v26);
      std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>((uint64_t)v20, (uint64_t)buf);
      for (i = 96; i != 48; i -= 24)
      {
        v31 = &buf[i];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      }
      if (v42 < 0)
        operator delete(*(void **)&v39[4]);
      if (SBYTE5(v37) < 0)
        operator delete(*(void **)v33);
      if (v28)
        has_property = (AMCP::Log::Scope_Registry *)v28(0, v26, 0, 0);
      goto LABEL_19;
    }
LABEL_20:
    v10 = 1;
    goto LABEL_21;
  }
  AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)buf, v5);
  std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>((uint64_t)v20, (uint64_t)buf);
  for (j = 96; j != 48; j -= 24)
  {
    v26[0] = &buf[j];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  }
  if (v42 < 0)
    operator delete(*(void **)&v39[4]);
  if (SBYTE5(v37) < 0)
    operator delete(*(void **)v33);
LABEL_19:
  v10 = 0;
LABEL_21:
  v11 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
    goto LABEL_36;
  if (!v25)
  {
LABEL_37:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      v27 = 4;
      strcpy((char *)v26, "ndde");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "Core.h";
      v34 = 1024;
      v35 = 391;
      v36 = 2080;
      v37 = "optional_value.operator BOOL() == true";
      v38 = 2080;
      *(_QWORD *)v39 = v26;
      *(_WORD *)&v39[8] = 1024;
      strcpy(&v39[10], "bolg");
      v40 = 4;
      v41 = 0;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v27 < 0)
        operator delete(v26[0]);
    }
    abort();
  }
  AMCP::Node_Description::Node_Description(a1, (const AMCP::Node_Description *)v20);
  if (v25)
  {
    for (k = 96; k != 48; k -= 24)
    {
      *(_QWORD *)buf = &v20[k];
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    if (v24 < 0)
      operator delete(__p);
    if (v22 < 0)
      operator delete(v21);
  }
}

void sub_1B58D8944(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

AMCP::Node_Description *AMCP::Node_Description::Node_Description(AMCP::Node_Description *this, const AMCP::Node_Description *a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  char *v8;
  char v9;
  _QWORD *v10;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  v6 = 0;
  v7 = 0;
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  v8 = (char *)a2 + 72;
  do
  {
    v9 = v6;
    v10 = (_QWORD *)((char *)this + 24 * v7 + 72);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v10, *(__int128 **)&v8[24 * v7], *(__int128 **)&v8[24 * v7 + 8], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v8[24 * v7 + 8] - *(_QWORD *)&v8[24 * v7]) >> 3));
    v6 = 1;
    v7 = 1;
  }
  while ((v9 & 1) == 0);
  return this;
}

void sub_1B58D8A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  if (*(char *)(v11 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(exception_object);
}

void std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;
  void **v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 104)
  {
    for (j = -40; j != -88; j -= 24)
    {
      v5 = (void **)(i + j);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B58D8BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>(v4, v6);
      v6 = (__int128 *)((char *)v6 + 104);
      v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B58D8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  std::string *v11;
  uint64_t v12;

  v4 = 0;
  v5 = 0;
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a1 + 40;
  v9 = (uint64_t)a2 + 40;
  do
  {
    v10 = v4;
    v11 = (std::string *)(v8 + 24 * v5);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)(v9 + 24 * v5), *(__int128 **)(v9 + 24 * v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 24 * v5 + 8) - *(_QWORD *)(v9 + 24 * v5)) >> 3));
    v4 = 1;
    v5 = 1;
  }
  while ((v10 & 1) == 0);
  v12 = *((_QWORD *)a2 + 11);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v12;
  return a1;
}

void sub_1B58D8DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  if ((v12 & 1) == 0)
  {
    v14 = 24 * v11;
    v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void **v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      for (i = -40; i != -88; i -= 24)
      {
        v6 = (void **)(v3 + i);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      v3 -= 104;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Node_Description>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Descriptio"
          "n, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Descriptio"
          "n, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B58D9280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = 0;
  *(_DWORD *)result = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  do
  {
    v5 = (_QWORD *)(result + v2);
    v6 = (_QWORD *)(a2 + v2);
    v5[9] = 0;
    v5[10] = 0;
    v5[11] = 0;
    *(_OWORD *)(v5 + 9) = *(_OWORD *)(a2 + v2 + 72);
    v5[11] = *(_QWORD *)(a2 + v2 + 88);
    v6[9] = 0;
    v6[10] = 0;
    v6[11] = 0;
    v2 += 24;
  }
  while (v2 != 48);
  *(_BYTE *)(result + 120) = 1;
  return result;
}

AMCP::Node_Description *AMCP::Thing::convert_to<AMCP::Node_Description>(AMCP::Node_Description *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  const AMCP::Node_Description *v6;
  AMCP::Node_Description *result;
  const AMCP::Node_Description *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (const AMCP::Node_Description *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
      return AMCP::Node_Description::Node_Description(a1, v6);
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = (const AMCP::Node_Description *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  result = AMCP::Node_Description::Node_Description(a1, v8);
  if (v18)
    return (AMCP::Node_Description *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B58D960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Node_Description>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[508];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[506];
}

void std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6971F48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6971F48;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x616E6F64, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1853188452u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK47HALS_IOContext_Manager_Graph_Builder_Connection22get_node_from_node_uidEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t AMCP::Core::Core::get_simple_required_property<1853188452u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  CFTypeRef v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "diunbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v10 = 4;
      strcpy((char *)__p, "nuid");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1B58D99B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6971EC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6971EC8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK47HALS_IOContext_Manager_Graph_Builder_Connection26get_device_from_device_uidEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

BOOL AMCP::HAL::hal_property_value_is_object_id(AMCP::HAL *this)
{
  return (AMCP::HAL::get_hal_property_value_type_code(this) & 0x1E) == 10;
}

uint64_t AMCP::HAL::get_hal_property_value_type_code(AMCP::HAL *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  int v21;

  v1 = 3;
  if ((int)this <= 1835295853)
  {
    if ((int)this <= 1684498543)
    {
      if ((int)this <= 1667591276)
      {
        if ((int)this > 1651007860)
        {
          if ((int)this > 1651735074)
          {
            if ((int)this > 1667327846)
            {
              if ((int)this > 1667460716)
              {
                if ((_DWORD)this != 1667460717)
                {
                  if ((_DWORD)this != 1667523955)
                  {
                    v2 = 1667523958;
                    goto LABEL_306;
                  }
                  return 15;
                }
                return 5;
              }
              if ((_DWORD)this != 1667327847)
              {
                v6 = 1667330160;
                goto LABEL_416;
              }
              return 10;
            }
            if ((int)this <= 1652060005)
            {
              if ((_DWORD)this != 1651735075)
              {
                v6 = 1651861860;
                goto LABEL_416;
              }
              return 9;
            }
            if ((_DWORD)this == 1652060006)
              return v1;
            v4 = 1652060014;
LABEL_407:
            if ((_DWORD)this == v4)
              return v1;
            return 0;
          }
          if ((int)this <= 1651272545)
          {
            if ((int)this <= 1651013224)
            {
              if ((_DWORD)this != 1651007861)
              {
                v4 = 1651010921;
                goto LABEL_407;
              }
              return v1;
            }
            if ((_DWORD)this == 1651013225)
              return v1;
            v2 = 1651074160;
LABEL_306:
            if ((_DWORD)this == v2)
              return 10;
            return 0;
          }
          if ((int)this <= 1651472418)
          {
            if ((_DWORD)this != 1651272546)
            {
              v7 = 1651272548;
              goto LABEL_375;
            }
            return 1;
          }
          if ((_DWORD)this != 1651472419)
          {
            v4 = 1651730810;
            goto LABEL_407;
          }
          return 11;
        }
        if ((int)this <= 1634755427)
        {
          if ((int)this <= 1634300530)
          {
            if ((int)this <= 1633970531)
            {
              if ((_DWORD)this == 1346585414)
                return v1;
              v7 = 1633906541;
              goto LABEL_375;
            }
            if ((_DWORD)this != 1633970532)
            {
              v9 = 1634169456;
              goto LABEL_390;
            }
            return 17;
          }
          if ((int)this <= 1634496614)
          {
            if ((_DWORD)this != 1634300531)
            {
              v9 = 1634429294;
              goto LABEL_390;
            }
            return 17;
          }
          if ((_DWORD)this == 1634496615)
            return v1;
          v6 = 1634562932;
LABEL_416:
          if ((_DWORD)this != v6)
            return 0;
          return 6;
        }
        if ((int)this > 1650682914)
        {
          if ((int)this <= 1650685547)
          {
            if ((_DWORD)this != 1650682915)
            {
              v4 = 1650682995;
              goto LABEL_407;
            }
            return 11;
          }
          if ((_DWORD)this == 1650685548)
            return v1;
          v9 = 1650751011;
LABEL_390:
          if ((_DWORD)this != v9)
            return 0;
          return 11;
        }
        if ((int)this <= 1634955891)
        {
          if ((_DWORD)this == 1634755428)
            return 6;
          v13 = 1634758774;
          goto LABEL_412;
        }
        if ((_DWORD)this != 1634955892)
        {
          v4 = 1635087471;
          goto LABEL_407;
        }
        return 8;
      }
      if ((int)this > 1668510817)
      {
        if ((int)this <= 1684107363)
        {
          if ((int)this > 1668702577)
          {
            if ((int)this <= 1682929011)
            {
              if ((_DWORD)this == 1668702578)
                return v1;
              v2 = 1682533920;
              goto LABEL_306;
            }
            if ((_DWORD)this == 1682929012)
              return 10;
            v17 = 26471;
LABEL_379:
            v4 = v17 | 0x64610000;
            goto LABEL_407;
          }
          if ((int)this <= 1668639075)
          {
            if ((_DWORD)this == 1668510818)
              return v1;
            v9 = 1668575852;
            goto LABEL_390;
          }
          if ((_DWORD)this == 1668639076)
            return 6;
          v8 = 1668641652;
        }
        else
        {
          if ((int)this > 1684301170)
          {
            if ((int)this <= 1684370978)
            {
              if ((_DWORD)this == 1684301171)
                return 15;
              v4 = 1684301174;
              goto LABEL_407;
            }
            if ((_DWORD)this != 1684370979)
            {
              if ((_DWORD)this != 1684434036)
              {
                v4 = 1684498541;
                goto LABEL_407;
              }
              return v1;
            }
            return 11;
          }
          if ((int)this <= 1684157045)
          {
            if ((_DWORD)this == 1684107364)
              return v1;
            v17 = 29795;
            goto LABEL_379;
          }
          if ((_DWORD)this == 1684157046)
            return 7;
          v8 = 1684236338;
        }
        goto LABEL_402;
      }
      if ((int)this <= 1668050794)
      {
        if ((int)this > 1668047218)
        {
          if ((int)this > 1668049763)
          {
            if ((_DWORD)this == 1668049764)
              return v1;
            v4 = 1668049771;
            goto LABEL_407;
          }
          if ((_DWORD)this == 1668047219)
            return v1;
          v9 = 1668049699;
          goto LABEL_390;
        }
        if ((int)this <= 1667787119)
        {
          if ((_DWORD)this != 1667591277)
          {
            v4 = 1667658618;
            goto LABEL_407;
          }
          return v1;
        }
        if ((_DWORD)this == 1667787120)
          return 5;
        v15 = 1667788397;
LABEL_394:
        if ((_DWORD)this != v15)
          return 0;
        return 5;
      }
      if ((int)this > 1668506474)
      {
        if ((int)this <= 1668506479)
        {
          if ((_DWORD)this == 1668506475)
            return v1;
          v15 = 1668506478;
          goto LABEL_394;
        }
        if ((_DWORD)this == 1668506480)
          return v1;
        v20 = 29283;
      }
      else
      {
        if ((int)this <= 1668181612)
        {
          if ((_DWORD)this == 1668050795)
            return v1;
          v15 = 1668181110;
          goto LABEL_394;
        }
        if ((_DWORD)this == 1668181613)
          return 5;
        v20 = 25379;
      }
      v8 = v20 | 0x63730000;
LABEL_402:
      if ((_DWORD)this != v8)
        return 0;
      return 4;
    }
    if ((int)this <= 1752135522)
    {
      if ((int)this > 1702193507)
      {
        if ((int)this > 1735750500)
        {
          if ((int)this <= 1751737453)
          {
            if ((int)this > 1751413615)
            {
              if ((_DWORD)this == 1751413616)
                return 15;
              v7 = 1751474532;
              goto LABEL_375;
            }
            if ((_DWORD)this != 1735750501)
            {
              v4 = 1751412337;
              goto LABEL_407;
            }
          }
          else
          {
            if ((int)this <= 1751740517)
            {
              if ((_DWORD)this == 1751737454)
                return v1;
              v8 = 1751740451;
              goto LABEL_402;
            }
            if ((_DWORD)this != 1751740518)
            {
              if ((_DWORD)this == 1751740524)
                return 6;
              v4 = 1752131442;
              goto LABEL_407;
            }
          }
          return 4;
        }
        if ((int)this <= 1735354733)
        {
          if ((int)this > 1718843938)
          {
            if ((_DWORD)this == 1718843939)
              return 9;
            v6 = 1719105134;
            goto LABEL_416;
          }
          if ((_DWORD)this != 1702193508)
          {
            v4 = 1718839674;
            goto LABEL_407;
          }
          return v1;
        }
        if ((int)this <= 1735551331)
        {
          if ((_DWORD)this != 1735354734)
          {
            v4 = 1735356005;
            goto LABEL_407;
          }
          return v1;
        }
        if ((_DWORD)this == 1735551332)
          return 1;
        v7 = 1735554416;
LABEL_375:
        if ((_DWORD)this != v7)
          return 0;
        return 15;
      }
      if ((int)this > 1685218912)
      {
        if ((int)this <= 1685287011)
        {
          if (((_DWORD)this - 1685218913) > 0x13 || ((1 << ((_BYTE)this - 97)) & 0x90001) == 0)
          {
            v4 = 1685222501;
            goto LABEL_407;
          }
          return v1;
        }
        if ((int)this > 1685416291)
        {
          if ((_DWORD)this == 1685416292 || (_DWORD)this == 1698776147)
            return v1;
          v9 = 1701733411;
          goto LABEL_390;
        }
        if ((_DWORD)this == 1685287012)
          return v1;
        v5 = 1685414763;
        return (_DWORD)this == v5;
      }
      if ((int)this > 1684629093)
      {
        if ((int)this > 1685087595)
        {
          if ((_DWORD)this == 1685087596)
            return v1;
          v6 = 1685089383;
          goto LABEL_416;
        }
        if ((_DWORD)this != 1684629094)
        {
          v4 = 1684893796;
          goto LABEL_407;
        }
        return v1;
      }
      if ((_DWORD)this == 1684498544)
        return v1;
      if ((_DWORD)this != 1684500589)
      {
        v5 = 1684500594;
        return (_DWORD)this == v5;
      }
      return 7;
    }
    if ((int)this > 1818456941)
    {
      if ((int)this > 1819173228)
      {
        if ((int)this <= 1835100525)
        {
          if ((int)this <= 1819569762)
          {
            if ((_DWORD)this == 1819173229)
              return 6;
            v6 = 1819501422;
            goto LABEL_416;
          }
          if ((_DWORD)this == 1819569763)
            return v1;
          v7 = 1819634020;
          goto LABEL_375;
        }
        if ((int)this <= 1835103091)
        {
          if ((_DWORD)this == 1835100526)
            return v1;
          v15 = 1835101042;
          goto LABEL_394;
        }
        if ((_DWORD)this == 1835103092)
          return v1;
        if ((_DWORD)this != 1835295779)
        {
          v6 = 1835295843;
          goto LABEL_416;
        }
        return 4;
      }
      if ((int)this > 1818850161)
      {
        if ((int)this > 1819107690)
        {
          if ((_DWORD)this == 1819107691)
            return 6;
          v6 = 1819111268;
          goto LABEL_416;
        }
        if ((_DWORD)this != 1818850162)
        {
          v4 = 1818850926;
          goto LABEL_407;
        }
        return 4;
      }
      if ((int)this > 1818457189)
      {
        if ((_DWORD)this == 1818457190)
          return v1;
        v8 = 1818850145;
        goto LABEL_402;
      }
      if ((_DWORD)this == 1818456942)
        return 6;
      v12 = 29558;
      goto LABEL_411;
    }
    if ((int)this <= 1818452845)
    {
      if ((int)this > 1768845171)
      {
        if ((int)this > 1769174369)
        {
          if ((_DWORD)this == 1769174370)
            return v1;
          v4 = 1784767339;
          goto LABEL_407;
        }
        if ((_DWORD)this == 1768845172)
          return v1;
        v7 = 1768907636;
      }
      else
      {
        if ((int)this <= 1768187245)
        {
          if ((_DWORD)this != 1752135523)
          {
            if ((_DWORD)this != 1768124270)
              return 0;
            return 16;
          }
          return v1;
        }
        if ((_DWORD)this == 1768187246)
          return v1;
        v7 = 1768777573;
      }
      goto LABEL_375;
    }
    if ((int)this > 1818454125)
    {
      if ((int)this <= 1818455661)
      {
        if ((_DWORD)this == 1818454126)
          return 6;
        v6 = 1818455660;
        goto LABEL_416;
      }
      if ((_DWORD)this == 1818455662)
        return 6;
      v12 = 29540;
    }
    else
    {
      if ((int)this <= 1818453106)
      {
        if ((_DWORD)this == 1818452846)
          return 6;
        v16 = 1818453106;
        goto LABEL_350;
      }
      if ((_DWORD)this == 1818453107)
        return 7;
      v12 = 25718;
    }
LABEL_411:
    v13 = v12 | 0x6C630000;
    goto LABEL_412;
  }
  if ((int)this <= 1936092275)
  {
    if ((int)this > 1885954664)
    {
      if ((int)this <= 1920168546)
      {
        if ((int)this <= 1886546293)
        {
          if ((int)this <= 1886218605)
          {
            if ((int)this <= 1886152482)
            {
              if ((_DWORD)this != 1885954665)
              {
                v6 = 1885956452;
                goto LABEL_416;
              }
              return 10;
            }
            if ((_DWORD)this != 1886152483)
            {
              v4 = 1886156135;
              goto LABEL_407;
            }
            return 11;
          }
          if ((int)this > 1886353255)
          {
            if ((_DWORD)this == 1886353256)
              return v1;
            v4 = 1886353266;
            goto LABEL_407;
          }
          if ((_DWORD)this != 1886218606)
          {
            v4 = 1886221684;
            goto LABEL_407;
          }
          return v1;
        }
        if ((int)this <= 1919251298)
        {
          if ((int)this > 1919055205)
          {
            if ((_DWORD)this == 1919055206)
              return 1;
            v9 = 1919186467;
            goto LABEL_390;
          }
          if ((_DWORD)this != 1886546294)
          {
            v4 = 1902539642;
            goto LABEL_407;
          }
          return v1;
        }
        if ((int)this <= 1919512166)
        {
          if ((_DWORD)this != 1919251299)
          {
            v4 = 1919251302;
            goto LABEL_407;
          }
          return v1;
        }
        if ((_DWORD)this == 1919512167)
          return v1;
        if ((_DWORD)this == 1919773028)
          return 17;
        v5 = 1919839344;
        return (_DWORD)this == v5;
      }
      if ((int)this <= 1935894893)
      {
        if ((int)this <= 1935763059)
        {
          if ((int)this > 1934587251)
          {
            if ((_DWORD)this == 1934587252)
              return 10;
            v4 = 1935762292;
            goto LABEL_407;
          }
          if ((_DWORD)this == 1920168547)
            return 6;
          v2 = 1920297316;
          goto LABEL_306;
        }
        if ((int)this <= 1935893352)
        {
          if ((_DWORD)this == 1935763060)
            return v1;
          v8 = 1935892841;
          goto LABEL_402;
        }
        if ((_DWORD)this != 1935893353)
        {
          v4 = 1935894638;
          goto LABEL_407;
        }
        return 4;
      }
      if ((int)this > 1935959153)
      {
        if ((int)this > 1935962737)
        {
          if ((_DWORD)this == 1935962738)
            return 4;
          v19 = 29302;
        }
        else
        {
          if ((_DWORD)this == 1935959154)
            return v1;
          v19 = 26994;
        }
        v4 = v19 | 0x73640000;
        goto LABEL_407;
      }
      if (((_DWORD)this - 1935896178) < 2 || (_DWORD)this == 1935894894)
        return 6;
      v13 = 1935946358;
      goto LABEL_412;
    }
    if ((int)this > 1851878763)
    {
      if ((int)this > 1869180522)
      {
        if ((int)this <= 1885762591)
        {
          if ((int)this <= 1870030193)
          {
            if ((_DWORD)this != 1869180523)
            {
              v6 = 1869638759;
              goto LABEL_416;
            }
            return v1;
          }
          if ((_DWORD)this == 1870030194)
            return v1;
          v9 = 1870098020;
          goto LABEL_390;
        }
        if ((int)this > 1885762622)
        {
          if ((_DWORD)this != 1885762623)
          {
            if ((_DWORD)this != 1885762657)
            {
              v3 = 1885762669;
              goto LABEL_206;
            }
            return 14;
          }
          return 12;
        }
        if ((_DWORD)this == 1885762592)
          return 12;
        v10 = 1885762595;
        goto LABEL_272;
      }
      if ((int)this <= 1852601890)
      {
        if ((int)this <= 1852012898)
        {
          if ((_DWORD)this == 1851878764)
            return 6;
          v4 = 1851878770;
          goto LABEL_407;
        }
        if ((_DWORD)this != 1852012899)
        {
          v6 = 1852400499;
          goto LABEL_416;
        }
        return 7;
      }
      if ((int)this <= 1853059618)
      {
        if ((_DWORD)this == 1852601891)
          return 4;
        v8 = 1852601964;
        goto LABEL_402;
      }
      if ((_DWORD)this == 1853059619)
        return 9;
      v21 = 1853059700;
LABEL_386:
      if ((_DWORD)this != v21)
        return 0;
      return 8;
    }
    if ((int)this <= 1836414052)
    {
      if ((int)this <= 1836281890)
      {
        if ((int)this <= 1835628606)
        {
          if ((_DWORD)this == 1835295854)
            return 5;
          v8 = 1835295859;
          goto LABEL_402;
        }
        if ((_DWORD)this != 1835628607)
        {
          v4 = 1835821926;
          goto LABEL_407;
        }
        return v1;
      }
      if ((int)this > 1836282993)
      {
        if ((_DWORD)this == 1836282994)
          return v1;
        v6 = 1836411236;
        goto LABEL_416;
      }
      if ((_DWORD)this == 1836281891)
        return 4;
      v13 = 1836281966;
LABEL_412:
      if ((_DWORD)this != v13)
        return 0;
      return 7;
    }
    if ((int)this > 1836475489)
    {
      if ((int)this > 1836479589)
      {
        if ((_DWORD)this == 1836479590)
          return v1;
        v15 = 1851878757;
        goto LABEL_394;
      }
      if ((_DWORD)this == 1836475490)
        return 7;
      v14 = 29539;
      goto LABEL_247;
    }
    if ((int)this <= 1836462706)
    {
      if ((_DWORD)this == 1836414053)
        return v1;
      v14 = 12900;
LABEL_247:
      v13 = v14 | 0x6D760000;
      goto LABEL_412;
    }
    if ((_DWORD)this == 1836462707)
      return 7;
    v16 = 1836475427;
LABEL_350:
    if ((_DWORD)this != v16)
      return 0;
    return 9;
  }
  if ((int)this > 1937077092)
  {
    if ((int)this <= 1969841249)
    {
      if ((int)this <= 1952805484)
      {
        if ((int)this <= 1937140844)
        {
          if ((int)this > 1937138722)
          {
            if ((_DWORD)this == 1937138723)
              return 9;
            v11 = 27748;
          }
          else
          {
            if ((_DWORD)this == 1937077093)
              return 1;
            v11 = 12900;
          }
          v13 = v11 | 0x73760000;
          goto LABEL_412;
        }
        if ((int)this > 1952542819)
        {
          if ((_DWORD)this == 1952542820)
            return v1;
          v4 = 1952542835;
          goto LABEL_407;
        }
        if ((_DWORD)this != 1937140845)
        {
          v4 = 1937142886;
          goto LABEL_407;
        }
        return 7;
      }
      if ((int)this > 1953326882)
      {
        if ((int)this > 1969514099)
        {
          if ((_DWORD)this == 1969514100)
            return v1;
          v6 = 1969841184;
          goto LABEL_416;
        }
        if ((_DWORD)this != 1953326883)
        {
          v4 = 1953653102;
          goto LABEL_407;
        }
        return 4;
      }
      if ((int)this > 1953002100)
      {
        if ((_DWORD)this == 1953002101)
          return v1;
        v4 = 1953325673;
        goto LABEL_407;
      }
      if ((_DWORD)this != 1952805485)
      {
        v4 = 1953002099;
        goto LABEL_407;
      }
    }
    else
    {
      if ((int)this <= 1986359922)
      {
        if ((int)this <= 1970496881)
        {
          if (((_DWORD)this - 1969841250) < 4)
            return 10;
          v4 = 1970170980;
          goto LABEL_407;
        }
        if ((int)this <= 1986229349)
        {
          if ((_DWORD)this == 1970496882)
            return v1;
          v13 = 1983013986;
          goto LABEL_412;
        }
        if ((_DWORD)this == 1986229350)
          return v1;
        v16 = 1986290211;
        goto LABEL_350;
      }
      if ((int)this > 1987013731)
      {
        if ((int)this <= 2003136115)
        {
          if ((_DWORD)this == 1987013732)
            return 7;
          v13 = 1987013741;
          goto LABEL_412;
        }
        if ((_DWORD)this == 2003136116)
          return v1;
        v21 = 2020373603;
        goto LABEL_386;
      }
      if ((int)this > 1986880098)
      {
        if ((_DWORD)this == 1986880099)
          return 7;
        v13 = 1986885219;
        goto LABEL_412;
      }
      if ((_DWORD)this != 1986359923)
      {
        v4 = 1986425722;
        goto LABEL_407;
      }
    }
  }
  else
  {
    if ((int)this > 1936811107)
    {
      if ((int)this <= 1936879203)
      {
        if ((int)this <= 1936811875)
        {
          if ((_DWORD)this == 1936811108)
            return 1;
          v7 = 1936811109;
          goto LABEL_375;
        }
        if (((_DWORD)this - 1936811876) <= 0x10)
        {
          if (((1 << ((_BYTE)this - 100)) & 0x18005) != 0)
            return 7;
          if ((_DWORD)this == 1936811890)
            return 9;
        }
        if ((_DWORD)this != 1936876644)
          return 0;
      }
      else
      {
        if ((int)this > 1936945762)
        {
          if ((int)this > 1937009954)
          {
            if ((_DWORD)this != 1937009955)
            {
              if ((_DWORD)this != 1937010031)
              {
                v4 = 1937010788;
                goto LABEL_407;
              }
              return v1;
            }
            return 11;
          }
          if ((_DWORD)this != 1936945763)
          {
            v2 = 1937007734;
            goto LABEL_306;
          }
          return 4;
        }
        if ((int)this > 1936941930)
        {
          if ((_DWORD)this == 1936941931)
            return v1;
          v15 = 1936941934;
          goto LABEL_394;
        }
        if ((_DWORD)this != 1936879204)
        {
          v8 = 1936941859;
          goto LABEL_402;
        }
      }
      return 18;
    }
    if ((int)this <= 1936483695)
    {
      if ((int)this > 1936092524)
      {
        if ((int)this > 1936224867)
        {
          if ((_DWORD)this == 1936224868)
            return 10;
          v5 = 1936482681;
          return (_DWORD)this == v5;
        }
        if ((_DWORD)this != 1936092525)
        {
          v3 = 1936092532;
LABEL_206:
          if ((_DWORD)this != v3)
            return 0;
          return 12;
        }
        return 12;
      }
      if ((int)this > 1936092478)
      {
        if ((_DWORD)this != 1936092479)
        {
          if ((_DWORD)this != 1936092513)
            return 0;
          return 14;
        }
        return 12;
      }
      if ((_DWORD)this == 1936092276)
        return v1;
      v10 = 1936092451;
LABEL_272:
      if ((_DWORD)this != v10)
        return 0;
      return 13;
    }
    if ((int)this > 1936744813)
    {
      if ((int)this > 1936745333)
      {
        if ((_DWORD)this == 1936745334)
          return 7;
        v18 = 28195;
      }
      else
      {
        if ((_DWORD)this == 1936744814)
          return 7;
        v18 = 25443;
      }
      v8 = v18 | 0x73700000;
      goto LABEL_402;
    }
    if ((int)this > 1936618860)
    {
      if ((_DWORD)this == 1936618861)
        return 6;
      v4 = 1936682095;
      goto LABEL_407;
    }
    if ((_DWORD)this != 1936483696)
    {
      v4 = 1936553332;
      goto LABEL_407;
    }
  }
  return v1;
}

uint64_t AMCP::HAL::get_hal_property_qualifier_type_code(AMCP::HAL *this)
{
  int v1;
  uint64_t result;
  int v3;
  int v4;

  v1 = (int)this;
  result = 0;
  if (v1 > 1836462691)
  {
    if (v1 <= 1936092524)
    {
      if (v1 > 1886218605)
      {
        if (v1 <= 1935896177)
        {
          if (v1 == 1886218606 || v1 == 1934587252)
            return 3;
          v3 = 1935894894;
          goto LABEL_62;
        }
        if ((v1 - 1935896178) < 2)
          return 3;
        v4 = 1935946358;
        goto LABEL_68;
      }
      if (v1 <= 1870098019)
      {
        if (v1 != 1836462692 && v1 != 1836462707)
        {
          v3 = 1852400499;
          goto LABEL_62;
        }
        return 7;
      }
      if (v1 == 1870098020)
        return 4;
      if (v1 != 1885762669)
      {
        if (v1 != 1885954665)
          return result;
        return 6;
      }
    }
    else
    {
      if (v1 > 1953325672)
      {
        if ((v1 - 1969841250) < 4 || v1 == 1953325673)
          return 6;
        v4 = 1983013986;
        goto LABEL_68;
      }
      if (v1 > 1936811891)
      {
        if (v1 > 1936941933)
        {
          if (v1 == 1936941934)
            return 3;
          v4 = 1937125988;
          goto LABEL_68;
        }
        if (v1 != 1936811892)
        {
          v3 = 1936941931;
          goto LABEL_62;
        }
        return 7;
      }
      if (v1 != 1936092525)
      {
        if (v1 == 1936224868)
          return 3;
        v4 = 1936811878;
        goto LABEL_68;
      }
    }
    return 12;
  }
  if (v1 <= 1684498540)
  {
    if (v1 <= 1668181109)
    {
      if (v1 > 1667658617)
      {
        if (v1 == 1667658618 || v1 == 1667787120)
          return 3;
        v3 = 1668049771;
        goto LABEL_62;
      }
      if (v1 != 1651074160)
      {
        if (v1 == 1667327847 || v1 == 1667523958)
          return 15;
        return result;
      }
      return 6;
    }
    if (v1 <= 1682533919)
    {
      if (v1 == 1668181110 || v1 == 1668506475)
        return 3;
      v3 = 1668506478;
      goto LABEL_62;
    }
    if (v1 == 1682533920 || v1 == 1682929012)
      return 3;
    v4 = 1684157046;
LABEL_68:
    if (v1 != v4)
      return result;
    return 7;
  }
  if (v1 <= 1818453106)
  {
    if (v1 <= 1684500593)
    {
      if (v1 == 1684498541 || v1 == 1684498544)
        return 3;
      v3 = 1684500589;
      goto LABEL_62;
    }
    if (v1 == 1684500594)
      return 3;
    if (v1 != 1685416292)
    {
      v3 = 1751740524;
      goto LABEL_62;
    }
    return 6;
  }
  if (v1 <= 1818456941)
  {
    if (v1 == 1818453107)
      return 7;
    if (v1 == 1818455660)
      return 3;
    v4 = 1818456932;
    goto LABEL_68;
  }
  if (v1 <= 1835295842)
  {
    if (v1 != 1818456942)
    {
      v3 = 1819501422;
      goto LABEL_62;
    }
    return 3;
  }
  if (v1 == 1835295843)
    return 3;
  v3 = 1835295854;
LABEL_62:
  if (v1 == v3)
    return 3;
  return result;
}

uint64_t AMCP::HAL::get_hal_type_code_for_mcp(int a1)
{
  if ((a1 - 1) > 0x1B)
    return 0;
  else
    return dword_1B5D217B8[a1 - 1];
}

uint64_t AMCP::HAL::translate_hal_control_address_to_device(AMCP::HAL *this, uint64_t a2, unsigned int a3, int *a4, const AudioObjectPropertyAddress *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 v11;

  v5 = *a4;
  if (*a4 <= 1818456949)
  {
    if (v5 <= 1818453105)
    {
      if (v5 <= 1651272547)
      {
        if (v5 != 1650685548)
        {
          if (v5 != 1651272546 || (_DWORD)this != 1936028002)
            goto LABEL_257;
          goto LABEL_220;
        }
        if ((int)this > 1819504225)
        {
          if ((int)this <= 1936028001)
          {
            if ((int)this > 1852601963)
            {
              if ((_DWORD)this != 1852601964)
              {
                if ((_DWORD)this != 1885888878)
                {
                  if ((_DWORD)this != 1885893481)
                    goto LABEL_257;
                  goto LABEL_222;
                }
LABEL_176:
                v7 = 1885888768;
                goto LABEL_94;
              }
              goto LABEL_188;
            }
            if ((_DWORD)this != 1819504226)
            {
              if ((_DWORD)this != 1836414053)
                goto LABEL_257;
LABEL_230:
              if ((_DWORD)a2 == 1886679669)
              {
                v6 = 117;
LABEL_232:
                v7 = 1953001984;
                goto LABEL_233;
              }
              v7 = 1836413952;
LABEL_235:
              v6 = 101;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_121;
          }
          if ((int)this > 1937072748)
          {
            if ((_DWORD)this != 1937072749)
            {
              if ((_DWORD)this == 1952541794)
                goto LABEL_103;
              if ((_DWORD)this != 1999790690)
                goto LABEL_257;
              goto LABEL_259;
            }
LABEL_125:
            v7 = 1936553216;
            goto LABEL_126;
          }
          if ((_DWORD)this == 1936028002)
            goto LABEL_220;
          if ((_DWORD)this != 1936682095)
          {
LABEL_91:
            if ((_DWORD)this == 1936744814)
              goto LABEL_92;
LABEL_257:
            v6 = 0;
            v7 = 0;
            return v6 | v7 | (a2 << 32);
          }
LABEL_131:
          if ((_DWORD)a2 != 1886679669)
          {
            v7 = 1936681984;
            v6 = 111;
            return v6 | v7 | (a2 << 32);
          }
          v6 = 115;
          goto LABEL_232;
        }
        if ((int)this > 1685287522)
        {
          if ((int)this <= 1751740517)
          {
            if ((_DWORD)this == 1685287523)
            {
LABEL_140:
              v10 = 1936941824;
LABEL_226:
              v7 = v10 + 3840;
              v6 = 99;
              return v6 | v7 | (a2 << 32);
            }
            if ((_DWORD)this != 1702259059)
            {
              if ((_DWORD)this != 1718432370)
                goto LABEL_257;
              goto LABEL_145;
            }
            goto LABEL_146;
          }
          if ((_DWORD)this != 1751740518)
          {
            if ((_DWORD)this != 1784767339)
            {
              if ((_DWORD)this != 1815241314)
                goto LABEL_257;
              goto LABEL_193;
            }
LABEL_194:
            v7 = 1784767232;
            v6 = 107;
            return v6 | v7 | (a2 << 32);
          }
LABEL_114:
          v6 = 102;
          goto LABEL_204;
        }
        if ((int)this > 1668049263)
        {
          if ((_DWORD)this == 1668049264)
            goto LABEL_109;
          if ((_DWORD)this != 1684370292)
          {
            if ((_DWORD)this != 1684895092)
              goto LABEL_257;
            goto LABEL_117;
          }
          goto LABEL_182;
        }
        if ((_DWORD)this == 1650602615)
          goto LABEL_227;
        if ((_DWORD)this != 1668047723)
          goto LABEL_257;
LABEL_225:
        v10 = 1668506368;
        goto LABEL_226;
      }
      if (v5 == 1651272548)
      {
        if ((_DWORD)this != 1936028002)
          goto LABEL_257;
        v7 = 1936811008;
        goto LABEL_235;
      }
      if (v5 != 1668049771)
        goto LABEL_257;
      if ((_DWORD)this != 1668047723)
      {
LABEL_90:
        if ((_DWORD)this != 1936028002)
          goto LABEL_91;
        goto LABEL_220;
      }
      v6 = 107;
LABEL_202:
      v7 = 1668506368;
      return v6 | v7 | (a2 << 32);
    }
    if (v5 > 1818453109)
    {
      if (v5 == 1818453110)
      {
        if ((int)this <= 1836414052)
          goto LABEL_104;
        if ((int)this <= 1936682094)
        {
          if ((int)this <= 1885893480)
            goto LABEL_173;
          if ((_DWORD)this == 1885893481)
            goto LABEL_222;
          if ((_DWORD)this == 1936028002)
            goto LABEL_220;
          if ((_DWORD)this != 1936028007)
            goto LABEL_257;
          v6 = 100;
          goto LABEL_219;
        }
        if ((int)this <= 1937072757)
          goto LABEL_122;
        if ((int)this <= 1986817380)
        {
          if ((_DWORD)this == 1937072758)
          {
            v6 = 100;
            goto LABEL_262;
          }
LABEL_102:
          if ((_DWORD)this != 1952541794)
            goto LABEL_257;
          goto LABEL_103;
        }
        if ((_DWORD)this == 1999790690)
        {
LABEL_259:
          v7 = 1999790592;
          goto LABEL_260;
        }
        if ((_DWORD)this != 1986817381)
          goto LABEL_257;
        if ((_DWORD)a2 != 1886679669)
        {
          v7 = 1987013632;
          goto LABEL_221;
        }
        v6 = 98;
        v11 = 25600;
LABEL_256:
        v7 = v11 | 0x6D760000u;
        goto LABEL_233;
      }
      if (v5 != 1818456932)
        goto LABEL_257;
      if ((int)this <= 1836414052)
        goto LABEL_104;
      if ((int)this <= 1936682094)
      {
        if ((int)this <= 1885893480)
          goto LABEL_173;
        if ((_DWORD)this == 1885893481)
          goto LABEL_222;
        if ((_DWORD)this == 1936028002)
          goto LABEL_220;
        if ((_DWORD)this != 1936028007)
          goto LABEL_257;
        v6 = 116;
        goto LABEL_219;
      }
      if ((int)this <= 1937072757)
        goto LABEL_122;
      if ((int)this <= 1986817380)
      {
        if ((_DWORD)this == 1937072758)
        {
          v7 = 1937125888;
LABEL_221:
          v6 = 100;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_102;
      }
      if ((_DWORD)this == 1999790690)
        goto LABEL_259;
      if ((_DWORD)this != 1986817381)
        goto LABEL_257;
      if ((_DWORD)a2 != 1886679669)
      {
        v7 = 1983013888;
        goto LABEL_260;
      }
      v6 = 100;
    }
    else
    {
      if (v5 == 1818453106)
      {
        if ((int)this <= 1836414052)
          goto LABEL_104;
        if ((int)this > 1936682094)
        {
          if ((int)this > 1937072757)
          {
            if ((int)this <= 1986817380)
            {
              if ((_DWORD)this == 1937072758)
              {
                v7 = 1937138688;
LABEL_71:
                v6 = 35;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_102;
            }
            if ((_DWORD)this != 1999790690)
            {
              if ((_DWORD)this != 1986817381)
                goto LABEL_257;
              v9 = (_DWORD)a2 == 1886679669;
              v8 = 1986290176;
              v7 = 1836475392;
LABEL_69:
              if (!v9)
                v7 = v8;
              goto LABEL_71;
            }
            goto LABEL_259;
          }
          goto LABEL_122;
        }
        if ((int)this <= 1885893480)
          goto LABEL_173;
        if ((_DWORD)this == 1885893481)
          goto LABEL_222;
        if ((_DWORD)this == 1936028002)
          goto LABEL_220;
        if ((_DWORD)this != 1936028007)
          goto LABEL_257;
        v6 = 114;
LABEL_219:
        v7 = 1936811776;
        return v6 | v7 | (a2 << 32);
      }
      if (v5 != 1818453107)
        goto LABEL_257;
      if ((int)this <= 1836414052)
        goto LABEL_104;
      if ((int)this <= 1936682094)
      {
        if ((int)this <= 1885893480)
          goto LABEL_173;
        if ((_DWORD)this == 1885893481)
          goto LABEL_222;
        if ((_DWORD)this == 1936028002)
          goto LABEL_220;
        if ((_DWORD)this != 1936028007)
          goto LABEL_257;
        v6 = 102;
        goto LABEL_219;
      }
      if ((int)this <= 1937072757)
        goto LABEL_122;
      if ((int)this <= 1986817380)
      {
        if ((_DWORD)this != 1937072758)
          goto LABEL_102;
        v7 = 1935946240;
LABEL_264:
        v6 = 118;
        return v6 | v7 | (a2 << 32);
      }
      if ((_DWORD)this == 1999790690)
        goto LABEL_259;
      if ((_DWORD)this != 1986817381)
        goto LABEL_257;
      if ((_DWORD)a2 != 1886679669)
      {
        v7 = 1684156928;
        goto LABEL_264;
      }
      v6 = 115;
    }
    v11 = 12800;
    goto LABEL_256;
  }
  if (v5 <= 1935894893)
  {
    if (v5 <= 1935892840)
    {
      if (v5 != 1818456950)
      {
        if (v5 != 1818457190)
          goto LABEL_257;
        if ((int)this > 1836414052)
        {
          if ((int)this <= 1936744813)
          {
            if ((int)this > 1885893480)
            {
              if ((_DWORD)this != 1885893481)
              {
                if ((_DWORD)this == 1936028002)
                  goto LABEL_220;
                if ((_DWORD)this != 1936682095)
                  goto LABEL_257;
                goto LABEL_131;
              }
LABEL_222:
              v7 = 1885893376;
              v6 = 105;
              return v6 | v7 | (a2 << 32);
            }
LABEL_173:
            if ((_DWORD)this != 1836414053)
            {
              if ((_DWORD)this != 1852601964)
              {
                if ((_DWORD)this != 1885888878)
                  goto LABEL_257;
                goto LABEL_176;
              }
              goto LABEL_188;
            }
            goto LABEL_230;
          }
          if ((int)this <= 1952541793)
          {
            if ((_DWORD)this != 1936744814)
            {
              if ((_DWORD)this != 1937072749)
              {
                if ((_DWORD)this != 1937072758)
                  goto LABEL_257;
                v7 = 1937142784;
LABEL_214:
                v6 = 102;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_125;
            }
LABEL_92:
            v7 = 1836281856;
            if ((_DWORD)a2 != 1886679669)
              v7 = 1936744704;
            goto LABEL_94;
          }
          if ((_DWORD)this != 1952541794)
          {
            if ((_DWORD)this != 1999790690)
            {
              if ((_DWORD)this != 1986817381)
                goto LABEL_257;
              v7 = 1986229248;
              if ((_DWORD)a2 == 1886679669)
                v7 = 1836479488;
              goto LABEL_214;
            }
            goto LABEL_259;
          }
LABEL_103:
          v6 = 98;
          v7 = 1952541696;
          return v6 | v7 | (a2 << 32);
        }
LABEL_104:
        if ((int)this <= 1702259058)
        {
          if ((int)this <= 1684370291)
          {
            if ((_DWORD)this != 1650602615)
            {
              if ((_DWORD)this != 1668047723)
              {
                if ((_DWORD)this != 1668049264)
                  goto LABEL_257;
LABEL_109:
                v7 = 1668049152;
                v6 = 112;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_225;
            }
LABEL_227:
            v7 = 1650602496;
            v6 = 119;
            return v6 | v7 | (a2 << 32);
          }
          if ((_DWORD)this != 1684370292)
          {
            if ((_DWORD)this == 1684895092)
            {
LABEL_117:
              v7 = 1684894976;
LABEL_126:
              v6 = 116;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_139;
          }
          goto LABEL_182;
        }
        if ((int)this <= 1784767338)
        {
          if ((_DWORD)this != 1702259059)
          {
            if ((_DWORD)this != 1718432370)
            {
              if ((_DWORD)this != 1751740518)
                goto LABEL_257;
              goto LABEL_114;
            }
LABEL_145:
            v7 = 1718432256;
            v6 = 114;
            return v6 | v7 | (a2 << 32);
          }
LABEL_146:
          v7 = 1952542720;
          goto LABEL_221;
        }
        if ((_DWORD)this != 1784767339)
        {
          if ((_DWORD)this != 1815241314)
          {
            if ((_DWORD)this != 1819504226)
              goto LABEL_257;
LABEL_121:
            v7 = 1819504128;
LABEL_260:
            v6 = 98;
            return v6 | v7 | (a2 << 32);
          }
LABEL_193:
          v7 = 1815241216;
          goto LABEL_260;
        }
        goto LABEL_194;
      }
      if ((int)this <= 1836414052)
        goto LABEL_104;
      if ((int)this > 1936682094)
      {
        if ((int)this > 1937072757)
        {
          if ((int)this <= 1986817380)
          {
            if ((_DWORD)this == 1937072758)
            {
              v6 = 109;
LABEL_262:
              v7 = 1937140736;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_102;
          }
          if ((_DWORD)this != 1999790690)
          {
            if ((_DWORD)this != 1986817381)
              goto LABEL_257;
            if ((_DWORD)a2 != 1886679669)
            {
              v7 = 1987013632;
              v6 = 109;
              return v6 | v7 | (a2 << 32);
            }
            v7 = 1836479232;
            v6 = 99;
LABEL_233:
            a2 = 1886679669;
            return v6 | v7 | (a2 << 32);
          }
          goto LABEL_259;
        }
LABEL_122:
        if ((_DWORD)this != 1936682095)
        {
          if ((_DWORD)this == 1936744814)
            goto LABEL_92;
          if ((_DWORD)this != 1937072749)
            goto LABEL_257;
          goto LABEL_125;
        }
        goto LABEL_131;
      }
      if ((int)this <= 1885893480)
        goto LABEL_173;
      if ((_DWORD)this == 1885893481)
        goto LABEL_222;
      if ((_DWORD)this == 1936028002)
        goto LABEL_220;
      if ((_DWORD)this != 1936028007)
        goto LABEL_257;
      v6 = 115;
      goto LABEL_219;
    }
    if (v5 != 1935892841)
    {
      if (v5 != 1935893353)
        goto LABEL_257;
      if ((int)this > 1751740517)
      {
        if ((int)this > 1936028001)
          goto LABEL_90;
        if ((_DWORD)this != 1751740518)
        {
          if ((_DWORD)this != 1852601964)
            goto LABEL_257;
LABEL_188:
          v6 = 108;
          goto LABEL_189;
        }
        goto LABEL_114;
      }
      if ((_DWORD)this != 1668047723)
      {
        if ((_DWORD)this != 1684370292)
        {
LABEL_139:
          if ((_DWORD)this != 1685287523)
            goto LABEL_257;
          goto LABEL_140;
        }
LABEL_182:
        v6 = 115;
        goto LABEL_208;
      }
      goto LABEL_225;
    }
    if ((int)this > 1751740517)
    {
      if ((int)this > 1936028001)
        goto LABEL_90;
      if ((_DWORD)this == 1751740518)
      {
        v6 = 35;
        goto LABEL_204;
      }
      if ((_DWORD)this != 1852601964)
        goto LABEL_257;
      v6 = 35;
LABEL_189:
      v7 = 1852601856;
      return v6 | v7 | (a2 << 32);
    }
    if ((_DWORD)this != 1668047723)
    {
      if ((_DWORD)this != 1684370292)
      {
        if ((_DWORD)this == 1685287523)
        {
          v6 = 35;
          v7 = 1936941824;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_257;
      }
      v6 = 35;
LABEL_208:
      v7 = 1835295744;
      return v6 | v7 | (a2 << 32);
    }
    v6 = 35;
    goto LABEL_202;
  }
  if (v5 <= 1935962741)
  {
    if (v5 != 1935894894)
    {
      v6 = 0;
      v7 = 0;
      if (v5 != 1935962738)
        goto LABEL_257;
      return v6 | v7 | (a2 << 32);
    }
    if ((int)this > 1751740517)
    {
      if ((int)this > 1936028001)
        goto LABEL_90;
      if ((_DWORD)this != 1751740518)
      {
        if ((_DWORD)this != 1852601964)
          goto LABEL_257;
        v6 = 108;
        v7 = 1818455552;
        return v6 | v7 | (a2 << 32);
      }
      v6 = 108;
LABEL_204:
      v7 = 1751740416;
      return v6 | v7 | (a2 << 32);
    }
    if ((_DWORD)this != 1668047723)
    {
      if ((_DWORD)this != 1684370292)
      {
        if ((_DWORD)this == 1685287523)
        {
          v6 = 110;
          v7 = 1819501312;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_257;
      }
      v6 = 99;
      goto LABEL_208;
    }
    v7 = 1818456832;
LABEL_94:
    v6 = 110;
    return v6 | v7 | (a2 << 32);
  }
  v6 = 0;
  v7 = 0;
  if (v5 != 1935962742)
  {
    if (v5 != 1936745315)
    {
      if (v5 != 1936745334)
        goto LABEL_257;
      goto LABEL_90;
    }
    if ((_DWORD)this != 1936028002)
    {
      if ((_DWORD)this != 1936744814)
        goto LABEL_257;
      v8 = 1936748032;
      v9 = (_DWORD)a2 == 1886679669;
      v7 = 1836281856;
      goto LABEL_69;
    }
LABEL_220:
    v7 = 1936811008;
    goto LABEL_221;
  }
  return v6 | v7 | (a2 << 32);
}

void AMCP::HAL::translate_mcp_value_to_hal_by_type(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, applesauce::CF::DataRef *a4@<X8>)
{
  applesauce::CF::DataRef *v4;
  uint64_t v6;
  std::vector<char>::pointer v7;
  std::vector<char>::pointer v8;
  AudioStreamRangedDescription *v9;
  AudioStreamRangedDescription *v10;
  unint64_t v11;
  AudioStreamRangedDescription *v12;
  double *v13;
  double *v14;
  _OWORD *v15;
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  AudioStreamRangedDescription *v28;
  uint64_t type;
  std::vector<char>::pointer v30;
  uint64_t v31;
  std::vector<char>::pointer v32;
  uint64_t v33;
  std::vector<char>::pointer v34;
  void (*v35)(uint64_t, uint64_t, _QWORD, void **);
  void (*v36)(uint64_t, uint64_t, _QWORD, void **);
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  size_t v40;
  Float64 mMinimum;
  void **v42;
  size_t v43;
  void **v44;
  CFDataRef v45;
  std::vector<char>::pointer v46;
  uint64_t *v47;
  unint64_t v48;
  double *v49;
  _OWORD *v50;
  double v51;
  double v52;
  unint64_t v53;
  uint64_t *v54;
  double *v55;
  unint64_t v56;
  unsigned int *v57;
  double *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  AudioStreamRangedDescription *v71;
  std::vector<char>::pointer v72;
  std::vector<char>::pointer begin;
  const UInt8 *v74;
  std::vector<char>::pointer v75;
  _QWORD *v76;
  CFDataRef v77;
  uint64_t v78;
  std::vector<char>::pointer v79;
  uint64_t v80;
  std::vector<char>::pointer v81;
  uint64_t v82;
  std::vector<char>::pointer v83;
  uint64_t v84;
  CFDataRef v85;
  uint64_t v86;
  CFIndex v87;
  uint64_t v88;
  CFStringRef v89;
  CFStringRef v90;
  uint64_t v91;
  uint64_t v92;
  std::vector<char>::pointer v93;
  uint64_t v94;
  std::vector<char>::pointer v95;
  uint64_t v96;
  uint64_t v97;
  CFDataRef v98;
  uint64_t v99;
  unint64_t v100;
  const AudioStreamRangedDescription *v101;
  CFDataRef v102;
  CFDataRef v103;
  uint64_t v104;
  const void *v105;
  uint64_t v106;
  CFDataRef Data;
  CFDataRef v108;
  std::runtime_error *exception;
  applesauce::CF::DataRef *v110;
  applesauce::CF::DataRef *v111;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v113;
  std::vector<char>::pointer v114;
  std::vector<char>::pointer v115;
  double *v116;
  AudioValueRange v117;
  std::vector<char> v118;
  uint64_t v119;
  std::vector<char>::value_type __x[8];
  void *__p[2];
  __int128 v122;
  uint64_t (*v123)(uint64_t, void **, _QWORD, std::vector<char>::value_type *);

  v4 = a4;
  switch(a3)
  {
    case 1:
      if (a2 != 16)
        goto LABEL_246;
      if (!*(_QWORD *)(a1 + 32))
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        memset(&v118, 0, sizeof(v118));
LABEL_240:
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, v38, v39, v40);
        goto LABEL_252;
      }
      v35 = (void (*)(uint64_t, uint64_t, _QWORD, void **))AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      v36 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(a1 + 32);
      __p[0] = 0;
      if (v36)
      {
        v36(3, a1, 0, __p);
        v36 = (void (*)(uint64_t, uint64_t, _QWORD, void **))__p[0];
      }
      if (v36 == v35)
      {
        __p[0] = v35;
        v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a1 + 32))(4, a1, 0, __p);
        memset(&v118, 0, sizeof(v118));
        if (v37)
        {
          v38 = *(const void **)v37;
          v39 = *(_QWORD *)(v37 + 8);
          v40 = v39 - *(_QWORD *)v37;
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
        }
        goto LABEL_240;
      }
      *(_QWORD *)&v117.mMinimum = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, AudioValueRange *))(a1 + 32))(6, a1, __p, &v117);
      if (v123)
      {
        *(_QWORD *)__x = v35;
        v104 = v123(4, __p, 0, __x);
        memset(&v118, 0, sizeof(v118));
        if (v104)
        {
          v105 = *(const void **)v104;
          v106 = *(_QWORD *)(v104 + 8);
        }
        else
        {
          v106 = 0;
          v105 = 0;
        }
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, v105, v106, v106 - (_QWORD)v105);
      }
      else
      {
        memset(&v118, 0, sizeof(v118));
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, 0, 0, 0);
      }
      if (v123)
        v123(0, __p, 0, 0);
LABEL_252:
      begin = v118.__begin_;
      v108 = CFDataCreate(0, (const UInt8 *)v118.__begin_, v118.__end_ - v118.__begin_);
      applesauce::CF::DataRef::DataRef(v4, v108);
LABEL_253:
      if (begin)
        operator delete(begin);
      return;
    case 2:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      type = AMCP::Implementation::get_type_marker<int>();
      v30 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v30)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v30)(3, a1, 0, &v118);
        v30 = v118.__begin_;
      }
      if (v30 == (std::vector<char>::pointer)type)
      {
        *(_QWORD *)&v117.mMinimum = type;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
        goto LABEL_187;
      }
      *(_QWORD *)__x = AMCP::Implementation::get_type_marker<int>();
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        v119 = type;
        v91 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (v91)
        {
LABEL_187:
          LODWORD(__p[0]) = AMCP::Thing::convert_to<int>(a1);
          goto LABEL_205;
        }
      }
      goto LABEL_246;
    case 3:
    case 10:
      AMCP::HAL::translate_simple_mcp_value_to_hal<unsigned int>(a4, a1);
      return;
    case 4:
      switch(a2)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
          goto LABEL_246;
        case 0xDu:
        case 0x15u:
          AMCP::HAL::translate_simple_mcp_value_to_hal<std::tuple<unsigned int,unsigned int>>(a4, a1);
          break;
        case 0x14u:
          goto LABEL_66;
        default:
          goto LABEL_67;
      }
      return;
    case 5:
LABEL_67:
      if (!AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1))
        goto LABEL_246;
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v117, a1);
      mMinimum = v117.mMinimum;
      if (!*(_QWORD *)&v117.mMinimum)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *(const __CFString **)&v117.mMinimum);
      if ((SBYTE7(v122) & 0x80u) == 0)
        v42 = __p;
      else
        v42 = (void **)__p[0];
      v43 = strlen((const char *)v42);
      __x[0] = 0;
      std::vector<char>::vector(&v118, v43 + 1, __x);
      if ((SBYTE7(v122) & 0x80u) == 0)
        v44 = __p;
      else
        v44 = (void **)__p[0];
      memcpy(v118.__begin_, v44, v118.__end_ - v118.__begin_);
      v45 = CFDataCreate(0, (const UInt8 *)v118.__begin_, v118.__end_ - v118.__begin_);
      applesauce::CF::DataRef::DataRef(v4, v45);
      if (v118.__begin_)
      {
        v118.__end_ = v118.__begin_;
        operator delete(v118.__begin_);
      }
      if (SBYTE7(v122) < 0)
        operator delete(__p[0]);
      goto LABEL_182;
    case 6:
      if (!AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1))
        goto LABEL_246;
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(__p, a1);
      AMCP::HAL::translate_cf_string_mcp_value_to_hal(v4, (CFStringRef *)__p);
      if (__p[0])
        CFRelease(__p[0]);
      return;
    case 7:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      v33 = AMCP::Implementation::get_type_marker<float>();
      v34 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v34)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v34)(3, a1, 0, &v118);
        v34 = v118.__begin_;
      }
      if (v34 == (std::vector<char>::pointer)v33)
      {
        *(_QWORD *)&v117.mMinimum = v33;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
      }
      else
      {
        *(_QWORD *)__x = AMCP::Implementation::get_type_marker<float>();
        *(_OWORD *)__p = 0u;
        v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123)
          goto LABEL_246;
        v119 = v33;
        v96 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (!v96)
          goto LABEL_246;
      }
      LODWORD(__p[0]) = AMCP::Thing::convert_to<float>(a1);
LABEL_205:
      v87 = 4;
      goto LABEL_211;
    case 8:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      v80 = AMCP::Implementation::get_type_marker<double>();
      v81 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v81)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v81)(3, a1, 0, &v118);
        v81 = v118.__begin_;
      }
      if (v81 == (std::vector<char>::pointer)v80)
      {
        *(_QWORD *)&v117.mMinimum = v80;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
        goto LABEL_210;
      }
      *(_QWORD *)__x = AMCP::Implementation::get_type_marker<double>();
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        v119 = v80;
        v97 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (v97)
        {
LABEL_210:
          __p[0] = COERCE_VOID_(AMCP::Thing::convert_to<double>(a1));
          v87 = 8;
          goto LABEL_211;
        }
      }
      goto LABEL_246;
    case 9:
      if (a2 < 0x19 || a2 - 27 < 2)
        goto LABEL_246;
      if (a2 == 26)
      {
        AMCP::HAL::translate_simple_mcp_value_to_hal<CA::ValueRange>(a4, a1);
        return;
      }
      if (a2 == 25)
      {
        if (!AMCP::Thing::can_convert_to<CA::ValueRangeList>(a1))
          goto LABEL_246;
        AMCP::Thing::convert_to<CA::ValueRangeList>(__p, a1);
        begin = (std::vector<char>::pointer)__p[0];
        v72 = (std::vector<char>::pointer)__p[1];
        std::vector<double>::vector(&v118, ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3) & 0xFFFFFFFE);
        v74 = (const UInt8 *)v118.__begin_;
        if (begin != v72)
        {
          v75 = v118.__begin_;
          v76 = begin;
          do
          {
            *(_QWORD *)v75 = *v76;
            *((_QWORD *)v75 + 1) = v76[1];
            v76 += 2;
            v75 += 16;
          }
          while (v76 != (_QWORD *)v72);
        }
        v77 = CFDataCreate(0, v74, v118.__end_ - (std::vector<char>::pointer)v74);
        applesauce::CF::DataRef::DataRef(v4, v77);
        if (v118.__begin_)
        {
          v118.__end_ = v118.__begin_;
          operator delete(v118.__begin_);
        }
        goto LABEL_253;
      }
LABEL_144:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      v78 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      v79 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v79)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v79)(3, a1, 0, &v118);
        v79 = v118.__begin_;
      }
      if (v79 == (std::vector<char>::pointer)v78)
      {
        *(_QWORD *)&v117.mMinimum = v78;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
      }
      else
      {
        *(_QWORD *)__x = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
        *(_OWORD *)__p = 0u;
        v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123)
          goto LABEL_246;
        v119 = v78;
        v86 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (!v86)
          goto LABEL_246;
      }
      v123 = 0;
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)__p, a1);
      v87 = 40;
LABEL_211:
      v98 = CFDataCreate(0, (const UInt8 *)__p, v87);
      applesauce::CF::DataRef::DataRef(v4, v98);
      return;
    case 11:
LABEL_66:
      AMCP::HAL::translate_vector_mcp_value_to_hal<unsigned int>(a4, a1);
      return;
    case 12:
      goto LABEL_144;
    case 13:
      if (!AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1))
        goto LABEL_246;
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&v118, a1);
      v46 = v118.__begin_;
      end = v118.__end_;
      if (v118.__begin_ != v118.__end_)
      {
        v111 = v4;
        v9 = 0;
        v47 = 0;
        v48 = 0;
        while (1)
        {
          v49 = *(double **)v46;
          v114 = v46;
          v116 = (double *)*((_QWORD *)v46 + 1);
          if (*(double **)v46 != v116)
            break;
LABEL_132:
          v46 = v114 + 64;
          if (v114 + 64 == end)
          {
            v4 = v111;
            goto LABEL_229;
          }
        }
        v50 = v46 + 32;
LABEL_88:
        v52 = *v49;
        v51 = v49[1];
        v53 = 21;
        v54 = &AMCP::Utility::Common_Sample_Rate::k_list;
        while (1)
        {
          v55 = (double *)&v54[v53 >> 1];
          if (*v55 >= v52)
          {
            v53 >>= 1;
            if (*v55 == v52)
            {
              v54 = (uint64_t *)v55;
LABEL_95:
              v56 = 21;
              v57 = (unsigned int *)&AMCP::Utility::Common_Sample_Rate::k_list;
              while (1)
              {
                v58 = (double *)&v57[2 * (v56 >> 1)];
                if (*v58 >= v51)
                {
                  v56 >>= 1;
                  if (*v58 == v51)
                  {
                    v57 = (unsigned int *)v58;
LABEL_102:
                    if (v57 == dword_1B5D217B8)
                    {
                      v57 = dword_1B5D217B8;
                    }
                    else if (*(double *)v57 <= v51)
                    {
                      v57 += 2;
                    }
                    if ((char *)v57 - (char *)v54 < 0 || !v54)
LABEL_212:
                      std::terminate();
                    if (v57 != (unsigned int *)v54)
                    {
                      v59 = 0;
                      v60 = (unint64_t)((char *)v57 - (char *)v54) >> 3;
                      while (v60 > v59)
                      {
                        v61 = v50[1];
                        *(_OWORD *)__p = *v50;
                        v122 = v61;
                        v62 = v54[v59];
                        if ((unint64_t)v47 >= v48)
                        {
                          v64 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v9) >> 3) + 1;
                          if (v64 > 0x666666666666666)
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          if (0x999999999999999ALL * ((uint64_t)(v48 - (_QWORD)v9) >> 3) > v64)
                            v64 = 0x999999999999999ALL * ((uint64_t)(v48 - (_QWORD)v9) >> 3);
                          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - (_QWORD)v9) >> 3) >= 0x333333333333333)
                            v65 = 0x666666666666666;
                          else
                            v65 = v64;
                          if (v65)
                            v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v65);
                          else
                            v66 = 0;
                          v67 = v65 + 8 * (((char *)v47 - (char *)v9) >> 3);
                          *(_QWORD *)v67 = v62;
                          *(_OWORD *)(v67 + 8) = *(_OWORD *)__p;
                          *(_OWORD *)(v67 + 24) = v122;
                          if (v47 == (uint64_t *)v9)
                          {
                            v71 = (AudioStreamRangedDescription *)(v65 + 8 * (((char *)v47 - (char *)v9) >> 3));
                          }
                          else
                          {
                            v68 = v65 + 8 * (((char *)v47 - (char *)v9) >> 3);
                            do
                            {
                              v69 = *(_OWORD *)(v47 - 5);
                              v70 = *(_OWORD *)(v47 - 3);
                              v71 = (AudioStreamRangedDescription *)(v68 - 40);
                              *(_QWORD *)(v68 - 8) = *(v47 - 1);
                              *(_OWORD *)(v68 - 24) = v70;
                              *(_OWORD *)(v68 - 40) = v69;
                              v47 -= 5;
                              v68 -= 40;
                            }
                            while (v47 != (uint64_t *)v9);
                          }
                          v48 = v65 + 40 * v66;
                          v47 = (uint64_t *)(v67 + 40);
                          if (v9)
                            operator delete(v9);
                          v9 = v71;
                        }
                        else
                        {
                          *v47 = v62;
                          v63 = *(_OWORD *)__p;
                          *(_OWORD *)(v47 + 3) = v122;
                          *(_OWORD *)(v47 + 1) = v63;
                          v47 += 5;
                        }
                        if (++v59 == v60)
                          goto LABEL_131;
                      }
                      goto LABEL_212;
                    }
LABEL_131:
                    v49 += 2;
                    if (v49 == v116)
                      goto LABEL_132;
                    goto LABEL_88;
                  }
                }
                else
                {
                  v57 = (unsigned int *)(v58 + 1);
                  v56 += ~(v56 >> 1);
                }
                if (!v56)
                  goto LABEL_102;
              }
            }
          }
          else
          {
            v54 = (uint64_t *)(v55 + 1);
            v53 += ~(v53 >> 1);
          }
          if (!v53)
            goto LABEL_95;
        }
      }
      v9 = 0;
      v47 = 0;
LABEL_229:
      v103 = CFDataCreate(0, (const UInt8 *)v9, (char *)v47 - (char *)v9);
      applesauce::CF::DataRef::DataRef(v4, v103);
LABEL_230:
      if (v9)
        operator delete(v9);
      __p[0] = &v118;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    case 14:
      if (!AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1))
        goto LABEL_246;
      v110 = v4;
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&v118, a1);
      v8 = v118.__begin_;
      v113 = v118.__end_;
      if (v118.__begin_ == v118.__end_)
      {
        v9 = 0;
        v10 = 0;
        v12 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        do
        {
          v13 = *(double **)v8;
          v14 = (double *)*((_QWORD *)v8 + 1);
          v115 = v8;
          if (*(double **)v8 != v14)
          {
            v15 = v8 + 32;
            do
            {
              v16 = v15[1];
              *(_OWORD *)__p = *v15;
              v122 = v16;
              if (*v13 == v13[1])
                v17 = *v13;
              else
                v17 = 0.0;
              v117 = *(AudioValueRange *)v13;
              if ((unint64_t)v12 >= v11)
              {
                v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v12 - (char *)v9) >> 3);
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) > 0x492492492492492)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v11 - (_QWORD)v9) >> 3) > v20)
                  v20 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v11 - (_QWORD)v9) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - (_QWORD)v9) >> 3)) >= 0x249249249249249)
                  v21 = 0x492492492492492;
                else
                  v21 = v20;
                if (v21)
                  v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v21);
                else
                  v22 = 0;
                v23 = v21 + 56 * v19;
                *(double *)v23 = v17;
                *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
                *(_OWORD *)(v23 + 24) = v122;
                *(AudioValueRange *)(v23 + 40) = v117;
                if (v10 == v9)
                {
                  v28 = (AudioStreamRangedDescription *)(v21 + 56 * v19);
                }
                else
                {
                  v24 = v21 + 56 * v19;
                  do
                  {
                    v25 = *(_OWORD *)&v10[-1].mFormat.mSampleRate;
                    v26 = *(_OWORD *)&v10[-1].mFormat.mBytesPerPacket;
                    v27 = *(_OWORD *)&v10[-1].mFormat.mBitsPerChannel;
                    v28 = (AudioStreamRangedDescription *)(v24 - 56);
                    *(Float64 *)(v24 - 8) = v10[-1].mSampleRateRange.mMaximum;
                    *(_OWORD *)(v24 - 24) = v27;
                    *(_OWORD *)(v24 - 40) = v26;
                    *(_OWORD *)(v24 - 56) = v25;
                    --v10;
                    v24 -= 56;
                  }
                  while (v10 != v9);
                }
                v11 = v21 + 56 * v22;
                v10 = (AudioStreamRangedDescription *)(v23 + 56);
                if (v9)
                  operator delete(v9);
                v9 = v28;
              }
              else
              {
                v12->mFormat.mSampleRate = v17;
                v18 = v122;
                *(_OWORD *)&v12->mFormat.mFormatID = *(_OWORD *)__p;
                *(_OWORD *)&v12->mFormat.mBytesPerFrame = v18;
                v12->mSampleRateRange = v117;
                v10 = v12 + 1;
              }
              v13 += 2;
              v12 = v10;
            }
            while (v13 != v14);
          }
          v8 = v115 + 64;
        }
        while (v115 + 64 != v113);
      }
      v100 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 == v9)
        v101 = 0;
      else
        v101 = (const AudioStreamRangedDescription *)v100;
      std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>((CAStreamRangedDescription *)v9, v12, v101, 1);
      v102 = CFDataCreate(0, (const UInt8 *)v9, (char *)v10 - (char *)v9);
      applesauce::CF::DataRef::DataRef(v110, v102);
      goto LABEL_230;
    case 15:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_194;
      v31 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      v32 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v32)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v32)(3, a1, 0, &v118);
        v32 = v118.__begin_;
      }
      if (v32 == (std::vector<char>::pointer)v31)
      {
        *(_QWORD *)&v117.mMinimum = v31;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_194;
LABEL_192:
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(__p, a1);
        v93 = (std::vector<char>::pointer)__p[0];
        if (__p[0])
        {
          CFRetain(__p[0]);
          CFRelease(v93);
        }
        goto LABEL_244;
      }
      *(_QWORD *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        v119 = v31;
        v92 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (v92)
          goto LABEL_192;
      }
LABEL_194:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_218;
      v94 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      v95 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v95)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v95)(3, a1, 0, &v118);
        v95 = v118.__begin_;
      }
      if (v95 == (std::vector<char>::pointer)v94)
      {
        *(_QWORD *)&v117.mMinimum = v94;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_218;
LABEL_217:
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::NumberRef::~NumberRef((const void **)__p);
        goto LABEL_244;
      }
      *(_QWORD *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      *(_OWORD *)__p = 0u;
      v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        v119 = v94;
        v99 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (v99)
          goto LABEL_217;
      }
LABEL_218:
      if (AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::StringRef::~StringRef((const void **)__p);
      }
      else if (AMCP::Thing::can_convert_to<applesauce::CF::DataRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::DataRef::~DataRef((const void **)__p);
      }
      else if (AMCP::Thing::can_convert_to<applesauce::CF::ArrayRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::ArrayRef::~ArrayRef((const void **)__p);
      }
      else
      {
        if (!AMCP::Thing::can_convert_to<applesauce::CF::DictionaryRef>(a1))
          goto LABEL_246;
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
      }
LABEL_244:
      if (v93)
      {
        Data = CFPropertyListCreateData(0, v93, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        applesauce::CF::DataRef::DataRef(v4, Data);
        CFRelease(v93);
        return;
      }
LABEL_246:
      *(_QWORD *)v4 = 0;
      return;
    case 16:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      v6 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      v7 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v7)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v7)(3, a1, 0, &v118);
        v7 = v118.__begin_;
      }
      if (v7 == (std::vector<char>::pointer)v6)
      {
        *(_QWORD *)&v117.mMinimum = v6;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
      }
      else
      {
        *(_QWORD *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
        *(_OWORD *)__p = 0u;
        v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123)
          goto LABEL_246;
        v119 = v6;
        v88 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (!v88)
          goto LABEL_246;
      }
      AMCP::Thing::convert_to<applesauce::CF::URLRef>(__p, a1);
      mMinimum = *(double *)__p;
      v89 = CFURLGetString((CFURLRef)__p[0]);
      v90 = v89;
      if (v89)
        CFRetain(v89);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v118, v90);
      AMCP::HAL::translate_cf_string_mcp_value_to_hal(v4, (CFStringRef *)&v118);
      if (v118.__begin_)
        CFRelease(v118.__begin_);
      if (mMinimum != 0.0)
LABEL_182:
        CFRelease(*(CFTypeRef *)&mMinimum);
      return;
    case 17:
      if (a2 > 0x1C)
        goto LABEL_157;
      goto LABEL_246;
    case 18:
LABEL_157:
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_246;
      v82 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
      v83 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v83)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, std::vector<char> *))v83)(3, a1, 0, &v118);
        v83 = v118.__begin_;
      }
      if (v83 == (std::vector<char>::pointer)v82)
      {
        *(_QWORD *)&v117.mMinimum = v82;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117))
          goto LABEL_246;
      }
      else
      {
        *(_QWORD *)__x = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
        *(_OWORD *)__p = 0u;
        v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123)
          goto LABEL_246;
        v119 = v82;
        v84 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123)
          v123(0, __p, 0, 0);
        if (!v84)
          goto LABEL_246;
      }
      AMCP::Thing::convert_to<CA::ChannelLayout>(__p, a1);
      begin = (std::vector<char>::pointer)__p[0];
      v85 = CFDataCreate(0, (const UInt8 *)__p[0], (char *)__p[1] - (char *)__p[0]);
      applesauce::CF::DataRef::DataRef(v4, v85);
      goto LABEL_253;
    default:
      goto LABEL_246;
  }
}

void sub_1B58DD850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  if (v31)
    operator delete(v31);
  _Unwind_Resume(exception_object);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<unsigned int>(applesauce::CF::DataRef *result, uint64_t a2)
{
  applesauce::CF::DataRef *v2;
  uint64_t type;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  applesauce::CF::DataRef *v6;
  CFDataRef v7;
  uint64_t v8;
  uint64_t v9;
  UInt8 bytes[16];
  __int128 v11;
  uint64_t (*v12)(uint64_t, UInt8 *, _QWORD, uint64_t *);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, _QWORD, _QWORD);

  v2 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned int>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    v5 = v14;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v9 = AMCP::Implementation::get_type_marker<unsigned int>();
    *(_OWORD *)bytes = 0u;
    v11 = 0u;
    v12 = 0;
    result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v9);
    if (!v12)
      goto LABEL_12;
    v8 = type;
    result = (applesauce::CF::DataRef *)v12(4, bytes, 0, &v8);
    v6 = result;
    if (v12)
      result = (applesauce::CF::DataRef *)v12(0, bytes, 0, 0);
    if (!v6)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)bytes = AMCP::Thing::convert_to<unsigned int>(a2);
    v7 = CFDataCreate(0, bytes, 4);
    return applesauce::CF::DataRef::DataRef(v2, v7);
  }
  v13 = type;
  result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v13);
  if (result)
    goto LABEL_11;
LABEL_12:
  *(_QWORD *)v2 = 0;
  return result;
}

void sub_1B58DDB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a15)
    a15(0, &a11, 0, 0);
  _Unwind_Resume(exception_object);
}

void AMCP::HAL::translate_vector_mcp_value_to_hal<unsigned int>(applesauce::CF::DataRef *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  void *v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t (*v12)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_13;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    v5 = v14;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v13 = v4;
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v13))
    {
LABEL_13:
      *(_QWORD *)a1 = 0;
      return;
    }
  }
  else
  {
    v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
    memset(v11, 0, sizeof(v11));
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v11, &v10);
    if (!v12)
      goto LABEL_13;
    v9 = v4;
    v6 = v12(4, v11, 0, &v9);
    if (v12)
      v12(0, v11, 0, 0);
    if (!v6)
      goto LABEL_13;
  }
  AMCP::Thing::convert_to<std::vector<unsigned int>>(v11, a2);
  v7 = *(void **)&v11[0];
  v8 = CFDataCreate(0, *(const UInt8 **)&v11[0], *((_QWORD *)&v11[0] + 1) - *(_QWORD *)&v11[0]);
  applesauce::CF::DataRef::DataRef(a1, v8);
  if (v7)
    operator delete(v7);
}

void sub_1B58DDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<std::tuple<unsigned int,unsigned int>>(applesauce::CF::DataRef *result, uint64_t a2)
{
  applesauce::CF::DataRef *v2;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  applesauce::CF::DataRef *v6;
  CFDataRef v7;
  uint64_t v8;
  uint64_t v9;
  UInt8 bytes[16];
  __int128 v11;
  uint64_t (*v12)(uint64_t, UInt8 *, _QWORD, uint64_t *);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, _QWORD, _QWORD);

  v2 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    v5 = v14;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v9 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
    *(_OWORD *)bytes = 0u;
    v11 = 0u;
    v12 = 0;
    result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v9);
    if (!v12)
      goto LABEL_12;
    v8 = v4;
    result = (applesauce::CF::DataRef *)v12(4, bytes, 0, &v8);
    v6 = result;
    if (v12)
      result = (applesauce::CF::DataRef *)v12(0, bytes, 0, 0);
    if (!v6)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)bytes = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a2);
    v7 = CFDataCreate(0, bytes, 8);
    return applesauce::CF::DataRef::DataRef(v2, v7);
  }
  v13 = v4;
  result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v13);
  if (result)
    goto LABEL_11;
LABEL_12:
  *(_QWORD *)v2 = 0;
  return result;
}

void sub_1B58DDE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a15)
    a15(0, &a11, 0, 0);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DDFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::HAL::translate_cf_string_mcp_value_to_hal(AMCP::HAL *this, CFStringRef *a2)
{
  CFIndex Length;
  CFDataRef v5;
  __int16 v6;
  void *__p;
  _BYTE *v8;
  CFRange v9;

  if (*a2)
  {
    Length = CFStringGetLength(*a2);
    v6 = 0;
    std::vector<unsigned short>::vector(&__p, Length, &v6);
    v9.length = (v8 - (_BYTE *)__p) >> 1;
    v9.location = 0;
    CFStringGetCharacters(*a2, v9, (UniChar *)__p);
    v5 = CFDataCreate(0, (const UInt8 *)__p, v8 - (_BYTE *)__p);
    applesauce::CF::DataRef::DataRef(this, v5);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1B58DE08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<CA::ValueRangeList>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DE1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B58DE224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<CA::ValueRange>(applesauce::CF::DataRef *result, uint64_t a2)
{
  applesauce::CF::DataRef *v2;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  applesauce::CF::DataRef *v6;
  uint64_t v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  UInt8 bytes[16];
  __int128 v12;
  uint64_t (*v13)(uint64_t, UInt8 *, _QWORD, uint64_t *);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, _QWORD, _QWORD);

  v2 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v15 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v15);
    v5 = v15;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v10 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
    *(_OWORD *)bytes = 0u;
    v12 = 0u;
    v13 = 0;
    result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v10);
    if (!v13)
      goto LABEL_12;
    v9 = v4;
    result = (applesauce::CF::DataRef *)v13(4, bytes, 0, &v9);
    v6 = result;
    if (v13)
      result = (applesauce::CF::DataRef *)v13(0, bytes, 0, 0);
    if (!v6)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)bytes = AMCP::Thing::convert_to<CA::ValueRange>(a2);
    *(_QWORD *)&bytes[8] = v7;
    v8 = CFDataCreate(0, bytes, 16);
    return applesauce::CF::DataRef::DataRef(v2, v8);
  }
  v14 = v4;
  result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v14);
  if (result)
    goto LABEL_11;
LABEL_12:
  *(_QWORD *)v2 = 0;
  return result;
}

void sub_1B58DE374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(_QWORD, char *, _QWORD, _QWORD))
{
  if (a15)
    a15(0, &a11, 0, 0);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DE4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>(CAStreamRangedDescription *a1, AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3, char a4)
{
  const AudioStreamRangedDescription *v5;
  AudioStreamRangedDescription *v8;
  AudioStreamRangedDescription *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  AudioStreamRangedDescription *v13;
  uint64_t v14;
  const AudioStreamRangedDescription *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CAStreamRangedDescription *v28;
  CAStreamRangedDescription *v29;
  CAStreamRangedDescription *v30;
  CAStreamRangedDescription *v31;
  CAStreamRangedDescription *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  Float64 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  BOOL v46;
  const AudioStreamRangedDescription *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const AudioStreamRangedDescription *v51;
  int v52;
  AudioStreamRangedDescription *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  const AudioStreamRangedDescription *v82;
  const AudioStreamRangedDescription *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  Float64 mMaximum;
  Float64 v88;
  __int128 v89;
  __int128 v90;
  const AudioStreamRangedDescription *v91;
  Float64 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  const AudioStreamRangedDescription *v97;
  Float64 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  CAStreamRangedDescription *v110;
  BOOL v112;
  uint64_t v113;
  CAStreamRangedDescription *v114;
  const AudioStreamRangedDescription *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  uint64_t v129;
  AudioStreamRangedDescription *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  int64_t v144;
  AudioStreamRangedDescription *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  const AudioStreamRangedDescription *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  CAStreamRangedDescription *v184;
  uint64_t v185;
  __int128 v186;
  char v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  AudioStreamRangedDescription *v191;
  AudioStreamRangedDescription *v192;
  AudioStreamRangedDescription *v193;
  AudioStreamRangedDescription v194;
  AudioStreamRangedDescription v195;

  v5 = a3;
LABEL_2:
  v8 = a2 - 1;
  v191 = a2 - 3;
  v192 = a2 - 2;
  v9 = (AudioStreamRangedDescription *)a1;
  v193 = a2;
  while (2)
  {
    a1 = (CAStreamRangedDescription *)v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v8, v9, a3))
        {
          v70 = *(_OWORD *)&v9->mFormat.mSampleRate;
          v71 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
          v72 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
          v195.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
          *(_OWORD *)&v195.mFormat.mBytesPerPacket = v71;
          *(_OWORD *)&v195.mFormat.mBitsPerChannel = v72;
          *(_OWORD *)&v195.mFormat.mSampleRate = v70;
          v73 = *(_OWORD *)&v8->mFormat.mSampleRate;
          v74 = *(_OWORD *)&v8->mFormat.mBytesPerPacket;
          v75 = *(_OWORD *)&v8->mFormat.mBitsPerChannel;
          v9->mSampleRateRange.mMaximum = v8->mSampleRateRange.mMaximum;
          *(_OWORD *)&v9->mFormat.mBytesPerPacket = v74;
          *(_OWORD *)&v9->mFormat.mBitsPerChannel = v75;
          *(_OWORD *)&v9->mFormat.mSampleRate = v73;
          v76 = *(_OWORD *)&v195.mFormat.mSampleRate;
          v77 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
          v78 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
          v8->mSampleRateRange.mMaximum = v195.mSampleRateRange.mMaximum;
          *(_OWORD *)&v8->mFormat.mBytesPerPacket = v77;
          *(_OWORD *)&v8->mFormat.mBitsPerChannel = v78;
          *(_OWORD *)&v8->mFormat.mSampleRate = v76;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9, &v9[1].mFormat.mSampleRate, v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9, v9 + 1, v9 + 2, &v8->mFormat.mSampleRate);
        return;
      case 5:
        v79 = (__int128 *)&v9[1];
        v80 = (__int128 *)&v9[2];
        v81 = (__int128 *)&v9[3];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9, v9 + 1, v9 + 2, &v9[3].mFormat.mSampleRate);
        if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v8, v9 + 3, v82))
        {
          v85 = *(_OWORD *)&v9[3].mFormat.mBytesPerPacket;
          *(_OWORD *)&v195.mFormat.mSampleRate = *v81;
          v84 = *(_OWORD *)&v195.mFormat.mSampleRate;
          *(_OWORD *)&v195.mFormat.mBytesPerPacket = v85;
          *(_OWORD *)&v195.mFormat.mBitsPerChannel = *(_OWORD *)&v9[3].mFormat.mBitsPerChannel;
          v86 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
          v195.mSampleRateRange.mMaximum = v9[3].mSampleRateRange.mMaximum;
          mMaximum = v195.mSampleRateRange.mMaximum;
          v88 = v8->mSampleRateRange.mMaximum;
          v90 = *(_OWORD *)&v8->mFormat.mBytesPerPacket;
          v89 = *(_OWORD *)&v8->mFormat.mBitsPerChannel;
          *v81 = *(_OWORD *)&v8->mFormat.mSampleRate;
          *(_OWORD *)&v9[3].mFormat.mBytesPerPacket = v90;
          *(_OWORD *)&v9[3].mFormat.mBitsPerChannel = v89;
          v9[3].mSampleRateRange.mMaximum = v88;
          *(_OWORD *)&v8->mFormat.mBytesPerPacket = v85;
          *(_OWORD *)&v8->mFormat.mBitsPerChannel = v86;
          v8->mSampleRateRange.mMaximum = mMaximum;
          *(_OWORD *)&v8->mFormat.mSampleRate = v84;
          if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v9[3], v9 + 2, v83))
          {
            v92 = v9[2].mSampleRateRange.mMaximum;
            v94 = *(_OWORD *)&v9[2].mFormat.mBytesPerPacket;
            v93 = *(_OWORD *)&v9[2].mFormat.mBitsPerChannel;
            v95 = *v80;
            v96 = *(_OWORD *)&v9[3].mFormat.mBytesPerPacket;
            *v80 = *v81;
            *(_OWORD *)&v9[2].mFormat.mBytesPerPacket = v96;
            *(_OWORD *)&v9[2].mFormat.mBitsPerChannel = *(_OWORD *)&v9[3].mFormat.mBitsPerChannel;
            v9[2].mSampleRateRange.mMaximum = v9[3].mSampleRateRange.mMaximum;
            *v81 = v95;
            *(_OWORD *)&v9[3].mFormat.mBytesPerPacket = v94;
            *(_OWORD *)&v9[3].mFormat.mBitsPerChannel = v93;
            v9[3].mSampleRateRange.mMaximum = v92;
            if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v9[2], v9 + 1, v91))
            {
              v98 = v9[1].mSampleRateRange.mMaximum;
              v100 = *(_OWORD *)&v9[1].mFormat.mBytesPerPacket;
              v99 = *(_OWORD *)&v9[1].mFormat.mBitsPerChannel;
              v101 = *v79;
              v102 = *(_OWORD *)&v9[2].mFormat.mBytesPerPacket;
              *v79 = *v80;
              *(_OWORD *)&v9[1].mFormat.mBytesPerPacket = v102;
              *(_OWORD *)&v9[1].mFormat.mBitsPerChannel = *(_OWORD *)&v9[2].mFormat.mBitsPerChannel;
              v9[1].mSampleRateRange.mMaximum = v9[2].mSampleRateRange.mMaximum;
              *v80 = v101;
              *(_OWORD *)&v9[2].mFormat.mBytesPerPacket = v100;
              *(_OWORD *)&v9[2].mFormat.mBitsPerChannel = v99;
              v9[2].mSampleRateRange.mMaximum = v98;
              if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v9[1], v9, v97))
              {
                v103 = *(_OWORD *)&v9->mFormat.mSampleRate;
                v104 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
                v105 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
                v195.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
                *(_OWORD *)&v195.mFormat.mBytesPerPacket = v104;
                *(_OWORD *)&v195.mFormat.mBitsPerChannel = v105;
                *(_OWORD *)&v195.mFormat.mSampleRate = v103;
                v106 = *(_OWORD *)&v9[1].mFormat.mBytesPerPacket;
                *(_OWORD *)&v9->mFormat.mSampleRate = *v79;
                *(_OWORD *)&v9->mFormat.mBytesPerPacket = v106;
                *(_OWORD *)&v9->mFormat.mBitsPerChannel = *(_OWORD *)&v9[1].mFormat.mBitsPerChannel;
                v9->mSampleRateRange.mMaximum = v9[1].mSampleRateRange.mMaximum;
                v107 = *(_OWORD *)&v195.mFormat.mSampleRate;
                v108 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
                v109 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
                v9[1].mSampleRateRange.mMaximum = v195.mSampleRateRange.mMaximum;
                *(_OWORD *)&v9[1].mFormat.mBytesPerPacket = v108;
                *(_OWORD *)&v9[1].mFormat.mBitsPerChannel = v109;
                *v79 = v107;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 1343)
        {
          v110 = (CAStreamRangedDescription *)&v9[1];
          v112 = v9 == a2 || v110 == (CAStreamRangedDescription *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v112)
            {
              v113 = 0;
              v114 = (CAStreamRangedDescription *)v9;
              do
              {
                v115 = (const AudioStreamRangedDescription *)v114;
                v114 = v110;
                if (CAStreamRangedDescription::Sorter(v110, v115, a3))
                {
                  v116 = *(_OWORD *)v114;
                  v117 = *((_OWORD *)v114 + 1);
                  v118 = *((_OWORD *)v114 + 2);
                  v195.mSampleRateRange.mMaximum = *((Float64 *)v114 + 6);
                  *(_OWORD *)&v195.mFormat.mBytesPerPacket = v117;
                  *(_OWORD *)&v195.mFormat.mBitsPerChannel = v118;
                  *(_OWORD *)&v195.mFormat.mSampleRate = v116;
                  v119 = v113;
                  while (1)
                  {
                    v120 = (char *)v9 + v119;
                    v121 = *(_OWORD *)((char *)&v9->mFormat.mBytesPerPacket + v119);
                    *(_OWORD *)(v120 + 56) = *(_OWORD *)((char *)&v9->mFormat.mSampleRate + v119);
                    *(_OWORD *)(v120 + 72) = v121;
                    *(_OWORD *)(v120 + 88) = *(_OWORD *)((char *)&v9->mFormat.mBitsPerChannel + v119);
                    *((_QWORD *)v120 + 13) = *(_QWORD *)((char *)&v9->mSampleRateRange.mMaximum + v119);
                    if (!v119)
                      break;
                    v119 -= 56;
                    if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v195, (AudioStreamRangedDescription *)((char *)v9 + v119), a3) & 1) == 0)
                    {
                      v122 = (uint64_t)&v9[1] + v119;
                      goto LABEL_75;
                    }
                  }
                  v122 = (uint64_t)v9;
LABEL_75:
                  v123 = *(_OWORD *)&v195.mFormat.mSampleRate;
                  v124 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
                  v125 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
                  *(Float64 *)(v122 + 48) = v195.mSampleRateRange.mMaximum;
                  *(_OWORD *)(v122 + 16) = v124;
                  *(_OWORD *)(v122 + 32) = v125;
                  *(_OWORD *)v122 = v123;
                }
                v110 = (CAStreamRangedDescription *)((char *)v114 + 56);
                v113 += 56;
              }
              while ((AudioStreamRangedDescription *)((char *)v114 + 56) != a2);
            }
          }
          else if (!v112)
          {
            do
            {
              v180 = (const AudioStreamRangedDescription *)a1;
              a1 = v110;
              if (CAStreamRangedDescription::Sorter(v110, v180, a3))
              {
                v181 = *(_OWORD *)a1;
                v182 = *((_OWORD *)a1 + 1);
                v183 = *((_OWORD *)a1 + 2);
                v195.mSampleRateRange.mMaximum = *((Float64 *)a1 + 6);
                *(_OWORD *)&v195.mFormat.mBytesPerPacket = v182;
                *(_OWORD *)&v195.mFormat.mBitsPerChannel = v183;
                *(_OWORD *)&v195.mFormat.mSampleRate = v181;
                v184 = a1;
                do
                {
                  v185 = (uint64_t)v184 - 56;
                  v186 = *(_OWORD *)((char *)v184 - 40);
                  *(_OWORD *)v184 = *(_OWORD *)((char *)v184 - 56);
                  *((_OWORD *)v184 + 1) = v186;
                  *((_OWORD *)v184 + 2) = *(_OWORD *)((char *)v184 - 24);
                  *((_QWORD *)v184 + 6) = *((_QWORD *)v184 - 1);
                  v187 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v195, (const AudioStreamRangedDescription *)v184 - 2, a3);
                  v184 = (CAStreamRangedDescription *)v185;
                }
                while ((v187 & 1) != 0);
                v188 = *(_OWORD *)&v195.mFormat.mSampleRate;
                v189 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
                v190 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
                *(Float64 *)(v185 + 48) = v195.mSampleRateRange.mMaximum;
                *(_OWORD *)(v185 + 16) = v189;
                *(_OWORD *)(v185 + 32) = v190;
                *(_OWORD *)v185 = v188;
              }
              v110 = (CAStreamRangedDescription *)((char *)a1 + 56);
            }
            while ((AudioStreamRangedDescription *)((char *)a1 + 56) != a2);
          }
          return;
        }
        if (!v5)
        {
          if (v9 != a2)
          {
            v126 = (unint64_t)(v11 - 2) >> 1;
            v127 = v126;
            do
            {
              v128 = v127;
              if (v126 >= v127)
              {
                v129 = (2 * v127) | 1;
                v130 = (AudioStreamRangedDescription *)((char *)a1 + 56 * v129);
                if (2 * v127 + 2 < v11
                  && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)((char *)a1 + 56 * v129), v130 + 1, a3))
                {
                  ++v130;
                  v129 = 2 * v128 + 2;
                }
                v131 = (char *)a1 + 56 * v128;
                if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v130, (const AudioStreamRangedDescription *)v131, a3) & 1) == 0)
                {
                  v132 = *(_OWORD *)v131;
                  v133 = *((_OWORD *)v131 + 1);
                  v134 = *((_OWORD *)v131 + 2);
                  v195.mSampleRateRange.mMaximum = *((Float64 *)v131 + 6);
                  *(_OWORD *)&v195.mFormat.mBytesPerPacket = v133;
                  *(_OWORD *)&v195.mFormat.mBitsPerChannel = v134;
                  *(_OWORD *)&v195.mFormat.mSampleRate = v132;
                  do
                  {
                    v135 = (char *)v130;
                    v136 = *(_OWORD *)&v130->mFormat.mSampleRate;
                    v137 = *(_OWORD *)&v130->mFormat.mBytesPerPacket;
                    v138 = *(_OWORD *)&v130->mFormat.mBitsPerChannel;
                    *((_QWORD *)v131 + 6) = *(_QWORD *)&v130->mSampleRateRange.mMaximum;
                    *((_OWORD *)v131 + 1) = v137;
                    *((_OWORD *)v131 + 2) = v138;
                    *(_OWORD *)v131 = v136;
                    if (v126 < v129)
                      break;
                    v139 = (2 * v129) | 1;
                    v130 = (AudioStreamRangedDescription *)((char *)a1 + 56 * v139);
                    v140 = 2 * v129 + 2;
                    if (v140 < v11
                      && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)((char *)a1 + 56 * v139), v130 + 1, a3))
                    {
                      ++v130;
                      v139 = v140;
                    }
                    v131 = v135;
                    v129 = v139;
                  }
                  while (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v130, &v195, a3));
                  v141 = *(_OWORD *)&v195.mFormat.mSampleRate;
                  v142 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
                  v143 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
                  *((_QWORD *)v135 + 6) = *(_QWORD *)&v195.mSampleRateRange.mMaximum;
                  *((_OWORD *)v135 + 1) = v142;
                  *((_OWORD *)v135 + 2) = v143;
                  *(_OWORD *)v135 = v141;
                }
              }
              v127 = v128 - 1;
            }
            while (v128);
            v144 = v10 / 0x38uLL;
            v145 = v193;
            do
            {
              v146 = 0;
              v147 = *(_OWORD *)a1;
              v148 = *((_OWORD *)a1 + 1);
              v149 = *((_OWORD *)a1 + 2);
              v194.mSampleRateRange.mMaximum = *((Float64 *)a1 + 6);
              *(_OWORD *)&v194.mFormat.mBytesPerPacket = v148;
              *(_OWORD *)&v194.mFormat.mBitsPerChannel = v149;
              *(_OWORD *)&v194.mFormat.mSampleRate = v147;
              v150 = (uint64_t)a1;
              do
              {
                v151 = v150 + 56 * v146 + 56;
                v152 = (2 * v146) | 1;
                v153 = 2 * v146 + 2;
                if (v153 < v144
                  && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v150 + 56 * v146 + 56), (const AudioStreamRangedDescription *)(v150 + 56 * v146 + 112), a3))
                {
                  v151 += 56;
                  v152 = v153;
                }
                v154 = *(_OWORD *)v151;
                v155 = *(_OWORD *)(v151 + 16);
                v156 = *(_OWORD *)(v151 + 32);
                *(_QWORD *)(v150 + 48) = *(_QWORD *)(v151 + 48);
                *(_OWORD *)(v150 + 16) = v155;
                *(_OWORD *)(v150 + 32) = v156;
                *(_OWORD *)v150 = v154;
                v150 = v151;
                v146 = v152;
              }
              while (v152 <= (uint64_t)((unint64_t)(v144 - 2) >> 1));
              if ((AudioStreamRangedDescription *)v151 == --v145)
              {
                v176 = *(_OWORD *)&v194.mFormat.mSampleRate;
                v177 = *(_OWORD *)&v194.mFormat.mBytesPerPacket;
                v178 = *(_OWORD *)&v194.mFormat.mBitsPerChannel;
                *(Float64 *)(v151 + 48) = v194.mSampleRateRange.mMaximum;
                *(_OWORD *)(v151 + 16) = v177;
                *(_OWORD *)(v151 + 32) = v178;
                *(_OWORD *)v151 = v176;
              }
              else
              {
                v157 = *(_OWORD *)&v145->mFormat.mSampleRate;
                v158 = *(_OWORD *)&v145->mFormat.mBytesPerPacket;
                v159 = *(_OWORD *)&v145->mFormat.mBitsPerChannel;
                *(Float64 *)(v151 + 48) = v145->mSampleRateRange.mMaximum;
                *(_OWORD *)(v151 + 16) = v158;
                *(_OWORD *)(v151 + 32) = v159;
                *(_OWORD *)v151 = v157;
                v160 = *(_OWORD *)&v194.mFormat.mSampleRate;
                v161 = *(_OWORD *)&v194.mFormat.mBytesPerPacket;
                v162 = *(_OWORD *)&v194.mFormat.mBitsPerChannel;
                v145->mSampleRateRange.mMaximum = v194.mSampleRateRange.mMaximum;
                *(_OWORD *)&v145->mFormat.mBytesPerPacket = v161;
                *(_OWORD *)&v145->mFormat.mBitsPerChannel = v162;
                *(_OWORD *)&v145->mFormat.mSampleRate = v160;
                v163 = v151 - (_QWORD)a1 + 56;
                if (v163 >= 57)
                {
                  v164 = (v163 / 0x38uLL - 2) >> 1;
                  v165 = (char *)a1 + 56 * v164;
                  if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v165, (const AudioStreamRangedDescription *)v151, a3))
                  {
                    v166 = *(_OWORD *)v151;
                    v167 = *(_OWORD *)(v151 + 16);
                    v168 = *(_OWORD *)(v151 + 32);
                    v195.mSampleRateRange.mMaximum = *(Float64 *)(v151 + 48);
                    *(_OWORD *)&v195.mFormat.mBytesPerPacket = v167;
                    *(_OWORD *)&v195.mFormat.mBitsPerChannel = v168;
                    *(_OWORD *)&v195.mFormat.mSampleRate = v166;
                    do
                    {
                      v169 = (uint64_t)v165;
                      v170 = *(_OWORD *)v165;
                      v171 = *((_OWORD *)v165 + 1);
                      v172 = *((_OWORD *)v165 + 2);
                      *(_QWORD *)(v151 + 48) = *((_QWORD *)v165 + 6);
                      *(_OWORD *)(v151 + 16) = v171;
                      *(_OWORD *)(v151 + 32) = v172;
                      *(_OWORD *)v151 = v170;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = (char *)a1 + 56 * v164;
                      v151 = v169;
                    }
                    while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v165, &v195, a3) & 1) != 0);
                    v173 = *(_OWORD *)&v195.mFormat.mSampleRate;
                    v174 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
                    v175 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
                    *(Float64 *)(v169 + 48) = v195.mSampleRateRange.mMaximum;
                    *(_OWORD *)(v169 + 16) = v174;
                    *(_OWORD *)(v169 + 32) = v175;
                    *(_OWORD *)v169 = v173;
                  }
                }
              }
            }
            while (v144-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v13, &v9->mFormat.mSampleRate, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9, &v13->mFormat.mSampleRate, v8);
          v14 = v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9 + 1, &v9[v14 - 1].mFormat.mSampleRate, v192);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(v9 + 2, &v9[v14 + 1].mFormat.mSampleRate, v191);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(&v9[v14 - 1], &v13->mFormat.mSampleRate, &v9[v14 + 1]);
          v16 = *(_OWORD *)&v9->mFormat.mSampleRate;
          v17 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
          v18 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
          v195.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
          *(_OWORD *)&v195.mFormat.mBytesPerPacket = v17;
          *(_OWORD *)&v195.mFormat.mBitsPerChannel = v18;
          *(_OWORD *)&v195.mFormat.mSampleRate = v16;
          v19 = *(_OWORD *)&v13->mFormat.mSampleRate;
          v20 = *(_OWORD *)&v13->mFormat.mBytesPerPacket;
          v21 = *(_OWORD *)&v13->mFormat.mBitsPerChannel;
          v9->mSampleRateRange.mMaximum = v13->mSampleRateRange.mMaximum;
          *(_OWORD *)&v9->mFormat.mBytesPerPacket = v20;
          *(_OWORD *)&v9->mFormat.mBitsPerChannel = v21;
          *(_OWORD *)&v9->mFormat.mSampleRate = v19;
          v22 = *(_OWORD *)&v195.mFormat.mSampleRate;
          v23 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
          v24 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
          v13->mSampleRateRange.mMaximum = v195.mSampleRateRange.mMaximum;
          *(_OWORD *)&v13->mFormat.mBytesPerPacket = v23;
          *(_OWORD *)&v13->mFormat.mBitsPerChannel = v24;
          *(_OWORD *)&v13->mFormat.mSampleRate = v22;
        }
        a2 = v193;
        v5 = (const AudioStreamRangedDescription *)((char *)v5 - 1);
        if ((a4 & 1) == 0
          && (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v9[-1], v9, v15) & 1) == 0)
        {
          v48 = *(_OWORD *)&v9->mFormat.mSampleRate;
          v49 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
          v50 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
          v194.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
          *(_OWORD *)&v194.mFormat.mBytesPerPacket = v49;
          *(_OWORD *)&v194.mFormat.mBitsPerChannel = v50;
          *(_OWORD *)&v194.mFormat.mSampleRate = v48;
          if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v8, v15) & 1) != 0)
          {
            do
              ++v9;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v9, a3) & 1) == 0);
          }
          else
          {
            v51 = v9 + 1;
            do
            {
              v9 = (AudioStreamRangedDescription *)v51;
              if (v51 >= v193)
                break;
              v52 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v51, a3);
              v51 = v9 + 1;
            }
            while (!v52);
          }
          v53 = v193;
          if (v9 < v193)
          {
            v53 = v193;
            do
              --v53;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v53, a3) & 1) != 0);
          }
          while (v9 < v53)
          {
            v54 = *(_OWORD *)&v9->mFormat.mSampleRate;
            v55 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
            v56 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
            v195.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
            *(_OWORD *)&v195.mFormat.mBytesPerPacket = v55;
            *(_OWORD *)&v195.mFormat.mBitsPerChannel = v56;
            *(_OWORD *)&v195.mFormat.mSampleRate = v54;
            v57 = *(_OWORD *)&v53->mFormat.mSampleRate;
            v58 = *(_OWORD *)&v53->mFormat.mBytesPerPacket;
            v59 = *(_OWORD *)&v53->mFormat.mBitsPerChannel;
            v9->mSampleRateRange.mMaximum = v53->mSampleRateRange.mMaximum;
            *(_OWORD *)&v9->mFormat.mBytesPerPacket = v58;
            *(_OWORD *)&v9->mFormat.mBitsPerChannel = v59;
            *(_OWORD *)&v9->mFormat.mSampleRate = v57;
            v60 = *(_OWORD *)&v195.mFormat.mSampleRate;
            v61 = *(_OWORD *)&v195.mFormat.mBytesPerPacket;
            v62 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
            v53->mSampleRateRange.mMaximum = v195.mSampleRateRange.mMaximum;
            *(_OWORD *)&v53->mFormat.mBytesPerPacket = v61;
            *(_OWORD *)&v53->mFormat.mBitsPerChannel = v62;
            *(_OWORD *)&v53->mFormat.mSampleRate = v60;
            do
              ++v9;
            while (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v9, a3));
            do
              --v53;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v194, v53, a3) & 1) != 0);
          }
          v63 = (__int128 *)&v9[-1];
          if (&v9[-1] != (AudioStreamRangedDescription *)a1)
          {
            v64 = *v63;
            v65 = *(_OWORD *)&v9[-1].mFormat.mBytesPerPacket;
            v66 = *(_OWORD *)&v9[-1].mFormat.mBitsPerChannel;
            *((_QWORD *)a1 + 6) = *(_QWORD *)&v9[-1].mSampleRateRange.mMaximum;
            *((_OWORD *)a1 + 1) = v65;
            *((_OWORD *)a1 + 2) = v66;
            *(_OWORD *)a1 = v64;
          }
          a4 = 0;
          v67 = *(_OWORD *)&v194.mFormat.mSampleRate;
          v68 = *(_OWORD *)&v194.mFormat.mBytesPerPacket;
          v69 = *(_OWORD *)&v194.mFormat.mBitsPerChannel;
          v9[-1].mSampleRateRange.mMaximum = v194.mSampleRateRange.mMaximum;
          *(_OWORD *)&v9[-1].mFormat.mBytesPerPacket = v68;
          *(_OWORD *)&v9[-1].mFormat.mBitsPerChannel = v69;
          *v63 = v67;
          continue;
        }
        v25 = *(_OWORD *)&v9->mFormat.mSampleRate;
        v26 = *(_OWORD *)&v9->mFormat.mBytesPerPacket;
        v27 = *(_OWORD *)&v9->mFormat.mBitsPerChannel;
        v194.mSampleRateRange.mMaximum = v9->mSampleRateRange.mMaximum;
        *(_OWORD *)&v194.mFormat.mBytesPerPacket = v26;
        *(_OWORD *)&v194.mFormat.mBitsPerChannel = v27;
        *(_OWORD *)&v194.mFormat.mSampleRate = v25;
        v28 = (CAStreamRangedDescription *)v9;
        do
        {
          v29 = v28;
          v28 = (CAStreamRangedDescription *)((char *)v28 + 56);
        }
        while ((CAStreamRangedDescription::Sorter(v28, &v194, v15) & 1) != 0);
        v30 = (CAStreamRangedDescription *)v193;
        if (v29 == (CAStreamRangedDescription *)v9)
        {
          v30 = (CAStreamRangedDescription *)v193;
          do
          {
            if (v28 >= v30)
              break;
            v30 = (CAStreamRangedDescription *)((char *)v30 - 56);
          }
          while ((CAStreamRangedDescription::Sorter(v30, &v194, v15) & 1) == 0);
        }
        else
        {
          do
            v30 = (CAStreamRangedDescription *)((char *)v30 - 56);
          while (!CAStreamRangedDescription::Sorter(v30, &v194, v15));
        }
        if (v28 < v30)
        {
          v31 = v28;
          v32 = v30;
          do
          {
            v34 = *((_OWORD *)v31 + 1);
            *(_OWORD *)&v195.mFormat.mSampleRate = *(_OWORD *)v31;
            v33 = *(_OWORD *)&v195.mFormat.mSampleRate;
            *(_OWORD *)&v195.mFormat.mBytesPerPacket = v34;
            *(_OWORD *)&v195.mFormat.mBitsPerChannel = *((_OWORD *)v31 + 2);
            v35 = *(_OWORD *)&v195.mFormat.mBitsPerChannel;
            v195.mSampleRateRange.mMaximum = *((Float64 *)v31 + 6);
            v36 = v195.mSampleRateRange.mMaximum;
            v37 = *((_QWORD *)v32 + 6);
            v39 = *((_OWORD *)v32 + 1);
            v38 = *((_OWORD *)v32 + 2);
            *(_OWORD *)v31 = *(_OWORD *)v32;
            *((_OWORD *)v31 + 1) = v39;
            *((_OWORD *)v31 + 2) = v38;
            *((_QWORD *)v31 + 6) = v37;
            *((_OWORD *)v32 + 1) = v34;
            *((_OWORD *)v32 + 2) = v35;
            *((Float64 *)v32 + 6) = v36;
            *(_OWORD *)v32 = v33;
            do
            {
              v29 = v31;
              v31 = (CAStreamRangedDescription *)((char *)v31 + 56);
            }
            while ((CAStreamRangedDescription::Sorter(v31, &v194, v15) & 1) != 0);
            do
              v32 = (CAStreamRangedDescription *)((char *)v32 - 56);
            while (!CAStreamRangedDescription::Sorter(v32, &v194, v15));
          }
          while (v31 < v32);
        }
        if (v29 != a1)
        {
          v40 = *(_OWORD *)v29;
          v41 = *((_OWORD *)v29 + 1);
          v42 = *((_OWORD *)v29 + 2);
          *((_QWORD *)a1 + 6) = *((_QWORD *)v29 + 6);
          *((_OWORD *)a1 + 1) = v41;
          *((_OWORD *)a1 + 2) = v42;
          *(_OWORD *)a1 = v40;
        }
        v43 = *(_OWORD *)&v194.mFormat.mSampleRate;
        v44 = *(_OWORD *)&v194.mFormat.mBytesPerPacket;
        v45 = *(_OWORD *)&v194.mFormat.mBitsPerChannel;
        *((_QWORD *)v29 + 6) = *(_QWORD *)&v194.mSampleRateRange.mMaximum;
        *((_OWORD *)v29 + 1) = v44;
        *((_OWORD *)v29 + 2) = v45;
        *(_OWORD *)v29 = v43;
        if (v28 < v30)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>(a1, v29, v5, a4 & 1);
          a4 = 0;
          v9 = (AudioStreamRangedDescription *)((char *)v29 + 56);
          continue;
        }
        v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)a1, (AudioStreamRangedDescription *)v29, v15);
        v9 = (AudioStreamRangedDescription *)((char *)v29 + 56);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v29 + 1, v193, v47))
        {
          if (v46)
            continue;
          goto LABEL_30;
        }
        a2 = (AudioStreamRangedDescription *)v29;
        if (!v46)
          goto LABEL_2;
        return;
    }
  }
}

_QWORD *applesauce::CF::TypeRef::from_get(_QWORD *this, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = this;
  if (cf)
    this = CFRetain(cf);
  *v3 = cf;
  return this;
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::DataRef>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DF0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::ArrayRef>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DF204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t (*v9)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v2 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9)
    return 0;
  v6 = v2;
  v4 = v9(4, v8, 0, &v6) != 0;
  if (v9)
    v9(0, v8, 0, 0);
  return v4;
}

void sub_1B58DF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, Float64 *this, AudioStreamRangedDescription *a3)
{
  char v6;
  const AudioStreamRangedDescription *v7;
  uint64_t result;
  const AudioStreamRangedDescription *v9;
  Float64 mMaximum;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Float64 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  Float64 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  Float64 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v6 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)this, a1, a3);
  result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, (const AudioStreamRangedDescription *)this, v7);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      mMaximum = a1->mSampleRateRange.mMaximum;
      v12 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      v11 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      v13 = *(_OWORD *)&a1->mFormat.mSampleRate;
      v15 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      v14 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      v16 = *(_OWORD *)&a3->mFormat.mSampleRate;
      a1->mSampleRateRange.mMaximum = a3->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v15;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v14;
      *(_OWORD *)&a1->mFormat.mSampleRate = v16;
    }
    else
    {
      v31 = a1->mSampleRateRange.mMaximum;
      v33 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      v32 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      v34 = *(_OWORD *)&a1->mFormat.mSampleRate;
      v36 = *((_OWORD *)this + 1);
      v35 = *((_OWORD *)this + 2);
      v37 = *(_OWORD *)this;
      a1->mSampleRateRange.mMaximum = this[6];
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v36;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v35;
      *(_OWORD *)&a1->mFormat.mSampleRate = v37;
      *(_OWORD *)this = v34;
      *((_OWORD *)this + 1) = v33;
      *((_OWORD *)this + 2) = v32;
      this[6] = v31;
      result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, (const AudioStreamRangedDescription *)this, v9);
      if (!(_DWORD)result)
        return result;
      mMaximum = this[6];
      v12 = *((_OWORD *)this + 1);
      v11 = *((_OWORD *)this + 2);
      v13 = *(_OWORD *)this;
      v39 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      v38 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      v40 = *(_OWORD *)&a3->mFormat.mSampleRate;
      this[6] = a3->mSampleRateRange.mMaximum;
      *((_OWORD *)this + 1) = v39;
      *((_OWORD *)this + 2) = v38;
      *(_OWORD *)this = v40;
    }
    *(_OWORD *)&a3->mFormat.mSampleRate = v13;
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v12;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v11;
    a3->mSampleRateRange.mMaximum = mMaximum;
  }
  else if ((_DWORD)result)
  {
    v17 = this[6];
    v19 = *((_OWORD *)this + 1);
    v18 = *((_OWORD *)this + 2);
    v20 = *(_OWORD *)this;
    v22 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
    v21 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
    v23 = *(_OWORD *)&a3->mFormat.mSampleRate;
    this[6] = a3->mSampleRateRange.mMaximum;
    *((_OWORD *)this + 1) = v22;
    *((_OWORD *)this + 2) = v21;
    *(_OWORD *)this = v23;
    *(_OWORD *)&a3->mFormat.mSampleRate = v20;
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v19;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v18;
    a3->mSampleRateRange.mMaximum = v17;
    result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)this, a1, v9);
    if ((_DWORD)result)
    {
      v24 = a1->mSampleRateRange.mMaximum;
      v26 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      v25 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      v27 = *(_OWORD *)&a1->mFormat.mSampleRate;
      v29 = *((_OWORD *)this + 1);
      v28 = *((_OWORD *)this + 2);
      v30 = *(_OWORD *)this;
      a1->mSampleRateRange.mMaximum = this[6];
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v29;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v28;
      *(_OWORD *)&a1->mFormat.mSampleRate = v30;
      *(_OWORD *)this = v27;
      *((_OWORD *)this + 1) = v26;
      *((_OWORD *)this + 2) = v25;
      this[6] = v24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, AudioStreamRangedDescription *a2, AudioStreamRangedDescription *a3, Float64 *a4)
{
  const AudioStreamRangedDescription *v8;
  const AudioStreamRangedDescription *v9;
  __n128 result;
  Float64 mMaximum;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const AudioStreamRangedDescription *v18;
  Float64 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  Float64 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a2->mFormat.mSampleRate, a3);
  if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a4, a3, v8))
  {
    mMaximum = a3->mSampleRateRange.mMaximum;
    v13 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
    v12 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
    v14 = *(_OWORD *)&a3->mFormat.mSampleRate;
    v16 = *((_OWORD *)a4 + 1);
    v15 = *((_OWORD *)a4 + 2);
    v17 = *(_OWORD *)a4;
    a3->mSampleRateRange.mMaximum = a4[6];
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v16;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v15;
    *(_OWORD *)&a3->mFormat.mSampleRate = v17;
    *(_OWORD *)a4 = v14;
    *((_OWORD *)a4 + 1) = v13;
    *((_OWORD *)a4 + 2) = v12;
    a4[6] = mMaximum;
    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, a2, v9))
    {
      v19 = a2->mSampleRateRange.mMaximum;
      v21 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
      v20 = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
      v22 = *(_OWORD *)&a2->mFormat.mSampleRate;
      v24 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      v23 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      v25 = *(_OWORD *)&a3->mFormat.mSampleRate;
      a2->mSampleRateRange.mMaximum = a3->mSampleRateRange.mMaximum;
      *(_OWORD *)&a2->mFormat.mBytesPerPacket = v24;
      *(_OWORD *)&a2->mFormat.mBitsPerChannel = v23;
      *(_OWORD *)&a2->mFormat.mSampleRate = v25;
      *(_OWORD *)&a3->mFormat.mSampleRate = v22;
      *(_OWORD *)&a3->mFormat.mBytesPerPacket = v21;
      *(_OWORD *)&a3->mFormat.mBitsPerChannel = v20;
      a3->mSampleRateRange.mMaximum = v19;
      if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a2, a1, v18))
      {
        v26 = a1->mSampleRateRange.mMaximum;
        v27 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
        result = *(__n128 *)&a1->mFormat.mBitsPerChannel;
        v28 = *(_OWORD *)&a1->mFormat.mSampleRate;
        v30 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
        v29 = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
        v31 = *(_OWORD *)&a2->mFormat.mSampleRate;
        a1->mSampleRateRange.mMaximum = a2->mSampleRateRange.mMaximum;
        *(_OWORD *)&a1->mFormat.mBytesPerPacket = v30;
        *(_OWORD *)&a1->mFormat.mBitsPerChannel = v29;
        *(_OWORD *)&a1->mFormat.mSampleRate = v31;
        *(_OWORD *)&a2->mFormat.mSampleRate = v28;
        *(_OWORD *)&a2->mFormat.mBytesPerPacket = v27;
        *(__n128 *)&a2->mFormat.mBitsPerChannel = result;
        a2->mSampleRateRange.mMaximum = v26;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v5;
  _BOOL8 result;
  AudioStreamRangedDescription *v7;
  Float64 mMaximum;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const AudioStreamRangedDescription *v15;
  const AudioStreamRangedDescription *v16;
  AudioStreamRangedDescription *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  AudioStreamRangedDescription *v24;
  __int128 v25;
  AudioStreamRangedDescription *v26;
  AudioStreamRangedDescription *v27;
  AudioStreamRangedDescription *v28;
  AudioStreamRangedDescription *v29;
  const AudioStreamRangedDescription *v30;
  const AudioStreamRangedDescription *v31;
  Float64 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const AudioStreamRangedDescription *v39;
  Float64 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const AudioStreamRangedDescription *v45;
  Float64 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  Float64 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  Float64 v59;

  v5 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a2[-1], a1, a3))
        return 1;
      mMaximum = a1->mSampleRateRange.mMaximum;
      v10 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      v9 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      v11 = *(_OWORD *)&a1->mFormat.mSampleRate;
      v13 = *(_OWORD *)&v7->mFormat.mBytesPerPacket;
      v12 = *(_OWORD *)&v7->mFormat.mBitsPerChannel;
      v14 = *(_OWORD *)&v7->mFormat.mSampleRate;
      a1->mSampleRateRange.mMaximum = v7->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v13;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v12;
      *(_OWORD *)&a1->mFormat.mSampleRate = v14;
      *(_OWORD *)&v7->mFormat.mSampleRate = v11;
      *(_OWORD *)&v7->mFormat.mBytesPerPacket = v10;
      *(_OWORD *)&v7->mFormat.mBitsPerChannel = v9;
      result = 1;
      v7->mSampleRateRange.mMaximum = mMaximum;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a1[1].mFormat.mSampleRate, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, a1 + 1, a1 + 2, &a2[-1].mFormat.mSampleRate);
      return 1;
    case 5:
      v26 = a1 + 1;
      v27 = a1 + 2;
      v28 = a1 + 3;
      v29 = a2 - 1;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, a1 + 1, a1 + 2, &a1[3].mFormat.mSampleRate);
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v29, a1 + 3, v30))
        return 1;
      v32 = a1[3].mSampleRateRange.mMaximum;
      v34 = *(_OWORD *)&a1[3].mFormat.mBytesPerPacket;
      v33 = *(_OWORD *)&a1[3].mFormat.mBitsPerChannel;
      v35 = *(_OWORD *)&v28->mFormat.mSampleRate;
      v37 = *(_OWORD *)&v29->mFormat.mBytesPerPacket;
      v36 = *(_OWORD *)&v29->mFormat.mBitsPerChannel;
      v38 = *(_OWORD *)&v29->mFormat.mSampleRate;
      a1[3].mSampleRateRange.mMaximum = v29->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1[3].mFormat.mBytesPerPacket = v37;
      *(_OWORD *)&a1[3].mFormat.mBitsPerChannel = v36;
      *(_OWORD *)&v28->mFormat.mSampleRate = v38;
      *(_OWORD *)&v29->mFormat.mSampleRate = v35;
      *(_OWORD *)&v29->mFormat.mBytesPerPacket = v34;
      *(_OWORD *)&v29->mFormat.mBitsPerChannel = v33;
      v29->mSampleRateRange.mMaximum = v32;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[3], a1 + 2, v31))
        return 1;
      v40 = a1[2].mSampleRateRange.mMaximum;
      v42 = *(_OWORD *)&a1[2].mFormat.mBytesPerPacket;
      v41 = *(_OWORD *)&a1[2].mFormat.mBitsPerChannel;
      v43 = *(_OWORD *)&v27->mFormat.mSampleRate;
      v44 = *(_OWORD *)&a1[3].mFormat.mBytesPerPacket;
      *(_OWORD *)&v27->mFormat.mSampleRate = *(_OWORD *)&v28->mFormat.mSampleRate;
      *(_OWORD *)&a1[2].mFormat.mBytesPerPacket = v44;
      *(_OWORD *)&a1[2].mFormat.mBitsPerChannel = *(_OWORD *)&a1[3].mFormat.mBitsPerChannel;
      a1[2].mSampleRateRange.mMaximum = a1[3].mSampleRateRange.mMaximum;
      *(_OWORD *)&v28->mFormat.mSampleRate = v43;
      *(_OWORD *)&a1[3].mFormat.mBytesPerPacket = v42;
      *(_OWORD *)&a1[3].mFormat.mBitsPerChannel = v41;
      a1[3].mSampleRateRange.mMaximum = v40;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[2], a1 + 1, v39))
        return 1;
      v46 = a1[1].mSampleRateRange.mMaximum;
      v48 = *(_OWORD *)&a1[1].mFormat.mBytesPerPacket;
      v47 = *(_OWORD *)&a1[1].mFormat.mBitsPerChannel;
      v49 = *(_OWORD *)&v26->mFormat.mSampleRate;
      v50 = *(_OWORD *)&a1[2].mFormat.mBytesPerPacket;
      *(_OWORD *)&v26->mFormat.mSampleRate = *(_OWORD *)&v27->mFormat.mSampleRate;
      *(_OWORD *)&a1[1].mFormat.mBytesPerPacket = v50;
      *(_OWORD *)&a1[1].mFormat.mBitsPerChannel = *(_OWORD *)&a1[2].mFormat.mBitsPerChannel;
      a1[1].mSampleRateRange.mMaximum = a1[2].mSampleRateRange.mMaximum;
      *(_OWORD *)&v27->mFormat.mSampleRate = v49;
      *(_OWORD *)&a1[2].mFormat.mBytesPerPacket = v48;
      *(_OWORD *)&a1[2].mFormat.mBitsPerChannel = v47;
      a1[2].mSampleRateRange.mMaximum = v46;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[1], a1, v45))
        return 1;
      v51 = a1->mSampleRateRange.mMaximum;
      v53 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      v52 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      v54 = *(_OWORD *)&a1->mFormat.mSampleRate;
      v55 = *(_OWORD *)&a1[1].mFormat.mBytesPerPacket;
      *(_OWORD *)&a1->mFormat.mSampleRate = *(_OWORD *)&v26->mFormat.mSampleRate;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v55;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = *(_OWORD *)&a1[1].mFormat.mBitsPerChannel;
      a1->mSampleRateRange.mMaximum = a1[1].mSampleRateRange.mMaximum;
      *(_OWORD *)&v26->mFormat.mSampleRate = v54;
      *(_OWORD *)&a1[1].mFormat.mBytesPerPacket = v53;
      *(_OWORD *)&a1[1].mFormat.mBitsPerChannel = v52;
      result = 1;
      a1[1].mSampleRateRange.mMaximum = v51;
      return result;
    default:
      v15 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a1[1].mFormat.mSampleRate, a1 + 2);
      v17 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v17, v15, v16))
    {
      v20 = *(_OWORD *)&v17->mFormat.mBytesPerPacket;
      v56 = *(_OWORD *)&v17->mFormat.mSampleRate;
      v57 = v20;
      v58 = *(_OWORD *)&v17->mFormat.mBitsPerChannel;
      v59 = v17->mSampleRateRange.mMaximum;
      v21 = v18;
      while (1)
      {
        v22 = (char *)a1 + v21;
        v23 = *(_OWORD *)((char *)&a1[2].mFormat.mBytesPerPacket + v21);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)((char *)&a1[2].mFormat.mSampleRate + v21);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)((char *)&a1[2].mFormat.mBitsPerChannel + v21);
        *((_QWORD *)v22 + 27) = *(_QWORD *)((char *)&a1[2].mSampleRateRange.mMaximum + v21);
        if (v21 == -112)
          break;
        v21 -= 56;
        if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v56, (const AudioStreamRangedDescription *)v22 + 1, v16) & 1) == 0)
        {
          v24 = (AudioStreamRangedDescription *)((char *)a1 + v21 + 168);
          goto LABEL_13;
        }
      }
      v24 = a1;
LABEL_13:
      v25 = v57;
      *(_OWORD *)&v24->mFormat.mSampleRate = v56;
      *(_OWORD *)&v24->mFormat.mBytesPerPacket = v25;
      *(_OWORD *)&v24->mFormat.mBitsPerChannel = v58;
      v24->mSampleRateRange.mMaximum = v59;
      if (++v19 == 8)
        return &v17[1] == a2;
    }
    v15 = v17;
    v18 += 56;
    if (++v17 == a2)
      return 1;
  }
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B58DF92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::HAL::translate_hal_value_to_mcp_by_type(const __CFData **a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  const __CFData *v6;
  const UInt8 **v7;
  const UInt8 *v8;
  void *v9;
  const __CFData *v10;
  const UInt8 *v11;
  void *v12;
  const __CFString *v13;
  const __CFData *v14;
  const UInt8 *v15;
  const __CFData *v16;
  unint64_t v17;
  const UInt8 *v18;
  CFStringRef v19;
  __CFString *v20;
  const __CFData *v21;
  const UInt8 **v22;
  const UInt8 *raw_data;
  const __CFData **v24;
  const __CFData *byte_length;
  __CFString *v26;
  unint64_t v27;
  const UInt8 *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __CFString *v38;
  const __CFData *v39;
  const UInt8 **v40;
  BOOL v41;
  const __CFData *v42;
  const UInt8 **v43;
  _BOOL4 v44;
  const __CFData *v45;
  const UInt8 *BytePtr;
  unint64_t Length;
  CFStringRef v48;
  const __CFData *v49;
  const UInt8 *v50;
  unint64_t v51;
  CFStringRef v52;
  CFURLRef v53;
  const __CFData *v54;
  const UInt8 *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  const __CFData *v59;
  const UInt8 *v60;
  const UInt8 **v61;
  const UInt8 *v62;
  const __CFData **v63;
  const __CFData *v64;
  __CFString *v65;
  const UInt8 **v66;
  uint64_t v67;
  const __CFData *v68;
  const UInt8 *v69;
  const __CFData *v70;
  const UInt8 *v71;
  const __CFData *v72;
  const UInt8 **v73;
  __int128 v74;
  const UInt8 **v75;
  const UInt8 *v76;
  const __CFData **v77;
  const __CFData *v78;
  __CFString *v79;
  unint64_t v80;
  const UInt8 *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __CFString *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  std::runtime_error *exception;
  CFStringRef URLString[2];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  CFTypeRef cf[2];
  unint64_t v100;
  CFStringRef *v101;

  switch(a3)
  {
    case 1:
      if (a2 > 0x12)
        goto LABEL_48;
      if (((1 << a2) & 0x79FFF) != 0)
        goto LABEL_88;
      if (a2 == 13)
      {
        v22 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
        raw_data = applesauce::CF::DataRef_proxy::get_raw_data(*v22);
        v24 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
        byte_length = applesauce::CF::DataRef_proxy::get_byte_length(*v24);
        v20 = 0;
        cf[0] = 0;
        cf[1] = 0;
        v100 = 0;
        if ((unint64_t)byte_length >= 0x28)
        {
          v26 = 0;
          v20 = 0;
          v27 = 0;
          v28 = &raw_data[40 * ((unint64_t)byte_length / 0x28)];
          do
          {
            *(_OWORD *)URLString = *(_OWORD *)raw_data;
            v96 = *((_OWORD *)raw_data + 1);
            *(_QWORD *)&v97 = *((_QWORD *)raw_data + 4);
            if ((unint64_t)v26 >= v27)
            {
              v31 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v26 - (char *)v20) >> 3) + 1;
              if (v31 > 0x666666666666666)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v27 - (_QWORD)v20) >> 3) > v31)
                v31 = 0x999999999999999ALL * ((uint64_t)(v27 - (_QWORD)v20) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v20) >> 3) >= 0x333333333333333)
                v32 = 0x666666666666666;
              else
                v32 = v31;
              if (v32)
                v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v32);
              else
                v33 = 0;
              v34 = v32 + 8 * (((char *)v26 - (char *)v20) >> 3);
              *(_OWORD *)v34 = *(_OWORD *)URLString;
              *(_OWORD *)(v34 + 16) = v96;
              *(_QWORD *)(v34 + 32) = v97;
              if (v26 == v20)
              {
                v38 = (__CFString *)(v32 + 8 * (((char *)v26 - (char *)v20) >> 3));
              }
              else
              {
                v35 = v32 + 8 * (((char *)v26 - (char *)v20) >> 3);
                do
                {
                  v36 = *(_OWORD *)&v26[-2].length;
                  v37 = *(_OWORD *)&v26[-1].info;
                  v38 = (__CFString *)(v35 - 40);
                  *(_QWORD *)(v35 - 8) = v26[-1].length;
                  *(_OWORD *)(v35 - 24) = v37;
                  *(_OWORD *)(v35 - 40) = v36;
                  v26 = (__CFString *)((char *)v26 - 40);
                  v35 -= 40;
                }
                while (v26 != v20);
              }
              v27 = v32 + 40 * v33;
              v26 = (__CFString *)(v34 + 40);
              if (v20)
                operator delete(v20);
              v20 = v38;
            }
            else
            {
              v29 = *(_OWORD *)raw_data;
              v30 = *((_OWORD *)raw_data + 1);
              v26[1].isa = (void *)*((_QWORD *)raw_data + 4);
              *(_OWORD *)&v26->isa = v29;
              *(_OWORD *)&v26->data = v30;
              v26 = (__CFString *)((char *)v26 + 40);
            }
            raw_data += 40;
          }
          while (raw_data < v28);
          cf[1] = v26;
          v100 = v27;
          cf[0] = v20;
        }
        AMCP::make_available_format_list((uint64_t *)cf, (uint64_t *)URLString);
      }
      else
      {
        v75 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
        v76 = applesauce::CF::DataRef_proxy::get_raw_data(*v75);
        v77 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
        v78 = applesauce::CF::DataRef_proxy::get_byte_length(*v77);
        v20 = 0;
        cf[0] = 0;
        cf[1] = 0;
        v100 = 0;
        if ((unint64_t)v78 >= 0x38)
        {
          v79 = 0;
          v20 = 0;
          v80 = 0;
          v81 = &v76[56 * ((unint64_t)v78 / 0x38)];
          do
          {
            *(_OWORD *)URLString = *(_OWORD *)v76;
            v96 = *((_OWORD *)v76 + 1);
            v97 = *((_OWORD *)v76 + 2);
            v98 = *((_QWORD *)v76 + 6);
            if ((unint64_t)v79 >= v80)
            {
              v85 = 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v20) >> 3) + 1;
              if (v85 > 0x492492492492492)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v80 - (_QWORD)v20) >> 3) > v85)
                v85 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v80 - (_QWORD)v20) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v80 - (_QWORD)v20) >> 3)) >= 0x249249249249249)
                v86 = 0x492492492492492;
              else
                v86 = v85;
              if (v86)
                v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v86);
              else
                v87 = 0;
              v88 = v86 + 8 * (((char *)v79 - (char *)v20) >> 3);
              *(_OWORD *)v88 = *(_OWORD *)URLString;
              *(_OWORD *)(v88 + 16) = v96;
              *(_OWORD *)(v88 + 32) = v97;
              *(_QWORD *)(v88 + 48) = v98;
              if (v79 == v20)
              {
                v90 = (__CFString *)(v86 + 8 * (((char *)v79 - (char *)v20) >> 3));
              }
              else
              {
                v89 = v86 + 8 * (((char *)v79 - (char *)v20) >> 3);
                do
                {
                  v90 = (__CFString *)(v89 - 56);
                  v91 = *(_OWORD *)&v79[-2].info;
                  v92 = *(_OWORD *)&v79[-2].length;
                  v93 = *(_OWORD *)&v79[-1].info;
                  *(_QWORD *)(v89 - 8) = v79[-1].length;
                  *(_OWORD *)(v89 - 24) = v93;
                  *(_OWORD *)(v89 - 40) = v92;
                  *(_OWORD *)(v89 - 56) = v91;
                  v79 = (__CFString *)((char *)v79 - 56);
                  v89 -= 56;
                }
                while (v79 != v20);
              }
              v80 = v86 + 56 * v87;
              v79 = (__CFString *)(v88 + 56);
              if (v20)
                operator delete(v20);
              v20 = v90;
            }
            else
            {
              v82 = *(_OWORD *)v76;
              v83 = *((_OWORD *)v76 + 1);
              v84 = *((_OWORD *)v76 + 2);
              v79[1].data = (char *)*((_QWORD *)v76 + 6);
              *(_OWORD *)&v79->data = v83;
              *(_OWORD *)&v79[1].isa = v84;
              *(_OWORD *)&v79->isa = v82;
              v79 = (__CFString *)((char *)v79 + 56);
            }
            v76 += 56;
          }
          while (v76 < v81);
          cf[1] = v79;
          v100 = v80;
          cf[0] = v20;
        }
        AMCP::make_available_format_list((uint64_t *)cf, (uint64_t *)URLString);
      }
      *(_OWORD *)a4 = *(_OWORD *)URLString;
      a4[2] = v96;
      a4[3] = 0;
      URLString[0] = 0;
      URLString[1] = 0;
      *(_QWORD *)&v96 = 0;
      a4[4] = (uint64_t)AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
      v101 = URLString;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (!v20)
        return;
      cf[1] = v20;
      goto LABEL_94;
    case 2:
LABEL_48:
      v39 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v39) <= 3)
        goto LABEL_88;
      v40 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v41 = *(_DWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v40) != 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_BYTE *)a4 = v41;
      v12 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      goto LABEL_90;
    case 3:
      v13 = (const __CFString *)CFPropertyListCreateWithData(0, *a1, 0, 0, 0);
      URLString[0] = v13;
      AMCP::make_thing_from_description((AMCP *)a4, (CFTypeRef *)URLString);
      if (v13)
        CFRelease(v13);
      return;
    case 4:
      v45 = *a1;
      if (!*a1)
        goto LABEL_122;
      BytePtr = CFDataGetBytePtr(v45);
      if (!*a1)
        goto LABEL_122;
      Length = CFDataGetLength(*a1);
      v48 = CFStringCreateWithCharacters(0, (const UniChar *)BytePtr, Length >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)URLString, v48);
      a4[2] = 0;
      a4[3] = 0;
      *a4 = (uint64_t)URLString[0];
      a4[1] = 0;
      v12 = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
      goto LABEL_90;
    case 5:
      v49 = *a1;
      if (!*a1)
        goto LABEL_122;
      v50 = CFDataGetBytePtr(v49);
      if (!*a1)
        goto LABEL_122;
      v51 = CFDataGetLength(*a1);
      v52 = CFStringCreateWithCharacters(0, (const UniChar *)v50, v51 >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)URLString, v52);
      v53 = CFURLCreateWithString(0, URLString[0], 0);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)cf, v53);
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>((uint64_t)a4, cf);
      if (cf[0])
        CFRelease(cf[0]);
      if (URLString[0])
        CFRelease(URLString[0]);
      return;
    case 6:
    case 7:
    case 9:
    case 15:
    case 18:
    case 22:
    case 23:
    case 24:
      AMCP::HAL::translate_simple_hal_value_to_mcp<unsigned int>((uint64_t)a4, a1);
      return;
    case 8:
      v42 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v42) <= 3)
        goto LABEL_88;
      v43 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v44 = *(_DWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v43) != 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = v44;
      v12 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      goto LABEL_90;
    case 10:
      v10 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v10) <= 3)
        goto LABEL_88;
      if (!*a1)
        goto LABEL_122;
      v11 = CFDataGetBytePtr(*a1);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = *(_DWORD *)v11;
      v12 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      goto LABEL_90;
    case 11:
      v54 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v54) <= 0x27)
        goto LABEL_88;
      if (!*a1)
        goto LABEL_122;
      v55 = CFDataGetBytePtr(*a1);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      a4[4] = (uint64_t)AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      v56 = operator new();
      v57 = *((_QWORD *)v55 + 4);
      v58 = *((_OWORD *)v55 + 1);
      *(_OWORD *)v56 = *(_OWORD *)v55;
      *(_OWORD *)(v56 + 16) = v58;
      *(_QWORD *)(v56 + 32) = v57;
      *a4 = v56;
      return;
    case 12:
      v59 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v59) <= 3)
        goto LABEL_88;
      if (!*a1)
        goto LABEL_122;
      v60 = CFDataGetBytePtr(*a1);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = *(_DWORD *)v60;
      v12 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      goto LABEL_90;
    case 13:
      v21 = *a1;
      if (*a1)
        goto LABEL_76;
      goto LABEL_122;
    case 14:
    case 20:
      AMCP::HAL::translate_vector_hal_value_to_mcp<unsigned int>((uint64_t)a4, a1);
      return;
    case 16:
      if (a2 != 1)
        goto LABEL_88;
      v61 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v62 = applesauce::CF::DataRef_proxy::get_raw_data(*v61);
      v63 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
      v64 = applesauce::CF::DataRef_proxy::get_byte_length(*v63);
      std::vector<std::byte>::vector(URLString, (size_t)v64);
      memcpy((void *)URLString[0], v62, (char *)URLString[1] - (char *)URLString[0]);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      a4[4] = 0;
      std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a4, URLString[0], (uint64_t)URLString[1], (char *)URLString[1] - (char *)URLString[0]);
      v9 = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      goto LABEL_73;
    case 17:
      v68 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v68) <= 7)
        goto LABEL_88;
      if (!*a1)
        goto LABEL_122;
      v69 = CFDataGetBytePtr(*a1);
      a4[1] = 0;
      a4[2] = 0;
      a4[3] = 0;
      *a4 = *(_QWORD *)v69;
      v12 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      goto LABEL_90;
    case 21:
      v21 = *a1;
      if (!*a1)
        goto LABEL_122;
LABEL_76:
      if ((unint64_t)CFDataGetLength(v21) <= 7)
        goto LABEL_88;
      v66 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v67 = *(_QWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v66);
      a4[2] = 0;
      a4[3] = 0;
      *a4 = v67;
      a4[1] = 0;
      v12 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      goto LABEL_90;
    case 25:
      v14 = *a1;
      if (!*a1)
        goto LABEL_122;
      v15 = CFDataGetBytePtr(v14);
      v16 = *a1;
      if (!*a1)
        goto LABEL_122;
      URLString[0] = 0;
      URLString[1] = 0;
      *(_QWORD *)&v96 = 0;
      v17 = ((unint64_t)CFDataGetLength(v16) >> 3) & 0x1FFFFFFFFFFFFFFELL;
      if (v17)
      {
        v18 = &v15[8 * v17];
        do
        {
          *(_OWORD *)cf = *(_OWORD *)v15;
          CA::ValueRangeList::AddRange((double **)URLString, (double *)cf);
          v15 += 16;
        }
        while (v15 < v18);
        v20 = (__CFString *)URLString[0];
        v19 = URLString[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a4, v20, (uint64_t)v19, ((char *)v19 - (char *)v20) >> 4);
      a4[4] = (uint64_t)AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      if (!v20)
        return;
LABEL_94:
      v65 = v20;
      goto LABEL_95;
    case 26:
      v72 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v72) <= 0xF)
        goto LABEL_88;
      v73 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v74 = *(_OWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v73);
      a4[2] = 0;
      a4[3] = 0;
      *(_OWORD *)a4 = v74;
      v12 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      goto LABEL_90;
    case 27:
      v6 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v6) <= 0xB)
        goto LABEL_88;
      v7 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      v8 = applesauce::CF::DataRef_proxy::get_raw_data(*v7);
      CA::ChannelLayout::ChannelLayout((std::vector<char> *)URLString, (const AudioChannelLayout *)v8);
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, URLString[0], (uint64_t)URLString[1], (char *)URLString[1] - (char *)URLString[0]);
      v9 = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
LABEL_73:
      a4[4] = (uint64_t)v9;
      v65 = (__CFString *)URLString[0];
      if (!URLString[0])
        return;
      URLString[1] = URLString[0];
LABEL_95:
      operator delete(v65);
      break;
    case 28:
      v70 = *a1;
      if (!*a1)
        goto LABEL_122;
      if ((unint64_t)CFDataGetLength(v70) <= 3)
      {
LABEL_88:
        a4[4] = 0;
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
      }
      else
      {
        if (!*a1)
        {
LABEL_122:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v71 = CFDataGetBytePtr(*a1);
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
        *(_DWORD *)a4 = *(_DWORD *)v71;
        v12 = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
LABEL_90:
        a4[4] = (uint64_t)v12;
      }
      break;
    default:
      goto LABEL_88;
  }
}

void sub_1B58E04AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::DataRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B58E0634(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const UInt8 *applesauce::CF::DataRef_proxy::get_raw_data(const UInt8 *this)
{
  if (this)
    return CFDataGetBytePtr((CFDataRef)this);
  return this;
}

const __CFData *applesauce::CF::DataRef_proxy::get_byte_length(const __CFData *this)
{
  if (this)
    return (const __CFData *)CFDataGetLength(this);
  return this;
}

void AMCP::make_thing_from_description(AMCP *this, CFTypeRef *a2)
{
  CFTypeID v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeID v7;
  void *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeID v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeID v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeID v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeID v20;
  const void *typeid;
  CFDictionaryRef *v22;
  const UInt8 **v23;
  const UInt8 *raw_data;
  const __CFData **v25;
  const __CFData *byte_length;
  CFURLRef v27;
  const void *v28;
  const void *v29;
  char v30;
  const void *v31;

  if (*a2)
    v4 = CFGetTypeID(*a2);
  else
    v4 = 0;
  if (v4 == CFBooleanGetTypeID())
  {
    v5 = *a2;
    if (v5)
    {
      CFRetain(v5);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)&v29, v5);
      v6 = v29;
    }
    else
    {
      v6 = 0;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v6;
    *((_QWORD *)this + 1) = 0;
    v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
LABEL_43:
    *((_QWORD *)this + 4) = v8;
    return;
  }
  if (*a2)
    v7 = CFGetTypeID(*a2);
  else
    v7 = 0;
  if (v7 == CFDataGetTypeID())
  {
    v9 = *a2;
    if (v9)
    {
      CFRetain(v9);
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v29, v9);
      v10 = v29;
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v10;
    *((_QWORD *)this + 1) = 0;
    v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2)
    v11 = CFGetTypeID(*a2);
  else
    v11 = 0;
  if (v11 == CFNumberGetTypeID())
  {
    v12 = *a2;
    if (v12)
    {
      CFRetain(v12);
      applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&v29, v12);
      v13 = v29;
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = 0;
    v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2)
    v14 = CFGetTypeID(*a2);
  else
    v14 = 0;
  if (v14 == CFStringGetTypeID())
  {
    v15 = *a2;
    if (v15)
    {
      CFRetain(v15);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v29, v15);
      v16 = v29;
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v16;
    *((_QWORD *)this + 1) = 0;
    v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2)
    v17 = CFGetTypeID(*a2);
  else
    v17 = 0;
  if (v17 == CFURLGetTypeID())
  {
    v18 = *a2;
    if (v18)
    {
      CFRetain(v18);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v29, v18);
      v19 = v29;
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v19;
    *((_QWORD *)this + 1) = 0;
    v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2)
    v20 = CFGetTypeID(*a2);
  else
    v20 = 0;
  if (v20 == CFArrayGetTypeID())
  {
    applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)&v29, *a2);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_QWORD *)this = v29;
    *((_QWORD *)this + 1) = 0;
    v29 = 0;
    *((_QWORD *)this + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
    applesauce::CF::ArrayRef::~ArrayRef(&v29);
  }
  else
  {
    typeid = applesauce::CF::TypeRef::get_typeid(*a2);
    if (typeid == (const void *)CFDictionaryGetTypeID())
    {
      applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v31, *a2);
      v22 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v31);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v28, "Really A CFURL");
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,applesauce::CF::StringRef>(&v29, *v22, v28);
      applesauce::CF::StringRef::~StringRef(&v28);
      if (v30)
      {
        v23 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v29);
        raw_data = applesauce::CF::DataRef_proxy::get_raw_data(*v23);
        v25 = (const __CFData **)applesauce::CF::DataRef::operator->(&v29);
        byte_length = applesauce::CF::DataRef_proxy::get_byte_length(*v25);
        v27 = CFURLCreateWithBytes(0, raw_data, (CFIndex)byte_length, 0x8000100u, 0);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v28, v27);
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = 0;
        *(_QWORD *)this = v28;
        *((_QWORD *)this + 1) = 0;
        v28 = 0;
        *((_QWORD *)this + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
        applesauce::CF::URLRef::~URLRef(&v28);
      }
      else
      {
        *((_QWORD *)this + 4) = 0;
        *(_OWORD *)this = 0u;
        *((_OWORD *)this + 1) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>((uint64_t)this, &v31);
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
      applesauce::CF::DictionaryRef::~DictionaryRef(&v31);
    }
    else
    {
      *((_QWORD *)this + 4) = 0;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
    }
  }
}

void sub_1B58E09F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
  return a1;
}

double AMCP::HAL::translate_simple_hal_value_to_mcp<unsigned int>(uint64_t a1, CFDataRef *a2)
{
  double result;
  const UInt8 *BytePtr;
  std::runtime_error *exception;

  if (!*a2)
    goto LABEL_6;
  if ((unint64_t)CFDataGetLength(*a2) <= 3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (!*a2)
  {
LABEL_6:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  BytePtr = CFDataGetBytePtr(*a2);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)BytePtr;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1B58E0B60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::HAL::translate_vector_hal_value_to_mcp<unsigned int>(uint64_t a1, CFDataRef *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  void *v6;
  std::runtime_error *exception;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*a2 || (BytePtr = CFDataGetBytePtr(*a2), !*a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Length = CFDataGetLength(*a2);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v8, BytePtr, (uint64_t)&BytePtr[Length & 0xFFFFFFFFFFFFFFFCLL], Length >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = v8;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v8, v9, (v9 - (uint64_t)v8) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58E0C74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::byte>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B58E0CFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *CA::ChannelLayout::ChannelLayout(std::vector<char> *this, const AudioChannelLayout *a2)
{
  UInt32 mNumberChannelDescriptions;
  std::vector<char> *v5;

  mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1)
    mNumberChannelDescriptions = 1;
  v5 = std::vector<char>::vector(this, 20 * mNumberChannelDescriptions + 12);
  memcpy(v5->__begin_, a2, 20 * a2->mNumberChannelDescriptions + 12);
  return this;
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _DWORD *v12;
  int v13;
  _OWORD v14[2];
  void (*v15)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v16)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_5;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Power_State>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v9)
        goto LABEL_20;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
          v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1;
      }
      else
      {
LABEL_20:
        v13 = AMCP::Thing::convert_to<AMCP::Power_State>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Power_State>((uint64_t)a3))
          return 1;
      }
      return 0;
    case 6:
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15)
        v15(0, v14, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Power_State>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 289);
}

uint64_t AMCP::Thing::convert_to<AMCP::Power_State>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B58E1170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

const void **AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch(const void **result, const void **a2, AMCP::Thing *a3, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const void **, _QWORD, CFTypeRef *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, CFTypeRef *);
  const void **v12;
  CFTypeRef v13;
  CFTypeRef v14;
  BOOL v15;
  const void **v16;
  unint64_t v17;
  unint64_t v18;
  CFTypeRef cf1[2];
  __int128 v20;
  void (*v21)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef cf2;

  switch((int)result)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v7 = *a2;
      if (*a2)
        CFRetain(v7);
      result = 0;
      *(_QWORD *)a3 = v7;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_QWORD *)a3 = *a2;
      *a2 = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
LABEL_6:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::destruct((uint64_t)a2);
      return 0;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      v10 = (void (*)(uint64_t, const void **, _QWORD, CFTypeRef *))a2[4];
      cf1[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, cf1);
        v10 = (void (*)(uint64_t, const void **, _QWORD, CFTypeRef *))cf1[0];
      }
      if (v10 != (void (*)(uint64_t, const void **, _QWORD, CFTypeRef *))v9)
        goto LABEL_21;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, CFTypeRef *))*((_QWORD *)a3 + 4);
      cf2 = 0;
      if (v11)
      {
        v11(3, a3, 0, &cf2);
        v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, CFTypeRef *))cf2;
      }
      if (v11 != (void (*)(uint64_t, AMCP::Thing *, _QWORD, CFTypeRef *))v9)
      {
LABEL_21:
        AMCP::Thing::convert_to<applesauce::CF::URLRef>(cf1, (uint64_t)a2);
        AMCP::Thing::convert_to<applesauce::CF::URLRef>(&cf2, (uint64_t)a3);
        v13 = cf1[0];
        v14 = cf2;
        v15 = ((unint64_t)cf1[0] | (unint64_t)cf2) == 0;
        if (cf1[0] && cf2)
        {
          v15 = CFEqual(cf1[0], cf2) != 0;
        }
        else if (!cf2)
        {
          goto LABEL_26;
        }
        CFRelease(v14);
LABEL_26:
        if (v13)
          CFRelease(v13);
        return (const void **)v15;
      }
      if (a2[4])
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
        v12 = (const void **)((uint64_t (*)(uint64_t, const void **, _QWORD, CFTypeRef *))a2[4])(4, a2, 0, cf1);
      }
      else
      {
        v12 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      v16 = (const void **)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, CFTypeRef *))a3 + 4))(4, a3, 0, cf1);
      v17 = (unint64_t)*v12;
      v18 = (unint64_t)*v16;
      if (*v12 && v18)
        return (const void **)(CFEqual((CFTypeRef)v17, (CFTypeRef)v18) != 0);
      return (const void **)!(v17 | v18);
    case 6:
      v21 = 0;
      *(_OWORD *)cf1 = 0u;
      v20 = 0u;
      AMCP::swap((AMCP::Thing *)cf1, a3, a3);
      if (v21)
        v21(0, cf1, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58E1420(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::URLRef::~URLRef(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58E13E0);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::from_get(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  applesauce::CF::ArrayRef *v2;

  v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::ArrayRef::ArrayRef(v2, cf);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

const void *applesauce::CF::TypeRef::get_typeid(const void *this)
{
  if (this)
    return (const void *)CFGetTypeID(this);
  return this;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::from_get(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  applesauce::CF::DictionaryRef *v2;

  v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, cf);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

_QWORD *applesauce::CF::DictionaryRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B58E1570(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,applesauce::CF::StringRef>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t AMCP::HAL::type_code_from_custom_property_type(AMCP::HAL *this)
{
  int v1;
  unsigned int v2;

  if ((_DWORD)this == 1667658612)
    v1 = 6;
  else
    v1 = 0;
  if ((_DWORD)this == 1886155636)
    v2 = 15;
  else
    v2 = v1;
  if ((_DWORD)this == 1918990199)
    return 1;
  else
    return v2;
}

uint64_t AMCP::Graph::Graph_Wire::Connection::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  __int128 v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  v4 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = v4;
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  v5 = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = v5;
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  if (a1 == a2)
  {
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    v6 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 128) = v6;
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 168));
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 192), *(char **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  }
  return a1;
}

std::string *AMCP::Graph::Graph_Wire::Connection::Connection(std::string *this, const AMCP::Graph::Graph_Wire::Connection *a2)
{
  __int128 v4;
  std::string::size_type v5;
  __int128 v6;
  std::string::size_type v7;
  __int128 v8;
  __int128 v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  v7 = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v7;
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v8;
  }
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  v9 = *((_OWORD *)a2 + 8);
  *(_OWORD *)((char *)&this[5].__r_.__value_.__r.__words[2] + 4) = *(_OWORD *)((char *)a2 + 140);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  v10 = *((_QWORD *)a2 + 21);
  this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
  this[7].__r_.__value_.__r.__words[0] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_OWORD *)a2 + 11);
  this[8].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v13;
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this[8].__r_.__value_.__r.__words, *((const void **)a2 + 24), *((_QWORD *)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 2);
  return this;
}

void sub_1B58E1860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 216))
  {
    v2 = *(void **)(a1 + 192);
    if (v2)
    {
      *(_QWORD *)(a1 + 200) = v2;
      operator delete(v2);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 160);
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 216))
  {
    v2 = *(void **)(a1 + 192);
    if (v2)
    {
      *(_QWORD *)(a1 + 200) = v2;
      operator delete(v2);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 160);
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(_QWORD *)(a1 + 112) = v3;
      operator delete(v3);
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 216) = 0;
  }
}

void AMCP::Graph::Graph_Wire::Connection::~Connection(AMCP::Graph::Graph_Wire::Connection *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void AMCP::Terminal_Identifier_to_string(std::string *a1, const void **a2)
{
  int v4;
  const std::string::value_type *v5;
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;

  v4 = *((_DWORD *)a2 + 8);
  if (v4)
    v5 = "in";
  else
    v5 = "out";
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v6 + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 91;
  if (v4)
    v9 = 2;
  else
    v9 = 3;
  v10 = std::string::append(&v18, v5, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v19, "]:", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, (unint64_t)a2[3]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
  *a1 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1B58E1CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Graph_Wire::Wire_Info::~Wire_Info(void **this)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void AMCP::Graph::Graph_Wire::Conversion_Info::~Conversion_Info(AMCP::Graph::Graph_Wire::Conversion_Info *this)
{
  void *v2;
  void *v3;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
}

double AMCP::Graph::Graph_Wire::get_description(AMCP::Graph::Graph_Wire *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  uint64_t v7;
  std::string::size_type v8;
  double result;
  std::string v10;
  std::string v11;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    v10 = *(std::string *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  size = v11.__r_.__value_.__l.__size_;
  v7 = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  *(_QWORD *)this = v11.__r_.__value_.__r.__words[0];
  *((_QWORD *)this + 1) = size;
  *(_QWORD *)((char *)this + 15) = v7;
  *((_BYTE *)this + 23) = *((_BYTE *)&v11.__r_.__value_.__s + 23);
  *((_QWORD *)this + 3) = v4;
  *((_DWORD *)this + 8) = 0;
  v8 = v10.__r_.__value_.__r.__words[0];
  *((_QWORD *)this + 6) = v10.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)this + 55) = *(std::string::size_type *)((char *)&v10.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v10.__r_.__value_.__s + 23);
  *((_QWORD *)this + 5) = v8;
  *((_BYTE *)this + 63) = size;
  *((_QWORD *)this + 8) = v5;
  *((_DWORD *)this + 18) = 1;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = xmmword_1B5D68B90;
  *((_DWORD *)this + 39) = 64;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)(a2 + 40));
  *((_QWORD *)this + 8) = *(_QWORD *)(a2 + 64);
  *((_DWORD *)this + 18) = *(_DWORD *)(a2 + 72);
  if ((AMCP::Graph::Graph_Wire *)((char *)this + 80) != (AMCP::Graph::Graph_Wire *)(a2 + 80))
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 80, *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  if (this != (AMCP::Graph::Graph_Wire *)a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_OWORD *)((char *)this + 132) = *(_OWORD *)(a2 + 128);
  result = *(double *)(a2 + 148);
  *((double *)this + 19) = result;
  *((_DWORD *)this + 32) = *(_DWORD *)(a2 + 156);
  *((_BYTE *)this + 160) = *(_BYTE *)(a2 + 160);
  return result;
}

void sub_1B58E1F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Wire_Description::~Wire_Description(AMCP::Wire_Description *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t AMCP::DAL::DAL_Buffer::remove_source()
{
  return 0;
}

void AMCP::add_available_format(uint64_t *a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double **v7;
  double **v8;
  unint64_t v9;
  unint64_t v10;
  double **v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  char v20;
  unsigned int v21;
  _BOOL4 v22;
  BOOL v23;
  _BOOL4 v24;
  char v25;
  int v26;
  unint64_t v28;
  double **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  double **v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  void **v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  int64x2_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  _BYTE v89[24];
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 28);
  v6 = *(_DWORD *)(a2 + 32);
  v8 = (double **)*a1;
  v7 = (double **)a1[1];
  if (v7 != (double **)*a1)
  {
    v9 = ((uint64_t)v7 - *a1) >> 6;
    while (1)
    {
      v10 = v9 >> 1;
      v11 = &v8[8 * (v9 >> 1)];
      v12 = *((_DWORD *)v11 + 8);
      if (!v4)
        break;
      if (v12)
        v13 = v4 == v12;
      else
        v13 = 1;
      if (!v13)
      {
        LOBYTE(v14) = v12 != 1819304813 && v4 < v12;
        if (v4 == 1819304813)
          LOBYTE(v14) = 1;
        goto LABEL_23;
      }
      LOBYTE(v14) = 0;
      v15 = v12 == 1819304813;
      v16 = v4 == 1819304813;
      v17 = 0;
      if (v4 != 1819304813 || v12 != 1819304813)
        goto LABEL_24;
      v18 = *((_DWORD *)v11 + 9);
      LOBYTE(v14) = (v18 & 0x40) == 0;
      if ((v3 & 0x40) != 0)
      {
        v15 = 1;
        v17 = (*((_DWORD *)v11 + 9) & 0x40) == 0;
      }
      else
      {
        if ((v18 & 0x40) != 0)
          goto LABEL_50;
        LOBYTE(v14) = 0;
        v17 = 0;
        v15 = 1;
      }
LABEL_25:
      if (!v17 && v15)
      {
        if ((*(_DWORD *)(a2 + 12) & 1) != (*((_DWORD *)v11 + 9) & 1))
        {
          v14 = *((_DWORD *)v11 + 9);
          goto LABEL_48;
        }
        goto LABEL_31;
      }
LABEL_30:
      if (v17)
        goto LABEL_48;
LABEL_31:
      v20 = v14;
      if (!v6)
      {
        if (!v5)
        {
          if ((v14 & 1) == 0)
            goto LABEL_50;
LABEL_49:
          v8 = v11 + 8;
          v10 = v9 + ~v10;
          goto LABEL_50;
        }
LABEL_42:
        v14 = *((_DWORD *)v11 + 13);
        if (v5 == v14 || v14 == 0)
          LOBYTE(v14) = v20;
        else
          LOBYTE(v14) = v5 < v14;
        goto LABEL_48;
      }
      v21 = *((_DWORD *)v11 + 14);
      v22 = v21 != 0;
      v23 = v6 > v21;
      v24 = v6 != v21;
      v25 = v23;
      v26 = v22 && v24;
      if (v26)
        LOBYTE(v14) = v25;
      else
        LOBYTE(v14) = v20;
      if ((v26 & 1) == 0 && v5)
        goto LABEL_42;
LABEL_48:
      if ((v14 & 1) != 0)
        goto LABEL_49;
LABEL_50:
      v9 = v10;
      if (!v10)
        goto LABEL_54;
    }
    LOBYTE(v14) = 0;
LABEL_23:
    v15 = v12 == 1819304813;
    v16 = v4 == 1819304813;
    v17 = v4 != 0;
LABEL_24:
    if (!v16)
      goto LABEL_30;
    goto LABEL_25;
  }
LABEL_54:
  if (v8 != v7
    && *((double *)v8 + 3) == 0.0
    && *((_DWORD *)v8 + 8) == v4
    && *((_DWORD *)v8 + 9) == v3
    && *((_DWORD *)v8 + 10) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)v8 + 11) == *(_DWORD *)(a2 + 20)
    && *((_DWORD *)v8 + 12) == *(_DWORD *)(a2 + 24)
    && *((_DWORD *)v8 + 13) == v5
    && *((_DWORD *)v8 + 14) == v6)
  {
    *(_OWORD *)v89 = *(_OWORD *)(a2 + 40);
    CA::ValueRangeList::AddRange(v8, (double *)v89);
  }
  else
  {
    v77 = *(_DWORD *)(a2 + 12);
    v78 = *(_DWORD *)(a2 + 16);
    v79 = *(_DWORD *)(a2 + 20);
    v80 = *(_DWORD *)(a2 + 24);
    v81 = *(_DWORD *)(a2 + 36);
    v94 = *(_OWORD *)(a2 + 40);
    v84 = 0;
    v83 = 0uLL;
    CA::ValueRangeList::AddRange((double **)&v83, (double *)&v94);
    v29 = (double **)*a1;
    v28 = a1[1];
    v30 = (uint64_t)v8 - *a1;
    v31 = v30 >> 6;
    v32 = *a1 + (v30 & 0xFFFFFFFFFFFFFFC0);
    v82 = a1;
    v35 = a1[2];
    v34 = (uint64_t)(a1 + 2);
    v33 = v35;
    if (v28 >= v35)
    {
      v52 = ((uint64_t)(v28 - (_QWORD)v29) >> 6) + 1;
      if (v52 >> 58)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v53 = v33 - (_QWORD)v29;
      if (v53 >> 5 > v52)
        v52 = v53 >> 5;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFC0)
        v54 = 0x3FFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      v88 = v34;
      if (v54)
        v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v54);
      else
        v55 = 0;
      v56 = v54 + (v31 << 6);
      v85 = (char *)v54;
      *(_QWORD *)&v86 = v56;
      *((_QWORD *)&v86 + 1) = v56;
      v87 = (char *)(v54 + (v55 << 6));
      if (v31 == v55)
      {
        if (v30 < 1)
        {
          if (v8 == v29)
            v58 = 1;
          else
            v58 = v30 >> 5;
          v91 = v34;
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v58);
          v61 = v86;
          if (*((_QWORD *)&v86 + 1) == (_QWORD)v86)
          {
            v66 = vdupq_n_s64(v86);
            v62 = &v59[64 * (v58 >> 2)];
          }
          else
          {
            v62 = &v59[64 * (v58 >> 2) + *((_QWORD *)&v86 + 1) - v86];
            v63 = &v59[64 * (v58 >> 2)];
            do
            {
              *(_QWORD *)v63 = 0;
              *((_QWORD *)v63 + 1) = 0;
              *((_QWORD *)v63 + 2) = 0;
              *(_OWORD *)v63 = *(_OWORD *)v61;
              *((_QWORD *)v63 + 2) = *(_QWORD *)(v61 + 16);
              *(_QWORD *)v61 = 0;
              *(_QWORD *)(v61 + 8) = 0;
              *(_QWORD *)(v61 + 16) = 0;
              v64 = *(_OWORD *)(v61 + 24);
              v65 = *(_OWORD *)(v61 + 40);
              *((_QWORD *)v63 + 7) = *(_QWORD *)(v61 + 56);
              *(_OWORD *)(v63 + 40) = v65;
              *(_OWORD *)(v63 + 24) = v64;
              v63 += 64;
              v61 += 64;
            }
            while (v63 != v62);
            v66 = (int64x2_t)v86;
          }
          v67 = v87;
          *(_QWORD *)v89 = v85;
          v85 = v59;
          *(_QWORD *)&v86 = &v59[64 * (v58 >> 2)];
          *(int64x2_t *)&v89[8] = v66;
          *((_QWORD *)&v86 + 1) = v62;
          v87 = &v59[64 * v60];
          v90 = v67;
          std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)v89);
          v56 = *((_QWORD *)&v86 + 1);
        }
        else
        {
          v57 = v31 + 2;
          if (v31 >= -1)
            v57 = v31 + 1;
          v56 -= v57 >> 1 << 6;
          *(_QWORD *)&v86 = v56;
          *((_QWORD *)&v86 + 1) = v56;
        }
      }
      *(_OWORD *)v56 = v83;
      *(_QWORD *)(v56 + 16) = v84;
      *(_QWORD *)(v56 + 24) = 0;
      *(_DWORD *)(v56 + 32) = v4;
      *(_DWORD *)(v56 + 36) = v77;
      *(_DWORD *)(v56 + 40) = v78;
      *(_DWORD *)(v56 + 44) = v79;
      *(_DWORD *)(v56 + 48) = v80;
      *(_DWORD *)(v56 + 52) = v5;
      *(_DWORD *)(v56 + 56) = v6;
      *(_DWORD *)(v56 + 60) = v81;
      *((_QWORD *)&v86 + 1) += 64;
      *(_QWORD *)&v86 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>(v34, v32, v32, *v82, *v82, v86, v86);
      v68 = v82[1];
      v69 = *((_QWORD *)&v86 + 1);
      v92 = *((_QWORD *)&v86 + 1);
      v93 = *((_QWORD *)&v86 + 1);
      *(_QWORD *)v89 = v34;
      *(_QWORD *)&v89[8] = &v92;
      *(_QWORD *)&v89[16] = &v93;
      if (v32 != v68)
      {
        do
        {
          *(_QWORD *)v69 = 0;
          *(_QWORD *)(v69 + 8) = 0;
          *(_QWORD *)(v69 + 16) = 0;
          *(_OWORD *)v69 = *(_OWORD *)v32;
          *(_QWORD *)(v69 + 16) = *(_QWORD *)(v32 + 16);
          *(_QWORD *)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          v70 = *(_OWORD *)(v32 + 24);
          v71 = *(_OWORD *)(v32 + 40);
          *(_QWORD *)(v69 + 56) = *(_QWORD *)(v32 + 56);
          *(_OWORD *)(v69 + 40) = v71;
          *(_OWORD *)(v69 + 24) = v70;
          v69 += 64;
          v32 += 64;
        }
        while (v32 != v68);
        v93 = v69;
      }
      LOBYTE(v90) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v89);
      v72 = *(_OWORD *)v82;
      v73 = (uint64_t)v87;
      *v82 = v86;
      v82[1] = v69;
      v86 = v72;
      v74 = v82[2];
      v82[2] = v73;
      v87 = (char *)v74;
      v85 = (char *)v72;
      std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v85);
    }
    else if (v32 == v28)
    {
      *(_OWORD *)v32 = v83;
      *(_QWORD *)(v32 + 16) = v84;
      *(_QWORD *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = v4;
      *(_DWORD *)(v32 + 36) = v77;
      *(_DWORD *)(v32 + 40) = v78;
      *(_DWORD *)(v32 + 44) = v79;
      *(_DWORD *)(v32 + 48) = v80;
      *(_DWORD *)(v32 + 52) = v5;
      *(_DWORD *)(v32 + 56) = v6;
      *(_DWORD *)(v32 + 60) = v81;
      v82[1] = v32 + 64;
    }
    else
    {
      v36 = v32 + 64;
      v37 = v28 - 64;
      v38 = v28;
      if (v28 >= 0x40)
      {
        do
        {
          *(_QWORD *)v38 = 0;
          *(_QWORD *)(v38 + 8) = 0;
          *(_QWORD *)(v38 + 16) = 0;
          *(_OWORD *)v38 = *(_OWORD *)v37;
          *(_QWORD *)(v38 + 16) = *(_QWORD *)(v37 + 16);
          *(_QWORD *)v37 = 0;
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 16) = 0;
          v39 = *(_OWORD *)(v37 + 24);
          v40 = *(_OWORD *)(v37 + 40);
          *(_QWORD *)(v38 + 56) = *(_QWORD *)(v37 + 56);
          *(_OWORD *)(v38 + 40) = v40;
          *(_OWORD *)(v38 + 24) = v39;
          v38 += 64;
          v37 += 64;
        }
        while (v37 < v28);
      }
      v76 = v83;
      v75 = v84;
      v82[1] = v38;
      if (v28 != v36)
      {
        v41 = 0;
        v42 = (uint64_t)(v28 - v36) >> 6;
        v43 = &(&v29[8 * v31])[8 * v42];
        v44 = -64 * v42;
        do
        {
          v45 = v28 + v41;
          v47 = (void **)(v28 + v41 - 64);
          v46 = *v47;
          if (*v47)
          {
            *(_QWORD *)(v45 - 56) = v46;
            operator delete(v46);
            *v47 = 0;
            *(_QWORD *)(v28 + v41 - 56) = 0;
            *(_QWORD *)(v28 + v41 - 48) = 0;
          }
          v48 = (uint64_t)&v43[v41 / 8 - 8];
          *(_OWORD *)v47 = *(_OWORD *)v48;
          *(_QWORD *)(v45 - 48) = v43[v41 / 8 - 6];
          *(_QWORD *)v48 = 0;
          *(_QWORD *)(v48 + 8) = 0;
          *(_QWORD *)(v48 + 16) = 0;
          v49 = *(_OWORD *)&v43[v41 / 8 - 5];
          v50 = *(_OWORD *)&v43[v41 / 8 - 3];
          *(_QWORD *)(v45 - 8) = v43[v41 / 8 - 1];
          *(_OWORD *)(v45 - 24) = v50;
          *(_OWORD *)(v45 - 40) = v49;
          v41 -= 64;
        }
        while (v44 != v41);
      }
      v51 = *(void **)v32;
      if (*(_QWORD *)v32)
      {
        *(_QWORD *)(v32 + 8) = v51;
        operator delete(v51);
      }
      *(_OWORD *)v32 = v76;
      *(_QWORD *)(v32 + 16) = v75;
      *(_QWORD *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = v4;
      *(_DWORD *)(v32 + 36) = v77;
      *(_DWORD *)(v32 + 40) = v78;
      *(_DWORD *)(v32 + 44) = v79;
      *(_DWORD *)(v32 + 48) = v80;
      *(_DWORD *)(v32 + 52) = v5;
      *(_DWORD *)(v32 + 56) = v6;
      *(_DWORD *)(v32 + 60) = v81;
    }
  }
}

void sub_1B58E26D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
  {
    std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&a20);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::make_available_format_list(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v5 = *(_OWORD *)(v2 + 16);
      v11[0] = *(_OWORD *)v2;
      v11[1] = v5;
      v12 = *(_QWORD *)(v2 + 32);
      v13 = *(_QWORD *)&v11[0];
      v14 = *(_QWORD *)&v11[0];
      AMCP::add_available_format(a2, (uint64_t)v11);
      v2 += 40;
    }
    while (v2 != v3);
    v6 = *a2;
    v7 = a2[1];
    while (1)
    {
      if (v6 == v7)
        return;
      v8 = *(double **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)v6 == v9)
        break;
      v10 = *v8;
      if (*v8 == *(double *)(v9 - 8))
        goto LABEL_9;
LABEL_10:
      v6 += 64;
    }
    v10 = 0.0;
LABEL_9:
    *(double *)(v6 + 24) = v10;
    goto LABEL_10;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      AMCP::add_available_format(a2, v2);
      v2 += 56;
    }
    while (v2 != v3);
    v5 = *a2;
    v6 = a2[1];
    while (1)
    {
      if (v5 == v6)
        return;
      v7 = *(double **)v5;
      v8 = *(_QWORD *)(v5 + 8);
      if (*(_QWORD *)v5 == v8)
        break;
      v9 = *v7;
      if (*v7 == *(double *)(v8 - 8))
        goto LABEL_9;
LABEL_10:
      v5 += 64;
    }
    v9 = 0.0;
LABEL_9:
    *(double *)(v5 + 24) = v9;
    goto LABEL_10;
  }
}

uint64_t AMCP::get_stream_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_stream_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_stream_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stream_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stream_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x4B0uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1200;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v34, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 300;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B58E2FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1200;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

void HALS_Client::RemoveMuter(HALS_Object *a1, int a2)
{
  HALB_Mutex *v3;
  AudioObjectPropertyAddress v4;
  _QWORD v5[6];
  int v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_Client11RemoveMuterEN4AMCP9DirectionEj_block_invoke;
  v5[3] = &unk_1E69720E8;
  v6 = 0;
  v7 = a2;
  v5[4] = &v8;
  v5[5] = a1;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  if (*((_BYTE *)v9 + 24))
  {
    HALS_Client::UpdateMuteStateOnContexts(a1);
    strcpy((char *)&v4, "tmopbolg");
    BYTE1(v4.mElement) = 0;
    HIWORD(v4.mElement) = 0;
    HALS_Object::PropertiesChanged(a1, (HALS_NotificationManager *)*((unsigned int *)a1 + 4), *((unsigned int *)a1 + 4), 1, &v4);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1B58E3104(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client11RemoveMuterEN4AMCP9DirectionEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  AMCP::Log::Scope_Registry *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  int v23;
  std::string::size_type v24;
  int v25;
  std::string *v26;
  void **v27;
  int v28;
  std::__shared_weak_count *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  uint64_t v35;
  std::string *v36;
  void *__p[2];
  char v38;
  std::string v39;
  uint8_t buf[8];
  _BYTE v41[10];
  __int16 v42;
  int v43;
  __int16 v44;
  std::string *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  void **v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = v2 + 64;
  v4 = (_QWORD *)(v2 + 64 + 40 * *(unsigned int *)(a1 + 48));
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v4, *(_DWORD *)(a1 + 52));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5 != 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = (int8x8_t)v4[1];
    v7 = v5[1];
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= *(_QWORD *)&v6)
        v7 %= *(_QWORD *)&v6;
    }
    else
    {
      v7 &= *(_QWORD *)&v6 - 1;
    }
    v9 = *(uint64_t **)(*v4 + 8 * v7);
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9 != v5);
    if (v10 == v4 + 2)
      goto LABEL_19;
    v11 = v10[1];
    if (v8.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v6)
        v11 %= *(_QWORD *)&v6;
    }
    else
    {
      v11 &= *(_QWORD *)&v6 - 1;
    }
    if (v11 != v7)
    {
LABEL_19:
      if (!*v5)
        goto LABEL_20;
      v12 = *(_QWORD *)(*v5 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v6)
          v12 %= *(_QWORD *)&v6;
      }
      else
      {
        v12 &= *(_QWORD *)&v6 - 1;
      }
      if (v12 != v7)
LABEL_20:
        *(_QWORD *)(*v4 + 8 * v7) = 0;
    }
    v13 = *v5;
    if (*v5)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v14 >= *(_QWORD *)&v6)
          v14 %= *(_QWORD *)&v6;
      }
      else
      {
        v14 &= *(_QWORD *)&v6 - 1;
      }
      if (v14 != v7)
      {
        *(_QWORD *)(*v4 + 8 * v14) = v10;
        v13 = *v5;
      }
    }
    *v10 = v13;
    *v5 = 0;
    --v4[3];
    operator delete(v5);
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = *(std::__shared_weak_count **)v41;
    v17 = **(NSObject ***)buf;
    if (*(_QWORD *)v41)
    {
      v18 = (unint64_t *)(*(_QWORD *)v41 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v20 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      HALS_Client::GetUniqueDebugString((HALS_Client *)&v39, v2);
      v23 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
      v24 = v39.__r_.__value_.__r.__words[0];
      v25 = *(_DWORD *)(v2 + 16);
      get_muter_name((HALS_Client *)__p, (HALS_ObjectMap *)*(unsigned int *)(a1 + 52));
      v26 = &v39;
      if (v23 < 0)
        v26 = (std::string *)v24;
      if (v38 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      v28 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "HALS_Client.cpp";
      v42 = 1024;
      v43 = 1514;
      v44 = 2082;
      v45 = v26;
      v46 = 1024;
      v47 = v25;
      v48 = 2082;
      v49 = v27;
      v50 = 1024;
      v51 = v28;
      _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::RemoveMuter: Process %{public}s (%u) unmuted by %{public}s (%u)", buf, 0x38u);
      if (v38 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = *(std::__shared_weak_count **)v41;
    v30 = **(NSObject ***)buf;
    if (*(_QWORD *)v41)
    {
      v31 = (unint64_t *)(*(_QWORD *)v41 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      v35 = v3 + 40 * *(unsigned int *)(a1 + 48);
      get_muter_strings(&v39, *(uint64_t ***)(v35 + 16), *(_QWORD *)(v35 + 24));
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v39;
      else
        v36 = (std::string *)v39.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "HALS_Client.cpp";
      v42 = 1024;
      v43 = 1515;
      v44 = 2080;
      v45 = v36;
      _os_log_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::RemoveMuter:\t\tCurrent muters: (%s)", buf, 0x22u);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B58E3558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_Client::UpdateMuteStateOnContexts(_DWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  HALS_ObjectMap *v4;
  uint64_t v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  int v8;
  _BOOL8 ShouldMuteContext;
  int v10;
  HALB_Mutex *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p;
  unsigned int *v19;
  _QWORD v20[5];
  int v21;
  uint64_t v22;
  int v23;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 200))(&__p);
  v2 = (unsigned int *)__p;
  v3 = v19;
  while (v2 != v3)
  {
    v4 = (HALS_ObjectMap *)*v2;
    v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
    v7 = (HALS_ObjectMap *)v5;
    if (v5)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 96) + 536))(*(_QWORD *)(v5 + 96), 0);
      ShouldMuteContext = HALS_Client::ShouldMuteContext(a1, 0, v4);
      if (v8 != ShouldMuteContext)
        (*(void (**)(_QWORD *, _QWORD, _BOOL8))(**((_QWORD **)v7 + 12) + 544))(*((_QWORD **)v7 + 12), 0, ShouldMuteContext);
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
    ++v2;
  }
  v15[0] = 0;
  v15[1] = 0;
  HALS_System::GetInstance(&v16, 0, v15);
  if (v16)
  {
    v10 = a1[4];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
    v20[3] = &__block_descriptor_tmp_106;
    v20[4] = v16;
    v21 = v10;
    v22 = 0x676C6F62706F6D74;
    v23 = 0;
    v11 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v20);
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v19 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1B58E36F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_Client::ShouldMuteContext(_DWORD *a1, int a2, HALS_ObjectMap *a3)
{
  HALB_Mutex *v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_IOContext *v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD v12[6];
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  uint64_t (*v18)(uint64_t);
  _OWORD v19[2];
  int v20;

  v14 = 0;
  v15 = &v14;
  v16 = 0x5002000000;
  v17 = __Block_byref_object_copy__39;
  v18 = __Block_byref_object_dispose__40;
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK11HALS_Client17ShouldMuteContextEN4AMCP9DirectionEj_block_invoke;
  v12[3] = &unk_1E6972110;
  v12[4] = &v14;
  v12[5] = a1;
  v13 = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
  if (v15[8])
  {
    v6 = HALS_ObjectMap::CopyObjectByObjectID(a3);
    v8 = (HALS_IOContext *)v6;
    if (v6 && **(_DWORD **)(v6 + 64) == a1[4])
    {
      v9 = v15 + 7;
      while (1)
      {
        v9 = (_QWORD *)*v9;
        v10 = v9 != 0;
        if (!v9)
          break;
        if (!*((_BYTE *)v9 + 24) || HALS_IOContext::IncludesDevice(v8, *((_DWORD *)v9 + 5)))
        {
          v10 = 1;
          break;
        }
      }
    }
    else
    {
      v10 = 0;
    }
    HALS_ObjectMap::ReleaseObject(v8, v7);
  }
  else
  {
    v10 = 0;
  }
  _Block_object_dispose(&v14, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v19);
  return v10;
}

void sub_1B58E389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__40(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 40);
}

void ___ZNK11HALS_Client17ShouldMuteContextEN4AMCP9DirectionEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *inserted;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v1 = *(_QWORD *)(a1 + 40) + 40 * *(unsigned int *)(a1 + 48) + 64;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (_QWORD *)(v2 + 40);
  if (v2 + 40 != v1)
  {
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 40 * *(unsigned int *)(a1 + 48) + 96);
    v4 = *(uint64_t **)(v1 + 16);
    v5 = *(_QWORD *)(v2 + 48);
    if (!v5)
      goto LABEL_10;
    for (i = 0; i != v5; *(_QWORD *)(*v3 + 8 * i++) = 0)
      ;
    v7 = *(uint64_t **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    if (v7)
    {
      while (v4)
      {
        v8 = *((unsigned int *)v4 + 4);
        *((_DWORD *)v7 + 4) = v8;
        v9 = *((_DWORD *)v4 + 5);
        *((_BYTE *)v7 + 24) = *((_BYTE *)v4 + 24);
        *((_DWORD *)v7 + 5) = v9;
        v10 = (uint64_t *)*v7;
        v7[1] = v8;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)v3, v8, (_DWORD *)v7 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(v3, v7, inserted);
        v4 = (uint64_t *)*v4;
        v7 = v10;
        if (!v10)
          goto LABEL_10;
      }
      do
      {
        v16 = (uint64_t *)*v7;
        operator delete(v7);
        v7 = v16;
      }
      while (v16);
    }
    else
    {
LABEL_10:
      while (v4)
      {
        v12 = (unsigned int *)operator new(0x20uLL);
        *(_QWORD *)v12 = 0;
        v13 = v4[2];
        v12[6] = *((_DWORD *)v4 + 6);
        *((_QWORD *)v12 + 2) = v13;
        v14 = v12[4];
        *((_QWORD *)v12 + 1) = v14;
        v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)v3, v14, v12 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(v3, v12, v15);
        v4 = (uint64_t *)*v4;
      }
    }
  }
}

void sub_1B58E3A7C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B58E3A9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = *v16; *v16; i = *v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = (uint64_t **)i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = (uint64_t **)i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void HALS_Client::GetUniqueDebugString(HALS_Client *this, uint64_t a2)
{
  uint64_t v4;
  caulk::platform *v5;
  std::string::size_type size;
  std::string v7;
  std::string __str;

  HALS_Client::GetBundleIDString(this, a2);
  v4 = *((unsigned __int8 *)this + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v5 = (caulk::platform *)*(unsigned int *)(a2 + 232);
    caulk::platform::process_name(v5);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::operator=((std::string *)this, &__str);
    }
    else
    {
      std::to_string(&v7, (int)v5);
      if (*((char *)this + 23) < 0)
        operator delete(*(void **)this);
      *(std::string *)this = v7;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B58E4060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

void get_muter_name(HALS_Client *a1, HALS_ObjectMap *a2)
{
  int v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef v8;
  std::runtime_error *exception;
  std::runtime_error *v10;
  CFTypeRef cf;

  if (!HALS_ObjectMap::IsObjectMapped((unint64_t)a2))
    goto LABEL_7;
  v4 = *(_DWORD *)(HALS_ObjectMap::CopyObjectByObjectID(a2) + 20);
  if (v4 == 1668050548)
  {
    v7 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    HALS_Client::GetUniqueDebugString(a1, v7);
    return;
  }
  if (v4 != 1952672883)
  {
LABEL_7:
    std::to_string((std::string *)a1, a2);
    return;
  }
  v5 = HALS_ObjectMap::CopyObjectByObjectID(a2);
  HALS_Tap::GetName(&cf, *(const void **)(v5 + 56));
  if (cf)
  {
    CFRelease(cf);
    HALS_Tap::GetName(&cf, *(const void **)(v5 + 56));
    v6 = cf;
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)a1, (const __CFString *)cf);
    CFRelease(v6);
  }
  else
  {
    HALS_Tap::GetUID(&cf, *(const void **)(v5 + 64));
    v8 = cf;
    if (!cf)
    {
      v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v10, "Could not construct");
      __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)a1, (const __CFString *)cf);
    CFRelease(v8);
  }
}

void sub_1B58E4210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void get_muter_strings(std::string *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t i;
  const std::string::value_type *v6;
  void *v7;
  void *__p[2];
  unsigned __int8 v9;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v3 = a2;
    for (i = a3 - 1; ; --i)
    {
      get_muter_name((HALS_Client *)__p, (HALS_ObjectMap *)*((unsigned int *)v3 + 4));
      v6 = (v9 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      v7 = (v9 & 0x80u) == 0 ? (void *)v9 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      if (((char)v9 & 0x80000000) == 0)
        break;
      operator delete(__p[0]);
      if (i)
        goto LABEL_13;
LABEL_14:
      v3 = (uint64_t **)*v3;
      if (!v3)
        return;
    }
    if (!i)
      goto LABEL_14;
LABEL_13:
    std::string::append(a1, ", ", 2uLL);
    goto LABEL_14;
  }
}

void sub_1B58E4300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_Tap::GetName(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

_QWORD *HALS_Tap::GetUID(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

void HALS_Client::GetBundleIDString(HALS_Client *this, uint64_t a2)
{
  const void *v3;
  const void *v5;
  CFTypeRef cf;

  v3 = *(const void **)(a2 + 240);
  if (v3
    && (CFRetain(v3), (v5 = *(const void **)(a2 + 240)) != 0)
    && (applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5), cf))
  {
    applesauce::CF::convert_to<std::string,0>((uint64_t)this, (const __CFString *)cf);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

void sub_1B58E4410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client8AddMuterEN4AMCP9DirectionEjNSt3__18optionalIjEE_block_invoke(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *prime;
  char v8;
  BOOL v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  _BYTE *v30;
  _QWORD *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _BOOL8 v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  int v41;
  std::string::size_type v42;
  int v43;
  std::string *v44;
  void **v45;
  int v46;
  int v47;
  const char *v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  uint64_t v55;
  std::string *v56;
  void *__p[2];
  char v58;
  std::string v59;
  uint8_t buf[8];
  _BYTE v61[10];
  __int16 v62;
  int v63;
  __int16 v64;
  std::string *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  void **v69;
  __int16 v70;
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = v3 + 64;
  v5 = *(unsigned int *)(a1 + 60);
  v6 = v3 + 64 + 40 * *(unsigned int *)(a1 + 56);
  prime = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)v6, v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = prime == 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v8 = 1;
  }
  else
  {
    if (prime[24])
      v9 = *(_BYTE *)(a1 + 68) == 0;
    else
      v9 = 1;
    if (v9)
      v8 = (prime[24] != 0) ^ (*(_BYTE *)(a1 + 68) != 0);
    else
      v8 = *((_DWORD *)prime + 5) != *(_DWORD *)(a1 + 64);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    return;
  }
  v10 = *(_QWORD *)(v6 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v1 = v5;
      if (v10 <= v5)
        v1 = v5 % v10;
    }
    else
    {
      v1 = ((_DWORD)v10 - 1) & v5;
    }
    v12 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v1);
    if (v12)
    {
      v13 = (_BYTE *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v5)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v5)
              goto LABEL_84;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v1)
              break;
          }
          v13 = *(_BYTE **)v13;
        }
        while (v13);
      }
    }
  }
  prime = operator new(0x20uLL);
  v13 = prime;
  *(_QWORD *)prime = 0;
  *((_QWORD *)prime + 1) = v5;
  *((_DWORD *)prime + 4) = *(_DWORD *)(a1 + 60);
  prime[20] = 0;
  prime[24] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(v6 + 24) + 1);
  v16 = *(float *)(v6 + 32);
  if (v10 && (float)(v16 * (float)v10) >= v15)
  {
    v5 = v1;
    goto LABEL_74;
  }
  v17 = 1;
  if (v10 >= 3)
    v17 = (v10 & (v10 - 1)) != 0;
  v18 = v17 | (2 * v10);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    v20 = v19;
  else
    v20 = v18;
  if (v20 == 1)
  {
    v20 = 2;
  }
  else if ((v20 & (v20 - 1)) != 0)
  {
    prime = (_BYTE *)std::__next_prime(v20);
    v20 = (size_t)prime;
    v10 = *(_QWORD *)(v6 + 8);
  }
  if (v20 <= v10)
  {
    if (v20 >= v10)
      goto LABEL_70;
    prime = (_BYTE *)vcvtps_u32_f32((float)*(unint64_t *)(v6 + 24) / *(float *)(v6 + 32));
    if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      prime = (_BYTE *)std::__next_prime((size_t)prime);
    }
    else
    {
      v27 = 1 << -(char)__clz((unint64_t)(prime - 1));
      if ((unint64_t)prime >= 2)
        prime = (_BYTE *)v27;
    }
    if (v20 <= (unint64_t)prime)
      v20 = (size_t)prime;
    if (v20 >= v10)
    {
      v10 = *(_QWORD *)(v6 + 8);
      goto LABEL_70;
    }
    if (!v20)
    {
      prime = *(_BYTE **)v6;
      *(_QWORD *)v6 = 0;
      if (prime)
        operator delete(prime);
      v10 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      goto LABEL_70;
    }
  }
  if (v20 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v21 = operator new(8 * v20);
  prime = *(_BYTE **)v6;
  *(_QWORD *)v6 = v21;
  if (prime)
    operator delete(prime);
  v22 = 0;
  *(_QWORD *)(v6 + 8) = v20;
  do
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v22++) = 0;
  while (v20 != v22);
  v23 = *(_QWORD **)(v6 + 16);
  if (v23)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= v20)
        v24 %= v20;
    }
    else
    {
      v24 &= v20 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v24) = v6 + 16;
    v28 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v29 = v28[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v29 >= v20)
            v29 %= v20;
        }
        else
        {
          v29 &= v20 - 1;
        }
        if (v29 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)v6 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)v6 + 8 * v29) = v23;
            goto LABEL_66;
          }
          *v23 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)v6 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)v6 + 8 * v29) = v28;
          v28 = v23;
        }
        v29 = v24;
LABEL_66:
        v23 = v28;
        v28 = (_QWORD *)*v28;
        v24 = v29;
      }
      while (v28);
    }
  }
  v10 = v20;
LABEL_70:
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v10 <= v5)
      v5 %= v10;
  }
  else
  {
    v5 = ((_DWORD)v10 - 1) & v5;
  }
LABEL_74:
  v30 = *(_BYTE **)v6;
  v31 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v5);
  if (v31)
  {
    *(_QWORD *)v13 = *v31;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v13;
    *(_QWORD *)&v30[8 * v5] = v6 + 16;
    if (!*(_QWORD *)v13)
      goto LABEL_83;
    v32 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10)
        v32 %= v10;
    }
    else
    {
      v32 &= v10 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)v6 + 8 * v32);
  }
  *v31 = v13;
LABEL_83:
  ++*(_QWORD *)(v6 + 24);
LABEL_84:
  v33 = *(_DWORD *)(a1 + 64);
  v13[24] = *(_BYTE *)(a1 + 68);
  *((_DWORD *)v13 + 5) = v33;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)prime);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v34 = *(std::__shared_weak_count **)v61;
  v35 = **(NSObject ***)buf;
  if (*(_QWORD *)v61)
  {
    v36 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v38 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
  if (v38)
  {
    v39 = pthread_self();
    v40 = pthread_mach_thread_np(v39);
    HALS_Client::GetUniqueDebugString((HALS_Client *)&v59, v3);
    v41 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
    v42 = v59.__r_.__value_.__r.__words[0];
    v43 = *(_DWORD *)(v3 + 16);
    get_muter_name((HALS_Client *)__p, (HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
    if (v41 >= 0)
      v44 = &v59;
    else
      v44 = (std::string *)v42;
    v45 = (void **)__p[0];
    if (v58 >= 0)
      v45 = __p;
    v46 = *(_DWORD *)(a1 + 60);
    v47 = *(unsigned __int8 *)(a1 + 68);
    v48 = "device ID ";
    if (*(_BYTE *)(a1 + 68))
      v47 = *(_DWORD *)(a1 + 64);
    else
      v48 = "all devices";
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)&buf[4] = v40;
    *(_WORD *)v61 = 2080;
    *(_QWORD *)&v61[2] = "HALS_Client.cpp";
    v62 = 1024;
    v63 = 1486;
    v64 = 2082;
    v65 = v44;
    v66 = 1024;
    v67 = v43;
    v68 = 2082;
    v69 = v45;
    v70 = 1024;
    v71 = v46;
    v72 = 2080;
    v73 = v48;
    v74 = 1024;
    v75 = v47;
    _os_log_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::AddMuter: Process %{public}s (%u) muted by %{public}s (%u) for %s%u", buf, 0x48u);
    if (v58 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v38);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v49 = *(std::__shared_weak_count **)v61;
  v50 = **(NSObject ***)buf;
  if (*(_QWORD *)v61)
  {
    v51 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    v53 = pthread_self();
    v54 = pthread_mach_thread_np(v53);
    v55 = v4 + 40 * *(unsigned int *)(a1 + 56);
    get_muter_strings(&v59, *(uint64_t ***)(v55 + 16), *(_QWORD *)(v55 + 24));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v59;
    else
      v56 = (std::string *)v59.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v54;
    *(_WORD *)v61 = 2080;
    *(_QWORD *)&v61[2] = "HALS_Client.cpp";
    v62 = 1024;
    v63 = 1487;
    v64 = 2080;
    v65 = v56;
    _os_log_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::AddMuter:\t\tCurrent muters: (%s)", buf, 0x22u);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_1B58E4BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::size_type v6;
  unsigned int *value;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  char *v11;
  std::vector<unsigned int>::pointer v12;
  std::vector<unsigned int>::pointer v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v19 = &begin[__sz];
    goto LABEL_15;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 1;
  if (v8 >> 1 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v10);
  v12 = this->__begin_;
  v13 = this->__end_;
  v14 = &v11[4 * v5];
  v16 = (unsigned int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = (unsigned int *)&v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
    operator delete(v12);
}

void AMCP::Utility::SecTask::release(const void **this)
{
  const void *v2;

  v2 = *this;
  if (v2)
  {
    CFRelease(v2);
    *this = 0;
  }
}

void ___ZN11HALS_Client28StopListeningToAllPropertiesEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  int *v3;
  int v4;
  int v5;
  _BOOL4 v6;
  int *v7;
  int *v8;
  int *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int **)(v1 + 144);
  v3 = *(int **)(v1 + 152);
  do
  {
    if (v2 == v3)
      return;
    v4 = *v2;
    v2 += 10;
    v5 = *(_DWORD *)(a1 + 40);
    v6 = v4 != v5;
  }
  while (v4 != v5);
  v7 = &v2[10 * v6];
  v8 = v7 - 10;
  v9 = v7;
  if (v7 == v3)
    goto LABEL_35;
  do
  {
    *v8 = *v9;
    v10 = (_DWORD *)*((_QWORD *)v8 + 1);
    v11 = (uint64_t *)*((_QWORD *)v9 + 1);
    v12 = (uint64_t *)*((_QWORD *)v9 + 2);
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 2);
    v14 = *((_QWORD *)v8 + 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v10) >> 2) < v13)
    {
      if (v10)
      {
        *((_QWORD *)v8 + 2) = v10;
        operator delete(v10);
        v14 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        *((_QWORD *)v8 + 3) = 0;
      }
      if (v13 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
      v16 = 2 * v15;
      if (2 * v15 <= v13)
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 2);
      if (v15 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v16;
      std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100]((_QWORD *)v8 + 1, v17);
      v10 = (_DWORD *)*((_QWORD *)v8 + 2);
      v18 = (char *)v10;
      if (v11 != v12)
      {
        v18 = (char *)*((_QWORD *)v8 + 2);
        do
        {
          v19 = *v11;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v18 = v19;
          v18 += 12;
          v11 = (uint64_t *)((char *)v11 + 12);
        }
        while (v11 != v12);
      }
      goto LABEL_17;
    }
    v21 = (_DWORD *)*((_QWORD *)v8 + 2);
    v22 = 0xAAAAAAAAAAAAAAABLL * (v21 - v10);
    if (v22 >= v13)
    {
      v18 = (char *)*((_QWORD *)v8 + 1);
      while (v11 != v12)
      {
        v29 = *v11;
        *((_DWORD *)v18 + 2) = *((_DWORD *)v11 + 2);
        *(_QWORD *)v18 = v29;
        v18 += 12;
        v11 = (uint64_t *)((char *)v11 + 12);
      }
LABEL_17:
      v20 = v18 - (char *)v10;
      goto LABEL_27;
    }
    if (v21 != v10)
    {
      v23 = 4 * (v21 - v10);
      v24 = (uint64_t *)*((_QWORD *)v9 + 1);
      do
      {
        v25 = *v24;
        v10[2] = *((_DWORD *)v24 + 2);
        *(_QWORD *)v10 = v25;
        v10 += 3;
        v24 = (uint64_t *)((char *)v24 + 12);
        v23 -= 12;
      }
      while (v23);
      v10 = (_DWORD *)*((_QWORD *)v8 + 2);
    }
    v26 = (uint64_t *)((char *)v11 + 12 * v22);
    v27 = (char *)v10;
    if (v26 != v12)
    {
      v27 = (char *)v10;
      do
      {
        v28 = *v26;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v26 + 2);
        *(_QWORD *)v27 = v28;
        v27 += 12;
        v26 = (uint64_t *)((char *)v26 + 12);
      }
      while (v26 != v12);
    }
    v20 = v27 - (char *)v10;
LABEL_27:
    *((_QWORD *)v8 + 2) = (char *)v10 + v20;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    v9 += 10;
    v8 += 10;
  }
  while (v9 != v3);
  v3 = *(int **)(v1 + 152);
LABEL_35:
  while (v3 != v8)
  {
    v30 = (void *)*((_QWORD *)v3 - 4);
    if (v30)
    {
      *((_QWORD *)v3 - 3) = v30;
      operator delete(v30);
    }
    v3 -= 10;
  }
  *(_QWORD *)(v1 + 152) = v8;
}

void HALS_Client::SetNonMixableFormat(HALS_Client *this, int a2)
{
  HALB_Mutex *v2;
  _QWORD v3[5];
  int v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
  v3[3] = &__block_descriptor_tmp_14_2053;
  v3[4] = this;
  v4 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;

  v2 = *(_QWORD **)(a1 + 32);
  v4 = (char *)v2[22];
  v3 = v2[23];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)v2[21];
    v7 = (v4 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      v6 = (char *)v2[21];
      v4 = (char *)v2[22];
    }
    else
    {
      v12 = 0;
    }
    v13 = (_DWORD *)(v11 + 4 * v7);
    v14 = v11 + 4 * v12;
    *v13 = *(_DWORD *)(a1 + 40);
    v5 = v13 + 1;
    while (v4 != v6)
    {
      v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *--v13 = v15;
    }
    v2[21] = v13;
    v2[22] = v5;
    v2[23] = v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = *(_DWORD *)(a1 + 40);
    v5 = v4 + 4;
  }
  v2[22] = v5;
}

void ___ZNK11HALS_Client33SendSleepingIsAllowedNotificationEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;

  v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
  v3 = (HALS_ObjectMap *)v1;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1B58E50B4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Client46UpdateStartCountAndMaybeNotifyProcessIsRunningEjb_block_invoke(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_DWORD *)(v1 + 320);
  if (*(_BYTE *)(result + 48))
    v3 = v2 + 1;
  else
    v3 = v2 - 1;
  *(_DWORD *)(v1 + 320) = v3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v3 < 2;
  return result;
}

void HALS_Client::SendIsRunningSomewhereElse(_DWORD *a1, int a2, uint64_t a3)
{
  int v3;
  HALB_Mutex *v4;
  _QWORD v5[8];
  int v6;
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;

  v3 = a1[4];
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_Client26SendIsRunningSomewhereElseEjRKNSt3__16vectorI26RunningIOContextClientInfoNS0_9allocatorIS2_EEEE_block_invoke;
  v5[3] = &unk_1E6972058;
  v5[6] = a1;
  v5[7] = a3;
  v6 = a2;
  v7 = v3;
  v5[4] = v8;
  v5[5] = v10;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
}

void sub_1B58E51B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client26SendIsRunningSomewhereElseEjRKNSt3__16vectorI26RunningIOContextClientInfoNS0_9allocatorIS2_EEEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *i;
  uint64_t v44;
  void *v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;

  v2 = *(_QWORD **)(a1 + 48);
  v4 = (char *)v2[37];
  v3 = (char *)v2[38];
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = (char *)v2[38];
  }
  else
  {
    v6 = v5 >> 3;
    v7 = (char *)v2[37];
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[8 * (v6 >> 1)];
      v11 = *(_DWORD *)v9;
      v10 = v9 + 8;
      v6 += ~(v6 >> 1);
      if (v11 < *(_DWORD *)(a1 + 64))
        v7 = v10;
      else
        v6 = v8;
    }
    while (v6);
  }
  if (v3 == v7)
  {
    v12 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 64);
    v13 = v7;
    if (*(_DWORD *)v7 == v12)
      goto LABEL_50;
  }
  v14 = v7 - v4;
  v15 = (v7 - v4) >> 3;
  v13 = &v4[(v7 - v4) & 0xFFFFFFFFFFFFFFF8];
  v16 = v2[39];
  if ((unint64_t)v3 >= v16)
  {
    v21 = (v5 >> 3) + 1;
    if (v21 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v22 = v16 - (_QWORD)v4;
    v23 = (uint64_t)(v16 - (_QWORD)v4) >> 2;
    if (v23 > v21)
      v21 = v23;
    if (v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v21;
    if (v24)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    v30 = &v26[8 * v15];
    v31 = &v26[8 * v25];
    if (v15 == v25)
    {
      if (v14 < 1)
      {
        if (v7 == v4)
          v33 = 1;
        else
          v33 = v14 >> 2;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v33);
        v30 = &v34[8 * (v33 >> 2)];
        v31 = &v34[8 * v35];
        if (v26)
        {
          v36 = v26;
          v37 = v31;
          operator delete(v36);
          v31 = v37;
        }
      }
      else
      {
        v32 = v15 + 2;
        if (v15 >= -1)
          v32 = v15 + 1;
        v30 -= 8 * (v32 >> 1);
      }
    }
    *(_QWORD *)v30 = v12;
    v38 = v30 + 8;
    v39 = (char *)v2[37];
    v40 = v30;
    if (v39 != v13)
    {
      v41 = v13;
      v40 = v30;
      do
      {
        v42 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *((_QWORD *)v40 - 1) = v42;
        v40 -= 8;
      }
      while (v41 != v39);
    }
    for (i = (char *)v2[38]; v13 != i; ++v38)
    {
      v44 = *(_QWORD *)v13;
      v13 += 8;
      *v38 = v44;
    }
    v45 = (void *)v2[37];
    v2[37] = v40;
    v2[38] = v38;
    v2[39] = v31;
    if (v45)
      operator delete(v45);
    v13 = v30;
  }
  else if (v13 == v3)
  {
    *(_QWORD *)v3 = v12;
    v2[38] = v3 + 8;
    v13 = v3;
  }
  else
  {
    v17 = v13 + 8;
    v18 = v3 - 8;
    v19 = (_QWORD *)v2[38];
    while (v18 < v3)
    {
      v20 = *(_QWORD *)v18;
      v18 += 8;
      *v19++ = v20;
    }
    v2[38] = v19;
    if (v3 != v17)
    {
      v27 = 8 * ((v3 - v17) >> 3);
      v28 = v3 - 4;
      v29 = (uint64_t)&v4[8 * v15 - 4];
      do
      {
        *((_DWORD *)v28 - 1) = *(_DWORD *)(v29 + v27 - 4);
        *(_DWORD *)v28 = *(_DWORD *)(v29 + v27);
        v28 -= 8;
        v27 -= 8;
      }
      while (v27);
    }
    *(_DWORD *)v13 = v12;
    *((_DWORD *)v13 + 1) = 0;
  }
LABEL_50:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *((_DWORD *)v13 + 1);
  v46 = *(unsigned __int8 ***)(a1 + 56);
  v47 = *v46;
  v48 = v46[1];
  if (*v46 == v48)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    do
    {
      v52 = *((_DWORD *)v47 + 2) == *(_DWORD *)(a1 + 68);
      v51 = *v47;
      v47 += 12;
      v50 = v51;
      v52 = v52 || v50 == 0;
      if (!v52)
        ++v49;
    }
    while (v47 != v48);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v49;
  *((_DWORD *)v13 + 1) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_1B58E54A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Client23DevicesStartedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke(uint64_t a1)
{
  uint64_t **v2;

  v2 = *(uint64_t ***)(a1 + 32);
  if (HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(v2 + 44, **(unsigned int ***)(a1 + 40), *(unsigned int **)(*(_QWORD *)(a1 + 40) + 8)))HALS_Client::NotifyClientsAboutInputDeviceListChange((HALS_Client *)v2);
  if (HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(v2 + 41, **(unsigned int ***)(a1 + 48), *(unsigned int **)(*(_QWORD *)(a1 + 48) + 8)))HALS_Client::NotifyClientsAboutOutputDeviceListChange((HALS_Client *)v2);
}

void sub_1B58E5514(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(uint64_t **a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;

  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v4 = a2;
    v6 = 0;
    v7 = a1[1];
    do
    {
      v8 = *v4;
      v9 = *a1;
      v10 = *a1;
      if (*a1 == v7)
      {
LABEL_6:
        v11 = (unint64_t)a1[2];
        if ((unint64_t)v7 >= v11)
        {
          v13 = v7 - v9;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v15 = v11 - (_QWORD)v9;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v17 = (char *)operator new(8 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = (uint64_t *)&v17[8 * v13];
          *v18 = v8 | 0x100000000;
          v12 = v18 + 1;
          if (v9 != v7)
          {
            do
            {
              v19 = *--v7;
              *--v18 = v19;
            }
            while (v7 != v9);
            v7 = *a1;
          }
          *a1 = v18;
          a1[1] = v12;
          a1[2] = (uint64_t *)&v17[8 * v16];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = v8 | 0x100000000;
          v12 = v7 + 1;
        }
        a1[1] = v12;
        v6 = 1;
        v7 = v12;
      }
      else
      {
        while ((_DWORD)v8 != *(_DWORD *)v10)
        {
          if (++v10 == v7)
            goto LABEL_6;
        }
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return v6 & 1;
}

void HALS_Client::NotifyClientsAboutInputDeviceListChange(HALS_Client *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5[2];
  HALS_System *v6;
  std::__shared_weak_count *v7;

  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  if (v6)
    HALS_System::ProcessPropertyChanged(v6, *((_DWORD *)this + 4), 1885632035, 1768845428, 0);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B58E5724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_Client::NotifyClientsAboutOutputDeviceListChange(HALS_Client *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5[2];
  HALS_System *v6;
  std::__shared_weak_count *v7;

  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  if (v6)
    HALS_System::ProcessPropertyChanged(v6, *((_DWORD *)this + 4), 1885632035, 1869968496, 0);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B58E57E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client23DevicesStoppedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke(uint64_t a1)
{
  char **v2;

  v2 = *(char ***)(a1 + 32);
  if (HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(v2 + 44, **(int ***)(a1 + 40), *(int **)(*(_QWORD *)(a1 + 40) + 8)))HALS_Client::NotifyClientsAboutInputDeviceListChange((HALS_Client *)v2);
  if (HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(v2 + 41, **(int ***)(a1 + 48), *(int **)(*(_QWORD *)(a1 + 48) + 8)))HALS_Client::NotifyClientsAboutOutputDeviceListChange((HALS_Client *)v2);
}

void sub_1B58E5858(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(char **a1, int *a2, int *a3)
{
  int *v4;
  char v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  int64_t v12;

  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v4 = a2;
    v6 = 0;
    v7 = *a1;
    v8 = a1[1];
    do
    {
      if (v7 == v8)
      {
        v8 = v7;
      }
      else
      {
        v9 = *v4;
        v10 = v7;
        while (1)
        {
          if (v9 == *(_DWORD *)v10)
          {
            v11 = *((_DWORD *)v10 + 1) - 1;
            *((_DWORD *)v10 + 1) = v11;
            if (!v11)
              break;
          }
          v10 += 8;
          if (v10 == v8)
            goto LABEL_13;
        }
        v12 = v8 - (v10 + 8);
        if (v8 != v10 + 8)
        {
          memmove(v10, v10 + 8, v8 - (v10 + 8));
          v7 = *a1;
        }
        v8 = &v10[v12];
        a1[1] = &v10[v12];
        v6 = 1;
      }
LABEL_13:
      ++v4;
    }
    while (v4 != a3);
  }
  return v6 & 1;
}

void sub_1B58E5AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B58E5E1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B58E6640(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B58E6968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

BOOL Symbol<tailspin_config * (*)(void)>::operator BOOL()
{
  Symbol<tailspin_config * (*)(void)>::initialize();
  return weak_tailspin_config_create_with_current_state != 0;
}

BOOL Symbol<void (*)(tailspin_config *)>::operator BOOL()
{
  Symbol<void (*)(tailspin_config *)>::initialize((uint64_t)&weak_tailspin_config_free);
  return weak_tailspin_config_free != 0;
}

id get_TSPDumpOptions_ReasonString(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&get_TSPDumpOptions_ReasonString(void)::once_flag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_ReasonString(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_ReasonString(void)::$_0 &&>>);
  }
  return (id)get_TSPDumpOptions_ReasonString(void)::s_symbol;
}

void Symbol<BOOL (*)(int,NSDictionary *)>::initialize()
{
  unint64_t v0;
  _UNKNOWN **v1;
  _UNKNOWN ****v2;
  _UNKNOWN ***v3;

  v1 = &weak_tailspin_dump_output_with_options_sync;
  v0 = atomic_load(&qword_1EF12F310);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&qword_1EF12F310, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(int,NSDictionary *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(int,NSDictionary *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void *get_address_for_symbol(const char *a1)
{
  void *result;

  result = dlopen("/usr/lib/libtailspin.dylib", 1);
  if (result)
    return dlsym(result, a1);
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_ReasonString(void)::$_0 &&>>()
{
  id *address_for_symbol;

  address_for_symbol = (id *)get_address_for_symbol("TSPDumpOptions_ReasonString");
  objc_storeStrong((id *)&get_TSPDumpOptions_ReasonString(void)::s_symbol, *address_for_symbol);
}

void Symbol<void (*)(tailspin_config *)>::initialize(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 16);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void Symbol<BOOL (*)(tailspin_config *)>::initialize(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;

  v2 = (unint64_t *)(a1 + 16);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void Symbol<tailspin_config * (*)(void)>::initialize()
{
  unint64_t v0;
  _UNKNOWN **v1;
  _UNKNOWN ****v2;
  _UNKNOWN ***v3;

  v1 = &weak_tailspin_config_create_with_current_state;
  v0 = atomic_load(&qword_1EF12F220);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&qword_1EF12F220, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<tailspin_config * (*)(void)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<tailspin_config * (*)(void)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void Symbol<void (*)(tailspin_config *,unsigned long long)>::operator()<tailspin_config *&,int>(void (**a1)(_QWORD, _QWORD), _QWORD *a2, int *a3)
{
  unint64_t *v6;
  unint64_t v7;
  void (**v8)(_QWORD, _QWORD);
  _QWORD **v9;
  _QWORD *v10;

  v6 = (unint64_t *)(a1 + 2);
  v8 = a1;
  v7 = atomic_load(v6);
  if (v7 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(v6, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long long)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (*a1)
    (*a1)(*a2, *a3);
}

void Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::operator()<tailspin_config *&,int,int,BOOL>(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v8;
  uint64_t (**v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (****v10)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (***v11)(_QWORD, _QWORD, _QWORD, _QWORD);

  v9 = &weak_tailspin_kdbg_filter_subclass_set;
  v8 = atomic_load(&qword_1EF12F280);
  if (v8 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&qword_1EF12F280, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (weak_tailspin_kdbg_filter_subclass_set)
    weak_tailspin_kdbg_filter_subclass_set(*a1, *a2, *a3, *a4);
}

void Symbol<void (*)(tailspin_config *)>::operator()<tailspin_config *&>(void (**a1)(_QWORD), _QWORD *a2)
{
  Symbol<void (*)(tailspin_config *)>::initialize((uint64_t)a1);
  if (*a1)
    (*a1)(*a2);
}

void Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::operator()<tailspin_config *&,int,BOOL>(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  uint64_t (**v7)(_QWORD, _QWORD, _QWORD);
  uint64_t (****v8)(_QWORD, _QWORD, _QWORD);
  uint64_t (***v9)(_QWORD, _QWORD, _QWORD);

  v7 = &weak_tailspin_kdbg_filter_class_set;
  v6 = atomic_load(&qword_1EF12F2C8);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&qword_1EF12F2C8, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (weak_tailspin_kdbg_filter_class_set)
    weak_tailspin_kdbg_filter_class_set(*a1, *a2, *a3);
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,int,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long long)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

void Symbol<void (*)(tailspin_config *,BOOL)>::initialize()
{
  unint64_t v0;
  _UNKNOWN **v1;
  _UNKNOWN ****v2;
  _UNKNOWN ***v3;

  v1 = &weak_tailspin_enabled_set;
  v0 = atomic_load(&qword_1EF12F1F0);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&qword_1EF12F1F0, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *result;

  v1 = **a1;
  v2 = *(_QWORD **)v1;
  result = get_address_for_symbol(*(const char **)(*(_QWORD *)v1 + 8));
  *v2 = result;
  return result;
}

id get_TSPDumpOptions_MaxTimestamp(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&get_TSPDumpOptions_MaxTimestamp(void)::once_flag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MaxTimestamp(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MaxTimestamp(void)::$_0 &&>>);
  }
  return (id)get_TSPDumpOptions_MaxTimestamp(void)::s_symbol;
}

id get_TSPDumpOptions_MinTimestamp(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&get_TSPDumpOptions_MinTimestamp(void)::once_flag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MinTimestamp(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTimestamp(void)::$_0 &&>>);
  }
  return (id)get_TSPDumpOptions_MinTimestamp(void)::s_symbol;
}

id get_TSPDumpOptions_MinTraceBufferDurationSec(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::once_flag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTraceBufferDurationSec(void)::$_0 &&>>);
  }
  return (id)get_TSPDumpOptions_MinTraceBufferDurationSec(void)::s_symbol;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTraceBufferDurationSec(void)::$_0 &&>>()
{
  id *address_for_symbol;

  address_for_symbol = (id *)get_address_for_symbol("TSPDumpOptions_MinTraceBufferDurationSec");
  objc_storeStrong((id *)&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::s_symbol, *address_for_symbol);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTimestamp(void)::$_0 &&>>()
{
  id *address_for_symbol;

  address_for_symbol = (id *)get_address_for_symbol("TSPDumpOptions_MinTimestamp");
  objc_storeStrong((id *)&get_TSPDumpOptions_MinTimestamp(void)::s_symbol, *address_for_symbol);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MaxTimestamp(void)::$_0 &&>>()
{
  id *address_for_symbol;

  address_for_symbol = (id *)get_address_for_symbol("TSPDumpOptions_MaxTimestamp");
  objc_storeStrong((id *)&get_TSPDumpOptions_MaxTimestamp(void)::s_symbol, *address_for_symbol);
}

void ___ZN13HALB_Tailspin17DumpTailspinAsyncEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *__p;
  char v11;
  char v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = __udivti3();
  if (v3 >= v4)
    v6 = v5;
  else
    v6 = -v5;
  if (v6 >= 5000000000)
  {
    *(_QWORD *)(v2 + 8) = v3;
    v7 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HALB_TailspinImpl dumpTailspinSync:forReason:](HALB_TailspinImpl, "dumpTailspinSync:forReason:", v8, v9);
    if (v12)
    {
      if (v11 < 0)
        operator delete(__p);
    }

  }
}

void sub_1B58E7344(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58E7330);
}

void __copy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void System_Core_Graph_Host::~System_Core_Graph_Host(System_Core_Graph_Host *this)
{
  *(_QWORD *)this = &off_1E6972170;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E6972170;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

uint64_t System_Core_Graph_Host::get_broker(System_Core_Graph_Host *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t System_Core_Graph_Host::get_node_proc_owner(System_Core_Graph_Host *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 2656;
}

uint64_t System_Core_Graph_Host::get_current_power_state(System_Core_Graph_Host *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 3064);
}

void System_Core_Graph_Host::create_manifest(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  AMCP::IO_Core::Graph_Manager::create_manifest(a4, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2648), a2, a3);
}

void System_Core_Graph_Host::simple_property_changed_async(System_Core_Graph_Host *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  void (*v13)(uint64_t, const AMCP::Thing *, _QWORD *, _QWORD);
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  void *__p[2];
  void *v21[2];
  int v22;

  *(_OWORD *)__p = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = 1065353216;
  v8 = *(unsigned int *)a3;
  v9 = *((unsigned __int8 *)a3 + 7);
  v10 = *((_DWORD *)a3 + 2);
  v11 = operator new(0x48uLL);
  v12 = (v9 << 24) | (v8 << 32) | *(_QWORD *)&v10 & 0xFFFFFFLL;
  *v11 = 0;
  v11[1] = v12;
  v11[2] = *(_QWORD *)a3;
  *((_DWORD *)v11 + 6) = v10;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  v11[8] = 0;
  v13 = (void (*)(uint64_t, const AMCP::Thing *, _QWORD *, _QWORD))*((_QWORD *)a4 + 4);
  if (v13)
    v13(1, a4, v11 + 4, 0);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, 1uLL);
  v14 = (unint64_t)__p[1];
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    if ((void *)v12 >= __p[1])
      v12 %= (unint64_t)__p[1];
  }
  else
  {
    v12 &= (unint64_t)__p[1] - 1;
  }
  v16 = __p[0];
  v17 = (_QWORD *)*((_QWORD *)__p[0] + v12);
  if (v17)
  {
    *v11 = *v17;
  }
  else
  {
    *v11 = v21[0];
    v21[0] = v11;
    v16[v12] = v21;
    if (!*v11)
      goto LABEL_16;
    v18 = *(_QWORD *)(*v11 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= v14)
        v18 %= v14;
    }
    else
    {
      v18 &= v14 - 1;
    }
    v17 = (char *)__p[0] + 8 * v18;
  }
  *v17 = v11;
LABEL_16:
  ++v21[1];
  AMCP::Core::Conductor::properties_changed_async(*(_QWORD *)(*((_QWORD *)this + 1) + 32), a2, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v21[0]);
  v19 = __p[0];
  __p[0] = 0;
  if (v19)
    operator delete(v19);
}

void sub_1B58E7600(void *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](0, v1);
  __clang_call_terminate(a1);
}

void AMCP::Core::Conductor::properties_changed_async(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  NSObject *v9;
  _DWORD *v10;
  void *v11;
  std::__shared_weak_count *v12[2];
  void *__p[6];
  _QWORD v14[41];

  v14[40] = *MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14, *(dispatch_object_t *)(a1 + 352));
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  v12[0] = *(std::__shared_weak_count **)a1;
  v12[1] = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map((uint64_t)__p, a3);
  v9 = v14[0];
  v10 = (_DWORD *)operator new();
  *(_OWORD *)v10 = *(_OWORD *)v12;
  v10[4] = a2;
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map((uint64_t)(v10 + 6), (uint64_t)__p);
  dispatch_async_f(v9, v10, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)__p[2]);
  v11 = __p[0];
  __p[0] = 0;
  if (v11)
    operator delete(v11);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14);
}

void sub_1B58E7750(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;

  if (a2)
  {
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::dispatch::v1::async<AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  AMCP::Log::Scope_Registry *v7;
  int v8;
  caulk::concurrent::messenger *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  caulk::concurrent::messenger *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  uint64_t v19;
  unint64_t *v20;
  caulk::concurrent::messenger *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  uint64_t v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  AMCP::Log::Scope_Registry *v33;
  AMCP::Log::Scope_Registry *v34;
  int v35;
  caulk::concurrent::messenger *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  caulk::concurrent::messenger *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  caulk::concurrent::messenger *v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  uint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _OWORD v68[2];
  int v69;
  void *v70[2];
  void *v71[2];
  int v72;
  void *v73[5];
  void *v74[2];
  void *v75[2];
  int v76;
  __int128 v77;
  __int128 v78;
  int v79;
  void *v80[2];
  __int128 v81;
  __int128 v82;
  void *v83[5];
  void *v84;
  void *v85;
  void *__p;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    goto LABEL_70;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_70;
  v4 = v3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_DWORD *)(a1 + 16);
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v80, "com.apple.coreaudio", "AMCP");
    v8 = *((_DWORD *)v80[0] + 4);
    switch(v8)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v70, "com.apple.coreaudio", "AMCP");
        v16 = (caulk::concurrent::messenger *)*((_QWORD *)v70[0] + 1);
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v19 + 16) = 0;
        *(_BYTE *)(v19 + 20) = 1;
        *(_DWORD *)(v19 + 24) = v18;
        *(_QWORD *)(v19 + 32) = "Conductor.cpp";
        *(_DWORD *)(v19 + 40) = 464;
        *(_DWORD *)(v19 + 44) = v6;
        *(_QWORD *)v19 = &off_1E69A0940;
        *(_QWORD *)(v19 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v16, (caulk::concurrent::message *)v19);
        v13 = (std::__shared_weak_count *)v70[1];
        if (!v70[1])
          goto LABEL_20;
        v20 = (unint64_t *)((char *)v70[1] + 8);
        do
          v15 = __ldaxr(v20);
        while (__stlxr(v15 - 1, v20));
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v70, "com.apple.coreaudio", "AMCP");
        v21 = (caulk::concurrent::messenger *)*((_QWORD *)v70[0] + 1);
        v22 = pthread_self();
        v23 = pthread_mach_thread_np(v22);
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v24 + 16) = 0;
        *(_BYTE *)(v24 + 20) = 2;
        *(_DWORD *)(v24 + 24) = v23;
        *(_QWORD *)(v24 + 32) = "Conductor.cpp";
        *(_DWORD *)(v24 + 40) = 464;
        *(_DWORD *)(v24 + 44) = v6;
        *(_QWORD *)v24 = &off_1E69A08E8;
        *(_QWORD *)(v24 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v24);
        v13 = (std::__shared_weak_count *)v70[1];
        if (!v70[1])
          goto LABEL_20;
        v25 = (unint64_t *)((char *)v70[1] + 8);
        do
          v15 = __ldaxr(v25);
        while (__stlxr(v15 - 1, v25));
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v70, "com.apple.coreaudio", "AMCP");
        v9 = (caulk::concurrent::messenger *)*((_QWORD *)v70[0] + 1);
        v10 = pthread_self();
        v11 = pthread_mach_thread_np(v10);
        v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v12 + 16) = 0;
        *(_BYTE *)(v12 + 20) = 0;
        *(_DWORD *)(v12 + 24) = v11;
        *(_QWORD *)(v12 + 32) = "Conductor.cpp";
        *(_DWORD *)(v12 + 40) = 464;
        *(_DWORD *)(v12 + 44) = v6;
        *(_QWORD *)v12 = &off_1E69A0890;
        *(_QWORD *)(v12 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v12);
        v13 = (std::__shared_weak_count *)v70[1];
        if (!v70[1])
          goto LABEL_20;
        v14 = (unint64_t *)((char *)v70[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        break;
      default:
        goto LABEL_20;
    }
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_20:
    v26 = (std::__shared_weak_count *)v80[1];
    if (v80[1])
    {
      v27 = (unint64_t *)((char *)v80[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    kdebug_trace();
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)v71 = 0u;
    v72 = 1065353216;
    std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map((uint64_t)v73, a1 + 24);
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)v75 = 0u;
    v77 = 0u;
    v78 = 0u;
    v76 = 1065353216;
    v79 = 1065353216;
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
    LODWORD(v80[0]) = v6;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl((uint64_t)&v80[1], (uint64_t)v70);
    memset(v68, 0, sizeof(v68));
    v69 = 1065353216;
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>((uint64_t)v68, v80[0], v80);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v87);
    v29 = __p;
    __p = 0;
    if (v29)
      operator delete(v29);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v85);
    v30 = v84;
    v84 = 0;
    if (v30)
      operator delete(v30);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v83[2]);
    v31 = v83[0];
    v83[0] = 0;
    if (v31)
      operator delete(v31);
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(*((_QWORD **)&v81 + 1));
    v32 = v80[1];
    v80[1] = 0;
    if (v32)
      operator delete(v32);
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)v80 = 0u;
    std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map((uint64_t)v83, (uint64_t)v68);
    AMCP::Core::Conductor::call_external_begin_config_change_observers(v5, 0, v6, 0, (uint64_t)v80);
    LODWORD(v66) = v6;
    LOBYTE(v64) = 0;
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v5 + 1136, (unsigned int *)&v66, &v66, (char *)&v64, (uint64_t)v80);
    LODWORD(v66) = v6;
    LOBYTE(v64) = 0;
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v5 + 1352, (unsigned int *)&v66, &v66, (char *)&v64, (uint64_t)v80);
    AMCP::Core::Conductor::call_external_end_config_change_observers(v5, v6, 0, (uint64_t)v80);
    v33 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v66, "com.apple.coreaudio", "AMCP");
    v35 = *(_DWORD *)(v66 + 16);
    if (v35 == 3)
    {
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
      v43 = *(caulk::concurrent::messenger **)(v64 + 8);
      v44 = pthread_self();
      v45 = pthread_mach_thread_np(v44);
      v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v46 + 16) = 0;
      *(_BYTE *)(v46 + 20) = 1;
      *(_DWORD *)(v46 + 24) = v45;
      *(_QWORD *)(v46 + 32) = "Conductor.cpp";
      *(_DWORD *)(v46 + 40) = 487;
      *(_DWORD *)(v46 + 44) = v6;
      *(_QWORD *)v46 = &off_1E69A0A48;
      *(_QWORD *)(v46 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v43, (caulk::concurrent::message *)v46);
      v40 = v65;
      if (!v65)
        goto LABEL_49;
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
    }
    else
    {
      if (v35 != 2)
      {
        if (v35 == 1)
        {
          AMCP::Log::Scope_Registry::get(v34);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
          v36 = *(caulk::concurrent::messenger **)(v64 + 8);
          v37 = pthread_self();
          v38 = pthread_mach_thread_np(v37);
          v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
          *(_DWORD *)(v39 + 16) = 0;
          *(_BYTE *)(v39 + 20) = 0;
          *(_DWORD *)(v39 + 24) = v38;
          *(_QWORD *)(v39 + 32) = "Conductor.cpp";
          *(_DWORD *)(v39 + 40) = 487;
          *(_DWORD *)(v39 + 44) = v6;
          *(_QWORD *)v39 = &off_1E69A0998;
          *(_QWORD *)(v39 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v36, (caulk::concurrent::message *)v39);
          v40 = v65;
          if (v65)
          {
            v41 = (unint64_t *)&v65->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            goto LABEL_47;
          }
        }
LABEL_49:
        v53 = v67;
        if (v67)
        {
          v54 = (unint64_t *)&v67->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)v83);
        if (*((_QWORD *)&v81 + 1))
        {
          *(_QWORD *)&v82 = *((_QWORD *)&v81 + 1);
          operator delete(*((void **)&v81 + 1));
        }
        if (v80[0])
        {
          v80[1] = v80[0];
          operator delete(v80[0]);
        }
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)v68);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v78);
        v56 = (void *)v77;
        *(_QWORD *)&v77 = 0;
        if (v56)
          operator delete(v56);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v75[0]);
        v57 = v74[0];
        v74[0] = 0;
        if (v57)
          operator delete(v57);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v73[2]);
        v58 = v73[0];
        v73[0] = 0;
        if (v58)
          operator delete(v58);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v71[0]);
        v59 = v70[0];
        v70[0] = 0;
        if (v59)
          operator delete(v59);
        goto LABEL_66;
      }
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
      v48 = *(caulk::concurrent::messenger **)(v64 + 8);
      v49 = pthread_self();
      v50 = pthread_mach_thread_np(v49);
      v51 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v51 + 16) = 0;
      *(_BYTE *)(v51 + 20) = 2;
      *(_DWORD *)(v51 + 24) = v50;
      *(_QWORD *)(v51 + 32) = "Conductor.cpp";
      *(_DWORD *)(v51 + 40) = 487;
      *(_DWORD *)(v51 + 44) = v6;
      *(_QWORD *)v51 = &off_1E69A09F0;
      *(_QWORD *)(v51 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v48, (caulk::concurrent::message *)v51);
      v40 = v65;
      if (!v65)
        goto LABEL_49;
      v52 = (unint64_t *)&v65->__shared_owners_;
      do
        v42 = __ldaxr(v52);
      while (__stlxr(v42 - 1, v52));
    }
LABEL_47:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_49;
  }
LABEL_66:
  v60 = (unint64_t *)&v4->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_70:
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 24);
  v62 = *(std::__shared_weak_count **)(a1 + 8);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  return MEMORY[0x1B5E50688](a1, 0x10A0C4071FF95D2);
}

void sub_1B58E7FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a39)
      operator delete(a39);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double _ZNSt3__115allocate_sharedB8ne180100IN4AMCP4Core6BrokerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E699BAA0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v2 + 24));
  *((_QWORD *)v2 + 30) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_DWORD *)v2 + 56) = 1065353216;
  *((_DWORD *)v2 + 58) = 16;
  *((_QWORD *)v2 + 31) = 0;
  *((_QWORD *)v2 + 32) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v2 + 264));
  result = 0.0;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  *((_DWORD *)v2 + 116) = 1065353216;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B58E811C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 248) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v3);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 88));
  std::mutex::~mutex(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core11System_Core5startERKNSt3__16vectorINS_2CF9StringRefENS6_9allocatorIS9_EEEESE_E3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  const void ****v1;
  const void ***v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int *v54;
  std::__shared_weak_count *v55;
  unint64_t v56;
  uint64_t (***v57)();
  uint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int *v77;
  unint64_t v78;
  uint64_t (***v79)();
  uint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int *v88;
  unint64_t v89;
  uint64_t (***v90)();
  uint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int *v99;
  unint64_t v100;
  uint64_t (***v101)();
  uint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unsigned int *v110;
  unint64_t v111;
  uint64_t (***v112)();
  uint64_t v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  uint64_t (***v123)();
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unsigned int *v132;
  unint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _QWORD *v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  char **v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  CFTypeRef cf[2];
  void *__p[2];
  __int128 v156;
  int v157;
  __int128 v158[2];
  void (*v159)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v160)();
  std::__shared_weak_count *v161;
  uint64_t *v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v1 = *(const void *****)(a1 + 32);
  v2 = *v1;
  *(_OWORD *)__p = 0u;
  v156 = 0u;
  v157 = 1065353216;
  LODWORD(v160) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v158, 0, (int *)&v160, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  LODWORD(v160) = 1634957683;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v158, 0, (int *)&v160, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  LODWORD(v160) = 1634957683;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v158, 0, (int *)&v160, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v160) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v158, 0, (int *)&v160, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.audio.CoreAudio");
  v160 = (uint64_t (**)())0x676C6F626F706C67;
  LODWORD(v161) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v158, (uint64_t)&v160, cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
  *(_QWORD *)&v158[0] = v2[2];
  DWORD2(v158[0]) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v160, 0, v158, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v18 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "MCP System");
  v160 = (uint64_t (**)())0x676C6F626C6E616DLL;
  LODWORD(v161) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v158, (uint64_t)&v160, cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(_QWORD *)&v158[0] + 40), v158);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
  *(_QWORD *)&v158[0] = v2[2];
  *((_QWORD *)&v158[0] + 1) = 0x61706C6700000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v160, 0, v158, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v24 = v161;
  if (v161)
  {
    v25 = (unint64_t *)&v161->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)&v158[0] = v2[2];
  *(__int128 *)((char *)v158 + 8) = xmmword_1B5D68BA0;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_((uint64_t *)&v160, 0, (uint64_t *)v158, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v27 = v161;
  if (v161)
  {
    v28 = (unint64_t *)&v161->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)&v158[0] = v2[2];
  *(__int128 *)((char *)v158 + 8) = xmmword_1B5D68BB0;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_((uint64_t *)&v160, 0, (uint64_t *)v158, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v30 = v161;
  if (v161)
  {
    v31 = (unint64_t *)&v161->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)&v158[0] = v2[2];
  *(__int128 *)((char *)v158 + 8) = xmmword_1B5D68BC0;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_((uint64_t *)&v160, 0, (uint64_t *)v158, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v33 = v161;
  if (v161)
  {
    v34 = (unint64_t *)&v161->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)&v158[0] = v2[2];
  *((_QWORD *)&v158[0] + 1) = 0x696F636E00000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v160, 0, v158, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v36 = v161;
  if (v161)
  {
    v37 = (unint64_t *)&v161->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)&v158[0] = v2[2];
  *((_QWORD *)&v158[0] + 1) = 0x616E6F6400000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v160, 0, v158, 1.5836601e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v160 + 10, &v160);
  v39 = v161;
  if (v161)
  {
    v40 = (unint64_t *)&v161->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)cf, 0, 1.5836601e190);
  v42 = (unsigned int *)cf[0];
  v43 = (std::__shared_weak_count *)v2[4];
  v44 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
  v160 = &off_1E69724B0;
  v161 = v43;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v42, v44, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v45 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v46 = 4;
    v45 = &v160;
    goto LABEL_76;
  }
  if (v162)
  {
    v46 = 5;
LABEL_76:
    (*v45)[v46]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v42 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.5836601e190);
  v47 = v158[0];
  v158[0] = 0uLL;
  v48 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (unsigned int *)cf[0];
  v55 = (std::__shared_weak_count *)v2[4];
  v56 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
  v160 = &off_1E6972540;
  v161 = v55;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v54, v56, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v57 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v58 = 4;
    v57 = &v160;
    goto LABEL_93;
  }
  if (v162)
  {
    v58 = 5;
LABEL_93:
    (*v57)[v58]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v54 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366008e190);
  v59 = v158[0];
  v158[0] = 0uLL;
  v60 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (unsigned int *)cf[0];
  v67 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
  v160 = &off_1E69725D0;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v66, v67, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v68 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v69 = 4;
    v68 = &v160;
    goto LABEL_110;
  }
  if (v162)
  {
    v69 = 5;
LABEL_110:
    (*v68)[v69]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v66 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366008e190);
  v70 = v158[0];
  v158[0] = 0uLL;
  v71 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v70;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (unsigned int *)cf[0];
  v78 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
  v160 = &off_1E6972660;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v77, v78, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v79 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v80 = 4;
    v79 = &v160;
    goto LABEL_127;
  }
  if (v162)
  {
    v80 = 5;
LABEL_127:
    (*v79)[v80]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v77 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366008e190);
  v81 = v158[0];
  v158[0] = 0uLL;
  v82 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v81;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (unsigned int *)cf[0];
  v89 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
  v160 = &off_1E69726F0;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v88, v89, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v90 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v91 = 4;
    v90 = &v160;
    goto LABEL_144;
  }
  if (v162)
  {
    v91 = 5;
LABEL_144:
    (*v90)[v91]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v88 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366012e190);
  v92 = v158[0];
  v158[0] = 0uLL;
  v93 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v92;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (unsigned int *)cf[0];
  v100 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
  v160 = &off_1E6972780;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v99, v100, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v101 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v102 = 4;
    v101 = &v160;
    goto LABEL_161;
  }
  if (v162)
  {
    v102 = 5;
LABEL_161:
    (*v101)[v102]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v99 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366012e190);
  v103 = v158[0];
  v158[0] = 0uLL;
  v104 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v103;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (unsigned int *)cf[0];
  v111 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
  v160 = &off_1E6972810;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v110, v111, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v112 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v113 = 4;
    v112 = &v160;
    goto LABEL_178;
  }
  if (v162)
  {
    v113 = 5;
LABEL_178:
    (*v112)[v113]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v110 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366008e190);
  v114 = v158[0];
  v158[0] = 0uLL;
  v115 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v114;
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (unsigned int *)cf[0];
  v122 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
  v160 = &off_1E69728A0;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v121, v122, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v123 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v124 = 4;
    v123 = &v160;
    goto LABEL_195;
  }
  if (v162)
  {
    v124 = 5;
LABEL_195:
    (*v123)[v124]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v121 + 10, cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v158, 0, 1.58366013e190);
  v125 = v158[0];
  v158[0] = 0uLL;
  v126 = (std::__shared_weak_count *)cf[1];
  *(_OWORD *)cf = v125;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (unsigned int *)cf[0];
  v133 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  v160 = &off_1E6972930;
  v161 = (std::__shared_weak_count *)v2;
  v162 = (uint64_t *)&v160;
  memset(v158, 0, sizeof(v158));
  v159 = 0;
  std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&v160);
  v159 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v132, v133, (AMCP *)v158);
  if (v159)
    v159(0, (uint64_t)v158, 0, 0);
  v134 = (uint64_t (***)())v162;
  if (v162 == (uint64_t *)&v160)
  {
    v135 = 4;
    v134 = &v160;
    goto LABEL_212;
  }
  if (v162)
  {
    v135 = 5;
LABEL_212:
    (*v134)[v135]();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v132 + 10, cf);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)v158, (std::__shared_mutex_base *)v2[2], (uint64_t)__p, 1);
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v158[0] + 1);
  if (*((_QWORD *)&v158[0] + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v158[0] + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v140 = (unint64_t *)((char *)cf[1] + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v156);
  v142 = __p[0];
  __p[0] = 0;
  if (v142)
    operator delete(v142);
  v143 = operator new(0x30uLL);
  v143[1] = 0;
  v143[2] = 0;
  v143[3] = 0;
  *v143 = &off_1E69722E0;
  v143[4] = 0;
  v143[5] = 0;
  *(_QWORD *)&v144 = v143 + 3;
  *((_QWORD *)&v144 + 1) = v143;
  v145 = (std::__shared_weak_count *)(*v1)[7];
  *((_OWORD *)*v1 + 3) = v144;
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (std::__shared_weak_count *)v1[1];
  v149 = (char **)(*v1)[6];
  *(_QWORD *)&v158[0] = *v1;
  *((_QWORD *)&v158[0] + 1) = v148;
  if (v148)
  {
    v150 = (unint64_t *)&v148->__shared_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
  }
  AMCP::Core::Driver_Manager::load(v149, v158, v1[2], v1[3]);
  if (v148)
  {
    v152 = (unint64_t *)&v148->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
}

void sub_1B58E9418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69722E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69722E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::__on_zero_shared(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  _OWORD v14[2];
  void (*v15)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v8 = *a3;
  v13 = *(_OWORD *)(a3 + 1);
  v9 = operator new(0x20uLL);
  *v9 = &off_1E69723B0;
  v9[1] = v8;
  *((_OWORD *)v9 + 1) = v13;
  v17 = v9;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v16);
  v15 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v14);
  if (v15)
    v15(0, (uint64_t)v14, 0, 0);
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
    goto LABEL_7;
  }
  if (v17)
  {
    v11 = 5;
LABEL_7:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1B58E9934(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[294];
}

uint64_t std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[296];
}

uint64_t std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[298];
}

uint64_t std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[300];
}

uint64_t std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[302];
}

uint64_t std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[304];
}

uint64_t std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[306];
}

uint64_t std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[308];
}

uint64_t std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972930;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::operator()(AMCP::Log::Scope_Registry *a1, int *a2)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  std::__shared_weak_count *v19;
  __int128 v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint8_t buf[8];
  _BYTE v24[10];
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *((_QWORD *)a1 + 1);
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = *(std::__shared_weak_count **)v24;
  v5 = **(NSObject ***)buf;
  if (*(_QWORD *)v24)
  {
    v6 = (unint64_t *)(*(_QWORD *)v24 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v8 = pthread_self();
    v9 = pthread_mach_thread_np(v8);
    std::string::basic_string[abi:ne180100]<0>(__p, off_1E69A1B48[v2]);
    v10 = SHIBYTE(v19) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v9;
    *(_WORD *)v24 = 2080;
    *(_QWORD *)&v24[2] = "System_Core.cpp";
    v25 = 1024;
    v26 = 235;
    v27 = 2080;
    v28 = v10;
    _os_log_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d System::update_power_state: %s", buf, 0x22u);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  v11 = *(_QWORD *)(v3 + 32);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)(v11 + 2648) + 40))(buf, v11 + 2648);
  __p[0] = (void *)(v11 + 2656);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v11 + 2648) + 16))(&__p[1], v11 + 2648);
  LODWORD(v20) = v2;
  *((_QWORD *)&v20 + 1) = v11 + 3064;
  v22 = 0;
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = &off_1E6976E40;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)__p;
  *((_QWORD *)v12 + 3) = v19;
  __p[1] = 0;
  v19 = 0;
  *((_OWORD *)v12 + 2) = v20;
  v22 = v12;
  AMCP::IO_Core::exception_safe_dispatch(*(NSObject **)buf, (uint64_t)v21);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
    goto LABEL_16;
  }
  if (v22)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
}

void sub_1B58EAE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list v7;
  va_list v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, va_list);
  v9 = v17;
  if (v17 == v7)
  {
    v10 = 4;
    va_copy(v9, va);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_6:
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69728A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69728A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const std::string *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const std::string *v33;
  unint64_t *v34;
  unint64_t v35;
  int16x8_t v36;
  std::string *v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v43;
  void *v44[2];
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *__p[2];
  uint64_t v49;
  uint64_t v50;
  int v51;
  std::string v52[2];
  _BYTE v53[15];
  _BYTE v54[32];
  void *v55[2];
  __int128 v56;
  __int128 v57;
  void *v58[2];
  void *v59[2];
  __int128 v60;
  int32x4_t v61;
  _QWORD v62[2];
  uint64_t v63;
  std::__shared_weak_count *v64;
  int v65;
  _DWORD v66[9];
  char *v67;
  char *v68;
  unsigned __int8 **v69[5];

  *(_OWORD *)v44 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = *(_DWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v51 = *(_DWORD *)(a2 + 72);
  v49 = v6;
  v50 = v7;
  *(_OWORD *)__p = v5;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2712);
  v45 = v3;
  v46 = v4;
  AMCP::Graph::Wire_Index::get_wires_for_terminal(&v67, v8, (unsigned __int8 **)v44);
  v9 = v68;
  v43 = v67;
  if (v67 == v68)
  {
LABEL_14:
    v13 = v43;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    if (!v43)
      goto LABEL_16;
    goto LABEL_15;
  }
  v10 = v67;
  while (1)
  {
    v11 = *(_QWORD *)v10;
    if (*(char *)(*(_QWORD *)v10 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
    }
    else
    {
      *(_OWORD *)v54 = *(_OWORD *)(v11 + 40);
      *(_QWORD *)&v54[16] = *(_QWORD *)(v11 + 56);
    }
    *(_QWORD *)&v54[24] = *(_QWORD *)(v11 + 64);
    LODWORD(v55[0]) = *(_DWORD *)(v11 + 72);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v52[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v54[24];
    v52[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
    v69[0] = (unsigned __int8 **)__p;
    v69[1] = (unsigned __int8 **)&v50;
    v69[2] = (unsigned __int8 **)&v51;
    if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v52, v69))
    {
      if ((v54[23] & 0x80000000) != 0)
        operator delete(*(void **)v54);
      goto LABEL_13;
    }
    v12 = *(unsigned __int8 *)(v11 + 408);
    if ((v54[23] & 0x80000000) != 0)
      operator delete(*(void **)v54);
    if (v12)
      break;
LABEL_13:
    v10 += 8;
    if (v10 == v9)
      goto LABEL_14;
  }
  if (*(_BYTE *)(v11 + 408))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)v54, (const AMCP::Graph::Graph_Wire::Connection *)(v11 + 192));
  }
  else
  {
    LODWORD(v62[0]) = 0;
    v60 = 0u;
    v61 = 0u;
    *(_OWORD *)v58 = 0u;
    *(_OWORD *)v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)v55 = 0u;
    memset(v54, 0, sizeof(v54));
    *(_QWORD *)((char *)v62 + 4) = 64;
    v63 = 0;
    v64 = 0;
    v65 = 1;
    memset(v66, 0, sizeof(v66));
  }
  *(_QWORD *)v53 = 0;
  memset(v52, 0, sizeof(v52));
  *(_DWORD *)&v53[8] = 64;
  *(_WORD *)&v53[12] = 0;
  v53[14] = 0;
  v14 = *(_QWORD *)(v11 + 416);
  v15 = *(std::__shared_weak_count **)(v11 + 424);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
      if (!v14)
        goto LABEL_42;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v14)
        goto LABEL_42;
    }
    v14 = *(_QWORD *)(v11 + 416);
    v19 = *(std::__shared_weak_count **)(v11 + 424);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    if (!v14)
      goto LABEL_42;
    v19 = 0;
  }
  v22 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  std::string::operator=(v52, v22);
  if (v19)
  {
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_42:
  v25 = *(_QWORD *)(v11 + 432);
  v26 = *(std::__shared_weak_count **)(v11 + 440);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (v29)
    {
      if (!v25)
        goto LABEL_60;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v25)
        goto LABEL_60;
    }
    v25 = *(_QWORD *)(v11 + 432);
    v30 = *(std::__shared_weak_count **)(v11 + 440);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    if (!v25)
      goto LABEL_60;
    v30 = 0;
  }
  v33 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  std::string::operator=(v52, v33);
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_60:
  v36 = (int16x8_t)vtstq_s32(v61, v61);
  *(int8x8_t *)v36.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v36), (int8x8_t)0x1000100010001);
  *(_DWORD *)v53 = vmovn_s16(v36).u32[0];
  *(_QWORD *)&v53[4] = v62[0];
  v53[12] = v59[1] != (void *)v60;
  v53[13] = v63 != 0;
  v53[14] = *(_QWORD *)&v66[3] != *(_QWORD *)&v66[5];
  if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)a3, v52[0].__r_.__value_.__l.__data_, v52[0].__r_.__value_.__l.__size_);
  else
    *(std::string *)a3 = v52[0];
  v37 = (std::string *)(a3 + 24);
  if (SHIBYTE(v52[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v37, v52[1].__r_.__value_.__l.__data_, v52[1].__r_.__value_.__l.__size_);
    v38 = SHIBYTE(v52[1].__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)v53;
    *(_QWORD *)(a3 + 55) = *(_QWORD *)&v53[7];
    *(_BYTE *)(a3 + 64) = 1;
    if (v38 < 0)
      operator delete(v52[1].__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&v52[1].__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 40) = *((_QWORD *)&v52[1].__r_.__value_.__l + 2);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)v53;
    *(_QWORD *)(a3 + 55) = *(_QWORD *)&v53[7];
    *(_BYTE *)(a3 + 64) = 1;
  }
  if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52[0].__r_.__value_.__l.__data_);
  if (*(_QWORD *)&v66[3])
  {
    *(_QWORD *)&v66[5] = *(_QWORD *)&v66[3];
    operator delete(*(void **)&v66[3]);
  }
  v39 = v64;
  if (v64)
  {
    v40 = (unint64_t *)&v64->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v59[1])
  {
    *(void **)&v60 = v59[1];
    operator delete(v59[1]);
  }
  if (SHIBYTE(v59[0]) < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[1]);
  if ((v54[23] & 0x80000000) != 0)
    operator delete(*(void **)v54);
  v13 = v67;
  if (v67)
LABEL_15:
    operator delete(v13);
LABEL_16:
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
}

void sub_1B58EB4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  std::__shared_weak_count *a71;
  void *a72;
  uint64_t v72;
  uint64_t v73;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;

  if (*(char *)(v72 + 23) < 0)
    operator delete(*a9);
  if (a38 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a72)
    operator delete(a72);
  if (a71)
  {
    p_shared_owners = (unint64_t *)&a71->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))a71->__on_zero_shared)(a71);
      std::__shared_weak_count::__release_weak(a71);
    }
  }
  if (a63)
    operator delete(a63);
  if (a62 < 0)
    operator delete(a57);
  if (a54 < 0)
    operator delete(a49);
  if (a46 < 0)
    operator delete(a41);
  v77 = *(void **)(v73 - 144);
  if (v77)
    operator delete(v77);
  if (a24 < 0)
    operator delete(a19);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972810;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972810;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::operator()(uint64_t a1, unsigned __int8 **a2, int *a3, __int128 *a4, __int128 *a5)
{
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v5 = *a3;
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  v21 = a4[3];
  v14 = *a5;
  v15 = a5[1];
  v16 = a5[2];
  v17 = a5[3];
  v6 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2792), a2);
  if (v6)
  {
    v7 = v6;
    v8 = v6[12];
    v9 = (std::__shared_weak_count *)v7[13];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8)
    {
      v22 = v5;
      v23 = v18;
      v24 = v19;
      v25 = v20;
      v26 = v21;
      v27 = v14;
      v28 = v15;
      v29 = v16;
      v30 = v17;
      v33 = 0;
      v31 = 0;
      v32 = 0;
      caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v8, (__int128 *)&v22);
    }
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972780;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::operator()(uint64_t a1, unsigned __int8 **a2, int *a3, __int128 *a4)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v4 = *a3;
  v13 = *a4;
  v14 = a4[1];
  v15 = a4[2];
  v16 = a4[3];
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2792), a2);
  if (v5)
  {
    v6 = v5;
    v7 = v5[12];
    v8 = (std::__shared_weak_count *)v6[13];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7)
    {
      v17 = v4;
      v18 = v13;
      v19 = v14;
      v20 = v15;
      v21 = v16;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0;
      caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v7, (__int128 *)&v17);
    }
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69726F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69726F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, AMCP::IO_Core::Graph_Manager *a3@<X8>)
{
  AMCP::IO_Core::Graph_Manager::get_wires_for_node(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2648, *a2);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972660;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  NSObject *v8[41];

  v8[40] = *(NSObject **)MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  (*(void (**)(NSObject **__return_ptr, uint64_t))(*(_QWORD *)(v3 + 2648) + 40))(v8, v3 + 2648);
  v6[0] = &off_1E6976D40;
  v6[1] = v3 + 2656;
  v6[2] = a2;
  v7 = v6;
  AMCP::IO_Core::exception_safe_dispatch(v8[0], (uint64_t)v6);
  v4 = v7;
  if (v7 == v6)
  {
    v5 = 4;
    v4 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v8);
}

void sub_1B58EBC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v4 = (va_list)v10;
  if (v10 == (_QWORD *)va)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69725D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69725D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t node_id;
  CFTypeRef cf;

  cf = *a2;
  *a2 = 0;
  node_id = AMCP::IO_Core::Graph_Manager::get_node_id((AMCP::IO_Core::Graph_Manager *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 2648), (const applesauce::CF::StringRef *)&cf);
  if (cf)
    CFRelease(cf);
  return node_id;
}

void sub_1B58EBD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972540;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972540;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  CFTypeRef cf;
  unsigned __int8 v9;
  _BYTE v10[24];
  _BYTE *v11;
  NSObject *v12[41];

  v12[40] = *(NSObject **)MEMORY[0x1E0C80C00];
  cf = *a2;
  *a2 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  (*(void (**)(NSObject **__return_ptr, uint64_t))(*(_QWORD *)(v2 + 2648) + 40))(v12, v2 + 2648);
  v3 = operator new(0x20uLL);
  *v3 = &off_1E6976C40;
  v3[1] = v2 + 2656;
  v3[2] = &cf;
  v3[3] = &v9;
  v11 = v3;
  AMCP::IO_Core::exception_safe_dispatch(v12[0], (uint64_t)v10);
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
  v6 = v9;
  if (cf)
    CFRelease(cf);
  return v6 != 0;
}

void sub_1B58EBF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::target_type()
{
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69724B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69724B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::operator()(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void **v15;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = *(__int128 *)((char *)a2 + 24);
  v14 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v7 = *a3;
  v8 = *((_QWORD *)a3 + 2);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v9 = *(__int128 *)((char *)a3 + 24);
  v5 = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  v6 = *(_QWORD *)(a1 + 8) + 2648;
  v10 = v5;
  AMCP::IO_Core::Graph_Manager::modify_graph(a4, v6, (uint64_t)&v11, (uint64_t)&v7);
  v15 = (void **)&v9;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)&v13;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)&v11;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1B58EC130(void *a1)
{
  _BYTE *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B58EC0E8);
}

void sub_1B58EC144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 56) = v16;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(_QWORD *)(v17 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(_QWORD *)(v17 - 56) = v15;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(_QWORD *)(v17 - 56) = &a15;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::target_type()
{
}

void std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(uint64_t a1)
{
  uint64_t i;
  void **v3;

  for (i = 96; i != 48; i -= 24)
  {
    v3 = (void **)(a1 + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE7__cloneEv(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  __n128 result;

  v2 = (__n128 *)operator new(0x20uLL);
  v3 = a1->n128_u64[1];
  v2->n128_u64[0] = (unint64_t)&off_1E69723B0;
  v2->n128_u64[1] = v3;
  result = a1[1];
  v2[1] = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE7__cloneEPNS0_6__baseISR_EE(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&off_1E69723B0;
  a2->n128_u64[1] = v2;
  result = a1[1];
  a2[1] = result;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEEclEv@<X0>(uint64_t a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  std::__shared_mutex_base *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_mutex_base **)(a1 + 8);
  v5[0] = &off_1E6972420;
  v5[1] = a1 + 16;
  v5[2] = a1 + 28;
  v6 = v5;
  AMCP::Core::Broker::fetch_object_ids_if (a2, v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESB_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESB_RKT_DpRKT0_EUlvE_;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6972420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6972420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(*a2, *(const AMCP::Address **)(a1 + 8), *(_DWORD **)(a1 + 16));
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSH_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSH_E_;
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6972270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6972270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::__on_zero_shared(uint64_t a1)
{
  AMCP::DAL *v2;
  std::__shared_weak_count *v3;
  void **v4;

  AMCP::Core::Conductor::flush_work_queues((dispatch_object_t *)(a1 + 24));
  AMCP::DAL::get_timestamp_writer_queue(v2);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)AMCP::DAL::get_timestamp_writer_queue(void)::s_timestamp_writer_queue);
  *(_QWORD *)(a1 + 2672) = &off_1E69A00F8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 3104);
  AMCP::IO_Core::Graph_Manager::~Graph_Manager((AMCP::IO_Core::Graph_Manager *)(a1 + 2672));
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2456);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2240);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2024);
  AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1808);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1592);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1376);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1160);
  v4 = (void **)(a1 + 1128);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1080));
  std::mutex::~mutex((std::mutex *)(a1 + 1016));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 696));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 376));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 56));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph10Graph_HostEE27__shared_ptr_default_deleteIS3_22System_Core_Graph_HostEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699BAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699BAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 448);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v4)
    operator delete(v4);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 376));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 328));
  std::mutex::~mutex((std::mutex *)(a1 + 264));
  v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(_QWORD *)(a1 + 248) = v5;
    operator delete(v5);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(a1 + 192);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69721D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69721D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::__on_zero_shared(uint64_t a1)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject *v10;
  os_log_type_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v31, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v31 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v34;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v14 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "System_Core.cpp";
        v35 = 1024;
        v36 = 65;
        v10 = v13;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v34;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v20 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v29 = pthread_self();
        v30 = pthread_mach_thread_np(v29);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "System_Core.cpp";
        v35 = 1024;
        v36 = 65;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Destroying System_Core", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v34;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v6 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "System_Core.cpp";
        v35 = 1024;
        v36 = 65;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v10, v11, "%6u %32s:%-5d Destroying System_Core", buf, 0x18u);
      }
      break;
  }
  v22 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 88);
  v25 = *(std::__shared_weak_count **)(a1 + 80);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  v28 = *(std::__shared_weak_count **)(a1 + 32);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
}

void sub_1B58ECD18(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6972330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6972330;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_mutex_base *v10;
  _QWORD *v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  std::vector<unsigned int> v19;
  std::vector<unsigned int> v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 8);
  v2 = (uint64_t **)v1[6];
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      v5 = *v3;
      v3 += 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
    while (v3 != v4);
    v6 = *v2;
    v3 = v2[1];
    if (v3 != *v2)
    {
      do
      {
        v3 -= 2;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v3);
      }
      while (v3 != v6);
      v3 = v6;
    }
  }
  v2[1] = v3;
  v7 = (std::__shared_weak_count *)v1[7];
  v1[6] = 0;
  v1[7] = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_mutex_base *)v1[2];
  v21[0] = &off_1E6974E38;
  v22 = v21;
  AMCP::Core::Broker::fetch_object_ids_if (&v20, v10, (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  begin = v20.__begin_;
  end = v20.__end_;
  if (v20.__begin_ != v20.__end_)
  {
    while (1)
    {
      v15 = begin;
      do
      {
        v16 = *v15++;
        AMCP::Core::Broker::destroy_core(v10, v16);
      }
      while (v15 != end);
      v21[0] = &off_1E6974EB8;
      v22 = v21;
      AMCP::Core::Broker::fetch_object_ids_if (&v19, v10, (uint64_t)v21);
      if (begin)
        operator delete(begin);
      v17 = v22;
      begin = v19.__begin_;
      end = v19.__end_;
      if (v22 == v21)
        break;
      if (v22)
      {
        v18 = 5;
LABEL_25:
        (*(void (**)(void))(*v17 + 8 * v18))();
      }
      if (begin == end)
        goto LABEL_27;
    }
    v17 = v21;
    v18 = 4;
    goto LABEL_25;
  }
LABEL_27:
  if (begin)
    operator delete(begin);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core4stopEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::target_type()
{
}

void Testing_TCC_And_Input_Status_Handler::~Testing_TCC_And_Input_Status_Handler(Testing_TCC_And_Input_Status_Handler *this)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((Testing_TCC_And_Input_Status_Handler *)((char *)this + 8));
}

{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((Testing_TCC_And_Input_Status_Handler *)((char *)this + 8));
  JUMPOUT(0x1B5E50688);
}

uint64_t *Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a3;
  v5 = v15;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  v6 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v6 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  v7 = *(NSObject **)(a1 + 8);
  v8 = (_DWORD *)operator new();
  *(_QWORD *)v8 = v13;
  v8[2] = v14;
  v9 = (uint64_t)v16;
  if (!v16)
    goto LABEL_6;
  if (v16 != v15)
  {
    v9 = (*(uint64_t (**)(void))(*v16 + 16))();
LABEL_6:
    *((_QWORD *)v8 + 5) = v9;
    goto LABEL_8;
  }
  *((_QWORD *)v8 + 5) = v8 + 4;
  (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
LABEL_8:
  v12 = 0;
  dispatch_async_f(v7, v8, (dispatch_function_t)applesauce::dispatch::v1::async<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &>(dispatch_queue_s *,Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &)::{lambda(void *)#1}::__invoke);
  result = std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v12);
  if (v16 == v15)
  {
    v11 = 4;
  }
  else
  {
    if (!v16)
      return result;
    v11 = 5;
    v5 = v16;
  }
  return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v11))(v5);
}

void sub_1B58ED15C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t Testing_TCC_And_Input_Status_Handler::CheckTCCQuiet(Testing_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  *((_BYTE *)this + 328) = 0;
  return 1;
}

uint64_t Testing_TCC_And_Input_Status_Handler::CheckTCC(Testing_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 0;
}

uint64_t Testing_TCC_And_Input_Status_Handler::ShouldOverrideRecordingIndicatorSuppressionEntitlement(Testing_TCC_And_Input_Status_Handler *this)
{
  return byte_1EF12F31A | 0x100u;
}

uint64_t Testing_TCC_And_Input_Status_Handler::ShouldOverrideInterprocessTapEntitlement(Testing_TCC_And_Input_Status_Handler *this)
{
  return byte_1EF12F31B | 0x100u;
}

void Testing_TCC_And_Input_Status_Handler::set_test_state(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 v3;
  _QWORD v4[5];
  char v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN36Testing_TCC_And_Input_Status_Handler14set_test_stateEN28TCC_And_Input_Status_Handler10Test_StateE_block_invoke;
  v4[3] = &__block_descriptor_tmp_2_2152;
  v4[4] = a2;
  v5 = a3;
  v3 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), v4);
}

uint64_t Testing_TCC_And_Input_Status_Handler::get_test_state(Testing_TCC_And_Input_Status_Handler *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  __int16 v10;
  _DWORD v11[3];

  v5 = 0;
  v6 = &v5;
  v7 = 0x3802000000;
  v8 = __Block_byref_object_copy__2149;
  v9 = __Block_byref_object_dispose__2150;
  v10 = 257;
  v11[0] = 0;
  *(_DWORD *)((char *)v11 + 3) = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK36Testing_TCC_And_Input_Status_Handler14get_test_stateEv_block_invoke;
  v4[3] = &unk_1E6972A58;
  v4[4] = &v5;
  v1 = atomic_load((unsigned __int8 *)this + 40);
  if ((v1 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)this + 41);
  dispatch_sync(*((dispatch_queue_t *)this + 1), v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void Testing_TCC_And_Input_Status_Handler::ReportRecordingStateToSystemStatus(uint64_t a1, uint64_t a2, int a3, char a4)
{
  unsigned __int8 v4;
  _QWORD v5[5];
  int v6;
  char v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK36Testing_TCC_And_Input_Status_Handler34ReportRecordingStateToSystemStatusERK13audit_token_tN28TCC_And_Input_Status_Handler19RecordingStatusTypeEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_2147;
  v5[4] = a1;
  v6 = a3;
  v7 = a4;
  v4 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v4 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  dispatch_async(*(dispatch_queue_t *)(a1 + 8), v5);
}

uint64_t ___ZNK36Testing_TCC_And_Input_Status_Handler34ReportRecordingStateToSystemStatusERK13audit_token_tN28TCC_And_Input_Status_Handler19RecordingStatusTypeEb_block_invoke(uint64_t result)
{
  int v1;
  char *v2;

  v1 = *(_DWORD *)(result + 40);
  if (v1)
  {
    if (v1 != 1)
      return result;
    v2 = &byte_1EF12F320;
  }
  else
  {
    v2 = &byte_1EF12F31F;
  }
  *v2 = *(_BYTE *)(result + 44);
  return result;
}

uint64_t __Block_byref_object_copy__2149(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK36Testing_TCC_And_Input_Status_Handler14get_test_stateEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_QWORD *)(v1 + 40) = Testing_TCC_And_Input_Status_Handler::g_current_test_state;
  *(_BYTE *)(v1 + 48) = byte_1EF12F320;
  return result;
}

uint64_t ___ZN36Testing_TCC_And_Input_Status_Handler14set_test_stateEN28TCC_And_Input_Status_Handler10Test_StateE_block_invoke(uint64_t result)
{
  Testing_TCC_And_Input_Status_Handler::g_current_test_state = *(_QWORD *)(result + 32);
  byte_1EF12F320 = *(_BYTE *)(result + 40);
  return result;
}

uint64_t *applesauce::dispatch::v1::async<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &>(dispatch_queue_s *,Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  char *v5;
  uint64_t v7;

  v7 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    v5 = &byte_1EF12F31F;
    goto LABEL_6;
  }
  if (v4 == 1)
  {
    v5 = &byte_1EF12F320;
LABEL_6:
    *v5 = v3;
  }
  return std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v7);
}

void sub_1B58ED448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 40);
    if (v3 == (_QWORD *)(v2 + 16))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 16);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x1B5E50688](v2, 0x1060C4067D9AA7CLL);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t TCC_And_Input_Status_Handler::get_test_state(TCC_And_Input_Status_Handler *this)
{
  return 257;
}

void embedded_TCC_And_Input_Status_Handler::~embedded_TCC_And_Input_Status_Handler(embedded_TCC_And_Input_Status_Handler *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t embedded_TCC_And_Input_Status_Handler::CheckTCCQuiet(embedded_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 0;
}

uint64_t embedded_TCC_And_Input_Status_Handler::CheckTCC(embedded_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 1;
}

uint64_t embedded_TCC_And_Input_Status_Handler::ShouldOverrideRecordingIndicatorSuppressionEntitlement(embedded_TCC_And_Input_Status_Handler *this)
{
  return 0;
}

uint64_t embedded_TCC_And_Input_Status_Handler::ShouldOverrideInterprocessTapEntitlement(embedded_TCC_And_Input_Status_Handler *this)
{
  return 0;
}

void Testing_TCC_And_Input_Status_Handler::Testing_TCC_And_Input_Status_Handler(Testing_TCC_And_Input_Status_Handler *this)
{
  dispatch_object_t object[41];

  object[40] = *(dispatch_object_t *)MEMORY[0x1E0C80C00];
  Testing_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler = (uint64_t)&off_1E69729C0;
  qword_1EF12F9D0 = 0;
  unk_1EF12F9D8 = 0;
  unk_1EF12F9B8 = 0u;
  word_1EF12F9C8 = 0;
  xmmword_1EF12F9A8 = 0u;
  qword_1EF12F9E0 = 0;
  unk_1EF12F9E8 = 850045863;
  xmmword_1EF12F9F0 = 0u;
  unk_1EF12FA00 = 0u;
  xmmword_1EF12FA10 = 0u;
  unk_1EF12FA20 = 0u;
  xmmword_1EF12FA30 = 0u;
  qword_1EF12FA40 = 850045863;
  unk_1EF12FA48 = 0u;
  unk_1EF12FA58 = 0u;
  unk_1EF12FA68 = 0u;
  unk_1EF12FA78 = 0u;
  unk_1EF12FA88 = 0u;
  qword_1EF12FA98 = 850045863;
  xmmword_1EF12FAA0 = 0u;
  unk_1EF12FAB0 = 0u;
  xmmword_1EF12FAC0 = 0u;
  unk_1EF12FAD0 = 0u;
  qword_1EF12FAE0 = (uint64_t)dispatch_semaphore_create(0);
  byte_1EF12FAE8 = 0;
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "HAL Test System Status Queue");
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)&xmmword_1EF12F9A8, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
}

void ADS::LevelControl::~LevelControl(ADS::LevelControl *this)
{
  ADS::LevelControl::~LevelControl(this);
  JUMPOUT(0x1B5E50688);
}

{
  *(_QWORD *)this = off_1E6972AC8;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 21));
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

BOOL ADS::LevelControl::HasProperty(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v6;
  int v7;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1818453105)
  {
    v6 = mSelector == 1667591277;
    v7 = 1668506480;
  }
  else
  {
    v6 = mSelector - 1818453106 <= 4 && ((1 << (mSelector - 114)) & 0x13) != 0 || mSelector == 1818456932;
    v7 = 1818456950;
  }
  return v6 || mSelector == v7 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::LevelControl::IsPropertySettable(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4;
  AudioObjectPropertySelector mSelector;

  v4 = 0;
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1818453109)
  {
    if (mSelector - 1818453106 >= 2 && mSelector != 1667591277 && mSelector != 1668506480)
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    return v4;
  }
  switch(mSelector)
  {
    case 0x6C637376u:
      return 1;
    case 0x6C637364u:
      return v4;
    case 0x6C636476u:
      return 1;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::LevelControl::GetPropertyDataSize(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector;
  uint64_t v7;
  BOOL v8;
  unsigned __int16 v9;
  int v11;

  mSelector = a4->mSelector;
  v7 = 4;
  if ((int)a4->mSelector > 1818453106)
  {
    if (mSelector > 1818456931)
    {
      v8 = mSelector == 1818456932;
      v9 = 29558;
    }
    else
    {
      v8 = mSelector == 1818453107;
      v9 = 25718;
    }
    v11 = v9 | 0x6C630000;
    if (!v8 && mSelector != v11)
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    return v7;
  }
  if (mSelector == 1667591277 || mSelector == 1668506480)
    return v7;
  if (mSelector == 1818453106)
    return 16;
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::LevelControl::GetPropertyData(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, double *a9)
{
  AudioObjectPropertySelector mSelector;
  int *v12;
  int v13;
  float v14;
  float MaximumDB;
  float v16;
  int v17;
  int v18;
  CAVolumeCurve *v19;
  int v20;
  float v21;
  CAVolumeCurve *v22;
  double v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *exception;
  _DWORD *v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1818453109)
  {
    if (mSelector == 1818453106)
    {
      if (a7 <= 0xF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v31 = 136315394;
          v32 = "ADS_LevelControl.cpp";
          v33 = 1024;
          v34 = 137;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelRange for the volume control", (uint8_t *)&v31, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v22 = (ADS::LevelControl *)((char *)this + 152);
      if (*((_QWORD *)this + 22))
        v23 = *(float *)(*((_QWORD *)this + 20) + 36);
      else
        v23 = 0.0;
      *a9 = v23;
      a9[1] = CAVolumeCurve::GetMaximumDB(v22);
      v24 = 16;
      goto LABEL_31;
    }
    if (mSelector != 1818453107)
      goto LABEL_21;
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v31 = 136315394;
        v32 = "ADS_LevelControl.cpp";
        v33 = 1024;
        v34 = 160;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyConvertDecibelsToScalar for the volume control", (uint8_t *)&v31, 0x12u);
      }
      v30 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v30 = &off_1E69A1B30;
      v30[2] = 561211770;
    }
    v14 = *(float *)a9;
    MaximumDB = CAVolumeCurve::GetMaximumDB((ADS::LevelControl *)((char *)this + 152));
    if (*((_QWORD *)this + 22))
      v16 = *(float *)(*((_QWORD *)this + 20) + 36);
    else
      v16 = 0.0;
    if (v16 < v14)
      v16 = v14;
    if (v16 < MaximumDB)
      MaximumDB = v16;
    v25 = CAVolumeCurve::ConvertDBToRaw((ADS::LevelControl *)((char *)this + 152), MaximumDB);
    v21 = CAVolumeCurve::ConvertRawToScalar((ADS::LevelControl *)((char *)this + 152), v25);
LABEL_30:
    *(float *)a9 = v21;
    v24 = 4;
LABEL_31:
    *a8 = v24;
    return;
  }
  if (mSelector == 1818453110)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v31 = 136315394;
        v32 = "ADS_LevelControl.cpp";
        v33 = 1024;
        v34 = 128;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelValue for the volume control", (uint8_t *)&v31, 0x12u);
      }
      v26 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v26 = &off_1E69A1B30;
      v26[2] = 561211770;
    }
    v12 = (int *)((char *)this + 56);
    v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    CAVolumeCurve::ConvertRawToDB((CAVolumeCurve *)(v12 + 24), v12[22]);
    *(_DWORD *)a9 = v18;
    *a8 = 4;
    if (v17)
      goto LABEL_7;
    return;
  }
  if (mSelector == 1818456932)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v31 = 136315394;
        v32 = "ADS_LevelControl.cpp";
        v33 = 1024;
        v34 = 145;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelValue for the volume control", (uint8_t *)&v31, 0x12u);
      }
      v27 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v27 = &off_1E69A1B30;
      v27[2] = 561211770;
    }
    v19 = (ADS::LevelControl *)((char *)this + 152);
    v20 = CAVolumeCurve::ConvertScalarToRaw((ADS::LevelControl *)((char *)this + 152), fminf(fmaxf(*(float *)a9, 0.0), 1.0));
    CAVolumeCurve::ConvertRawToDB(v19, v20);
    goto LABEL_30;
  }
  if (mSelector != 1818456950)
  {
LABEL_21:
    ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, (char *)a9);
    return;
  }
  if (a7 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v31 = 136315394;
      v32 = "ADS_LevelControl.cpp";
      v33 = 1024;
      v34 = 118;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyScalarValue for the volume control", (uint8_t *)&v31, 0x12u);
    }
    v28 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v28 = &off_1E69A1B30;
    v28[2] = 561211770;
  }
  v12 = (int *)((char *)this + 56);
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
  *(float *)a9 = CAVolumeCurve::ConvertRawToScalar((CAVolumeCurve *)(v12 + 24), v12[22]);
  *a8 = 4;
  if (v13)
LABEL_7:
    (*(void (**)(int *))(*(_QWORD *)v12 + 24))(v12);
}

void sub_1B58EDD58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::LevelControl::SetPropertyData(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  float v13;
  _DWORD *v14;
  int v15;
  int v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  CAVolumeCurve *v20;
  float MaximumDB;
  float v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  int v31;
  int v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  _DWORD *exception;
  int v52;
  const char *v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 == 1818453110)
  {
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v52 = 136315394;
        v53 = "ADS_LevelControl.cpp";
        v54 = 1024;
        v55 = 204;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::SetPropertyData: wrong size for the data for kAudioLevelControlPropertyDecibelValue", (uint8_t *)&v52, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v20 = (CAVolumeCurve *)(a1 + 19);
    MaximumDB = CAVolumeCurve::GetMaximumDB((CAVolumeCurve *)(a1 + 19));
    if (a1[22])
      v22 = *(float *)(a1[20] + 36);
    else
      v22 = 0.0;
    if (v22 < *a8)
      v22 = *a8;
    if (v22 >= MaximumDB)
      v29 = MaximumDB;
    else
      v29 = v22;
    v30 = a1[7];
    v14 = a1 + 7;
    v31 = (*(uint64_t (**)(_DWORD *))(v30 + 16))(v14);
    v14[22] = CAVolumeCurve::ConvertDBToRaw(v20, v29);
    *a9 = 1;
    v32 = *(v14 - 1);
    v33 = (_DWORD *)a10[1];
    v34 = a10[2];
    if ((unint64_t)v33 >= v34)
    {
      v36 = 0x1555555555555555;
      v37 = (_DWORD *)*a10;
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v33 - *a10) >> 2);
      v39 = v38 + 1;
      if (v38 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v37) >> 2);
      if (2 * v40 > v39)
        v39 = 2 * v40;
      if (v40 < 0xAAAAAAAAAAAAAAALL)
        v36 = v39;
      if (v36)
      {
        v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v36);
        v37 = (_DWORD *)*a10;
        v33 = (_DWORD *)a10[1];
      }
      else
      {
        v41 = 0;
      }
      v46 = (_DWORD *)(v36 + 12 * v38);
      v47 = v36 + 12 * v41;
      *v46 = 1818453110;
      v46[1] = v32;
      v46[2] = 0;
      v35 = v46 + 3;
      if (v33 != v37)
      {
        do
        {
          v48 = *(_QWORD *)(v33 - 3);
          v33 -= 3;
          v49 = v33[2];
          *(_QWORD *)(v46 - 3) = v48;
          v46 -= 3;
          v46[2] = v49;
        }
        while (v33 != v37);
        v37 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v46;
      a10[1] = (unint64_t)v35;
      a10[2] = v47;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *v33 = 1818453110;
      v33[1] = v32;
      v33[2] = 0;
      v35 = v33 + 3;
    }
    a10[1] = (unint64_t)v35;
    if (v31)
LABEL_47:
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
  }
  else
  {
    if (*(_DWORD *)a4 != 1818456950)
    {
      ADS::BaseObject::SetPropertyData((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
      return;
    }
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v52 = 136315394;
        v53 = "ADS_LevelControl.cpp";
        v54 = 1024;
        v55 = 188;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::SetPropertyData: wrong size for the data for kAudioLevelControlPropertyScalarValue", (uint8_t *)&v52, 0x12u);
      }
      v50 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v50 = &off_1E69A1B30;
      v50[2] = 561211770;
    }
    v13 = *a8;
    v14 = a1 + 7;
    v15 = (*(uint64_t (**)(_QWORD *))(a1[7] + 16))(a1 + 7);
    v14[22] = CAVolumeCurve::ConvertScalarToRaw((CAVolumeCurve *)(v14 + 24), fminf(fmaxf(v13, 0.0), 1.0));
    *a9 = 1;
    v16 = *(v14 - 1);
    v17 = (_DWORD *)a10[1];
    v18 = a10[2];
    if ((unint64_t)v17 >= v18)
    {
      v23 = 0x1555555555555555;
      v24 = (_DWORD *)*a10;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
      v26 = v25 + 1;
      if (v25 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v24) >> 2);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 < 0xAAAAAAAAAAAAAAALL)
        v23 = v26;
      if (v23)
      {
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v23);
        v24 = (_DWORD *)*a10;
        v17 = (_DWORD *)a10[1];
      }
      else
      {
        v28 = 0;
      }
      v42 = (_DWORD *)(v23 + 12 * v25);
      v43 = v23 + 12 * v28;
      *v42 = 1818456950;
      v42[1] = v16;
      v42[2] = 0;
      v19 = v42 + 3;
      if (v17 != v24)
      {
        do
        {
          v44 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v45 = v17[2];
          *(_QWORD *)(v42 - 3) = v44;
          v42 -= 3;
          v42[2] = v45;
        }
        while (v17 != v24);
        v24 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v42;
      a10[1] = (unint64_t)v19;
      a10[2] = v43;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v17 = 1818456950;
      v17[1] = v16;
      v17[2] = 0;
      v19 = v17 + 3;
    }
    a10[1] = (unint64_t)v19;
    if (v15)
      goto LABEL_47;
  }
}

void sub_1B58EE254(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<CARawPoint,CADBPoint>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(uint64_t ***)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = (uint64_t **)v8;
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (uint64_t **)v9[2];
          v10 = *v7 == (uint64_t *)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6)
          v12 = v7;
        else
          v12 = v3;
        if (v6)
          v13 = v7 + 1;
        else
          v13 = v3;
      }
      else
      {
        v12 = v3;
        v13 = v3;
        if (v6)
        {
          v13 = v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v17 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x30uLL);
        *(uint64_t *)((char *)v14 + 28) = *(_QWORD *)((char *)v5 + 28);
        *(uint64_t *)((char *)v14 + 36) = *(_QWORD *)((char *)v5 + 36);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1B58EE474(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t ADS::LevelControl::LevelControl(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  ADS::Control *v10;

  v10 = ADS::Control::Control((ADS::Control *)a1, a2, a3, a4, a5, 1818588780);
  *(_QWORD *)v10 = off_1E6972AC8;
  *((_DWORD *)v10 + 36) = a6;
  *((_DWORD *)v10 + 38) = *(_DWORD *)a7;
  std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)v10 + 160, (_QWORD *)(a7 + 8));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a7 + 32);
  return a1;
}

void sub_1B58EE4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_1E69937F0;
  *(_QWORD *)(v1 + 56) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 80));
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)v1);
  _Unwind_Resume(a1);
}

BOOL ADS::BaseObject::HasProperty(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v5;
  BOOL v7;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  mSelector = a4->mSelector;
  v5 = 1;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector != 1650682995 && mSelector != 1668047219)
      goto LABEL_12;
  }
  else if (mSelector != 1937007734 && mSelector != 1870098020)
  {
    if (mSelector == 1668641652)
    {
      v7 = *((_QWORD *)this + 4) == *((_QWORD *)this + 3);
      return !v7;
    }
LABEL_12:
    *(_QWORD *)&v16 = (char *)this + 24;
    *((_QWORD *)&v16 + 1) = *(_QWORD *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v14, v16, a4->mElement);
    v10 = v14;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v7 = v10 == 0;
    return !v7;
  }
  return v5;
}

uint64_t ADS::BaseObject::IsPropertySettable(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4;
  AudioObjectPropertySelector mSelector;
  BOOL v6;
  int v7;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _DWORD *exception;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  v4 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1668641651)
  {
    v6 = mSelector == 1650682995;
    v7 = 1668047219;
  }
  else
  {
    v6 = mSelector == 1668641652 || mSelector == 1870098020;
    v7 = 1937007734;
  }
  if (!v6 && mSelector != v7)
  {
    *(_QWORD *)&v21 = (char *)this + 24;
    *((_QWORD *)&v21 + 1) = *(_QWORD *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v14, v21, a4->mElement);
    if (!v14)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v17 = "ADS_PropertyManager.cpp";
        v18 = 1024;
        v19 = 96;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::IsPropertySettable: property not found.", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 2003332927;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v4;
}

void sub_1B58EE7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t ADS::BaseObject::GetPropertyDataSize(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _DWORD *exception;
  uint64_t (***v14)(_QWORD);
  std::__shared_weak_count *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  v20 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  v7 = 4;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector == 1650682995 || mSelector == 1668047219)
      return v7;
    goto LABEL_10;
  }
  if (mSelector == 1668641652)
    return 12 * ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4);
  if (mSelector != 1937007734)
  {
    if (mSelector == 1870098020)
      return 0;
LABEL_10:
    *(_QWORD *)&v21 = (char *)this + 24;
    *((_QWORD *)&v21 + 1) = *(_QWORD *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v14, v21, a4->mElement);
    if (!v14)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v17 = "ADS_PropertyManager.cpp";
        v18 = 1024;
        v19 = 87;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyDataSize: property not found.", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 2003332927;
    }
    v7 = (**v14)(v14);
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v7;
}

void sub_1B58EE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void ADS::BaseObject::GetPropertyData(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  AudioObjectPropertySelector mSelector;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  unsigned int (***v21)(_QWORD);
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *exception;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  unsigned int (***v30)(_QWORD);
  std::__shared_weak_count *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  __int128 v37;

  v36 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector == 1650682995)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v33 = "ADS_BaseObject.cpp";
          v34 = 1024;
          v35 = 127;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v20 = *((_DWORD *)this + 4);
    }
    else
    {
      if (mSelector != 1668047219)
        goto LABEL_23;
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v33 = "ADS_BaseObject.cpp";
          v34 = 1024;
          v35 = 134;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyClass", buf, 0x12u);
        }
        v27 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v27 = &off_1E69A1B30;
        v27[2] = 561211770;
      }
      v20 = *((_DWORD *)this + 3);
    }
LABEL_21:
    *(_DWORD *)a9 = v20;
    *a8 = 4;
    return;
  }
  switch(mSelector)
  {
    case 0x73746476u:
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v33 = "ADS_BaseObject.cpp";
          v34 = 1024;
          v35 = 141;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyOwner", buf, 0x12u);
        }
        v25 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v25 = &off_1E69A1B30;
        v25[2] = 561211770;
      }
      v20 = *((_DWORD *)this + 5);
      goto LABEL_21;
    case 0x6F776E64u:
      *a8 = 0;
      return;
    case 0x63757374u:
      v13 = 0;
      if (a7 >= 0xC)
      {
        v14 = *((_QWORD *)this + 3);
        if (*((_QWORD *)this + 4) != v14)
        {
          v15 = 0;
          v16 = 0;
          v17 = a7 / 0xCuLL;
          v18 = a9 + 8;
          do
          {
            *((_QWORD *)v18 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + v15) + 72))(*(_QWORD *)(v14 + v15));
            *v18 = v19;
            if (++v16 >= v17)
              break;
            v14 = *((_QWORD *)this + 3);
            v18 += 3;
            v15 += 16;
          }
          while ((*((_QWORD *)this + 4) - v14) >> 4 > v16);
          v13 = 12 * v16;
        }
      }
      *a8 = v13;
      return;
  }
LABEL_23:
  *(_QWORD *)&v37 = (char *)this + 24;
  *((_QWORD *)&v37 + 1) = *(_QWORD *)&a4->mSelector;
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v30, v37, a4->mElement);
  v21 = v30;
  if (!v30)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "ADS_PropertyManager.cpp";
      v34 = 1024;
      v35 = 105;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyData: property not found.", buf, 0x12u);
    }
    v28 = 2003332927;
LABEL_45:
    v29 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v29 = &off_1E69A1B30;
    v29[2] = v28;
  }
  if ((**v30)(v30) > a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "ADS_PropertyManager.cpp";
      v34 = 1024;
      v35 = 106;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyData: not enough space for return value of custom property.", buf, 0x12u);
    }
    v28 = 561211770;
    goto LABEL_45;
  }
  *a8 = ((uint64_t (*)(unsigned int (***)(_QWORD), char *))(*v21)[1])(v21, a9);
  v22 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B58EEF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ADS::BaseObject::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_queue_t *v19;
  unsigned __int8 v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  _DWORD *exception;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  _BYTE block[24];
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v49 = a1 + 24;
  *((_QWORD *)&v49 + 1) = *a4;
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v42, v49, *((_DWORD *)a4 + 2));
  v15 = v42;
  if (!v42)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = "ADS_PropertyManager.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 115;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::SetPropertyData: property not found.", block, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v16 = (*(uint64_t (**)(uint64_t *))(*v42 + 56))(v42);
  v17 = *v15;
  if (v16)
  {
    v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 40))(v15, a8, a7);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = ___ZN3ADS15PropertyManager15SetPropertyDataEj26AudioObjectPropertyAddressPKvjNS_17SettabilityPolicyE_block_invoke;
    v45 = &__block_descriptor_tmp_7309;
    v47 = a2;
    v46 = v18;
    v19 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      v20 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
      if ((v20 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
      dispatch_async(*v19, block);
    }
    v21 = 0;
  }
  else
  {
    v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(v17 + 16))(v15, a8, a7, a11);
  }
  v22 = v43;
  if (!v43)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v21)
      return;
  }
  else
  {
LABEL_13:
    if (!v21)
      return;
  }
  *a9 = 1;
  v26 = a10[1];
  v25 = a10[2];
  if (v26 >= v25)
  {
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a10) >> 2);
    v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a10) >> 2);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0xAAAAAAAAAAAAAAALL)
      v32 = 0x1555555555555555;
    else
      v32 = v30;
    if (v32)
      v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v32);
    else
      v33 = 0;
    v34 = v32 + 12 * v29;
    v35 = v32 + 12 * v33;
    v36 = *a4;
    *(_DWORD *)(v34 + 8) = *((_DWORD *)a4 + 2);
    *(_QWORD *)v34 = v36;
    v28 = v34 + 12;
    v38 = (_DWORD *)*a10;
    v37 = (_DWORD *)a10[1];
    if (v37 != (_DWORD *)*a10)
    {
      do
      {
        v39 = *(_QWORD *)(v37 - 3);
        v37 -= 3;
        v40 = v37[2];
        *(_QWORD *)(v34 - 12) = v39;
        v34 -= 12;
        *(_DWORD *)(v34 + 8) = v40;
      }
      while (v37 != v38);
      v37 = (_DWORD *)*a10;
    }
    *a10 = v34;
    a10[1] = v28;
    a10[2] = v35;
    if (v37)
      operator delete(v37);
  }
  else
  {
    v27 = *a4;
    *(_DWORD *)(v26 + 8) = *((_DWORD *)a4 + 2);
    *(_QWORD *)v26 = v27;
    v28 = v26 + 12;
  }
  a10[1] = v28;
}

void sub_1B58EF264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ADS::BaseObject::PerformConfigChange(ADS::BaseObject *this, unint64_t a2, char *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _DWORD *exception;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v13 = (char *)this + 24;
  *((_QWORD *)&v13 + 1) = *(_QWORD *)(a3 + 12);
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v8, v13, *((_DWORD *)a3 + 5));
  if (!v8)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a3 + 24));
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 24))(v8, a3);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B58EF3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void ADS::BaseObject::AbortConfigChange(ADS::BaseObject *this, unint64_t a2, char *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _DWORD *exception;
  uint64_t v8;
  std::__shared_weak_count *v9;
  __int128 v10;

  *(_QWORD *)&v10 = (char *)this + 24;
  *((_QWORD *)&v10 + 1) = *(_QWORD *)(a3 + 12);
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v8, v10, *((_DWORD *)a3 + 5));
  if (!v8)
  {
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 32))(v8, a3);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B58EF528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void ADS::BaseObject::~BaseObject(ADS::BaseObject *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E6972B48;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
}

void HALS_DSPRequest::~HALS_DSPRequest(HALS_DSPRequest *this)
{
  HALS_DSPRequest::~HALS_DSPRequest(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E6972BB0;
  v2 = (void *)*((_QWORD *)this + 87);
  if (v2)
  {
    *((_QWORD *)this + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E699D0D8;
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((HALS_DSPRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((HALS_DSPRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((HALS_DSPRequest *)((char *)this + 24));
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *i;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  _QWORD *v27;
  _QWORD *v28;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v20 = 0;
LABEL_29:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v20);
      goto LABEL_30;
    }
    v10 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v9);
    if (a2 != a3)
    {
      v11 = v9;
      v12 = a2;
      do
      {
        v9 = v10;
        v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        v14 = *v8;
        v15 = (uint64_t **)(a1 + 8);
        v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7))
                break;
              v14 = (uint64_t *)*v14;
              v16 = v15;
              if (!*v15)
                goto LABEL_14;
            }
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
          v16 = v15 + 1;
        }
LABEL_14:
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10)
          v10 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v10);
        else
          v10 = 0;
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v12[2];
            v18 = *a2 == (_QWORD)v12;
            v12 = a2;
          }
          while (!v18);
        }
        if (!v9)
          break;
        v11 = v9;
        v12 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    v21 = (uint64_t **)(a1 + 8);
    do
    {
      v22 = (uint64_t *)operator new(0x20uLL);
      v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      v24 = *v21;
      v25 = (uint64_t **)(a1 + 8);
      v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7))
              break;
            v24 = (uint64_t *)*v24;
            v26 = v25;
            if (!*v25)
              goto LABEL_38;
          }
          v24 = (uint64_t *)v24[1];
        }
        while (v24);
        v26 = v25 + 1;
      }
LABEL_38:
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v25, v26, v22);
      v27 = (_QWORD *)a2[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)a2[2];
          v18 = *v28 == (_QWORD)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

uint64_t std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>(uint64_t **a1, unsigned int a2, int a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return 1;
  }
}

uint64_t DSP_Host_Types::FormatDescription::operator=(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  BOOL v12;

  v2 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  v8 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = *(_QWORD *)a2;
  *(_BYTE *)(result + 48) = 1;
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 76) = 1;
  *(_WORD *)(result + 96) = ((v3 & 0x20) == 0) | 0x100;
  if (v4 == 1819304813 && v6 == 1 && v8 == v5 && v9 >> 3 <= v5)
  {
    if (!v7)
      goto LABEL_13;
    if ((v3 & 0x20) == 0)
    {
      v12 = v5 == v5 / v7 * v7;
      v5 /= v7;
      if (!v12)
        goto LABEL_13;
    }
    v2 = 0;
    if ((v3 & 2) == 0 && 8 * v5 == v9)
    {
      if ((v3 & 1) != 0)
      {
        if (v5 == 4)
          v10 = 1;
        else
          v10 = 4 * (v5 == 8);
        if ((v3 & 0x1F84) != 0)
          v2 = 0;
        else
          v2 = v10;
      }
      else
      {
        if ((v3 & 4) == 0)
        {
LABEL_13:
          v2 = 0;
          goto LABEL_14;
        }
        v11 = (v3 >> 7) & 0x3F;
        if (v11 == 24 && v5 == 4)
        {
          v2 = 3;
        }
        else if (v11 || v5 != 4)
        {
          v12 = v5 == 2 && v11 == 0;
          if (v12)
            v2 = 2;
          else
            v2 = 0;
        }
        else
        {
          v2 = 5;
        }
      }
    }
  }
LABEL_14:
  *(_DWORD *)(result + 120) = v2;
  *(_BYTE *)(result + 124) = 1;
  return result;
}

_QWORD *std::shared_ptr<DSP_Host_OffloadDictionary>::operator=[abi:ne180100]<DSP_Host_OffloadDictionary,std::default_delete<DSP_Host_OffloadDictionary>,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v11;

  *(_QWORD *)&v11 = *a2;
  if ((_QWORD)v11)
  {
    v4 = (_QWORD *)operator new();
    v5 = (_QWORD *)*a2;
    *v4 = &off_1E69A0FB0;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
    *((_QWORD *)&v11 + 1) = v4;
    std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)&v11, v5, (uint64_t)v5);
  }
  else
  {
    v11 = 0uLL;
  }
  *a2 = 0;
  v6 = (std::__shared_weak_count *)a1[1];
  v7 = v11;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  *(_OWORD *)a1 = v7;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  const void *v2;
  std::__shared_weak_count *v3;

  if (result)
  {
    v1 = result;
    v2 = *(const void **)(result + 16);
    if (v2)
      CFRelease(v2);
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteI26DSP_Host_OffloadDictionaryEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void HALS_DSPRequest::CreateStreamConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  HALS_Stream *NumberStreams;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unsigned int *v10;
  float v11;
  double mSampleRate;
  uint64_t v13;
  __n128 v14;
  unint64_t shared_weak_owners;
  unint64_t shared_owners;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *size;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v67;
  BOOL v68;
  _OWORD v69[2];
  uint64_t v70;
  void *v71[3];
  AudioStreamBasicDescription v72;
  __int128 v73;
  void *v74;
  DSP_Host_Types::FormatDescription *v75;
  DSP_Host_Types::FormatDescription *v76;
  unint64_t v77;
  uint64_t v78;
  std::string __p;
  uint64_t (**v80)();
  uint64_t *p_shared_weak_owners;
  char v82;
  char v83;
  _QWORD v84[2];
  char v85;
  char v86;
  _QWORD v87[2];
  __int16 v88;
  _QWORD v89[2];
  char v90;
  char v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  NumberStreams = (HALS_Stream *)HALS_IODevice::GetNumberStreams(*(HALS_IODevice **)a3, a4 == 1768845428);
  v67 = (int)NumberStreams;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v64 = *(_DWORD *)(v7 + 96);
    v68 = *(_DWORD *)(a2 + 680) == a4;
  }
  else
  {
    v64 = 0;
    v68 = 0;
  }
  if ((_DWORD)NumberStreams)
  {
    v8 = 0;
    do
    {
      v9 = (std::__shared_weak_count *)operator new(0x180uLL);
      v9->__shared_owners_ = 0;
      v9->__shared_weak_owners_ = 0;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994BE8;
      *(_OWORD *)&v9[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[3].__shared_owners_ = 0u;
      v9[4].std::__shared_count = 0u;
      *(_OWORD *)&v9[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[5].__shared_owners_ = 0u;
      v9[6].std::__shared_count = 0u;
      *(_OWORD *)&v9[6].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[7].__shared_owners_ = 0u;
      v9[8].std::__shared_count = 0u;
      *(_OWORD *)&v9[8].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[9].__shared_owners_ = 0u;
      v9[10].std::__shared_count = 0u;
      *(_OWORD *)&v9[10].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[11].__shared_owners_ = 0u;
      v9[12].std::__shared_count = 0u;
      *(_OWORD *)&v9[12].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[13].__shared_owners_ = 0u;
      v9[14].std::__shared_count = 0u;
      *(_OWORD *)&v9[14].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v9[15].__shared_owners_ = 0u;
      *(_OWORD *)&v9[1].__shared_owners_ = 0u;
      v9[2].std::__shared_count = 0u;
      v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994678;
      std::string::basic_string[abi:ne180100]<0>(&__p, "stream semantic");
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(&v9[2].__vftable, (const UInt8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v9[5].__shared_weak_owners_, "current format");
      std::string::basic_string[abi:ne180100]<0>(&__p, "stream id");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[12].__vftable, (const UInt8 *)&__p);
      v9[12].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994AA8;
      LOBYTE(v9[12].__shared_weak_owners_) = 0;
      LOBYTE(v9[13].__shared_weak_owners_) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, "latency samples");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[14].__vftable, (const UInt8 *)&__p);
      v9[14].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
      LOBYTE(v9[14].__shared_weak_owners_) = 0;
      BYTE4(v9[14].__shared_weak_owners_) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9[15].__vftable = 0;
      v9[15].__shared_owners_ = 0;
      v9[15].__shared_weak_owners_ = 0;
      *(_QWORD *)&v73 = v9 + 1;
      *((_QWORD *)&v73 + 1) = v9;
      NumberStreams = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(*(HALS_IODevice **)a3, a4 == 1768845428, v8);
      v10 = (unsigned int *)NumberStreams;
      if (!NumberStreams)
        goto LABEL_79;
      HALS_Stream::GetCurrentVirtualFormat(NumberStreams, &v72);
      DSP_Host_Types::FormatDescription::operator=((uint64_t)&v9[5].__shared_weak_owners_, (uint64_t)&v72);
      std::to_string(&__p, v10[4]);
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v9[12].__shared_weak_owners_, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a3 + 20))
      {
        v11 = *(float *)(a3 + 16);
        mSampleRate = v72.mSampleRate;
        v13 = v10[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F626C746E63;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v74) = 0;
        LODWORD(v69[0]) = 0;
        v14 = ((__n128 (*)(unsigned int *, uint64_t, std::string *, uint64_t, _OWORD *, void **, _QWORD, _QWORD, _QWORD))*(_QWORD *)(*(_QWORD *)v10 + 112))(v10, v13, &__p, 4, v69, &v74, 0, 0, 0);
        v14.n128_u32[0] = v74;
        LODWORD(v9[14].__shared_weak_owners_) = (v11 / mSampleRate * (double)v14.n128_u64[0]);
        BYTE4(v9[14].__shared_weak_owners_) = 1;
        *(double *)&v9[7].__shared_owners_ = *(float *)(a3 + 16);
        LOBYTE(v9[7].__shared_weak_owners_) = 1;
        shared_owners = v9[15].__shared_owners_;
        shared_weak_owners = v9[15].__shared_weak_owners_;
        if (shared_owners >= shared_weak_owners)
        {
          v34 = v9[15].__vftable;
          v35 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(shared_owners - (_QWORD)v34) >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0x1AF286BCA1AF286)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v37 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(shared_weak_owners - (_QWORD)v34) >> 3);
          if (2 * v37 > v36)
            v36 = 2 * v37;
          v38 = (char *)(v37 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v36);
          p_shared_weak_owners = &v9[15].__shared_weak_owners_;
          if (v38)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>((unint64_t)v38);
          else
            v39 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38[152 * v35];
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v80 = (uint64_t (**)())&v38[152 * v39];
          DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)__p.__r_.__value_.__l.__size_, (const DSP_Host_Types::FormatDescription *)&v9[5].__shared_weak_owners_);
          __p.__r_.__value_.__r.__words[2] += 152;
          std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer((uint64_t *)&v9[15], &__p);
          v17 = v9[15].__shared_owners_;
          std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)v9[15].__shared_owners_, (const DSP_Host_Types::FormatDescription *)&v9[5].__shared_weak_owners_);
          v17 = shared_owners + 152;
          v9[15].__shared_owners_ = shared_owners + 152;
        }
        v9[15].__shared_owners_ = v17;
      }
      else
      {
        v18 = v10[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F626C746E63;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v74) = 0;
        LODWORD(v69[0]) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::string *, uint64_t, _OWORD *, void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 112))(v10, v18, &__p, 4, v69, &v74, 0, 0, 0);
        LODWORD(v9[14].__shared_weak_owners_) = (_DWORD)v74;
        BYTE4(v9[14].__shared_weak_owners_) = 1;
        v19 = v10[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F6273666D61;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        v20 = (*(unsigned int (**)(unsigned int *, uint64_t, std::string *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 104))(v10, v19, &__p, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(v71, v20);
        v21 = v10[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F6273666D61;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v74) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::string *, _QWORD, void **, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 112))(v10, v21, &__p, (56 * v20), &v74, v71[0], 0, 0, 0);
        if (v74 >= 0x38)
        {
          v22 = 0;
          v23 = 56 * (v74 / 0x38uLL);
          do
          {
            v69[0] = *(_OWORD *)((char *)v71[0] + v22);
            v69[1] = *(_OWORD *)((char *)v71[0] + v22 + 16);
            v70 = *(_QWORD *)((char *)v71[0] + v22 + 32);
            *(_QWORD *)&v69[0] = *(_QWORD *)((char *)v71[0] + v22 + 40);
            v24 = v73;
            __p.__r_.__value_.__s.__data_[8] = 0;
            __p.__r_.__value_.__s.__data_[16] = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699D270;
            std::string::basic_string[abi:ne180100]<0>(&v74, "sample rate");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v80, (const UInt8 *)&v74);
            v80 = &off_1E699D308;
            v82 = 0;
            v83 = 0;
            if (SHIBYTE(v76) < 0)
              operator delete(v74);
            std::string::basic_string[abi:ne180100]<0>(&v74, "channels");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v84, (const UInt8 *)&v74);
            v84[0] = &off_1E699E950;
            v85 = 0;
            v86 = 0;
            if (SHIBYTE(v76) < 0)
              operator delete(v74);
            std::string::basic_string[abi:ne180100]<0>(&v74, "is interleaved");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v87, (const UInt8 *)&v74);
            v87[0] = &off_1E699D180;
            v88 = 0;
            if (SHIBYTE(v76) < 0)
              operator delete(v74);
            std::string::basic_string[abi:ne180100]<0>(&v74, "common pcm format");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v89, (const UInt8 *)&v74);
            v89[0] = &off_1E699E950;
            v90 = 0;
            v91 = 0;
            if (SHIBYTE(v76) < 0)
              operator delete(v74);
            v92 = 0;
            v93 = 0;
            v94 = 0;
            DSP_Host_Types::FormatDescription::operator=((uint64_t)&__p, (uint64_t)v69);
            v26 = *(_QWORD *)(v24 + 344);
            v25 = *(_QWORD *)(v24 + 352);
            if (v26 >= v25)
            {
              v28 = *(_QWORD *)(v24 + 336);
              v29 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v26 - v28) >> 3);
              v30 = v29 + 1;
              if (v29 + 1 > 0x1AF286BCA1AF286)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v31 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v25 - v28) >> 3);
              if (2 * v31 > v30)
                v30 = 2 * v31;
              if (v31 >= 0xD79435E50D7943)
                v32 = 0x1AF286BCA1AF286;
              else
                v32 = v30;
              v78 = v24 + 352;
              if (v32)
                v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v32);
              else
                v33 = 0;
              v74 = (void *)v32;
              v75 = (DSP_Host_Types::FormatDescription *)(v32 + 152 * v29);
              v76 = v75;
              v77 = v32 + 152 * v33;
              DSP_Host_Types::FormatDescription::FormatDescription(v75, (const DSP_Host_Types::FormatDescription *)&__p);
              v76 = (DSP_Host_Types::FormatDescription *)((char *)v76 + 152);
              std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer((uint64_t *)(v24 + 336), &v74);
              v27 = *(_QWORD *)(v24 + 344);
              std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&v74);
            }
            else
            {
              DSP_Host_Types::FormatDescription::FormatDescription(*(DSP_Host_Types::FormatDescription **)(v24 + 344), (const DSP_Host_Types::FormatDescription *)&__p);
              v27 = v26 + 152;
              *(_QWORD *)(v24 + 344) = v27;
            }
            *(_QWORD *)(v24 + 344) = v27;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699D270;
            if (v92)
            {
              v93 = v92;
              operator delete(v92);
            }
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v89);
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v87);
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v84);
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v80);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E699D2B0;
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p.__r_.__value_.__l.__size_);
            v22 += 56;
          }
          while (v23 != v22);
        }
        if (v71[0])
        {
          v71[1] = v71[0];
          operator delete(v71[0]);
        }
      }
      if (v68)
      {
        if (v8 == v64)
        {
          v40 = v10[4];
          v41 = *(char **)(a2 + 704);
          v42 = *(_QWORD *)(a2 + 712);
          if ((unint64_t)v41 >= v42)
          {
            v44 = *(char **)(a2 + 696);
            v45 = (v41 - v44) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v47 = v42 - (_QWORD)v44;
            if (v47 >> 1 > v46)
              v46 = v47 >> 1;
            v48 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL;
            v49 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v48)
              v49 = v46;
            if (v49)
            {
              v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v49);
              v41 = *(char **)(a2 + 704);
              v44 = *(char **)(a2 + 696);
            }
            else
            {
              v50 = 0;
            }
            v51 = (unsigned int *)(v49 + 4 * v45);
            *v51 = v40;
            v43 = v51 + 1;
            while (v41 != v44)
            {
              v52 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *--v51 = v52;
            }
            *(_QWORD *)(a2 + 696) = v51;
            *(_QWORD *)(a2 + 704) = v43;
            *(_QWORD *)(a2 + 712) = v49 + 4 * v50;
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_DWORD *)v41 = v40;
            v43 = v41 + 4;
          }
          v68 = 0;
          *(_QWORD *)(a2 + 704) = v43;
        }
        else
        {
          v68 = 1;
        }
      }
      else
      {
        v68 = 0;
      }
      v53 = v73;
      *(_DWORD *)(v73 + 40) = 1;
      *(_BYTE *)(v53 + 44) = 1;
      if (HALS_Stream::IsReferenceStream((HALS_Stream *)v10))
      {
        *(_DWORD *)(v53 + 40) = 2;
        *(_BYTE *)(v53 + 44) = 1;
      }
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)a1, &v73);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
LABEL_79:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      ++v8;
    }
    while (v8 != v67);
  }
  if (v68)
  {
    AMCP::Log::Scope_Registry::get(NumberStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    v57 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v58 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      v60 = pthread_self();
      v61 = pthread_mach_thread_np(v60);
      v62 = *(_QWORD *)(a3 + 8);
      v63 = *(_DWORD *)(v62 + 8);
      LODWORD(v62) = *(_DWORD *)(v62 + 96);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v61;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_DSPRequest.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 191;
      LOWORD(v80) = 1024;
      *(_DWORD *)((char *)&v80 + 2) = v63;
      HIWORD(v80) = 1024;
      LODWORD(p_shared_weak_owners) = v62;
      _os_log_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_INFO, "%6u %32s:%-5d [hal_dsp] A specified stream (Device ID %d / Index %d) no longer exists; io context update required.",
        (uint8_t *)&__p,
        0x24u);
    }
  }
}

void sub_1B58F068C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, DSP_Dictionariable::DictionariableKvp *a16, DSP_Dictionariable::DictionariableKvp *a17, DSP_Dictionariable::DictionariableKvp *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  a27 = a12;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_1B58F0890(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58F084CLL);
}

void sub_1B58F08A8()
{
  JUMPOUT(0x1B58F084CLL);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

BOOL HALS_Stream::IsReferenceStream(HALS_Stream *this)
{
  _BOOL8 result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (*((_DWORD *)this + 14) == 1)
    return 1;
  v3 = *((unsigned int *)this + 4);
  v8 = 0x676C6F6274617073;
  v9 = 0;
  v4 = (*(uint64_t (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)this + 88))(this, v3, &v8, 0);
  result = 0;
  if (v4)
  {
    v5 = *((unsigned int *)this + 4);
    v6 = 0x676C6F6274617073;
    v7 = 0;
    v11 = 0;
    v10 = 0;
    (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v5, &v6, 4, &v10, &v11, 0, 0, 0);
    return v11 != 0;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a1);
}

uint64_t *std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const DSP_Host_Types::FormatDescription *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  for (i = 152; ; i -= 152)
  {
    v8 = v6 + i;
    if (v4 + i - 152 == v5)
      break;
    v9 = (const DSP_Host_Types::FormatDescription *)(v4 + i - 304);
    result = (uint64_t *)DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v8 - 304), v9);
  }
  v10 = v8 - 152;
  a2[1] = v10;
  v11 = *v3;
  *v3 = v10;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 152);
    *(_QWORD *)(a1 + 16) = i - 152;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(_QWORD *a1, const UInt8 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp(a1, a2);
  *((_BYTE *)v3 + 16) = 0;
  *((_BYTE *)v3 + 20) = 0;
  *v3 = &off_1E6994B00;
  v4 = v3 + 3;
  v3[6] = 0;
  v3[10] = 0;
  if ((v5 & 1) == 0)
  {
    v12 = v3 + 3;
    v4 = v12;
    if (v11)
    {
      DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[0] = 0;
      qword_1EF1310C8 = (uint64_t)"uninitialized";
      dword_1EF1310D0 = 1;
      qword_1EF1310D8 = (uint64_t)"general";
      dword_1EF1310E0 = 2;
      qword_1EF1310E8 = (uint64_t)"tap";
      v4 = v12;
    }
  }
  v13[0] = &off_1E699CBA8;
  v14 = v13;
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](v13, v4);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  v13[0] = &off_1E699CC38;
  v14 = v13;
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](v13, a1 + 7);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_11;
  }
  if (v14)
  {
    v9 = 5;
LABEL_11:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6994B00;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
}

{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6994B00;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
    {
LABEL_11:
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
      JUMPOUT(0x1B5E50688);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_11;
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::StreamConfiguration>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B58F0E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::StreamConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B58F0F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v3;
  char *v5;
  unsigned __int8 v6;
  CFIndex v7;
  void **v8;
  CFStringRef v9;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v12;
  int v13;

  if (*(_BYTE *)(a1 + 20))
  {
    v13 = *(_DWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 80);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    v5 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v13);
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    v6 = v12;
    if ((v12 & 0x80u) == 0)
      v7 = v12;
    else
      v7 = (CFIndex)__p[1];
    if (v7)
    {
      if ((v12 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v9 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v7, 0x8000100u, 0);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *(const void **)(a1 + 8), v9);
      CFRelease(v9);
      v6 = v12;
    }
    if ((v6 & 0x80) != 0)
      operator delete(__p[0]);
  }
}

void sub_1B58F1130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  void **v11;

  if (*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 0;
  v10[0] = &off_1E699E9F8;
  v10[1] = 0;
  v10[2] = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *a2, *(const void **)(a1 + 8));
    if (v9 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v5 + 48))(v5, &v11);
    *(_BYTE *)(a1 + 20) = 1;
    if (v9 < 0)
      operator delete(__p[0]);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
  return v6;
}

void std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t HALS_DSPRequest::GetDataSourceType(HALS_DSPRequest *this, const HALS_Device *a2)
{
  unsigned int *v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = (unsigned int *)(*(uint64_t (**)(HALS_DSPRequest *, uint64_t, const HALS_Device *, _QWORD))(*(_QWORD *)this + 640))(this, 1685287523, a2, 0);
  v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    v5 = v2[4];
    v10 = 0x676C6F6273636369;
    v11 = 0;
    v12 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 112))(v2, v5, &v10, 4, &v12, (char *)&v12 + 4, 0, 0, 0);
    v6 = HIDWORD(v12) & 0xFFFFFF00;
    v7 = BYTE4(v12);
    v8 = 0x100000000;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return v8 | v6 | v7;
}

void sub_1B58F1390(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(_QWORD **a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::vector<char>::pointer begin;
  std::vector<char>::value_type __x[4];
  std::vector<char> v9;
  int v10;
  uint64_t v11;

  v10 = a2;
  v11 = 1869968496;
  if ((*(unsigned int (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)**a1 + 88))(**a1, *(unsigned int *)(**a1 + 16), &v10, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 104))(**a1, *(unsigned int *)(**a1 + 16), &v10, 0, 0, 0);
    if ((_DWORD)v5)
    {
      v6 = v5;
      __x[0] = 0;
      std::vector<char>::vector(&v9, v5, __x);
      begin = v9.__begin_;
      *(_DWORD *)__x = 0;
      (*(void (**)(_QWORD, _QWORD, int *, uint64_t, std::vector<char>::value_type *, std::vector<char>::pointer, _QWORD, _QWORD, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, *(unsigned int *)(**a1 + 16), &v10, v6, __x, v9.__begin_, 0, 0, 0);
      DSP_Host_Types::AudioChannelConfiguration::operator=(a3, begin);
      if (v9.__begin_)
      {
        v9.__end_ = v9.__begin_;
        operator delete(v9.__begin_);
      }
    }
  }
}

void sub_1B58F14AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDescription>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B58F1608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B58F16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void DSP_Dictionariable::SingleKvp<std::string>::value(std::string *a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 40))
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
  }
}

uint64_t HALS_PlatformBehaviors_Impl::system_port_is_shared(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

uint64_t HALS_PlatformBehaviors_Impl::client_server_test_mode_is_enabled(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

uint64_t HALS_PlatformBehaviors_Impl::direct_test_mode_is_enabled(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

void Testing_PlatformBehaviors::~Testing_PlatformBehaviors(Testing_PlatformBehaviors *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t Testing_PlatformBehaviors::get_device_context_connection(Testing_PlatformBehaviors *this)
{
  return 2 * (Testing_PlatformBehaviors::s_test_configuration != 3);
}

uint64_t Testing_PlatformBehaviors::get_device_list_visibility(Testing_PlatformBehaviors *this)
{
  return 0;
}

uint64_t Testing_PlatformBehaviors::get_stacked_channel_policy(Testing_PlatformBehaviors *this)
{
  return 1;
}

BOOL Testing_PlatformBehaviors::get_load_audiohardwareplugins(Testing_PlatformBehaviors *this)
{
  return Testing_PlatformBehaviors::s_test_configuration != 2;
}

uint64_t Testing_PlatformBehaviors::get_settings_behavior(Testing_PlatformBehaviors *this)
{
  unsigned int v1;

  if (Testing_PlatformBehaviors::s_test_configuration == 5)
    v1 = 3;
  else
    v1 = 0;
  if (Testing_PlatformBehaviors::s_test_configuration == 4)
    return 2;
  else
    return v1;
}

BOOL Testing_PlatformBehaviors::get_default_device_behavior(Testing_PlatformBehaviors *this)
{
  return Testing_PlatformBehaviors::s_test_configuration == 6;
}

uint64_t *Testing_PlatformBehaviors::get_tcc_and_input_status_handler(Testing_PlatformBehaviors *this)
{
  unsigned __int8 v1;
  Testing_TCC_And_Input_Status_Handler *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      Testing_TCC_And_Input_Status_Handler::Testing_TCC_And_Input_Status_Handler(v3);
    }
  }
  return &Testing_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler;
}

uint64_t Testing_PlatformBehaviors::unset_system_port(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t Testing_PlatformBehaviors::system_port_is_shared(Testing_PlatformBehaviors *this)
{
  return 1;
}

uint64_t Testing_PlatformBehaviors::get_system_port(Testing_PlatformBehaviors *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 2);
  if (!(_DWORD)result)
  {
    result = HALB_MachPort::CreatePort((HALB_MachPort *)4);
    *((_DWORD *)this + 2) = result;
  }
  return result;
}

BOOL Testing_PlatformBehaviors::client_server_test_mode_is_enabled(Testing_PlatformBehaviors *this)
{
  return g_static_start_options == 1 && Testing_PlatformBehaviors::s_test_configuration == 3;
}

BOOL Testing_PlatformBehaviors::direct_test_mode_is_enabled(Testing_PlatformBehaviors *this)
{
  return g_static_start_options == 1 && Testing_PlatformBehaviors::s_test_configuration != 3;
}

void embedded_PlatformBehaviors::~embedded_PlatformBehaviors(embedded_PlatformBehaviors *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t embedded_PlatformBehaviors::get_device_context_connection(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_device_list_visibility(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_stacked_channel_policy(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_load_audiohardwareplugins(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_settings_behavior(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t embedded_PlatformBehaviors::get_default_device_behavior(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t *embedded_PlatformBehaviors::get_tcc_and_input_status_handler(embedded_PlatformBehaviors *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    embedded_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler = (uint64_t)&off_1E6972D58;
  }
  return &embedded_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler;
}

uint64_t embedded_PlatformBehaviors::get_system_port(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t *HALS_PlatformBehaviors::get_platform_behaviors(HALS_PlatformBehaviors *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  __guard *v4;
  uint64_t *v5;

  if (g_static_start_options == 1)
  {
    if ((v1 & 1) != 0)
      return &HALS_PlatformBehaviors::get_platform_behaviors(void)::testing;
    v5 = &HALS_PlatformBehaviors::get_platform_behaviors(void)::testing;
      return &HALS_PlatformBehaviors::get_platform_behaviors(void)::testing;
    HALS_PlatformBehaviors::get_platform_behaviors(void)::testing = (uint64_t)&off_1E6972C28;
    dword_1EF12F990 = 0;
    goto LABEL_11;
  }
  if ((v3 & 1) == 0)
  {
    v5 = &HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded;
    {
      HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded = (uint64_t)&off_1E6972CC0;
LABEL_11:
      __cxa_guard_release(v4);
      return v5;
    }
  }
  return &HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded;
}

void HALS_Box::~HALS_Box(HALS_Box *this)
{
  HALS_Box::~HALS_Box(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;

  *(_QWORD *)this = off_1E6972DB8;
  v2 = (HALB_Mutex *)*((_QWORD *)this + 6);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1B5E50688]();
  }
  v3 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 7);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1B5E50688]();
  }
  CACFString::~CACFString((HALS_Box *)((char *)this + 64));
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_Box::GetCommandGate(HALS_Box *this)
{
  return *((_QWORD *)this + 6);
}

{
  return *((_QWORD *)this + 6);
}

uint64_t HALS_Box::GetMIGDispatchQueue(HALS_Box *this)
{
  return *((_QWORD *)this + 7);
}

{
  return *((_QWORD *)this + 7);
}

uint64_t HALS_Box::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;
  unsigned __int16 v6;

  v3 = *a3;
  result = 1;
  if (*a3 > 1652060005)
  {
    if (v3 > 1869638758)
    {
      if (v3 > 1937007733)
      {
        if (v3 == 1937007734)
          return result;
        v5 = 1953653102;
      }
      else
      {
        if (v3 == 1869638759)
          return result;
        v5 = 1870098020;
      }
    }
    else if (v3 > 1668047218)
    {
      if (v3 == 1668047219)
        return result;
      v5 = 1668575852;
    }
    else
    {
      if (v3 == 1652060006)
        return result;
      v5 = 1652060014;
    }
  }
  else
  {
    if (v3 > 1651010920)
    {
      if (v3 > 1651536494)
      {
        if (v3 == 1651536495)
          return result;
        v5 = 1651861860;
        goto LABEL_25;
      }
      if (v3 == 1651010921)
        return result;
      v6 = 30313;
    }
    else
    {
      if (v3 <= 1650751010)
      {
        if (v3 == 1650682915)
          return result;
        v5 = 1650682995;
        goto LABEL_25;
      }
      if (v3 == 1650751011)
        return result;
      v6 = 24949;
    }
    v5 = v6 | 0x62680000;
  }
LABEL_25:
  if (v3 != v5)
    return 0;
  return result;
}

uint64_t HALS_Box::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;

  result = 0;
  v4 = *a3;
  if (*a3 <= 1651536494)
  {
    if (v4 <= 1651007860)
    {
      v5 = v4 == 1650682915;
      v6 = 1650751011;
    }
    else
    {
      v5 = v4 == 1651007861 || v4 == 1651010921;
      v6 = 1651013225;
    }
LABEL_19:
    if (!v5 && v4 != v6)
      return HALS_Object::IsPropertySettable(0, a2, a3);
    return result;
  }
  if (v4 <= 1652060013)
  {
    v5 = v4 == 1651536495 || v4 == 1651861860;
    v6 = 1652060006;
    goto LABEL_19;
  }
  if (v4 != 1953653102 && v4 != 1668575852)
  {
    if (v4 == 1652060014)
      return 1;
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  return result;
}

uint64_t HALS_Box::GetPropertyDataSize(HALS_Box *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector;
  int v7;
  HALB_Mutex *v9;
  HALB_Mutex *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  HALS_Box *v17;
  const void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1651861859)
  {
    if (mSelector > 1651010920)
    {
      if (mSelector == 1651010921 || mSelector == 1651013225)
        return 4;
      v7 = 1651536495;
    }
    else
    {
      if (mSelector == 1650682915 || mSelector == 1650751011)
        return 0;
      v7 = 1651007861;
    }
    goto LABEL_16;
  }
  if (mSelector <= 1668575851)
  {
    if (mSelector == 1651861860)
      return 8;
    if (mSelector == 1652060006)
      return 4;
    v7 = 1652060014;
    goto LABEL_16;
  }
  if (mSelector == 1668575852)
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v12 = MEMORY[0x1E0C809B0];
    v13 = 0x40000000;
    v14 = ___ZNK8HALS_Box17GetNumberControlsEv_block_invoke;
    v15 = &unk_1E6972EA8;
    v16 = &v20;
    v17 = this;
    v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)&v12);
LABEL_22:
    v11 = *((_DWORD *)v21 + 6);
    _Block_object_dispose(&v20, 8);
    return (4 * v11);
  }
  if (mSelector == 1870098020)
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v12 = MEMORY[0x1E0C809B0];
    v13 = 0x40000000;
    v14 = ___ZNK8HALS_Box35GetNumberOfControlsUsingClassFilterEjPKj_block_invoke;
    v15 = &unk_1E6972ED0;
    v19 = a4 >> 2;
    v17 = this;
    v18 = a5;
    v16 = &v20;
    v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)&v12);
    goto LABEL_22;
  }
  v7 = 1953653102;
LABEL_16:
  if (mSelector == v7)
    return 4;
  return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1B58F1F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_Box::GetPropertyData(HALS_Box *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, uint64_t *a8, HALS_Client *a9)
{
  signed int mSelector;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *exception;
  const void *v16;
  uint64_t v17;
  _DWORD *v18;
  HALB_Mutex *v19;
  _DWORD *v20;
  int v21;
  HALB_Mutex *v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _BYTE buf[24];
  void *v32;
  uint64_t *v33;
  HALS_Box *v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1651861859)
  {
    if (mSelector > 1668575851)
    {
      if (mSelector == 1668575852)
      {
        v27 = 0;
        v28 = &v27;
        v29 = 0x2000000000;
        v30 = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNK8HALS_Box17GetBoxControlListEjPvRj_block_invoke;
        v32 = &unk_1E6972F20;
        v33 = &v27;
        v34 = this;
        LODWORD(v36) = a4;
        v35 = a6;
        v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v19, (uint64_t)buf);
        *a5 = 4 * *((_DWORD *)v28 + 6);
        _Block_object_dispose(&v27, 8);
        return;
      }
      if (mSelector == 1870098020)
      {
        v27 = 0;
        v28 = &v27;
        v29 = 0x2000000000;
        v30 = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZNK8HALS_Box45GetNumberOfControlsAndCopyIDsUsingClassFilterEjPKjPj_block_invoke;
        v32 = &unk_1E6972EF8;
        v37 = a7 >> 2;
        v35 = a8;
        v36 = a6;
        v33 = &v27;
        v34 = this;
        v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
        v23 = *((_DWORD *)v28 + 6);
        _Block_object_dispose(&v27, 8);
        v21 = 4 * v23;
        goto LABEL_46;
      }
      if (mSelector != 1953653102)
        goto LABEL_49;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Box.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 332;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyTransportType", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
    }
    else
    {
      switch(mSelector)
      {
        case 1651861860:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 323;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
            }
            v25 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v25 = &off_1E69A1B30;
            v25[2] = 561211770;
          }
          v16 = (const void *)*((_QWORD *)this + 8);
          if (v16)
          {
            CFRetain(v16);
            v17 = *((_QWORD *)this + 8);
          }
          else
          {
            v17 = 0;
          }
          *a6 = v17;
          v21 = 8;
          goto LABEL_46;
        case 1652060006:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 386;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
            }
            v20 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v20 = &off_1E69A1B30;
            v20[2] = 561211770;
          }
          break;
        case 1652060014:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 377;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
            }
            v13 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v13 = &off_1E69A1B30;
            v13[2] = 561211770;
          }
          break;
        default:
          goto LABEL_49;
      }
    }
  }
  else
  {
    if (mSelector <= 1651010920)
    {
      if (mSelector == 1650682915 || mSelector == 1650751011)
      {
        *a5 = 0;
        return;
      }
      if (mSelector == 1651007861)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 341;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          v24 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v24 = &off_1E69A1B30;
          v24[2] = 561211770;
        }
        *(_DWORD *)a6 = 1;
        goto LABEL_45;
      }
LABEL_49:
      HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
      return;
    }
    switch(mSelector)
    {
      case 1651010921:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 359;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          v18 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v18 = &off_1E69A1B30;
          v18[2] = 561211770;
        }
        break;
      case 1651013225:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 350;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          v26 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v26 = &off_1E69A1B30;
          v26[2] = 561211770;
        }
        break;
      case 1651536495:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 368;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          v14 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v14 = &off_1E69A1B30;
          v14[2] = 561211770;
        }
        break;
      default:
        goto LABEL_49;
    }
  }
  *(_DWORD *)a6 = 0;
LABEL_45:
  v21 = 4;
LABEL_46:
  *a5 = v21;
}

void sub_1B58F272C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_Box::_GetNumberControls(HALS_Box *this)
{
  return 0;
}

uint64_t HALS_Box::_CopyControlByIndex(HALS_Box *this)
{
  return 0;
}

uint64_t HALS_Box::_CopyControlByDescription(HALS_Box *this)
{
  return 0;
}

void ___ZNK8HALS_Box17GetBoxControlListEjPvRj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 56) >> 2;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  if (v5 < v4)
    v4 = v5;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 216))(v2, v6);
      if (v8)
        *(_DWORD *)(v3 + 4 * v7++) = *((_DWORD *)v8 + 4);
      HALS_ObjectMap::ReleaseObject(v8, v9);
      v6 = (v6 + 1);
    }
    while (v4 != (_DWORD)v6);
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
}

void ___ZNK8HALS_Box45GetNumberOfControlsAndCopyIDsUsingClassFilterEjPKjPj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  HALB_Info *v13;
  _BOOL4 IsSubClass;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    do
    {
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 216))(v2, v5);
      v8 = (HALS_ObjectMap *)v6;
      v9 = *(unsigned int *)(a1 + 64);
      v10 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)v9)
        v11 = v10 == 0;
      else
        v11 = 1;
      if (v11)
        goto LABEL_11;
      v12 = 0;
      v13 = (HALB_Info *)*(unsigned int *)(v6 + 20);
      do
      {
        IsSubClass = HALB_Info::IsSubClass(v13, *(_DWORD *)(v10 + 4 * v12));
        if (IsSubClass)
          break;
        ++v12;
      }
      while (v12 < v9);
      if (IsSubClass)
LABEL_11:
        *(_DWORD *)(*(_QWORD *)(a1 + 56)
                  + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v8 + 4);
      HALS_ObjectMap::ReleaseObject(v8, v7);
      v5 = (v5 + 1);
    }
    while ((_DWORD)v5 != v4);
  }
}

uint64_t ___ZNK8HALS_Box17GetNumberControlsEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 208))(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B58F2940(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK8HALS_Box35GetNumberOfControlsUsingClassFilterEjPKj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  HALB_Info *v13;
  _BOOL4 IsSubClass;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    do
    {
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 216))(v2, v5);
      v8 = (HALS_ObjectMap *)v6;
      v9 = *(unsigned int *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)v9)
        v11 = v10 == 0;
      else
        v11 = 1;
      if (v11)
        goto LABEL_11;
      v12 = 0;
      v13 = (HALB_Info *)*(unsigned int *)(v6 + 20);
      do
      {
        IsSubClass = HALB_Info::IsSubClass(v13, *(_DWORD *)(v10 + 4 * v12));
        if (IsSubClass)
          break;
        ++v12;
      }
      while (v12 < v9);
      if (IsSubClass)
LABEL_11:
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      HALS_ObjectMap::ReleaseObject(v8, v7);
      v5 = (v5 + 1);
    }
    while ((_DWORD)v5 != v4);
  }
}

void HALS_Box::HALS_Box(HALS_Box *this, HALS_DeviceManager *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v7;
  unsigned int *v8;
  HALB_Mutex **v9;
  CFStringRef *v10;
  int v11;
  uint64_t v12;
  __CFString *v13;
  unsigned int *v14;
  int v15;
  char *v16;
  size_t v17;
  HALB_Mutex *v18;
  uint64_t v19;
  _DWORD *exception;
  char v22[4];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1633841016, 0, (uint64_t)a2, a5);
  *(_QWORD *)v7 = off_1E6972DB8;
  *(_QWORD *)(v7 + 48) = 0;
  v9 = (HALB_Mutex **)(v7 + 48);
  *(_QWORD *)(v7 + 64) = a3;
  v10 = (CFStringRef *)(v7 + 64);
  *(_QWORD *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_Box.cpp";
      v25 = 1024;
      v26 = 38;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::HALS_Box: all boxes have to have a UID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  *(_DWORD *)buf = 256;
  CACFString::GetCString(a3, (__CFString *)(v7 + 80), (char *)buf, v8);
  if (*v10)
    v11 = CFStringGetLength(*v10) + 1;
  else
    v11 = 1;
  *(_DWORD *)v22 = v11;
  MEMORY[0x1E0C80A78]();
  v13 = (__CFString *)&v22[-((v12 + 15) & 0x1FFFFFFF0) - 4];
  CACFString::GetCString(*v10, v13, v22, v14);
  v15 = *(_DWORD *)v22;
  v16 = (char *)operator new[]();
  v17 = (v15 + 27);
  snprintf(v16, v17, "com.apple.audio.box.%s", (const char *)v13);
  v18 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v18);
  *v9 = v18;
  snprintf(v16, v17, "com.apple.audio.box.%s.event", (const char *)v13);
  v19 = operator new();
  *((_QWORD *)this + 7) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v19, v16);
  MEMORY[0x1B5E50664](v16, 0x1000C8077774924);
}

void sub_1B58F2D44(_Unwind_Exception *a1)
{
  HALS_Object *v1;
  CACFString *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E50688](v4, 0x10A0C40CF3E2C79);
  MEMORY[0x1B5E50664](v3, 0x1000C8077774924);
  CACFString::~CACFString(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

CFIndex OS::CF::String::AsCString(CFIndex this, UInt8 *a2, uint64_t a3)
{
  const __CFString *v3;
  CFIndex usedBufLen;
  CFRange v7;

  *a2 = 0;
  usedBufLen = 1;
  v3 = *(const __CFString **)(this + 8);
  if (v3)
  {
    v7.length = CFStringGetLength(*(CFStringRef *)(this + 8));
    v7.location = 0;
    this = CFStringGetBytes(v3, v7, 0x8000100u, 0, 0, a2, a3 - 1, &usedBufLen);
    a2[usedBufLen] = 0;
  }
  return this;
}

void sub_1B58F3094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B58F322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DSP_ADM;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B58F35B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::~HALS_IOContext_MCP_Impl(HALS_IOContext_MCP_Impl *this)
{
  HALS_IOContext_MCP_Impl::~HALS_IOContext_MCP_Impl(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t i;
  const void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void **v8;

  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 59, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 58, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  std::unique_ptr<HALB_IOBufferManager_Server>::reset[abi:ne180100]((HALB_IOBufferManager_Server **)this + 30, 0);
  for (i = 216; i != 168; i -= 24)
  {
    v8 = (void **)((char *)this + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v3 = (const void *)*((_QWORD *)this + 14);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
    operator delete(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t HALS_IOContext_MCP_Impl::Initialize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 248) = a2;
  return this;
}

void HALS_IOContext_MCP_Impl::Deactivate(HALS_IOContext_MCP_Impl *this)
{
  int v2;
  uint64_t v3;
  HALB_Mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  HALB_Mutex *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD v23[4];
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;

  v27 = 0;
  v28 = 0;
  HALS_System::GetInstance(&v29, 0, &v27);
  v2 = **(_DWORD **)(*((_QWORD *)this + 5) + 64);
  v3 = MEMORY[0x1E0C809B0];
  v31 = MEMORY[0x1E0C809B0];
  v32 = 0x40000000;
  v33 = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
  v34 = &__block_descriptor_tmp_106;
  v35 = v29;
  v37 = 0x6F75747070647623;
  v36 = v2;
  v38 = 0;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)&v31);
  v5 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v28;
  if (v28)
  {
    v9 = (unint64_t *)&v28->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v25 = 0;
  v26 = 0;
  HALS_System::GetInstance(&v29, 0, &v25);
  v11 = **(_DWORD **)(*((_QWORD *)this + 5) + 64);
  v31 = v3;
  v32 = 0x40000000;
  v33 = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
  v34 = &__block_descriptor_tmp_106;
  v35 = v29;
  v37 = 0x696E707470647623;
  v36 = v11;
  v38 = 0;
  v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)&v31);
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((_QWORD *)this + 5);
  v20 = *(_QWORD *)(v19 + 80);
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 120))(v20);
    v19 = *((_QWORD *)this + 5);
  }
  v21 = *(_DWORD *)(v19 + 16);
  v22 = *((_QWORD *)this + 58);
  v23[0] = v3;
  v23[1] = 0x40000000;
  v23[2] = ___ZN23HALS_IOContext_MCP_Impl10DeactivateEv_block_invoke;
  v23[3] = &__block_descriptor_tmp_2363;
  v24 = v21;
  LOBYTE(v21) = atomic_load((unsigned __int8 *)(v22 + 32));
  if ((v21 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v22 + 33));
  dispatch_async(*(dispatch_queue_t *)v22, v23);
}

void sub_1B58F3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberStreams(HALS_IOContext_MCP_Impl *this, unsigned int a2)
{
  return -991146299 * ((*((_QWORD *)this + 3 * a2 + 25) - *((_QWORD *)this + 3 * a2 + 24)) >> 3);
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberInputStreamsOfType(uint64_t a1)
{
  return -991146299 * ((*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberActiveStreams(HALS_IOContext_MCP_Impl *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t *v4;

  v2 = 96;
  v3 = 88;
  if (a2)
    v3 = 64;
  v4 = *(int8x8_t **)((char *)this + v3);
  if (a2)
    v2 = 72;
  return std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(v4, 0, (uint64_t)&v4[*(_QWORD *)((char *)this + v2) >> 6], *(_QWORD *)((_BYTE *)this + v2) & 0x3F, 1);
}

uint64_t HALS_IOContext_MCP_Impl::IsStreamEnabledAtIndex(HALS_IOContext_MCP_Impl *this, int a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 64;
  v4 = 88;
  if (a2)
    v4 = 64;
  else
    v3 = (char *)this + 88;
  if (*((_QWORD *)v3 + 1) <= (unint64_t)a3)
    return 1;
  else
    return (*(_QWORD *)(*(_QWORD *)((char *)this + v4) + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
}

uint64_t HALS_IOContext_MCP_Impl::GetStreamLatencyAtIndex(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

__n128 HALS_IOContext_MCP_Impl::GetStreamInfoAtIndex(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int owning_device_for_stream;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v6 = *(_QWORD *)(a1 + 24 * a2 + 192) + 104 * a3;
  owning_device_for_stream = HALS_IOContext_MCP_Impl::get_owning_device_for_stream(a1, a2, a3);
  v8 = *(_QWORD *)(v6 + 32);
  v10 = *(_OWORD *)v6;
  result = *(__n128 *)(v6 + 16);
  *(_DWORD *)a4 = owning_device_for_stream;
  *(_DWORD *)(a4 + 4) = a2;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 32) = result;
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::GetSimpleStreamUsage(int8x8_t **this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  BOOL v6;

  v2 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[8], 0, (uint64_t)&this[8][(unint64_t)this[9] >> 6], this[9] & 0x3F, 1);
  v3 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[11], 0, (uint64_t)&this[11][(unint64_t)this[12] >> 6], this[12] & 0x3F, 1);
  if (v2 >= 1 && v3 > 0)
    return 6;
  if (v2)
    v5 = 1;
  else
    v5 = v3 <= 0;
  if (!v5)
    return 1;
  if (v3)
    v6 = 1;
  else
    v6 = v2 <= 0;
  if (v6)
    return 0;
  else
    return 2;
}

uint64_t HALS_IOContext_MCP_Impl::ActiveInputStreamsSecurelyMuted()
{
  return 0;
}

void HALS_IOContext_MCP_Impl::DeviceArrived(HALS_IOContext_MCP_Impl *this, HALS_Device *a2)
{
  const __CFString *v3;

  v3 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)a2 + 200))(a2);
  HALS_IOContext_MCP_Impl::reassert_description_for_device_change(this, v3);
}

uint64_t HALS_IOContext_MCP_Impl::CreateMicrophoneInfo()
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::CreateTapInfo()
{
  return 0;
}

BOOL HALS_IOContext_MCP_Impl::IsIORunning(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2;
  int v3;

  v2 = 0x676C6F6274727374;
  v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) != 0;
}

uint64_t HALS_IOContext_Impl::IsIORunningNotInCatchupMode(HALS_IOContext_Impl *this)
{
  return (*(uint64_t (**)(HALS_IOContext_Impl *))(*(_QWORD *)this + 152))(this);
}

BOOL HALS_IOContext_MCP_Impl::IsIOThreadRunning(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2;
  int v3;

  v2 = 0x676C6F6274727374;
  v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) != 0;
}

uint64_t HALS_IOContext_MCP_Impl::HasThreadError(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::PauseIO(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::AreClientBuffersEmpty(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::GetServerIOStatusTimestamps(HALS_IOContext_MCP_Impl *this)
{
  return (uint64_t)this + 272;
}

void HALS_IOContext_MCP_Impl::UpdateContext(HALS_IOContext_MCP_Impl *this)
{
  const void *v1;
  AMCP::Log::Scope_Registry *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  NSObject **v9;
  _BYTE v10[10];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (const void *)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = (AMCP::Log::Scope_Registry *)HALS_IOContext_MCP_Impl::SetComposition(this, v1);
    if ((_DWORD)v2)
    {
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
      v3 = *(std::__shared_weak_count **)v10;
      v4 = *v9;
      if (*(_QWORD *)v10)
      {
        v5 = (unint64_t *)(*(_QWORD *)v10 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v7 = pthread_self();
        v8 = pthread_mach_thread_np(v7);
        LODWORD(v9) = 67109634;
        HIDWORD(v9) = v8;
        *(_WORD *)v10 = 2080;
        *(_QWORD *)&v10[2] = "HALS_IOContext_MCP_Impl.cpp";
        v11 = 1024;
        v12 = 358;
        _os_log_debug_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Error setting IOC composition.", (uint8_t *)&v9, 0x18u);
      }
    }
  }
}

unint64_t HALS_IOContext_MCP_Impl::GetIOBufferFrameSize(HALS_IOContext_MCP_Impl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t simple_mcp;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    return *((unsigned int *)this + 62);
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return *((unsigned int *)this + 62);
  v4 = v3;
  if (*((_QWORD *)this + 6))
  {
    simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(this);
    *((_DWORD *)this + 62) = simple_mcp;
  }
  else
  {
    simple_mcp = *((unsigned int *)this + 62);
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_mcp;
}

unint64_t HALS_IOContext_MCP_Impl::GetIOBufferForStreamAtIndex(HALB_IOBufferManager_Server **this, unsigned int a2, unsigned int a3)
{
  unsigned int v4;

  return HALB_IOBufferManager_Server::GetIOBuffer(this[30], a2, a3, &v4);
}

uint64_t HALS_IOContext_MCP_Impl::GetIORunningState(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

void HALS_IOContext_MCP_Impl::SetIOIsRunning(HALS_IOContext_MCP_Impl *this)
{
  __assert_rtn("SetIOIsRunning", "HALS_IOContext_MCP_Impl.cpp", 1234, "false");
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithIOThreadUnlocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithControlAndIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

BOOL HALS_IOContext_MCP_Impl::ThreadHasBeenStopped(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2;
  int v3;

  v2 = 0x676C6F6274727374;
  v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) == 0;
}

uint64_t HALS_IOContext_MCP_Impl::CopyWorkIntervalPort(HALS_IOContext_MCP_Impl *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2 && (v2 = std::__shared_weak_count::lock(v2), (v13 = v2) != 0) && *((_QWORD *)this + 6))
  {
    HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)buf, this);
    v3 = caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_workgroup_managed *)buf);
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)buf);
  }
  else
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = *(std::__shared_weak_count **)v15;
    v5 = **(NSObject ***)buf;
    if (*(_QWORD *)v15)
    {
      v6 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)v15 = 2080;
      *(_QWORD *)&v15[2] = "HALS_IOContext_MCP_Impl.cpp";
      v16 = 1024;
      v17 = 1048;
      _os_log_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOContext_MCP_Impl::CopyWorkIntervalPort - Workgroup Context pointer is invalid.", buf, 0x18u);
    }
    v3 = 0;
  }
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v3;
}

void sub_1B58F4010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::MicInputIsEnabled(HALS_IOContext_MCP_Impl *this)
{
  return 1;
}

uint64_t HALS_IOContext_MCP_Impl::TapInputIsEnabled(HALS_IOContext_MCP_Impl *this)
{
  return 1;
}

uint64_t HALS_IOContext_MCP_Impl::WaitForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::IsWaitingForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::BlockStartOnTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::StopWaitingForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

double HALS_IOContext_MCP_Impl::GetCurrentTime(HALS_IOContext_MCP_Impl *this, AudioTimeStamp *a2)
{
  double result;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  result = 0.0;
  *(_OWORD *)&a2->mSMPTETime.mSubframes = 0u;
  *(_OWORD *)&a2->mSMPTETime.mHours = 0u;
  *(_OWORD *)&a2->mSampleTime = 0u;
  *(_OWORD *)&a2->mRateScalar = 0u;
  v4 = *((_QWORD *)this + 32);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4))
  {
    (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 32) + 32))(v8);
    if (*((_QWORD *)&v8[0] + 1))
    {
      v6 = v8[1];
      *(_OWORD *)&a2->mSampleTime = v8[0];
      *(_OWORD *)&a2->mRateScalar = v6;
      result = *(double *)&v9;
      v7 = v10;
      *(_OWORD *)&a2->mSMPTETime.mSubframes = v9;
      *(_OWORD *)&a2->mSMPTETime.mHours = v7;
    }
  }
  return result;
}

double HALS_IOContext_MCP_Impl::TranslateTime(HALS_IOContext_MCP_Impl *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int8x8_t *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double result;
  __int128 v12;
  AudioTimeStamp v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[31];
  char v20;
  AudioTimeStamp v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = 0x676C6F6274726E74;
  v15 = 0;
  v13 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v5 && (v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v7 = v6;
    v8 = (int8x8_t *)*((_QWORD *)this + 6);
    if (v8)
    {
      v21 = v13;
      AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>((AMCP::Log::Scope_Registry *)&v16, v8, (unsigned int *)&v14, (__int128 *)&v21);
    }
    else
    {
      v16 = 0;
      v20 = 0;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v16 = 0;
    v20 = 0;
  }
  *(_OWORD *)&v21.mSampleTime = v17;
  *(_OWORD *)&v21.mRateScalar = v18;
  *(_OWORD *)&v21.mSMPTETime.mSubframes = *(_OWORD *)v19;
  result = *(double *)&v19[15];
  *(_OWORD *)((char *)&v21.mSMPTETime.mFlags + 3) = *(_OWORD *)&v19[15];
  if (v20)
  {
    LOBYTE(a3->mSampleTime) = v16;
    v12 = *(_OWORD *)&v21.mRateScalar;
    *(_OWORD *)((char *)&a3->mSampleTime + 1) = *(_OWORD *)&v21.mSampleTime;
    *(_OWORD *)((char *)&a3->mRateScalar + 1) = v12;
    *(_OWORD *)((char *)&a3->mSMPTETime.mSubframes + 1) = *(_OWORD *)&v21.mSMPTETime.mSubframes;
    result = *(double *)((char *)&v21.mSMPTETime.mFlags + 3);
    *(_OWORD *)&a3->mSMPTETime.mHours = *(_OWORD *)((char *)&v21.mSMPTETime.mFlags + 3);
  }
  return result;
}

void sub_1B58F4238(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B58F423CLL);
  __clang_call_terminate(a1);
}

void HALS_IOContext_MCP_Impl::Server_Internal_StartIOProcID(HALS_IOContext_MCP_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, unsigned int a4)
{
  int v4;
  uint64_t v5;
  UInt64 mHostTime;
  HALS_IOContext_MCP_Impl *v7;
  char v8;
  uint64_t v9;
  mach_port_name_t name;

  v4 = (a4 >> 3) & 1;
  if (!a3)
    v4 = 0;
  if (!a2)
  {
    *((_DWORD *)this + 6) = 0;
    v9 = 0x676C6F6273747077;
    name = 0;
    HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>((uint64_t)this, (unsigned int *)&v9);
    return;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 112);
  if (v5 && !*(_BYTE *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 32) = 1;
    if (v4)
      goto LABEL_7;
LABEL_10:
    v7 = this;
    mHostTime = 0;
    v8 = 0;
    goto LABEL_11;
  }
  if (!v4)
    goto LABEL_10;
LABEL_7:
  mHostTime = a3->mHostTime;
  v7 = this;
  v8 = 1;
LABEL_11:
  HALS_IOContext_MCP_Impl::start((uint64_t)&v9, (uint64_t)v7, mHostTime, v8);
  HALB_MachPort::DestroyPort(name, 1, 0);
}

uint64_t HALS_IOContext_MCP_Impl::Server_Internal_StopIOProcID(HALS_IOContext_MCP_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _DWORD *exception;
  unsigned int v7[3];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *((_QWORD *)this + 5);
    if (*(_QWORD *)(v3 + 112)
      && *(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v3 + 136) != a2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v7[0] = 136315394;
        *(_QWORD *)&v7[1] = "HALS_IOContext_MCP_Impl.cpp";
        v8 = 1024;
        v9 = 735;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::StopIOProcID: failed to stop because the IOProcID wasn't nullptr or wasn't registered", (uint8_t *)v7, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    HALS_IOContext_MCP_Impl::stop((uint64_t)this);
  }
  else
  {
    strcpy((char *)v7, "wppsbolg");
    BYTE1(v7[2]) = 0;
    HIWORD(v7[2]) = 0;
    HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>((uint64_t)this, v7);
  }
  strcpy((char *)v7, "tsrtbolg");
  BYTE1(v7[2]) = 0;
  HIWORD(v7[2]) = 0;
  result = HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, v7);
  if ((_DWORD)result != 2)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 112);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 32))
        *(_BYTE *)(v5 + 32) = 0;
    }
  }
  return result;
}

void HALS_IOContext_MCP_Impl::PowerChanged(_QWORD *a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = 0x676C6F6269707073;
  v3 = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>(a1, (unsigned int *)&v2, a2);
}

uint64_t HALS_IOContext_MCP_Impl::PowerHintChanged(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

void HALS_IOContext_MCP_Impl::SleepingIsAllowedChanged(HALS_IOContext_MCP_Impl *this, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  void **v15;
  std::runtime_error *exception;
  char v17;
  CFTypeRef cf;
  void *__p[2];
  char v20;
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 64);
  if (*(unsigned __int8 *)(v2 + 44) != a2)
  {
    *(_BYTE *)(v2 + 44) = a2;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (v4)
    {
      v4 = std::__shared_weak_count::lock(v4);
      v5 = v4;
      if (v4)
      {
        v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
        if (v4)
        {
          AMCP::Core::Core::set_simple_property_value<1936484705u>((int8x8_t *)v4, &v17);
LABEL_14:
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
      }
    }
    else
    {
      v5 = 0;
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v22;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v22)
    {
      v8 = (unint64_t *)(*(_QWORD *)v22 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      v14 = *(_DWORD *)(*((_QWORD *)this + 5) + 16);
      HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)this);
      if (!cf)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
      if (v20 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "HALS_IOContext_MCP_Impl.cpp";
      v23 = 1024;
      v24 = 121;
      v25 = 1024;
      v26 = v14;
      v27 = 2080;
      v28 = v15;
      _os_log_debug_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
      if (v20 < 0)
        operator delete(__p[0]);
      if (cf)
        CFRelease(cf);
    }
    if (v5)
      goto LABEL_14;
  }
}

void sub_1B58F46DC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOContext_MCP_Impl::GetTransportState(HALS_IOContext_MCP_Impl *this)
{
  return 2;
}

uint64_t HALS_IOContext_MCP_Impl::GetMuteState()
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::SetComposition(HALS_IOContext_MCP_Impl *this, CFTypeRef cf)
{
  HALS_IOContext_MCP_Impl *v3;
  const __CFDictionary *v4;
  NSObject **v5;
  HALS_ObjectMap *v6;
  unsigned int *v7;
  HALS_Object *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;
  HALB_Mutex *v15;
  uint64_t v16;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  _QWORD v24[6];
  CFTypeRef v25;
  unint64_t v26;
  const __CFDictionary *v27;
  __int128 v28;
  uint64_t v29;
  CFTypeRef cfa;
  __int128 v31;
  uint64_t v32;
  std::string valuePtr;
  std::logic_error v34;
  std::logic_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  const __CFDictionary *v42;
  uint8_t buf[8];
  __int128 v44;
  __int128 v45;
  const char *v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v42 = 0;
LABEL_26:
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v20;
      LOWORD(v44) = 2080;
      *(_QWORD *)((char *)&v44 + 2) = "HALS_IOContext_MCP_Impl.cpp";
      WORD5(v44) = 1024;
      HIDWORD(v44) = 479;
      LOWORD(v45) = 2080;
      *(_QWORD *)((char *)&v45 + 2) = "not (description)";
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s SetComposition called with null description", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"SetComposition called with null description", (uint64_t)&valuePtr);
    std::logic_error::logic_error(&v34, &valuePtr);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v36 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *((_QWORD *)&v45 + 1) = "virtual OSStatus HALS_IOContext_MCP_Impl::SetComposition(CFDictionaryRef)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
    v47 = 479;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    cfa = off_1E69A20A0;
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&cfa);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v3 = this;
  CFRetain(cf);
  this = applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v42, cf);
  v4 = v42;
  if (!v42)
    goto LABEL_26;
  CFRetain(v42);
  v27 = v4;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v35, "device id");
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
  cfa = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cfa)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(buf, v4, v35.__vftable, &cfa);
  v5 = *(NSObject ***)buf;
  if (!*(_QWORD *)buf)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (HALS_ObjectMap *)applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
  CFRelease(v5);
  if (cfa)
    CFRelease(cfa);
  if (v35.__vftable)
    CFRelease(v35.__vftable);
  v7 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v6);
  if (v7)
  {
    v9 = v7[36];
    v10 = (unint64_t)v7[37] << 32;
  }
  else
  {
    v10 = 0x200000000;
    v9 = 1;
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v8);
  CFRelease(v4);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&v44 = buf;
  *((_QWORD *)&v44 + 1) = 0x2000000000;
  LODWORD(v45) = 0;
  v35.__vftable = 0;
  v11 = *((_QWORD *)v3 + 7);
  if (!v11 || *(_QWORD *)(v11 + 8) == -1)
  {
    v12 = 0;
  }
  else
  {
    v12 = operator new();
    *(_QWORD *)v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v3;
    *(_DWORD *)v12 = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(v3);
    *(_QWORD *)(v12 + 4) = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(*(_QWORD **)(v12 + 16));
    v35.__vftable = (std::logic_error_vtbl *)v12;
  }
  v13 = *((_QWORD *)v3 + 5);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 1174405120;
  v24[2] = ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke;
  v24[3] = &unk_1E69732C0;
  v24[5] = v3;
  v14 = v42;
  if (v42)
    CFRetain(v42);
  v25 = v14;
  v26 = v10 | v9;
  v24[4] = buf;
  v15 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
  HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v24);
  v16 = *(unsigned int *)(v44 + 24);
  if (v25)
    CFRelease(v25);
  if (v12)
  {
    Buffer_Size_Notifier::~Buffer_Size_Notifier((Buffer_Size_Notifier *)v12);
    MEMORY[0x1B5E50688]();
  }
  _Block_object_dispose(buf, 8);
  if (v42)
    CFRelease(v42);
  return v16;
}

void sub_1B58F4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,Buffer_Size_Notifier *a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  std::unique_ptr<Buffer_Size_Notifier>::reset[abi:ne180100](&a35);
  _Block_object_dispose((const void *)(v38 - 128), 8);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v38 - 136));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::GetComposition(HALS_IOContext_MCP_Impl *this)
{
  return *((_QWORD *)this + 14);
}

double HALS_IOContext_MCP_Impl::GetBufferFrameSizeRange(HALS_IOContext_MCP_Impl *this, AudioValueRange *a2)
{
  unint64_t simple_mcp;
  double result;

  simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(this);
  result = (double)simple_mcp;
  a2->mMinimum = (double)simple_mcp;
  a2->mMaximum = (double)HIDWORD(simple_mcp);
  return result;
}

unint64_t HALS_IOContext_MCP_Impl::SetBufferFrameSize(HALS_IOContext_MCP_Impl *this, int a2, char a3)
{
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;
  int v7;

  v4 = 0;
  v7 = a2;
  if ((a3 & 1) == 0)
  {
    v4 = (_QWORD *)operator new();
    v4[2] = this;
    *(_DWORD *)v4 = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(this);
    *(_QWORD *)((char *)v4 + 4) = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(this);
  }
  HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>(this, &v7);
  result = HALS_IOContext_MCP_Impl::GetIOBufferFrameSize(this);
  if (v4)
  {
    Buffer_Size_Notifier::~Buffer_Size_Notifier((Buffer_Size_Notifier *)v4);
    return MEMORY[0x1B5E50688](v6);
  }
  return result;
}

void sub_1B58F4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Buffer_Size_Notifier *a9)
{
  std::unique_ptr<Buffer_Size_Notifier>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::SetIOCycleUsage(HALS_IOContext_MCP_Impl *this, float a2)
{
  float simple_mcp;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  HALS_NotificationManager *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  int v23;
  void (*p_p)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  unint64_t v25;
  unint64_t *v26;
  std::runtime_error *exception;
  float v28;
  void *__p;
  std::__shared_weak_count *v30;
  char v31;
  CFTypeRef cf;
  int v33;
  _BYTE buf[32];
  void (*v35)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(this);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v5)
  {
    v5 = std::__shared_weak_count::lock(v5);
    v6 = v5;
    if (v5)
    {
      v7 = (int8x8_t *)*((_QWORD *)this + 6);
      if (v7)
      {
        cf = (CFTypeRef)0x676C6F626E637963;
        v33 = 0;
        if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&cf))
          goto LABEL_20;
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, v7, (unsigned int *)&cf);
        v8 = __p;
        if (__p)
        {
          v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
          {
            AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v28);
            goto LABEL_8;
          }
          v25 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v25))
          {
            memset(buf, 0, sizeof(buf));
            *(float *)buf = a2;
            v35 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)buf);
            if (v35)
              v35(0, (uint64_t)buf, 0, 0);
LABEL_8:
            v10 = v30;
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              goto LABEL_43;
            }
            goto LABEL_20;
          }
        }
        v10 = v30;
        if (v30)
        {
          v26 = (unint64_t *)&v30->__shared_owners_;
          do
            v12 = __ldaxr(v26);
          while (__stlxr(v12 - 1, v26));
LABEL_43:
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
LABEL_20:
        v17 = (unint64_t *)&v6->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        goto LABEL_24;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v13 = *(std::__shared_weak_count **)&buf[8];
  v14 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v21 = pthread_self();
    v22 = pthread_mach_thread_np(v21);
    v23 = *(_DWORD *)(*((_QWORD *)this + 5) + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)this);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
    if (v31 >= 0)
      p_p = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))&__p;
    else
      p_p = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))__p;
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v22;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 121;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v23;
    *(_WORD *)&buf[30] = 2080;
    v35 = p_p;
    _os_log_debug_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v31 < 0)
      operator delete(__p);
    if (cf)
      CFRelease(cf);
  }
  if (v6)
    goto LABEL_20;
LABEL_24:
  if (HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(this) != simple_mcp)
  {
    v19 = (unsigned int *)*((_QWORD *)this + 5);
    v20 = (HALS_NotificationManager *)v19[18];
    if (!(_DWORD)v20)
      v20 = (HALS_NotificationManager *)v19[4];
    strcpy(buf, "cycnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v19, v20, 0, 1, (const AudioObjectPropertyAddress *)buf);
  }
}

void sub_1B58F51D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t **HALS_IOContext_MCP_Impl::GetMasterDevice(HALS_IOContext_MCP_Impl *this)
{
  uint64_t **hal_object_id_for_device_uid;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 32) + 24))(__p);
  v9 = 0;
  v10 = 0;
  HALS_System::GetInstance(&v11, 0, &v9);
  hal_object_id_for_device_uid = HALS_IOContext_Manager::get_hal_object_id_for_device_uid(*(_QWORD *)(v11 + 1392), (unsigned __int8 *)__p);
  v2 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v14 < 0)
    operator delete(__p[0]);
  return hal_object_id_for_device_uid;
}

void sub_1B58F537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::SetStreamUsage(HALS_IOContext_MCP_Impl *a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a3 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "HALS_IOContext_MCP_Impl.cpp";
      v15 = 1024;
      v16 = 555;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v4 = ((unint64_t)a3 + 0x3FFFFFFFCLL) >> 2;
  if (*a2 >= v4)
    v4 = v4;
  else
    v4 = *a2;
  if (-991146299 * ((*((_QWORD *)a1 + 3 * a4 + 25) - *((_QWORD *)a1 + 3 * a4 + 24)) >> 3) < v4)
    v4 = -991146299 * ((*((_QWORD *)a1 + 3 * a4 + 25) - *((_QWORD *)a1 + 3 * a4 + 24)) >> 3);
  if (v4)
  {
    v5 = 0;
    v6 = 88;
    if (a4)
      v6 = 64;
    v7 = *(_QWORD *)((char *)a1 + v6);
    do
    {
      v8 = v5 >> 6;
      v9 = 1 << v5;
      if (a2[v5 + 1])
        v10 = *(_QWORD *)(v7 + 8 * v8) | v9;
      else
        v10 = *(_QWORD *)(v7 + 8 * v8) & ~v9;
      *(_QWORD *)(v7 + 8 * v8) = v10;
      ++v5;
    }
    while (v4 != v5);
  }
  HALS_IOContext_MCP_Impl::UpdateContext(a1);
  return 0;
}

void sub_1B58F5540(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B58F5478);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::GetStreamUsage(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 24 * a4 + 200) - *(_QWORD *)(a1 + 24 * a4 + 192)) >> 3);
  v5 = 330382100 * ((uint64_t)(*(_QWORD *)(a1 + 24 * a4 + 200) - *(_QWORD *)(a1 + 24 * a4 + 192)) >> 3)
     + 4;
  if (v5 > a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "HALS_IOContext_MCP_Impl.cpp";
      v15 = 1024;
      v16 = 946;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_MCP_Impl::GetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  *a2 = v4;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = a1 + 64;
    v8 = 88;
    if (a4)
      v8 = 64;
    else
      v7 = a1 + 88;
    v9 = *(_QWORD *)(v7 + 8);
    do
    {
      if (v9 <= v6)
        LODWORD(v10) = 1;
      else
        v10 = (*(_QWORD *)(*(_QWORD *)(a1 + v8) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
      a2[++v6] = v10;
    }
    while (v4 != v6);
  }
  return v5;
}

uint64_t HALS_IOContext_MCP_Impl::SetIOProcStreamUsage(HALS_IOContext_MCP_Impl *this, const AudioHardwareIOProcStreamUsage *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v4;
  UInt32 mNumberStreams;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *exception;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "HALS_IOContext_MCP_Impl.cpp";
      v16 = 1024;
      v17 = 572;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyIOProcStreamUsage", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v4 = ((unint64_t)a3 + 0x3FFFFFFF4) >> 2;
  mNumberStreams = a2->mNumberStreams;
  if (mNumberStreams >= v4)
    v4 = v4;
  else
    v4 = mNumberStreams;
  if (-991146299 * ((*((_QWORD *)this + 3 * a4 + 25) - *((_QWORD *)this + 3 * a4 + 24)) >> 3) < v4)
    v4 = -991146299 * ((*((_QWORD *)this + 3 * a4 + 25) - *((_QWORD *)this + 3 * a4 + 24)) >> 3);
  if (v4)
  {
    v6 = 0;
    v7 = 88;
    if (a4)
      v7 = 64;
    v8 = *(_QWORD *)((char *)this + v7);
    do
    {
      v9 = v6 >> 6;
      v10 = 1 << v6;
      if (a2->mStreamIsOn[v6])
        v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
      else
        v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
      *(_QWORD *)(v8 + 8 * v9) = v11;
      ++v6;
    }
    while (v4 != v6);
  }
  HALS_IOContext_MCP_Impl::UpdateContext(this);
  return 0;
}

void sub_1B58F5898(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B58F57D0);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::GetIOProcStreamUsage(HALS_IOContext_MCP_Impl *this, AudioHardwareIOProcStreamUsage *a2, unsigned int *a3, char a4)
{
  uint64_t v5;
  HALB_Mutex *v6;
  _DWORD *exception;
  int v8;
  _QWORD v9[9];
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v5 = *((_QWORD *)this + 5);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK23HALS_IOContext_MCP_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke;
  v9[3] = &unk_1E69732F8;
  v10 = a4;
  v9[6] = this;
  v9[7] = a3;
  v9[8] = a2;
  v9[4] = &v15;
  v9[5] = &v11;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  if (*((_DWORD *)v12 + 6))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v8 = *((_DWORD *)v12 + 6);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v8;
  }
  *a3 = *((_DWORD *)v16 + 6);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_1B58F59E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::SetIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this, os_workgroup_s *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  HALS_NotificationManager *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  int v27;
  uint64_t (*p_p)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *);
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t *v34;
  std::runtime_error *exception;
  void *__p;
  std::__shared_weak_count *v37;
  char v38;
  CFTypeRef cf;
  int v40;
  uint64_t v41;
  caulk::mach::details *v42;
  __int128 v43;
  _BYTE v44[25];
  char v45;
  uint8_t buf[8];
  __int128 v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (!*((_QWORD *)this + 6))
        goto LABEL_28;
      caulk::mach::os_workgroup_interval_managed::from_get((caulk::mach::os_workgroup_interval_managed *)&v41, a2);
      v7 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      if (v7)
      {
        v7 = std::__shared_weak_count::lock(v7);
        v8 = v7;
        if (v7)
        {
          v9 = (int8x8_t *)*((_QWORD *)this + 6);
          if (v9)
          {
            cf = (CFTypeRef)0x676C6F6277676E70;
            v40 = 0;
            if (!AMCP::Core::Core::is_property_settable(v9, (const AMCP::Address *)&cf))
              goto LABEL_23;
            AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, v9, (unsigned int *)&cf);
            v10 = __p;
            if (__p)
            {
              v11 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
              if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11))
              {
                AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(v10, (uint64_t)&v41);
                goto LABEL_11;
              }
              v29 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
              if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v29))
              {
                v47 = 0uLL;
                v48 = 0;
                v49 = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
                v30 = operator new();
                v32 = caulk::mach::details::retain_os_object(v42, v31);
                v33 = *(_OWORD *)v44;
                *(_OWORD *)(v30 + 16) = v43;
                *(_OWORD *)(v30 + 32) = v33;
                *(_OWORD *)(v30 + 41) = *(_OWORD *)&v44[9];
                *(_QWORD *)v30 = MEMORY[0x1E0DDB768] + 16;
                *(_QWORD *)(v30 + 8) = v32;
                *(_BYTE *)(v30 + 57) = v45;
                *(_QWORD *)buf = v30;
                AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)buf);
                if (v49)
                  v49(0, (uint64_t)buf, 0, 0);
LABEL_11:
                v12 = v37;
                if (v37)
                {
                  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                  do
                    v14 = __ldaxr(p_shared_owners);
                  while (__stlxr(v14 - 1, p_shared_owners));
                  goto LABEL_47;
                }
                goto LABEL_23;
              }
            }
            v12 = v37;
            if (v37)
            {
              v34 = (unint64_t *)&v37->__shared_owners_;
              do
                v14 = __ldaxr(v34);
              while (__stlxr(v14 - 1, v34));
LABEL_47:
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
LABEL_23:
            v19 = (unint64_t *)&v8->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
LABEL_27:
            caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v41);
            v21 = (unsigned int *)*((_QWORD *)this + 5);
            v22 = (HALS_NotificationManager *)v21[4];
            v41 = 0x676C6F626F737767;
            LODWORD(v42) = 0;
            HALS_Object::PropertiesChanged((HALS_Object *)v21, v22, 0, 1, (const AudioObjectPropertyAddress *)&v41);
LABEL_28:
            v23 = (unint64_t *)&v6->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
      }
      else
      {
        v8 = 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = (std::__shared_weak_count *)v47;
      v16 = **(NSObject ***)buf;
      if ((_QWORD)v47)
      {
        v17 = (unint64_t *)(v47 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v25 = pthread_self();
        v26 = pthread_mach_thread_np(v25);
        v27 = *(_DWORD *)(*((_QWORD *)this + 5) + 16);
        HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)this);
        if (!cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
        if (v38 >= 0)
          p_p = (uint64_t (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))&__p;
        else
          p_p = (uint64_t (*)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *))__p;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v26;
        LOWORD(v47) = 2080;
        *(_QWORD *)((char *)&v47 + 2) = "HALS_IOContext_MCP_Impl.cpp";
        WORD5(v47) = 1024;
        HIDWORD(v47) = 121;
        LOWORD(v48) = 1024;
        *(_DWORD *)((char *)&v48 + 2) = v27;
        HIWORD(v48) = 2080;
        v49 = p_p;
        _os_log_debug_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
        if (v38 < 0)
          operator delete(__p);
        if (cf)
          CFRelease(cf);
      }
      if (!v8)
        goto LABEL_27;
      goto LABEL_23;
    }
  }
}

void sub_1B58F5E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOContext_MCP_Impl::GetIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  if (*((_QWORD *)this + 6))
  {
    HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)v9, this);
    v5 = v10;
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v9);
  }
  else
  {
    v5 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t HALS_IOContext_MCP_Impl::CopyIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v10[8];
  caulk::mach::details *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  if (*((_QWORD *)this + 6))
  {
    HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)v10, this);
    v6 = caulk::mach::details::retain_os_object(v11, v5);
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v10);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t HALS_IOContext_MCP_Impl::GetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::GetHandleOverloadWithCatchup(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

__n128 HALS_IOContext_MCP_Impl::GetStreamInfo(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unsigned int owning_device_for_stream;
  uint64_t v19;
  __n128 result;
  __int128 v21;

  v5 = a3 / 0x38;
  v6 = a1 + 24 * a5;
  v7 = *(_QWORD *)(v6 + 192);
  v8 = *(_QWORD *)(v6 + 200);
  v9 = (_QWORD *)(v6 + 192);
  v10 = -991146299 * ((unint64_t)(v8 - v7) >> 3);
  if (a3 / 0x38 >= v10)
    v5 = v10;
  *a4 = v5;
  if (v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = a2 + 8;
    do
    {
      v17 = (__int128 *)(*v9 + v14);
      owning_device_for_stream = HALS_IOContext_MCP_Impl::get_owning_device_for_stream(a1, a5, v15);
      v19 = *((_QWORD *)v17 + 4);
      v21 = *v17;
      result = (__n128)v17[1];
      *(_DWORD *)(v16 - 8) = owning_device_for_stream;
      *(_DWORD *)(v16 - 4) = a5;
      *(_QWORD *)v16 = 0;
      *(_OWORD *)(v16 + 8) = v21;
      *(_QWORD *)(v16 + 40) = v19;
      *(__n128 *)(v16 + 24) = result;
      ++v15;
      v16 += 56;
      v14 += 104;
    }
    while (v15 < *a4);
  }
  return result;
}

double HALS_IOContext_MCP_Impl::GetActualSampleRate(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 32);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2))
    return 0.0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 152))(*((_QWORD *)this + 32));
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::GetSafetyOffset(HALS_IOContext_MCP_Impl *this, uint64_t a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 32);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
    if ((_DWORD)result)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 32) + 144))(*((_QWORD *)this + 32), a2);
  }
  return result;
}

std::__shared_weak_count *HALS_IOContext_MCP_Impl::GetOwningDeviceID(const __CFDictionary **this)
{
  CFComparisonResult v2;
  HALS_Object *v3;
  unsigned int *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  CFTypeRef cf;
  const __CFString *v17;

  if (this[14])
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v14, "uid");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "");
    applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v17, this[14], v14, &cf);
    if (cf)
      CFRelease(cf);
    if (v14)
      CFRelease(v14);
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, "");
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v14, "");
  v2 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v17, (const __CFString **)&v14);
  if (v14)
    CFRelease(v14);
  if (v2)
  {
    v12 = 0;
    v13 = 0;
    HALS_System::GetInstance(&v14, 0, &v12);
    v4 = (unsigned int *)HALS_System::CopyDeviceByUID((HALS_System *)v14, v17, 0);
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v13;
    if (!v13)
      goto LABEL_19;
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!v4)
      {
LABEL_22:
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v4, v3);
        if (v4)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else
    {
LABEL_19:
      if (!v4)
        goto LABEL_22;
    }
    v8 = (std::__shared_weak_count *)v4[4];
    goto LABEL_22;
  }
LABEL_23:
  v8 = 0;
LABEL_24:
  if (v17)
    CFRelease(v17);
  return v8;
}

void sub_1B58F6364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  applesauce::CF::StringRef::~StringRef((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

void HALS_IOContext_Impl::GetHostedDSPProcessorPropertySetInterface(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_IOContext_Impl::ShouldBlockStartOnTapStart(HALS_IOContext_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_Impl::CountTapsForUnitTests(HALS_IOContext_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_Impl::Start_ActivateDSP(HALS_IOContext_Impl *this)
{
  return 0;
}

uint64_t **HALS_IOContext_MCP_Impl::get_owning_device_for_stream(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  os_unfair_lock_s *v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  const char *v23;
  int64_t v24;
  int v25;
  std::string *p_p;
  int64_t v27;
  uint64_t **hal_object_id_for_device_uid;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  std::string *v36;
  int64_t v37;
  char *v38;
  char *v39;
  std::runtime_error *exception;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::string v44;
  std::string __p;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t v49;
  const __CFString *v50;
  char v51;

  v48 = 0x676C6F626E756964;
  LODWORD(v49) = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6 && (v7 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v8 = v7;
    v9 = *(int8x8_t **)(a1 + 48);
    if (v9)
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&v50, v9, (unsigned int *)&v48);
    else
      v50 = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v50 = 0;
  }
  v46 = 0;
  v47 = 0;
  HALS_System::GetInstance(&v44, 0, &v46);
  if (!v50)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = *(os_unfair_lock_s **)(v44.__r_.__value_.__r.__words[0] + 1392);
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v50);
  os_unfair_lock_lock(v12 + 4);
  HALS_IOContext_Manager_Impl::find_wires_for_context(&v48, (uint64_t)&v12[6], (uint64_t)&__p);
  os_unfair_lock_unlock(v12 + 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v16 = v47;
  if (v47)
  {
    v17 = (unint64_t *)&v47->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v48;
  v20 = v49;
  if (v48 == v49)
  {
LABEL_69:
    hal_object_id_for_device_uid = 0;
  }
  else
  {
    v21 = a2 == 0;
    v22 = a2 == 0;
    if (a2)
      v23 = "-in";
    else
      v23 = "-out";
    if (v21)
      v24 = 4;
    else
      v24 = 3;
    v25 = *v23;
    while (1)
    {
      if (*(_QWORD *)(v19 + 64) == a3 && *(_DWORD *)(v19 + 72) == v22)
      {
        if (*(char *)(v19 + 63) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 40), *(_QWORD *)(v19 + 48));
        else
          __p = *(std::string *)(v19 + 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = __p.__r_.__value_.__l.__size_;
        if (v27 >= v24)
        {
          v35 = (char *)p_p + v27;
          v36 = p_p;
          do
          {
            v37 = v27 - v24;
            if (v37 == -1)
              break;
            v38 = (char *)memchr(v36, v25, v37 + 1);
            if (!v38)
              break;
            v39 = v38;
            if (!memcmp(v38, v23, v24))
            {
              if (v39 != v35 && v39 - (char *)p_p != -1)
              {
                std::string::basic_string(&v44, &__p, 0, v39 - (char *)p_p, (std::allocator<char> *)&v51);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = v44;
              }
              break;
            }
            v36 = (std::string *)(v39 + 1);
            v27 = v35 - (v39 + 1);
          }
          while (v27 >= v24);
        }
        v42 = 0;
        v43 = 0;
        HALS_System::GetInstance(&v44, 0, &v42);
        hal_object_id_for_device_uid = HALS_IOContext_Manager::get_hal_object_id_for_device_uid(*(_QWORD *)(v44.__r_.__value_.__r.__words[0] + 1392), (unsigned __int8 *)&__p);
        v29 = (std::__shared_weak_count *)v44.__r_.__value_.__l.__size_;
        if (v44.__r_.__value_.__l.__size_)
        {
          v30 = (unint64_t *)(v44.__r_.__value_.__l.__size_ + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v43;
        if (v43)
        {
          v33 = (unint64_t *)&v43->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((_DWORD)hal_object_id_for_device_uid)
          break;
      }
      v19 += 80;
      if (v19 == v20)
        goto LABEL_69;
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v50)
    CFRelease(v50);
  return hal_object_id_for_device_uid;
}

void sub_1B58F67C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a20 < 0)
    operator delete(__p);
  __p = &a23;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  applesauce::CF::StringRef::~StringRef((const void **)(v23 - 96));
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::runtime_error v26;
  std::runtime_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v37 = 2080;
      *(_QWORD *)&v37[2] = "Core.h";
      v38 = 1024;
      v39 = 198;
      v40 = 2080;
      *(_QWORD *)v41 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v34, a2, a3);
  if (!v34)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = *(std::__shared_weak_count **)v37;
    v11 = **(NSObject ***)buf;
    if (*(_QWORD *)v37)
    {
      v12 = (unint64_t *)(*(_QWORD *)v37 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v37 = 2080;
      *(_QWORD *)&v37[2] = "Core.h";
      v38 = 1024;
      v39 = 202;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v25);
    std::runtime_error::runtime_error(&v26, &v25);
    std::runtime_error::runtime_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v28 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v41[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = applesauce::CF::StringRef, Argument_Types = <>]";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v43 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    v22 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)a1, v34);
  v7 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B58F6BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = *(std::__shared_weak_count **)(v25 - 120);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  int v15;
  void **v16;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v20;
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a2[7];
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v5 = v4;
    if (v4)
    {
      v6 = (AMCP::Core::Core *)a2[6];
      if (v6)
      {
        AMCP::Core::Core::get_simple_required_property<2003267184u>(a1, v6);
LABEL_13:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v7 = *(std::__shared_weak_count **)v22;
  v8 = **(NSObject ***)buf;
  if (*(_QWORD *)v22)
  {
    v9 = (unint64_t *)(*(_QWORD *)v22 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v13 = pthread_self();
    v14 = pthread_mach_thread_np(v13);
    v15 = *(_DWORD *)(a2[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a2);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v20 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)v22 = 2080;
    *(_QWORD *)&v22[2] = "HALS_IOContext_MCP_Impl.cpp";
    v23 = 1024;
    v24 = 107;
    v25 = 1024;
    v26 = v15;
    v27 = 2080;
    v28 = v16;
    _os_log_debug_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v20 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = MEMORY[0x1E0DDB768] + 16;
  if (v5)
    goto LABEL_13;
}

void sub_1B58F6F5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_MCP_Impl::get_debug_device_name(HALS_IOContext_MCP_Impl *this, uint64_t a2)
{
  CFTypeRef cf;
  CFTypeRef v5;

  if (*(_QWORD *)(a2 + 112))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v5, "uid");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "");
    applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(this, *(const __CFDictionary **)(a2 + 112), v5, &cf);
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    applesauce::CF::StringRef::StringRef(this, "");
  }
}

void sub_1B58F702C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::get_simple_required_property<2003267184u>(uint64_t a1, AMCP::Core::Core *this)
{
  AMCP::Log::Scope_Registry *has_property;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  uint64_t v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t (*v31)(_QWORD, void **, _QWORD, _QWORD);
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  caulk::mach::details *v35;
  __int128 v36;
  _BYTE v37[25];
  char v38;
  char v39;
  uint8_t buf[8];
  _BYTE v41[48];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v27 = 0x676C6F6277676E70;
  v28 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v27);
  if (!(_DWORD)has_property)
  {
LABEL_18:
    LOBYTE(v34) = 0;
    v39 = 0;
    goto LABEL_19;
  }
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v32, (int8x8_t *)this, (unsigned int *)&v27);
  v6 = v32;
  v7 = MEMORY[0x1E0DDB768];
  if (!v32)
    goto LABEL_9;
  v8 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v8))
  {
    v14 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v14);
    if (has_property)
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)__p, v6);
      AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)buf, (uint64_t)__p);
      memset(v37, 0, sizeof(v37));
      v36 = 0u;
      v34 = v7 + 16;
      v35 = *(caulk::mach::details **)v41;
      *(_QWORD *)v41 = 0;
      caulk::mach::details::release_os_object(0, v15);
      v16 = *(_OWORD *)v37;
      v17 = v36;
      v18 = *(_QWORD *)&v37[16];
      v36 = *(_OWORD *)&v41[8];
      *(_OWORD *)v37 = *(_OWORD *)&v41[24];
      *(_QWORD *)&v37[16] = *(_QWORD *)&v41[40];
      *(_QWORD *)&v41[40] = v18;
      *(_OWORD *)&v41[8] = v17;
      *(_OWORD *)&v41[24] = v16;
      v37[24] = v42;
      LOBYTE(v18) = HIBYTE(v42);
      v42 = 0;
      v38 = v18;
      v39 = 1;
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)buf);
      if (v31)
        has_property = (AMCP::Log::Scope_Registry *)v31(0, __p, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v13 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>((uint64_t)buf, v6);
  memset(v37, 0, sizeof(v37));
  v36 = 0u;
  v34 = v7 + 16;
  v35 = *(caulk::mach::details **)v41;
  *(_QWORD *)v41 = 0;
  caulk::mach::details::release_os_object(0, v9);
  v10 = *(_OWORD *)v37;
  v11 = v36;
  v12 = *(_QWORD *)&v37[16];
  v36 = *(_OWORD *)&v41[8];
  *(_OWORD *)v37 = *(_OWORD *)&v41[24];
  *(_QWORD *)&v37[16] = *(_QWORD *)&v41[40];
  *(_QWORD *)&v41[40] = v12;
  *(_OWORD *)&v41[8] = v11;
  *(_OWORD *)&v41[24] = v10;
  v37[24] = v42;
  LOBYTE(v12) = HIBYTE(v42);
  v42 = 0;
  v38 = v12;
  v39 = 1;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)buf);
LABEL_5:
  v13 = 0;
LABEL_10:
  v19 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if ((v13 & 1) != 0)
    goto LABEL_18;
  if (!v39)
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      v30 = 4;
      strcpy((char *)__p, "wgnp");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v41 = 2080;
      *(_QWORD *)&v41[2] = "Core.h";
      *(_WORD *)&v41[10] = 1024;
      *(_DWORD *)&v41[12] = 391;
      *(_WORD *)&v41[16] = 2080;
      *(_QWORD *)&v41[18] = "optional_value.operator BOOL() == true";
      *(_WORD *)&v41[26] = 2080;
      *(_QWORD *)&v41[28] = __p;
      *(_WORD *)&v41[36] = 1024;
      strcpy(&v41[38], "bolg");
      v41[43] = 4;
      *(_DWORD *)&v41[44] = 0;
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v30 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  v22 = caulk::mach::details::retain_os_object(v35, v5);
  v23 = *(_OWORD *)v37;
  *(_OWORD *)(a1 + 16) = v36;
  *(_OWORD *)(a1 + 32) = v23;
  *(_OWORD *)(a1 + 41) = *(_OWORD *)&v37[9];
  *(_QWORD *)a1 = v7 + 16;
  *(_QWORD *)(a1 + 8) = v22;
  *(_BYTE *)(a1 + 57) = v38;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v34);
}

void sub_1B58F73C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t caulk::mach::os_workgroup_interval_managed::from_get(caulk::mach::os_workgroup_interval_managed *this, os_workgroup_s *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = caulk::mach::details::retain_os_object(a2, a2);
  caulk::mach::details::release_os_object(0, v4);
  *((_QWORD *)this + 1) = v3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 41) = 0u;
  caulk::mach::details::release_os_object(0, v5);
  *(_QWORD *)this = MEMORY[0x1E0DDB768] + 16;
  *((_BYTE *)this + 57) = 0;
  return caulk::mach::details::release_os_object(0, v6);
}

uint64_t ___ZNK23HALS_IOContext_MCP_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *exception;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 48);
  v2 = *(unsigned __int8 *)(result + 72);
  v3 = 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(_QWORD *)(v1 + 24 * *(unsigned __int8 *)(result + 72) + 200)
                - *(_QWORD *)(v1 + 24 * *(unsigned __int8 *)(result + 72) + 192)) >> 3);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 330382100
                                                                  * ((uint64_t)(*(_QWORD *)(v1
                                                                                         + 24
                                                                                         * *(unsigned __int8 *)(result + 72)
                                                                                         + 200)
                                                                             - *(_QWORD *)(v1
                                                                                         + 24
                                                                                         * *(unsigned __int8 *)(result + 72)
                                                                                         + 192)) >> 3)
                                                                  + 12;
  if (**(_DWORD **)(result + 56) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "HALS_IOContext_MCP_Impl.cpp";
      v15 = 1024;
      v16 = 1063;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOProcStreamUsage", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v4 = *(_QWORD *)(result + 64);
  *(_DWORD *)(v4 + 8) = v3;
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = v1 + 64;
    v7 = v2 == 0;
    v8 = 64;
    if (v7)
    {
      v8 = 88;
      v6 = v1 + 88;
    }
    v9 = *(_QWORD *)(v6 + 8);
    v10 = v4 + 12;
    do
    {
      if (v9 <= v5)
        LODWORD(v11) = 1;
      else
        v11 = (*(_QWORD *)(*(_QWORD *)(v1 + v8) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1;
      *(_DWORD *)(v10 + 4 * v5++) = v11;
    }
    while (v3 != v5);
  }
  return result;
}

void sub_1B58F75FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v11;
  int v12;

  if (a2)
  {
    v11 = __cxa_begin_catch(a1);
    if (a2 == 2)
      v12 = v11[2];
    else
      v12 = 2003329396;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a10 + 40) + 8) + 24) = v12;
    __cxa_end_catch();
    JUMPOUT(0x1B58F7530);
  }
  _Unwind_Resume(a1);
}

float HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  float simple_required;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  void **v15;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v19;
  uint8_t buf[8];
  _BYTE v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    if (v2)
    {
      v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        simple_required = AMCP::Core::Core::get_simple_required_property<1852012899u>((AMCP::Core::Core *)v2);
LABEL_13:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return simple_required;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v5 = *(std::__shared_weak_count **)v21;
  v6 = **(NSObject ***)buf;
  if (*(_QWORD *)v21)
  {
    v7 = (unint64_t *)(*(_QWORD *)v21 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v19 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)v21 = 2080;
    *(_QWORD *)&v21[2] = "HALS_IOContext_MCP_Impl.cpp";
    v22 = 1024;
    v23 = 107;
    v24 = 1024;
    v25 = v14;
    v26 = 2080;
    v27 = v15;
    _os_log_debug_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v19 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  simple_required = 0.0;
  if (v3)
    goto LABEL_13;
  return simple_required;
}

void sub_1B58F7874(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

float AMCP::Core::Core::get_simple_required_property<1852012899u>(AMCP::Core::Core *a1)
{
  unint64_t v1;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *__p[2];
  char v7;
  _BYTE buf[10];
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "cycnbolg");
  buf[9] = 0;
  LOWORD(v9) = 0;
  v1 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(v1))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v7 = 4;
      strcpy((char *)__p, "ncyc");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 2080;
      v9 = "Core.h";
      v10 = 1024;
      v11 = 391;
      v12 = 2080;
      v13 = "optional_value.operator BOOL() == true";
      v14 = 2080;
      v15 = __p;
      v16 = 1024;
      v17 = 1735159650;
      v18 = 1024;
      v19 = 0;
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v7 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return *(float *)&v1;
}

void sub_1B58F7A14(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

Buffer_Size_Notifier *std::unique_ptr<Buffer_Size_Notifier>::reset[abi:ne180100](Buffer_Size_Notifier **a1)
{
  Buffer_Size_Notifier *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Buffer_Size_Notifier::~Buffer_Size_Notifier(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  void **v15;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v19;
  uint8_t buf[8];
  _BYTE v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v3 = std::__shared_weak_count::lock(v3);
    v5 = v3;
    if (v3)
    {
      v3 = (std::__shared_weak_count *)a1[6];
      if (v3)
      {
        AMCP::Core::Core::set_simple_property_value<1718839674u>((int8x8_t *)v3, a2);
LABEL_13:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v6 = *(std::__shared_weak_count **)v21;
  v7 = **(NSObject ***)buf;
  if (*(_QWORD *)v21)
  {
    v8 = (unint64_t *)(*(_QWORD *)v21 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v19 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)v21 = 2080;
    *(_QWORD *)&v21[2] = "HALS_IOContext_MCP_Impl.cpp";
    v22 = 1024;
    v23 = 121;
    v24 = 1024;
    v25 = v14;
    v26 = 2080;
    v27 = v15;
    _os_log_debug_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v19 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  if (v5)
    goto LABEL_13;
}

void sub_1B58F7C88(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void Buffer_Size_Notifier::~Buffer_Size_Notifier(Buffer_Size_Notifier *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int simple_mcp;
  unint64_t v7;
  AudioObjectPropertyAddress *v8;
  AudioObjectPropertyAddress *v9;
  int v10;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  AudioObjectPropertyAddress *v16;
  AudioObjectPropertyAddress *v17;
  uint64_t v18;
  AudioObjectPropertyElement mElement;
  unsigned int *v20;
  HALS_NotificationManager *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v2 = *((_QWORD *)this + 2);
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(v2 + 48))
      {
        simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(*((_QWORD **)this + 2));
        v7 = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(*((_QWORD **)this + 2));
        v8 = 0;
        if (simple_mcp == *(_DWORD *)this)
        {
          v9 = 0;
        }
        else
        {
          v9 = 0;
          if (*(_DWORD *)this)
          {
            v8 = (AudioObjectPropertyAddress *)operator new(0xCuLL);
            v9 = v8 + 1;
            *(_QWORD *)&v8->mSelector = 0x676C6F626673697ALL;
            v8->mElement = 0;
          }
        }
        v10 = *((_DWORD *)this + 1);
        v12 = v10 == (_DWORD)v7 && *((_DWORD *)this + 2) == HIDWORD(v7);
        if (!v10 || v12)
        {
          v16 = v8;
          v17 = v9;
        }
        else
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 2);
          v14 = v13 + 1;
          if (v13 + 1 > 0x1555555555555555)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v9 - (char *)v8) >> 2) > v14)
            v14 = 0x5555555555555556 * (((char *)v9 - (char *)v8) >> 2);
          if (v13 >= 0xAAAAAAAAAAAAAAALL)
            v15 = 0x1555555555555555;
          else
            v15 = v14;
          if (v15)
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v15);
          v16 = (AudioObjectPropertyAddress *)(v15 + 4 * (((char *)v9 - (char *)v8) >> 2));
          *(_QWORD *)&v16->mSelector = 0x676C6F6266737A23;
          v16->mElement = 0;
          v17 = v16 + 1;
          while (v9 != v8)
          {
            v18 = *(_QWORD *)&v9[-1].mSelector;
            --v9;
            mElement = v9->mElement;
            *(_QWORD *)&v16[-1].mSelector = v18;
            --v16;
            v16->mElement = mElement;
          }
          if (v8)
            operator delete(v8);
        }
        if (v16 != v17)
        {
          v20 = *(unsigned int **)(*((_QWORD *)this + 2) + 40);
          v21 = (HALS_NotificationManager *)v20[18];
          if (!(_DWORD)v21)
            v21 = (HALS_NotificationManager *)v20[4];
          HALS_Object::PropertiesChanged((HALS_Object *)v20, v21, 0, -1431655765 * ((unint64_t)((char *)v17 - (char *)v16) >> 2), v16);
        }
        if (v16)
          operator delete(v16);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

unint64_t HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t simple_required;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int v14;
  void **v15;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v19;
  uint8_t buf[8];
  _BYTE v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    if (v2)
    {
      v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        simple_required = AMCP::Core::Core::get_simple_required_property<1718839674u>((AMCP::Core::Core *)v2);
LABEL_13:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return simple_required;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v5 = *(std::__shared_weak_count **)v21;
  v6 = **(NSObject ***)buf;
  if (*(_QWORD *)v21)
  {
    v7 = (unint64_t *)(*(_QWORD *)v21 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v19 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)v21 = 2080;
    *(_QWORD *)&v21[2] = "HALS_IOContext_MCP_Impl.cpp";
    v22 = 1024;
    v23 = 107;
    v24 = 1024;
    v25 = v14;
    v26 = 2080;
    v27 = v15;
    _os_log_debug_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v19 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  simple_required = 0;
  if (v3)
    goto LABEL_13;
  return simple_required;
}

void sub_1B58F80CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

unint64_t HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  AMCP::Log::Scope_Registry *simple_required;
  unsigned int v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  int v16;
  void **v17;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v21;
  uint8_t buf[8];
  _BYTE v23[10];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    if (v2)
    {
      v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        simple_required = AMCP::Core::Core::get_simple_required_property<1718843939u>((AMCP::Core::Core *)v2);
        v5 = simple_required;
        v6 = (unint64_t)simple_required >> 32;
LABEL_13:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return v5 | (v6 << 32);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v7 = *(std::__shared_weak_count **)v23;
  v8 = **(NSObject ***)buf;
  if (*(_QWORD *)v23)
  {
    v9 = (unint64_t *)(*(_QWORD *)v23 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    v16 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)v23 = 2080;
    *(_QWORD *)&v23[2] = "HALS_IOContext_MCP_Impl.cpp";
    v24 = 1024;
    v25 = 107;
    v26 = 1024;
    v27 = v16;
    v28 = 2080;
    v29 = v17;
    _os_log_debug_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v21 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  v6 = 0;
  v5 = 0;
  if (v3)
    goto LABEL_13;
  return v5 | (v6 << 32);
}

void sub_1B58F8338(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

AMCP::Log::Scope_Registry *AMCP::Core::Core::get_simple_required_property<1718843939u>(AMCP::Core::Core *a1)
{
  AMCP::Log::Scope_Registry *result;
  char v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *__p[2];
  char v7;
  _BYTE buf[10];
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "#zsfbolg");
  buf[9] = 0;
  LOWORD(v9) = 0;
  result = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v7 = 4;
      strcpy((char *)__p, "fsz#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 2080;
      v9 = "Core.h";
      v10 = 1024;
      v11 = 391;
      v12 = 2080;
      v13 = "optional_value.operator BOOL() == true";
      v14 = 2080;
      v15 = __p;
      v16 = 1024;
      v17 = 1735159650;
      v18 = 1024;
      v19 = 0;
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v7 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B58F84D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1718839674u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "zisfbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "fsiz");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B58F864C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::set_simple_property_value<1718839674u>(int8x8_t *a1, _DWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F626673697ALL;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      memset(v14, 0, sizeof(v14));
      LODWORD(v14[0]) = *a2;
      v15 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,unsigned int const&>(v4, (uint64_t)a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58F87B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58F8798);
}

void ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const __CFNumber *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  unsigned int v17;
  uint64_t *mcp_object;
  uint64_t v19;
  AMCP::Log::Scope_Registry *graph_builder;
  __int128 *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  const std::string *v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type size;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  int what_high;
  unint64_t *v53;
  const char *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  AMCP::Address *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  NSObject *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *v70;
  uint64_t v71;
  int v72;
  __int128 *v73;
  uint64_t v74;
  std::string::size_type v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t (***v85)();
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  NSObject *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  NSObject *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  const AMCP::Address *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  NSObject *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  HALB_Mutex *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  int v126;
  HALB_Mutex *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *imp;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _opaque_pthread_t *v140;
  mach_port_t v141;
  int v142;
  __int128 *v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  int v146;
  uint64_t v147;
  _opaque_pthread_t *v148;
  mach_port_t v149;
  int v150;
  uint64_t v151;
  _opaque_pthread_t *v152;
  mach_port_t v153;
  int v154;
  uint64_t v155;
  NSObject *v156;
  _opaque_pthread_t *v157;
  mach_port_t v158;
  void *exception;
  NSObject *v160;
  _opaque_pthread_t *v161;
  mach_port_t v162;
  std::runtime_error *v163;
  std::runtime_error *v164;
  std::runtime_error *v165;
  std::runtime_error *v166;
  _BOOL4 v167;
  uint64_t v168;
  _QWORD block[4];
  int v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  CFTypeRef v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  CFTypeRef cf;
  uint64_t *v181[2];
  __int128 v182;
  void ***v183;
  std::string v184;
  std::runtime_error v185;
  char v186;
  __int128 v187;
  int64_t v188;
  __int128 *v189;
  std::string v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  _QWORD v194[5];
  std::runtime_error __p;
  unint64_t *v196;
  std::runtime_error *p_p;
  uint64_t v198;
  uint64_t v199;
  int v200;
  _BYTE buf[53];
  char v202;
  __int16 v203;
  uint64_t (**v204)();
  __int128 v205;
  void ***v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8) == -1;
  else
    v4 = 1;
  v5 = *(const void **)(v2 + 112);
  v6 = (const void *)a1[6];
  *(_QWORD *)(v2 + 112) = v6;
  if (v6)
    CFRetain(v6);
  if (v5)
    CFRelease(v5);
  v174 = 0;
  v175 = 0;
  HALS_System::GetInstance(&v176, 0, &v174);
  v7 = *(_QWORD *)(v176 + 1392);
  v8 = *(const void **)(v2 + 112);
  if (!v8)
  {
    v173 = 0;
    v168 = v2 + 64;
    v15 = v2 + 88;
    v16 = (os_unfair_lock_s *)(v7 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
    cf = 0;
    memset(v194, 0, 32);
    v193 = 0u;
LABEL_38:
    v178 = 0;
    v179 = 0;
    goto LABEL_39;
  }
  v167 = v4;
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(unsigned int *)(v9 + 16);
  v11 = **(_DWORD **)(v9 + 64);
  CFRetain(v8);
  v173 = v8;
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  CFRetain(v8);
  cf = v8;
  memset(v194, 0, 32);
  v193 = 0u;
  CFRetain(v8);
  v181[1] = (uint64_t *)v8;
  v12 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v8, "device id");
  if (v12 && (v13 = applesauce::CF::convert_as<unsigned int,0>(v12), HIDWORD(v13)))
  {
    v17 = v13;
    mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v7 + 40), v13);
    if ((unint64_t)mcp_object >> 32)
      v19 = (_QWORD)mcp_object << 32;
    else
      v19 = 0;
    v14 = v19 & 0xFFFFFFFF00000000 | v17;
  }
  else
  {
    v14 = 0;
  }
  CFRelease(v8);
  graph_builder = (AMCP::Log::Scope_Registry *)HALS_IOContext_Manager_Impl::get_graph_builder(v181, v7 + 24, 0);
  if (!(_DWORD)v10)
  {
    AMCP::Log::Scope_Registry::get(graph_builder);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v156 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      v157 = pthread_self();
      v158 = pthread_mach_thread_np(v157);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v158;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALIO_Tokens.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 20;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "value == 0";
      _os_log_error_impl(&dword_1B57BA000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v186);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v184);
    std::runtime_error::runtime_error(&v185, &v184);
    std::runtime_error::runtime_error(&__p, &v185);
    p_p = 0;
    v198 = 0;
    v199 = 0;
    v200 = -1;
    __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v196 = (unint64_t *)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&buf[32] = "Token<unsigned int>::Token(uint32_t) [T = unsigned int]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AHAL/IO/HALIO_Tokens.h";
    *(_DWORD *)&buf[48] = 20;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v182);
    v205 = v182;
    v204 = off_1E69A20A0;
    v206 = v183;
    v182 = 0uLL;
    v183 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v204);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *(_QWORD *)&v187 = &off_1E699BB40;
  *((_QWORD *)&v187 + 1) = v7 + 40;
  v188 = v14 | ((unint64_t)v11 << 32);
  v189 = &v187;
  v168 = v2 + 64;
  HALIO::HALIO_Graph_Builder::create_graph_description_from_aggregate_description((uint64_t)&v190, v181[0], v10, HIDWORD(v14), (CFDictionaryRef *)&cf, v2 + 64, v2 + 88, &v187, a1[7]);
  std::vector<AMCP::Node_Description>::__vdeallocate((void **)&v193);
  v193 = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
  v194[0] = *((_QWORD *)&v190.__r_.__value_.__l + 2);
  memset(&v190, 0, sizeof(v190));
  std::vector<AMCP::Wire_Description>::__vdeallocate((void **)&v194[1]);
  *(_OWORD *)&v194[1] = v191;
  v194[3] = v192;
  v192 = 0;
  v191 = 0uLL;
  *(_QWORD *)buf = &v191;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v190;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v21 = v189;
  if (v189 == &v187)
  {
    v22 = 4;
    v21 = &v187;
  }
  else
  {
    if (!v189)
      goto LABEL_23;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_23:
  v23 = std::unique_ptr<HALIO::HALIO_Graph_Builder>::reset[abi:ne180100](v181);
  v24 = v193;
  if ((_QWORD)v193 == *((_QWORD *)&v193 + 1))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v160 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      v161 = pthread_self();
      v162 = pthread_mach_thread_np(v161);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v162;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_Manager_Impl.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 211;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not new_graph_description.m_nodes.empty()";
      _os_log_error_impl(&dword_1B57BA000, v160, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s create_graph_description_from_aggregate_description return no graph nodes", buf, 0x22u);
    }
    abort();
  }
  v25 = (const std::string *)(v193 + 8);
  *(_DWORD *)(v2 + 120) = *(_DWORD *)v193;
  std::string::operator=((std::string *)(v2 + 128), v25);
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v24 + 32);
  std::string::operator=((std::string *)(v2 + 160), (const std::string *)(v24 + 40));
  v26 = 0;
  v27 = 0;
  *(_QWORD *)(v2 + 184) = *(_QWORD *)(v24 + 64);
  do
  {
    v28 = v26;
    if (v24 != v2 + 120)
    {
      v29 = 3 * v27;
      std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t *)(v2 + 192 + 8 * v29), *(__int128 **)(v24 + 72 + 8 * v29), *(__int128 **)(v24 + 72 + 8 * v29 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v24 + 72 + 8 * v29 + 8) - *(_QWORD *)(v24 + 72 + 8 * v29)) >> 3));
    }
    v26 = 1;
    v27 = 1;
  }
  while ((v28 & 1) == 0);
  memset(&v190, 0, sizeof(v190));
  v31 = *((_QWORD *)&v193 + 1);
  v30 = v193;
  if ((_QWORD)v193 == *((_QWORD *)&v193 + 1))
  {
    size = 0;
    v32 = 0;
  }
  else
  {
    do
    {
      HALS_IOContext_Manager_Impl::find_wires_for_context((uint64_t *)buf, v7 + 24, v30 + 8);
      std::vector<AMCP::Wire_Identifier>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Wire_Identifier*>,std::__wrap_iter<AMCP::Wire_Identifier*>>(&v190, (uint64_t)v190.__r_.__value_.__l.__data_, *(std::string **)buf, *(uint64_t *)&buf[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4));
      __p.__vftable = (std::runtime_error_vtbl *)buf;
      std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v30 += 120;
    }
    while (v30 != v31);
    size = v190.__r_.__value_.__l.__size_;
    v32 = v190.__r_.__value_.__r.__words[0];
  }
  v34 = *(_QWORD *)(v7 + 136);
  memset(buf, 0, 48);
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(&buf[24], v32, size, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v32) >> 4));
  v15 = v2 + 88;
  AMCP::IO_Core::Graph_Manager::modify_graph(&__p, v34, (uint64_t)&v193, (uint64_t)buf);
  v204 = (uint64_t (**)())&buf[24];
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  v204 = (uint64_t (**)())buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
  if (!(_BYTE)p_p)
  {
    *(_QWORD *)buf = &v190;
    std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v16 = (os_unfair_lock_s *)(v7 + 16);
    v4 = v167;
    goto LABEL_38;
  }
  v35 = __p.~runtime_error;
  HALS_IOContext_Manager_Impl::Object_Map::add_object((HALS_IOContext_Manager_Impl::Object_Map *)(v7 + 40), __p.~runtime_error, v10);
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v178, *(std::__shared_mutex_base **)(v7 + 120), v35);
  if ((_BYTE)p_p && __p.__vftable)
  {
    __p.__imp_.__imp_ = (const char *)__p.__vftable;
    operator delete(__p.__vftable);
  }
  *(_QWORD *)buf = &v190;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v16 = (os_unfair_lock_s *)(v7 + 16);
  v4 = v167;
LABEL_39:
  *(_QWORD *)buf = &v194[1];
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v193;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (cf)
    CFRelease(cf);
  os_unfair_lock_unlock(v16);
  v36 = v178;
  v37 = v179;
  if (v179)
  {
    p_shared_weak_owners = (unint64_t *)&v179->__shared_weak_owners_;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v173)
    CFRelease(v173);
  v42 = v177;
  if (v177)
  {
    v43 = (unint64_t *)&v177->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v175;
  if (v175)
  {
    v46 = (unint64_t *)&v175->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (v37)
        goto LABEL_60;
LABEL_81:
      if (v4)
        return;
      goto LABEL_82;
    }
  }
  if (!v37)
    goto LABEL_81;
LABEL_60:
  if (v37->__shared_owners_ != -1 && v4)
  {
    v49 = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v51 = *(std::__shared_weak_count **)(v2 + 56);
    *(_QWORD *)(v2 + 48) = v36;
    *(_QWORD *)(v2 + 56) = v37;
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
    v171 = 0;
    v172 = 0;
    HALS_System::GetInstance(&v185, 0, &v171);
    what_high = HIDWORD(v185.__vftable[57].what);
    v190.__r_.__value_.__r.__words[0] = 0x676C6F626E64696FLL;
    LODWORD(v190.__r_.__value_.__r.__words[1]) = 0;
    v54 = *(const char **)(v2 + 8);
    v53 = *(unint64_t **)(v2 + 16);
    if (v53)
    {
      v55 = v53 + 2;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    __p.__vftable = (std::runtime_error_vtbl *)&off_1E6973440;
    __p.__imp_.__imp_ = v54;
    v196 = v53;
    p_p = &__p;
    v57 = *(std::__shared_weak_count **)(v2 + 56);
    if (v57)
    {
      v57 = std::__shared_weak_count::lock(v57);
      v58 = v57;
      if (v57)
      {
        v59 = *(AMCP::Address **)(v2 + 48);
        if (v59)
        {
          std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&__p);
          AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(v59, (unsigned int *)&v190, (uint64_t)buf);
          v60 = *(_QWORD **)&buf[24];
          if (*(_BYTE **)&buf[24] == buf)
          {
            v61 = 4;
            v60 = buf;
            goto LABEL_96;
          }
          if (*(_QWORD *)&buf[24])
          {
            v61 = 5;
LABEL_96:
            (*(void (**)(void))(*v60 + 8 * v61))();
          }
LABEL_97:
          v68 = (unint64_t *)&v58->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
          goto LABEL_101;
        }
      }
    }
    else
    {
      v58 = 0;
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v57);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v64 = *(std::__shared_weak_count **)&buf[8];
    v65 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v66 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      v140 = pthread_self();
      v141 = pthread_mach_thread_np(v140);
      v142 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
      HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v204, v2);
      if (!v204)
      {
        v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v163, "Could not construct");
        __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v193, (const __CFString *)v204);
      if (v194[0] >= 0)
        v143 = &v193;
      else
        v143 = (__int128 *)v193;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v141;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 95;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v142;
      *(_WORD *)&buf[30] = 2080;
      *(_QWORD *)&buf[32] = v143;
      _os_log_debug_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
      if (SHIBYTE(v194[0]) < 0)
        operator delete((void *)v193);
      if (v204)
        CFRelease(v204);
    }
    if (!v58)
    {
LABEL_101:
      v70 = p_p;
      if (p_p == &__p)
      {
        v71 = 4;
        v70 = &__p;
      }
      else
      {
        if (!p_p)
          goto LABEL_106;
        v71 = 5;
      }
      (*((void (**)(void))&v70->~runtime_error + v71))();
LABEL_106:
      strcpy(buf, "revobolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v72 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
      *(_QWORD *)&v193 = &off_1E69734C0;
      DWORD2(v193) = v72;
      v194[1] = &v193;
      HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((_QWORD *)v2, (unsigned int *)buf, (uint64_t)&v193);
      v73 = (__int128 *)v194[1];
      if ((__int128 *)v194[1] == &v193)
      {
        v74 = 4;
        v73 = &v193;
      }
      else
      {
        if (!v194[1])
          goto LABEL_111;
        v74 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_111:
      strcpy(buf, "pbdnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v76 = *(_QWORD *)(v2 + 8);
      v75 = *(_QWORD *)(v2 + 16);
      if (v75)
      {
        v77 = (unint64_t *)(v75 + 16);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6973540;
      v190.__r_.__value_.__l.__size_ = v76;
      v190.__r_.__value_.__r.__words[2] = v75;
      *(_QWORD *)&v191 = &v190;
      HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((_QWORD *)v2, (unsigned int *)buf, (uint64_t)&v190);
      v79 = (std::string *)v191;
      if ((std::string *)v191 == &v190)
      {
        v80 = 4;
        v79 = &v190;
      }
      else
      {
        if (!(_QWORD)v191)
          goto LABEL_119;
        v80 = 5;
      }
      (*(void (**)(void))(v79->__r_.__value_.__r.__words[0] + 8 * v80))();
LABEL_119:
      strcpy(buf, "pednbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v82 = *(_QWORD *)(v2 + 8);
      v81 = *(_QWORD *)(v2 + 16);
      if (v81)
      {
        v83 = (unint64_t *)(v81 + 16);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v204 = &off_1E69735C0;
      *(_QWORD *)&v205 = v82;
      *((_QWORD *)&v205 + 1) = v81;
      v206 = (void ***)&v204;
      HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((_QWORD *)v2, (unsigned int *)buf, (uint64_t)&v204);
      v85 = (uint64_t (***)())v206;
      if (v206 == (void ***)&v204)
      {
        v86 = 4;
        v85 = &v204;
      }
      else
      {
        if (!v206)
          goto LABEL_127;
        v86 = 5;
      }
      (*v85)[v86]();
LABEL_127:
      HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>((_QWORD *)v2, (_DWORD *)(v2 + 248));
      strcpy(buf, "sppibolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>((_QWORD *)v2, (unsigned int *)buf, what_high);
      v87 = *(std::__shared_weak_count **)(v2 + 56);
      if (v87)
      {
        v88 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 64);
        v87 = std::__shared_weak_count::lock(v87);
        v89 = v87;
        if (v87)
        {
          v87 = *(std::__shared_weak_count **)(v2 + 48);
          if (v87)
          {
            AMCP::Core::Core::set_simple_property_value<1885630071u>((int8x8_t *)v87, (_BYTE *)(v88 + 42));
            goto LABEL_139;
          }
        }
      }
      else
      {
        v89 = 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v87);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v90 = *(std::__shared_weak_count **)&buf[8];
      v91 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v92 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        v144 = pthread_self();
        v145 = pthread_mach_thread_np(v144);
        v146 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
        HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v184, v2);
        if (!v184.__r_.__value_.__r.__words[0])
        {
          v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v164, "Could not construct");
          __cxa_throw(v164, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, (const __CFString *)v184.__r_.__value_.__l.__data_);
        if (v188 >= 0)
          v147 = (uint64_t)&v187;
        else
          v147 = v187;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v145;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 121;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v146;
        *(_WORD *)&buf[30] = 2080;
        *(_QWORD *)&buf[32] = v147;
        _os_log_debug_impl(&dword_1B57BA000, v91, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
        if (SHIBYTE(v188) < 0)
          operator delete((void *)v187);
        if (v184.__r_.__value_.__r.__words[0])
          CFRelease(v184.__r_.__value_.__l.__data_);
      }
      if (!v89)
      {
LABEL_143:
        v96 = *(std::__shared_weak_count **)(v2 + 56);
        if (v96)
        {
          v97 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 64);
          v96 = std::__shared_weak_count::lock(v96);
          v98 = v96;
          if (v96)
          {
            v96 = *(std::__shared_weak_count **)(v2 + 48);
            if (v96)
            {
              AMCP::Core::Core::set_simple_property_value<1885627511u>((int8x8_t *)v96, (_BYTE *)(v97 + 43));
              goto LABEL_155;
            }
          }
        }
        else
        {
          v98 = 0;
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v96);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v99 = *(std::__shared_weak_count **)&buf[8];
        v100 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v101 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
        {
          v148 = pthread_self();
          v149 = pthread_mach_thread_np(v148);
          v150 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
          HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v184, v2);
          if (!v184.__r_.__value_.__r.__words[0])
          {
            v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v165, "Could not construct");
            __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, (const __CFString *)v184.__r_.__value_.__l.__data_);
          if (v188 >= 0)
            v151 = (uint64_t)&v187;
          else
            v151 = v187;
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v149;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 121;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v150;
          *(_WORD *)&buf[30] = 2080;
          *(_QWORD *)&buf[32] = v151;
          _os_log_debug_impl(&dword_1B57BA000, v100, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
          if (SHIBYTE(v188) < 0)
            operator delete((void *)v187);
          if (v184.__r_.__value_.__r.__words[0])
            CFRelease(v184.__r_.__value_.__l.__data_);
        }
        if (!v98)
        {
LABEL_159:
          std::vector<BOOL>::resize(v168, -991146299 * ((*(_QWORD *)(v2 + 224) - *(_QWORD *)(v2 + 216)) >> 3), 1);
          std::vector<BOOL>::resize(v15, -991146299 * ((*(_QWORD *)(v2 + 200) - *(_QWORD *)(v2 + 192)) >> 3), 1);
          *(_OWORD *)&v184.__r_.__value_.__l.__data_ = 0uLL;
          v105 = *(std::__shared_weak_count **)(v2 + 56);
          if (v105
            && (v105 = std::__shared_weak_count::lock(v105),
                (v184.__r_.__value_.__l.__size_ = (std::string::size_type)v105) != 0)
            && (v106 = *(const AMCP::Address **)(v2 + 48),
                (v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v106) != 0))
          {
            v107 = v105;
            *(_QWORD *)&v187 = 0x676C6F626D746D62;
            DWORD2(v187) = 0;
            AMCP::Core::Core::get_property_value((AMCP::Core::Core *)buf, v106, (const AMCP::Address *)&v187);
            AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(&v187, (uint64_t)buf);
            if (*(_QWORD *)&buf[32])
              (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&buf[32])(0, buf, 0, 0);
          }
          else
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v105);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v108 = *(std::__shared_weak_count **)&buf[8];
            v109 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v110 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
            {
              v152 = pthread_self();
              v153 = pthread_mach_thread_np(v152);
              v154 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
              HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v182, v2);
              if (!(_QWORD)v182)
              {
                v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v166, "Could not construct");
                __cxa_throw(v166, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, (const __CFString *)v182);
              if (v188 >= 0)
                v155 = (uint64_t)&v187;
              else
                v155 = v187;
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v153;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 1508;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v154;
              *(_WORD *)&buf[30] = 2080;
              *(_QWORD *)&buf[32] = v155;
              _os_log_debug_impl(&dword_1B57BA000, v109, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
              if (SHIBYTE(v188) < 0)
                operator delete((void *)v187);
              if ((_QWORD)v182)
                CFRelease((CFTypeRef)v182);
            }
            v187 = 0uLL;
            v107 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
            if (!v184.__r_.__value_.__l.__size_)
              goto LABEL_175;
          }
          v112 = (unint64_t *)&v107->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
LABEL_175:
          std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v2 + 256, &v187);
          v114 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
          if (*((_QWORD *)&v187 + 1))
          {
            v115 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          *(_OWORD *)&v184.__r_.__value_.__l.__data_ = 0uLL;
          HALS_System::GetInstance(&v187, 0, (uint64_t *)&v184);
          v117 = **(_DWORD **)(*(_QWORD *)(v2 + 40) + 64);
          v118 = MEMORY[0x1E0C809B0];
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
          *(_QWORD *)&buf[24] = &__block_descriptor_tmp_106;
          *(_QWORD *)&buf[32] = v187;
          strcpy(&buf[44], "#vdpptuo");
          *(_DWORD *)&buf[40] = v117;
          v202 = 0;
          v203 = 0;
          v119 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 56))(v187);
          HALB_CommandGate::ExecuteCommand(v119, (uint64_t)buf);
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
          if (*((_QWORD *)&v187 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          v123 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
          if (v184.__r_.__value_.__l.__size_)
          {
            v124 = (unint64_t *)(v184.__r_.__value_.__l.__size_ + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v182 = 0uLL;
          HALS_System::GetInstance(&v187, 0, (uint64_t *)&v182);
          v126 = **(_DWORD **)(*(_QWORD *)(v2 + 40) + 64);
          *(_QWORD *)buf = v118;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
          *(_QWORD *)&buf[24] = &__block_descriptor_tmp_106;
          *(_QWORD *)&buf[32] = v187;
          strcpy(&buf[44], "#vdptpni");
          *(_DWORD *)&buf[40] = v126;
          v202 = 0;
          v203 = 0;
          v127 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v187 + 56))(v187);
          HALB_CommandGate::ExecuteCommand(v127, (uint64_t)buf);
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
          if (*((_QWORD *)&v187 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v132 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          imp = (std::__shared_weak_count *)v185.__imp_.__imp_;
          if (v185.__imp_.__imp_)
          {
            v135 = (unint64_t *)(v185.__imp_.__imp_ + 8);
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
              std::__shared_weak_count::__release_weak(imp);
            }
          }
          v137 = v172;
          if (v172)
          {
            v138 = (unint64_t *)&v172->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          goto LABEL_210;
        }
LABEL_155:
        v103 = (unint64_t *)&v98->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
        goto LABEL_159;
      }
LABEL_139:
      v94 = (unint64_t *)&v89->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
      goto LABEL_143;
    }
    goto LABEL_97;
  }
  if (v4 || v37->__shared_owners_ != -1)
  {
LABEL_210:
    std::__shared_weak_count::__release_weak(v37);
    return;
  }
LABEL_82:
  v62 = *(_DWORD *)(*(_QWORD *)(v2 + 40) + 16);
  v63 = *(_QWORD *)(v2 + 464);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke_2;
  block[3] = &__block_descriptor_tmp_17_2326;
  v170 = v62;
  LOBYTE(v62) = atomic_load((unsigned __int8 *)(v63 + 32));
  if ((v62 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v63 + 33));
  dispatch_async(*(dispatch_queue_t *)v63, block);
  if (v37)
    goto LABEL_210;
}

void sub_1B58F9D6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1B58F9FCC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B58FA178);
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58F9FE4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  if (a2)
  {
    *(_QWORD *)(v47 - 224) = &a47;
    std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](v47 - 224);
    JUMPOUT(0x1B58FA030);
  }
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58F9FF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t v60;

  if (a2)
  {
    a60 = (void **)(v60 - 224);
    std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&a60);
    JUMPOUT(0x1B58FA010);
  }
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58FA024(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B58FA030);
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58FA03C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_s *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,uint64_t *a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,std::runtime_error a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::runtime_error a65;
  uint64_t a66;
  uint64_t a67;
  int v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v72;
  uint64_t v73;
  _DWORD *v74;

  if (a2)
  {
    v72 = *(void **)(v70 - 144);
    if (v72)
      operator delete(v72);
    if (__p)
    {
      a34 = (uint64_t)__p;
      operator delete(__p);
    }
    *(_QWORD *)(v70 - 208) = &unk_1E69A2000;
    v73 = *(_QWORD *)(v70 - 200);
    if (v73 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73))
      *(_QWORD *)(v70 - 200) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v70 - 224));
    a66 = (uint64_t)&unk_1E69A2000;
    if (a67 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a67 + 32))(a67))
      a67 = 0;
    std::runtime_error::~runtime_error(&a65);
    std::runtime_error::~runtime_error(&a43);
    if (a42 < 0)
      operator delete(a37);
    if (v67)
      __cxa_free_exception(v68);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a47);
    std::unique_ptr<HALIO::HALIO_Graph_Builder>::reset[abi:ne180100](&a31);
    AMCP::Graph_Description::~Graph_Description(&a58);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a30);
    os_unfair_lock_unlock(a14);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a23);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    v74 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 32) + 8) + 24) = v74[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B58F96B8);
  }
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58FA144(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B58FA14CLL);
  JUMPOUT(0x1B58F9FBCLL);
}

void sub_1B58FA1CC()
{
  JUMPOUT(0x1B58F9FBCLL);
}

_QWORD *__copy_helper_block_e8_48c36_ZTSN10applesauce2CF13DictionaryRefE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(a2 + 48));
  v2[6] = v3;
  return result;
}

void __destroy_helper_block_e8_48c36_ZTSN10applesauce2CF13DictionaryRefE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    CFRelease(v1);
}

void ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v8 = 0;
  v9 = 0;
  HALS_System::GetInstance(&v10, 0, &v8);
  HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(*(HALS_IOContext_Manager **)(v10 + 1392), *(_DWORD *)(a1 + 32));
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B58FA2E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58FA2D0);
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()(unsigned int)>>(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  AMCP::Address *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  int v19;
  void **v20;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v24;
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void **v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v7 = v4;
    if (v4)
    {
      v8 = (AMCP::Address *)a1[6];
      if (v8)
      {
        std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v33, a3);
        AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v8, a2, (uint64_t)v33);
        v9 = v34;
        if (v34 == v33)
        {
          v10 = 4;
          v9 = v33;
        }
        else
        {
          if (!v34)
            goto LABEL_18;
          v10 = 5;
        }
        (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_18:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v11 = *(std::__shared_weak_count **)v26;
  v12 = **(NSObject ***)buf;
  if (*(_QWORD *)v26)
  {
    v13 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v17 = pthread_self();
    v18 = pthread_mach_thread_np(v17);
    v19 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v24 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)v26 = 2080;
    *(_QWORD *)&v26[2] = "HALS_IOContext_MCP_Impl.cpp";
    v27 = 1024;
    v28 = 95;
    v29 = 1024;
    v30 = v19;
    v31 = 2080;
    v32 = v20;
    _os_log_debug_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v24 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  if (v7)
    goto LABEL_18;
}

void sub_1B58FA580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>(_QWORD *a1, unsigned int *a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  int v16;
  void **v17;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v21;
  uint8_t buf[8];
  _BYTE v23[10];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v7 = v4;
    if (v4)
    {
      v4 = (std::__shared_weak_count *)a1[6];
      if (v4)
      {
        AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>((AMCP::Address *)v4, a2, a3);
LABEL_13:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v8 = *(std::__shared_weak_count **)v23;
  v9 = **(NSObject ***)buf;
  if (*(_QWORD *)v23)
  {
    v10 = (unint64_t *)(*(_QWORD *)v23 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v14 = pthread_self();
    v15 = pthread_mach_thread_np(v14);
    v16 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)a1);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v21 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v15;
    *(_WORD *)v23 = 2080;
    *(_QWORD *)&v23[2] = "HALS_IOContext_MCP_Impl.cpp";
    v24 = 1024;
    v25 = 95;
    v26 = 1024;
    v27 = v16;
    v28 = 2080;
    v29 = v17;
    _os_log_debug_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v21 < 0)
      operator delete(__p[0]);
    if (cf)
      CFRelease(cf);
  }
  if (v7)
    goto LABEL_13;
}

void sub_1B58FA82C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)&v21, v12);
      v13 = *(char **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v15 = v21;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)&v19, v13, 0, (uint64_t)&v13[8 * (v14 >> 6)], v14 & 0x3F, (uint64_t)&v23);
      v17 = v19;
      LODWORD(v18) = v20;
      v16 = *(char **)a1;
      *(_QWORD *)a1 = v15;
      *(_OWORD *)(a1 + 8) = v22;
      if (v16)
        operator delete(v16);
    }
    else
    {
      v17 = *(_QWORD *)a1 + 8 * (v5 >> 6);
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1B58FA9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(unint64_t *result, char *__src, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v7;
  int64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;

  v7 = result;
  v8 = a5 - (unint64_t)a3 + 8 * (a4 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v15 = *(unint64_t **)a6;
  }
  else
  {
    v9 = __src;
    result = *(unint64_t **)a6;
    if (a3)
    {
      if (v8 >= (unint64_t)(64 - a3))
        v10 = 64 - a3;
      else
        v10 = a5 - (unint64_t)a3 + 8 * (a4 - (_QWORD)__src);
      v8 -= v10;
      v9 = __src + 8;
      *result = *result & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a3 - v10)) & (-1 << a3)) | *(_QWORD *)__src & (0xFFFFFFFFFFFFFFFFLL >> (64 - a3 - v10)) & (-1 << a3);
      v11 = v10 + *(unsigned int *)(a6 + 8);
      result = (unint64_t *)((char *)result + ((v11 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a6 = result;
      *(_DWORD *)(a6 + 8) = v11 & 0x3F;
    }
    if (v8 >= 0)
      v12 = v8;
    else
      v12 = v8 + 63;
    v13 = v12 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v9, 8 * v13);
      result = *(unint64_t **)a6;
    }
    v14 = v8 - (v13 << 6);
    v15 = &result[v13];
    *(_QWORD *)a6 = v15;
    if (v14 >= 1)
    {
      *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v13 << 6) - v8)) | *(_QWORD *)&v9[8 * v13] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v13 << 6) - v8));
      *(_DWORD *)(a6 + 8) = v14;
    }
  }
  *v7 = v15;
  *((_DWORD *)v7 + 2) = *(_DWORD *)(a6 + 8);
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t AMCP::Core::Core::set_simple_property_value<1885627511u>(int8x8_t *a1, _BYTE *a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F6270646477;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      memset(v14, 0, sizeof(v14));
      LOBYTE(v14[0]) = *a2;
      v15 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58FADC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58FADA8);
}

uint64_t AMCP::Core::Core::set_simple_property_value<1885630071u>(int8x8_t *a1, _BYTE *a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F6270646E77;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      memset(v14, 0, sizeof(v14));
      LOBYTE(v14[0]) = *a2;
      v15 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58FAF50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58FAF38);
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>(AMCP::Address *a1, unsigned int *a2, int a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::runtime_error v41;
  std::runtime_error v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  uint8_t buf[8];
  _BYTE v50[10];
  __int16 v51;
  int v52;
  __int16 v53;
  _BYTE v54[14];
  const char *v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Core.h";
      v51 = 1024;
      v52 = 198;
      v53 = 2080;
      *(_QWORD *)v54 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v33, (int8x8_t *)a1, a2);
  v7 = v33;
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v50;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v50)
    {
      v21 = (unint64_t *)(*(_QWORD *)v50 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Core.h";
      v51 = 1024;
      v52 = 202;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <AMCP::Power_State>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v56 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Operation.h";
      v51 = 1024;
      v52 = 154;
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    v29 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Power_State>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v56 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v29, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>(),
        (v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Operation.h";
      v51 = 1024;
      v52 = 161;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    v18 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Power_State>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v56 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
  }
  *(_DWORD *)buf = a3;
  v11 = *((_QWORD *)v9 + 3);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
  v12 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B58FB640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E69735C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E69735C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69735C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69735C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9;
  HALS_NotificationManager *v10;
  uint64_t (***v11)();
  uint64_t v12;
  HALS_PlatformBehaviors *v13;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t block;
  uint64_t v33;
  void (*v34)(uint64_t);
  void *v35;
  int v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t (***v40)();
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5 || (v6 = *(_DWORD *)(v5 + 28) - 1, (*(_DWORD *)(v5 + 28) = v6) != 0))
      {
LABEL_5:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v9 = *(unsigned int **)(v5 + 40);
      v10 = (HALS_NotificationManager *)v9[18];
      if (!(_DWORD)v10)
        v10 = (HALS_NotificationManager *)v9[4];
      v37 = &off_1E6973718;
      v38 = v5;
      v39 = (uint64_t (*)(uint64_t))v10;
      v40 = &v37;
      block = 0x676C6F62676F696ELL;
      LODWORD(v33) = 0;
      HALS_Object::PropertiesChanged_Sync((HALS_Object *)v9, v10, 0, 1u, (const AudioObjectPropertyAddress *)&block);
      v11 = v40;
      if (v40 == &v37)
      {
        v12 = 4;
        v11 = &v37;
      }
      else
      {
        if (!v40)
        {
LABEL_17:
          v13 = *(HALS_PlatformBehaviors **)(*(_QWORD *)(v5 + 40) + 80);
          if (v13)
          {
            (*(void (**)(HALS_PlatformBehaviors *))(*(_QWORD *)v13 + 120))(v13);
            v13 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 40) + 80)
                                                                              + 128))(*(_QWORD *)(*(_QWORD *)(v5 + 40)
                                                                                                  + 80));
          }
          platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v13);
          v15 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
          v16 = HALS_PlatformBehaviors::get_platform_behaviors(v15);
          (*(void (**)(uint64_t *))(*v16 + 64))(v16);
          v17 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 16);
          v18 = *(_QWORD *)(v5 + 472);
          v19 = (uint64_t (**)())MEMORY[0x1E0C809B0];
          block = MEMORY[0x1E0C809B0];
          v33 = 0x40000000;
          v34 = ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke;
          v35 = &__block_descriptor_tmp_26_2333;
          v36 = v17;
          LOBYTE(v17) = atomic_load((unsigned __int8 *)(v18 + 32));
          if ((v17 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(v18 + 33));
          dispatch_async(*(dispatch_queue_t *)v18, &block);
          std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v30, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
          v20 = *(_QWORD *)(v5 + 472);
          v37 = v19;
          v38 = 1174405120;
          v39 = ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke_2;
          v40 = (uint64_t (***)())&__block_descriptor_tmp_27_2334;
          v41 = v30;
          v42 = v31;
          if (v31)
          {
            v21 = (unint64_t *)&v31->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = atomic_load((unsigned __int8 *)(v20 + 32));
          if ((v23 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(v20 + 33));
          dispatch_async(*(dispatch_queue_t *)v20, &v37);
          v24 = v42;
          if (v42)
          {
            v25 = (unint64_t *)&v42->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v31;
          if (v31)
          {
            v28 = (unint64_t *)&v31->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          goto LABEL_5;
        }
        v12 = 5;
      }
      (*v11)[v12]();
      goto LABEL_17;
    }
  }
}

void sub_1B58FBCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::__shared_weak_count *v19;
  char *v20;
  char *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      _Unwind_Resume(exception_object);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  goto LABEL_6;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::target_type()
{
}

void ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  HALS_System *v10;
  std::__shared_weak_count *v11;

  v8 = 0;
  v9 = 0;
  HALS_System::GetInstance(&v10, 0, &v8);
  HALS_System::SetIOContextIsRunning(v10, *(_DWORD *)(a1 + 32), 0);
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B58FBE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke_2(uint64_t a1)
{
  return HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(*(HALS_IOContext_MCP_Impl **)(a1 + 32));
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrI23HALS_IOContext_MCP_ImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrI23HALS_IOContext_MCP_ImplEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(HALS_IOContext_MCP_Impl *this)
{
  AMCP::Log::Scope_Registry *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  _QWORD v12[4];
  _BYTE v13[40];
  void *__p;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  _BYTE buf[18];
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "frbtbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>((uint64_t)v17, (uint64_t)this, (unsigned int *)buf);
  if (!v18)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = *(std::__shared_weak_count **)&buf[8];
    v4 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      v22 = 1024;
      v23 = 1379;
      _os_log_debug_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl::send_is_running_somewhere_else - no timebases found", buf, 0x18u);
    }
  }
  v7 = *((_QWORD *)this + 59);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN23HALS_IOContext_MCP_Impl30send_is_running_somewhere_elseEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_21_2336;
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)v13, (uint64_t)v17);
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
  v8 = atomic_load((unsigned __int8 *)(v7 + 32));
  if ((v8 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v7 + 33));
  dispatch_async(*(dispatch_queue_t *)v7, v12);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v13);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v17);
}

void sub_1B58FC0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26[2];
  uint64_t v27;
  uint64_t (**v28)();
  void *__p[2];
  uint64_t v30;
  std::string v31;
  std::runtime_error v32;
  std::runtime_error v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  _BYTE v47[14];
  const char *v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a2 + 56);
  if (v4 && (v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v8 = v7;
    v9 = *(int8x8_t **)(a2 + 48);
    if (v9)
    {
      if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v21 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = pthread_self();
          v23 = pthread_mach_thread_np(v22);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v23;
          *(_WORD *)v43 = 2080;
          *(_QWORD *)&v43[2] = "Core.h";
          v44 = 1024;
          v45 = 198;
          v46 = 2080;
          *(_QWORD *)v47 = "!in_address.has_wildcards()";
          _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
        }
        abort();
      }
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v40, v9, a3);
      if (!v40)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v14 = *(std::__shared_weak_count **)v43;
        v15 = **(NSObject ***)buf;
        if (*(_QWORD *)v43)
        {
          v16 = (unint64_t *)(*(_QWORD *)v43 + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v18 = pthread_self();
          v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v19;
          *(_WORD *)v43 = 2080;
          *(_QWORD *)&v43[2] = "Core.h";
          v44 = 1024;
          v45 = 202;
          _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
        std::runtime_error::runtime_error(&v32, &v31);
        std::runtime_error::runtime_error(&v33, &v32);
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = -1;
        v33.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v34 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
        *(_QWORD *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) c"
                             "onst [Return_Type = AMCP::Graph::Timebase_Set, Argument_Types = <>]";
        v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v49 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v26);
        *(_OWORD *)__p = *(_OWORD *)v26;
        v30 = v27;
        v26[0] = 0;
        v26[1] = 0;
        v27 = 0;
        v28 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>(a1, v40);
      v11 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_DWORD *)(a1 + 32) = 1065353216;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    v24 = (unint64_t *)&v8->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl30send_is_running_somewhere_elseEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  int *v16;
  int *v17;
  int v18;
  _BYTE v20[40];
  void *v21;
  void *v22;
  uint64_t v23;
  void *__p;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unsigned int *v29;
  unsigned int *v30;
  void *v31;
  int *v32;

  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)v20, a1 + 32);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&v21, *(const void **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v27 = 0;
  v28 = 0;
  HALS_System::GetInstance(&__p, 0, &v27);
  HALS_IOContext_Manager::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager *)&v29, *((os_unfair_lock_s **)__p + 174), (uint64_t)v20);
  v2 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v28;
  if (v28)
  {
    v6 = (unint64_t *)&v28->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v29;
  v9 = v30;
  if (v29 != v30)
  {
    v10 = v29;
    do
    {
      v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
      v13 = (HALS_ObjectMap *)v11;
      if (v11)
      {
        v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v11 + 64));
        if (v15)
        {
          v16 = (int *)v31;
          v17 = v32;
          while (v16 != v17)
          {
            v18 = *v16;
            __p = 0;
            v25 = 0;
            v26 = 0;
            HALS_Client::SendIsRunningSomewhereElse(v15, v18, (uint64_t)&__p);
            if (__p)
            {
              v25 = (std::__shared_weak_count *)__p;
              operator delete(__p);
            }
            ++v16;
          }
        }
        HALS_ObjectMap::ReleaseObject(v15, v14);
      }
      HALS_ObjectMap::ReleaseObject(v13, v12);
      ++v10;
    }
    while (v10 != v9);
  }
  if (v31)
    operator delete(v31);
  if (v8)
    operator delete(v8);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v20);
}

void sub_1B58FC818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)&a10);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Timebase_Set::~Timebase_Set(AMCP::Graph::Timebase_Set *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)this);
}

_QWORD *__copy_helper_block_e8_32c31_ZTSN4AMCP5Graph12Timebase_SetE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)(a1 + 4), a2 + 32);
  v3[9] = 0;
  v3[10] = 0;
  v3 += 9;
  v3[2] = 0;
  return std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(v3, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
}

void sub_1B58FC928(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c31_ZTSN4AMCP5Graph12Timebase_SetE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(a1 + 32);
}

uint64_t std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6973718;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6973718;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  HALS_Object *v1;
  HALS_NotificationManager *v2;
  AudioObjectPropertyAddress v3;

  v1 = *(HALS_Object **)(*(_QWORD *)(a1 + 8) + 40);
  v2 = (HALS_NotificationManager *)*(unsigned int *)(a1 + 16);
  *(_QWORD *)&v3.mSelector = 0x676C6F62676F696ELL;
  v3.mElement = 0;
  HALS_Object::PropertiesChanged_Sync(v1, v2, 0, 1u, &v3);
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl14end_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6973540;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6973540;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6973540;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6973540;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  int v7;
  _OWORD *IOStatus;
  unsigned int *v9;
  HALS_NotificationManager *v10;
  _QWORD *v11;
  uint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  int v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL8 v19;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unsigned __int8 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  const char *v38;
  unint64_t *v39;
  unint64_t v40;
  _DWORD *exception;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t block;
  uint64_t v45;
  void (*v46)(uint64_t);
  void *v47;
  int v48;
  _BYTE buf[24];
  __int128 v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
        goto LABEL_41;
      v6 = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = v6 + 1;
      if (v6)
        goto LABEL_41;
      v7 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 16);
      IOStatus = (_OWORD *)HALB_IOBufferManager_Server::GetIOStatus(*(HALB_IOBufferManager_Server **)(v5 + 240));
      if (!IOStatus)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext_MCP_Impl.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1423;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1970171760;
      }
      IOStatus[17] = 0u;
      IOStatus[18] = 0u;
      IOStatus[15] = 0u;
      IOStatus[16] = 0u;
      IOStatus[13] = 0u;
      IOStatus[14] = 0u;
      IOStatus[11] = 0u;
      IOStatus[12] = 0u;
      IOStatus[9] = 0u;
      IOStatus[10] = 0u;
      IOStatus[7] = 0u;
      IOStatus[8] = 0u;
      IOStatus[5] = 0u;
      IOStatus[6] = 0u;
      IOStatus[3] = 0u;
      IOStatus[4] = 0u;
      IOStatus[1] = 0u;
      IOStatus[2] = 0u;
      *IOStatus = 0u;
      HALS_IOContext_MCP_Impl::update_status_time_info((HALS_IOContext_MCP_Impl *)v5);
      OSMemoryBarrier();
      v9 = *(unsigned int **)(v5 + 40);
      v10 = (HALS_NotificationManager *)v9[18];
      if (!(_DWORD)v10)
        v10 = (HALS_NotificationManager *)v9[4];
      *(_QWORD *)buf = &off_1E6973698;
      *(_QWORD *)&buf[8] = v5;
      *(_QWORD *)&buf[16] = v10;
      *(_QWORD *)&v50 = buf;
      block = 0x676C6F62676F696ELL;
      LODWORD(v45) = 0;
      HALS_Object::PropertiesChanged_Sync((HALS_Object *)v9, v10, 0, 1u, (const AudioObjectPropertyAddress *)&block);
      v11 = (_QWORD *)v50;
      if ((_BYTE *)v50 == buf)
      {
        v12 = 4;
        v11 = buf;
      }
      else
      {
        if (!(_QWORD)v50)
          goto LABEL_13;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_13:
      v13 = (AMCP::Log::Scope_Registry *)HALS_IOContext::WaitForClientToBeginTransport(*(HALS_IOContext **)(v5 + 40));
      v14 = (int)v13;
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v15 = *(std::__shared_weak_count **)&buf[8];
      v16 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v19 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (v19)
      {
        v36 = pthread_self();
        v37 = pthread_mach_thread_np(v36);
        v38 = "NO";
        *(_DWORD *)&buf[4] = v37;
        *(_DWORD *)buf = 67109890;
        *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
        *(_WORD *)&buf[8] = 2080;
        if (v14)
          v38 = "YES";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1440;
        LOWORD(v50) = 2080;
        *(_QWORD *)((char *)&v50 + 2) = v38;
        _os_log_debug_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d finished WaitForClientToBeginTransport: did start: %s", buf, 0x22u);
        if ((v14 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v14 & 1) != 0)
      {
LABEL_20:
        platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)v19);
        v21 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
        v22 = HALS_PlatformBehaviors::get_platform_behaviors(v21);
        (*(void (**)(uint64_t *))(*v22 + 64))(v22);
        v23 = *(_QWORD *)(v5 + 472);
        v24 = MEMORY[0x1E0C809B0];
        block = MEMORY[0x1E0C809B0];
        v45 = 0x40000000;
        v46 = ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke;
        v47 = &__block_descriptor_tmp_24_2341;
        v48 = v7;
        v25 = atomic_load((unsigned __int8 *)(v23 + 32));
        if ((v25 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v23 + 33));
        dispatch_async(*(dispatch_queue_t *)v23, &block);
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v42, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
        v26 = *(_QWORD *)(v5 + 472);
        *(_QWORD *)buf = v24;
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&buf[16] = ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke_2;
        *(_QWORD *)&v50 = &__block_descriptor_tmp_25_2342;
        *((_QWORD *)&v50 + 1) = v42;
        v51 = v43;
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        v29 = atomic_load((unsigned __int8 *)(v26 + 32));
        if ((v29 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v26 + 33));
        dispatch_async(*(dispatch_queue_t *)v26, buf);
        v30 = v51;
        if (v51)
        {
          v31 = (unint64_t *)&v51->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v43;
        if (v43)
        {
          v34 = (unint64_t *)&v43->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        goto LABEL_41;
      }
      HALS_IOContext_MCP_Impl::stop(v5);
LABEL_41:
      v39 = (unint64_t *)&v4->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B58FD090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  std::__shared_weak_count *v20;
  char *v21;
  char *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v23 = a20;
  if (a20 == v21)
  {
    v24 = 4;
    v23 = &a17;
  }
  else
  {
    if (!a20)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      _Unwind_Resume(exception_object);
    }
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
  goto LABEL_6;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::target_type()
{
}

void HALS_IOContext_MCP_Impl::update_status_time_info(HALS_IOContext_MCP_Impl *this)
{
  uint64_t IOStatus;
  int8x16_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  double v6;
  char v7;
  unint64_t v8;
  float64x2_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int8x16_t v19;
  int32x2_t v20;
  int64x2_t v21;
  unsigned int v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  int v25;
  void **v26;
  _DWORD *exception;
  std::runtime_error *v28;
  _DWORD *v29;
  double v30;
  float64x2_t v31;
  CFTypeRef cf;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE buf[18];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  IOStatus = HALB_IOBufferManager_Server::GetIOStatus(*((HALB_IOBufferManager_Server **)this + 30));
  if (!IOStatus)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContext_MCP_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1517;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  v3 = (int8x16_t *)IOStatus;
  v35 = 0;
  v36 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4 && (v4 = std::__shared_weak_count::lock(v4), (v36 = v4) != 0) && (v35 = *((_QWORD *)this + 6)) != 0)
  {
    v5 = *((_QWORD *)this + 32);
    if (!v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext_MCP_Impl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1538;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  master timebase not found!", buf, 0x12u);
      }
      v29 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v29 = &off_1E69A1B30;
      v29[2] = 1970171760;
    }
    v6 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5));
    if (v7)
    {
      (*(void (**)(_QWORD, double))(**((_QWORD **)this + 32) + 56))(*((_QWORD *)this + 32), v6);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 160))(*((_QWORD *)this + 32));
    }
    v30 = (*(double (**)(_QWORD))(**((_QWORD **)this + 32) + 72))(*((_QWORD *)this + 32));
    *(double *)&v8 = (*(double (**)(_QWORD))(**((_QWORD **)this + 32) + 160))(*((_QWORD *)this + 32));
    v9.f64[0] = v30;
    v9.f64[1] = 1.0 / v30;
    v31 = vmulq_f64(v9, (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL));
    v10 = v8;
  }
  else
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)&buf[8];
    v12 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v31 = 0u;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      v25 = *(_DWORD *)(*((_QWORD *)this + 5) + 16);
      HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&cf, (uint64_t)this);
      if (!cf)
      {
        v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v28, "Could not construct");
        __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
      if (v34 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      v38 = 1024;
      v39 = 1551;
      v40 = 1024;
      v41 = v25;
      v42 = 2080;
      v43 = v26;
      _os_log_debug_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
      if (v34 < 0)
        operator delete(__p[0]);
      if (cf)
        CFRelease(cf);
    }
    v10 = 0;
  }
  v15 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 64) + 40);
  v19 = (int8x16_t)vdivq_f64(v31, (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL));
  v20 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 64) + 40) == 0);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  *v3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v21, 0x3FuLL)), v19, vrev64q_s8(v19));
  if (v18)
  {
    v10 = bswap64(v10);
    v22 = bswap32(*((_DWORD *)this + 62));
  }
  else
  {
    v22 = *((_DWORD *)this + 62);
  }
  v3[1].i64[0] = v10;
  v3[1].i32[2] = v22;
}

void sub_1B58FD5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_MCP_Impl::stop(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(this + 32);
  if (v1)
  {
    v2 = this;
    *(_DWORD *)(this + 32) = v1 - 1;
    v3 = *(_QWORD *)(*(_QWORD *)(this + 40) + 80);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 40) + 80) + 128))(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 80));
    }
    v4 = 0x676C6F6273746F70;
    v5 = 0;
    return HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>(v2, (unsigned int *)&v4);
  }
  return this;
}

void ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  HALS_System *v10;
  std::__shared_weak_count *v11;

  v8 = 0;
  v9 = 0;
  HALS_System::GetInstance(&v10, 0, &v8);
  HALS_System::SetIOContextIsRunning(v10, *(_DWORD *)(a1 + 32), 1);
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B58FD74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke_2(uint64_t a1)
{
  return HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(*(HALS_IOContext_MCP_Impl **)(a1 + 32));
}

uint64_t HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(AMCP::Address **)(a1 + 48);
  if (v7)
    v8 = AMCP::Core::Core::call_operation_function<BOOL>(v7, a2);
  else
    v8 = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL>(AMCP::Address *a1, unsigned int *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::runtime_error v25;
  std::runtime_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Core.h";
      v37 = 1024;
      v38 = 198;
      v39 = 2080;
      *(_QWORD *)v40 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v33, (int8x8_t *)a1, a2);
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v36;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v36)
    {
      v11 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Core.h";
      v37 = 1024;
      v38 = 202;
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v24);
    std::runtime_error::runtime_error(&v25, &v24);
    std::runtime_error::runtime_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v27 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v40[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <>]";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v42 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = AMCP::Core::Operation::call_function<BOOL>(v33);
  v5 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1B58FDB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = *(std::__shared_weak_count **)(v25 - 120);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6973698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6973698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  HALS_Object *v1;
  HALS_NotificationManager *v2;
  AudioObjectPropertyAddress v3;

  v1 = *(HALS_Object **)(*(_QWORD *)(a1 + 8) + 40);
  v2 = (HALS_NotificationManager *)*(unsigned int *)(a1 + 16);
  *(_QWORD *)&v3.mSelector = 0x676C6F62676F696ELL;
  v3.mElement = 0;
  HALS_Object::PropertiesChanged_Sync(v1, v2, 0, 1u, &v3);
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl16begin_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::runtime_error v46;
  std::runtime_error v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint8_t buf[8];
  _BYTE v57[10];
  __int16 v58;
  int v59;
  __int128 v60;
  const char *v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 198;
      LOWORD(v60) = 2080;
      *(_QWORD *)((char *)&v60 + 2) = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v38, (int8x8_t *)a1, a2);
  v7 = v38;
  if (!v38)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = *(std::__shared_weak_count **)v57;
    v25 = **(NSObject ***)buf;
    if (*(_QWORD *)v57)
    {
      v26 = (unint64_t *)(*(_QWORD *)v57 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 202;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = void, Argument_Types = <std::function<void >>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v62 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v54, a3);
  v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 154;
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v34 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void >>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v34, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>(),
        v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 161;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v23 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void >>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v23, (uint64_t)buf);
  }
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v54);
  v12 = *((_QWORD *)v11 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v13 = (uint8_t *)v60;
  if ((uint8_t *)v60 == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!(_QWORD)v60)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_18:
  v15 = v55;
  if (v55 == v54)
  {
    v16 = 4;
    v15 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_23;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
  v17 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B58FE514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[496];
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E69734C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E69734C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  std::__shared_weak_count **v1;
  HALS_Object *v2;
  HALS_ObjectMap *v3;

  v1 = (std::__shared_weak_count **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  v3 = (HALS_ObjectMap *)v1;
  if (v1)
    HALS_IOContext::SignalOverloadToClient(v1);
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1B58FE92C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *v34;
  NSObject *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::runtime_error v46;
  std::runtime_error v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint8_t buf[8];
  _BYTE v57[10];
  __int16 v58;
  int v59;
  __int128 v60;
  const char *v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 198;
      LOWORD(v60) = 2080;
      *(_QWORD *)((char *)&v60 + 2) = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v38, (int8x8_t *)a1, a2);
  v7 = v38;
  if (!v38)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = *(std::__shared_weak_count **)v57;
    v25 = **(NSObject ***)buf;
    if (*(_QWORD *)v57)
    {
      v26 = (unint64_t *)(*(_QWORD *)v57 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Core.h";
      v58 = 1024;
      v59 = 202;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = void, Argument_Types = <std::function<void (unsigned int, const AMCP::Pro"
                            "c_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v62 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v54, a3);
  v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 154;
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v34 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsign"
                            "ed long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v34, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>(),
        v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v57 = 2080;
      *(_QWORD *)&v57[2] = "Operation.h";
      v58 = 1024;
      v59 = 161;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v23 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *((_QWORD *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = voi"
                            "d, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsign"
                            "ed long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v62 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v23, (uint64_t)buf);
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v54);
  v12 = *((_QWORD *)v11 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v13 = (uint8_t *)v60;
  if ((uint8_t *)v60 == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!(_QWORD)v60)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_18:
  v15 = v55;
  if (v55 == v54)
  {
    v16 = 4;
    v15 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_23;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
  v17 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B58FF118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[494];
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E6973440;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E6973440;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6973440;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6973440;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t *a6, uint64_t *a7)
{
  std::__shared_weak_count *v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _OWORD *IOStatus;
  int v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _DWORD *exception;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    v10 = *a4;
    v11 = *a5;
    v12 = *a6;
    v13 = *a7;
    v14 = std::__shared_weak_count::lock(v8);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 8);
      if (v16)
      {
        ++*(_DWORD *)(v16 + 24);
        IOStatus = (_OWORD *)HALB_IOBufferManager_Server::GetIOStatus(*(HALB_IOBufferManager_Server **)(v16 + 240));
        if (!IOStatus)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v41 = 136315394;
            v42 = "HALS_IOContext_MCP_Impl.cpp";
            v43 = 1024;
            v44 = 1562;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", (uint8_t *)&v41, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 1970171760;
        }
        v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 64) + 40);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 64) + 40))
        {
          *(_QWORD *)(v16 + 272) = bswap64(*(_QWORD *)a3);
          *(_QWORD *)(v16 + 280) = bswap64(*(_QWORD *)(a3 + 8));
          *(_QWORD *)(v16 + 288) = bswap64(*(_QWORD *)(a3 + 16));
          *(_DWORD *)(v16 + 328) = bswap32(*(_DWORD *)(a3 + 56));
          v19 = (__int128 *)(v16 + 336);
          *(_QWORD *)(v16 + 336) = bswap64(*(_QWORD *)(a3 + 64));
          *(_QWORD *)(v16 + 344) = bswap64(*(_QWORD *)(a3 + 72));
          *(_QWORD *)(v16 + 352) = bswap64(*(_QWORD *)(a3 + 16));
          *(_DWORD *)(v16 + 392) = bswap32(*(_DWORD *)(a3 + 56));
          v20 = (__int128 *)(v16 + 400);
          *(_QWORD *)(v16 + 400) = bswap64(*(_QWORD *)(a3 + 128));
          v21 = bswap64(*(_QWORD *)(a3 + 136));
        }
        else
        {
          *(_QWORD *)(v16 + 272) = *(_QWORD *)a3;
          *(_QWORD *)(v16 + 280) = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(v16 + 288) = *(_QWORD *)(a3 + 16);
          *(_DWORD *)(v16 + 328) = *(_DWORD *)(a3 + 56);
          v19 = (__int128 *)(v16 + 336);
          *(_QWORD *)(v16 + 336) = *(_QWORD *)(a3 + 64);
          *(_QWORD *)(v16 + 344) = *(_QWORD *)(a3 + 72);
          *(_QWORD *)(v16 + 352) = *(_QWORD *)(a3 + 16);
          *(_DWORD *)(v16 + 392) = *(_DWORD *)(a3 + 56);
          v20 = (__int128 *)(v16 + 400);
          *(_QWORD *)(v16 + 400) = *(_QWORD *)(a3 + 128);
          v21 = *(_QWORD *)(a3 + 136);
        }
        *(_QWORD *)(v16 + 408) = v21;
        v22 = bswap64(*(_QWORD *)(a3 + 16));
        v23 = bswap32(*(_DWORD *)(a3 + 56));
        v24 = v18 == 0;
        if (v18)
          v25 = v22;
        else
          v25 = *(_QWORD *)(a3 + 16);
        if (v24)
          v26 = *(_DWORD *)(a3 + 56);
        else
          v26 = v23;
        *(_QWORD *)(v16 + 416) = v25;
        *(_DWORD *)(v16 + 456) = v26;
        v27 = *(_OWORD *)(v16 + 272);
        v28 = *(_OWORD *)(v16 + 288);
        v29 = *(_OWORD *)(v16 + 320);
        IOStatus[8] = *(_OWORD *)(v16 + 304);
        IOStatus[9] = v29;
        IOStatus[6] = v27;
        IOStatus[7] = v28;
        v30 = *v19;
        v31 = v19[1];
        v32 = v19[3];
        IOStatus[12] = v19[2];
        IOStatus[13] = v32;
        IOStatus[10] = v30;
        IOStatus[11] = v31;
        v33 = *v20;
        v34 = v20[1];
        v35 = v20[3];
        IOStatus[16] = v20[2];
        IOStatus[17] = v35;
        IOStatus[14] = v33;
        IOStatus[15] = v34;
        HALS_IOContext_MCP_Impl::update_status_time_info((HALS_IOContext_MCP_Impl *)v16);
        OSMemoryBarrier();
        v37 = *(_QWORD *)(v16 + 192);
        v36 = *(_QWORD *)(v16 + 200);
        if (-991146299 * ((*(_QWORD *)(v16 + 224) - *(_QWORD *)(v16 + 216)) >> 3))
          HALS_IOContext_MCP_Impl::copy_buffers((AMCP::Log::Scope_Registry *)v16, 1u, v10, v11);
        kdebug_trace();
        HALS_IOContext::CallClientIOProc(*(HALS_IOContext **)(v16 + 40), *(_DWORD *)(v16 + 24), *(_DWORD *)(v16 + 248), 0);
        kdebug_trace();
        if (-991146299 * ((unint64_t)(v36 - v37) >> 3))
          HALS_IOContext_MCP_Impl::copy_buffers((AMCP::Log::Scope_Registry *)v16, 0, v12, v13);
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1B58FF978(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

AMCP::Log::Scope_Registry *HALS_IOContext_MCP_Impl::copy_buffers(AMCP::Log::Scope_Registry *result, unsigned int a2, unint64_t a3, uint64_t a4)
{
  AMCP::Log::Scope_Registry *v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  byte *IOBuffer;
  byte *v16;
  uint64_t v17;
  unsigned int v18;
  size_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  const char *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  _QWORD *v30;
  AudioStreamBasicDescription v31;
  AudioStreamBasicDescription v32;
  uint8_t buf[8];
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v7 = result;
  v40 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD **)(a4 + 72);
  if (v8 && *v8 != 1)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      v34 = 2080;
      v35 = "HALS_IOContext_MCP_Impl.cpp";
      v36 = 1024;
      v37 = 1647;
      v38 = 2080;
      v39 = "in_streams[0].m_buffer_list == nullptr or in_streams[0].m_buffer_list->mNumberBuffers == 1";
      v27 = "%6u %32s:%-5d Assertion Failed: %s The ABL from the MCP is supposed to have 1 buffer";
LABEL_20:
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, v27, buf, 0x22u);
    }
LABEL_21:
    abort();
  }
  if (a3)
  {
    v9 = 0;
    v30 = (_QWORD *)((char *)result + 24 * a2 + 192);
    v10 = 1;
    do
    {
      v11 = a4 + 80 * v9;
      v14 = *(_DWORD **)(v11 + 72);
      v13 = (uint64_t *)(v11 + 72);
      v12 = v14;
      if (v14)
      {
        if (*v12 != 1)
        {
          AMCP::Log::Scope_Registry::get(result);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v24 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v26;
            v34 = 2080;
            v35 = "HALS_IOContext_MCP_Impl.cpp";
            v36 = 1024;
            v37 = 1653;
            v38 = 2080;
            v39 = "in_streams[i].m_buffer_list->mNumberBuffers == 1";
            v27 = "%6u %32s:%-5d Assertion Failed: %s The input ABL from the MCP is supposed to have 1 buffer";
            goto LABEL_20;
          }
          goto LABEL_21;
        }
        *(_DWORD *)buf = 0;
        IOBuffer = (byte *)HALB_IOBufferManager_Server::GetIOBuffer(*((HALB_IOBufferManager_Server **)v7 + 30), a2 == 1, v10 - 1, (unsigned int *)buf);
        v16 = IOBuffer;
        v17 = *v13;
        v18 = *(_DWORD *)(*v13 + 12);
        if (v18 >= *(_DWORD *)buf)
          v19 = *(unsigned int *)buf;
        else
          v19 = v18;
        if (a2 == 1)
        {
          result = (AMCP::Log::Scope_Registry *)memcpy(IOBuffer, *(const void **)(v17 + 16), v19);
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 64) + 40))
          {
            v20 = *((_QWORD *)v7 + 27) + 104 * v9;
            v21 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)&v32.mSampleRate = *(_OWORD *)v20;
            *(_OWORD *)&v32.mBytesPerPacket = v21;
            *(_QWORD *)&v32.mBitsPerChannel = *(_QWORD *)(v20 + 32);
            result = (AMCP::Log::Scope_Registry *)endian_swap_samples(&v32, v16, v19);
          }
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 64) + 40))
          {
            v22 = *v30 + 104 * v9;
            v23 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)&v31.mSampleRate = *(_OWORD *)v22;
            *(_OWORD *)&v31.mBytesPerPacket = v23;
            *(_QWORD *)&v31.mBitsPerChannel = *(_QWORD *)(v22 + 32);
            endian_swap_samples(&v31, IOBuffer, v19);
            v17 = *v13;
          }
          result = (AMCP::Log::Scope_Registry *)memcpy(*(void **)(v17 + 16), v16, v19);
        }
      }
      v9 = v10++;
    }
    while (v9 < a3);
  }
  return result;
}

_DWORD *endian_swap_samples(_DWORD *result, byte *a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (result[2] == 1819304813)
  {
    v3 = result[7];
    v4 = result[6] / v3;
    v5 = v3 * a3;
    if (v4 == 4)
    {
      if ((_DWORD)v5)
      {
        do
        {
          *(_DWORD *)a2 = bswap32(*(_DWORD *)a2);
          a2 += 4;
          --v5;
        }
        while (v5);
      }
    }
    else if (v4 == 2 && (_DWORD)v5 != 0)
    {
      do
      {
        *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a2) >> 16;
        a2 += 2;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t AMCP::Core::Core::set_simple_property_value<1936484705u>(int8x8_t *a1, _BYTE *a2)
{
  _QWORD *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD v14[2];
  void (*v15)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;

  v18 = 0x676C6F62736C6961;
  v19 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v18))
    return 0;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, a1, (unsigned int *)&v18);
  v4 = v16;
  if (!v16)
  {
LABEL_14:
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return 0;
  }
  v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10))
    {
      memset(v14, 0, sizeof(v14));
      LOBYTE(v14[0]) = *a2;
      v15 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v14);
      if (v15)
        v15(0, (uint64_t)v14, 0, 0);
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1B58FFEC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  AMCP::Thing::~Thing((AMCP::Thing *)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B58FFEA8);
}

uint64_t HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v25[2];
  uint64_t v26;
  uint64_t (**v27)();
  void *__p[2];
  uint64_t v29;
  std::string v30;
  std::runtime_error v31;
  std::runtime_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  _BYTE v46[14];
  const char *v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(int8x8_t **)(a1 + 48);
  if (v7)
  {
    if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v19 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "Core.h";
        v43 = 1024;
        v44 = 198;
        v45 = 2080;
        *(_QWORD *)v46 = "!in_address.has_wildcards()";
        _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v39, v7, a2);
    if (!v39)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v42;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v42)
      {
        v14 = (unint64_t *)(*(_QWORD *)v42 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = "Core.h";
        v43 = 1024;
        v44 = 202;
        _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
      std::runtime_error::runtime_error(&v31, &v30);
      std::runtime_error::runtime_error(&v32, &v31);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = -1;
      v32.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v33 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *(_QWORD *)&v46[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) con"
                           "st [Return_Type = AMCP::Transport_State, Argument_Types = <>]";
      v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      v48 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v25);
      *(_OWORD *)__p = *(_OWORD *)v25;
      v29 = v26;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v27 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v27);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v8 = AMCP::Core::Operation::call_function<AMCP::Transport_State>(v39);
    v9 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v22 = (unint64_t *)&v6->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void HALS_IOContext_MCP_Impl::start(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::__shared_weak_count *imp;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_Device *v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  int8x8_t *v27;
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  AMCP::Address *v49;
  char v50;
  char v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  void *exception;
  uint64_t v59;
  NSObject *v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  _opaque_pthread_t *v66;
  mach_port_t v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  void *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t (**v98)();
  __int128 v99;
  uint64_t v100;
  std::string v101;
  std::runtime_error v102;
  std::runtime_error v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  char v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  _BYTE buf[18];
  __int16 v113;
  _BYTE v114[20];
  const char *v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "frbtbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>((uint64_t)&v86, a2, (unsigned int *)buf);
  v83 = a4;
  if (!v89)
  {
    v16 = 1;
    goto LABEL_28;
  }
  v98 = 0;
  *(_QWORD *)&v99 = 0;
  HALS_System::GetInstance(&v103, 0, (uint64_t *)&v98);
  HALS_IOContext_Manager::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager *)buf, (os_unfair_lock_s *)v103.__vftable[58].~runtime_error, (uint64_t)&v86);
  imp = (std::__shared_weak_count *)v103.__imp_.__imp_;
  if (v103.__imp_.__imp_)
  {
    v9 = (unint64_t *)(v103.__imp_.__imp_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v11 = (std::__shared_weak_count *)v99;
  if ((_QWORD)v99)
  {
    v12 = (unint64_t *)(v99 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(void **)&v114[4];
  v15 = *(_QWORD *)&v114[12];
  if (*(_QWORD *)&v114[4] == *(_QWORD *)&v114[12])
  {
    v16 = 0;
    if (*(_QWORD *)&v114[4])
LABEL_24:
      operator delete(v14);
  }
  else
  {
    v16 = 0;
    v17 = *(_QWORD *)&v114[4] + 4;
    do
    {
      v19 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v17 - 4));
      if (!v19
        || (v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 200))(*(_QWORD *)(a2 + 40)),
            HALS_Device::GetHogModeOwner(v19) == v20)
        || HALS_Device::GetHogModeOwner(v19) == -1)
      {
        v21 = 0;
      }
      else
      {
        v16 = 1;
        v21 = 1;
      }
      HALS_ObjectMap::ReleaseObject(v19, v18);
      if (v17 == v15)
        v22 = 1;
      else
        v22 = v21;
      v17 += 4;
    }
    while ((v22 & 1) == 0);
    if (v14)
      goto LABEL_24;
  }
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
LABEL_28:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&v86);
  if ((v16 & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 80);
    if (v23)
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96))(v23);
    else
      v24 = 0;
    v32 = HALS_IOContext_MCP_Impl::CopyWorkIntervalPort((HALS_IOContext_MCP_Impl *)a2);
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v24;
    *(_QWORD *)(a1 + 8) = v32;
    *(_QWORD *)(a1 + 16) = 0;
    return;
  }
  v84 = 0x676C6F626E646465;
  v85 = 0;
  v25 = *(std::__shared_weak_count **)(a2 + 56);
  if (!v25)
  {
    v26 = 0;
    goto LABEL_47;
  }
  v25 = std::__shared_weak_count::lock(v25);
  v26 = v25;
  if (!v25 || (v27 = *(int8x8_t **)(a2 + 48)) == 0)
  {
LABEL_47:
    v86 = 1;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0x100000000;
    *(_OWORD *)__p = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    if (!v26)
      goto LABEL_52;
    goto LABEL_48;
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v110, v27, (unsigned int *)&v84);
  if (!v110)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v52 = *(std::__shared_weak_count **)&buf[8];
    v53 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v54 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      v56 = pthread_self();
      v57 = pthread_mach_thread_np(v56);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v57;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      v113 = 1024;
      *(_DWORD *)v114 = 202;
      _os_log_error_impl(&dword_1B57BA000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v109);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v101);
    std::runtime_error::runtime_error(&v102, &v101);
    std::runtime_error::runtime_error(&v103, &v102);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = -1;
    v103.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v104 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v103);
    *(_QWORD *)&v114[12] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) con"
                           "st [Return_Type = AMCP::Node_Description, Argument_Types = <>]";
    v115 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v116 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v96);
    v99 = v96;
    v59 = v97;
    v97 = 0;
    v98 = off_1E69A20A0;
    v100 = v59;
    v96 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v98);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v25 = (std::__shared_weak_count *)AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)&v86, v110);
  v29 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_48:
  v33 = (unint64_t *)&v26->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_52:
  v35 = HIBYTE(v89);
  if (v89 < 0)
    v35 = v88;
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v60 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      v61 = pthread_self();
      v62 = pthread_mach_thread_np(v61);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v62;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      v113 = 1024;
      *(_DWORD *)v114 = 159;
      *(_WORD *)&v114[4] = 2080;
      *(_QWORD *)&v114[6] = "not (not node_description.mUID.empty())";
      _os_log_error_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to start with an invalid mcp context", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v84);
    v63 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to start with an invalid mcp context", (uint64_t)&v101);
    std::logic_error::logic_error((std::logic_error *)&v102, &v101);
    v102.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v103, (const std::logic_error *)&v102);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = -1;
    v103.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    v104 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v103);
    *(_QWORD *)&v114[12] = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
    v115 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
    v116 = 159;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v96);
    v99 = v96;
    v64 = v97;
    v97 = 0;
    v98 = off_1E69A20A0;
    v100 = v64;
    v96 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v98);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v63, (uint64_t)buf);
  }
  if (*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216) != (_QWORD)v95 - *((_QWORD *)&v94 + 1))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v65 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      v66 = pthread_self();
      v67 = pthread_mach_thread_np(v66);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v67;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      v113 = 1024;
      *(_DWORD *)v114 = 160;
      *(_WORD *)&v114[4] = 2080;
      *(_QWORD *)&v114[6] = "not (m_node_description.mTerminals[Direction::input].size() == node_description.mTerminals[D"
                            "irection::input].size())";
      _os_log_error_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v84);
    v68 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v101);
    std::logic_error::logic_error((std::logic_error *)&v102, &v101);
    v102.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v103, (const std::logic_error *)&v102);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = -1;
    v103.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    v104 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v103);
    *(_QWORD *)&v114[12] = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
    v115 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
    v116 = 160;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v96);
    v99 = v96;
    v69 = v97;
    v97 = 0;
    v98 = off_1E69A20A0;
    v100 = v69;
    v96 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v98);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v68, (uint64_t)buf);
  }
  if (*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192) != *((_QWORD *)&v93 + 1) - (_QWORD)v93)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v70 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      v71 = pthread_self();
      v72 = pthread_mach_thread_np(v71);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v72;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      v113 = 1024;
      *(_DWORD *)v114 = 161;
      *(_WORD *)&v114[4] = 2080;
      *(_QWORD *)&v114[6] = "not (m_node_description.mTerminals[Direction::output].size() == node_description.mTerminals["
                            "Direction::output].size())";
      _os_log_error_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v84);
    v73 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v101);
    std::logic_error::logic_error((std::logic_error *)&v102, &v101);
    v102.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v103, (const std::logic_error *)&v102);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = -1;
    v103.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
    v104 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v103);
    *(_QWORD *)&v114[12] = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
    v115 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
    v116 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v96);
    v99 = v96;
    v74 = v97;
    v97 = 0;
    v98 = off_1E69A20A0;
    v100 = v74;
    v96 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v98);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v73, (uint64_t)buf);
  }
  v81 = a1;
  v82 = a3;
  v36 = 0;
  v37 = 0;
  ++*(_DWORD *)(a2 + 32);
  v38 = *(_QWORD **)(a2 + 240);
  v38[2] = v38[1];
  v38[5] = v38[4];
  *(_QWORD *)buf = 1;
  do
  {
    v39 = v36;
    v40 = *(_DWORD *)&buf[4 * v37];
    v41 = (uint64_t *)(a2 + 192 + 24 * v40);
    v42 = *v41;
    if (v41[1] != *v41)
    {
      v43 = 0;
      v44 = 24;
      do
      {
        HALB_IOBufferManager_Server::AddIOBuffer(*(HALB_IOBufferManager_Server **)(a2 + 240), v40 == 1, v43++, *(_DWORD *)(v42 + v44) << 12);
        v42 = *v41;
        v44 += 104;
      }
      while (v43 < 0x4EC4EC4EC4EC4EC5 * ((v41[1] - *v41) >> 3));
    }
    v36 = 1;
    v37 = 1;
  }
  while ((v39 & 1) == 0);
  HALB_IOBufferManager_Server::Allocate(*(HALB_IOBufferManager_Server **)(a2 + 240), 0);
  *(_DWORD *)(a2 + 24) = 0;
  v45 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 80);
  if (v45)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 24))(v45, 0);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 40) + 80) + 104))(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 80));
  }
  if (v83)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOContext_MCP_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 195;
      v113 = 2048;
      *(_QWORD *)v114 = v82;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_MCP_Impl::start:  %llu", buf, 0x1Cu);
    }
    strcpy(buf, "tatsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v46 = *(std::__shared_weak_count **)(a2 + 56);
    if (!v46)
      goto LABEL_96;
    v47 = std::__shared_weak_count::lock(v46);
    if (!v47)
      goto LABEL_96;
    v48 = v47;
    v49 = *(AMCP::Address **)(a2 + 48);
    if (v49)
      v50 = AMCP::Core::Core::call_operation_function<BOOL,unsigned long long>(v49, (unsigned int *)buf, v82);
    else
      v50 = 0;
    v75 = (unint64_t *)&v48->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    if ((v50 & 1) == 0)
      goto LABEL_96;
  }
  else
  {
    strcpy(buf, "trtsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    if ((HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>(a2, (unsigned int *)buf) & 1) == 0)
    {
LABEL_96:
      v51 = 0;
      --*(_DWORD *)(a2 + 32);
      goto LABEL_97;
    }
  }
  v51 = 1;
LABEL_97:
  v77 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 80);
  if (v77)
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 96))(v77);
  else
    v78 = 0;
  v79 = HALS_IOContext_MCP_Impl::CopyWorkIntervalPort((HALS_IOContext_MCP_Impl *)a2);
  *(_BYTE *)v81 = v51;
  *(_DWORD *)(v81 + 4) = v78;
  *(_DWORD *)(v81 + 8) = v79;
  *(_DWORD *)(v81 + 12) = 0;
  v80 = 96;
  *(_QWORD *)(v81 + 16) = 0;
  do
  {
    *(_QWORD *)buf = (char *)&v86 + v80;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v80 -= 24;
  }
  while (v80 != 48);
  if (SBYTE7(v92) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v89) < 0)
    operator delete(v87);
}

void sub_1B5901110(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B590139CLL);
}

void sub_1B590134C()
{
  JUMPOUT(0x1B590135CLL);
}

void sub_1B5901390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  AMCP::Node_Description::~Node_Description((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B59013A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,std::runtime_error a42,std::runtime_error a43,void *a44,uint64_t a45)
{
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a29)
      operator delete(a29);
    *(_QWORD *)(v47 - 160) = &unk_1E69A2000;
    v48 = *(_QWORD *)(v47 - 152);
    if (v48 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48))
      *(_QWORD *)(v47 - 152) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v47 - 176));
    a44 = &unk_1E69A2000;
    if (a45 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a45 + 32))(a45))
      a45 = 0;
    std::runtime_error::~runtime_error(&a43);
    std::runtime_error::~runtime_error(&a42);
    if (a41 < 0)
      operator delete(a36);
    if (v46)
      __cxa_free_exception(v45);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v47 - 193));
    JUMPOUT(0x1B5901488);
  }
  JUMPOUT(0x1B590139CLL);
}

void AMCP::Node_Description::~Node_Description(void **this)
{
  uint64_t i;
  void **v3;

  for (i = 12; i != 6; i -= 3)
  {
    v3 = &this[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL,unsigned long long>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *exception;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  NSObject *v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::runtime_error v43;
  std::runtime_error v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint8_t buf[8];
  _BYTE v52[10];
  __int16 v53;
  int v54;
  __int16 v55;
  _BYTE v56[14];
  const char *v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v32 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 198;
      v55 = 2080;
      *(_QWORD *)v56 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v35, (int8x8_t *)a1, a2);
  v7 = v35;
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v52;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v52)
    {
      v23 = (unint64_t *)(*(_QWORD *)v52 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 202;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <unsigned long long>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v58 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 154;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v31 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <unsigned long long>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v31, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>(),
        (v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 161;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v20 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <unsigned long long>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  *(_QWORD *)buf = a3;
  v11 = *((_QWORD *)v9 + 3);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
  v13 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1B5901BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3, __int128 *a4)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::runtime_error v46;
  std::runtime_error v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  _BYTE buf[48];
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 198;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v38, a2, a3);
  v8 = v38;
  if (!v38)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = *(std::__shared_weak_count **)&buf[8];
    v21 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 202;
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = std::optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v55) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v34 = *a4;
  v35 = a4[1];
  v36 = a4[2];
  v37 = a4[3];
  v9 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 154;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::"
                          "optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v55) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  v11 = v10;
  if (!*((_QWORD *)v10 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>(),
        (v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v19 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v45);
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error::runtime_error(&v47, &v46);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v47.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v48 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v47);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::"
                          "optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v55) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    v43 = v40;
    v44 = v41;
    v40 = 0uLL;
    v41 = 0;
    v42 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v42);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v19, (uint64_t)buf);
  }
  *(_OWORD *)&buf[32] = v36;
  v55 = v37;
  *(_OWORD *)buf = v34;
  *(_OWORD *)&buf[16] = v35;
  v12 = *((_QWORD *)v10 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf);
  v13 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B5902528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::runtime_error a32,std::runtime_error a33,uint64_t a34,uint64_t a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[20];
}

void HALS_IOContext_MCP_Impl::reassert_description_for_device_change(HALS_IOContext_MCP_Impl *this, const __CFString *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  os_unfair_lock_s *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  BOOL v9;
  AMCP::Log::Scope_Registry *v10;
  CFTypeRef v11;
  int v12;
  BOOL v13;
  unint64_t Count;
  unint64_t v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  std::runtime_error *v29;
  std::runtime_error *v30;
  std::runtime_error *v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  CFTypeRef v39;
  CFTypeRef cf;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  CFTypeRef v45;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  const void *v49;
  char v50;
  _BYTE v51[8];
  unsigned __int8 v52;
  CFTypeRef v53;
  char v54;
  CFTypeRef v55;
  CFTypeRef v56;
  __int16 v57;
  char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  const char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  HALS_System::GetInstance(&v43, 0, &v41);
  v4 = *(os_unfair_lock_s **)(v43 + 1392);
  v5 = (const void *)*((_QWORD *)this + 14);
  if (v5)
    CFRetain(*((CFTypeRef *)this + 14));
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);
  if (a2)
    CFRetain(a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v39, a2);
  if (!cf)
  {
    v13 = 0;
    goto LABEL_81;
  }
  v6 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  v7 = cf;
  if (cf)
    CFRetain(cf);
  v46 = v7;
  v8 = v39;
  if (v39)
    CFRetain(v39);
  v45 = v8;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v56, "uid");
  v9 = applesauce::CF::details::has_key<applesauce::CF::StringRef>((CFDictionaryRef)v7, v56);
  v10 = (AMCP::Log::Scope_Registry *)v56;
  if (v56)
    CFRelease(v56);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v56, "com.apple.coreaudio", "AMCP");
    v26 = *(NSObject **)v56;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      LODWORD(v56) = 67109890;
      HIDWORD(v56) = v28;
      v57 = 2080;
      v58 = "HALS_IOContext_Manager_Impl.cpp";
      v59 = 1024;
      v60 = 109;
      v61 = 2080;
      v62 = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&v56, 0x22u);
    }
    abort();
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v56, "clock");
  v53 = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v55, (const __CFDictionary *)v7, v56, &v53);
  if (v53)
    CFRelease(v53);
  if (v56)
    CFRelease(v56);
  v11 = v55;
  if (v55
    && applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v55, (const __CFString **)&v45) == kCFCompareEqualTo)
  {
    v13 = 1;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v53, "subdevices");
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v56, (CFDictionaryRef)v7, v53);
    if (v53)
      CFRelease(v53);
    if (!(_BYTE)v57)
      goto LABEL_31;
    if (!v56)
    {
      v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (CFArrayGetCount((CFArrayRef)v56))
    {
      if (!v56)
      {
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "Could not construct");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v53, (CFArrayRef)v56, 0);
      if (!v56)
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Could not construct");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(v51, (CFArrayRef)v56);
      v12 = v52;
      if (v52)
      {
        if (!v56)
        {
          v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      else if (!v56)
      {
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Could not construct");
        __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Count = CFArrayGetCount((CFArrayRef)v56);
      if (Count)
      {
        v15 = 0;
        v16 = v11;
        v13 = 1;
        while (1)
        {
          if (!v56)
          {
            v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v29, "Could not construct");
            __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v49, (CFArrayRef)v56, v15);
          if (v54 == v50)
          {
            if (v54)
            {
              v17 = v53;
              v53 = v49;
              v49 = v17;
            }
          }
          else if (v54)
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&v53);
          }
          else
          {
            v53 = v49;
            v49 = 0;
            v54 = 1;
          }
          std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v49);
          if (v12)
          {
            if (!v56)
            {
              v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v30, "Could not construct");
              __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v49, (CFArrayRef)v56, v15);
            if (v54 == v50)
            {
              if (v54)
              {
                v18 = v53;
                v53 = v49;
                v49 = v18;
              }
            }
            else if (v54)
            {
              std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&v53);
            }
            else
            {
              v53 = v49;
              v49 = 0;
              v54 = 1;
            }
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v49);
            if (!v53)
            {
              v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v31, "Could not construct");
              __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v48, "uid");
            v47 = 0;
            applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v49, (const __CFDictionary *)v53, v48, &v47);
            v55 = v49;
            v49 = v16;
            if (v16)
              CFRelease(v16);
            if (v47)
              CFRelease(v47);
            v19 = v48;
            if (!v48)
              goto LABEL_66;
          }
          else
          {
            if (!v54)
              goto LABEL_66;
            if (!v53)
            {
              v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v33, "Could not construct");
              __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v48, "uid");
            v47 = 0;
            applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v49, (const __CFDictionary *)v53, v48, &v47);
            v55 = v49;
            v49 = v16;
            if (v16)
              CFRelease(v16);
            if (v47)
              CFRelease(v47);
            v19 = v48;
            if (!v48)
              goto LABEL_66;
          }
          CFRelease(v19);
LABEL_66:
          v11 = v55;
          if (v55)
          {
            v16 = v55;
            if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v55, (const __CFString **)&v45) == kCFCompareEqualTo)goto LABEL_73;
          }
          else
          {
            v16 = 0;
          }
          v13 = ++v15 < Count;
          if (Count == v15)
            goto LABEL_73;
        }
      }
      v13 = 0;
LABEL_73:
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v51);
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v53);
    }
    else
    {
LABEL_31:
      v13 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v56);
    if (!v11)
      goto LABEL_76;
  }
  CFRelease(v11);
LABEL_76:
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  os_unfair_lock_unlock(v6);
LABEL_81:
  if (v39)
    CFRelease(v39);
  if (cf)
    CFRelease(cf);
  v20 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v42;
  if (!v42)
    goto LABEL_94;
  v24 = (unint64_t *)&v42->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_94:
    if (!v13)
      return;
    goto LABEL_95;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v13)
LABEL_95:
    HALS_IOContext_MCP_Impl::UpdateContext(this);
}

void sub_1B5902FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, const void *a11, char a12, uint64_t a13, char a14, uint64_t a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,const void *a26,char a27)
{
  os_unfair_lock_s *v27;

  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a22);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a24);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a27);
  applesauce::CF::StringRef::~StringRef(&a26);
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
  os_unfair_lock_unlock(v27);
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  uint8x8_t v18;

  v5 = a2;
  v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (a5)
  {
    if (a2)
    {
      if (64 - a2 >= v6)
        v7 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      else
        v7 = 64 - a2;
      v8 = (uint64_t)*a1++;
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v7)) & (-1 << a2) & v8));
      v9.i16[0] = vaddlv_u8(v9);
      v5 = v9.u32[0];
      v6 -= v7;
    }
    if (v6 >= 0x40)
    {
      do
      {
        v10 = *a1++;
        v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        v5 += v11.u32[0];
        v6 -= 64;
      }
      while (v6 > 0x3F);
    }
    if (v6)
    {
      v12 = *(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
LABEL_20:
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v18.i16[0] = vaddlv_u8(v18);
      v5 += v18.u32[0];
    }
  }
  else
  {
    if (a2)
    {
      if (64 - a2 >= v6)
        v13 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      else
        v13 = 64 - a2;
      v14 = (uint64_t)*a1++;
      v15 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~v14));
      v15.i16[0] = vaddlv_u8(v15);
      v5 = v15.u32[0];
      v6 -= v13;
    }
    if (v6 >= 0x40)
    {
      do
      {
        v16 = (uint64_t)*a1++;
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)~v16);
        v17.i16[0] = vaddlv_u8(v17);
        v5 += v17.u32[0];
        v6 -= 64;
      }
      while (v6 > 0x3F);
    }
    if (v6)
    {
      v12 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v6) & ~*(_QWORD *)a1;
      goto LABEL_20;
    }
  }
  return v5;
}

void ___ZN23HALS_IOContext_MCP_Impl10DeactivateEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v8 = 0;
  v9 = 0;
  HALS_System::GetInstance(&v10, 0, &v8);
  HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(*(HALS_IOContext_Manager **)(v10 + 1392), *(_DWORD *)(a1 + 32));
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5903324(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5903314);
}

HALB_IOBufferManager_Server *std::unique_ptr<HALB_IOBufferManager_Server>::reset[abi:ne180100](HALB_IOBufferManager_Server **a1, HALB_IOBufferManager_Server *a2)
{
  HALB_IOBufferManager_Server *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_IORawClock::~HALS_IORawClock(void **this)
{
  HALS_IORawClock::~HALS_IORawClock(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_IORawClock *v2;
  uint64_t v3;

  *this = &off_1E6973798;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = (HALS_IORawClock *)this[4];
  if (v2 == (HALS_IORawClock *)(this + 1))
  {
    v3 = 4;
    v2 = (HALS_IORawClock *)(this + 1);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void HALS_IOClock::~HALS_IOClock(HALS_IOClock *this)
{
  HALS_IOClock::~HALS_IOClock(this);
  JUMPOUT(0x1B5E50688);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E69737B8;
  v2 = (char *)this + 608;
  v3 = (char *)*((_QWORD *)this + 79);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 67);
  if (v5)
  {
    *((_QWORD *)this + 68) = v5;
    operator delete(v5);
  }
  HALS_IORawClock::~HALS_IORawClock((void **)this + 2);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,double,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,double,double>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Sample time is not consecutive. Ring buffer size: %f, sample diff: %f", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,double,double>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,double,double>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2080;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Sample time is%s consecutive, host time is%s consecutive.", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Initial host time is out of bounds. ZTS Host Time: %llu, OoB Time: %llu", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Zero timestamp seed changed", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

_QWORD *std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5903DCC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6973958;
  return result;
}

void std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6973958;
}

uint64_t std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12HALS_IOClockC1EjjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::target_type()
{
}

uint64_t HALS_IOClock::HALS_IOClock(uint64_t a1, int a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E69737B8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = &off_1E6973798;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 60) = a3;
  v5 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x6969726600000001;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 8;
  v7 = 200;
  *(_DWORD *)(a1 + 192) = 0;
  do
  {
    v8 = (_QWORD *)(a1 + v7);
    *v8 = 0;
    v8[1] = 0;
    v8[3] = 0;
    v8[4] = 0;
    v8[2] = 0x3FF0000000000000;
    v7 += 40;
  }
  while (v8 + 5 != (_QWORD *)(a1 + 520));
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_DWORD *)(a1 + 572) = 12;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v12[0] = &off_1E6973958;
  v13 = v12;
  std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v12, (_QWORD *)(a1 + 608));
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_10;
  }
  if (v13)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_1B5904034(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 48);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 48);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOClock::Reset(HALS_IOClock *this, double a2, int a3, int a4, char a5, int a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  _QWORD *result;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v11 = 0;
  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  if (!a6)
    goto LABEL_10;
  v25[0] = &off_1E69739E8;
  v25[1] = (char *)this + 608;
  v26 = v25;
  std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v25, v23);
  v12 = v26;
  if (v26 == v25)
  {
    v13 = 4;
    v12 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_7;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_7:
  v11 = v24;
  if (!v24)
  {
LABEL_10:
    v22 = v11;
    goto LABEL_11;
  }
  if (v24 != v23)
  {
    v11 = (_QWORD *)(*(uint64_t (**)(void))(*v24 + 16))();
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v21);
  v11 = v22;
LABEL_11:
  *((_DWORD *)this + 22) = a3;
  *((_BYTE *)this + 92) = a5;
  if (!v11)
  {
LABEL_14:
    v26 = v11;
    goto LABEL_16;
  }
  if (v11 != v21)
  {
    v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 16))(v11);
    goto LABEL_14;
  }
  v26 = v25;
  (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, v25);
LABEL_16:
  std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v25, (_QWORD *)this + 3);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((double *)this + 14) = 24000000.0 / a2;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 168) = 0;
  v16 = v22;
  if (v22 == v21)
  {
    v17 = 4;
    v16 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  *((_DWORD *)this + 44) = a3;
  *((_DWORD *)this + 45) = a4;
  *((_BYTE *)this + 184) = a5;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 65) = 0;
  bzero((char *)this + 200, 40 * *((unsigned int *)this + 47));
  HALS_IOClock::ResetFilter(this, *((double *)this + 14), v18);
  *((_DWORD *)this + 146) = 0;
  *((_OWORD *)this + 37) = 0u;
  result = v24;
  if (v24 == v23)
  {
    v20 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_1B59042D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69739E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69739E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 24000;
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12HALS_IOClock5ResetEdjjjbbE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::target_type()
{
}

uint64_t AMCP::IOAudio2::Device::Device(uint64_t a1, uint64_t a2, io_service_t *a3, CFDictionaryRef *a4)
{
  const __CFString **v5;
  const __CFString *v9;
  dispatch_queue_t *v10;
  void **v11;
  NSObject *v12;
  AMCP::Utility::Mach_Port *v13;
  AMCP::Utility::Mach_Port *v14;
  CFDictionaryRef *v15;
  void **v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  io_service_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  io_connect_t *v31;
  io_connect_t *v32;
  AMCP::Utility::Kernel_Error_Category *v33;
  unsigned int v34;
  AMCP::Log::Scope_Registry *v35;
  AMCP::Log::Scope_Registry *v36;
  AMCP::Log::Scope_Registry *v37;
  int what;
  std::__shared_weak_count *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  mach_port_t v45;
  void *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  std::__shared_weak_count *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  _opaque_pthread_t *v54;
  mach_port_t v55;
  const __CFString **v56;
  void *v57;
  int v58;
  std::__shared_weak_count *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;
  mach_port_t v65;
  void *v66;
  int v67;
  std::__shared_weak_count *imp;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  std::runtime_error *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  int v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  int v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  std::runtime_error *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  std::runtime_error *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::runtime_error_vtbl *v150;
  AMCP::IOAudio2::Stream **v151;
  AMCP::IOAudio2::Stream **v152;
  AMCP::IOAudio2::Stream **v153;
  AMCP::IOAudio2::Stream **v154;
  AMCP::IOAudio2::Control **v155;
  AMCP::IOAudio2::Control **v156;
  NSObject *v158;
  _opaque_pthread_t *v159;
  mach_port_t v160;
  void *v161;
  std::runtime_error *exception;
  std::runtime_error *v163;
  std::runtime_error *v164;
  std::runtime_error *v165;
  std::runtime_error *v166;
  std::runtime_error *v167;
  std::runtime_error *v168;
  void *v169;
  const std::error_category *v170;
  std::runtime_error *v171;
  std::runtime_error *v172;
  std::runtime_error *v173;
  uint64_t *v174;
  __int128 v175;
  uint64_t v176;
  CFTypeRef cf;
  __int128 v178;
  uint64_t v179;
  std::runtime_error v180;
  __int128 v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  CFTypeRef v187;
  CFTypeRef v188;
  CFTypeRef v189;
  CFTypeRef v190;
  uint8_t buf[48];
  const char *v192;
  const char *v193;
  int v194;
  _QWORD v195[3];
  _QWORD *v196;
  dispatch_object_t object[40];
  dispatch_queue_t queue[2];
  char v199;
  void *__p[2];
  uint64_t v201;
  std::runtime_error v202;
  __int128 v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  v5 = (const __CFString **)(a1 + 8);
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)(a1 + 8), *a4, CFSTR("device UID"));
  *(_DWORD *)(a1 + 16) = 0;
  v9 = *(const __CFString **)(a1 + 8);
  if (!v9)
  {
    v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v163, "Could not construct");
    __cxa_throw(v163, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)queue, v9);
  if (v199 >= 0)
    v10 = queue;
  else
    v10 = (dispatch_queue_t *)queue[0];
  caulk::make_string((caulk *)"%s Work Queue", (uint64_t)__p, v10);
  if (v201 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = dispatch_queue_create((const char *)v11, 0);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 24), v12);
  if (v12)
    dispatch_release(v12);
  if (SHIBYTE(v201) < 0)
    operator delete(__p[0]);
  if (v199 < 0)
    operator delete(queue[0]);
  v13 = (AMCP::Utility::Mach_Port *)*a3;
  *(_DWORD *)(a1 + 344) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v13 = (AMCP::Utility::Mach_Port *)IOObjectRetain((io_object_t)v13);
    v14 = v13;
    if ((_DWORD)v13)
    {
      v169 = __cxa_allocate_exception(0x20uLL);
      v170 = std::system_category();
      MEMORY[0x1B5E5022C](v169, v14, v170, "Error on Retain");
      __cxa_throw(v169, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v174 = (uint64_t *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = AMCP::Utility::Mach_Port::create_port(v13);
  *(_WORD *)(a1 + 372) = 257;
  *(_QWORD *)(a1 + 376) = 850045863;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  v15 = (CFDictionaryRef *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = *a4;
  *a4 = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  v16 = (void **)(a1 + 504);
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  v17 = *(const __CFDictionary **)(a1 + 448);
  if (!v17)
  {
    v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v164, "Could not construct");
    __cxa_throw(v164, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v189, v17, CFSTR("input streams"), __p);
  if (__p[0])
    CFRelease(__p[0]);
  AMCP::IOAudio2::Stream::create_from_dictionary_list((char **)__p, a1, 1, (CFArrayRef *)&v189);
  std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((void **)(a1 + 480));
  *(_OWORD *)(a1 + 480) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 496) = v201;
  v201 = 0;
  __p[1] = 0;
  __p[0] = 0;
  queue[0] = (dispatch_queue_t)__p;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
  v18 = *(const __CFDictionary **)(a1 + 448);
  if (!v18)
  {
    v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v165, "Could not construct");
    __cxa_throw(v165, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v188, v18, CFSTR("output streams"), __p);
  if (__p[0])
    CFRelease(__p[0]);
  AMCP::IOAudio2::Stream::create_from_dictionary_list((char **)__p, a1, 0, (CFArrayRef *)&v188);
  std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((void **)(a1 + 456));
  *(_OWORD *)(a1 + 456) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 472) = v201;
  v201 = 0;
  __p[1] = 0;
  __p[0] = 0;
  queue[0] = (dispatch_queue_t)__p;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
  v19 = *(const __CFDictionary **)(a1 + 448);
  if (!v19)
  {
    v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v166, "Could not construct");
    __cxa_throw(v166, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v187, v19, CFSTR("controls"), __p);
  if (__p[0])
    CFRelease(__p[0]);
  AMCP::IOAudio2::Control::create_from_dictionary_list((int64x2_t *)__p, (AMCP::IOAudio2::Device *)a1, (CFArrayRef *)&v187);
  v20 = *v16;
  if (*v16)
  {
    v21 = *(_QWORD *)(a1 + 512);
    v22 = *v16;
    if ((void *)v21 != v20)
    {
      do
        v21 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 16);
      while ((void *)v21 != v20);
      v22 = *v16;
    }
    *(_QWORD *)(a1 + 512) = v20;
    operator delete(v22);
    *v16 = 0;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 520) = 0;
  }
  *(_OWORD *)v16 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 520) = v201;
  v201 = 0;
  __p[1] = 0;
  __p[0] = 0;
  queue[0] = (dispatch_queue_t)__p;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32) + 352));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32) + 672));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object, (dispatch_object_t)__p[0]);
  dispatch_set_target_queue(object[0], queue[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
  v23 = *a3;
  v24 = operator new();
  v25 = __p[0];
  v180.__vftable = (std::runtime_error_vtbl *)__p[0];
  if (__p[0])
    dispatch_retain((dispatch_object_t)__p[0]);
  *(_QWORD *)buf = &off_1E6973A68;
  *(_QWORD *)&buf[8] = a2;
  *(_QWORD *)&buf[16] = a1;
  *(_QWORD *)&buf[24] = buf;
  applesauce::iokit::io_service_notifications::io_service_notifications(v24, v23, (NSObject **)&v180, "IOGeneralInterest", (uint64_t)buf);
  v26 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v27 = 4;
    v26 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_38;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_38:
  if (v25)
    dispatch_release(v25);
  v28 = *v174;
  *v174 = v24;
  if (v28)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v28);
  v195[0] = &off_1E6973AE8;
  v195[1] = a1;
  v196 = v195;
  AMCP::Utility::Mach_Port::set_receive_handler((unsigned int *)(a1 + 368), (dispatch_queue_t *)__p, (uint64_t)v195);
  v29 = v196;
  if (v196 == v195)
  {
    v30 = 4;
    v29 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_47;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_47:
  v31 = (io_connect_t *)operator new();
  applesauce::iokit::io_connect_holder::io_connect_holder(v31, *(_DWORD *)(a1 + 344));
  v32 = *(io_connect_t **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v31;
  if (v32)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v32);
  v33 = (AMCP::Utility::Kernel_Error_Category *)MEMORY[0x1B5E4FAB8](*v31, 0, *(unsigned int *)(a1 + 368), 0);
  v34 = v33;
  AMCP::Utility::Kernel_Error_Category::get(v33);
  if (v34)
  {
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v158 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
    {
      v159 = pthread_self();
      v160 = pthread_mach_thread_np(v159);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v160;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOAudio2_Device.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 95;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v158, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the notification port", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v190);
    v161 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v202, v34, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v180, &v202);
    v181 = v203;
    v184 = 0;
    v185 = 0;
    v186 = -1;
    v180.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v182 = &unk_1E69A1320;
    v183 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    v192 = "AMCP::IOAudio2::Device::Device(Driver &, const IOKit::Service &, CF::Dictionary)";
    v193 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Device.cpp";
    v194 = 95;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v175);
    cf = off_1E69A20A0;
    v178 = v175;
    v179 = v176;
    v175 = 0uLL;
    v176 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&cf);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v161, (uint64_t)buf);
  }
  v36 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)a1 + 32)
                                                                                                 + 16));
  *(_DWORD *)(a1 + 16) = (_DWORD)v36;
  AMCP::Log::Scope_Registry::get(v36);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v202, "com.apple.coreaudio", "AMCP");
  what = (int)v202.what;
  switch(what)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v37);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v59 = *(std::__shared_weak_count **)&buf[8];
      v60 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        v63 = pthread_self();
        v64 = pthread_mach_thread_np(v63);
        if (!*v5)
        {
          v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v173, "Could not construct");
          __cxa_throw(v173, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v65 = v64;
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v180, *v5);
        if ((SBYTE7(v181) & 0x80u) == 0)
          v66 = &v180;
        else
          v66 = v180.__vftable;
        v67 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v65;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "IOAudio2_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 281;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v66;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v67;
        v48 = v60;
        v49 = OS_LOG_TYPE_INFO;
        goto LABEL_85;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v37);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v50 = *(std::__shared_weak_count **)&buf[8];
      v51 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        v54 = pthread_self();
        v55 = pthread_mach_thread_np(v54);
        v56 = (const __CFString **)applesauce::CF::StringRef::operator->(v5);
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v180, *v56);
        if ((SBYTE7(v181) & 0x80u) == 0)
          v57 = &v180;
        else
          v57 = v180.__vftable;
        v58 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v55;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "IOAudio2_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 281;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v57;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v58;
        _os_log_debug_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
LABEL_86:
        if (SBYTE7(v181) < 0)
          operator delete(v180.__vftable);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v37);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v39 = *(std::__shared_weak_count **)&buf[8];
      v40 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v43 = pthread_self();
        v44 = pthread_mach_thread_np(v43);
        if (!*v5)
        {
          v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v172, "Could not construct");
          __cxa_throw(v172, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v45 = v44;
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v180, *v5);
        if ((SBYTE7(v181) & 0x80u) == 0)
          v46 = &v180;
        else
          v46 = v180.__vftable;
        v47 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v45;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "IOAudio2_Device.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 281;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v46;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v47;
        v48 = v40;
        v49 = OS_LOG_TYPE_DEFAULT;
LABEL_85:
        _os_log_impl(&dword_1B57BA000, v48, v49, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        goto LABEL_86;
      }
      break;
  }
  imp = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v69 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v180 = (std::runtime_error)0;
  v181 = 0u;
  LODWORD(v182) = 1065353216;
  AMCP::IOAudio2::Device::get_uid(&v190, *(const void **)(a1 + 8));
  LODWORD(v202.__vftable) = *(_DWORD *)(a1 + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v202, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v71 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  LODWORD(v202.__vftable) = 1633969526;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v202, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v74 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  LODWORD(v202.__vftable) = 1633969526;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v202, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v77 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  LODWORD(v202.__vftable) = *(_DWORD *)(*(_QWORD *)a1 + 48);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v202, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v80 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v81 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.iokit.IOAudio2");
  v202.__vftable = (std::runtime_error_vtbl *)0x676C6F626F706C67;
  LODWORD(v202.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v202, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v83 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (cf)
    CFRelease(cf);
  v86 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v86;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v202, 0, (__int128 *)buf, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v87 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v88 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v202.__vftable = (std::runtime_error_vtbl *)0x676C6F6275696420;
  LODWORD(v202.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v202, v190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v90 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v91 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (!*v15)
  {
    v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v167, "Could not construct");
    __cxa_throw(v167, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&cf, *v15, CFSTR("transport type"));
  if ((_BYTE)v178)
  {
    if (!cf)
    {
      v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v171, "Could not construct");
      __cxa_throw(v171, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v93 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  }
  else
  {
    v93 = 0;
  }
  LODWORD(v202.__vftable) = v93;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v202, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v94 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v95 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  LOBYTE(v202.__vftable) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v202, 1.58366008e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v97 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v98 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(unsigned int *)(a1 + 16);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v175, 0, 1.5836601e190);
  v101 = v175;
  v102 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  v202.__vftable = (std::runtime_error_vtbl *)&off_1E6973CE8;
  v202.__imp_.__imp_ = (const char *)a1;
  *(_QWORD *)&v203 = v100;
  *((_QWORD *)&v203 + 1) = &v202;
  memset(buf, 0, 40);
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v202);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v101, v102, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v103 = (std::runtime_error *)*((_QWORD *)&v203 + 1);
  if (*((std::runtime_error **)&v203 + 1) == &v202)
  {
    v104 = 4;
    v103 = &v202;
    goto LABEL_151;
  }
  if (*((_QWORD *)&v203 + 1))
  {
    v104 = 5;
LABEL_151:
    (*((void (**)(void))&v103->~runtime_error + v104))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(v175);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(v175 + 40), &v175);
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  AMCP::IOAudio2::Device::update_core_common(a1, (uint64_t)&v180);
  v108 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v108;
  *(_DWORD *)&buf[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v202, 0, (__int128 *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v109 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v110 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v112;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v202, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v113 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v114 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v116;
  *(_OWORD *)&buf[12] = xmmword_1B5D68B60;
  *(_OWORD *)&buf[28] = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v202, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v117 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v118 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v120;
  *(_DWORD *)&buf[12] = 1633907820;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v202, 0, (__int128 *)buf, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v121 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v122 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v124;
  *(_OWORD *)&buf[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&buf[28] = xmmword_1B5D68BF0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v202, 0, (uint64_t *)buf, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v125 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v126 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v128;
  *(_OWORD *)&buf[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&buf[28] = xmmword_1B5D68C00;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v202, 0, (uint64_t *)buf, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v129 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v130 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16);
  *(_DWORD *)&buf[8] = v132;
  *(_OWORD *)&buf[12] = xmmword_1B5D68BE0;
  *(_OWORD *)&buf[28] = xmmword_1B5D68C10;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v202, 0, (uint64_t *)buf, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)&v202.__vftable[1].what, &v202);
  v133 = (std::__shared_weak_count *)v202.__imp_.__imp_;
  if (v202.__imp_.__imp_)
  {
    v134 = (unint64_t *)(v202.__imp_.__imp_ + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (!*v15)
  {
    v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v168, "Could not construct");
    __cxa_throw(v168, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (applesauce::CF::details::has_key<__CFString const*>(*v15, CFSTR("supports client description")))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v175, 0, 1.58366007e190);
    v136 = v175;
    v137 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    v202.__vftable = (std::runtime_error_vtbl *)&off_1E6973DE8;
    *((_QWORD *)&v203 + 1) = &v202;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v202);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v136, v137, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v138 = (std::runtime_error *)*((_QWORD *)&v203 + 1);
    if (*((std::runtime_error **)&v203 + 1) == &v202)
    {
      v139 = 4;
      v138 = &v202;
    }
    else
    {
      if (!*((_QWORD *)&v203 + 1))
        goto LABEL_201;
      v139 = 5;
    }
    (*((void (**)(void))&v138->~runtime_error + v139))();
LABEL_201:
    AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(v175);
    v140 = v175;
    v141 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
    v202.__vftable = (std::runtime_error_vtbl *)&off_1E6973E68;
    v202.__imp_.__imp_ = (const char *)a1;
    *((_QWORD *)&v203 + 1) = &v202;
    memset(buf, 0, 40);
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v202);
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v140, v141, (AMCP *)buf);
    if (*(_QWORD *)&buf[32])
      (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
    v142 = (std::runtime_error *)*((_QWORD *)&v203 + 1);
    if (*((std::runtime_error **)&v203 + 1) == &v202)
    {
      v143 = 4;
      v142 = &v202;
    }
    else
    {
      if (!*((_QWORD *)&v203 + 1))
      {
LABEL_208:
        AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(v175);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)&v180, (unsigned int *)(v175 + 40), &v175);
        v144 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
        if (*((_QWORD *)&v175 + 1))
        {
          v145 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        goto LABEL_213;
      }
      v143 = 5;
    }
    (*((void (**)(void))&v142->~runtime_error + v143))();
    goto LABEL_208;
  }
LABEL_213:
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)buf, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16), (uint64_t)&v180, *(unsigned int *)(a1 + 16));
  v147 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v148 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  if (v190)
    CFRelease(v190);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v181);
  v150 = v180.__vftable;
  v180.__vftable = 0;
  if (v150)
    operator delete(v150);
  v151 = *(AMCP::IOAudio2::Stream ***)(a1 + 456);
  v152 = *(AMCP::IOAudio2::Stream ***)(a1 + 464);
  while (v151 != v152)
  {
    AMCP::IOAudio2::Stream::build_core(*v151);
    v151 += 2;
  }
  v153 = *(AMCP::IOAudio2::Stream ***)(a1 + 480);
  v154 = *(AMCP::IOAudio2::Stream ***)(a1 + 488);
  while (v153 != v154)
  {
    AMCP::IOAudio2::Stream::build_core(*v153);
    v153 += 2;
  }
  v155 = *(AMCP::IOAudio2::Control ***)(a1 + 504);
  v156 = *(AMCP::IOAudio2::Control ***)(a1 + 512);
  while (v155 != v156)
  {
    AMCP::IOAudio2::Control::build_core(*v155);
    v155 += 2;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p);
  if (v187)
    CFRelease(v187);
  if (v188)
    CFRelease(v188);
  if (v189)
    CFRelease(v189);
  return a1;
}

void sub_1B5905CC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  uint64_t v39;

  __cxa_free_exception(v38);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39 - 136);
  JUMPOUT(0x1B5906250);
}

void sub_1B5905D44()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B590615CLL);
}

void sub_1B5905D58()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5906268);
}

void sub_1B5905D6C()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5906270);
}

void sub_1B5905D7C()
{
  JUMPOUT(0x1B5906278);
}

void sub_1B5905D84()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5906278);
}

void sub_1B5905D94()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B59062E8);
}

void sub_1B5905DA4()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B59062F0);
}

void sub_1B5905DD8()
{
  JUMPOUT(0x1B59062E0);
}

void sub_1B5905DE4()
{
  JUMPOUT(0x1B5905E50);
}

void sub_1B5905E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,const void *a38)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a21);
  applesauce::CF::StringRef::~StringRef(&a38);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a25);
  JUMPOUT(0x1B5906250);
}

void sub_1B5905E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  JUMPOUT(0x1B590615CLL);
}

void sub_1B5905EBC()
{
  JUMPOUT(0x1B590615CLL);
}

void sub_1B5905EC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,NSObject **buf,__int16 a40,__int16 a41,int a42,__int16 a43,__int16 a44,int a45,__int16 a46,__int16 a47)
{
  uint64_t v47;
  uint64_t v48;
  AMCP::Log::Scope_Registry *v51;
  AMCP::Log::Scope_Registry *v52;
  NSObject *v53;
  _opaque_pthread_t *v54;
  mach_port_t v55;
  uint64_t v56;
  NSObject *v57;
  _opaque_pthread_t *v58;
  mach_port_t v59;

  if (a2)
  {
    MEMORY[0x1B5E50688](v47, 0x1000C4052888210);
    v51 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v52 = v51;
      AMCP::Log::Scope_Registry::get(v51);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v53 = *buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        v54 = pthread_self();
        v55 = pthread_mach_thread_np(v54);
        v56 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v52 + 16))(v52);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v55;
        a40 = 2080;
        *(_QWORD *)(v48 + 10) = "IOAudio2_Device.cpp";
        a44 = 1024;
        a45 = 86;
        a46 = 2080;
        *(_QWORD *)(v48 + 26) = v56;
        _os_log_error_impl(&dword_1B57BA000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v51);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v57 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = pthread_self();
      v59 = pthread_mach_thread_np(v58);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v59;
      a40 = 2080;
      *(_QWORD *)(v48 + 10) = "IOAudio2_Device.cpp";
      a44 = 1024;
      a45 = 91;
      _os_log_error_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1B59062F0);
}

void sub_1B5906074()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5906250);
}

void sub_1B5906098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  char *v52;
  char *v53;
  uint64_t v54;

  v53 = a52;
  if (a52 == v52)
  {
    v54 = 4;
    v53 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  JUMPOUT(0x1B5906250);
}

void sub_1B59060CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char *a42)
{
  NSObject *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v45 = a42;
  if (a42 == v43)
  {
    v46 = 4;
    v45 = &a39;
  }
  else
  {
    if (!a42)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_6:
  if (v42)
    dispatch_release(v42);
  MEMORY[0x1B5E50688](v44, 0x1020C40DCC910D7);
  JUMPOUT(0x1B5906250);
}

void sub_1B5906128()
{
  JUMPOUT(0x1B5906260);
}

void sub_1B5906130()
{
  JUMPOUT(0x1B5906268);
}

void sub_1B5906138()
{
  JUMPOUT(0x1B5906270);
}

void sub_1B5906140()
{
  JUMPOUT(0x1B59062B0);
}

void sub_1B5906148()
{
  JUMPOUT(0x1B59062E8);
}

void sub_1B590617C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,std::runtime_error a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,std::runtime_error a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  int v42;
  void *v43;
  uint64_t v44;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  a41 = &unk_1E69A2000;
  if (a42 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a42 + 32))(a42))
    a42 = 0;
  std::runtime_error::~runtime_error(&a38);
  a28 = &unk_1E69A2000;
  if (a29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a29 + 32))(a29))
    a29 = 0;
  std::runtime_error::~runtime_error(&a25);
  std::runtime_error::~runtime_error((std::runtime_error *)(v44 - 136));
  if (v42)
    __cxa_free_exception(v43);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a37);
  JUMPOUT(0x1B5906250);
}

void sub_1B5906224(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B59062F0);
}

void sub_1B590624C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AMCP::Utility::Dispatch_Queue *a11, io_object_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35,const void *a36,const void *a37)
{
  const void **v37;
  uint64_t v38;
  AMCP::Utility::Mach_Port *v39;
  unint64_t v40;
  const void **v41;
  unint64_t v42;
  io_connect_t *v44;
  uint64_t v45;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x2A0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x3E0]);
  applesauce::CF::ArrayRef::~ArrayRef(&a35);
  applesauce::CF::ArrayRef::~ArrayRef(&a36);
  applesauce::CF::ArrayRef::~ArrayRef(&a37);
  STACK[0x3E0] = v42;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  STACK[0x3E0] = a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  STACK[0x3E0] = v40;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  applesauce::CF::DictionaryRef::~DictionaryRef(v41);
  AMCP::Utility::Mach_Port::~Mach_Port(v39);
  v44 = *(io_connect_t **)(v38 + 360);
  *(_QWORD *)(v38 + 360) = 0;
  if (v44)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v44);
  v45 = *a13;
  *a13 = 0;
  if (v45)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v45);
  applesauce::iokit::io_object_holder::~io_object_holder(a12);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a11);
  applesauce::CF::StringRef::~StringRef(v37);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t applesauce::iokit::io_service_notifications::io_service_notifications(uint64_t a1, io_service_t a2, NSObject **a3, const char *a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  io_object_t *v12;
  uint64_t v13;
  io_object_t v14;
  void *exception;
  const std::error_category *v17;
  io_object_t notification;

  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)a1);
  v10 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v10)
    dispatch_retain(v10);
  v11 = *(_QWORD *)(a5 + 24);
  if (!v11)
    goto LABEL_6;
  if (v11 != a5)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_6:
    *(_QWORD *)(a1 + 40) = v11;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 48) = 0;
  v12 = (io_object_t *)(a1 + 48);
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)a1, *(dispatch_queue_t *)(a1 + 8));
  notification = 0;
  v13 = IOServiceAddInterestNotification(*(IONotificationPortRef *)a1, a2, a4, (IOServiceInterestCallback)applesauce::iokit::io_service_notifications::notification_callback_, (void *)a1, &notification);
  if ((_DWORD)v13)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v17 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v13, v17, "Error on IOServiceAddInterestNotification");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v14 = *v12;
  *v12 = notification;
  if (v14)
    IOObjectRelease(v14);
  return a1;
}

void sub_1B5906484(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  io_object_t *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;

  __cxa_free_exception(v4);
  applesauce::iokit::io_object_holder::~io_object_holder(v3);
  v6 = *(_QWORD **)(v1 + 40);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 40);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  v8 = *(NSObject **)(v1 + 8);
  if (v8)
    dispatch_release(v8);
  applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder((IONotificationPortRef *)v1);
  _Unwind_Resume(a1);
}

void std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](uint64_t a1)
{
  io_object_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;

  v2 = *(_DWORD *)(a1 + 48);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == (_QWORD *)(a1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(NSObject **)(a1 + 8);
  if (v5)
    dispatch_release(v5);
  IONotificationPortDestroy(*(IONotificationPortRef *)a1);
  JUMPOUT(0x1B5E50688);
}

io_connect_t *applesauce::iokit::io_connect_holder::io_connect_holder(io_connect_t *connect, io_service_t service)
{
  kern_return_t v3;
  mach_error_t v5;
  char *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::string __p;
  std::string v10;

  *connect = 0;
  v3 = IOServiceOpen(service, *MEMORY[0x1E0C83DA0], 0, connect);
  if (v3)
  {
    v5 = v3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Could not create ioconnect for service ");
    v6 = mach_error_string(v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &__p, v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*connect)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Could not create ioservice for service ");
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, &v10);
    __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return connect;
}

void sub_1B5906688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](io_connect_t *a1)
{
  IOConnectRelease(*a1);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Utility::Mach_Port::~Mach_Port(AMCP::Utility::Mach_Port *this)
{
  NSObject *v2;

  AMCP::Utility::Mach_Port::reset(this);
  v2 = *((_QWORD *)this + 9);
  if (v2)
    dispatch_release(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t AMCP::IOAudio2::Device::update_core_common(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v3;
  uint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  CFDictionaryRef *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  int64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  __int128 *p_x;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  AMCP::IOAudio2::Stream **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  int v58;
  int v59;
  int mapping_options;
  int v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  CFArrayRef v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const __CFArray *v77;
  const void *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  AMCP::IOAudio2::Stream **v89;
  AMCP::IOAudio2::Stream **v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  void *v109;
  unint64_t v110;
  CFArrayRef v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  const __CFArray *v115;
  const void *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  char v124;
  unsigned int v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  const void *v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  io_connect_t v147;
  uint64_t v148;
  const void *v149;
  BOOL BOOL_from;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  char *v167;
  __int128 v168;
  uint64_t *p_valuePtr;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  NSObject *v178;
  _opaque_pthread_t *v179;
  mach_port_t v180;
  std::runtime_error *v181;
  std::runtime_error *v182;
  std::runtime_error *v183;
  std::logic_error *v184;
  std::logic_error *v185;
  std::runtime_error *v186;
  std::runtime_error *v187;
  std::runtime_error *v188;
  std::logic_error *v189;
  std::logic_error *v190;
  std::runtime_error *v191;
  std::runtime_error *v192;
  std::runtime_error *v193;
  std::logic_error *v194;
  std::logic_error *v195;
  std::runtime_error *exception;
  std::runtime_error *v197;
  std::runtime_error *v198;
  std::runtime_error *v199;
  std::runtime_error *v200;
  std::runtime_error *v201;
  std::runtime_error *v202;
  std::runtime_error *v203;
  std::runtime_error *v204;
  std::runtime_error *v205;
  std::runtime_error *v206;
  void *v207;
  const std::error_category *v208;
  std::runtime_error *v209;
  std::runtime_error *v210;
  void *v211;
  const std::error_category *v212;
  std::runtime_error *v213;
  std::runtime_error *v214;
  std::runtime_error *v215;
  std::runtime_error *v216;
  std::runtime_error *v217;
  std::runtime_error *v218;
  std::runtime_error *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  __int128 v227;
  uint64_t v228;
  const __CFDictionary **v229;
  __int128 v230;
  AMCP::IOAudio2::Stream **v231;
  char v232;
  __int128 v233;
  CFTypeRef v234;
  CFTypeRef v235;
  char v236;
  CFTypeRef v237;
  unint64_t v238;
  unint64_t v239;
  void *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  const __CFNumber *v245;
  char v246;
  const __CFNumber *v247;
  char v248;
  const __CFNumber *v249;
  char v250;
  const __CFNumber *v251;
  char v252;
  const __CFNumber *v253;
  char v254;
  CFTypeRef cf;
  char v256;
  CFTypeRef v257;
  char v258;
  _BYTE v259[48];
  __int128 v260;
  int v261;
  __int128 v262;
  uint64_t v263;
  __int128 __p;
  uint64_t v265;
  __int16 v266;
  uint64_t valuePtr;
  std::__shared_weak_count *v268;
  CFTypeRef *v269;
  __int128 __x;
  __int128 v271;
  void (*v272)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v273;

  v273 = *MEMORY[0x1E0C80C00];
  v3 = *(const __CFDictionary **)(a1 + 448);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = a1;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v257, v3, CFSTR("device name"));
  if (!v258)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v259, "com.apple.coreaudio", "AMCP");
    v178 = **(NSObject ***)v259;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v259);
    if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
    {
      v179 = pthread_self();
      v180 = pthread_mach_thread_np(v179);
      *(_DWORD *)v259 = 67109890;
      *(_DWORD *)&v259[4] = v180;
      *(_WORD *)&v259[8] = 2080;
      *(_QWORD *)&v259[10] = "IOAudio2_Device.cpp";
      *(_WORD *)&v259[18] = 1024;
      *(_DWORD *)&v259[20] = 124;
      *(_WORD *)&v259[24] = 2080;
      *(_QWORD *)&v259[26] = "device_name_opt.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Devices have to have a name", v259, 0x22u);
    }
    abort();
  }
  strcpy((char *)&__x, "manlbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v259, (uint64_t)&__x, v257);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v6 = (CFDictionaryRef *)(v4 + 448);
  v7 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!*v6)
  {
    v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v197, "Could not construct");
    __cxa_throw(v197, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, *v6, CFSTR("device manufacturer"));
  if (v256)
  {
    v10 = cf;
    if (cf)
      CFRetain(cf);
    valuePtr = (uint64_t)v10;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "com.apple.audio.AudioMIDISetup");
    v10 = (CFTypeRef)valuePtr;
  }
  strcpy((char *)&__x, "kamlbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v259, (uint64_t)&__x, v10);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v11 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (valuePtr)
    CFRelease((CFTypeRef)valuePtr);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "com.apple.audio.AudioMIDISetup");
  strcpy((char *)&__x, "ppacbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v259, (uint64_t)&__x, (CFTypeRef)valuePtr);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v14 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (valuePtr)
    CFRelease((CFTypeRef)valuePtr);
  if (!*v6)
  {
    v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v198, "Could not construct");
    __cxa_throw(v198, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v253, *v6, CFSTR("clock domain"));
  if (v254)
  {
    if (!v253)
    {
      v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v213, "Could not construct");
      __cxa_throw(v213, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v17 = applesauce::CF::convert_to<unsigned int,0>(v253);
  }
  else
  {
    v17 = 0;
  }
  LODWORD(__x) = v17;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (int *)&__x, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v18 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*v6)
  {
    v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v199, "Could not construct");
    __cxa_throw(v199, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v251, *v6, CFSTR("input latency"));
  if (v252)
  {
    if (!v251)
    {
      v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v214, "Could not construct");
      __cxa_throw(v214, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v21 = applesauce::CF::convert_to<unsigned int,0>(v251);
  }
  else
  {
    v21 = 0;
  }
  LODWORD(__x) = v21;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (int *)&__x, 7.28117498e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v22 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (!*v6)
  {
    v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v200, "Could not construct");
    __cxa_throw(v200, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v249, *v6, CFSTR("output latency"));
  if (v250)
  {
    if (!v249)
    {
      v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v215, "Could not construct");
      __cxa_throw(v215, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = applesauce::CF::convert_to<unsigned int,0>(v249);
  }
  else
  {
    v25 = 0;
  }
  LODWORD(__x) = v25;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (int *)&__x, 8.13208691e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v26 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (!*v6)
  {
    v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v201, "Could not construct");
    __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v247, *v6, CFSTR("input safety offset"));
  if (v248)
  {
    if (!v247)
    {
      v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v216, "Could not construct");
      __cxa_throw(v216, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v29 = applesauce::CF::convert_to<unsigned int,0>(v247);
  }
  else
  {
    v29 = 0;
  }
  LODWORD(__x) = v29;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (int *)&__x, 7.28117508e199);
  v226 = v29;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v30 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v31 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (!*v6)
  {
    v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v202, "Could not construct");
    __cxa_throw(v202, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v245, *v6, CFSTR("output safety offset"));
  if (v246)
  {
    if (!v245)
    {
      v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v217, "Could not construct");
      __cxa_throw(v217, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v33 = applesauce::CF::convert_to<unsigned int,0>(v245);
  }
  else
  {
    v33 = 0;
  }
  LODWORD(__x) = v33;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (int *)&__x, 8.13208706e228);
  v225 = v33;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v34 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!*v6)
  {
    v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v203, "Could not construct");
    __cxa_throw(v203, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v222 = v25;
  v223 = v21;
  v224 = v17;
  *(_QWORD *)&__x = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!(_QWORD)__x)
  {
    v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v204, "Could not construct");
    __cxa_throw(v204, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v259, *v6, CFSTR("sample rate"), &__x);
  v37 = *(const void **)v259;
  if (!*(_QWORD *)v259)
  {
    v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v205, "Could not construct");
    __cxa_throw(v205, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = applesauce::CF::convert_to<long long,0>(*(const __CFNumber **)v259);
  CFRelease(v37);
  if ((_QWORD)__x)
    CFRelease((CFTypeRef)__x);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&valuePtr, 0, 1.5836601e190);
  v39 = (double)v38 * 2.32830644e-10 + (float)(v38 >> 32);
  v40 = valuePtr;
  v41 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(_QWORD *)&__x = &off_1E6973B68;
  *((double *)&__x + 1) = v39;
  *((_QWORD *)&v271 + 1) = &__x;
  memset(v259, 0, 40);
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v259, (uint64_t)&__x);
  *(_QWORD *)&v259[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v41, (AMCP *)v259);
  if (*(_QWORD *)&v259[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v259[32])(0, (uint64_t)v259, 0, 0);
  p_x = (__int128 *)*((_QWORD *)&v271 + 1);
  if (*((__int128 **)&v271 + 1) == &__x)
  {
    v43 = 4;
    p_x = &__x;
  }
  else
  {
    if (!*((_QWORD *)&v271 + 1))
      goto LABEL_90;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)p_x + 8 * v43))();
LABEL_90:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(valuePtr);
  v44 = valuePtr;
  v45 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(_QWORD *)&__x = &off_1E6973BE8;
  *((_QWORD *)&__x + 1) = v4;
  *((_QWORD *)&v271 + 1) = &__x;
  memset(v259, 0, 40);
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v259, (uint64_t)&__x);
  *(_QWORD *)&v259[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v44, v45, (AMCP *)v259);
  if (*(_QWORD *)&v259[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v259[32])(0, (uint64_t)v259, 0, 0);
  v46 = (__int128 *)*((_QWORD *)&v271 + 1);
  if (*((__int128 **)&v271 + 1) == &__x)
  {
    v47 = 4;
    v46 = &__x;
    goto LABEL_96;
  }
  if (*((_QWORD *)&v271 + 1))
  {
    v47 = 5;
LABEL_96:
    (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(valuePtr);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(valuePtr + 40), &valuePtr);
  v48 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(&v243, 0, 1.58366007e190);
  v240 = 0;
  v241 = 0;
  v242 = 0;
  v51 = *(_QWORD *)(v4 + 456);
  v52 = *(_QWORD *)(v4 + 464);
  v228 = a2;
  v229 = (const __CFDictionary **)(v4 + 448);
  if (v51 == v52)
  {
    v86 = 0;
  }
  else
  {
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(&v240, (v52 - v51) >> 4);
    v53 = *(AMCP::IOAudio2::Stream ***)(v4 + 456);
    v231 = *(AMCP::IOAudio2::Stream ***)(v4 + 464);
    if (v53 == v231)
    {
      v86 = 0;
      v6 = (CFDictionaryRef *)(v4 + 448);
    }
    else
    {
      v220 = v4;
      LODWORD(v54) = 0;
      v55 = v241;
      v56 = v242;
      v57 = v240;
      do
      {
        v58 = *((_DWORD *)*v53 + 13);
        v59 = *((_DWORD *)*v53 + 9);
        mapping_options = AMCP::IOAudio2::Stream::get_mapping_options(*v53);
        AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)&__x, *((const applesauce::CF::DictionaryRef **)*v53 + 5));
        v61 = HIDWORD(v271);
        if (v55 >= v56)
        {
          v64 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v55 - (_QWORD)v57) >> 3) + 1;
          if (v64 > 0x492492492492492)
          {
            v240 = v57;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (_QWORD)v57) >> 3) > v64)
            v64 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (_QWORD)v57) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - (_QWORD)v57) >> 3)) >= 0x249249249249249)
            v65 = 0x492492492492492;
          else
            v65 = v64;
          if (v65)
            v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v65);
          else
            v66 = 0;
          v67 = v65 + 8 * ((uint64_t)(v55 - (_QWORD)v57) >> 3);
          *(_DWORD *)v67 = v58;
          *(_DWORD *)(v67 + 4) = v59;
          *(_DWORD *)(v67 + 8) = mapping_options;
          *(_OWORD *)(v67 + 16) = __x;
          *(_OWORD *)(v67 + 32) = v271;
          *(_QWORD *)(v67 + 48) = v272;
          if ((void *)v55 == v57)
          {
            v72 = (void *)(v65 + 8 * ((uint64_t)(v55 - (_QWORD)v57) >> 3));
          }
          else
          {
            v68 = v65 + 8 * ((uint64_t)(v55 - (_QWORD)v57) >> 3);
            do
            {
              v69 = *(_OWORD *)(v55 - 56);
              v70 = *(_OWORD *)(v55 - 40);
              v71 = *(_OWORD *)(v55 - 24);
              v72 = (void *)(v68 - 56);
              *(_QWORD *)(v68 - 8) = *(_QWORD *)(v55 - 8);
              *(_OWORD *)(v68 - 24) = v71;
              *(_OWORD *)(v68 - 40) = v70;
              *(_OWORD *)(v68 - 56) = v69;
              v55 -= 56;
              v68 -= 56;
            }
            while ((void *)v55 != v57);
          }
          v56 = v65 + 56 * v66;
          v55 = v67 + 56;
          if (v57)
            operator delete(v57);
          v57 = v72;
        }
        else
        {
          *(_OWORD *)v259 = __x;
          *(_OWORD *)&v259[16] = v271;
          *(_QWORD *)&v259[32] = v272;
          *(_DWORD *)v55 = v58;
          *(_DWORD *)(v55 + 4) = v59;
          *(_DWORD *)(v55 + 8) = mapping_options;
          v62 = *(_QWORD *)&v259[32];
          v63 = *(_OWORD *)&v259[16];
          *(_OWORD *)(v55 + 16) = *(_OWORD *)v259;
          *(_OWORD *)(v55 + 32) = v63;
          *(_QWORD *)(v55 + 48) = v62;
          v55 += 56;
        }
        v54 = (v61 + v54);
        v53 += 2;
      }
      while (v53 != v231);
      v241 = v55;
      v242 = v56;
      v240 = v57;
      if ((_DWORD)v54)
      {
        v4 = v220;
        if (!*v229)
        {
          v218 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v218, "Could not construct");
          __cxa_throw(v218, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v73 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v259, v73);
        applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v237, *v229, CFSTR("output channel layout"), v259);
        if (*(_QWORD *)v259)
          CFRelease(*(CFTypeRef *)v259);
        LOBYTE(__x) = 0;
        std::vector<char>::vector((std::vector<char> *)v259, 20 * v54 + 12, (const std::vector<char>::value_type *)&__x);
        v74 = *(_QWORD *)v259;
        **(_QWORD **)v259 = 0;
        *(_DWORD *)(v74 + 8) = v54;
        if (v54 > (*(_QWORD *)&v259[8] - v74 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        v75 = 0;
        v76 = 0;
        v77 = (const __CFArray *)v237;
        do
        {
          if (!v77)
          {
            v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v186, "Could not construct");
            __cxa_throw(v186, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          LODWORD(v235) = -1;
          valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v235);
          if (!valuePtr)
          {
            v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v187, "Could not construct");
            __cxa_throw(v187, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, v77, v76, &valuePtr);
          v78 = (const void *)__x;
          if (!(_QWORD)__x)
          {
            v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v188, "Could not construct");
            __cxa_throw(v188, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v79 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
          v80 = *(unsigned int *)(*(_QWORD *)v259 + 8);
          if (v80 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          if (v76 >= v80)
          {
            v189 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v189, "accessing a CA::ChannelLayout with an out-of-range index");
            v189->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v189, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          *(_DWORD *)(*(_QWORD *)v259 + v75 + 12) = v79;
          CFRelease(v78);
          if (valuePtr)
            CFRelease((CFTypeRef)valuePtr);
          v81 = *(unsigned int *)(*(_QWORD *)v259 + 8);
          if (v81 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          if (v76 >= v81)
          {
            v190 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v190, "accessing a CA::ChannelLayout with an out-of-range index");
            v190->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
            __cxa_throw(v190, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
          }
          v82 = *(_QWORD *)v259 + v75;
          ++v76;
          *(_QWORD *)(v82 + 16) = 0;
          *(_QWORD *)(v82 + 24) = 0;
          v75 += 20;
        }
        while (v76 < v81);
        valuePtr = 0x6F75747073726E64;
        LODWORD(v268) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, *(const void **)v259, *(uint64_t *)&v259[8]);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(__x + 40), &__x);
        v6 = v229;
        v83 = (std::__shared_weak_count *)*((_QWORD *)&__x + 1);
        if (*((_QWORD *)&__x + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&__x + 1) + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (*(_QWORD *)v259)
        {
          *(_QWORD *)&v259[8] = *(_QWORD *)v259;
          operator delete(*(void **)v259);
        }
        if (v237)
          CFRelease(v237);
        v86 = 1;
      }
      else
      {
        v86 = 0;
        v6 = v229;
        v4 = v220;
      }
    }
  }
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v87 = *(_QWORD *)(v4 + 480);
  v88 = *(_QWORD *)(v4 + 488);
  if (v87 == v88
    || (std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)&v237, (v88 - v87) >> 4), v89 = *(AMCP::IOAudio2::Stream ***)(v4 + 480), v90 = *(AMCP::IOAudio2::Stream ***)(v4 + 488), v89 == v90))
  {
    v124 = 0;
    LODWORD(v91) = 0;
  }
  else
  {
    v232 = v86;
    v221 = v4;
    LODWORD(v91) = 0;
    v92 = v238;
    v93 = v239;
    v94 = (void *)v237;
    do
    {
      v95 = *((_DWORD *)*v89 + 13);
      v96 = *((_DWORD *)*v89 + 9);
      v97 = AMCP::IOAudio2::Stream::get_mapping_options(*v89);
      AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)&__x, *((const applesauce::CF::DictionaryRef **)*v89 + 5));
      v98 = HIDWORD(v271);
      if (v92 >= v93)
      {
        v101 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v92 - (_QWORD)v94) >> 3) + 1;
        if (v101 > 0x492492492492492)
        {
          v237 = v94;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v93 - (_QWORD)v94) >> 3) > v101)
          v101 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v93 - (_QWORD)v94) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v93 - (_QWORD)v94) >> 3)) >= 0x249249249249249)
          v102 = 0x492492492492492;
        else
          v102 = v101;
        if (v102)
          v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v102);
        else
          v103 = 0;
        v104 = v102 + 8 * ((uint64_t)(v92 - (_QWORD)v94) >> 3);
        *(_DWORD *)v104 = v95;
        *(_DWORD *)(v104 + 4) = v96;
        *(_DWORD *)(v104 + 8) = v97;
        *(_OWORD *)(v104 + 16) = __x;
        *(_OWORD *)(v104 + 32) = v271;
        *(_QWORD *)(v104 + 48) = v272;
        if ((void *)v92 == v94)
        {
          v109 = (void *)(v102 + 8 * ((uint64_t)(v92 - (_QWORD)v94) >> 3));
        }
        else
        {
          v105 = v102 + 8 * ((uint64_t)(v92 - (_QWORD)v94) >> 3);
          do
          {
            v106 = *(_OWORD *)(v92 - 56);
            v107 = *(_OWORD *)(v92 - 40);
            v108 = *(_OWORD *)(v92 - 24);
            v109 = (void *)(v105 - 56);
            *(_QWORD *)(v105 - 8) = *(_QWORD *)(v92 - 8);
            *(_OWORD *)(v105 - 24) = v108;
            *(_OWORD *)(v105 - 40) = v107;
            *(_OWORD *)(v105 - 56) = v106;
            v92 -= 56;
            v105 -= 56;
          }
          while ((void *)v92 != v94);
        }
        v110 = v102 + 56 * v103;
        v92 = v104 + 56;
        if (v94)
          operator delete(v94);
        v94 = v109;
        v93 = v110;
      }
      else
      {
        *(_OWORD *)v259 = __x;
        *(_OWORD *)&v259[16] = v271;
        *(_QWORD *)&v259[32] = v272;
        *(_DWORD *)v92 = v95;
        *(_DWORD *)(v92 + 4) = v96;
        *(_DWORD *)(v92 + 8) = v97;
        v99 = *(_QWORD *)&v259[32];
        v100 = *(_OWORD *)&v259[16];
        *(_OWORD *)(v92 + 16) = *(_OWORD *)v259;
        *(_OWORD *)(v92 + 32) = v100;
        *(_QWORD *)(v92 + 48) = v99;
        v92 += 56;
      }
      v91 = (v98 + v91);
      v89 += 2;
    }
    while (v89 != v90);
    v238 = v92;
    v239 = v93;
    v237 = v94;
    if ((_DWORD)v91)
    {
      a2 = v228;
      v4 = v221;
      v86 = v232;
      if (!*v229)
      {
        v219 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v219, "Could not construct");
        __cxa_throw(v219, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v111 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v259, v111);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v235, *v229, CFSTR("input channel layout"), v259);
      if (*(_QWORD *)v259)
        CFRelease(*(CFTypeRef *)v259);
      LOBYTE(__x) = 0;
      std::vector<char>::vector((std::vector<char> *)v259, 20 * v91 + 12, (const std::vector<char>::value_type *)&__x);
      v112 = *(_QWORD *)v259;
      **(_QWORD **)v259 = 0;
      *(_DWORD *)(v112 + 8) = v91;
      if (v91 > (*(_QWORD *)&v259[8] - v112 - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      v113 = 0;
      v114 = 0;
      v115 = (const __CFArray *)v235;
      do
      {
        if (!v115)
        {
          v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v191, "Could not construct");
          __cxa_throw(v191, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        LODWORD(v234) = -1;
        valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v234);
        if (!valuePtr)
        {
          v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v192, "Could not construct");
          __cxa_throw(v192, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, v115, v114, &valuePtr);
        v116 = (const void *)__x;
        if (!(_QWORD)__x)
        {
          v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v193, "Could not construct");
          __cxa_throw(v193, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v117 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
        v118 = *(unsigned int *)(*(_QWORD *)v259 + 8);
        if (v118 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v114 >= v118)
        {
          v194 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v194, "accessing a CA::ChannelLayout with an out-of-range index");
          v194->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v194, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        *(_DWORD *)(*(_QWORD *)v259 + v113 + 12) = v117;
        CFRelease(v116);
        if (valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v119 = *(unsigned int *)(*(_QWORD *)v259 + 8);
        if (v119 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v114 >= v119)
        {
          v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v195, "accessing a CA::ChannelLayout with an out-of-range index");
          v195->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v195, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        v120 = *(_QWORD *)v259 + v113;
        ++v114;
        *(_QWORD *)(v120 + 16) = 0;
        *(_QWORD *)(v120 + 24) = 0;
        v113 += 20;
      }
      while (v114 < v119);
      valuePtr = 0x696E707473726E64;
      LODWORD(v268) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, *(const void **)v259, *(uint64_t *)&v259[8]);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v228, (unsigned int *)(__x + 40), &__x);
      v6 = v229;
      v121 = (std::__shared_weak_count *)*((_QWORD *)&__x + 1);
      if (*((_QWORD *)&__x + 1))
      {
        v122 = (unint64_t *)(*((_QWORD *)&__x + 1) + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      if (*(_QWORD *)v259)
      {
        *(_QWORD *)&v259[8] = *(_QWORD *)v259;
        operator delete(*(void **)v259);
      }
      if (v235)
        CFRelease(v235);
      v124 = 1;
    }
    else
    {
      v124 = 0;
      a2 = v228;
      v6 = v229;
      v4 = v221;
      v86 = v232;
    }
  }
  if (!*v6)
  {
    v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v206, "Could not construct");
    __cxa_throw(v206, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&v235, *v6, CFSTR("input channel layout"));
  if (v236)
  {
    if (v91 <= 1)
      v125 = 1;
    else
      v125 = v91;
    LOBYTE(__x) = 0;
    std::vector<char>::vector((std::vector<char> *)v259, 20 * v125 + 12, (const std::vector<char>::value_type *)&__x);
    v126 = *(_DWORD **)v259;
    **(_QWORD **)v259 = 0;
    v126[2] = v91;
    v127 = *(_QWORD *)&v259[8];
    if (v91 > (*(_QWORD *)&v259[8] - (_QWORD)v126 - 12) / 0x14uLL)
      __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
    if ((_DWORD)v91)
    {
      v128 = 0;
      v129 = 0;
      do
      {
        if (!v235)
        {
          v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v181, "Could not construct");
          __cxa_throw(v181, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        LODWORD(v234) = -1;
        valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v234);
        if (!valuePtr)
        {
          v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v182, "Could not construct");
          __cxa_throw(v182, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, (const __CFArray *)v235, v129, &valuePtr);
        v130 = (const void *)__x;
        if (!(_QWORD)__x)
        {
          v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v183, "Could not construct");
          __cxa_throw(v183, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v131 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
        v132 = *(unsigned int *)(*(_QWORD *)v259 + 8);
        if (v132 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v129 >= v132)
        {
          v184 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v184, "accessing a CA::ChannelLayout with an out-of-range index");
          v184->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v184, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        *(_DWORD *)(*(_QWORD *)v259 + v128 + 12) = v131;
        CFRelease(v130);
        if (valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v133 = *(unsigned int *)(*(_QWORD *)v259 + 8);
        if (v133 > (*(_QWORD *)&v259[8] - *(_QWORD *)v259 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v129 >= v133)
        {
          v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v185, "accessing a CA::ChannelLayout with an out-of-range index");
          v185->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v185, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        v134 = *(_QWORD *)v259 + v128;
        ++v129;
        *(_QWORD *)(v134 + 16) = 0;
        *(_QWORD *)(v134 + 24) = 0;
        v128 += 20;
      }
      while (v129 < v133);
      v126 = *(_DWORD **)v259;
      v127 = *(_QWORD *)&v259[8];
      v6 = v229;
    }
    valuePtr = 0x696E707473726E64;
    LODWORD(v268) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, v126, v127);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(__x + 40), &__x);
    v135 = (std::__shared_weak_count *)*((_QWORD *)&__x + 1);
    if (*((_QWORD *)&__x + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&__x + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    if (*(_QWORD *)v259)
    {
      *(_QWORD *)&v259[8] = *(_QWORD *)v259;
      operator delete(*(void **)v259);
    }
  }
  LOBYTE(__x) = v124;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (char *)&__x, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v138 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v139 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  LOBYTE(__x) = v86;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (char *)&__x, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v141 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v142 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  LOBYTE(__x) = v86;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v259, 0, (char *)&__x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v259 + 40), v259);
  v144 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v145 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = **(_DWORD **)(v4 + 360);
  v148 = IOConnectAddRef(v147);
  if ((_DWORD)v148)
  {
    v207 = __cxa_allocate_exception(0x20uLL);
    v208 = std::system_category();
    MEMORY[0x1B5E5022C](v207, v148, v208, "Error on IOConnectAddRef");
    __cxa_throw(v207, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v149 = *(const void **)(v4 + 8);
  if (v149)
    CFRetain(*(CFTypeRef *)(v4 + 8));
  v234 = v149;
  *(_QWORD *)v259 = CFSTR("supports prewarming");
  BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v259);
  *(_QWORD *)v259 = CFSTR("wants input trap");
  v151 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v259);
  *(_QWORD *)v259 = CFSTR("wants output trap");
  v152 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v259);
  if (!*v6)
  {
    v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v209, "Could not construct");
    __cxa_throw(v209, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v153 = v152;
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v259, *v6, CFSTR("io buffer frame size"));
  if (!*(_QWORD *)v259)
  {
    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "Could not construct");
    __cxa_throw(v210, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v154 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v259);
  if (*(_QWORD *)v259)
    CFRelease(*(CFTypeRef *)v259);
  v155 = v243;
  v156 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  *(_QWORD *)v259 = *(_QWORD *)(*(_QWORD *)v4 + 32);
  *(_QWORD *)&v259[8] = v156;
  if (v156)
  {
    v157 = (unint64_t *)(v156 + 8);
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
  }
  *(_DWORD *)&v259[16] = v147;
  v159 = IOConnectAddRef(v147);
  if ((_DWORD)v159)
  {
    v211 = __cxa_allocate_exception(0x20uLL);
    v212 = std::system_category();
    MEMORY[0x1B5E5022C](v211, v159, v212, "Error on IOConnectAddRef");
    __cxa_throw(v211, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  if (v149)
    CFRetain(v149);
  *(_QWORD *)&v259[24] = v149;
  *(double *)&v259[32] = v39;
  *(_DWORD *)&v259[40] = v154;
  *(_DWORD *)&v259[44] = v224;
  LOBYTE(v260) = BOOL_from;
  *(_QWORD *)((char *)&v260 + 4) = __PAIR64__(v225, v226);
  HIDWORD(v260) = v223;
  v261 = v222;
  v263 = 0;
  v262 = 0uLL;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v262, v237, v238, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v238 - (_QWORD)v237) >> 3));
  __p = 0uLL;
  v265 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&__p, v240, v241, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v241 - (_QWORD)v240) >> 3));
  LOBYTE(v266) = v151;
  HIBYTE(v266) = v153;
  v160 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  v161 = *(_OWORD *)v259;
  memset(v259, 0, 20);
  v162 = *(_DWORD *)&v259[16];
  v163 = *(_QWORD *)&v259[24];
  v164 = v263;
  *(_QWORD *)&v259[24] = 0;
  v230 = v262;
  v233 = v161;
  v263 = 0;
  v262 = 0uLL;
  v227 = __p;
  v165 = v265;
  v265 = 0;
  __p = 0uLL;
  v166 = v266;
  v269 = 0;
  v167 = (char *)operator new(0x88uLL);
  *(_OWORD *)(v167 + 8) = v233;
  v168 = v260;
  *(_OWORD *)(v167 + 40) = *(_OWORD *)&v259[32];
  *(_QWORD *)v167 = &off_1E6973C68;
  *((_DWORD *)v167 + 6) = v162;
  *((_QWORD *)v167 + 4) = v163;
  *(_OWORD *)(v167 + 56) = v168;
  *((_DWORD *)v167 + 18) = v261;
  *((_OWORD *)v167 + 5) = v230;
  *((_QWORD *)v167 + 12) = v164;
  *(_OWORD *)(v167 + 104) = v227;
  *((_QWORD *)v167 + 15) = v165;
  *((_WORD *)v167 + 64) = v166;
  v269 = (CFTypeRef *)v167;
  __x = 0u;
  v271 = 0u;
  v272 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)&__x, (uint64_t)&valuePtr);
  v272 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v155, v160, (AMCP *)&__x);
  if (v272)
    v272(0, (uint64_t)&__x, 0, 0);
  p_valuePtr = (uint64_t *)v269;
  if (v269 == (CFTypeRef *)&valuePtr)
  {
    v170 = 4;
    p_valuePtr = &valuePtr;
  }
  else
  {
    if (!v269)
      goto LABEL_265;
    v170 = 5;
  }
  (*(void (**)(void))(*p_valuePtr + 8 * v170))();
LABEL_265:
  IOConnectRelease(0);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v262)
  {
    *((_QWORD *)&v262 + 1) = v262;
    operator delete((void *)v262);
  }
  if (*(_QWORD *)&v259[24])
    CFRelease(*(CFTypeRef *)&v259[24]);
  IOConnectRelease(*(io_connect_t *)&v259[16]);
  v171 = *(std::__shared_weak_count **)&v259[8];
  if (*(_QWORD *)&v259[8])
  {
    v172 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v228, (unsigned int *)(v243 + 40), &v243);
  if (v234)
    CFRelease(v234);
  IOConnectRelease(v147);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v235);
  if (v237)
    operator delete((void *)v237);
  if (v240)
    operator delete(v240);
  v174 = v244;
  if (v244)
  {
    v175 = (unint64_t *)&v244->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v245);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v247);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v249);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v251);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v253);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v257);
}

void sub_1B5908848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,void *a50,uint64_t a51,io_connect_t connect,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  void (*v16)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v13 = *(_OWORD *)((char *)a3 + 28);
  v14 = *(_OWORD *)((char *)a3 + 12);
  v18 = 0;
  v8 = (char *)operator new(0x38uLL);
  v9 = *a3;
  *(_QWORD *)v8 = &off_1E698CE98;
  *((_QWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a3 + 2);
  *(_OWORD *)(v8 + 20) = v14;
  *(_OWORD *)(v8 + 36) = v13;
  v18 = v8;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v17);
  v16 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v15);
  if (v16)
    v16(0, (uint64_t)v15, 0, 0);
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
    goto LABEL_7;
  }
  if (v18)
  {
    v11 = 5;
LABEL_7:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1B5908F6C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL applesauce::CF::details::has_key<__CFString const*>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6973E68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6973E68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  io_connect_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::runtime_error *v14;
  std::runtime_error *v15;
  void *v16;
  const std::error_category *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  mach_port_t connection;
  std::string v23;
  std::string v24;
  __int128 valuePtr;
  std::string::size_type v26;
  size_t v27;
  CFTypeRef cf[3];
  uint32_t outputCnt;
  char *v30[3];
  uint64_t input[2];

  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_27;
  }
  v3 = *(_QWORD *)(a1 + 8);
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
    goto LABEL_26;
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v30, *a2, CFSTR("kind"), cf);
  v4 = v30[0];
  if (!v30[0])
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = applesauce::CF::convert_to<unsigned long long,0>((const __CFNumber *)v30[0]);
  CFRelease(v4);
  if (cf[0])
    CFRelease(cf[0]);
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_27;
  }
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
  {
LABEL_26:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v30, *a2, CFSTR("UsageCaseSampleRate"), cf);
  v6 = v30[0];
  if (!v30[0])
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v30[0]);
  CFRelease(v6);
  if (cf[0])
    CFRelease(cf[0]);
  if (v5 - 2 >= 4)
    v8 = 1;
  else
    v8 = qword_1B5D68B10[v5 - 2];
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&connection, **(_DWORD **)(v3 + 360));
  v9 = connection;
  if (!connection)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  input[0] = v8;
  input[1] = vcvtd_n_u64_f64(v7 - (double)(unint64_t)floor(v7), 0x20uLL) + (vcvtmd_u64_f64(v7) << 32);
  memset(v30, 0, sizeof(v30));
  outputCnt = 0;
  memset(cf, 0, sizeof(cf));
  v27 = 0;
  v10 = IOConnectCallMethod(connection, 0xCu, input, 2u, 0, 0, 0, &outputCnt, 0, &v27);
  if ((_DWORD)v10)
  {
    v16 = __cxa_allocate_exception(0x20uLL);
    v17 = std::system_category();
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v24.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v23, 0xCu);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v23;
    else
      v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v24, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v26 = v20->__r_.__value_.__r.__words[2];
    valuePtr = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](v16, v10, v17, &valuePtr);
    __cxa_throw(v16, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize(v30, outputCnt);
  if (v27)
  {
    std::vector<unsigned char>::__append((unint64_t *)cf, v27);
    if (cf[0])
      operator delete((void *)cf[0]);
  }
  if (v30[0])
    operator delete(v30[0]);
  return IOConnectRelease(v9);
}

void sub_1B59093FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  io_connect_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v38;

  if (a30 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v35 & 1) == 0)
    {
LABEL_10:
      v38 = *(void **)(v36 - 120);
      if (v38)
        operator delete(v38);
      IOConnectRelease(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v34);
  goto LABEL_10;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

uint64_t AMCP::IOAudio2::Device::get_device_connection(AMCP::IOAudio2::Device *this, io_connect_t a2)
{
  uint64_t result;
  uint64_t v3;
  void *exception;
  const std::error_category *v5;

  *(_DWORD *)this = a2;
  result = IOConnectAddRef(a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v3, v5, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  return result;
}

void sub_1B5909610(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void std::vector<unsigned long long>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6973DE8;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6973DE8;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::operator()(CFDictionaryRef *a1@<X8>)
{
  CFNumberRef v2;
  CFTypeRef v3;
  std::runtime_error *exception;
  CFTypeRef cf;
  _QWORD v6[2];
  int valuePtr;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "kind");
  valuePtr = 0;
  v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v8 = v3;
  CFRetain(v2);
  v9 = v2;
  v6[0] = &v8;
  v6[1] = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v6);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
}

void sub_1B590989C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef a15)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E698CE98;
  *((_QWORD *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 20) = *(_OWORD *)(a1 + 20);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_QWORD *)a2 = &off_1E698CE98;
  v2 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_mutex_base *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v8[24];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_mutex_base **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = operator new(0x28uLL);
  *v6 = &off_1E698CF08;
  v6[1] = a1 + 20;
  v6[2] = a1 + 32;
  v6[3] = a1 + 36;
  v6[4] = a1 + 48;
  v9 = v6;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v4, v5, (uint64_t)v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 40))(v6);
}

void sub_1B5909AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities47make_owned_object_with_properties_list_propertyIjJNS_7AddressEjEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerEjRKS3_SB_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E698CF08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698CF08;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclESV_(_QWORD *a1, AMCP::Core::Core **a2)
{
  AMCP::Core::Core *v2;
  const AMCP::Address *v3;
  _DWORD *v4;
  const AMCP::Address *v5;
  _DWORD *v6;
  unint64_t v7;

  v2 = *a2;
  v3 = (const AMCP::Address *)a1[1];
  v4 = (_DWORD *)a1[2];
  v5 = (const AMCP::Address *)a1[3];
  v6 = (_DWORD *)a1[4];
  v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(*a2, v3);
  if (!HIDWORD(v7))
    return 0;
  if (*(_DWORD *)v3 != 1668047219 && *(_DWORD *)v3 != 1650682995)
  {
    if (*v4 != (_DWORD)v7)
      return 0;
    return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(v2, v5, v6);
  }
  if ((AMCP::is_base_of((AMCP *)*v4, v7) & 1) != 0)
    return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(v2, v5, v6);
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS_7AddressERKjENSt3__19enable_ifILb1EvEEEENS8_6vectorIjNS8_9allocatorIjEEEERNS0_6BrokerEjS5_RKT_DpOT0_EUlSJ_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  void (*v20)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v13, a3, a4, a4 - (_QWORD)a3);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = v13;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v16, v13, v14, v14 - (_QWORD)v13);
  v22 = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E698CA78;
  v9[2] = 0;
  v9[3] = 0;
  v9[1] = 0;
  v10 = v16;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v9 + 1, v16, v17, v17 - (_QWORD)v16);
  v22 = v9;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v21);
  v20 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v19);
  if (v20)
    v20(0, (uint64_t)v19, 0, 0);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_8:
  if (v10)
    operator delete(v10);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(v6);
  if (v8)
    operator delete(v8);
}

void sub_1B5909EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(CFDictionaryRef *a1, const void **a2)
{
  _BOOL8 v4;
  std::runtime_error *exception;
  const __CFNumber *v7;
  char v8;
  const __CFBoolean *v9;
  char v10;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9)
    goto LABEL_13;
  v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

{
  _BOOL8 v4;
  std::runtime_error *exception;
  const __CFNumber *v7;
  char v8;
  const __CFBoolean *v9;
  char v10;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9)
    goto LABEL_13;
  v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

{
  _BOOL8 v4;
  std::runtime_error *exception;
  const __CFNumber *v7;
  char v8;
  const __CFBoolean *v9;
  char v10;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9)
    goto LABEL_13;
  v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

void sub_1B590A02C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1B590A0B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x492492492492493)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[7 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B590A15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[52];
}

uint64_t std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  *(_QWORD *)a1 = &off_1E6973C68;
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  *(_QWORD *)a1 = &off_1E6973C68;
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = &off_1E6973C68;
  std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B590A4EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6973C68;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  double result;
  void *exception;
  const std::error_category *v9;
  __int128 v10;
  io_connect_t connect;
  dispatch_queue_t v12[41];

  v12[40] = *(dispatch_queue_t *)MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 672));
  v4 = operator new(0x330uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E6979290;
  connect = *(_DWORD *)(a1 + 24);
  v5 = IOConnectAddRef(connect);
  if ((_DWORD)v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v5, v9, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  *(_QWORD *)&v10 = v6;
  AMCP::IOAudio2::Engine::Engine((uint64_t)(v4 + 3), &connect, (CFTypeRef *)&v10, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_BYTE *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(double *)(a1 + 40), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), a1 + 80, a1 + 104, *(_WORD *)(a1 + 128), HIBYTE(*(_WORD *)(a1 + 128)), v12);
  if (v6)
    CFRelease(v6);
  IOConnectRelease(connect);
  *(_QWORD *)&v10 = v4 + 3;
  *((_QWORD *)&v10 + 1) = v4;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)&v10, v4 + 4, (uint64_t)(v4 + 3));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
  result = *(double *)&v10;
  *a2 = v10;
  return result;
}

void sub_1B590A6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, int a17, io_connect_t connect, char a19)
{
  std::__shared_weak_count *v19;
  void *v20;
  void *v22;

  __cxa_free_exception(v20);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v22);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6979290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6979290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_connect_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v14;
  void *exception;
  const std::error_category *v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v7;
  v8 = IOConnectAddRef(v7);
  if ((_DWORD)v8)
  {
    v14 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    v16 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v14, v16, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 24));
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((_QWORD *)(a1 + 96), *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  return a1;
}

void sub_1B590A950(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFBooleanGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E698CA78;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E698CA78;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E698CA78;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
  return v2;
}

void sub_1B590AB0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E698CA78;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA13ChannelLayoutEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6973BE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6973BE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2;
  io_connect_t v3;
  std::runtime_error *exception;
  int v6;
  unint64_t inputStruct;

  v2 = *(_QWORD *)(a1 + 8);
  inputStruct = vcvtd_n_s64_f64(*a2 - (double)(uint64_t)floor(*a2), 0x20uLL) + (vcvtmd_s64_f64(*a2) << 32);
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v6, **(_DWORD **)(v2 + 360));
  v3 = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v6, 4u, &inputStruct, 8uLL);
  return IOConnectRelease(v3);
}

void sub_1B590AD0C(_Unwind_Exception *a1)
{
  io_connect_t v1;
  void *v2;

  __cxa_free_exception(v2);
  IOConnectRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target_type()
{
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(mach_port_t a1, uint32_t a2, void *inputStruct, size_t inputStructCnt)
{
  uint64_t v5;
  void *exception;
  const std::error_category *v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;
  size_t v16;
  void *__p[3];
  uint32_t outputCnt;
  char *v19[3];

  memset(v19, 0, sizeof(v19));
  outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  v16 = 0;
  v5 = IOConnectCallMethod(a1, a2, 0, 0, inputStruct, inputStructCnt, 0, &outputCnt, 0, &v16);
  if ((_DWORD)v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = std::system_category();
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v13.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v12, a2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v12;
    else
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v13, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15 = v10->__r_.__value_.__r.__words[2];
    v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v5, v7, &v14);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize(v19, outputCnt);
  if (v16)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v16);
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v19[0])
    operator delete(v19[0]);
}

void sub_1B590AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  int v31;
  void *v32;
  uint64_t v33;
  void *v35;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      v35 = *(void **)(v33 - 72);
      if (v35)
        operator delete(v35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v32);
  goto LABEL_10;
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6973B68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6973B68;
  a2[1] = v2;
  return result;
}

double std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6973CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6973CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_mutex_base *v3;
  int v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t (**v8)();
  double *v9;
  double *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  AMCP::Core::Core *v14;
  std::__shared_weak_count *v15;
  uint64_t (***v16)();
  uint64_t (**v17)();
  uint64_t (**v18)();
  uint64_t (***v19)();
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_mutex_base **)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 32) + 16);
  v4 = *(_DWORD *)(a1 + 16);
  v17 = &off_1E6973D58;
  LODWORD(v18) = v4;
  v19 = &v17;
  AMCP::Core::Broker::fetch_first_core_if (&v14, v3, (uint64_t)&v17);
  v5 = v19;
  if (v19 == &v17)
  {
    v6 = 4;
    v5 = &v17;
    goto LABEL_5;
  }
  if (v19)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v17, v14);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = v17;
  v8 = v18;
  while (v7 != v8)
  {
    v9 = (double *)*v7;
    v10 = (double *)v7[1];
    while (v9 != v10)
    {
      CA::ValueRangeList::AddRange((double **)a2, v9);
      v9 += 2;
    }
    v7 += 8;
  }
  v16 = &v17;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B590B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void **a11, char a12)
{
  uint64_t v12;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a11 = (void **)&a12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target_type()
{
}

void AMCP::Core::Core::get_simple_required_property<1718449187u>(_QWORD *a1, AMCP::Core::Core *this)
{
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  void *__p[2];
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  void **v24;
  uint8_t buf[24];
  __int16 v26;
  _BYTE v27[18];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v15 = 0x676C6F62666D7423;
  v16 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v15);
  if (!(_DWORD)has_property)
  {
LABEL_18:
    LOBYTE(v17) = 0;
    v19 = 0;
    goto LABEL_19;
  }
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v22, (int8x8_t *)this, (unsigned int *)&v15);
  v5 = v22;
  if (!v22)
    goto LABEL_9;
  v6 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8);
    if (has_property)
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v5);
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(__p, (uint64_t)buf);
      v17 = *(_OWORD *)__p;
      v18 = v21;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      v19 = 1;
      v24 = __p;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v24);
      if (*(_QWORD *)&v27[6])
        has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v27[6])(0, buf, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v7 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)buf, v5);
  v17 = *(_OWORD *)buf;
  v18 = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  v19 = 1;
  __p[0] = buf;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_5:
  v7 = 0;
LABEL_10:
  v9 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((v7 & 1) != 0)
    goto LABEL_18;
  if (!v19)
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      HIBYTE(v21) = 4;
      strcpy((char *)__p, "fmt#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 391;
      v26 = 2080;
      *(_QWORD *)v27 = "optional_value.operator BOOL() == true";
      *(_WORD *)&v27[8] = 2080;
      *(_QWORD *)&v27[10] = __p;
      v28 = 1024;
      v29 = 1735159650;
      v30 = 1024;
      v31 = 0;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, v17, *((uint64_t *)&v17 + 1), (uint64_t)(*((_QWORD *)&v17 + 1) - v17) >> 6);
  *(_QWORD *)buf = &v17;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B590B590(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B590B988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[272];
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6973D58;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6973D58;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  int simple_required;
  int v5;

  simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(a1 + 8) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio26Device10build_coreEvENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6973AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6973AE8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  AMCP::Utility::Kernel_Error_Category *v2;
  int v3;
  AMCP::Log::Scope_Registry *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  AMCP::Log::Scope_Registry *v8;
  int v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  const __CFString *v16;
  mach_port_t v17;
  void **v18;
  NSObject *v19;
  os_log_type_t v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  const __CFString *v27;
  mach_port_t v28;
  void **v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  const __CFString *v36;
  mach_port_t v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  uint8_t *v47;
  uint64_t v48;
  AMCP::Log::Scope_Registry *v49;
  AMCP::Log::Scope_Registry *v50;
  int v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  const __CFString *v58;
  mach_port_t v59;
  void *v60;
  NSObject *v61;
  os_log_type_t v62;
  std::__shared_weak_count *v63;
  NSObject *v64;
  unint64_t *v65;
  unint64_t v66;
  _opaque_pthread_t *v67;
  mach_port_t v68;
  const __CFString *v69;
  mach_port_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  NSObject *v73;
  unint64_t *v74;
  unint64_t v75;
  _opaque_pthread_t *v76;
  mach_port_t v77;
  const __CFString *v78;
  mach_port_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::runtime_error *exception;
  void *v85;
  std::__shared_weak_count *v86;
  char v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90[4];
  __int128 v91;
  void *__p[2];
  int v93;
  char v94;
  int v95;
  mach_msg_header_t msg;
  unsigned int v97;
  uint8_t buf[8];
  _BYTE v99[10];
  __int16 v100;
  int v101;
  _QWORD v102[5];

  v102[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*(_DWORD *)(v1 + 368), 0x88u, &msg, 0);
  v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (!v3)
  {
    v5 = v97;
    if (v97)
    {
      v6 = 0;
      while (1)
      {
        v7 = (char *)&msg + 32 * v6;
        if (*((_DWORD *)v7 + 9) == 1668247142)
          break;
LABEL_93:
        if (++v6 >= v5)
          return;
      }
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v85, "com.apple.coreaudio", "AMCP");
      v9 = *((_DWORD *)v85 + 4);
      switch(v9)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v30 = *(std::__shared_weak_count **)v99;
          v31 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v32 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            v34 = pthread_self();
            v35 = pthread_mach_thread_np(v34);
            v36 = *(const __CFString **)(v1 + 8);
            if (!v36)
              goto LABEL_95;
            v37 = v35;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v36);
            v38 = __p;
            if (v94 < 0)
              v38 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v37;
            *(_WORD *)v99 = 2080;
            *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
            v100 = 1024;
            v101 = 557;
            LOWORD(v102[0]) = 2080;
            *(_QWORD *)((char *)v102 + 2) = v38;
            v19 = v31;
            v20 = OS_LOG_TYPE_INFO;
            goto LABEL_38;
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v21 = *(std::__shared_weak_count **)v99;
          v22 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v23 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            v27 = *(const __CFString **)(v1 + 8);
            if (!v27)
              goto LABEL_95;
            v28 = v26;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v27);
            v29 = __p;
            if (v94 < 0)
              v29 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v28;
            *(_WORD *)v99 = 2080;
            *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
            v100 = 1024;
            v101 = 557;
            LOWORD(v102[0]) = 2080;
            *(_QWORD *)((char *)v102 + 2) = v29;
            _os_log_debug_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
            goto LABEL_39;
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v10 = *(std::__shared_weak_count **)v99;
          v11 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v12 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v14 = pthread_self();
            v15 = pthread_mach_thread_np(v14);
            v16 = *(const __CFString **)(v1 + 8);
            if (!v16)
              goto LABEL_95;
            v17 = v15;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v16);
            v18 = __p;
            if (v94 < 0)
              v18 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v17;
            *(_WORD *)v99 = 2080;
            *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
            v100 = 1024;
            v101 = 557;
            LOWORD(v102[0]) = 2080;
            *(_QWORD *)((char *)v102 + 2) = v18;
            v19 = v11;
            v20 = OS_LOG_TYPE_DEFAULT;
LABEL_38:
            _os_log_impl(&dword_1B57BA000, v19, v20, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
LABEL_39:
            if (v94 < 0)
              operator delete(__p[0]);
          }
          break;
      }
      v39 = v86;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      kdebug_trace();
      v42 = operator new(0x20uLL);
      v42[1] = 0;
      v42[2] = 0;
      *v42 = &off_1E69A0170;
      *((_BYTE *)v42 + 24) = 0;
      __p[0] = v42 + 3;
      __p[1] = v42;
      v93 = 0;
      v95 = 0;
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 32);
      v44 = *(_DWORD *)(*(_QWORD *)v1 + 48);
      v45 = *(_DWORD *)(v1 + 16);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v90, (uint64_t *)__p);
      *(_QWORD *)&v91 = v1;
      *((_QWORD *)&v91 + 1) = v7 + 32;
      v102[0] = 0;
      v46 = (char *)operator new(0x38uLL);
      *(_QWORD *)v46 = &off_1E6973EE8;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v46 + 8), v90);
      *(_OWORD *)(v46 + 40) = v91;
      v102[0] = v46;
      AMCP::Core::Conductor::enqueue_config_change(v43, v44, v45, 9, (uint64_t)buf);
      v47 = (uint8_t *)v102[0];
      if ((uint8_t *)v102[0] == buf)
      {
        v47 = buf;
        v48 = 4;
      }
      else
      {
        if (!v102[0])
          goto LABEL_51;
        v48 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_51:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v90);
      v49 = (AMCP::Log::Scope_Registry *)kdebug_trace();
      AMCP::Log::Scope_Registry::get(v49);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v88, "com.apple.coreaudio", "AMCP");
      v51 = *(_DWORD *)(v88 + 16);
      switch(v51)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v50);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v72 = *(std::__shared_weak_count **)v99;
          v73 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v74 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (!os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
            goto LABEL_87;
          v76 = pthread_self();
          v77 = pthread_mach_thread_np(v76);
          v78 = *(const __CFString **)(v1 + 8);
          if (!v78)
          {
LABEL_95:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v79 = v77;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v85, v78);
          v80 = &v85;
          if (v87 < 0)
            v80 = v85;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v79;
          *(_WORD *)v99 = 2080;
          *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
          v100 = 1024;
          v101 = 662;
          LOWORD(v102[0]) = 2080;
          *(_QWORD *)((char *)v102 + 2) = v80;
          v61 = v73;
          v62 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v50);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v63 = *(std::__shared_weak_count **)v99;
          v64 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v65 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            goto LABEL_87;
          v67 = pthread_self();
          v68 = pthread_mach_thread_np(v67);
          v69 = *(const __CFString **)(v1 + 8);
          if (!v69)
            goto LABEL_95;
          v70 = v68;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v85, v69);
          v71 = &v85;
          if (v87 < 0)
            v71 = v85;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v70;
          *(_WORD *)v99 = 2080;
          *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
          v100 = 1024;
          v101 = 662;
          LOWORD(v102[0]) = 2080;
          *(_QWORD *)((char *)v102 + 2) = v71;
          _os_log_debug_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d End configuration change for device '%s'", buf, 0x22u);
          goto LABEL_85;
        case 1:
          AMCP::Log::Scope_Registry::get(v50);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v52 = *(std::__shared_weak_count **)v99;
          v53 = **(NSObject ***)buf;
          if (*(_QWORD *)v99)
          {
            v54 = (unint64_t *)(*(_QWORD *)v99 + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            goto LABEL_87;
          v56 = pthread_self();
          v57 = pthread_mach_thread_np(v56);
          v58 = *(const __CFString **)(v1 + 8);
          if (!v58)
            goto LABEL_95;
          v59 = v57;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v85, v58);
          v60 = &v85;
          if (v87 < 0)
            v60 = v85;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v59;
          *(_WORD *)v99 = 2080;
          *(_QWORD *)&v99[2] = "IOAudio2_Device.cpp";
          v100 = 1024;
          v101 = 662;
          LOWORD(v102[0]) = 2080;
          *(_QWORD *)((char *)v102 + 2) = v60;
          v61 = v53;
          v62 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_87;
      }
      _os_log_impl(&dword_1B57BA000, v61, v62, "%6u %32s:%-5d End configuration change for device '%s'", buf, 0x22u);
LABEL_85:
      if (v87 < 0)
        operator delete(v85);
LABEL_87:
      v81 = v89;
      if (v89)
      {
        v82 = (unint64_t *)&v89->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v4 = (AMCP::Log::Scope_Registry *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
      v5 = v97;
      goto LABEL_93;
    }
  }
}

void sub_1B590C69C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6973EE8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6973EE8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6973EE8;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B590C804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6973EE8;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 is_valid;
  io_connect_t v4;
  io_registry_entry_t v5;
  uint64_t CFProperties;
  char *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  int64x2_t *v41;
  __CFDictionary *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  __int128 v56;
  int64x2_t v57;
  __CFDictionary *v58;
  uint64_t *v59;
  const __CFDictionary *v60;
  uint64_t v61;
  int v62;
  const __CFArray *v63;
  CFIndex Count;
  CFIndex v65;
  CFIndex v66;
  unint64_t v67;
  CFMutableDictionaryRef v68;
  int v69;
  const void *v70;
  unsigned int v71;
  CFArrayRef v72;
  CFMutableDictionaryRef i;
  CFMutableDictionaryRef v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  CFArrayRef v78;
  CFMutableDictionaryRef j;
  CFMutableDictionaryRef v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 *v84;
  unint64_t *v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  unint64_t *v88;
  unint64_t v89;
  _opaque_pthread_t *v90;
  mach_port_t v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *exception;
  std::runtime_error *v96;
  void *v97;
  const std::error_category *v98;
  std::runtime_error *v99;
  std::runtime_error *v100;
  std::runtime_error *v101;
  unint64_t *__p;
  uint64_t *v103;
  uint64_t v104;
  CFTypeRef v105;
  int64x2_t v106;
  CFTypeRef v107;
  char *v108[3];
  CFTypeRef v109;
  char *v110[3];
  CFTypeRef v111;
  CFArrayRef theArray;
  std::__shared_weak_count *v113;
  CFTypeRef cf;
  int v115;
  CFMutableDictionaryRef properties[8];

  properties[5] = *(CFMutableDictionaryRef *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)properties, "com.apple.coreaudio", "AMCP");
    v86 = (std::__shared_weak_count *)properties[1];
    v87 = *(NSObject **)properties[0];
    if (properties[1])
    {
      v88 = (unint64_t *)((char *)properties[1] + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      v90 = pthread_self();
      v91 = pthread_mach_thread_np(v90);
      LODWORD(properties[0]) = 67109890;
      HIDWORD(properties[0]) = v91;
      LOWORD(properties[1]) = 2080;
      *(CFMutableDictionaryRef *)((char *)&properties[1] + 2) = (CFMutableDictionaryRef)"IOAudio2_Device.cpp";
      WORD1(properties[2]) = 1024;
      HIDWORD(properties[2]) = 564;
      LOWORD(properties[3]) = 2080;
      *(CFMutableDictionaryRef *)((char *)&properties[3] + 2) = (CFMutableDictionaryRef)"expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)properties, 0x22u);
    }
    abort();
  }
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)properties, **(_DWORD **)(v2 + 360));
  v4 = (io_connect_t)properties[0];
  if (!LODWORD(properties[0]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>((mach_port_t)properties[0], 3u, *(void **)(a1 + 48), 0x20uLL);
  IOConnectRelease(v4);
  v5 = *(_DWORD *)(v2 + 344);
  if (!v5)
  {
    v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v96, "cannot create io_object_proxy from null io_object");
    __cxa_throw(v96, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  properties[0] = 0;
  CFProperties = IORegistryEntryCreateCFProperties(v5, properties, 0, 0);
  if ((_DWORD)CFProperties)
  {
    v97 = __cxa_allocate_exception(0x20uLL);
    v98 = std::system_category();
    MEMORY[0x1B5E5022C](v97, CFProperties, v98, "Error on get_properties");
    __cxa_throw(v97, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v110, properties[0]);
  v7 = *(char **)(v2 + 448);
  v8 = (const __CFDictionary *)v110[0];
  *(char **)(v2 + 448) = v110[0];
  v110[0] = v7;
  if (v7)
  {
    CFRelease(v7);
    v8 = *(const __CFDictionary **)(v2 + 448);
  }
  if (!v8)
  {
    v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v99);
    __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v111, v8, CFSTR("input streams"), properties);
  if (properties[0])
    CFRelease(properties[0]);
  AMCP::IOAudio2::Stream::create_from_dictionary_list(v110, v2, 1, (CFArrayRef *)&v111);
  v9 = *(const __CFDictionary **)(v2 + 448);
  if (!v9)
  {
    v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v100, "Could not construct");
    __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v109, v9, CFSTR("output streams"), properties);
  if (properties[0])
    CFRelease(properties[0]);
  AMCP::IOAudio2::Stream::create_from_dictionary_list(v108, v2, 0, (CFArrayRef *)&v109);
  _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(v2, (uint64_t *)(v2 + 456), (uint64_t *)v108);
  _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(v2, (uint64_t *)(v2 + 480), (uint64_t *)v110);
  v10 = *(const __CFDictionary **)(v2 + 448);
  if (!v10)
  {
    v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Could not construct");
    __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v107, v10, CFSTR("controls"), properties);
  if (properties[0])
    CFRelease(properties[0]);
  AMCP::IOAudio2::Control::create_from_dictionary_list(&v106, (AMCP::IOAudio2::Device *)v2, (CFArrayRef *)&v107);
  v11 = v106.i64[1];
  v12 = v106.i64[0];
  v104 = v2;
  if (v106.i64[0] == v106.i64[1])
  {
    v14 = 0;
    v103 = 0;
    v15 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v103 = 0;
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v2 + 504);
      v17 = *(_QWORD *)(v2 + 512);
      if (v16 != v17)
      {
        while (*(_DWORD *)(*(_QWORD *)v16 + 36) != *(_DWORD *)(*(_QWORD *)v12 + 36))
        {
          v16 += 16;
          if (v16 == v17)
            goto LABEL_23;
        }
      }
      if (v16 == v17)
      {
LABEL_23:
        if ((unint64_t)v15 >= v13)
        {
          v18 = v15 - v103;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
LABEL_181:
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v13 - (_QWORD)v103) >> 2 > v19)
            v19 = (uint64_t)(v13 - (_QWORD)v103) >> 2;
          if (v13 - (unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          else
            v21 = 0;
          v22 = (uint64_t *)(v20 + 8 * v18);
          *v22 = v12;
          v15 = v22 + 1;
          v2 = v104;
          if (v14 != v103)
          {
            do
            {
              v23 = *--v14;
              *--v22 = v23;
            }
            while (v14 != v103);
            v14 = v103;
          }
          v103 = v22;
          v13 = v20 + 8 * v21;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v15++ = v12;
        }
        v11 = v106.i64[1];
        v14 = v15;
      }
      v12 += 16;
    }
    while (v12 != v11);
  }
  v25 = *(_QWORD *)(v2 + 504);
  v24 = *(_QWORD *)(v2 + 512);
  if (v25 == v24)
  {
    __p = 0;
    v14 = v15;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    __p = 0;
    v28 = 0;
    do
    {
      v29 = v106.i64[0];
      if (v106.i64[0] != v106.i64[1])
      {
        while (*(_DWORD *)(*(_QWORD *)v29 + 36) != *(_DWORD *)(*(_QWORD *)v25 + 36))
        {
          v29 += 16;
          if (v29 == v106.i64[1])
          {
            v29 = v106.i64[1];
            break;
          }
        }
      }
      if (v29 == v24)
      {
        if ((unint64_t)v28 >= v26)
        {
          v30 = v28 - __p;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            goto LABEL_181;
          if ((uint64_t)(v26 - (_QWORD)__p) >> 2 > v31)
            v31 = (uint64_t)(v26 - (_QWORD)__p) >> 2;
          if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v32);
          else
            v33 = 0;
          v34 = (unint64_t *)(v32 + 8 * v30);
          *v34 = v25;
          v28 = v34 + 1;
          if (v27 != __p)
          {
            do
            {
              v35 = *--v27;
              *--v34 = v35;
            }
            while (v27 != __p);
            v27 = __p;
          }
          __p = v34;
          v26 = v32 + 8 * v33;
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v28++ = v25;
        }
        v24 = *(_QWORD *)(v104 + 512);
        v27 = v28;
      }
      v25 += 16;
    }
    while (v25 != v24);
    v36 = __p;
    if (__p == v28)
    {
      v25 = v24;
      v2 = v104;
    }
    else
    {
      v2 = v104;
      do
      {
        v37 = (uint64_t *)*v36++;
        v38 = *v37;
        AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(**(_QWORD **)(*v37 + 24) + 32) + 16), *(_DWORD *)(*v37 + 32));
        *(_DWORD *)(v38 + 32) = 0;
      }
      while (v36 != v28);
      v25 = *(_QWORD *)(v104 + 504);
      v39 = *(_QWORD *)(v104 + 512);
      if (v25 != v39)
      {
        while (2)
        {
          v40 = __p;
          while (*(_QWORD *)v25 != *(_QWORD *)*v40)
          {
            if (++v40 == v28)
              goto LABEL_77;
          }
          if (v28 == v40)
          {
LABEL_77:
            v25 += 16;
            if (v25 != v39)
              continue;
            goto LABEL_78;
          }
          break;
        }
        if (v25 == v39)
          goto LABEL_78;
        v84 = (__int128 *)(v25 + 16);
        if (v25 + 16 == v39)
        {
          v2 = v104;
        }
        else
        {
          do
          {
            v85 = __p;
            while (*(_QWORD *)v84 != *(_QWORD *)*v85)
            {
              if (++v85 == v28)
                goto LABEL_160;
            }
            if (v28 != v85)
              goto LABEL_161;
LABEL_160:
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v25, v84);
            v25 += 16;
LABEL_161:
            ++v84;
          }
          while (v84 != (__int128 *)v39);
          v2 = v104;
          v39 = *(_QWORD *)(v104 + 512);
        }
        if (v25 == v39)
        {
LABEL_78:
          v25 = v39;
          goto LABEL_81;
        }
        while (v39 != v25)
        {
          v39 -= 16;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v39);
        }
        *(_QWORD *)(v2 + 512) = v25;
      }
    }
  }
LABEL_81:
  v41 = (int64x2_t *)(v2 + 504);
  if (v103 != v14)
  {
    v42 = (__CFDictionary *)(v2 + 520);
    v43 = v103;
    do
    {
      v44 = *v43;
      if (v25 >= *(_QWORD *)v42)
      {
        v46 = (uint64_t)(v25 - v41->i64[0]) >> 4;
        if ((unint64_t)(v46 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v47 = *(_QWORD *)v42 - v41->i64[0];
        v48 = v47 >> 3;
        if (v47 >> 3 <= (unint64_t)(v46 + 1))
          v48 = v46 + 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        properties[4] = v42;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v49);
        v52 = &v50[16 * v46];
        *(_OWORD *)v52 = *(_OWORD *)v44;
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        v54 = *(_QWORD **)(v104 + 504);
        v53 = *(_QWORD **)(v104 + 512);
        if (v53 == v54)
        {
          v57 = vdupq_n_s64((unint64_t)v53);
          v55 = &v50[16 * v46];
        }
        else
        {
          v55 = &v50[16 * v46];
          do
          {
            v56 = *((_OWORD *)v53 - 1);
            v53 -= 2;
            *((_OWORD *)v55 - 1) = v56;
            v55 -= 16;
            *v53 = 0;
            v53[1] = 0;
          }
          while (v53 != v54);
          v57 = *v41;
        }
        v25 = (unint64_t)(v52 + 16);
        v45 = v104;
        *(_QWORD *)(v104 + 504) = v55;
        *(_QWORD *)(v104 + 512) = v52 + 16;
        *(int64x2_t *)&properties[1] = v57;
        v58 = *(__CFDictionary **)(v104 + 520);
        *(_QWORD *)(v104 + 520) = &v50[16 * v51];
        properties[3] = v58;
        properties[0] = (CFMutableDictionaryRef)v57.i64[0];
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)properties);
      }
      else
      {
        *(_OWORD *)v25 = *(_OWORD *)v44;
        v25 += 16;
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        v45 = v104;
      }
      *(_QWORD *)(v45 + 512) = v25;
      ++v43;
    }
    while (v43 != v14);
  }
  v59 = (uint64_t *)v41->i64[0];
  if (v41->i64[0] != v25)
  {
    do
    {
      v60 = *(const __CFDictionary **)(v104 + 448);
      if (!v60)
        goto LABEL_179;
      v61 = *v59;
      v62 = *(_DWORD *)(*v59 + 36);
      properties[0] = 0;
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v60, CFSTR("controls"), properties);
      if (properties[0])
        CFRelease(properties[0]);
      v63 = theArray;
      if (!theArray)
      {
LABEL_179:
        v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v94, "Could not construct");
        __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (CFArrayGetCount(theArray))
      {
        Count = CFArrayGetCount(v63);
        v65 = CFArrayGetCount(v63);
        if (Count)
        {
          v66 = v65;
          v67 = 0;
          while (v66 != v67)
          {
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v105, v63, v67);
            if (!v105)
              goto LABEL_178;
            LODWORD(properties[0]) = 0;
            cf = CFNumberCreate(0, kCFNumberIntType, properties);
            if (!cf)
            {
              v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v92, "Could not construct");
              __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(properties, (const __CFDictionary *)v105, CFSTR("control ID"), &cf);
            v68 = properties[0];
            if (!properties[0])
            {
LABEL_178:
              v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v93, "Could not construct");
              __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v69 = applesauce::CF::convert_to<unsigned int,0>(properties[0]);
            CFRelease(v68);
            if (cf)
              CFRelease(cf);
            if (v69 == v62)
              goto LABEL_117;
            if (v105)
              CFRelease(v105);
            if (Count == ++v67)
              break;
          }
        }
      }
      v105 = 0;
LABEL_117:
      CFRelease(v63);
      v70 = *(const void **)(v61 + 40);
      *(_QWORD *)(v61 + 40) = v105;
      v105 = v70;
      v71 = *(_DWORD *)(v61 + 32);
      if (v71)
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&theArray, *(std::__shared_mutex_base **)(*(_QWORD *)(**(_QWORD **)(v61 + 24) + 32) + 16), v71);
        v72 = theArray;
        if (theArray)
        {
          memset(properties, 0, 32);
          LODWORD(properties[4]) = 1065353216;
          AMCP::IOAudio2::Control::update_value(v61, (uint64_t)properties);
          AMCP::IOAudio2::Control::update_range(v61, (uint64_t)properties);
          cf = (char *)v72 + 48;
          LOBYTE(v115) = 1;
          caulk::concurrent::shared_spin_lock::lock((unsigned int *)v72 + 12);
          for (i = properties[2]; i; i = *(CFMutableDictionaryRef *)i)
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v72 + 8, (unsigned int *)(*((_QWORD *)i + 4) + 40), (_QWORD *)i + 4);
          std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
          cf = (CFTypeRef)0x676C6F626F776E72;
          v115 = 0;
          *((_DWORD *)v72 + 1) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v72, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
          std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)properties[2]);
          v74 = properties[0];
          properties[0] = 0;
          if (v74)
            operator delete(v74);
        }
        v75 = v113;
        if (v113)
        {
          p_shared_owners = (unint64_t *)&v113->__shared_owners_;
          do
            v77 = __ldaxr(p_shared_owners);
          while (__stlxr(v77 - 1, p_shared_owners));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
      }
      else
      {
        AMCP::IOAudio2::Control::build_core((AMCP::IOAudio2::Control *)v61);
      }
      if (v105)
        CFRelease(v105);
      v59 += 2;
    }
    while (v59 != (uint64_t *)v25);
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&theArray, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)v104 + 32) + 16), *(_DWORD *)(v104 + 16));
  v78 = theArray;
  if (theArray)
  {
    memset(properties, 0, 32);
    LODWORD(properties[4]) = 1065353216;
    AMCP::IOAudio2::Device::update_core_common(v104, (uint64_t)properties);
    cf = (char *)v78 + 48;
    LOBYTE(v115) = 1;
    caulk::concurrent::shared_spin_lock::lock((unsigned int *)v78 + 12);
    for (j = properties[2]; j; j = *(CFMutableDictionaryRef *)j)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v78 + 8, (unsigned int *)(*((_QWORD *)j + 4) + 40), (_QWORD *)j + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
    cf = (CFTypeRef)0x676C6F626F776E72;
    v115 = 0;
    *((_DWORD *)v78 + 1) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v78, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)properties[2]);
    v80 = properties[0];
    properties[0] = 0;
    if (v80)
      operator delete(v80);
  }
  v81 = v113;
  if (v113)
  {
    v82 = (unint64_t *)&v113->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (__p)
    operator delete(__p);
  if (v103)
    operator delete(v103);
  properties[0] = (CFMutableDictionaryRef)&v106;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v107)
    CFRelease(v107);
  properties[0] = (CFMutableDictionaryRef)v108;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v109)
    CFRelease(v109);
  properties[0] = (CFMutableDictionaryRef)v110;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v111)
    CFRelease(v111);
}

void sub_1B590D5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, CFTypeRef a12, char **a13, uint64_t a14, uint64_t a15, CFTypeRef a16, char *a17, uint64_t a18, uint64_t a19, CFTypeRef cf,char a21,uint64_t a22,uint64_t a23,CFTypeRef a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  a13 = &a17;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (cf)
    CFRelease(cf);
  a17 = &a21;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a24)
    CFRelease(a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  _QWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  int64x2_t v79;
  const __CFArray *v80;
  uint64_t v81;
  _OWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  __int128 v85;
  _QWORD *v86;
  const void *v87;
  const __CFArray *v88;
  uint64_t v89;
  const __CFDictionary *v90;
  uint64_t v91;
  int v92;
  CFArrayRef v93;
  CFTypeRef v94;
  const __CFArray *v95;
  const __CFDictionary *v96;
  const void *v97;
  unsigned int v98;
  _DWORD *v99;
  CFArrayRef i;
  CFArrayRef v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  __int128 *v105;
  uint64_t *v106;
  std::runtime_error *exception;
  uint64_t *v108;
  uint64_t *v110;
  char *v111;
  CFTypeRef cf;
  __int128 v113;
  const __CFArray *v114;
  _QWORD *v115;
  CFArrayRef theArray[4];
  _QWORD *v117;
  CFTypeRef v118;
  std::__shared_weak_count *v119;

  v6 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *a2;
      v12 = a2[1];
      if (*a2 != v12)
      {
        while (*(_DWORD *)(*(_QWORD *)v11 + 36) != *(_DWORD *)(*(_QWORD *)v6 + 36))
        {
          v11 += 16;
          if (v11 == v12)
            goto LABEL_8;
        }
      }
      if (v11 == v12)
      {
LABEL_8:
        if ((unint64_t)v10 >= v7)
        {
          v13 = (v10 - v9) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
LABEL_175:
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v7 - (_QWORD)v9) >> 2 > v14)
            v14 = (uint64_t)(v7 - (_QWORD)v9) >> 2;
          if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
          else
            v16 = 0;
          v17 = (char *)(v15 + 8 * v13);
          *(_QWORD *)v17 = v6;
          v10 = v17 + 8;
          if (v8 != v9)
          {
            do
            {
              v18 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v17 - 1) = v18;
              v17 -= 8;
            }
            while (v8 != v9);
            v8 = v9;
          }
          v9 = v17;
          v7 = v15 + 8 * v16;
          if (v8)
            operator delete(v8);
        }
        else
        {
          *(_QWORD *)v10 = v6;
          v10 += 8;
        }
        v5 = a3[1];
        v8 = v10;
      }
      v6 += 16;
    }
    while (v6 != v5);
  }
  v20 = *a2;
  v19 = a2[1];
  v111 = v9;
  if (*a2 == v19)
  {
    v23 = 0;
    v8 = v10;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *a3;
      v26 = a3[1];
      if (*a3 != v26)
      {
        while (*(_DWORD *)(*(_QWORD *)v25 + 36) != *(_DWORD *)(*(_QWORD *)v20 + 36))
        {
          v25 += 16;
          if (v25 == v26)
          {
            v25 = a3[1];
            break;
          }
        }
      }
      if (v25 == v19)
      {
        if ((unint64_t)v24 >= v22)
        {
          v27 = v24 - v23;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_175;
          if ((uint64_t)(v22 - (_QWORD)v23) >> 2 > v28)
            v28 = (uint64_t)(v22 - (_QWORD)v23) >> 2;
          if (v22 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29);
          else
            v30 = 0;
          v31 = (uint64_t *)(v29 + 8 * v27);
          *v31 = v20;
          v24 = v31 + 1;
          if (v21 != v23)
          {
            do
            {
              v32 = *--v21;
              *--v31 = v32;
            }
            while (v21 != v23);
            v21 = v23;
          }
          v23 = v31;
          v22 = v29 + 8 * v30;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v24++ = v20;
        }
        v19 = a2[1];
        v21 = v24;
      }
      v20 += 16;
    }
    while (v20 != v19);
    if (v23 == v24)
    {
      v20 = v19;
    }
    else
    {
      v33 = v23;
      v34 = v23;
      do
      {
        v35 = (uint64_t *)*v34++;
        v36 = *v35;
        AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(**(_QWORD **)(*v35 + 24) + 32) + 16), *(_DWORD *)(*v35 + 32));
        *(_DWORD *)(v36 + 32) = 0;
      }
      while (v34 != v24);
      v20 = *a2;
      v37 = a2[1];
      v23 = v33;
      if (*a2 != v37)
      {
        while (2)
        {
          v38 = v33;
          while (*(_QWORD *)v20 != *(_QWORD *)*v38)
          {
            if (++v38 == v24)
              goto LABEL_62;
          }
          if (v24 == v38)
          {
LABEL_62:
            v20 += 16;
            if (v20 != v37)
              continue;
            goto LABEL_63;
          }
          break;
        }
        if (v20 == v37)
          goto LABEL_63;
        v105 = (__int128 *)(v20 + 16);
        if (v20 + 16 != v37)
        {
          do
          {
            v106 = v23;
            while (*(_QWORD *)v105 != *(_QWORD *)*v106)
            {
              if (++v106 == v24)
                goto LABEL_165;
            }
            if (v24 != v106)
              goto LABEL_166;
LABEL_165:
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v20, v105);
            v20 += 16;
LABEL_166:
            ++v105;
          }
          while (v105 != (__int128 *)v37);
          v37 = a2[1];
        }
        if (v20 == v37)
        {
LABEL_63:
          v20 = v37;
          goto LABEL_66;
        }
        while (v37 != v20)
        {
          v37 -= 16;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37);
        }
        a2[1] = v20;
      }
    }
  }
LABEL_66:
  v108 = v23;
  if (v9 != v8)
  {
    v110 = a2 + 2;
    v39 = v9;
    do
    {
      v40 = *(_QWORD **)v39;
      v42 = *a2;
      v41 = (_OWORD *)a2[1];
      v43 = (uint64_t)v41 - *a2;
      if (v41 == (_OWORD *)*a2)
      {
        v45 = a2[1];
      }
      else
      {
        v44 = v43 >> 4;
        v45 = *a2;
        do
        {
          v46 = v44 >> 1;
          v47 = (uint64_t *)(v45 + 16 * (v44 >> 1));
          v49 = *v47;
          v48 = v47 + 2;
          v44 += ~(v44 >> 1);
          if (*(_DWORD *)(v49 + 52) < *(_DWORD *)(*v40 + 52))
            v45 = (uint64_t)v48;
          else
            v44 = v46;
        }
        while (v44);
      }
      v50 = v45 - v42;
      v51 = (v45 - v42) >> 4;
      v52 = (_QWORD *)(v42 + ((v45 - v42) & 0xFFFFFFFFFFFFFFF0));
      v53 = *v110;
      if ((unint64_t)v41 >= *v110)
      {
        v63 = (v43 >> 4) + 1;
        if (v63 >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v64 = v53 - v42;
        v65 = (v53 - v42) >> 3;
        if (v65 > v63)
          v63 = v65;
        if (v64 >= 0x7FFFFFFFFFFFFFF0)
          v66 = 0xFFFFFFFFFFFFFFFLL;
        else
          v66 = v63;
        v115 = a2 + 2;
        if (v66)
          v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v66);
        else
          v67 = 0;
        v68 = (_OWORD *)(v66 + 16 * v51);
        cf = (CFTypeRef)v66;
        *(_QWORD *)&v113 = v68;
        *((_QWORD *)&v113 + 1) = v68;
        v114 = (const __CFArray *)(v66 + 16 * v67);
        if (v51 == v67)
        {
          if (v50 < 1)
          {
            if (v45 == v42)
              v70 = 1;
            else
              v70 = v50 >> 3;
            v117 = v115;
            v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v70);
            v73 = v113;
            v74 = *((_QWORD *)&v113 + 1) - v113;
            if (*((_QWORD *)&v113 + 1) == (_QWORD)v113)
            {
              v79 = vdupq_n_s64(v113);
              v76 = (unint64_t)&v71[16 * (v70 >> 2)];
            }
            else
            {
              v75 = v74 >> 4;
              v76 = (unint64_t)&v71[16 * (v70 >> 2) + (v74 & 0xFFFFFFFFFFFFFFF0)];
              v77 = 16 * v75;
              v78 = &v71[16 * (v70 >> 2)];
              do
              {
                *(_OWORD *)v78 = *(_OWORD *)v73;
                v78 += 16;
                *(_QWORD *)v73 = 0;
                *(_QWORD *)(v73 + 8) = 0;
                v73 += 16;
                v77 -= 16;
              }
              while (v77);
              v79 = (int64x2_t)v113;
            }
            v80 = v114;
            theArray[0] = (CFArrayRef)cf;
            cf = v71;
            *(_QWORD *)&v113 = &v71[16 * (v70 >> 2)];
            *(int64x2_t *)&theArray[1] = v79;
            *((_QWORD *)&v113 + 1) = v76;
            v114 = (const __CFArray *)&v71[16 * v72];
            theArray[3] = v80;
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)theArray);
            v68 = (_OWORD *)*((_QWORD *)&v113 + 1);
          }
          else
          {
            v69 = v51 + 2;
            if (v51 >= -1)
              v69 = v51 + 1;
            v68 -= v69 >> 1;
            *(_QWORD *)&v113 = v68;
            *((_QWORD *)&v113 + 1) = v68;
          }
        }
        *v68 = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        v81 = v113;
        v82 = (_OWORD *)(*((_QWORD *)&v113 + 1) + 16);
        *((_QWORD *)&v113 + 1) += 16;
        v83 = (_QWORD *)*a2;
        if ((_QWORD *)*a2 == v52)
        {
          v9 = v111;
          v23 = v108;
        }
        else
        {
          v84 = v52;
          v9 = v111;
          v23 = v108;
          do
          {
            v85 = *((_OWORD *)v84 - 1);
            v84 -= 2;
            *(_OWORD *)(v81 - 16) = v85;
            v81 -= 16;
            *v84 = 0;
            v84[1] = 0;
          }
          while (v84 != v83);
          v82 = (_OWORD *)*((_QWORD *)&v113 + 1);
        }
        *(_QWORD *)&v113 = v81;
        v86 = (_QWORD *)a2[1];
        if (v86 != v52)
        {
          do
          {
            *v82++ = *(_OWORD *)v52;
            *v52 = 0;
            v52[1] = 0;
            v52 += 2;
          }
          while (v52 != v86);
          v81 = v113;
          v52 = (_QWORD *)a2[1];
        }
        v87 = (const void *)*a2;
        *a2 = v81;
        a2[1] = (uint64_t)v82;
        v88 = (const __CFArray *)a2[2];
        a2[2] = (uint64_t)v114;
        *((_QWORD *)&v113 + 1) = v52;
        v114 = v88;
        cf = v87;
        *(_QWORD *)&v113 = v87;
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&cf);
      }
      else if (v52 == (_QWORD *)v41)
      {
        *v41 = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        a2[1] = (uint64_t)(v41 + 1);
        v9 = v111;
        v23 = v108;
      }
      else
      {
        theArray[2] = (CFArrayRef)(a2 + 2);
        *(_OWORD *)theArray = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        v54 = a2[1];
        v55 = v54 - 16;
        v56 = (_OWORD *)v54;
        v57 = v54 - 16;
        if (v54 >= 0x10)
        {
          do
          {
            *v56++ = *(_OWORD *)v57;
            *(_QWORD *)v57 = 0;
            *(_QWORD *)(v57 + 8) = 0;
            v57 += 16;
          }
          while (v57 < v54);
        }
        a2[1] = (uint64_t)v56;
        v9 = v111;
        if ((_QWORD *)v54 != v52 + 2)
        {
          v58 = 16 * ((uint64_t)(v54 - (_QWORD)(v52 + 2)) >> 4);
          v59 = v42 + 16 * v51 - 16;
          do
          {
            v55 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v55, (__int128 *)(v59 + v58)) - 16;
            v58 -= 16;
          }
          while (v58);
        }
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v42 + ((v45 - v42) & 0xFFFFFFFFFFFFFFF0), (__int128 *)theArray);
        v60 = (std::__shared_weak_count *)theArray[1];
        v23 = v108;
        if (theArray[1])
        {
          v61 = (unint64_t *)((char *)theArray[1] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      v39 += 8;
    }
    while (v39 != v8);
    v20 = a2[1];
  }
  v89 = *a2;
  if (*a2 != v20)
  {
    while (1)
    {
      v90 = *(const __CFDictionary **)(a1 + 448);
      if (!v90)
        break;
      v91 = *(_QWORD *)v89;
      v92 = *(_DWORD *)(*(_QWORD *)v89 + 36);
      cf = 0;
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(theArray, v90, CFSTR("input streams"), &cf);
      if (cf)
        CFRelease(cf);
      v93 = theArray[0];
      if (!theArray[0])
        break;
      if (CFArrayGetCount(theArray[0])
        && (AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id((AMCP::IOAudio2::Stream *)&cf, theArray, v92),
            (v94 = cf) != 0))
      {
        v95 = v93;
      }
      else
      {
        v96 = *(const __CFDictionary **)(a1 + 448);
        if (!v96)
          break;
        v118 = 0;
        applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&cf, v96, CFSTR("output streams"), &v118);
        v95 = (const __CFArray *)cf;
        theArray[0] = (CFArrayRef)cf;
        cf = v93;
        CFRelease(v93);
        if (v118)
          CFRelease(v118);
        if (!v95)
          break;
        if (CFArrayGetCount(v95))
        {
          AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id((AMCP::IOAudio2::Stream *)&cf, theArray, v92);
          v94 = cf;
        }
        else
        {
          v94 = 0;
        }
      }
      CFRelease(v95);
      v97 = *(const void **)(v91 + 40);
      *(_QWORD *)(v91 + 40) = v94;
      v98 = *(_DWORD *)(v91 + 32);
      if (v98)
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v118, *(std::__shared_mutex_base **)(*(_QWORD *)(**(_QWORD **)(v91 + 24) + 32) + 16), v98);
        v99 = v118;
        if (v118)
        {
          memset(theArray, 0, sizeof(theArray));
          LODWORD(v117) = 1065353216;
          AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&cf, **(_DWORD **)(*(_QWORD *)(v91 + 24) + 360));
          AMCP::IOAudio2::update_stream_core((uint64_t)theArray, (const applesauce::CF::DictionaryRef *)&cf, (CFDictionaryRef *)(v91 + 40), *(_DWORD *)(v91 + 36));
          IOConnectRelease((io_connect_t)cf);
          cf = v99 + 12;
          LOBYTE(v113) = 1;
          caulk::concurrent::shared_spin_lock::lock(v99 + 12);
          for (i = theArray[2]; i; i = *(CFArrayRef *)i)
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v99 + 2), (unsigned int *)(*((_QWORD *)i + 4) + 40), (_QWORD *)i + 4);
          std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
          cf = (CFTypeRef)0x676C6F626F776E72;
          LODWORD(v113) = 0;
          v99[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v99, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
          std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)theArray[2]);
          v101 = theArray[0];
          theArray[0] = 0;
          if (v101)
            operator delete(v101);
        }
        v102 = v119;
        v9 = v111;
        if (v119)
        {
          p_shared_owners = (unint64_t *)&v119->__shared_owners_;
          do
            v104 = __ldaxr(p_shared_owners);
          while (__stlxr(v104 - 1, p_shared_owners));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
      }
      else
      {
        v9 = v111;
        AMCP::IOAudio2::Stream::build_core((AMCP::IOAudio2::Stream *)v91);
      }
      if (v97)
        CFRelease(v97);
      v89 += 16;
      if (v89 == v20)
        goto LABEL_153;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_153:
  if (v23)
    operator delete(v23);
  if (v9)
    operator delete(v9);
}

void sub_1B590E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, io_connect_t connect, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&connect);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t applesauce::iokit::io_service_notifications::notification_callback_(uint64_t this, void *a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (this)
  {
    v7 = a3;
    v6 = a4;
    v5 = *(_QWORD *)(this + 40);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, void *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6, a4, a5);
  }
  return this;
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6973A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6973A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::operator()(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11[4];
  __int128 v12;
  uint64_t v13[2];
  int v14;
  int v15;
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a2 == -536870896)
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD **)(v2 + 64);
    v4 = *(_QWORD **)(v2 + 72);
    if (v3 != v4)
    {
      while (*v3 != *(_QWORD *)(result + 16))
      {
        if (++v3 == v4)
          return result;
      }
    }
    v16 = v3;
    if (v3 != v4)
    {
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_1E69A0170;
      *((_BYTE *)v5 + 24) = 0;
      v13[0] = (uint64_t)(v5 + 3);
      v13[1] = (uint64_t)v5;
      v14 = 0;
      v15 = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
      v7 = *(_DWORD *)(v2 + 48);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v11, v13);
      *(_QWORD *)&v12 = v2;
      *((_QWORD *)&v12 + 1) = &v16;
      v18 = 0;
      v8 = (char *)operator new(0x38uLL);
      *(_QWORD *)v8 = &off_1E696E878;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v8 + 8), v11);
      *(_OWORD *)(v8 + 40) = v12;
      v18 = v8;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v7, 9, (uint64_t)v17);
      v9 = v18;
      if (v18 == v17)
      {
        v10 = 4;
        v9 = v17;
      }
      else
      {
        if (!v18)
        {
LABEL_12:
          std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
          return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
        }
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_12;
    }
  }
  return result;
}

void sub_1B590E57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  if (!a2)
    _Unwind_Resume(exception_object);
  v17 = *(_QWORD **)(v15 - 48);
  if (v17 == (_QWORD *)(v15 - 72))
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 72);
  }
  else
  {
    if (!v17)
    {
LABEL_7:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
      JUMPOUT(0x1B590E54CLL);
    }
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
  goto LABEL_7;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target_type()
{
}

void AMCP::IOAudio2::Device::~Device(AMCP::IOAudio2::Device *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  io_connect_t *v8;
  uint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  int v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  const __CFString *v19;
  mach_port_t v20;
  void **v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  const __CFString *v31;
  mach_port_t v32;
  void **v33;
  int v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  const __CFString *v41;
  mach_port_t v42;
  void **v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  const void *v48;
  io_connect_t *v49;
  uint64_t v50;
  io_object_t v51;
  const void *v52;
  std::runtime_error *exception;
  void *__p[2];
  char v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint8_t buf[8];
  _BYTE v59[10];
  __int16 v60;
  int v61;
  __int16 v62;
  void **v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 61);
  v3 = *((_QWORD *)this + 60);
  while (v2 != v3)
    v2 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 61) = v3;
  v5 = *((_QWORD *)this + 57);
  for (i = *((_QWORD *)this + 58); i != v5; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 58) = v5;
  v7 = *((_QWORD *)this + 63);
  for (j = *((_QWORD *)this + 64); j != v7; j = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](j - 16))
    ;
  *((_QWORD *)this + 64) = v7;
  v8 = (io_connect_t *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v8)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v8);
  AMCP::Utility::Mach_Port::reset((AMCP::IOAudio2::Device *)((char *)this + 368));
  v9 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v9)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v9);
  v10 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)this + 32) + 16), *((_DWORD *)this + 4));
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v56, "com.apple.coreaudio", "AMCP");
  v12 = *(_DWORD *)(v56 + 16);
  switch(v12)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v35 = *(std::__shared_weak_count **)v59;
      v36 = **(NSObject ***)buf;
      if (*(_QWORD *)v59)
      {
        v37 = (unint64_t *)(*(_QWORD *)v59 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        v39 = pthread_self();
        v40 = pthread_mach_thread_np(v39);
        v41 = (const __CFString *)*((_QWORD *)this + 1);
        if (v41)
        {
          v42 = v40;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v41);
          if (v55 >= 0)
            v43 = __p;
          else
            v43 = (void **)__p[0];
          v44 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v42;
          *(_WORD *)v59 = 2080;
          *(_QWORD *)&v59[2] = "IOAudio2_Device.cpp";
          v60 = 1024;
          v61 = 117;
          v62 = 2080;
          v63 = v43;
          v64 = 1024;
          v65 = v44;
          v23 = v36;
          v24 = OS_LOG_TYPE_INFO;
          goto LABEL_50;
        }
LABEL_69:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = *(std::__shared_weak_count **)v59;
      v26 = **(NSObject ***)buf;
      if (*(_QWORD *)v59)
      {
        v27 = (unint64_t *)(*(_QWORD *)v59 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v29 = pthread_self();
        v30 = pthread_mach_thread_np(v29);
        v31 = (const __CFString *)*((_QWORD *)this + 1);
        if (v31)
        {
          v32 = v30;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v31);
          if (v55 >= 0)
            v33 = __p;
          else
            v33 = (void **)__p[0];
          v34 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v32;
          *(_WORD *)v59 = 2080;
          *(_QWORD *)&v59[2] = "IOAudio2_Device.cpp";
          v60 = 1024;
          v61 = 117;
          v62 = 2080;
          v63 = v33;
          v64 = 1024;
          v65 = v34;
          _os_log_debug_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down device '%s' with object id %u", buf, 0x28u);
LABEL_51:
          if (v55 < 0)
            operator delete(__p[0]);
          break;
        }
        goto LABEL_69;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v59;
      v14 = **(NSObject ***)buf;
      if (*(_QWORD *)v59)
      {
        v15 = (unint64_t *)(*(_QWORD *)v59 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        v19 = (const __CFString *)*((_QWORD *)this + 1);
        if (v19)
        {
          v20 = v18;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v19);
          if (v55 >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          v22 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v20;
          *(_WORD *)v59 = 2080;
          *(_QWORD *)&v59[2] = "IOAudio2_Device.cpp";
          v60 = 1024;
          v61 = 117;
          v62 = 2080;
          v63 = v21;
          v64 = 1024;
          v65 = v22;
          v23 = v14;
          v24 = OS_LOG_TYPE_DEFAULT;
LABEL_50:
          _os_log_impl(&dword_1B57BA000, v23, v24, "%6u %32s:%-5d Tore down device '%s' with object id %u", buf, 0x28u);
          goto LABEL_51;
        }
        goto LABEL_69;
      }
      break;
  }
  v45 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *(_QWORD *)buf = (char *)this + 504;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)this + 480;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = (char *)this + 456;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v48 = (const void *)*((_QWORD *)this + 56);
  if (v48)
    CFRelease(v48);
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::IOAudio2::Device *)((char *)this + 368));
  v49 = (io_connect_t *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v49)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v49);
  v50 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v50)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v50);
  v51 = *((_DWORD *)this + 86);
  if (v51)
    IOObjectRelease(v51);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::IOAudio2::Device *)((char *)this + 24));
  v52 = (const void *)*((_QWORD *)this + 1);
  if (v52)
    CFRelease(v52);
}

void sub_1B590EBE4(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Resampler2_Resampler::~Resampler2_Resampler(AMCP::DAL::Resampler2_Resampler *this)
{
  AMCP::DAL::Resampler2_Resampler::~Resampler2_Resampler(this);
  JUMPOUT(0x1B5E50688);
}

{
  void **v2;

  Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 30));
  v2 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

double AMCP::DAL::Resampler2_Resampler::process(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, double a5, double a6, double a7)
{
  unsigned __int8 *v14;
  double v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  int v20;
  AMCP::Log::Scope_Registry *v21;
  AMCP::Log::Scope_Registry *v22;
  uint64_t v23;
  AMCP::DAL::PCM_Data_Handler *v24;
  AMCP::Log::Scope_Registry *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  void *v46;
  NSObject *v47;
  _opaque_pthread_t *v48;
  mach_port_t v49;
  void *v50;
  NSObject *v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  void *exception;
  NSObject *v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  void *v58;
  NSObject *v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  void *v62;
  NSObject *v63;
  _opaque_pthread_t *v64;
  mach_port_t v65;
  void *v66;
  NSObject *v67;
  _opaque_pthread_t *v68;
  mach_port_t v69;
  void *v70;
  unsigned int v71;
  std::logic_error v72;
  std::string::size_type v73;
  std::logic_error v74;
  char v75;
  std::string v76;
  uint64_t (**v77)();
  std::string v78;
  std::string v79;
  std::logic_error v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *__p;
  __int16 v87;
  char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  _BYTE v92[28];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v51 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = pthread_self();
      v53 = pthread_mach_thread_np(v52);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v53;
      v87 = 2080;
      v88 = "Resampler2_Resampler.cpp";
      v89 = 1024;
      v90 = 47;
      v91 = 2080;
      *(_QWORD *)v92 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v79);
    std::logic_error::logic_error(&v72, &v79);
    v72.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v80, &v72);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = -1;
    v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v81 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
    *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v92[22] = 47;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v76.__r_.__value_.__l.__data_);
    v77 = off_1E69A20A0;
    v78 = v76;
    memset(&v76, 0, sizeof(v76));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v55 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      v56 = pthread_self();
      v57 = pthread_mach_thread_np(v56);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v57;
      v87 = 2080;
      v88 = "Resampler2_Resampler.cpp";
      v89 = 1024;
      v90 = 48;
      v91 = 2080;
      *(_QWORD *)v92 = "not (not source.empty())";
      _os_log_error_impl(&dword_1B57BA000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    v58 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v79);
    std::logic_error::logic_error(&v72, &v79);
    v72.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v80, &v72);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = -1;
    v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v81 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
    *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v92[22] = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v76.__r_.__value_.__l.__data_);
    v77 = off_1E69A20A0;
    v78 = v76;
    memset(&v76, 0, sizeof(v76));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v58, (uint64_t)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale ratio");
  v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
  if (v14)
    v15 = AMCP::Thing::convert_to<double>((uint64_t)(v14 + 40));
  else
    v15 = 1.0;
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v16 = a7 - a6;
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *(uint64_t **)(a1 + 104);
  if (v17 != v18)
  {
    v19 = vcvtmd_s64_f64(v16);
    v20 = vcvtmd_s64_f64(a5);
    do
    {
      Resampler2::SetVarispeedRate(*v17, v15);
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        LODWORD(__p) = v20;
        LODWORD(v80.__vftable) = 100 * v20;
        v21 = (AMCP::Log::Scope_Registry *)Resampler2::PreFlight(**(Resampler2 ***)(a1 + 96), (unsigned int *)&__p, (unsigned int *)&v80);
        if (!LODWORD(v80.__vftable))
        {
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          v43 = *(NSObject **)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = pthread_self();
            v45 = pthread_mach_thread_np(v44);
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v45;
            v87 = 2080;
            v88 = "Resampler2_Resampler.cpp";
            v89 = 1024;
            v90 = 60;
            v91 = 2080;
            *(_QWORD *)v92 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
          v46 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v79);
          std::logic_error::logic_error(&v72, &v79);
          v72.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v80, &v72);
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = -1;
          v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v81 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
          *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<flo"
                               "at> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
          *(_DWORD *)&v92[22] = 60;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v76.__r_.__value_.__l.__data_);
          v77 = off_1E69A20A0;
          v78 = v76;
          memset(&v76, 0, sizeof(v76));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v46, (uint64_t)&__p);
        }
        v16 = (double)LODWORD(v80.__vftable);
      }
      else
      {
        LODWORD(__p) = v19;
        LODWORD(v80.__vftable) = 100 * v19;
        v22 = (AMCP::Log::Scope_Registry *)Resampler2::PreFlight(**(Resampler2 ***)(a1 + 96), (unsigned int *)&v80, (unsigned int *)&__p);
        v23 = LODWORD(v80.__vftable);
        if (vabdd_f64((double)LODWORD(v80.__vftable), a5) > 1.0)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          v47 = *(NSObject **)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            v48 = pthread_self();
            v49 = pthread_mach_thread_np(v48);
            LODWORD(__p) = 67110402;
            HIDWORD(__p) = v49;
            v87 = 2080;
            v88 = "Resampler2_Resampler.cpp";
            v89 = 1024;
            v90 = 66;
            v91 = 2080;
            *(_QWORD *)v92 = "not (std::abs(static_cast<double>(actual_input_consumed) - number_of_samples.get_double()) <= 1.0)";
            *(_WORD *)&v92[8] = 2048;
            *(_QWORD *)&v92[10] = v23;
            *(_WORD *)&v92[18] = 2048;
            *(double *)&v92[20] = a5;
            _os_log_error_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s process failed: %llu < %f", (uint8_t *)&__p, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
          v50 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"process failed: %llu < %f", (uint64_t)&v79, v23, *(_QWORD *)&a5);
          std::logic_error::logic_error(&v72, &v79);
          v72.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v80, &v72);
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = -1;
          v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v81 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
          *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<flo"
                               "at> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
          *(_DWORD *)&v92[22] = 66;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v76.__r_.__value_.__l.__data_);
          v77 = off_1E69A20A0;
          v78 = v76;
          memset(&v76, 0, sizeof(v76));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v50, (uint64_t)&__p);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v24 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v79, v24, a6, a6 + v16);
  v26 = *a3;
  if (*a3)
  {
    v27 = *(_DWORD *)(v26 + 20);
    v28 = *(_DWORD *)(v26 + 36);
  }
  else
  {
    LOBYTE(v27) = 0;
    v28 = 0;
  }
  if ((v27 & 0x20) != 0)
    v29 = 1;
  else
    v29 = v28;
  v30 = a2[1] - *a2;
  v31 = v30 >> 4;
  if (v30 >> 4 != (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v59 = *(NSObject **)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v60 = pthread_self();
      v61 = pthread_mach_thread_np(v60);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v61;
      v87 = 2080;
      v88 = "Resampler2_Resampler.cpp";
      v89 = 1024;
      v90 = 75;
      v91 = 2080;
      *(_QWORD *)v92 = "not (stream_count == dest.size())";
      _os_log_error_impl(&dword_1B57BA000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    v62 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v76);
    std::logic_error::logic_error(&v74, &v76);
    v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v80, &v74);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = -1;
    v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v81 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
    *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v92[22] = 75;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
    v77 = off_1E69A20A0;
    *(std::logic_error *)&v78.__r_.__value_.__l.__data_ = v72;
    v78.__r_.__value_.__r.__words[2] = v73;
    v72.__vftable = 0;
    v72.__imp_.__imp_ = 0;
    v73 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v62, (uint64_t)&__p);
  }
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
  {
    if (v29 != 1)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v63 = *(NSObject **)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        v64 = pthread_self();
        v65 = pthread_mach_thread_np(v64);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v65;
        v87 = 2080;
        v88 = "Resampler2_Resampler.cpp";
        v89 = 1024;
        v90 = 108;
        v91 = 2080;
        *(_QWORD *)v92 = "not (number_of_channels == 1)";
        _os_log_error_impl(&dword_1B57BA000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
      v66 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v76);
      std::logic_error::logic_error(&v74, &v76);
      v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v80, &v74);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = -1;
      v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v81 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
      *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> "
                           "&, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
      *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
      *(_DWORD *)&v92[22] = 108;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
      v77 = off_1E69A20A0;
      *(std::logic_error *)&v78.__r_.__value_.__l.__data_ = v72;
      v78.__r_.__value_.__r.__words[2] = v73;
      v72.__vftable = 0;
      v72.__imp_.__imp_ = 0;
      v73 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v66, (uint64_t)&__p);
    }
    if (v26)
    {
      v37 = *(_DWORD *)(v26 + 20);
      LODWORD(v26) = *(_DWORD *)(v26 + 36);
    }
    else
    {
      LOBYTE(v37) = 0;
    }
    if ((v37 & 0x20) != 0)
      v26 = v26;
    else
      v26 = 1;
    if (v31 != v26)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v67 = *(NSObject **)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v68 = pthread_self();
        v69 = pthread_mach_thread_np(v68);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v69;
        v87 = 2080;
        v88 = "Resampler2_Resampler.cpp";
        v89 = 1024;
        v90 = 109;
        v91 = 2080;
        *(_QWORD *)v92 = "not (stream_count == dest_container.get_format().GetNumberChannelStreams())";
        _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
      v70 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v76);
      std::logic_error::logic_error(&v74, &v76);
      v74.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v80, &v74);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = -1;
      v80.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v81 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v80);
      *(_QWORD *)&v92[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> "
                           "&, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
      *(_QWORD *)&v92[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
      *(_DWORD *)&v92[22] = 109;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
      v77 = off_1E69A20A0;
      *(std::logic_error *)&v78.__r_.__value_.__l.__data_ = v72;
      v78.__r_.__value_.__r.__words[2] = v73;
      v72.__vftable = 0;
      v72.__imp_.__imp_ = 0;
      v73 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v77);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v70, (uint64_t)&__p);
    }
    LODWORD(__p) = vcvtmd_s64_f64(a5);
    LODWORD(v80.__vftable) = vcvtmd_s64_f64(v16);
    if ((unint64_t)v30 >= 0x20)
    {
      v38 = 0;
      v39 = 0;
      if (v31 >> 1 <= 1)
        v40 = 1;
      else
        v40 = v31 >> 1;
      do
      {
        v41 = *(_QWORD *)(a1 + 96);
        if (v39 >= (*(_QWORD *)(a1 + 104) - v41) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        Resampler2::PushConvert(*(Resampler2 **)(v41 + 8 * v39++), *(const float **)(*a2 + v38), *(const float **)(*a2 + v38 + 16), *(float **)(v79.__r_.__value_.__r.__words[0] + v38), *(float **)(v79.__r_.__value_.__r.__words[0] + v38 + 16), (unsigned int *)&__p, (unsigned int *)&v80, 1, 1u, v71);
        v38 += 32;
      }
      while (v40 != v39);
    }
    if ((v30 & 0x10) != 0)
      Resampler2::PushConvert(*(Resampler2 **)(*(_QWORD *)(a1 + 104) - 8), *(const float **)(*a2 + 16 * v31 - 16), 0, *(float **)(v79.__r_.__value_.__r.__words[0] + 16 * v31 - 16), 0, (unsigned int *)&__p, (unsigned int *)&v80, 1, 1u, v71);
  }
  else
  {
    if (v29 >= 2)
    {
      v32 = 0;
      v33 = 0;
      v34 = vcvtmd_s64_f64(a5);
      v35 = vcvtmd_s64_f64(v16);
      do
      {
        LODWORD(__p) = v34;
        LODWORD(v80.__vftable) = v35;
        v36 = *(_QWORD *)(a1 + 96);
        if (v33 >= (*(_QWORD *)(a1 + 104) - v36) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        Resampler2::PushConvert(*(Resampler2 **)(v36 + v32), (const float *)(*(_QWORD *)*a2 + v32), (const float *)(*(_QWORD *)*a2 + v32 + 4), (float *)(*(_QWORD *)v79.__r_.__value_.__l.__data_ + v32), (float *)(*(_QWORD *)v79.__r_.__value_.__l.__data_ + v32 + 4), (unsigned int *)&__p, (unsigned int *)&v80, v29, v29, v71);
        ++v33;
        v32 += 8;
      }
      while (8 * (v29 >> 1) != v32);
    }
    if ((v29 & 1) != 0)
    {
      LODWORD(__p) = vcvtmd_s64_f64(a5);
      LODWORD(v80.__vftable) = vcvtmd_s64_f64(v16);
      Resampler2::PushConvert(*(Resampler2 **)(*(_QWORD *)(a1 + 104) - 8), (const float *)(*(_QWORD *)*a2 + 4 * (v29 - 1)), 0, (float *)(*(_QWORD *)v79.__r_.__value_.__l.__data_ + 4 * (v29 - 1)), 0, (unsigned int *)&__p, (unsigned int *)&v80, v29, v29, v71);
    }
  }
  if (v79.__r_.__value_.__r.__words[0])
  {
    v79.__r_.__value_.__l.__size_ = v79.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v79.__r_.__value_.__l.__data_, (uint64_t)(v79.__r_.__value_.__r.__words[2] - v79.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1B590FC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,caulk::rt_safe_memory_resource *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47)
{
  if (a31)
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a31, (a33 - (uint64_t)a31) >> 4);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Resampler2_Resampler::get_required_input_samples_for_output_samples(Resampler2 ***this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  v4 = a2;
  v3 = 100 * a2;
  Resampler2::PreFlight(*this[12], &v3, &v4);
  return v3;
}

uint64_t AMCP::DAL::Resampler2_Resampler::get_expected_output_samples_for_input_samples(Resampler2 ***this, unsigned int a2, unint64_t *a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v5 = 100 * a2;
  v6 = a2;
  Resampler2::PreFlight(*this[12], &v6, &v5);
  result = v5;
  *a3 = v6;
  return result;
}

unint64_t AMCP::DAL::Resampler2_Resampler::get_latency(AMCP::DAL::Resampler2_Resampler *this)
{
  uint64_t v1;
  double v2;

  v1 = **((_QWORD **)this + 12);
  if ((*(_DWORD *)(v1 + 112) | 2) != 2)
    return 0;
  v2 = 0.5;
  if (*(_DWORD *)(v1 + 108) != 1818848869)
    v2 = *(double *)(v1 + 160) + (double)*(int *)(*(_QWORD *)(v1 + 48) + 20);
  return (unint64_t)(v2 / *(double *)(v1 + 88));
}

void std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  Resampler2 **v2;
  Resampler2 **v4;
  void *v5;

  v1 = *a1;
  v2 = (Resampler2 **)**a1;
  if (v2)
  {
    v4 = (Resampler2 **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Resampler2>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Resampler2 *std::unique_ptr<Resampler2>::reset[abi:ne180100](Resampler2 **a1)
{
  Resampler2 *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    Resampler2::~Resampler2(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t AMCP::Thing::convert_to<AMCP::Resampler_Quality>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5910484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[183];
}

void HALS_IOStreamInfo::~HALS_IOStreamInfo(HALS_IOStreamInfo *this)
{
  HALS_IOStreamInfo::~HALS_IOStreamInfo(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E69A0E78;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 34) = v3;
    operator delete(v3);
  }
  if (*((_BYTE *)this + 248))
  {
    v4 = (void *)*((_QWORD *)this + 28);
    if (v4)
    {
      *((_QWORD *)this + 29) = v4;
      operator delete(v4);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 22));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 18));
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
}

uint64_t HALS_IOStreamInfo::write_to_hosted_dsp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;

  HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v11, 1869968496, a2, a1, a3);
  if (v11 != 1869968496)
    return 0;
  v3 = *(uint64_t **)(v13 + 112);
  v4 = *(uint64_t **)(v13 + 120);
  if (v3 == v4)
    return 0;
  result = 0;
  do
  {
    v6 = *v3;
    if (*v3)
    {
      if (*(_BYTE *)(v6 + 751))
      {
        v7 = *((_DWORD *)v3 + 6);
        v8 = *(_DWORD *)(v6 + 672);
        v14 = v3[2];
        v15 = 0;
        v16 = v7;
        v17 = v8;
        v9 = *(_QWORD *)(v6 + 8);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v9 + 792))(v9, v10, *((unsigned int *)v3 + 24), v17, *v3, &v14);
      }
    }
    v3 += 16;
  }
  while (v3 != v4);
  return result;
}

uint64_t HALS_IOStreamInfo::write_to_engine(HALS_IOStreamInfo *this, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (!*((_DWORD *)this + 27)
    || ((v4 = (_QWORD *)*((_QWORD *)this + 14), *((_QWORD **)this + 15) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    v4 = (_QWORD *)((char *)this + 408);
  }
  v6 = *v4;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v6 + 751))
    {
      v8 = *((_DWORD *)this + 6);
      v9 = *(_DWORD *)(v6 + 672);
      v10 = *((_QWORD *)this + 2);
      v11 = 0;
      v12 = v8;
      v13 = v9;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, a2, *((unsigned int *)this + 3));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HALS_IOUADriver::Activate(HALS_IOUADriver *this)
{
  uint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  mach_port_t v5;
  mach_port_t MachPort;
  AMCP::Log::Scope_Registry *v7;
  int v8;
  mach_port_t v9;
  mach_port_t v10;
  AMCP::Log::Scope_Registry *v11;
  HALS_Object *v12;
  int v13;
  HALS_Client *v14;
  const AudioObjectPropertyAddress *v15;
  HALS_Client *v16;
  const AudioObjectPropertyAddress *v17;
  const AudioObjectPropertyAddress *v18;
  const AudioObjectPropertyAddress *v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  void *exception;
  int v33;
  NSObject *v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *v37;
  NSObject *v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  void *v41;
  NSObject *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::runtime_error v48;
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;
  std::runtime_error v52;
  _BYTE v53[24];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t (**v59)();
  __int16 v60;
  _BYTE v61[14];
  __int128 v62;
  const char *v63;
  int v64;
  _BYTE reference[40];
  const char *v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 99);
  v3 = (AMCP::Log::Scope_Registry *)IOServiceOpen(*(_DWORD *)v2, *MEMORY[0x1E0C83DA0], 0x43417564u, (io_connect_t *)(v2 + 4));
  if ((_DWORD)v3)
  {
    v28 = (int)v3;
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)reference, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)reference;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)reference);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)reference = 67110146;
      *(_DWORD *)&reference[4] = v31;
      *(_WORD *)&reference[8] = 2080;
      *(_QWORD *)&reference[10] = "HALS_IOUAUCDriver.cpp";
      *(_WORD *)&reference[18] = 1024;
      *(_DWORD *)&reference[20] = 49;
      *(_WORD *)&reference[24] = 2080;
      *(_QWORD *)&reference[26] = "error";
      *(_WORD *)&reference[34] = 1024;
      *(_DWORD *)&reference[36] = v28;
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to open connection %u", reference, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v48, "failed to open connection");
    std::runtime_error::runtime_error((std::runtime_error *)&v59, &v48);
    v62 = 0uLL;
    v63 = 0;
    v64 = -1;
    v59 = &off_1E69A1FB8;
    *(_QWORD *)&v61[6] = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)reference, (uint64_t)&v59);
    *(_QWORD *)&reference[32] = "void HALS_IOUAUCDriver::Activate()";
    v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v67 = 49;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v50);
    *(_QWORD *)v53 = off_1E69A20A0;
    *(_OWORD *)&v53[8] = *(_OWORD *)v50;
    v54 = *(_QWORD *)&v50[16];
    memset(v50, 0, sizeof(v50));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)reference, (uint64_t)v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)reference);
  }
  v4 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v2 + 4), 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if ((_DWORD)v4)
  {
    v33 = (int)v4;
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)reference, "com.apple.coreaudio", "AMCP");
    v34 = **(NSObject ***)reference;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)reference);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)reference = 67110146;
      *(_DWORD *)&reference[4] = v36;
      *(_WORD *)&reference[8] = 2080;
      *(_QWORD *)&reference[10] = "HALS_IOUAUCDriver.cpp";
      *(_WORD *)&reference[18] = 1024;
      *(_DWORD *)&reference[20] = 54;
      *(_WORD *)&reference[24] = 2080;
      *(_QWORD *)&reference[26] = "ret != kIOReturnSuccess";
      *(_WORD *)&reference[34] = 1024;
      *(_DWORD *)&reference[36] = v33;
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to open connection %u", reference, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    v37 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v48, "failed to open connection");
    std::runtime_error::runtime_error((std::runtime_error *)&v59, &v48);
    v62 = 0uLL;
    v63 = 0;
    v64 = -1;
    v59 = &off_1E69A1FB8;
    *(_QWORD *)&v61[6] = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)reference, (uint64_t)&v59);
    *(_QWORD *)&reference[32] = "void HALS_IOUAUCDriver::Activate()";
    v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v67 = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v50);
    *(_QWORD *)v53 = off_1E69A20A0;
    *(_OWORD *)&v53[8] = *(_OWORD *)v50;
    v54 = *(_QWORD *)&v50[16];
    memset(v50, 0, sizeof(v50));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)reference, (uint64_t)v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v37, (uint64_t)reference);
  }
  *(_QWORD *)&reference[8] = HALS_IOUAUCDriver::properties_changed_callback;
  *(_QWORD *)&reference[16] = v2;
  v5 = *(_DWORD *)(v2 + 4);
  MachPort = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v2 + 328));
  v7 = (AMCP::Log::Scope_Registry *)IOConnectCallAsyncMethod(v5, 2u, MachPort, (uint64_t *)reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
  v8 = (int)v7;
  if ((_DWORD)v7)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v59, "com.apple.coreaudio", "AMCP");
    v38 = *v59;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      LODWORD(v59) = 67110146;
      HIDWORD(v59) = v40;
      v60 = 2080;
      *(_QWORD *)v61 = "HALS_IOUAUCDriver.cpp";
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = 64;
      LOWORD(v62) = 2080;
      *(_QWORD *)((char *)&v62 + 2) = "ret != kIOReturnSuccess";
      WORD5(v62) = 1024;
      HIDWORD(v62) = v8;
      _os_log_error_impl(&dword_1B57BA000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to set properties changed async callback %u", (uint8_t *)&v59, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    v41 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v52, "Failed to set properties changed async callback");
    std::runtime_error::runtime_error((std::runtime_error *)v53, &v52);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    *(_QWORD *)v53 = &off_1E69A1FB8;
    *(_QWORD *)&v53[16] = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v59, (uint64_t)v53);
    *((_QWORD *)&v62 + 1) = "void HALS_IOUAUCDriver::Activate()";
    v63 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v64 = 64;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    *(_QWORD *)v50 = off_1E69A20A0;
    *(std::runtime_error *)&v50[8] = v48;
    v51 = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v59, (uint64_t)v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v41, (uint64_t)&v59);
  }
  *(_QWORD *)&reference[8] = HALS_IOUAUCDriver::request_config_change_callback;
  *(_QWORD *)&reference[16] = v2;
  v9 = *(_DWORD *)(v2 + 4);
  v10 = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v2 + 656));
  v11 = (AMCP::Log::Scope_Registry *)IOConnectCallAsyncMethod(v9, 3u, v10, (uint64_t *)reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
  v13 = (int)v11;
  if ((_DWORD)v11)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v59, "com.apple.coreaudio", "AMCP");
    v42 = *v59;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      v43 = pthread_self();
      v44 = pthread_mach_thread_np(v43);
      LODWORD(v59) = 67110146;
      HIDWORD(v59) = v44;
      v60 = 2080;
      *(_QWORD *)v61 = "HALS_IOUAUCDriver.cpp";
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = 74;
      LOWORD(v62) = 2080;
      *(_QWORD *)((char *)&v62 + 2) = "ret != kIOReturnSuccess";
      WORD5(v62) = 1024;
      HIDWORD(v62) = v13;
      _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to set request config change async callback %u", (uint8_t *)&v59, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    v45 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v52, "Failed to set request config change async callback");
    std::runtime_error::runtime_error((std::runtime_error *)v53, &v52);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    *(_QWORD *)v53 = &off_1E69A1FB8;
    *(_QWORD *)&v53[16] = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v59, (uint64_t)v53);
    *((_QWORD *)&v62 + 1) = "void HALS_IOUAUCDriver::Activate()";
    v63 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v64 = 74;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    *(_QWORD *)v50 = off_1E69A20A0;
    *(std::runtime_error *)&v50[8] = v48;
    v51 = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v59, (uint64_t)v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v45, (uint64_t)&v59);
  }
  HALS_Object::Activate(this, v12);
  (*(void (**)(char *))(*((_QWORD *)this + 41) + 24))((char *)this + 328);
  HALS_IOUADriver::RebuildDeviceList((HALS_IOUADriver *)&v59, (uint64_t)this);
  HALS_IOUADriver::RebuildClockDeviceList(this);
  HALS_IOUADriver::RebuildBoxList(this);
  memset(reference, 0, 32);
  if (HALS_DeviceManager::GetNumberDevices(this, 0, v14))
  {
    strcpy(v53, "#vedbolg");
    v53[9] = 0;
    *(_WORD *)&v53[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)reference, (AudioObjectPropertyAddress *)v53, v15);
  }
  if (HALS_DeviceManager::GetNumberBoxes(this, 0))
  {
    strcpy(v53, "#xobbolg");
    v53[9] = 0;
    *(_WORD *)&v53[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)reference, (AudioObjectPropertyAddress *)v53, v17);
  }
  if (HALS_DeviceManager::GetNumberClockDevices(this, v16))
  {
    strcpy(v53, "#klcbolg");
    v53[9] = 0;
    *(_WORD *)&v53[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)reference, (AudioObjectPropertyAddress *)v53, v18);
  }
  if (HALS_DeviceManager::GetNumberBoxes(this, 0))
  {
    strcpy(v53, "#xobbolg");
    v53[9] = 0;
    *(_WORD *)&v53[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)reference, (AudioObjectPropertyAddress *)v53, v19);
  }
  v20 = *(void **)reference;
  v21 = -1431655765 * ((*(_QWORD *)&reference[8] - *(_QWORD *)reference) >> 2);
  if ((_DWORD)v21)
  {
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, v21, *(const AudioObjectPropertyAddress **)reference);
    v46 = 0;
    v47 = 0;
    HALS_System::GetInstance(v53, 0, &v46);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_PlatformBehaviors **)v53, (uint64_t)&v59);
    v22 = *(std::__shared_weak_count **)&v53[8];
    if (*(_QWORD *)&v53[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&v53[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v20 = *(void **)reference;
  }
  if (v20)
    operator delete(v20);
  if (v59)
    operator delete(v59);
}

void sub_1B59110D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;
  void *v30;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v29 = *(void **)(v27 - 128);
  if (v29)
    operator delete(v29);
  v30 = *(void **)(v27 - 192);
  if (v30)
    operator delete(v30);
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::~HALS_IOUADriver(HALS_IOUADriver *this)
{
  HALS_IOUADriver::~HALS_IOUADriver(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;
  void *v4;
  HALS_Object *v5;

  *(_QWORD *)this = off_1E6973FD0;
  *((_QWORD *)this + 41) = &unk_1E6974110;
  v2 = (void *)*((_QWORD *)this + 107);
  if (v2)
  {
    *((_QWORD *)this + 108) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 104);
  if (v3)
  {
    *((_QWORD *)this + 105) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  if (v4)
  {
    *((_QWORD *)this + 102) = v4;
    operator delete(v4);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUADriver *)((char *)this + 472));
  HALB_Mutex::~HALB_Mutex((HALS_IOUADriver *)((char *)this + 376));
  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUADriver *)((char *)this + 328), v5);
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_IOUADriver *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_IOUADriver::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t HALS_IOUADriver::GetCommandGate(HALS_IOUADriver *this)
{
  return (uint64_t)this + 376;
}

{
  return (uint64_t)this + 376;
}

uint64_t HALS_IOUADriver::GetMIGDispatchQueue(HALS_IOUADriver *this)
{
  return (uint64_t)this + 472;
}

{
  return (uint64_t)this + 472;
}

uint64_t HALS_IOUADriver::HasProperty(HALS_IOUADriver *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (a3->mSelector == 1668641652)
    return *((_QWORD *)this + 45) != *((_QWORD *)this + 44);
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a4))
    return 1;
  return (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 41) + 16))((char *)this + 328, a3->mSelector);
}

uint64_t HALS_IOUADriver::IsPropertySettable(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  const AudioObjectPropertyAddress *v8;
  HALS_Client *v9;

  if (a3->mSelector == 1668641652)
    return 0;
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a4))
    return HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3);
  return HALS_IOUAObject::IsPropertySettable((HALS_IOUADriver *)((char *)this + 328), a3, v8, v9);
}

uint64_t HALS_IOUADriver::GetPropertyDataSize(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  const AudioObjectPropertyAddress *v13;
  uint64_t v14;
  const void *v15;
  HALS_Client *v16;

  if (a3->mSelector == 1668641652)
    return (*((_DWORD *)this + 90) - *((_DWORD *)this + 88)) & 0xFFFFFFFC;
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a6))
    return HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUADriver *)((char *)this + 328), a3, v13, v14, v15, v16);
}

void HALS_IOUADriver::GetPropertyData(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, char *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;

  if (a3->mSelector == 1668641652)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 2) >= a4 / 0xCuLL)
      v13 = a4 / 0xCuLL;
    else
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 2);
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = *((_QWORD *)this + 44);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 45) - v16) >> 2) > v15)
        {
          v17 = &a6[v14];
          v18 = (uint64_t *)(v16 + v14);
          v19 = *v18;
          *((_DWORD *)v17 + 2) = *((_DWORD *)v18 + 2);
          *(_QWORD *)v17 = v19;
        }
        ++v15;
        v14 += 12;
      }
      while (12 * v13 != v14);
    }
    a5->mSelector = 12 * v13;
  }
  else if (HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(*((_QWORD *)this + 99) + 4), a3, 1u))
  {
    v27 = a4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(*((_QWORD *)this + 99) + 4), a3, 1u, a8, a7, a6, &v27);
    a5->mSelector = v27;
  }
  else if (HALS_DeviceManager::HasProperty(this, a2, a3, a9))
  {
    HALS_DeviceManager::GetPropertyData(this, (uint64_t)a2, a3, a4, &a5->mSelector, (uint64_t *)a6, a7, (const __CFString **)a8, a9);
  }
  else
  {
    HALS_IOUAObject::GetPropertyData((HALS_IOUADriver *)((char *)this + 328), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)a6, (unsigned int *)a8, v24, v25, v26, a9);
  }
}

void HALS_IOUADriver::SetPropertyData(HALS_IOUADriver *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, CFTypeRef *a7, HALS_Client *a8)
{
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  HALS_Client *v18;

  if (HALS_DeviceManager::HasProperty(this, a2, a3, a8))
    HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v14, (uint64_t)v15, v16, (uint64_t)v17, (uint64_t)a8);
  HALS_IOUAObject::SetPropertyData((HALS_IOUADriver *)((char *)this + 328), &a3->mSelector, a5, a7, v15, v16, v17, v18);
}

uint64_t HALS_DeviceManager::DoAnyQueuesHaveWorkAfterFlush(HALS_DeviceManager *this)
{
  return 0;
}

void HALS_IOUADriver::_CopyBoxList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 856);
  v3 = *(HALS_ObjectMap ***)(a1 + 864);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUADriver::_CopyClockDeviceList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 832);
  v3 = *(HALS_ObjectMap ***)(a1 + 840);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUADriver::_CopyIODeviceList(_QWORD *a1, void **a2)
{
  void **v2;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v6;
  unint64_t v7;
  HALS_ObjectMap **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  HALS_ObjectMap **v14;
  char *v15;
  char *v16;
  HALS_ObjectMap *v17;
  HALS_ObjectMap **v18;
  HALS_ObjectMap **j;
  HALS_ObjectMap *v20;
  unint64_t v21;
  HALS_ObjectMap **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  HALS_ObjectMap **v28;
  char *v29;
  char *v30;
  HALS_ObjectMap *v31;

  v2 = a2;
  v4 = (HALS_ObjectMap **)a1[104];
  for (i = (HALS_ObjectMap **)a1[105]; v4 != i; ++v4)
  {
    HALS_ObjectMap::RetainObject(*v4, (HALS_Object *)a2);
    v6 = *v4;
    v8 = (HALS_ObjectMap **)v2[1];
    v7 = (unint64_t)v2[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - (_BYTE *)*v2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
LABEL_38:
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)*v2;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      else
        a2 = 0;
      v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *v14 = v6;
      v9 = v14 + 1;
      v16 = (char *)*v2;
      v15 = (char *)v2[1];
      if (v15 != *v2)
      {
        do
        {
          v17 = (HALS_ObjectMap *)*((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v14 = v17;
        }
        while (v15 != v16);
        v15 = (char *)*v2;
      }
      *v2 = v14;
      v2[1] = v9;
      v2[2] = (void *)(v13 + 8 * (_QWORD)a2);
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    v2[1] = v9;
  }
  v18 = (HALS_ObjectMap **)a1[101];
  for (j = (HALS_ObjectMap **)a1[102]; v18 != j; ++v18)
  {
    HALS_ObjectMap::RetainObject(*v18, (HALS_Object *)a2);
    v20 = *v18;
    v22 = (HALS_ObjectMap **)v2[1];
    v21 = (unint64_t)v2[2];
    if ((unint64_t)v22 >= v21)
    {
      v24 = ((char *)v22 - (_BYTE *)*v2) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        goto LABEL_38;
      v25 = v21 - (_QWORD)*v2;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      else
        a2 = 0;
      v28 = (HALS_ObjectMap **)(v27 + 8 * v24);
      *v28 = v20;
      v23 = v28 + 1;
      v30 = (char *)*v2;
      v29 = (char *)v2[1];
      if (v29 != *v2)
      {
        do
        {
          v31 = (HALS_ObjectMap *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != v30);
        v29 = (char *)*v2;
      }
      *v2 = v28;
      v2[1] = v23;
      v2[2] = (void *)(v27 + 8 * (_QWORD)a2);
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v22 = v20;
      v23 = v22 + 1;
    }
    v2[1] = v23;
  }
}

void HALS_IOUADriver::_CopyDeviceList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 808);
  v3 = *(HALS_ObjectMap ***)(a1 + 816);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void `non-virtual thunk to'HALS_IOUADriver::~HALS_IOUADriver(HALS_IOUADriver *this)
{
  HALS_IOUADriver::~HALS_IOUADriver((HALS_IOUADriver *)((char *)this - 328));
}

{
  HALS_IOUADriver::~HALS_IOUADriver((HALS_IOUADriver *)((char *)this - 328));
  JUMPOUT(0x1B5E50688);
}

void HALS_IOUADriver::RebuildDeviceList(HALS_IOUADriver *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t PropertySize;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::vector<unsigned int>::pointer begin;
  int64_t v13;
  HALS_ObjectMap **v14;
  HALS_ObjectMap **v15;
  unsigned int v16;
  HALS_ObjectMap **v17;
  uint64_t v18;
  HALS_ObjectMap **v19;
  HALS_ObjectMap **v20;
  unsigned int v21;
  std::vector<unsigned int>::pointer v22;
  int64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v28;
  int *v29;
  int v30;
  HALS_Object *v31;
  HALS_Device *v32;
  HALB_Mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  HALS_Object *v37;
  HALS_ObjectMap *v38;
  uint64_t v39;
  int v40;
  HALS_Object *v41;
  const __CFString *v42;
  HALS_IOUADriver *v43;
  HALB_Mutex *v44;
  int v45;
  unint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  int v55;
  HALS_Object *v56;
  uint64_t v57;
  uint64_t v58;
  HALS_IOUADriver *v59;
  CFTypeRef cf;
  HALS_ObjectMap **v61;
  HALS_ObjectMap **v62;
  uint64_t v63;
  std::vector<unsigned int> v64;
  _QWORD v65[6];
  unint64_t v66[7];
  _QWORD v67[3];
  int v68;
  __int128 v69;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)(a2 + 792);
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v4 + 4), (const AudioObjectPropertyAddress *)"#vedbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v64, PropertySize >> 2);
  v66[0] = (char *)v64.__end_ - (char *)v64.__begin_;
  v59 = this;
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v4 + 4), (const AudioObjectPropertyAddress *)"#vedbolg", 1u, 0, 0, v64.__begin_, v66);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)a2, (HALS_DeviceManager::BasicDeviceList *)&v61, 1, 0);
  v6 = (char *)v64.__end_ - (char *)v64.__begin_;
  v7 = operator new[]();
  v8 = v7;
  v9 = (v6 >> 2);
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = 0;
    begin = v64.__begin_;
    v13 = v64.__end_ - v64.__begin_;
    v14 = v61;
    v15 = v62;
    do
    {
      if (v10 == v13)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v16 = begin[v10];
      v17 = v14;
      while (v17 != v15)
      {
        v18 = (uint64_t)*v17++;
        if (v16 == *(_DWORD *)(v18 + 1320))
          goto LABEL_9;
      }
      *(_DWORD *)(v7 + 4 * v11) = v16;
      v11 = (v11 + 1);
LABEL_9:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v11 = 0;
  }
  v57 = operator new[]();
  v19 = v61;
  v20 = v62;
  if (v61 != v62)
  {
    v21 = 0;
    v22 = v64.__begin_;
    v23 = v64.__end_ - v64.__begin_;
    do
    {
      v24 = *((_DWORD *)*v19 + 330);
      if ((v6 & 0x3FFFFFFFCLL) == 0)
        goto LABEL_23;
      v25 = 0;
      do
      {
        if (v23 == v25)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v26 = v22[v25++];
      }
      while (v24 != v26 && v25 < v9);
      if (v24 != v26)
LABEL_23:
        *(_DWORD *)(v57 + 4 * v21++) = v24;
      ++v19;
    }
    while (v19 != v20);
    if (v21)
    {
      v28 = v21;
      v29 = (int *)v57;
      do
      {
        v30 = *v29++;
        v32 = (HALS_Device *)HALS_IOUADriver::CopyDeviceByUCID((HALS_IOUADriver *)a2, v30);
        if (v32)
        {
          HALS_System::DeviceDied(*(HALS_System **)(a2 + 320), v32);
          (*(void (**)(HALS_Device *))(*(_QWORD *)v32 + 456))(v32);
          (*(void (**)(HALS_Device *))(*(_QWORD *)v32 + 8))(v32);
          v65[0] = MEMORY[0x1E0C809B0];
          v65[1] = 0x40000000;
          v65[2] = ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke;
          v65[3] = &__block_descriptor_tmp_6_2529;
          v65[4] = a2;
          v65[5] = v32;
          v33 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
          HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v65);
        }
        HALS_ObjectMap::ReleaseObject(v32, v31);
        --v28;
      }
      while (v28);
    }
  }
  v34 = v57;
  if ((_DWORD)v11)
  {
    v35 = 0;
    v36 = v11;
    v58 = v11;
    do
    {
      v38 = (HALS_ObjectMap *)HALS_IOUADriver::CopyDeviceByUCID((HALS_IOUADriver *)a2, *(_DWORD *)(v8 + 4 * v35));
      if (!v38)
      {
        *(_QWORD *)&v69 = *(unsigned int *)(v8 + 4 * v35);
        v11 &= 0xFFFFFFFF00000000;
        *((_QWORD *)&v69 + 1) = 0x676C6F6275696420;
        HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, *(_QWORD *)(a2 + 792), v69, (void *)v11, 0, 0);
        v39 = operator new();
        v40 = *(_DWORD *)(v8 + 4 * v35);
        v41 = (HALS_Object *)CFRetain(cf);
        HALS_Device::HALS_Device((HALS_Device *)v39, (HALB_Info *)0x61646576, a2, v41, v42);
        HALS_IOUAObject::HALS_IOUAObject((HALS_IOUAObject *)(v39 + 1304), (HALS_IOUADriver *)a2, v40);
        *(_QWORD *)v39 = off_1E6992E10;
        *(_QWORD *)(v39 + 1304) = &unk_1E69931D8;
        *(_OWORD *)(v39 + 1352) = 0u;
        *(_OWORD *)(v39 + 1368) = 0u;
        *(_OWORD *)(v39 + 1384) = 0u;
        *(_OWORD *)(v39 + 1400) = 0u;
        *(_OWORD *)(v39 + 1416) = 0u;
        AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v39 + 1432, "IOUADevice Config Change Queue");
        v43 = v59;
        (**(void (***)(uint64_t))v39)(v39);
        v67[0] = 0;
        v67[1] = v67;
        v67[2] = 0x2000000000;
        v68 = 0;
        v66[0] = MEMORY[0x1E0C809B0];
        v66[1] = 0x40000000;
        v66[2] = (unint64_t)___ZN15HALS_IOUADriver9AddDeviceEP15HALS_IOUADevice_block_invoke;
        v66[3] = (unint64_t)&unk_1E6974180;
        v66[4] = (unint64_t)v67;
        v66[5] = a2;
        v66[6] = v39;
        v44 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
        HALB_CommandGate::ExecuteCommand(v44, (uint64_t)v66);
        _Block_object_dispose(v67, 8);
        HALS_Device::UpdateInternalIOContext((HALS_Device *)v39);
        HALS_System::DeviceArrived(*(os_unfair_lock_s ***)(a2 + 320), (HALS_Device *)v39);
        v45 = *(_DWORD *)(v39 + 16);
        v47 = (_DWORD *)*((_QWORD *)v59 + 1);
        v46 = *((_QWORD *)v59 + 2);
        if ((unint64_t)v47 >= v46)
        {
          v49 = *(_DWORD **)v59;
          v50 = ((uint64_t)v47 - *(_QWORD *)v59) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v52 = v46 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
            v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
          else
            v37 = 0;
          v54 = (_DWORD *)(v53 + 4 * v50);
          *v54 = v45;
          v48 = v54 + 1;
          if (v47 == v49)
          {
            v34 = v57;
          }
          else
          {
            v34 = v57;
            do
            {
              v55 = *--v47;
              *--v54 = v55;
            }
            while (v47 != v49);
          }
          *(_QWORD *)v59 = v54;
          *((_QWORD *)v59 + 1) = v48;
          *((_QWORD *)v59 + 2) = v53 + 4 * (_QWORD)v37;
          if (v49)
            operator delete(v49);
          v43 = v59;
        }
        else
        {
          *v47 = v45;
          v48 = v47 + 1;
        }
        *((_QWORD *)v43 + 1) = v48;
        if (cf)
          CFRelease(cf);
        v36 = v58;
      }
      HALS_ObjectMap::ReleaseObject(v38, v37);
      ++v35;
    }
    while (v35 != v36);
  }
  MEMORY[0x1B5E50664](v34, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v8, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v61, v56);
  if (v64.__begin_)
  {
    v64.__end_ = v64.__begin_;
    operator delete(v64.__begin_);
  }
}

void sub_1B5912450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap **a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  HALS_Object *v19;
  void *v20;

  MEMORY[0x1B5E50664](a9, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v17, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a13, v19);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  v20 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::RebuildClockDeviceList(HALS_IOUADriver *this)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t PropertySize;
  unint64_t *v8;
  unint64_t v9;
  HALB_Mutex *v10;
  HALS_Object *v11;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unint64_t v14;
  unsigned int *v15;
  HALS_ObjectMap **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  HALS_ObjectMap **v23;
  HALS_ObjectMap **v24;
  int *v25;
  int *v26;
  int *v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int v34;
  int *v35;
  unsigned int *v36;
  HALS_Object *v37;
  HALS_System *v38;
  const BOOL *v39;
  unsigned int v40;
  const __CFString *v41;
  HALB_Mutex *v42;
  int *v43;
  HALS_Object *v44;
  HALS_ObjectMap *v45;
  uint64_t v46;
  int v47;
  const __CFString *v48;
  uint64_t v49;
  HALS_Object *v50;
  HALB_Mutex *v51;
  int v52;
  AMCP::Log::Scope_Registry *v53;
  HALS_System *v54;
  const BOOL *v55;
  unsigned int v56;
  const __CFString *v57;
  NSObject *v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  void *exception;
  unsigned int *__p;
  HALS_IOUADriver *v63;
  unsigned int *v64;
  void *v65[2];
  uint64_t v66;
  uint64_t (**v67)();
  void *v68[2];
  uint64_t v69;
  std::runtime_error v70;
  char v71;
  CFTypeRef cf;
  HALS_ObjectMap **v73;
  HALS_ObjectMap **v74;
  uint64_t v75;
  std::vector<unsigned int> v76;
  _QWORD v77[6];
  std::runtime_error v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint8_t buf[8];
  __int128 v85;
  __int128 v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;

  v2 = (uint64_t *)this;
  v89 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 99);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  *(_QWORD *)buf = v3;
  *(_QWORD *)&v85 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"#klcbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v76, PropertySize >> 2);
  v78.__vftable = (std::runtime_error_vtbl *)((char *)v76.__end_ - (char *)v76.__begin_);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"#klcbolg", 1u, 0, 0, v76.__begin_, (unint64_t *)&v78);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v73 = 0;
  v74 = 0;
  v75 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v85 = 0x40000000;
  *((_QWORD *)&v85 + 1) = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  *(_QWORD *)&v86 = &__block_descriptor_tmp_7_8182;
  *((_QWORD *)&v86 + 1) = v2;
  v87 = (const char *)&v73;
  v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)buf);
  begin = v76.__begin_;
  end = v76.__end_;
  if (v76.__begin_ == v76.__end_)
  {
    __p = 0;
    v64 = 0;
  }
  else
  {
    __p = 0;
    v64 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v73;
      if (v73 == v74)
      {
LABEL_14:
        if ((unint64_t)v15 >= v14)
        {
          v17 = v15 - __p;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v14 - (_QWORD)__p) >> 1 > v18)
            v18 = (uint64_t)(v14 - (_QWORD)__p) >> 1;
          if (v14 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
            v15 = v64;
          }
          else
          {
            v11 = 0;
          }
          v20 = (unsigned int *)(v19 + 4 * v17);
          *v20 = *begin;
          v64 = v20 + 1;
          if (v15 == __p)
          {
            v21 = __p;
          }
          else
          {
            v21 = __p;
            do
            {
              v22 = *--v15;
              *--v20 = v22;
            }
            while (v15 != __p);
          }
          v14 = v19 + 4 * (_QWORD)v11;
          if (v21)
            operator delete(v21);
          __p = v20;
          v15 = v64;
        }
        else
        {
          *v15++ = *begin;
          v64 = v15;
        }
      }
      else
      {
        while (*((_DWORD *)*v16 + 11) != *begin)
        {
          if (++v16 == v74)
            goto LABEL_14;
        }
      }
      ++begin;
    }
    while (begin != end);
  }
  v23 = v73;
  v24 = v74;
  v63 = (HALS_IOUADriver *)v2;
  v25 = 0;
  if (v73 != v74)
  {
    v26 = 0;
    v1 = 0;
    v27 = 0;
    do
    {
      v28 = v76.__begin_;
      if (v76.__begin_ == v76.__end_)
      {
LABEL_41:
        v29 = *((_DWORD *)*v23 + 11);
        if ((unint64_t)v27 >= v1)
        {
          v30 = v27 - v25;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v1 - (_QWORD)v25) >> 1 > v31)
            v31 = (uint64_t)(v1 - (_QWORD)v25) >> 1;
          if (v1 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
          {
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v32);
            v27 = v26;
          }
          else
          {
            v11 = 0;
          }
          v33 = (int *)(v32 + 4 * v30);
          *v33 = v29;
          v26 = v33 + 1;
          while (v27 != v25)
          {
            v34 = *--v27;
            *--v33 = v34;
          }
          v1 = v32 + 4 * (_QWORD)v11;
          if (v25)
            operator delete(v25);
          v25 = v33;
          v27 = v26;
        }
        else
        {
          *v27++ = v29;
          v26 = v27;
        }
      }
      else
      {
        while (*((_DWORD *)*v23 + 11) != *v28)
        {
          if (++v28 == v76.__end_)
            goto LABEL_41;
        }
      }
      ++v23;
    }
    while (v23 != v24);
    if (v25 != v27)
    {
      v35 = v25;
      do
      {
        v36 = (unsigned int *)HALS_IOUADriver::CopyObjectByUCID(v63, *v35);
        v1 = (unint64_t)v36;
        if (v36)
        {
          v38 = (HALS_System *)*((_QWORD *)v63 + 40);
          v39 = (const BOOL *)v36[4];
          v40 = v36[7];
          v41 = (const __CFString *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v36 + 200))(v36);
          HALS_System::ClockDeviceDied(v38, v39, v40, v41);
          (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
          v77[0] = MEMORY[0x1E0C809B0];
          v77[1] = 0x40000000;
          v77[2] = ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke;
          v77[3] = &__block_descriptor_tmp_9_2518;
          v77[4] = v63;
          v77[5] = v1;
          v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)v63 + 56))(v63);
          HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v77);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v1, v37);
        ++v35;
      }
      while (v35 != v27);
    }
    v2 = (uint64_t *)v63;
  }
  if (__p != v64)
  {
    v43 = (int *)__p;
    do
    {
      v45 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v43);
      if (!v45)
      {
        *(_QWORD *)&v90 = *v43;
        v1 &= 0xFFFFFFFF00000000;
        *((_QWORD *)&v90 + 1) = 0x676C6F6275696420;
        HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v2[99], v90, (void *)v1, 0, 0);
        v46 = operator new();
        v47 = *v43;
        v48 = (const __CFString *)CFRetain(cf);
        HALS_ClockDevice::HALS_ClockDevice((HALS_ClockDevice *)v46, (HALS_DeviceManager *)v2, v48, v49, v50);
        HALS_IOUAObject::HALS_IOUAObject((HALS_IOUAObject *)(v46 + 368), (HALS_IOUADriver *)v2, v47);
        *(_QWORD *)v46 = off_1E696E8F8;
        *(_QWORD *)(v46 + 368) = &unk_1E696EAF8;
        *(_OWORD *)(v46 + 416) = 0u;
        *(_OWORD *)(v46 + 432) = 0u;
        AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v46 + 448, "IOUAClockDevice Config Change Queue");
        *(_DWORD *)(v46 + 44) = v47;
        (**(void (***)(uint64_t))v46)(v46);
        v78.__vftable = 0;
        v78.__imp_.__imp_ = (const char *)&v78;
        v79 = 0x2000000000;
        LODWORD(v80) = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v85 = 0x40000000;
        *((_QWORD *)&v85 + 1) = ___ZN15HALS_IOUADriver14AddClockDeviceEP20HALS_IOUAClockDevice_block_invoke;
        *(_QWORD *)&v86 = &unk_1E6974240;
        *((_QWORD *)&v86 + 1) = &v78;
        v87 = (const char *)v2;
        v88 = v46;
        v51 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v2 + 56))(v2);
        HALB_CommandGate::ExecuteCommand(v51, (uint64_t)buf);
        v52 = *((_DWORD *)v78.__imp_.__imp_ + 6);
        _Block_object_dispose(&v78, 8);
        if (v52)
        {
          AMCP::Log::Scope_Registry::get(v53);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v58 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            v59 = pthread_self();
            v60 = pthread_mach_thread_np(v59);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v60;
            LOWORD(v85) = 2080;
            *(_QWORD *)((char *)&v85 + 2) = "HALS_IOUADriver.cpp";
            WORD5(v85) = 1024;
            HIDWORD(v85) = 763;
            LOWORD(v86) = 2080;
            *(_QWORD *)((char *)&v86 + 2) = "error != kAudioHardwareNoError";
            _os_log_error_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to add clock device", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v71);
          exception = __cxa_allocate_exception(0x40uLL);
          std::runtime_error::runtime_error(&v70, "Failed to add clock device");
          std::runtime_error::runtime_error(&v78, &v70);
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = -1;
          v78.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
          v79 = (uint64_t)&unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
          *((_QWORD *)&v86 + 1) = "BOOL HALS_IOUADriver::RebuildClockDeviceList()";
          v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
          LODWORD(v88) = 763;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v65);
          v67 = off_1E69A20A0;
          *(_OWORD *)v68 = *(_OWORD *)v65;
          v69 = v66;
          v65[0] = 0;
          v65[1] = 0;
          v66 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v67);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
        }
        v54 = (HALS_System *)v2[40];
        v55 = (const BOOL *)*(unsigned int *)(v46 + 16);
        v56 = *(_DWORD *)(v46 + 28);
        v57 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 200))(v46);
        HALS_System::ClockDeviceArrived(v54, v55, v56, v57);
        if (cf)
          CFRelease(cf);
        v2 = (uint64_t *)v63;
      }
      HALS_ObjectMap::ReleaseObject(v45, v44);
      ++v43;
    }
    while (v43 != (int *)v64);
  }
  if (v25)
    operator delete(v25);
  if (__p)
    operator delete(__p);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v73, v11);
  if (v76.__begin_)
  {
    v76.__end_ = v76.__begin_;
    operator delete(v76.__begin_);
  }
}

void sub_1B5913050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,HALS_ObjectMap **a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;
  HALS_Object *v37;

  __cxa_end_catch();
  if (v35)
    operator delete(v35);
  if (__p)
    operator delete(__p);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a31, v37);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void sub_1B5913108(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5913114);
  JUMPOUT(0x1B591311CLL);
}

void HALS_IOUADriver::RebuildBoxList(HALS_IOUADriver *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t PropertySize;
  unint64_t *v7;
  unint64_t v8;
  HALB_Mutex *v9;
  _QWORD v10[6];
  void *__p;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::vector<unsigned int> v16;
  _QWORD v17[3];
  char v18;
  unint64_t v19;

  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2000000000;
  v18 = 0;
  v2 = *((_QWORD *)this + 99);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  v14 = v2;
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#xobbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v16, PropertySize >> 2);
  v19 = (char *)v16.__end_ - (char *)v16.__begin_;
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#xobbolg", 1u, 0, 0, v16.__begin_, &v19);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN15HALS_IOUADriver14RebuildBoxListEv_block_invoke;
  v10[3] = &unk_1E69741C8;
  v10[4] = v17;
  v10[5] = this;
  v12 = 0;
  v13 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v16.__begin_, (uint64_t)v16.__end_, v16.__end_ - v16.__begin_);
  v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v10);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v16.__begin_)
  {
    v16.__end_ = v16.__begin_;
    operator delete(v16.__begin_);
  }
  _Block_object_dispose(v17, 8);
}

void sub_1B59132AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  _Block_object_dispose((const void *)(v22 - 72), 8);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver14RebuildBoxListEv_block_invoke(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t *v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  HALS_ObjectMap **v32;
  char *v33;
  HALS_ObjectMap **v34;
  HALS_Object *v35;
  HALS_ObjectMap **v36;
  int64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  const __CFString *v41;
  uint64_t v42;
  HALS_Object *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t (**v46)(HALS_IOUABox *__hidden);
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v57;
  int *__p;
  int *v59;
  CFTypeRef cf;
  __int128 v62;

  v2 = (uint64_t *)a1[5];
  v1 = (_DWORD *)a1[6];
  v3 = (_DWORD *)a1[7];
  if (v1 == v3)
  {
    v4 = 0;
    v5 = 0;
    v7 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v2[107];
      v9 = v2[108];
      if (v8 == v9)
      {
LABEL_6:
        if ((unint64_t)v7 >= v6)
        {
          v10 = (v7 - v4) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v11)
            v11 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
          if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
          {
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
            v7 = v5;
          }
          else
          {
            v13 = 0;
          }
          v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)v14 = *v1;
          v5 = v14 + 4;
          while (v7 != v4)
          {
            v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          v6 = v12 + 4 * v13;
          if (v4)
            operator delete(v4);
          v4 = v14;
          v7 = v5;
        }
        else
        {
          *(_DWORD *)v7 = *v1;
          v7 += 4;
          v5 = v7;
        }
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)v8 + 44) != *v1)
        {
          v8 += 8;
          if (v8 == v9)
            goto LABEL_6;
        }
      }
      ++v1;
    }
    while (v1 != v3);
  }
  __p = (int *)v4;
  v16 = v2[107];
  v17 = v2[108];
  if (v16 == v17)
  {
    v18 = 0;
    v21 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = (_DWORD *)a1[6];
      v23 = (_DWORD *)a1[7];
      if (v22 == v23)
      {
LABEL_31:
        v24 = *(_DWORD *)(*(_QWORD *)v16 + 44);
        if ((unint64_t)v21 >= v20)
        {
          v25 = v5;
          v26 = (v21 - v18) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v20 - (_QWORD)v18) >> 1 > v27)
            v27 = (uint64_t)(v20 - (_QWORD)v18) >> 1;
          if (v20 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
          {
            v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
            v21 = v19;
          }
          else
          {
            v29 = 0;
          }
          v30 = (char *)(v28 + 4 * v26);
          *(_DWORD *)v30 = v24;
          v19 = v30 + 4;
          while (v21 != v18)
          {
            v31 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          v20 = v28 + 4 * v29;
          if (v18)
            operator delete(v18);
          v18 = v30;
          v21 = v19;
          v5 = v25;
        }
        else
        {
          *(_DWORD *)v21 = v24;
          v21 += 4;
          v19 = v21;
        }
      }
      else
      {
        while (*(_DWORD *)(*(_QWORD *)v16 + 44) != *v22)
        {
          if (++v22 == v23)
            goto LABEL_31;
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    if (v18 == v21)
    {
      v7 = v5;
      v21 = v18;
    }
    else
    {
      v32 = (HALS_ObjectMap **)v2[108];
      v33 = v18;
      do
      {
        v34 = (HALS_ObjectMap **)v2[107];
        if (v34 != v32)
        {
          while (*((_DWORD *)*v34 + 11) != *(_DWORD *)v33)
          {
            if (++v34 == v32)
              goto LABEL_58;
          }
          (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v34 + 8))(*v34);
          HALS_ObjectMap::ReleaseObject(*v34, v35);
          v36 = (HALS_ObjectMap **)v2[108];
          v37 = (char *)v36 - (char *)(v34 + 1);
          if (v36 != v34 + 1)
            memmove(v34, v34 + 1, (char *)v36 - (char *)(v34 + 1));
          v32 = (HALS_ObjectMap **)((char *)v34 + v37);
          v2[108] = (uint64_t)v34 + v37;
        }
LABEL_58:
        v33 += 4;
      }
      while (v33 != v21);
      v7 = v5;
    }
  }
  if (__p != (int *)v5)
  {
    v38 = __p;
    v59 = (int *)v5;
    do
    {
      *(_QWORD *)&v62 = *v38;
      *((_QWORD *)&v62 + 1) = 0x676C6F6262756964;
      HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v2[99], v62, 0, 0, 0);
      v39 = operator new();
      v40 = *v38;
      v41 = (const __CFString *)CFRetain(cf);
      HALS_Box::HALS_Box((HALS_Box *)v39, (HALS_DeviceManager *)v2, v41, v42, v43);
      HALS_IOUAObject::HALS_IOUAObject((HALS_IOUAObject *)(v39 + 336), (HALS_IOUADriver *)v2, v40);
      *(_QWORD *)v39 = off_1E6983D18;
      *(_QWORD *)(v39 + 336) = &unk_1E6983E10;
      *(_QWORD *)(v39 + 392) = 0;
      *(_QWORD *)(v39 + 400) = 0;
      *(_QWORD *)(v39 + 384) = 0;
      *(_DWORD *)(v39 + 44) = v40;
      v44 = (uint64_t *)v2[108];
      v45 = v2[109];
      if ((unint64_t)v44 >= v45)
      {
        v48 = (_QWORD *)v2[107];
        v49 = v44 - v48;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v51 = v45 - (_QWORD)v48;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v53 = (char *)operator new(8 * v52);
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        *v54 = v39;
        v47 = v54 + 1;
        if (v44 != v48)
        {
          do
          {
            v55 = *--v44;
            *--v54 = v55;
          }
          while (v44 != v48);
          v44 = (uint64_t *)v2[107];
        }
        v2[107] = (uint64_t)v54;
        v2[108] = (uint64_t)v47;
        v2[109] = (uint64_t)&v53[8 * v52];
        if (v44)
        {
          operator delete(v44);
          v46 = *(uint64_t (***)(HALS_IOUABox *__hidden))v39;
        }
        else
        {
          v46 = off_1E6983D18;
        }
      }
      else
      {
        *v44 = v39;
        v46 = off_1E6983D18;
        v47 = v44 + 1;
      }
      v2[108] = (uint64_t)v47;
      (*v46)((HALS_IOUABox *)v39);
      if (cf)
        CFRelease(cf);
      ++v38;
    }
    while (v38 != v59);
  }
  if (v18)
    operator delete(v18);
  if (__p)
    operator delete(__p);
  v57 = v7 != (char *)__p || v21 != v18;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v57;
}

void sub_1B5913904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  void *v12;

  if (cf)
    CFRelease(cf);
  if (v12)
    operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_IOUADriver::CopyObjectByUCID(HALS_IOUADriver *this, int a2)
{
  HALS_Object *v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_IODevice *v6;
  char v7;
  char v8;
  unsigned int NumberStreams;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  HALS_ObjectMap *v13;
  HALS_ObjectMap *v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  HALS_ObjectMap *v19;
  HALS_Object *v20;
  HALS_ObjectMap *v21;
  uint64_t v22;
  HALB_Mutex *v23;
  HALS_Object *v24;
  HALS_ObjectMap **i;
  HALB_Mutex *v26;
  HALS_Object *v27;
  HALS_ObjectMap **j;
  HALS_Object *v29;
  HALS_ObjectMap **v32;
  HALS_ObjectMap **v33;
  uint64_t v34;
  HALS_ObjectMap **v35;
  HALS_ObjectMap **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void *v41;
  HALS_IOUADriver *v42;
  HALS_ObjectMap ***v43;
  uint64_t v44;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v35, 1, 0);
  v4 = v35;
  v5 = v36;
  while (v4 != v5)
  {
    v6 = *v4;
    if (*((_DWORD *)*v4 + 330) == a2)
    {
      HALS_ObjectMap::RetainObject(*v4, v3);
      v14 = v6;
      goto LABEL_42;
    }
    v7 = 0;
    v8 = 1;
    do
    {
      NumberStreams = HALS_IODevice::GetNumberStreams(v6, v7 & 1);
      if (NumberStreams)
      {
        v10 = 1;
        do
        {
          v11 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v6, v7 & 1, v10 - 1);
          v13 = v11;
          if (v11 && *((_DWORD *)v11 + 20) == a2)
          {
            HALS_ObjectMap::RetainObject(v11, v12);
            v14 = v13;
          }
          else
          {
            v14 = 0;
          }
          HALS_ObjectMap::ReleaseObject(v13, v12);
          if (v14)
            break;
          v15 = v10++ >= NumberStreams;
        }
        while (!v15);
      }
      else
      {
        v14 = 0;
      }
      v16 = (v14 == 0) & v8;
      v7 = 1;
      v8 = 0;
    }
    while ((v16 & 1) != 0);
    if (v14)
      goto LABEL_42;
    v17 = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v6 + 624))(v6);
    if (v17)
    {
      v18 = 1;
      do
      {
        v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, _QWORD))(*(_QWORD *)v6 + 632))(v6, v18 - 1);
        v21 = v19;
        if (v19 && *((_DWORD *)v19 + 22) == a2)
        {
          HALS_ObjectMap::RetainObject(v19, v20);
          v14 = v21;
        }
        else
        {
          v14 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v21, v20);
        if (v14)
          break;
        v15 = v18++ >= v17;
      }
      while (!v15);
      if (v14)
        goto LABEL_42;
    }
    ++v4;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v22 = MEMORY[0x1E0C809B0];
  v38 = MEMORY[0x1E0C809B0];
  v39 = 0x40000000;
  v40 = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v41 = &__block_descriptor_tmp_7_8182;
  v42 = this;
  v43 = &v32;
  v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v23, (uint64_t)&v38);
  for (i = v32; i != v33; ++i)
  {
    v14 = *i;
    if (*((_DWORD *)*i + 96) == a2)
    {
      HALS_ObjectMap::RetainObject(*i, v24);
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v32, v29);
      goto LABEL_42;
    }
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v32, v24);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v38 = v22;
  v39 = 0x40000000;
  v40 = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v41 = &__block_descriptor_tmp_8181;
  v42 = this;
  v43 = &v32;
  v44 = 0;
  v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v26, (uint64_t)&v38);
  for (j = v32; ; ++j)
  {
    if (j == v33)
    {
      v14 = 0;
      goto LABEL_41;
    }
    v14 = *j;
    if (*((_DWORD *)*j + 88) == a2)
      break;
  }
  HALS_ObjectMap::RetainObject(*j, v27);
LABEL_41:
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v32, v27);
LABEL_42:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v35, v3);
  return v14;
}

void sub_1B5913C48(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, HALS_ObjectMap **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, v4);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke(uint64_t a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  void *v5;
  int64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(HALS_ObjectMap **)(a1 + 40);
  v3 = *(HALS_ObjectMap ***)(v2 + 832);
  v4 = *(HALS_ObjectMap ***)(v2 + 840);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        v3 = *(HALS_ObjectMap ***)(v2 + 840);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    v5 = v3 + 1;
    v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 840) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

void HALS_IOUADriver::RemoveClockDevice(HALS_IOUADriver *this, HALS_IOUAClockDevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_2518;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN15HALS_IOUADriver14AddClockDeviceEP20HALS_IOUAClockDevice_block_invoke(_QWORD *a1)
{
  HALS_IOUADriver *v2;
  int *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  int v7;
  int **v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int **v17;
  int *v18;
  int v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_IOUADriver *)a1[5];
  v3 = (int *)a1[6];
  v5 = HALS_IOUADriver::_CopyClockDeviceByUCID(v2, v3[96]);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v6 = (*(uint64_t (**)(int *))(*(_QWORD *)v3 + 216))(v3);
      v19 = 136315394;
      v20 = "_AddClockDevice";
      v21 = 2082;
      v22 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s: HALS_PlugInManager::_AddClockDevice: there is already a clcok device with the UID, %{public}s\n", (uint8_t *)&v19, 0x16u);
    }
    v7 = 1852797029;
  }
  else
  {
    v8 = (int **)*((_QWORD *)v2 + 105);
    v9 = *((_QWORD *)v2 + 106);
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)*((_QWORD *)v2 + 104);
      v12 = v8 - (int **)v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (int **)&v16[8 * v12];
      *v17 = v3;
      v10 = v17 + 1;
      if (v8 != v11)
      {
        do
        {
          v18 = *--v8;
          *--v17 = v18;
        }
        while (v8 != v11);
        v8 = (int **)*((_QWORD *)v2 + 104);
      }
      *((_QWORD *)v2 + 104) = v17;
      *((_QWORD *)v2 + 105) = v10;
      *((_QWORD *)v2 + 106) = &v16[8 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v3;
      v10 = v8 + 1;
    }
    v7 = 0;
    *((_QWORD *)v2 + 105) = v10;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v7;
}

void sub_1B5913F8C(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5913F38);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_IOUADriver::_CopyClockDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  HALB_Mutex *v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap **v11;
  HALS_ObjectMap **v12;
  uint64_t v13;
  _QWORD v14[6];

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v14[3] = &__block_descriptor_tmp_7_8182;
  v14[4] = this;
  v14[5] = &v11;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v14);
  v5 = v11;
  if (v11 == v12)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v8 = *v5++;
      v7 = v8;
      if (*((_DWORD *)v8 + 96) == a2)
        v6 = v7;
    }
    while (v5 != v12);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v11, v9);
  return v6;
}

void sub_1B5914098(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUADriver::CopyDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN15HALS_IOUADriver16CopyDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E6974290;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5914144(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke(uint64_t a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  void *v5;
  int64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(HALS_ObjectMap **)(a1 + 40);
  v3 = *(HALS_ObjectMap ***)(v2 + 808);
  v4 = *(HALS_ObjectMap ***)(v2 + 816);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        v3 = *(HALS_ObjectMap ***)(v2 + 816);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    v5 = v3 + 1;
    v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1)
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 816) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

void HALS_IOUADriver::RemoveDevice(HALS_IOUADriver *this, HALS_IOUADevice *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_2529;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN15HALS_IOUADriver9AddDeviceEP15HALS_IOUADevice_block_invoke(_QWORD *a1)
{
  HALS_DeviceManager *v2;
  uint64_t v3;
  const __CFString *v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_DeviceManager *)a1[5];
  v3 = a1[6];
  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
  v5 = HALS_DeviceManager::CopyDeviceByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 216))(v3);
      v20 = 136315394;
      v21 = "_AddDevice";
      v22 = 2082;
      v23 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s: HALS_PlugInManager::_AddDevice: there is already a device with the UID, %{public}s\n", (uint8_t *)&v20, 0x16u);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    v8 = 1852797029;
  }
  else
  {
    v9 = (_QWORD *)*((_QWORD *)v2 + 102);
    v10 = *((_QWORD *)v2 + 103);
    if ((unint64_t)v9 >= v10)
    {
      v12 = (_QWORD *)*((_QWORD *)v2 + 101);
      v13 = v9 - v12;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v15 = v10 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (char *)operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = v3;
      v11 = v18 + 8;
      if (v9 != v12)
      {
        do
        {
          v19 = *--v9;
          *((_QWORD *)v18 - 1) = v19;
          v18 -= 8;
        }
        while (v9 != v12);
        v9 = (_QWORD *)*((_QWORD *)v2 + 101);
      }
      *((_QWORD *)v2 + 101) = v18;
      *((_QWORD *)v2 + 102) = v11;
      *((_QWORD *)v2 + 103) = &v17[8 * v16];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v9 = v3;
      v11 = v9 + 1;
    }
    v8 = 0;
    *((_QWORD *)v2 + 102) = v11;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v8;
}

void sub_1B5914434(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59143E0);
  }
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver16CopyDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  HALS_DeviceManager *v2;
  int v3;
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;

  v2 = *(HALS_DeviceManager **)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  HALS_DeviceManager::CopyDeviceList(v2, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, 0);
  v5 = v10;
  if (v10 == v11)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v8 = *v5++;
      v7 = v8;
      if (*((_DWORD *)v8 + 330) == v3)
        v6 = v7;
    }
    while (v5 != v11);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v9);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1B59144F0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69743D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69743D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::operator()(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  HALS_IOUADriver *v7;
  uint64_t v8;
  HALS_ObjectMap *v9;
  AMCP::Log::Scope_Registry *v10;
  HALS_Object *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::runtime_error *exception;
  int v19;
  uint64_t v20;
  std::runtime_error v21;
  uint64_t v22;
  HALS_ObjectMap *v23;
  AMCP::Log::Scope_Registry *v24;
  HALS_Object *v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  std::runtime_error *v32;
  int v33;
  uint64_t v34;
  std::runtime_error v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  NSObject *v47;
  unint64_t *v48;
  unint64_t v49;
  _opaque_pthread_t *v50;
  mach_port_t v51;
  std::runtime_error *v52;
  int v53;
  uint64_t v54;
  std::runtime_error v55;
  unsigned __int128 v56;
  uint64_t v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  std::runtime_error v61;
  std::runtime_error v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint8_t buf[8];
  _BYTE v72[10];
  __int16 v73;
  int v74;
  _BYTE v75[24];
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = *a4;
  v7 = *(HALS_IOUADriver **)(a1 + 8);
  v8 = HALS_IOUADriver::CopyDeviceByUCID(v7, *a2);
  v9 = (HALS_ObjectMap *)v8;
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8))
    {
      *(_QWORD *)&v69 = v5;
      *((_QWORD *)&v69 + 1) = v6;
      LOBYTE(v70) = 1;
      v10 = (AMCP::Log::Scope_Registry *)HALS_IOUADevice::HandleConfigurationChangeRequest((uint64_t)v9, &v69, 0);
      if ((_DWORD)v10)
      {
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = *(std::__shared_weak_count **)v72;
        v13 = **(NSObject ***)buf;
        if (*(_QWORD *)v72)
        {
          v14 = (unint64_t *)(*(_QWORD *)v72 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)v72 = 2080;
          *(_QWORD *)&v72[2] = "HALS_IOUADriver.cpp";
          v73 = 1024;
          v74 = 1116;
          *(_WORD *)v75 = 2080;
          *(_QWORD *)&v75[2] = "config_change_error != kIOReturnSuccess";
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to handle config change", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v61, "Failed to handle config change");
        std::runtime_error::runtime_error(&v62, &v61);
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = -1;
        v62.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v63 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v62);
        *(_QWORD *)&v75[8] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
        *(_QWORD *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
        v76 = 1116;
        std::vector<void *>::vector(&v56);
        v19 = backtrace((void **)v56, (*((_QWORD *)&v56 + 1) - (_QWORD)v56) >> 3);
        std::vector<void *>::resize((char **)&v56, v19);
        v58 = off_1E69A20A0;
        v59 = v56;
        v60 = v57;
        v56 = 0uLL;
        v57 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v58);
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
        exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v20 = *(_QWORD *)v75;
        exception[1].__imp_.__imp_ = *(const char **)v75;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = *(std::runtime_error *)&v75[8];
        LODWORD(exception[3].__vftable) = v76;
        exception[2] = v21;
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
    }
    else
    {
      v36 = *((_QWORD *)v7 + 99);
      v37 = (std::__shared_weak_count *)*((_QWORD *)v7 + 100);
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v36 + 4), v4, v6, v6);
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      else
      {
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v36 + 4), v4, v6, v6);
      }
    }
  }
  else
  {
    v22 = HALS_IOUADriver::CopyClockDeviceByUCID(v7, v4);
    v23 = (HALS_ObjectMap *)v22;
    if (!v22)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v46 = *(std::__shared_weak_count **)v72;
      v47 = **(NSObject ***)buf;
      if (*(_QWORD *)v72)
      {
        v48 = (unint64_t *)(*(_QWORD *)v72 + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v50 = pthread_self();
        v51 = pthread_mach_thread_np(v50);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v51;
        *(_WORD *)v72 = 2080;
        *(_QWORD *)&v72[2] = "HALS_IOUADriver.cpp";
        v73 = 1024;
        v74 = 1129;
        *(_WORD *)v75 = 2080;
        *(_QWORD *)&v75[2] = "!theClockDevice.IsValid()";
        *(_WORD *)&v75[10] = 1024;
        *(_DWORD *)&v75[12] = v4;
        _os_log_error_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s can't find device with object ID %u", buf, 0x28u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v61);
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&v56, "Can't find device with that object ID");
      std::runtime_error::runtime_error(&v62, (const std::runtime_error *)&v56);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = -1;
      v62.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v63 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v62);
      *(_QWORD *)&v75[8] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
      *(_QWORD *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
      v76 = 1129;
      std::vector<void *>::vector(&v69);
      v53 = backtrace((void **)v69, (*((_QWORD *)&v69 + 1) - (_QWORD)v69) >> 3);
      std::vector<void *>::resize((char **)&v69, v53);
      v58 = off_1E69A20A0;
      v59 = v69;
      v60 = v70;
      v69 = 0uLL;
      v70 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v58);
      v52[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v52, (const std::runtime_error *)buf);
      v52[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v54 = *(_QWORD *)v75;
      v52[1].__imp_.__imp_ = *(const char **)v75;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      v55 = *(std::runtime_error *)&v75[8];
      LODWORD(v52[3].__vftable) = v76;
      v52[2] = v55;
      v52->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v52[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v52[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22))
    {
      *(_QWORD *)&v69 = v5;
      *((_QWORD *)&v69 + 1) = v6;
      LOBYTE(v70) = 1;
      v24 = (AMCP::Log::Scope_Registry *)HALS_IOUAClockDevice::HandleConfigurationChangeRequest((uint64_t)v23, &v69, 0);
      if ((_DWORD)v24)
      {
        AMCP::Log::Scope_Registry::get(v24);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v26 = *(std::__shared_weak_count **)v72;
        v27 = **(NSObject ***)buf;
        if (*(_QWORD *)v72)
        {
          v28 = (unint64_t *)(*(_QWORD *)v72 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v30 = pthread_self();
          v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v31;
          *(_WORD *)v72 = 2080;
          *(_QWORD *)&v72[2] = "HALS_IOUADriver.cpp";
          v73 = 1024;
          v74 = 1138;
          *(_WORD *)v75 = 2080;
          *(_QWORD *)&v75[2] = "config_change_error != kIOReturnSuccess";
          _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to handle config change", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v61, "Failed to handle config change");
        std::runtime_error::runtime_error(&v62, &v61);
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = -1;
        v62.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v63 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v62);
        *(_QWORD *)&v75[8] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
        *(_QWORD *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
        v76 = 1138;
        std::vector<void *>::vector(&v56);
        v33 = backtrace((void **)v56, (*((_QWORD *)&v56 + 1) - (_QWORD)v56) >> 3);
        std::vector<void *>::resize((char **)&v56, v33);
        v58 = off_1E69A20A0;
        v59 = v56;
        v60 = v57;
        v56 = 0uLL;
        v57 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v58);
        v32[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(v32, (const std::runtime_error *)buf);
        v32[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v34 = *(_QWORD *)v75;
        v32[1].__imp_.__imp_ = *(const char **)v75;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
        v35 = *(std::runtime_error *)&v75[8];
        LODWORD(v32[3].__vftable) = v76;
        v32[2] = v35;
        v32->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        v32[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        v32[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
    }
    else
    {
      v41 = *((_QWORD *)v7 + 99);
      v42 = (std::__shared_weak_count *)*((_QWORD *)v7 + 100);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v41 + 4), v4, v6, v6);
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      else
      {
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v41 + 4), v4, v6, v6);
      }
    }
    HALS_ObjectMap::ReleaseObject(v23, v25);
  }
  HALS_ObjectMap::ReleaseObject(v9, v11);
}

void sub_1B5914E3C(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,NSObject **buf,std::__shared_weak_count *a33,__int16 a34,__int16 a35,int a36,uint64_t a37)
{
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  HALS_ObjectMap *v41;
  HALS_ObjectMap *v42;
  uint64_t v43;
  HALS_Object *v45;
  AMCP::Log::Scope_Registry *v46;
  std::__shared_weak_count *v47;
  NSObject *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v42, a2);
    HALS_ObjectMap::ReleaseObject(v41, v45);
    v46 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v46);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v47 = a33;
    v48 = *buf;
    if (a33)
    {
      p_shared_owners = (unint64_t *)&a33->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v56 = pthread_self();
      v57 = pthread_mach_thread_np(v56);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v57;
      LOWORD(a33) = 2080;
      *(_QWORD *)(v43 + 10) = "HALS_IOUADriver.cpp";
      a35 = 1024;
      a36 = 1149;
      _os_log_error_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change request", (uint8_t *)&buf, 0x18u);
    }
    v51 = *(_QWORD *)(v40 + 792);
    v52 = *(std::__shared_weak_count **)(v40 + 800);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v51 + 4), v38, v39, v37);
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v51 + 4), v38, v39, v37);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5914BBCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B59152A8()
{
  JUMPOUT(0x1B5915074);
}

void sub_1B59152B0()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5915074);
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN15HALS_IOUADriverC1EP11HALS_SystemN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::target_type()
{
}

uint64_t HALS_IOUADriver::CopyClockDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK15HALS_IOUADriver21CopyClockDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E6974268;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B591539C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6974348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6974348;
  a2[1] = v2;
  return result;
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  _DWORD *v3;
  const AudioObjectPropertyAddress *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  uint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t (*v20)(_DWORD *);
  uint64_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  uint64_t v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t i;
  void *v38;
  int v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  int v44;
  void *__p;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  uint64_t block[5];
  _QWORD v61[3];
  uint64_t v62;
  _QWORD v63[4];

  v63[2] = *MEMORY[0x1E0C80C00];
  v39 = *a2;
  v3 = *(_DWORD **)(a1 + 8);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v57, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
  v6 = (_anonymous_namespace_ *)v57;
  v5 = v58;
  if (v57 != v58)
  {
    {
LABEL_3:
      v6 = (_anonymous_namespace_ *)((char *)v6 + 12);
      if (v6 == v5)
        goto LABEL_9;
    }
    while (1)
    {
      v5 = (_anonymous_namespace_ *)((char *)v5 - 12);
      if (v5 == v6)
        break;
      {
        v7 = *(_QWORD *)v6;
        LODWORD(v42) = *((_DWORD *)v6 + 2);
        v41 = v7;
        v8 = *(_QWORD *)v5;
        *((_DWORD *)v6 + 2) = *((_DWORD *)v5 + 2);
        *(_QWORD *)v6 = v8;
        v9 = v41;
        *((_DWORD *)v5 + 2) = (_DWORD)v42;
        *(_QWORD *)v5 = v9;
        goto LABEL_3;
      }
    }
  }
  v5 = v6;
LABEL_9:
  v55 = 0;
  v56 = 0;
  v54 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v54, v57, (uint64_t)v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - (_anonymous_namespace_ *)v57) >> 2));
  v52 = 0;
  v53 = 0;
  v51 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v51, v5, (uint64_t)v58, 0xAAAAAAAAAAAAAAABLL * ((v58 - v5) >> 2));
  memset(v61, 0, sizeof(v61));
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v61, v54, v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v54) >> 2));
  v62 = 0;
  v63[0] = 0;
  v63[1] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v62, v51, v52, 0xAAAAAAAAAAAAAAABLL * ((v52 - (uint64_t)v51) >> 2));
  v10 = 0;
  v11 = 0;
  v12 = 1;
  do
  {
    v13 = v10;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v48, (const void *)v61[3 * v11], v61[3 * v11 + 1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61[3 * v11 + 1] - v61[3 * v11]) >> 2));
    v14 = v48;
    v15 = v49;
    if (v48 != (void *)v49)
    {
      v16 = v3[4];
      v17 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v17->__shared_owners_ = 0u;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974468;
      v17[1].__vftable = 0;
      *(_OWORD *)&v17[1].__shared_owners_ = 0u;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v17[1].__vftable, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v14) >> 2));
      LODWORD(v41) = v16;
      v42 = v17 + 1;
      v43 = v17;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v44 = v39;
      v46 = 0;
      v47 = 0;
      __p = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
      v20 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 64);
      if ((v12 & 1) != 0)
      {
        v21 = v20(v3);
        v22 = atomic_load((unsigned __int8 *)(v21 + 32));
        if ((v22 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v21 + 33));
        v23 = *(NSObject **)v21;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = (uint64_t)___ZN10applesauce8dispatch2v19sync_implIRZN15HALS_IOUADriver22HandlePropertiesChangeEjRKNSt3__16vectorI26AudioObjectPropertyAddressNS4_9allocatorIS6_EEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
        block[3] = (uint64_t)&__block_descriptor_tmp_41_2545;
        block[4] = (uint64_t)&v41;
        dispatch_sync(v23, block);
      }
      else
      {
        v24 = v20(v3);
        v25 = atomic_load((unsigned __int8 *)(v24 + 32));
        if ((v25 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v24 + 33));
        v26 = *(NSObject **)v24;
        v27 = operator new();
        v28 = (void *)v27;
        *(_DWORD *)v27 = v41;
        v29 = v43;
        *(_QWORD *)(v27 + 8) = v42;
        *(_QWORD *)(v27 + 16) = v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = v44;
        *(_QWORD *)(v27 + 32) = 0;
        *(_DWORD *)(v27 + 24) = v32;
        *(_QWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>((_QWORD *)(v27 + 32), __p, (uint64_t)v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - (_BYTE *)__p) >> 2));
        block[0] = 0;
        dispatch_async_f(v26, v28, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &>(dispatch_queue_s *,HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100](block);
      }
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      v33 = v43;
      if (v43)
      {
        v34 = (unint64_t *)&v43->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v14 = v48;
    }
    if (v14)
      operator delete(v14);
    v12 = 0;
    v10 = 1;
    v11 = 1;
  }
  while ((v13 & 1) == 0);
  for (i = 0; i != -6; i -= 3)
  {
    v38 = (void *)v61[i + 3];
    if (v38)
    {
      v63[i] = v38;
      operator delete(v38);
    }
  }
  if (v51)
    operator delete(v51);
  if (v54)
    operator delete(v54);
  if (v57)
    operator delete(v57);
}

void sub_1B5915910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 160);
  if (v31)
  {
    *(_QWORD *)(v29 - 152) = v31;
    operator delete(v31);
  }
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN15HALS_IOUADriverC1EP11HALS_SystemN10applesauce5iokit16io_object_holderEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::target_type()
{
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN15HALS_IOUADriver22HandlePropertiesChangeEjRKNSt3__16vectorI26AudioObjectPropertyAddressNS4_9allocatorIS6_EEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0::operator()(*(unsigned int **)(a1 + 32));
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &>(dispatch_queue_s *,HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  unsigned int *v2;

  v2 = a1;
  HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0::operator()(a1);
  return std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_1B5915B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 32);
    if (v3)
    {
      *(_QWORD *)(v2 + 40) = v3;
      operator delete(v3);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 8);
    MEMORY[0x1B5E50688](v2, 0x1020C4023EB4E86);
  }
  return a1;
}

void HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0::operator()(unsigned int *a1)
{
  HALS_IOUADriver *v2;
  HALS_Object *v3;
  unsigned int *v4;
  uint64_t v5;
  const AudioObjectPropertyAddress *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  int *v16;
  int v17;
  HALS_ObjectMap *v18;
  HALS_Object *v19;
  unsigned int *v20;
  AMCP::Log::Scope_Registry *v21;
  HALS_Object *v22;
  HALB_Info *v23;
  BOOL v25;
  int v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *v39;
  int v40;
  char v41;
  uint64_t v42;
  const AudioObjectPropertyAddress *v43;
  AudioObjectPropertySelector mSelector;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  AudioObjectPropertyElement *p_mElement;
  NSObject *v54;
  uint8x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  unsigned __int32 v65;
  char v66;
  _BYTE buf[38];
  __int16 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_IOUADriver *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  v4 = (unsigned int *)v2;
  if (!v2)
    goto LABEL_89;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(const AudioObjectPropertyAddress **)v5;
  v7 = (unsigned __int128)((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v8 = (v7 >> 1) + ((unint64_t)v7 >> 63);
  v9 = a1[6];
  if (v9 != 1)
  {
    v18 = HALS_IOUADriver::CopyObjectByUCID(v2, v9);
    v20 = (unsigned int *)v18;
    if (!v18)
    {
LABEL_88:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v19);
      goto LABEL_89;
    }
    v21 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v18 + 40))(v18);
    if (!(_DWORD)v21)
    {
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v33 = *(std::__shared_weak_count **)&buf[8];
      v34 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        v37 = pthread_self();
        v38 = pthread_mach_thread_np(v37);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_IOUADriver.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 974;
        _os_log_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOUADriver::HandlePropertiesChanged: the object is not active yet", buf, 0x18u);
      }
      goto LABEL_88;
    }
    v22 = (HALS_Object *)v20[5];
    v23 = (HALB_Info *)v20[6];
    if ((_DWORD)v22 == (_DWORD)v23 || (_DWORD)v22 == 1633841016)
    {
      v25 = (_DWORD)v22 == (_DWORD)v23;
      if ((_DWORD)v22 == 1633841016)
        v25 = 0;
      if (!v25)
        goto LABEL_51;
    }
    else if ((_DWORD)v23 == 1633841016)
    {
LABEL_51:
      if ((_DWORD)v8)
      {
        v41 = 0;
        v42 = v8;
        v43 = v6;
        do
        {
          mSelector = v43->mSelector;
          ++v43;
          v41 |= mSelector == 1668575852;
          --v42;
        }
        while (v42);
        if ((v41 & 1) != 0)
          HALS_IOUABox::UpdateControls((HALS_IOUABox *)v20);
      }
LABEL_105:
      HALS_Object::PropertiesChanged((HALS_Object *)v20, (HALS_NotificationManager *)v20[4], 0, v8, v6);
      goto LABEL_88;
    }
    if ((int)v22 <= 1701078389)
    {
      if ((_DWORD)v22 == 1633773415)
      {
LABEL_78:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v51 = v20[4];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1494;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v51;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = v20 + 39;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandlePropertiesChanged: Object: %d: %s", buf, 0x22u);
        }
        if ((_DWORD)v8)
        {
          v52 = v8;
          p_mElement = &v6->mElement;
          v54 = MEMORY[0x1E0C81028];
          v55.i32[1] = 0;
          do
          {
            v55.i32[0] = *(p_mElement - 2);
            v56 = (int16x8_t)vmovl_u8(v55);
            *(int16x4_t *)v56.i8 = vrev64_s16(*(int16x4_t *)v56.i8);
            *(int8x8_t *)v56.i8 = vmovn_s16(v56);
            LODWORD(v63) = v56.i32[0];
            BYTE4(v63) = 0;
            v56.i32[0] = *(p_mElement - 1);
            v57 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8);
            *(int16x4_t *)v57.i8 = vrev64_s16(*(int16x4_t *)v57.i8);
            v65 = vmovn_s16(v57).u32[0];
            v66 = 0;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              v58 = *p_mElement;
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1499;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = &v63;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = &v65;
              v68 = 2048;
              v69 = v58;
              _os_log_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d    '%s', '%s', %lu", buf, 0x30u);
            }
            p_mElement += 3;
            --v52;
          }
          while (v52);
          v59 = v8;
        }
        else
        {
          v59 = 0;
        }
        HALS_Object::PropertiesChanged((HALS_Object *)v20, (HALS_NotificationManager *)v20[4], 0, v59, v6);
        goto LABEL_88;
      }
      v26 = 1633969526;
    }
    else
    {
      if ((_DWORD)v22 == 1701078390 || (_DWORD)v22 == 1701733488)
        goto LABEL_78;
      v26 = 1919182198;
    }
    if ((_DWORD)v22 == v26)
      goto LABEL_78;
    if ((_DWORD)v22 == (_DWORD)v23)
    {
      if ((_DWORD)v22 == 1634956402)
      {
LABEL_92:
        HALS_IOUAStream::HandlePropertiesChanged((HALS_IOUAStream *)v20, v8, v6);
        goto LABEL_88;
      }
    }
    else
    {
      if ((int)v23 <= 1701078389)
      {
        if ((_DWORD)v23 == 1633773415)
          goto LABEL_78;
        v60 = 1633969526;
      }
      else
      {
        if ((_DWORD)v23 == 1701078390 || (_DWORD)v23 == 1919182198)
          goto LABEL_78;
        v60 = 1701733488;
      }
      if ((_DWORD)v23 == v60)
        goto LABEL_78;
      if ((_DWORD)v22 == (_DWORD)v23 || (_DWORD)v22 == 1634956402 || (_DWORD)v23 == 1634956402)
        goto LABEL_92;
    }
    if (!HALS_Object::IsSubClass((HALS_Object *)v20[5], (HALB_Info *)v20[6], 1633907820)
      && !HALS_Object::IsSubClass(v22, v23, 1633905771))
    {
      goto LABEL_88;
    }
    goto LABEL_105;
  }
  v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUADriver *))(*(_QWORD *)v2 + 40))(v2);
  if ((_DWORD)v10)
  {
    memset(buf, 0, 24);
    if ((_DWORD)v8)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *((_QWORD *)a1 + 4);
LABEL_6:
      v16 = (int *)(v15 + 12 * v11);
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 5) - v15) >> 2) <= (v8 - 1))
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v17 = *v16;
        if (*v16 == 1651472419)
        {
          v14 = 1;
        }
        else if (v17 == 1668049699)
        {
          v13 = 1;
        }
        else if (v17 == 1684370979)
        {
          ++v11;
          v12 = 1;
          if (v11 != v8)
            goto LABEL_6;
LABEL_47:
          HALS_IOUADriver::RebuildDeviceList((HALS_IOUADriver *)&v63, (uint64_t)v4);
          *(_OWORD *)buf = v63;
          *(_QWORD *)&buf[16] = v64;
          v39 = (void *)v63;
          v40 = 1;
          if ((v13 & 1) == 0)
            goto LABEL_59;
          goto LABEL_58;
        }
        ++v11;
        v16 += 3;
      }
      while (v8 != v11);
      if ((v12 & 1) != 0)
        goto LABEL_47;
      v40 = 0;
      v39 = 0;
      if ((v13 & 1) == 0)
        goto LABEL_59;
LABEL_58:
      HALS_IOUADriver::RebuildClockDeviceList((HALS_IOUADriver *)v4);
LABEL_59:
      if ((v14 & 1) != 0)
        HALS_IOUADriver::RebuildBoxList((HALS_IOUADriver *)v4);
    }
    else
    {
      v40 = 0;
      v39 = 0;
    }
    HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)v4[4], 0, v8, v6);
    if (v40)
    {
      v61 = 0;
      v62 = 0;
      HALS_System::GetInstance(&v63, 0, &v61);
      HALS_System::CheckForDefaultDeviceChanges((HALS_PlatformBehaviors *)v63, (uint64_t)buf);
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v39 = *(void **)buf;
    }
    if (v39)
      operator delete(v39);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = *(std::__shared_weak_count **)&buf[8];
    v28 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOUADriver.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 934;
      _os_log_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOUADriver::HandlePropertiesChanged: the object is not active yet", buf, 0x18u);
    }
  }
LABEL_89:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v4, v3);
}

void sub_1B5916374(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap *v20;
  HALS_ObjectMap *v21;
  HALS_Object *v23;

  HALS_ObjectMap::ReleaseObject(v21, a2);
  HALS_ObjectMap::ReleaseObject(v20, v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HALS_IOUAUCDriver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69742F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOUAUCDriver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69742F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_IOUAUCDriver>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v2 = (_QWORD *)(a1 + 720);
  v3 = *(_QWORD **)(a1 + 744);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 712);
  if (v5 == (_QWORD *)(a1 + 688))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 688);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 680));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 360));
  IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 352));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 32));
  result = *(unsigned int *)(a1 + 24);
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

void ___ZN15HALS_IOUADriver25RemoveAllDevicesAndNotifyEv_block_invoke(uint64_t a1)
{
  HALS_System **v1;
  HALB_Mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  HALS_Object *v6;
  HALS_Device *v7;
  HALB_Mutex *v8;
  HALB_Mutex *v9;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **j;
  HALS_ObjectMap *v12;
  HALS_System *v13;
  const BOOL *v14;
  unsigned int v15;
  const __CFString *v16;
  HALB_Mutex *v17;
  HALB_Mutex *v18;
  HALS_Object *v19;
  HALS_ObjectMap **v20;
  HALS_ObjectMap **k;
  HALS_ObjectMap ***v22;
  HALB_Mutex *v23;
  HALS_Object *v24;
  HALS_Object *v25;
  HALS_NotificationManager *v26;
  HALS_ObjectMap **v27;
  HALS_ObjectMap **v28;
  uint64_t v29;
  HALS_ObjectMap **v30;
  HALS_ObjectMap **v31;
  uint64_t v32;
  _QWORD v33[6];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 (*v37)(_QWORD *, uint64_t);
  void (*v38)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v39[3];
  _QWORD v40[6];
  _QWORD v41[6];
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  HALS_System **v46;
  HALS_ObjectMap ***v47;
  uint64_t v48;

  v1 = *(HALS_System ***)(a1 + 32);
  v34 = 0;
  v35 = &v34;
  v36 = 0x4002000000;
  v37 = __Block_byref_object_copy__2551;
  v38 = __Block_byref_object_dispose__2552;
  memset(v39, 0, sizeof(v39));
  v2 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 6))(v1);
  v3 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 0x40000000;
  v33[2] = ___ZN15HALS_IOUADriver17_RemoveAllDevicesEv_block_invoke;
  v33[3] = &unk_1E6974158;
  v33[4] = &v34;
  v33[5] = v1;
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v33);
  v4 = v35[5];
  for (i = v35[6]; v4 != i; v4 += 8)
  {
    if (*(_QWORD *)v4)
    {
      v7 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)v4 + 16));
      if (v7)
      {
        HALS_System::DeviceDied(v1[40], v7);
        (*(void (**)(HALS_Device *))(*(_QWORD *)v7 + 456))(v7);
        (*(void (**)(HALS_Device *))(*(_QWORD *)v7 + 8))(v7);
        v40[0] = v3;
        v40[1] = 0x40000000;
        v40[2] = ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke;
        v40[3] = &__block_descriptor_tmp_6_2529;
        v40[4] = v1;
        v40[5] = v7;
        v8 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
        HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v40);
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
    }
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v42 = v3;
  v43 = 0x40000000;
  v44 = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  v45 = &__block_descriptor_tmp_7_8182;
  v46 = v1;
  v47 = &v30;
  v9 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)&v42);
  v10 = v30;
  for (j = v31; v10 != j; ++v10)
  {
    v12 = *v10;
    v13 = v1[40];
    v14 = (const BOOL *)*((unsigned int *)*v10 + 4);
    v15 = *((_DWORD *)*v10 + 7);
    v16 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)*v10 + 200))(*v10);
    HALS_System::ClockDeviceDied(v13, v14, v15, v16);
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v12 + 8))(v12);
    v41[0] = v3;
    v41[1] = 0x40000000;
    v41[2] = ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke;
    v41[3] = &__block_descriptor_tmp_9_2518;
    v41[4] = v1;
    v41[5] = v12;
    v17 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v41);
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v42 = v3;
  v43 = 0x40000000;
  v44 = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v45 = &__block_descriptor_tmp_8181;
  v46 = v1;
  v47 = &v27;
  v48 = 0;
  v18 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v18, (uint64_t)&v42);
  v20 = v27;
  for (k = v28; v20 != k; ++v20)
  {
    v22 = (HALS_ObjectMap ***)*v20;
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v20 + 8))(*v20);
    v42 = v3;
    v43 = 0x40000000;
    v44 = ___ZN15HALS_IOUADriver9RemoveBoxEP12HALS_IOUABox_block_invoke;
    v45 = &__block_descriptor_tmp_8_2554;
    v46 = v1;
    v47 = v22;
    v23 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v23, (uint64_t)&v42);
  }
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v27, v19);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v30, v24);
  _Block_object_dispose(&v34, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v39, v25);
  v26 = (HALS_NotificationManager *)*((unsigned int *)v1 + 4);
  v34 = 0x676C6F6264657623;
  LODWORD(v35) = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)v1, v26, 0, 1, (const AudioObjectPropertyAddress *)&v34);
  HALS_System::CheckForDefaultDeviceChanges(v1[40]);
}

void sub_1B591689C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, HALS_ObjectMap ***a10, HALS_ObjectMap **a11, uint64_t a12, uint64_t a13, HALS_ObjectMap **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  HALS_Object *v24;
  HALS_Object *v25;

  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a11, a2);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a14, v24);
  _Block_object_dispose(&a23, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(a10, v25);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2551(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2552(uint64_t a1, HALS_Object *a2)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)(a1 + 40), a2);
}

uint64_t ___ZN15HALS_IOUADriver17_RemoveAllDevicesEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void ___ZN15HALS_IOUADriver9RemoveBoxEP12HALS_IOUABox_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  int64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(HALS_ObjectMap ***)(v2 + 856);
  v4 = *(HALS_ObjectMap ***)(v2 + 864);
  if (v3 != v4)
  {
    while (*v3 != *(HALS_ObjectMap **)(a1 + 40))
    {
      if (++v3 == v4)
      {
        v3 = *(HALS_ObjectMap ***)(v2 + 864);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    HALS_ObjectMap::ReleaseObject(*v3, a2);
    v5 = *(HALS_ObjectMap ***)(v2 + 864);
    v6 = (char *)v5 - (char *)(v3 + 1);
    if (v5 != v3 + 1)
      memmove(v3, v3 + 1, (char *)v5 - (char *)(v3 + 1));
    *(_QWORD *)(v2 + 864) = (char *)v3 + v6;
  }
}

_QWORD *std::unique_ptr<CASettingsStorage>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  const void *v3;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      MEMORY[0x1B5E50664](*v2, 0x1000C8077774924);
    v3 = (const void *)v2[2];
    if (v3)
      CFRelease(v3);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_SettingsManager::_InitSettings(_QWORD *a1, uint64_t a2, const char *a3, const char *a4)
{
  const char *v7;
  CASettingsStorage *v8;
  CFMutableDictionaryRef **v9;
  CASettingsStorage *v10;
  CASettingsStorage *v11;
  HALS_PlatformBehaviors *v12;
  uint64_t *platform_behaviors;
  const void *v14;
  CFDictionaryRef *v15;
  CFTypeID v16;
  const void *v17;
  CFMutableDictionaryRef *v18;
  _QWORD *v19;
  CFDictionaryRef *v20;
  CFTypeID v21;
  CFMutableDictionaryRef *v22;
  int valuePtr;
  uint64_t v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  v8 = (CASettingsStorage *)operator new();
  CASettingsStorage::CASettingsStorage(v8, v7, 1, (CFPropertyListFormat)0);
  v9 = (CFMutableDictionaryRef **)(a1 + 3);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100](a1 + 3, (uint64_t)v8);
  if (a3[23] < 0)
    a3 = *(const char **)a3;
  v10 = (CASettingsStorage *)operator new();
  CASettingsStorage::CASettingsStorage(v10, a3, 0, kCFPropertyListOpenStepFormat);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100](a1 + 4, (uint64_t)v10);
  if (a4[23] < 0)
    a4 = *(const char **)a4;
  v11 = (CASettingsStorage *)operator new();
  CASettingsStorage::CASettingsStorage(v11, a4, 0, kCFPropertyListOpenStepFormat);
  v12 = (HALS_PlatformBehaviors *)std::unique_ptr<CASettingsStorage>::reset[abi:ne180100](a1 + 5, (uint64_t)v11);
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v12);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 48))(platform_behaviors) == 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_SettingsManager.cpp";
      v26 = 1024;
      v27 = 100;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::_InitSettings: starting fresh...", buf, 0x12u);
    }
    CASettingsStorage::RemoveAllValues(*v9);
  }
  v15 = *v9;
  valuePtr = 0;
  *(_QWORD *)buf = 0;
  CASettingsStorage::CopyCFTypeValue(v15, CFSTR("version"), (const void **)buf, v14);
  if (!*(_QWORD *)buf)
    goto LABEL_16;
  v16 = CFGetTypeID(*(CFTypeRef *)buf);
  if (v16 == CFNumberGetTypeID())
    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberSInt32Type, &valuePtr);
  CFRelease(*(CFTypeRef *)buf);
  if (!valuePtr)
  {
LABEL_16:
    CASettingsStorage::RemoveAllValues(*v9);
    v18 = *v9;
    LODWORD(v24) = 1;
    *(_QWORD *)buf = CFNumberCreate(0, kCFNumberSInt32Type, &v24);
    buf[8] = 1;
    CASettingsStorage::SetCFTypeValue(v18, CFSTR("version"), *(const void **)buf);
    CACFNumber::~CACFNumber((CACFNumber *)buf);
  }
  a1[6] = 0;
  v19 = a1 + 6;
  v20 = (CFDictionaryRef *)*(v19 - 3);
  *(_QWORD *)buf = 0;
  CASettingsStorage::CopyCFTypeValue(v20, CFSTR("seed"), (const void **)buf, v17);
  if (*(_QWORD *)buf)
  {
    v21 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v21 == CFNumberGetTypeID())
      CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberSInt64Type, v19);
    CFRelease(*(CFTypeRef *)buf);
  }
  v22 = *v9;
  v24 = *v19 + 1;
  *(_QWORD *)buf = CFNumberCreate(0, kCFNumberSInt64Type, &v24);
  buf[8] = 1;
  CASettingsStorage::SetCFTypeValue(v22, CFSTR("seed"), *(const void **)buf);
  CACFNumber::~CACFNumber((CACFNumber *)buf);
}

void sub_1B5916D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<__CFString const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B5916DD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK20HALS_SettingsManager16CopySettingsKeysEjRjPPK10__CFString_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD *v3;
  const void **v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD **)(a1 + 40);
  v4 = *(const void ***)(a1 + 48);
  *v3 = 0;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 24));
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 16), v4, 0);
    *v3 = v1;
    if (v1)
    {
      v6 = 0;
      do
        CFRetain(v4[v6++]);
      while (v6 < *v3);
    }
  }
}

void sub_1B5916E64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2)
{
  std::regex_traits<char> *v4;
  size_t v5;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, a2, &a2[v5]) != &a2[v5])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1B5916EE8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::locale *v2;
  std::locale *v4;
  void *v5;
  std::locale *v6;

  v1 = *a1;
  v2 = (std::locale *)**a1;
  if (v2)
  {
    v4 = (std::locale *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 8;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v4[-3]);
        std::locale::~locale(v6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HALS_SettingsManager::DeleteSetting(HALS_SettingsManager *this, CFTypeRef cf)
{
  uint64_t v4;
  CFTypeRef v5;
  unsigned __int8 v6;
  NSObject *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  CFTypeRef v18;
  CFTypeRef cfa;
  uint64_t v20;

  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  }
  else
  {
    cfa = 0;
  }
  v4 = *((_QWORD *)this + 2);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v16, *(_QWORD *)this, *((std::__shared_weak_count **)this + 1));
  v5 = cfa;
  if (cfa)
    CFRetain(cfa);
  v18 = v5;
  v6 = atomic_load((unsigned __int8 *)(v4 + 32));
  if ((v6 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v4 + 33));
  v7 = *(NSObject **)v4;
  v8 = (_QWORD *)operator new();
  v9 = v17;
  *v8 = v16;
  v8[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = v18;
  if (v18)
    CFRetain(v18);
  v8[2] = v12;
  v20 = 0;
  dispatch_async_f(v7, v8, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100](&v20);
  if (v18)
    CFRelease(v18);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (cfa)
    CFRelease(cfa);
}

void sub_1B59170E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  CFMutableDictionaryRef *v1;
  const void *v2;
  _QWORD *v4;

  v4 = a1;
  v1 = *(CFMutableDictionaryRef **)(*a1 + 24);
  if (v1)
  {
    v2 = (const void *)a1[2];
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(*a1 + 24));
    CFDictionaryRemoveValue(v1[2], v2);
    CASettingsStorage::SaveSettings((CASettingsStorage *)v1);
  }
  return std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_1B5917154(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B591713CLL);
}

void sub_1B5917160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
      CFRelease(v3);
    v4 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v4, 0x60C40149E097CLL);
  }
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    v22 = *(char **)(a1 + 8);
    if (v11 >= v14)
      goto LABEL_22;
    v22 = &v12[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
  {
    v22 = &v13[24 * v15];
    v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      v13[16] = 0;
      v13 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v22;
    goto LABEL_22;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
  v18 = 2 * v17;
  if (2 * v17 <= v11)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  if (v17 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[24 * v14];
  v22 = &v20[24 * v11];
  v23 = v21;
  v24 = 24 * v11 - 24 * v14;
  do
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  v25 = *(char **)a1;
  if (v13 != *(char **)a1)
  {
    do
    {
      v26 = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v21 - 1) = *((_QWORD *)v13 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v13 -= 24;
    }
    while (v13 != v25);
    v13 = *(char **)a1;
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = &v20[24 * v19];
  if (v13)
  {
    operator delete(v13);
    v22 = *(char **)(a1 + 8);
  }
LABEL_22:
  v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    v29 = 0;
    v30 = 0;
    v32 = *a4;
    v31 = a4[1];
    do
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      v34 = (_QWORD *)(v32 + v29);
      if (v33 <= v30)
        v35 = a4 + 3;
      else
        v35 = v34;
      *(_QWORD *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v29);
      *(_QWORD *)(*(_QWORD *)a1 + v29 + 8) = a2 + v36[1] - v10;
      v32 = *a4;
      v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30)
        v37 = a4 + 3;
      else
        v37 = (uint64_t *)(*a4 + v29);
      v38 = *((_BYTE *)v37 + 16);
      v28 = *(char **)a1;
      v39 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v40 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const char *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  const char *v159;
  char v160;
  const char *v161;
  const char *i;
  const char *v163;
  __int16 v164;
  const char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v165 = (const char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v149 = a4;
      v13 = v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v161 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
      v153 = 0;
      v155 = 0;
      v151 = 0;
      v152 = 0;
      v156 = 0;
      v148 = 0;
      v14 = 0;
      v158 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != v161)
              goto LABEL_21;
            v28 = v153;
            if ((v158 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v159 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v152 - (uint64_t)v155) >> 3) >= v31)
              {
                v37 = (uint64_t)v148;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v155;
                    v44 = v155;
                  }
                  else
                  {
                    v43 = v155;
                    v44 = v155;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v153 - v155) >> 3));
                  if (v153 != v155)
                  {
                    v40 = v155;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v153;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v153;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v152 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_217;
                v32 = 0x5555555555555556 * (v152 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v152 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_217:
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v148;
                }
                else
                {
                  v37 = (uint64_t)v148;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v152 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v155 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v156) >> 4)
              {
                v56 = (v151 - v156) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v156;
                    v62 = v156;
                  }
                  else
                  {
                    v62 = v156;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v156;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v159;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v151 != v156)
                  {
                    v58 = v156;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                  }
                  else
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v154 = v45;
                v49 = v28;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_216;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_216:
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v148 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v156 = v52;
                v28 = v49;
                v14 = v159;
                v45 = v154;
              }
              v153 = &v28[v45];
              v151 = &v61[(_QWORD)v52];
            }
            v64 = v166[1];
            if (v14 == v165)
            {
              v65 = v166[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v64);
              }
              v166[1] = v65;
              v158 = 1;
              v14 = v165;
            }
            else
            {
              v66 = (char *)v166[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v166[1] - 12);
              v166[1] = v66;
              v158 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      if ((v158 & 1) != 0)
      {
        v68 = *v149;
        *(_QWORD *)v68 = v10;
        *(_QWORD *)(v68 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v68 + 16) = 1;
        v69 = v155;
        if (v153 != v155)
        {
          v70 = v155 + 16;
          v71 = 1;
          do
          {
            v72 = v68 + 24 * v71;
            *(_OWORD *)v72 = *((_OWORD *)v70 - 1);
            v73 = *v70;
            v70 += 24;
            *(_BYTE *)(v72 + 16) = v73;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) > v71++;
          }
          while (v17);
        }
        v74 = 1;
      }
      else
      {
        v74 = 0;
        v69 = v155;
      }
      if (v156)
        operator delete(v156);
      if (v69)
        operator delete(v69);
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)v169 = v166;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v75 = v166[1];
      v76 = v168.i64[1] + v168.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v166[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v81 = 0;
      v82 = v168.i64[1];
      v83 = v166[1];
      v84 = v168.i64[1] + v168.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v157 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v165)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v168.i64[0] - 1;
        v90 = *((_QWORD *)v166[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(const char **)(v90 + 96 * v91 + 16);
            v96 = (v7 & 0x1000) == 0 || v95 == v9;
            v97 = v96;
            v98 = v95 != v10 || (v7 & 0x20) == 0;
            if (!v98 || (v97 & 1) == 0)
              goto LABEL_200;
            v99 = (uint64_t)&v95[-*(_QWORD *)(v90 + 96 * v91 + 8)];
            v100 = v157;
            if ((v160 & ((uint64_t)v157 >= v99)) == 0)
              v100 = (char *)v99;
            if (v100 != v165)
            {
              v157 = v100;
              std::deque<std::__state<char>>::pop_back(v166);
              v160 = 1;
              goto LABEL_201;
            }
            v101 = (void **)v166[1];
            v102 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v102 = v166[1];
            }
            else
            {
              v103 = v10;
              v104 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v105 = (_QWORD *)(*v104 + 96 * (v168.i64[0] % 0x2AuLL));
              v106 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v105 != (_QWORD *)v106)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v105);
                  v105 += 12;
                  if ((_QWORD *)((char *)v105 - *v104) == (_QWORD *)4032)
                  {
                    v107 = (_QWORD *)v104[1];
                    ++v104;
                    v105 = v107;
                  }
                }
                while (v105 != (_QWORD *)v106);
                v101 = (void **)v166[1];
                v102 = (_BYTE *)v167;
              }
              v10 = v103;
            }
            v168.i64[1] = 0;
            v138 = v102 - (_BYTE *)v101;
            if (v138 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v166[1] + 8);
                v166[1] = v101;
                v138 = v167 - (_QWORD)v101;
              }
              while ((_QWORD)v167 - (_QWORD)v101 > 0x10uLL);
            }
            if (v138 >> 3 == 1)
            {
              v139 = 21;
            }
            else
            {
              if (v138 >> 3 != 2)
                goto LABEL_188;
              v139 = 42;
            }
            v168.i64[0] = v139;
LABEL_188:
            v160 = 1;
            v157 = (char *)v165;
LABEL_201:
            v82 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v147 = *v150;
              *(_QWORD *)v147 = v10;
              *(_QWORD *)(v147 + 8) = &v157[(_QWORD)v10];
              v74 = 1;
              *(_BYTE *)(v147 + 16) = 1;
            }
            else
            {
              v74 = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_201;
          case 0xFFFFFC1D:
            v108 = v168.i64[0];
            v109 = (char *)v166[1];
            v110 = (char *)v167;
            if (!v168.i64[0])
            {
              v113 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v114 = 42 * v113 - 1;
              if ((void *)v167 == v166[1])
                v114 = 0;
              if ((unint64_t)(v114 - v168.i64[1]) < 0x2A)
              {
                if (v113 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v115);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v116;
                  v163 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v169, &__x);
                  v117 = (uint64_t *)v166[1];
                  v118 = *(char **)&v169[16];
                  for (i = v9; v117 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (v118 == *(char **)&v169[24])
                    {
                      v119 = *(char **)&v169[8];
                      v120 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (v118 == *(char **)v169)
                          v127 = 1;
                        else
                          v127 = (uint64_t)&v118[-*(_QWORD *)v169] >> 2;
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v127);
                        v130 = &v128[8 * (v127 >> 2)];
                        v131 = v118 - v119;
                        v96 = v118 == v119;
                        v118 = v130;
                        v9 = i;
                        if (!v96)
                        {
                          v118 = &v130[v131 & 0xFFFFFFFFFFFFFFF8];
                          v132 = 8 * (v131 >> 3);
                          v133 = v130;
                          do
                          {
                            v134 = *(_QWORD *)v119;
                            v119 += 8;
                            *(_QWORD *)v133 = v134;
                            v133 += 8;
                            v132 -= 8;
                          }
                          while (v132);
                        }
                        *(_QWORD *)v169 = v128;
                        *(_QWORD *)&v169[8] = v130;
                        *(_QWORD *)&v169[16] = v118;
                        *(_QWORD *)&v169[24] = &v128[8 * v129];
                        if (v120)
                          operator delete(v120);
                      }
                      else
                      {
                        v121 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v121 >= -1)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 2;
                        v123 = *(_QWORD *)&v169[8] - 8 * (v122 >> 1);
                        v124 = (size_t)&v118[-*(_QWORD *)&v169[8]];
                        if (v118 != *(char **)&v169[8])
                        {
                          v125 = (void *)(*(_QWORD *)&v169[8] - 8 * (v122 >> 1));
                          memmove(v125, *(const void **)&v169[8], v124);
                          v123 = (uint64_t)v125;
                          v118 = v119;
                        }
                        v126 = &v118[-8 * (v122 >> 1)];
                        v118 = (char *)(v123 + v124);
                        *(_QWORD *)&v169[8] = v126;
                        *(_QWORD *)&v169[16] = v123 + v124;
                        v9 = i;
                      }
                    }
                    v135 = *v117++;
                    *(_QWORD *)v118 = v135;
                    v118 = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v136 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = v118;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v137 = 21;
                  if (&v118[-*(_QWORD *)&v169[8]] != (char *)8)
                    v137 = v168.i64[0] + 42;
                  v168.i64[0] = v137;
                  v10 = v163;
                  if (v136)
                    operator delete(v136);
                  LOWORD(v7) = v164;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                  v140 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v140 = v168.i64[0] + 42;
                  v168.i64[0] = v140;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
              }
              v108 = v168.i64[0];
              v109 = (char *)v166[1];
              v110 = (char *)v167;
            }
            v141 = &v109[8 * (v108 / 0x2A)];
            v142 = *(_QWORD *)v141 + 96 * (v108 % 0x2A);
            if (v110 == v109)
              v143 = 0;
            else
              v143 = v142;
            if (v143 == *(_QWORD *)v141)
              v143 = *((_QWORD *)v141 - 1) + 4032;
            v144 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v143 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v143 - 80) = v144;
            v145 = v90 + 96 * v91;
            *(_QWORD *)(v143 - 56) = 0;
            *(_QWORD *)(v143 - 48) = 0;
            *(_QWORD *)(v143 - 64) = 0;
            *(_OWORD *)(v143 - 64) = *(_OWORD *)(v145 + 32);
            *(_QWORD *)(v143 - 48) = *(_QWORD *)(v145 + 48);
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 40) = 0;
            *(_QWORD *)(v145 + 48) = 0;
            *(_QWORD *)(v143 - 40) = 0;
            *(_QWORD *)(v143 - 32) = 0;
            *(_QWORD *)(v143 - 24) = 0;
            *(_OWORD *)(v143 - 40) = *(_OWORD *)(v145 + 56);
            *(_QWORD *)(v143 - 24) = *(_QWORD *)(v145 + 72);
            *(_QWORD *)(v145 + 56) = 0;
            *(_QWORD *)(v145 + 64) = 0;
            *(_QWORD *)(v145 + 72) = 0;
            v146 = *v94;
            *(_QWORD *)(v143 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v143 - 16) = v146;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_1B5D68C30);
            goto LABEL_200;
          case 0xFFFFFC1F:
LABEL_200:
            std::deque<std::__state<char>>::pop_back(v166);
            goto LABEL_201;
          case 0xFFFFFC20:
            v111 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v92;
            *(_OWORD *)&v169[16] = v111;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v112 = *v94;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v92 + 85);
            v171[1] = v112;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_201;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
  }
  return v74;
}

void sub_1B5918640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_1B5918C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B5919124(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B591921C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B591928C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B59192E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1B5919808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1B5E50508]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1B5919CD4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__owns_one_state<char> *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  std::__owns_one_state<char> *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::__owns_one_state<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E69986E0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E6998738;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v14 > 0x3F)
  {
    switch(v14)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v18 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v18)
          v19 = v18;
        else
          v19 = (unsigned __int8 *)a3;
        if (v19 == (unsigned __int8 *)a2)
        {
          v29 = (_QWORD *)operator new();
          v30 = *(_QWORD *)(a1 + 56);
          v31 = *(_QWORD *)(v30 + 8);
          v29[1] = v31;
          *(_QWORD *)(v30 + 8) = v29;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v19);
        }
        if (v19 != (unsigned __int8 *)a3)
          ++v19;
        while (v19 != (unsigned __int8 *)a3)
        {
          v32 = (unsigned __int8 *)memchr(v19, 10, a3 - (char *)v19);
          if (v32)
            v33 = v32;
          else
            v33 = (unsigned __int8 *)a3;
          v34 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v33 == v19)
          {
            v35 = (_QWORD *)operator new();
            v36 = *(_QWORD *)(a1 + 56);
            v37 = *(_QWORD *)(v36 + 8);
            v35[1] = v37;
            *(_QWORD *)(v36 + 8) = v35;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v19, v33);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v34);
          if (v33 == (unsigned __int8 *)a3)
            v19 = v33;
          else
            v19 = v33 + 1;
        }
        break;
      case 0x100u:
        v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15)
          v16 = v15;
        else
          v16 = a3;
        if (v16 == a2)
        {
          v20 = (_QWORD *)operator new();
          v21 = *(_QWORD *)(a1 + 56);
          v22 = *(_QWORD *)(v21 + 8);
          v20[1] = v22;
          *(_QWORD *)(v21 + 8) = v20;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v16);
        }
        if (v16 != a3)
          ++v16;
        while (v16 != a3)
        {
          v23 = (char *)memchr(v16, 10, a3 - v16);
          if (v23)
            v24 = v23;
          else
            v24 = a3;
          v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v24 == v16)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 56);
            v28 = *(_QWORD *)(v27 + 8);
            v26[1] = v28;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v16, v24);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v25);
          if (v24 == a3)
            v16 = v24;
          else
            v16 = v24 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return a3;
  }
  else if (v14)
  {
    if (v14 != 16)
    {
      if (v14 != 32)
LABEL_54:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_1B591A09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591A108(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E6998830;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E6998878;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591A474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1E6998CF8;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1E6998D40;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E50688);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1B5E50688);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E50688);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591A884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *first;
  int v20;
  uint64_t v21;
  BOOL v22;
  std::__owns_one_state<char> *v23;
  std::__node<char> *v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (this->__open_count_)
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (std::__node<char> *)operator new();
      v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_1E6998D88;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_1E6998878;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      v26 = this->__marked_count_;
      ++this->__open_count_;
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_1E6998830;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      v23->__first_ = (std::__node<char> *)v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1E6998B90;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591AC68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1E6998BD8;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E6998C20;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E6998CB0;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1B591B0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591B1E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591B234(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998C80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E50688);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  char *j;
  char *v15;
  unint64_t i;
  int v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int128 *v22;
  const char *v23;
  std::regex_traits<char>::char_class_type classname;
  char v25;
  unint64_t v26;
  char *v27;
  void **v28;
  uint64_t v29;
  __int128 *v30;
  std::string::value_type *v31;
  std::string::value_type **v32;
  int v33;
  void **v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  std::string::value_type *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  std::vector<std::string>::pointer v43;
  __int128 *v44;
  char *k;
  void **v46;
  char v47;
  void **v48;
  char *m;
  void **v50;
  char v51;
  void **v52;
  void *v53;
  void *v54;
  void **v55;
  char v56;
  void **v57;
  void **v58;
  char v59;
  void **v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char **v69;
  uint64_t v70;
  char *v71;
  void *v72[2];
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  void *v76[2];
  uint64_t v77;
  void *__p[2];
  uint64_t v79;
  std::string::value_type *__s[2];
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_237;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_237;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_237;
    v69 = (char **)(v7 + 88);
    v70 = v7 + 16;
    v71 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      v9 = a3;
      if ((char *)v5 == a3)
        goto LABEL_140;
      v10 = *(unsigned __int8 *)v5;
      v9 = (char *)v5;
      if (v10 == 93)
        goto LABEL_140;
      v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v79 = 0;
      v12 = 0;
      v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            v12 = (void *)HIBYTE(v79);
            v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_236;
            for (i = 0; ; ++i)
            {
              v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v71[-v5] == (char *)i)
                goto LABEL_236;
            }
            if (v15 == a3)
LABEL_236:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v84, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            v21 = HIBYTE(v85);
            if (v85 >= 0)
              v22 = &v84;
            else
              v22 = (__int128 *)v84;
            if (v85 < 0)
              v21 = *((_QWORD *)&v84 + 1);
            (*(void (**)(_QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v22, (char *)v22 + v21);
            if (v85 >= 0)
              v23 = (const char *)&v84;
            else
              v23 = (const char *)v84;
            classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v85) < 0)
              operator delete((void *)v84);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_136;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_236;
            for (j = 0; ; ++j)
            {
              v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93)
                break;
              if (&v71[-v5] == j)
                goto LABEL_236;
            }
            if (v15 == a3)
              goto LABEL_236;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v82, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v83) < 0)
            {
              v26 = *((_QWORD *)&v82 + 1);
              if (!*((_QWORD *)&v82 + 1))
LABEL_238:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v27 = (char *)v82;
            }
            else
            {
              v26 = HIBYTE(v83);
              if (!HIBYTE(v83))
                goto LABEL_238;
              v27 = (char *)&v82;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v84, v27, &v27[v26], v26);
            v29 = HIBYTE(v85);
            if (v85 >= 0)
              v30 = &v84;
            else
              v30 = (__int128 *)v84;
            if (v85 < 0)
              v29 = *((_QWORD *)&v84 + 1);
            (*(void (**)(std::string::value_type **__return_ptr, _QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 16) + 32))(__s, *(_QWORD *)(a1 + 16), v30, (char *)v30 + v29);
            v31 = (std::string::value_type *)HIBYTE(v81);
            if (v81 < 0)
              v31 = __s[1];
            if (v31 != (std::string::value_type *)1)
            {
              if (v31 == (std::string::value_type *)12)
              {
                v32 = __s;
                if (v81 < 0)
                  v32 = (std::string::value_type **)__s[0];
                *((_BYTE *)v32 + 11) = *((_BYTE *)v32 + 3);
              }
              else if (SHIBYTE(v81) < 0)
              {
                *__s[0] = 0;
                __s[1] = 0;
              }
              else
              {
                LOBYTE(__s[0]) = 0;
                HIBYTE(v81) = 0;
              }
            }
            if (SHIBYTE(v85) < 0)
              operator delete((void *)v84);
            v38 = (std::string::value_type *)HIBYTE(v81);
            if (v81 < 0)
              v38 = __s[1];
            if (v38)
            {
              v39 = *(_QWORD *)(v7 + 144);
              if (v39 >= *(_QWORD *)(v7 + 152))
              {
                v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(v7 + 136), (__int128 *)__s);
              }
              else
              {
                if (SHIBYTE(v81) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
                }
                else
                {
                  v40 = *(_OWORD *)__s;
                  *(_QWORD *)(v39 + 16) = v81;
                  *(_OWORD *)v39 = v40;
                }
                v43 = (std::vector<std::string>::pointer)(v39 + 24);
                *(_QWORD *)(v7 + 144) = v39 + 24;
              }
              *(_QWORD *)(v7 + 144) = v43;
            }
            else
            {
              v41 = HIBYTE(v83);
              if (v83 < 0)
                v41 = *((_QWORD *)&v82 + 1);
              if (v41 == 2)
              {
                v44 = &v82;
                if (v83 < 0)
                  v44 = (__int128 *)v82;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v44, *((char *)v44 + 1));
              }
              else
              {
                if (v41 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                v42 = &v82;
                if (v83 < 0)
                  v42 = (__int128 *)v82;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v42);
              }
            }
            if (SHIBYTE(v81) < 0)
              operator delete(__s[0]);
            if (SHIBYTE(v83) < 0)
              operator delete((void *)v82);
            v25 = 0;
LABEL_136:
            v5 = (uint64_t)(v15 + 2);
            v36 = v8;
            goto LABEL_137;
          default:
            v11 = 0;
            v12 = 0;
            v9 = (char *)v5;
            break;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0)
        v11 = v12;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          v17 = *v9;
          if (v17 == 92)
          {
            v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
              v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            else
              v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            v9 = v19;
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v79) = 1;
          v28 = __p;
        }
        *(_BYTE *)v28 = v17;
        *((_BYTE *)v28 + 1) = 0;
        ++v9;
      }
LABEL_81:
      if (v9 != a3)
      {
        v33 = *v9;
        if (v33 != 93)
        {
          v35 = v9 + 1;
          if (v9 + 1 != a3 && v33 == 45 && *v35 != 93)
          {
            v76[0] = 0;
            v76[1] = 0;
            v77 = 0;
            v36 = v9 + 2;
            if (v9 + 2 != a3 && *v35 == 91 && *v36 == 46)
            {
              v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v76);
              goto LABEL_144;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v35) = *v35;
              if ((_DWORD)v35 == 92)
              {
                if ((_DWORD)v5)
                  v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v76);
                else
                  v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v76, v7);
LABEL_144:
                v36 = v37;
LABEL_145:
                *(_OWORD *)v74 = *(_OWORD *)__p;
                v75 = v79;
                __p[1] = 0;
                v79 = 0;
                *(_OWORD *)v72 = *(_OWORD *)v76;
                v73 = v77;
                v76[0] = 0;
                v76[1] = 0;
                v77 = 0;
                __p[0] = 0;
                if (*(_BYTE *)(v7 + 170))
                {
                  if (*(_BYTE *)(v7 + 169))
                  {
                    for (k = 0; ; ++k)
                    {
                      if (SHIBYTE(v75) < 0)
                      {
                        if (k >= v74[1])
                        {
LABEL_157:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v73) < 0)
                            {
                              if (m >= v72[1])
                                goto LABEL_203;
                              v50 = (void **)v72[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v73))
                                goto LABEL_203;
                              v50 = v72;
                            }
                            v51 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), m[(_QWORD)v50]);
                            if (v73 >= 0)
                              v52 = v72;
                            else
                              v52 = (void **)v72[0];
                            m[(_QWORD)v52] = v51;
                          }
                        }
                        v46 = (void **)v74[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v75))
                          goto LABEL_157;
                        v46 = v74;
                      }
                      v47 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), k[(_QWORD)v46]);
                      if (v75 >= 0)
                        v48 = v74;
                      else
                        v48 = (void **)v74[0];
                      k[(_QWORD)v48] = v47;
                    }
                  }
                  v62 = 0;
                  if (v75 < 0)
                    goto LABEL_194;
                  while ((unint64_t)v62 < HIBYTE(v75))
                  {
                    while (1)
                    {
                      ++v62;
                      if ((v75 & 0x8000000000000000) == 0)
                        break;
LABEL_194:
                      if (v62 >= v74[1])
                        goto LABEL_197;
                    }
                  }
LABEL_197:
                  v63 = 0;
                  if (v73 < 0)
                    goto LABEL_200;
                  while ((unint64_t)v63 < HIBYTE(v73))
                  {
                    while (1)
                    {
                      ++v63;
                      if ((v73 & 0x8000000000000000) == 0)
                        break;
LABEL_200:
                      if (v63 >= v72[1])
                        goto LABEL_203;
                    }
                  }
LABEL_203:
                  v64 = (char *)HIBYTE(v75);
                  if (v75 >= 0)
                    v65 = (char *)v74;
                  else
                    v65 = (char *)v74[0];
                  if (v75 < 0)
                    v64 = (char *)v74[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v82, v70, v65, &v64[(_QWORD)v65]);
                  v66 = (char *)HIBYTE(v73);
                  if (v73 >= 0)
                    v67 = (char *)v72;
                  else
                    v67 = (char *)v72[0];
                  if (v73 < 0)
                    v66 = (char *)v72[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__s, v70, v67, &v66[(_QWORD)v67]);
                  v84 = v82;
                  v85 = v83;
                  v83 = 0;
                  v82 = 0uLL;
                  v86 = *(_OWORD *)__s;
                  v87 = v81;
                  __s[0] = 0;
                  __s[1] = 0;
                  v81 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v69, &v84);
                  if (SHIBYTE(v87) < 0)
                    operator delete((void *)v86);
                  if (SHIBYTE(v85) < 0)
                    operator delete((void *)v84);
                  if (SHIBYTE(v81) < 0)
                    operator delete(__s[0]);
                  if (SHIBYTE(v83) < 0)
                  {
                    v61 = (void *)v82;
LABEL_221:
                    operator delete(v61);
                  }
                }
                else
                {
                  v53 = (void *)HIBYTE(v75);
                  if (v75 < 0)
                    v53 = v74[1];
                  if (v53 != (void *)1)
                    goto LABEL_240;
                  v54 = (void *)HIBYTE(v73);
                  if (v73 < 0)
                    v54 = v72[1];
                  if (v54 != (void *)1)
LABEL_240:
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(_BYTE *)(v7 + 169))
                  {
                    if (v75 >= 0)
                      v55 = v74;
                    else
                      v55 = (void **)v74[0];
                    v56 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v55);
                    if (v75 >= 0)
                      v57 = v74;
                    else
                      v57 = (void **)v74[0];
                    *(_BYTE *)v57 = v56;
                    if (v73 >= 0)
                      v58 = v72;
                    else
                      v58 = (void **)v72[0];
                    v59 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v58);
                    if (v73 >= 0)
                      v60 = v72;
                    else
                      v60 = (void **)v72[0];
                    *(_BYTE *)v60 = v59;
                  }
                  v84 = *(_OWORD *)v74;
                  v85 = v75;
                  v74[0] = 0;
                  v74[1] = 0;
                  v75 = 0;
                  v86 = *(_OWORD *)v72;
                  v87 = v73;
                  v72[0] = 0;
                  v72[1] = 0;
                  v73 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v69, &v84);
                  if (SHIBYTE(v87) < 0)
                    operator delete((void *)v86);
                  if (SHIBYTE(v85) < 0)
                  {
                    v61 = (void *)v84;
                    goto LABEL_221;
                  }
                }
                if (SHIBYTE(v73) < 0)
                  operator delete(v72[0]);
                if (SHIBYTE(v75) < 0)
                  operator delete(v74[0]);
                if (SHIBYTE(v77) < 0)
                  operator delete(v76[0]);
                v25 = 1;
LABEL_137:
                if (SHIBYTE(v79) < 0)
                  operator delete(__p[0]);
                v9 = v36;
                if ((v25 & 1) == 0)
                  goto LABEL_141;
                goto LABEL_140;
              }
            }
            else
            {
              LOBYTE(v35) = *v35;
            }
            HIBYTE(v77) = 1;
            LOWORD(v76[0]) = v35;
            goto LABEL_145;
          }
        }
      }
      if (SHIBYTE(v79) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v34 = (void **)__p[0];
LABEL_90:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v34);
LABEL_101:
            v25 = 1;
            v36 = v9;
            goto LABEL_137;
          }
          v34 = (void **)__p[0];
LABEL_100:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v34, *((char *)v34 + 1));
          goto LABEL_101;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v79))
      {
        v34 = __p;
        if (HIBYTE(v79) == 1)
          goto LABEL_90;
        goto LABEL_100;
      }
LABEL_140:
      v5 = (uint64_t)v9;
LABEL_141:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_237:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1B591C240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v46 + 144) = v47;
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 145) < 0)
    operator delete(*(void **)(v48 - 168));
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591C398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  std::string::size_type size;
  std::string *v10;
  BOOL v11;
  std::locale v13;
  std::string v14;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v13, (const std::locale *)(v4 + 16));
  std::locale::name(&v14, &v13);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  *(_BYTE *)(v4 + 171) = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1B591C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1B5E50688](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  char v44;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (!*a2)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        return a2 + 1;
      }
      if (v7 == 68)
      {
        v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
        *(_DWORD *)(a5 + 164) = v8;
        return a2 + 1;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    }
    if (v7 == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_24;
    }
    if (v7 != 87)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_60:
        *(_QWORD *)(a5 + 72) = v14;
        return a2 + 1;
      }
      v24 = *(_QWORD *)(a5 + 64);
      v25 = &v13[-v24];
      v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        v27 = v12 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = operator new(v28);
        else
          v29 = 0;
        v31 = &v29[v28];
        v25[(_QWORD)v29] = v11;
        v14 = (uint64_t)&v25[(_QWORD)v29 + 1];
        if (v13 == (_BYTE *)v24)
        {
          v29 = &v25[(_QWORD)v29];
        }
        else
        {
          v32 = &v13[~v24];
          do
          {
            v33 = *--v13;
            (v32--)[(_QWORD)v29] = v33;
          }
          while (v13 != (_BYTE *)v24);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v29;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v31;
        if (v13)
          operator delete(v13);
        goto LABEL_60;
      }
LABEL_85:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    v17 = *(_BYTE **)(a5 + 72);
    v16 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        v18 = *(_QWORD *)(a5 + 64);
        v19 = &v17[-v18];
        v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0)
          goto LABEL_85;
        v21 = v16 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = operator new(v22);
        else
          v23 = 0;
        v39 = &v19[(_QWORD)v23];
        v40 = (char *)v23 + v22;
        v19[(_QWORD)v23] = 95;
        v30 = (uint64_t)&v19[(_QWORD)v23 + 1];
        if (v17 != (_BYTE *)v18)
        {
          v41 = &v17[~v18];
          do
          {
            v42 = *--v17;
            (v41--)[(_QWORD)v23] = v42;
          }
          while (v17 != (_BYTE *)v18);
LABEL_78:
          v17 = *(_BYTE **)(a5 + 64);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      v34 = *(_QWORD *)(a5 + 64);
      v35 = &v17[-v34];
      v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0)
        goto LABEL_85;
      v37 = v16 - v34;
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v23 = operator new(v38);
      else
        v23 = 0;
      v39 = &v35[(_QWORD)v23];
      v40 = (char *)v23 + v38;
      v35[(_QWORD)v23] = 95;
      v30 = (uint64_t)&v35[(_QWORD)v23 + 1];
      if (v17 != (_BYTE *)v34)
      {
        v43 = &v17[~v34];
        do
        {
          v44 = *--v17;
          (v43--)[(_QWORD)v23] = v44;
        }
        while (v17 != (_BYTE *)v34);
        goto LABEL_78;
      }
LABEL_79:
      v23 = v39;
LABEL_80:
      *(_QWORD *)(a5 + 64) = v23;
      *(_QWORD *)(a5 + 72) = v30;
      *(_QWORD *)(a5 + 80) = v40;
      if (v17)
        operator delete(v17);
      goto LABEL_82;
    }
    *v17 = 95;
    v30 = (uint64_t)(v17 + 1);
LABEL_82:
    *(_QWORD *)(a5 + 72) = v30;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    }
    if (v7 != 100)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_26:
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_26;
  }
  if (v7 != 119)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1B591D1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  void *v22;
  uint64_t v23;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v17 = *a1;
    v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      v21 = vdupq_n_s64(v16);
      v18 = &v13[48 * v9];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *(_OWORD *)(v16 - 48);
        *((_QWORD *)v18 - 4) = *(_QWORD *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(_QWORD *)(v16 - 40) = 0;
        *(_QWORD *)(v16 - 32) = 0;
        *(_QWORD *)(v16 - 48) = 0;
        v20 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 8) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      v21 = *(int64x2_t *)a1;
    }
    v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    v23 = v21.i64[1];
    v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22)
      operator delete(v22);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

