void sub_1B5AF8730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_object_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  AudioObjectPropertyElement v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  CFTypeRef v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  CFTypeRef v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  CFTypeRef v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t Is_Property_Settable;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  CFTypeRef v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t Has_Property;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  CFTypeRef v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  CFTypeRef v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  unint64_t *v154;
  unint64_t v155;
  CFTypeRef v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  CFTypeRef v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  int v199;
  unint64_t *v200;
  unint64_t v201;
  CFTypeRef v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  __int128 v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  CFTypeRef v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  const void *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  int v245;
  unint64_t *v246;
  unint64_t v247;
  CFTypeRef v248;
  CFTypeRef v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  _QWORD *v253;
  CFTypeRef *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  __int128 v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  int v280;
  unint64_t *v281;
  unint64_t v282;
  CFTypeRef v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  __int128 v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  CFTypeRef v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  int v326;
  unint64_t *v327;
  unint64_t v328;
  CFTypeRef v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  __int128 v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  CFTypeRef v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  _QWORD *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  AMCP::ASP::PlugIn *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  const void *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  AudioObjectPropertyElement v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  AudioObjectPropertyElement v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  AudioObjectPropertyElement v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  AudioObjectPropertyElement v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  unsigned int v395;
  CFTypeRef v396[2];
  std::__shared_weak_count *v397;
  uint64_t v398;
  int v399;
  CFTypeRef v400[2];
  AudioObjectPropertyAddress v401[4];
  CFTypeRef cf[3];
  double v403[2];
  uint64_t v404;
  std::__shared_weak_count *v405;
  CFTypeRef *v406;
  uint64_t v407;

  v407 = *MEMORY[0x1E0C80C00];
  LODWORD(v404) = *(_DWORD *)(a1 + 60);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v401, 0, (int *)&v404, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v6 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v7 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  LODWORD(v404) = *(_DWORD *)(a1 + 44);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v401, 0, (int *)&v404, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v9 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v10 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v404) = *(_DWORD *)(a1 + 68);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v401, 0, (int *)&v404, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v12 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v13 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  LODWORD(v404) = *(_DWORD *)(a1 + 64);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v401, 0, (int *)&v404, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v15 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v16 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v404) = *(_DWORD *)(a1 + 56);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v401, 0, (int *)&v404, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v18 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v19 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(v400, **(__CFBundle ***)(a1 + 24));
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v400[0]);
  v404 = 0x676C6F626F706C67;
  LODWORD(v405) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v401, (uint64_t)&v404, cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  v21 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v22 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v400[0])
    CFRelease(v400[0]);
  v24 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)&v401[0].mSelector = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v401[0].mElement = v24;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v404, 0, (__int128 *)v401, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v404 + 40), &v404);
  v25 = v405;
  if (v405)
  {
    p_shared_owners = (unint64_t *)&v405->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_QWORD *)(a1 + 24);
  v29 = *(std::__shared_weak_count **)(a1 + 32);
  v395 = a2;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v32 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6E616DLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    do
      v35 = __ldxr(v33);
    while (__stxr(v35 + 1, v33));
    v36 = v29;
  }
  else
  {
    v36 = 0;
    v32 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6E616DLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "manlbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v37 = cf[0];
  v38 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v29)
  {
    v39 = (unint64_t *)&v29->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v406 = 0;
  v41 = operator new(0x28uLL);
  *v41 = &off_1E69870B8;
  v41[1] = v28;
  v41[2] = v29;
  if (v29)
  {
    v42 = (unint64_t *)&v29->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  *((_DWORD *)v41 + 6) = v32;
  *(_QWORD *)((char *)v41 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v41 + 9) = 0;
  v406 = (CFTypeRef *)v41;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v37, v38, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v44 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v45 = 4;
    v44 = &v404;
    goto LABEL_60;
  }
  if (v406)
  {
    v45 = 5;
LABEL_60:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  if (v29)
  {
    v46 = (unint64_t *)&v29->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v48 = cf[0];
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v49 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  if (v36)
  {
    v50 = (unint64_t *)&v36->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v406 = 0;
  v52 = operator new(0x28uLL);
  *v52 = &off_1E6987138;
  v52[1] = v28;
  v52[2] = v36;
  if (v36)
  {
    v53 = (unint64_t *)&v36->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  *((_DWORD *)v52 + 6) = v32;
  *(_QWORD *)((char *)v52 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v52 + 9) = 0;
  v406 = (CFTypeRef *)v52;
  memset(v401, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v48, v49, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v55 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v56 = 4;
    v55 = &v404;
    goto LABEL_78;
  }
  if (v406)
  {
    v56 = 5;
LABEL_78:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  if (v36)
  {
    v57 = (unint64_t *)&v36->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v59 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v60 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v64 = (unint64_t *)((char *)cf[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (!v36)
    goto LABEL_98;
  v66 = (unint64_t *)&v36->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_98:
    if (v29)
      goto LABEL_99;
LABEL_109:
    v70 = v400[0];
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    goto LABEL_110;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (!v29)
    goto LABEL_109;
LABEL_99:
  v68 = (unint64_t *)&v29->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v70 = v400[0];
  v71 = (unint64_t *)&v29->__shared_owners_;
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
  Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  v74 = (unint64_t *)&v29->__shared_owners_;
  do
    v75 = __ldxr(v74);
  while (__stxr(v75 + 1, v74));
LABEL_110:
  v406 = 0;
  v76 = operator new(0x28uLL);
  *v76 = &off_1E69871B8;
  v76[1] = v28;
  v76[2] = v29;
  if (v29)
  {
    v77 = (unint64_t *)&v29->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  *((_DWORD *)v76 + 6) = v32;
  *(_QWORD *)((char *)v76 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v76 + 9) = 0;
  v406 = (CFTypeRef *)v76;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v70, Is_Property_Settable, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v79 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v80 = 4;
    v79 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_120;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_120:
  if (v29)
  {
    v81 = (unint64_t *)&v29->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    v84 = v400[0];
    v85 = (unint64_t *)&v29->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v88 = (unint64_t *)&v29->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  else
  {
    v84 = v400[0];
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v406 = 0;
  v90 = operator new(0x28uLL);
  *v90 = &off_1E6987238;
  v90[1] = v28;
  v90[2] = v29;
  if (v29)
  {
    v91 = (unint64_t *)&v29->__shared_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  *((_DWORD *)v90 + 6) = v32;
  *(_QWORD *)((char *)v90 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v90 + 9) = 0;
  v406 = (CFTypeRef *)v90;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v84, Has_Property, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v93 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v94 = 4;
    v93 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_144;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_144:
  if (v29)
  {
    v95 = (unint64_t *)&v29->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    do
      v97 = __ldaxr(v95);
    while (__stlxr(v97 - 1, v95));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v98 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v99 = (unint64_t *)((char *)v400[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v29)
  {
    v101 = (unint64_t *)&v29->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v104 = *(_QWORD *)(a1 + 24);
  v103 = *(std::__shared_weak_count **)(a1 + 32);
  if (v103)
  {
    v105 = (unint64_t *)&v103->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
    v107 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6D6F64;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v108 = (unint64_t *)&v103->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  else
  {
    v107 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6D6F64;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "domlbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v110 = cf[0];
  v111 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v103)
  {
    v112 = (unint64_t *)&v103->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  v406 = 0;
  v114 = operator new(0x28uLL);
  *v114 = &off_1E69872B8;
  v114[1] = v104;
  v114[2] = v103;
  if (v103)
  {
    v115 = (unint64_t *)&v103->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  *((_DWORD *)v114 + 6) = v107;
  *(_QWORD *)((char *)v114 + 28) = 0x676C6F626C6D6F64;
  *((_DWORD *)v114 + 9) = 0;
  v406 = (CFTypeRef *)v114;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v110, v111, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v117 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v118 = 4;
    v117 = &v404;
    goto LABEL_183;
  }
  if (v406)
  {
    v118 = 5;
LABEL_183:
    (*(void (**)(void))(*v117 + 8 * v118))();
  }
  if (v103)
  {
    v119 = (unint64_t *)&v103->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v121 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v122 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v121;
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = (std::__shared_weak_count *)cf[1];
  if (!cf[1])
    goto LABEL_198;
  v126 = (unint64_t *)((char *)cf[1] + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (v127)
  {
LABEL_198:
    if (v103)
      goto LABEL_199;
LABEL_209:
    v130 = v400[0];
    v133 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_210;
  }
  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
  std::__shared_weak_count::__release_weak(v125);
  if (!v103)
    goto LABEL_209;
LABEL_199:
  v128 = (unint64_t *)&v103->__shared_owners_;
  do
    v129 = __ldaxr(v128);
  while (__stlxr(v129 - 1, v128));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  v130 = v400[0];
  v131 = (unint64_t *)&v103->__shared_owners_;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
  v133 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v134 = (unint64_t *)&v103->__shared_owners_;
  do
    v135 = __ldxr(v134);
  while (__stxr(v135 + 1, v134));
LABEL_210:
  v406 = 0;
  v136 = operator new(0x28uLL);
  *v136 = &off_1E6987338;
  v136[1] = v104;
  v136[2] = v103;
  if (v103)
  {
    v137 = (unint64_t *)&v103->__shared_owners_;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  *((_DWORD *)v136 + 6) = v107;
  *(_QWORD *)((char *)v136 + 28) = 0x676C6F626C6D6F64;
  *((_DWORD *)v136 + 9) = 0;
  v406 = (CFTypeRef *)v136;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v130, v133, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v139 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v140 = 4;
    v139 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_220;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_220:
  if (v103)
  {
    v141 = (unint64_t *)&v103->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
    do
      v143 = __ldaxr(v141);
    while (__stlxr(v143 - 1, v141));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v144 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v145 = (unint64_t *)((char *)v400[1] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (v103)
  {
    v147 = (unint64_t *)&v103->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v149 = *(_QWORD *)(a1 + 24);
  v150 = *(std::__shared_weak_count **)(a1 + 32);
  if (v150)
  {
    v151 = (unint64_t *)&v150->__shared_owners_;
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
    v153 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6D616BLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v154 = (unint64_t *)&v150->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  else
  {
    v153 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626C6D616BLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "kamlbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v156 = cf[0];
  v157 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v150)
  {
    v158 = (unint64_t *)&v150->__shared_owners_;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
  }
  v406 = 0;
  v160 = operator new(0x28uLL);
  *v160 = &off_1E69873B8;
  v160[1] = v149;
  v160[2] = v150;
  if (v150)
  {
    v161 = (unint64_t *)&v150->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  *((_DWORD *)v160 + 6) = v153;
  *(_QWORD *)((char *)v160 + 28) = 0x676C6F626C6D616BLL;
  *((_DWORD *)v160 + 9) = 0;
  v406 = (CFTypeRef *)v160;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v156, v157, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v163 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v164 = 4;
    v163 = &v404;
    goto LABEL_259;
  }
  if (v406)
  {
    v164 = 5;
LABEL_259:
    (*(void (**)(void))(*v163 + 8 * v164))();
  }
  if (v150)
  {
    v165 = (unint64_t *)&v150->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v167 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v168 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v167;
  if (v168)
  {
    v169 = (unint64_t *)&v168->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (std::__shared_weak_count *)cf[1];
  if (!cf[1])
    goto LABEL_274;
  v172 = (unint64_t *)((char *)cf[1] + 8);
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (v173)
  {
LABEL_274:
    if (v150)
      goto LABEL_275;
LABEL_285:
    v176 = v400[0];
    v179 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_286;
  }
  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
  std::__shared_weak_count::__release_weak(v171);
  if (!v150)
    goto LABEL_285;
LABEL_275:
  v174 = (unint64_t *)&v150->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
  v176 = v400[0];
  v177 = (unint64_t *)&v150->__shared_owners_;
  do
    v178 = __ldxr(v177);
  while (__stxr(v178 + 1, v177));
  v179 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v180 = (unint64_t *)&v150->__shared_owners_;
  do
    v181 = __ldxr(v180);
  while (__stxr(v181 + 1, v180));
LABEL_286:
  v406 = 0;
  v182 = operator new(0x28uLL);
  *v182 = &off_1E6987438;
  v182[1] = v149;
  v182[2] = v150;
  if (v150)
  {
    v183 = (unint64_t *)&v150->__shared_owners_;
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  *((_DWORD *)v182 + 6) = v153;
  *(_QWORD *)((char *)v182 + 28) = 0x676C6F626C6D616BLL;
  *((_DWORD *)v182 + 9) = 0;
  v406 = (CFTypeRef *)v182;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v176, v179, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v185 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v186 = 4;
    v185 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_296;
    v186 = 5;
  }
  (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_296:
  if (v150)
  {
    v187 = (unint64_t *)&v150->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
    do
      v189 = __ldaxr(v187);
    while (__stlxr(v189 - 1, v187));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v190 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v191 = (unint64_t *)((char *)v400[1] + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if (v150)
  {
    v193 = (unint64_t *)&v150->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v196 = *(_QWORD *)(a1 + 24);
  v195 = *(std::__shared_weak_count **)(a1 + 32);
  if (v195)
  {
    v197 = (unint64_t *)&v195->__shared_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
    v199 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F6269636F6ELL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v200 = (unint64_t *)&v195->__shared_owners_;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
  }
  else
  {
    v199 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F6269636F6ELL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "nocibolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v202 = cf[0];
  v203 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (v195)
  {
    v204 = (unint64_t *)&v195->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  v406 = 0;
  v206 = operator new(0x28uLL);
  *v206 = &off_1E69874B8;
  v206[1] = v196;
  v206[2] = v195;
  if (v195)
  {
    v207 = (unint64_t *)&v195->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  *((_DWORD *)v206 + 6) = v199;
  *(_QWORD *)((char *)v206 + 28) = 0x676C6F6269636F6ELL;
  *((_DWORD *)v206 + 9) = 0;
  v406 = (CFTypeRef *)v206;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v202, v203, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v209 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v210 = 4;
    v209 = &v404;
    goto LABEL_335;
  }
  if (v406)
  {
    v210 = 5;
LABEL_335:
    (*(void (**)(void))(*v209 + 8 * v210))();
  }
  if (v195)
  {
    v211 = (unint64_t *)&v195->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>((uint64_t)cf[0]);
  v213 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v214 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v213;
  if (v214)
  {
    v215 = (unint64_t *)&v214->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = (std::__shared_weak_count *)cf[1];
  if (!cf[1])
    goto LABEL_350;
  v218 = (unint64_t *)((char *)cf[1] + 8);
  do
    v219 = __ldaxr(v218);
  while (__stlxr(v219 - 1, v218));
  if (v219)
  {
LABEL_350:
    if (v195)
      goto LABEL_351;
LABEL_361:
    v222 = v400[0];
    v225 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_362;
  }
  ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
  std::__shared_weak_count::__release_weak(v217);
  if (!v195)
    goto LABEL_361;
LABEL_351:
  v220 = (unint64_t *)&v195->__shared_owners_;
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (!v221)
  {
    ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
    std::__shared_weak_count::__release_weak(v195);
  }
  v222 = v400[0];
  v223 = (unint64_t *)&v195->__shared_owners_;
  do
    v224 = __ldxr(v223);
  while (__stxr(v224 + 1, v223));
  v225 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v226 = (unint64_t *)&v195->__shared_owners_;
  do
    v227 = __ldxr(v226);
  while (__stxr(v227 + 1, v226));
LABEL_362:
  v406 = 0;
  v228 = operator new(0x28uLL);
  *v228 = &off_1E6987538;
  v228[1] = v196;
  v228[2] = v195;
  if (v195)
  {
    v229 = (unint64_t *)&v195->__shared_owners_;
    do
      v230 = __ldxr(v229);
    while (__stxr(v230 + 1, v229));
  }
  *((_DWORD *)v228 + 6) = v199;
  *(_QWORD *)((char *)v228 + 28) = 0x676C6F6269636F6ELL;
  *((_DWORD *)v228 + 9) = 0;
  v406 = (CFTypeRef *)v228;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v222, v225, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v231 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v232 = 4;
    v231 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_372;
    v232 = 5;
  }
  (*(void (**)(void))(*v231 + 8 * v232))();
LABEL_372:
  if (v195)
  {
    v233 = (unint64_t *)&v195->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
    do
      v235 = __ldaxr(v233);
    while (__stlxr(v235 - 1, v233));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v236 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v237 = (unint64_t *)((char *)v400[1] + 8);
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  if (v195)
  {
    v239 = (unint64_t *)&v195->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v241 = *(const void **)(a1 + 24);
  v242 = *(std::__shared_weak_count **)(a1 + 32);
  v396[1] = v241;
  v397 = v242;
  if (v242)
  {
    v243 = (unint64_t *)&v242->__shared_owners_;
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 1, v243));
  }
  v245 = *(_DWORD *)(a1 + 44);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v396, "com.apple.audio.AudioMIDISetup");
  v398 = 0x676C6F6263617070;
  v399 = 0;
  v400[0] = 0;
  v400[1] = 0;
  if (v242)
  {
    v246 = (unint64_t *)&v242->__shared_owners_;
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  v248 = v396[0];
  if (v396[0])
    CFRetain(v396[0]);
  strcpy((char *)v403, "ppacbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v249 = cf[0];
  v250 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v242)
  {
    v251 = (unint64_t *)&v242->__shared_owners_;
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  if (v248)
    CFRetain(v248);
  v406 = 0;
  v253 = operator new(0x30uLL);
  v254 = (CFTypeRef *)v253;
  *v253 = &off_1E69875B8;
  v253[1] = v241;
  v253[2] = v242;
  if (v242)
  {
    v255 = (unint64_t *)&v242->__shared_owners_;
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
  }
  *((_DWORD *)v253 + 6) = v245;
  *(_QWORD *)((char *)v253 + 28) = 0x676C6F6263617070;
  *((_DWORD *)v253 + 9) = 0;
  if (v248)
    CFRetain(v248);
  v254[5] = v248;
  v406 = v254;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v249, v250, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v257 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v258 = 4;
    v257 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_417;
    v258 = 5;
  }
  (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_417:
  if (v248)
    CFRelease(v248);
  if (v242)
  {
    v259 = (unint64_t *)&v242->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v261 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v262 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v261;
  if (v262)
  {
    v263 = (unint64_t *)&v262->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v266 = (unint64_t *)((char *)cf[1] + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
      if (!v248)
        goto LABEL_435;
      goto LABEL_434;
    }
  }
  if (v248)
LABEL_434:
    CFRelease(v248);
LABEL_435:
  if (v242)
  {
    v268 = (unint64_t *)&v242->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v270 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v271 = (unint64_t *)((char *)v400[1] + 8);
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  if (v396[0])
    CFRelease(v396[0]);
  v273 = v397;
  if (v397)
  {
    v274 = (unint64_t *)&v397->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v277 = *(_QWORD *)(a1 + 24);
  v276 = *(std::__shared_weak_count **)(a1 + 32);
  if (v276)
  {
    v278 = (unint64_t *)&v276->__shared_owners_;
    do
      v279 = __ldxr(v278);
    while (__stxr(v279 + 1, v278));
    v280 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F62736E756DLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v281 = (unint64_t *)&v276->__shared_owners_;
    do
      v282 = __ldxr(v281);
    while (__stxr(v282 + 1, v281));
  }
  else
  {
    v280 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F62736E756DLL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "munsbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v283 = cf[0];
  v284 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v276)
  {
    v285 = (unint64_t *)&v276->__shared_owners_;
    do
      v286 = __ldxr(v285);
    while (__stxr(v286 + 1, v285));
  }
  v406 = 0;
  v287 = operator new(0x28uLL);
  *v287 = &off_1E6987638;
  v287[1] = v277;
  v287[2] = v276;
  if (v276)
  {
    v288 = (unint64_t *)&v276->__shared_owners_;
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  *((_DWORD *)v287 + 6) = v280;
  *(_QWORD *)((char *)v287 + 28) = 0x676C6F62736E756DLL;
  *((_DWORD *)v287 + 9) = 0;
  v406 = (CFTypeRef *)v287;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v283, v284, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v290 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v291 = 4;
    v290 = &v404;
    goto LABEL_473;
  }
  if (v406)
  {
    v291 = 5;
LABEL_473:
    (*(void (**)(void))(*v290 + 8 * v291))();
  }
  if (v276)
  {
    v292 = (unint64_t *)&v276->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v294 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v295 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v294;
  if (v295)
  {
    v296 = (unint64_t *)&v295->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v298 = (std::__shared_weak_count *)cf[1];
  if (!cf[1])
    goto LABEL_488;
  v299 = (unint64_t *)((char *)cf[1] + 8);
  do
    v300 = __ldaxr(v299);
  while (__stlxr(v300 - 1, v299));
  if (v300)
  {
LABEL_488:
    if (v276)
      goto LABEL_489;
LABEL_501:
    v303 = v400[0];
    v306 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_502;
  }
  ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
  std::__shared_weak_count::__release_weak(v298);
  if (!v276)
    goto LABEL_501;
LABEL_489:
  v301 = (unint64_t *)&v276->__shared_owners_;
  do
    v302 = __ldaxr(v301);
  while (__stlxr(v302 - 1, v301));
  if (!v302)
  {
    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
    std::__shared_weak_count::__release_weak(v276);
  }
  v303 = v400[0];
  v304 = (unint64_t *)&v276->__shared_owners_;
  do
    v305 = __ldxr(v304);
  while (__stxr(v305 + 1, v304));
  v306 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v307 = (unint64_t *)&v276->__shared_owners_;
  do
    v308 = __ldxr(v307);
  while (__stxr(v308 + 1, v307));
LABEL_502:
  v406 = 0;
  v309 = operator new(0x28uLL);
  *v309 = &off_1E69876B8;
  v309[1] = v277;
  v309[2] = v276;
  if (v276)
  {
    v310 = (unint64_t *)&v276->__shared_owners_;
    do
      v311 = __ldxr(v310);
    while (__stxr(v311 + 1, v310));
  }
  *((_DWORD *)v309 + 6) = v280;
  *(_QWORD *)((char *)v309 + 28) = 0x676C6F62736E756DLL;
  *((_DWORD *)v309 + 9) = 0;
  v406 = (CFTypeRef *)v309;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v303, v306, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v312 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v313 = 4;
    v312 = &v404;
  }
  else
  {
    if (!v406)
      goto LABEL_512;
    v313 = 5;
  }
  (*(void (**)(void))(*v312 + 8 * v313))();
LABEL_512:
  if (v276)
  {
    v314 = (unint64_t *)&v276->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
    do
      v316 = __ldaxr(v314);
    while (__stlxr(v316 - 1, v314));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v317 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v318 = (unint64_t *)((char *)v400[1] + 8);
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  if (v276)
  {
    v320 = (unint64_t *)&v276->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v323 = *(_QWORD *)(a1 + 24);
  v322 = *(std::__shared_weak_count **)(a1 + 32);
  if (v322)
  {
    v324 = (unint64_t *)&v322->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
    v326 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626677766ELL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
    v327 = (unint64_t *)&v322->__shared_owners_;
    do
      v328 = __ldxr(v327);
    while (__stxr(v328 + 1, v327));
  }
  else
  {
    v326 = *(_DWORD *)(a1 + 44);
    v398 = 0x676C6F626677766ELL;
    v399 = 0;
    v400[0] = 0;
    v400[1] = 0;
  }
  strcpy((char *)v403, "nvwfbolg");
  BYTE1(v403[1]) = 0;
  WORD1(v403[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v403[0]);
  v329 = cf[0];
  v330 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v322)
  {
    v331 = (unint64_t *)&v322->__shared_owners_;
    do
      v332 = __ldxr(v331);
    while (__stxr(v332 + 1, v331));
  }
  v406 = 0;
  v333 = operator new(0x28uLL);
  *v333 = &off_1E6987738;
  v333[1] = v323;
  v333[2] = v322;
  if (v322)
  {
    v334 = (unint64_t *)&v322->__shared_owners_;
    do
      v335 = __ldxr(v334);
    while (__stxr(v335 + 1, v334));
  }
  *((_DWORD *)v333 + 6) = v326;
  *(_QWORD *)((char *)v333 + 28) = 0x676C6F626677766ELL;
  *((_DWORD *)v333 + 9) = 0;
  v406 = (CFTypeRef *)v333;
  memset(v401, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v329, v330, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v336 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v337 = 4;
    v336 = &v404;
    goto LABEL_551;
  }
  if (v406)
  {
    v337 = 5;
LABEL_551:
    (*(void (**)(void))(*v336 + 8 * v337))();
  }
  if (v322)
  {
    v338 = (unint64_t *)&v322->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v340 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  v341 = (std::__shared_weak_count *)v400[1];
  *(_OWORD *)v400 = v340;
  if (v341)
  {
    v342 = (unint64_t *)&v341->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = (std::__shared_weak_count *)cf[1];
  if (!cf[1])
    goto LABEL_566;
  v345 = (unint64_t *)((char *)cf[1] + 8);
  do
    v346 = __ldaxr(v345);
  while (__stlxr(v346 - 1, v345));
  if (v346)
  {
LABEL_566:
    if (v322)
      goto LABEL_567;
LABEL_577:
    v349 = v400[0];
    v352 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    goto LABEL_578;
  }
  ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
  std::__shared_weak_count::__release_weak(v344);
  if (!v322)
    goto LABEL_577;
LABEL_567:
  v347 = (unint64_t *)&v322->__shared_owners_;
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 - 1, v347));
  if (!v348)
  {
    ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
    std::__shared_weak_count::__release_weak(v322);
  }
  v349 = v400[0];
  v350 = (unint64_t *)&v322->__shared_owners_;
  do
    v351 = __ldxr(v350);
  while (__stxr(v351 + 1, v350));
  v352 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v353 = (unint64_t *)&v322->__shared_owners_;
  do
    v354 = __ldxr(v353);
  while (__stxr(v354 + 1, v353));
LABEL_578:
  v406 = 0;
  v355 = operator new(0x28uLL);
  *v355 = &off_1E69877B8;
  v355[1] = v323;
  v355[2] = v322;
  if (v322)
  {
    v356 = (unint64_t *)&v322->__shared_owners_;
    do
      v357 = __ldxr(v356);
    while (__stxr(v357 + 1, v356));
  }
  *((_DWORD *)v355 + 6) = v326;
  *(_QWORD *)((char *)v355 + 28) = 0x676C6F626677766ELL;
  *((_DWORD *)v355 + 9) = 0;
  v406 = (CFTypeRef *)v355;
  memset(v401, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v401, (uint64_t)&v404);
  *(_QWORD *)&v401[2].mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v349, v352, (AMCP *)v401);
  if (*(_QWORD *)&v401[2].mElement)
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v401[2].mElement)(0, (uint64_t)v401, 0, 0);
  v358 = (uint64_t *)v406;
  if (v406 == (CFTypeRef *)&v404)
  {
    v359 = 4;
    v358 = &v404;
    goto LABEL_587;
  }
  if (v406)
  {
    v359 = 5;
LABEL_587:
    (*(void (**)(void))(*v358 + 8 * v359))();
  }
  if (v322)
  {
    v360 = (unint64_t *)&v322->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
    do
      v362 = __ldaxr(v360);
    while (__stlxr(v362 - 1, v360));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  if (v400[0])
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v400[0] + 10, v400);
  v363 = (std::__shared_weak_count *)v400[1];
  if (v400[1])
  {
    v364 = (unint64_t *)((char *)v400[1] + 8);
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  if (v322)
  {
    v366 = (unint64_t *)&v322->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v369 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  v368 = *(std::__shared_weak_count **)(a1 + 32);
  if (v368)
  {
    v370 = (unint64_t *)&v368->__shared_owners_;
    do
      v371 = __ldxr(v370);
    while (__stxr(v371 + 1, v370));
  }
  v372 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v372)
    goto LABEL_627;
  while (1)
  {
    strcpy((char *)v401, "crsrbolg");
    BYTE1(v401[0].mElement) = 0;
    HIWORD(v401[0].mElement) = 0;
    v404 = 0;
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(v369, v372, 0, v401, 0, 0, 8, &v404))
      break;
    strcpy((char *)v401, "vdtsbolg");
    BYTE1(v401[0].mElement) = 0;
    HIWORD(v401[0].mElement) = 0;
    LODWORD(v404) = 0;
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(v369, v372, 0, v401, 0, 0, 4, &v404))
    {
      v372 = v404;
      if ((_DWORD)v404)
        continue;
    }
    goto LABEL_627;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v401, (CFTypeRef)v404);
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(cf, *(__CFBundle **)v369);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_url((applesauce::CF::URLRef *)&v404, (__CFBundle *)cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  v373 = (const void *)MEMORY[0x1B5E4F980](0, *(_QWORD *)&v401[0].mSelector, 0, 1, v404);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)v400, v373);
  if (v404)
    CFRelease((CFTypeRef)v404);
  if (*(_QWORD *)&v401[0].mSelector)
    CFRelease(*(CFTypeRef *)&v401[0].mSelector);
  if (v400[0])
  {
    v404 = 0x676C6F6272737263;
    LODWORD(v405) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)v401, (uint64_t)&v404, v400[0]);
    if (v400[0])
      CFRelease(v400[0]);
    if (*(_QWORD *)&v401[0].mSelector)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(_QWORD *)&v401[0].mSelector + 40), v401);
  }
  else
  {
LABEL_627:
    *(_QWORD *)&v401[0].mSelector = 0;
    *(_QWORD *)&v401[0].mElement = 0;
  }
  v374 = *(std::__shared_weak_count **)&v401[0].mElement;
  if (*(_QWORD *)&v401[0].mElement)
  {
    v375 = (unint64_t *)(*(_QWORD *)&v401[0].mElement + 8);
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  if (v368)
  {
    v377 = (unint64_t *)&v368->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v379 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)&v401[0].mSelector = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v401[0].mElement = v379;
  v401[1].mSelector = 1633907820;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v404, 0, (__int128 *)v401, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v404 + 40), &v404);
  v380 = v405;
  if (v405)
  {
    v381 = (unint64_t *)&v405->__shared_owners_;
    do
      v382 = __ldaxr(v381);
    while (__stlxr(v382 - 1, v381));
    if (!v382)
    {
      ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
      std::__shared_weak_count::__release_weak(v380);
    }
  }
  v383 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)&v401[0].mSelector = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v401[0].mElement = v383;
  *(_OWORD *)&v401[1].mSelector = xmmword_1B5D68BE0;
  *(_OWORD *)&v401[2].mScope = xmmword_1B5D68BF0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>(&v404, 0, (uint64_t *)v401, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v404 + 40), &v404);
  v384 = v405;
  if (v405)
  {
    v385 = (unint64_t *)&v405->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v387 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)&v401[0].mSelector = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v401[0].mElement = v387;
  *(_OWORD *)&v401[1].mSelector = xmmword_1B5D68BE0;
  *(_OWORD *)&v401[2].mScope = xmmword_1B5D68C00;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>(&v404, 0, (uint64_t *)v401, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v404 + 40), &v404);
  v388 = v405;
  if (v405)
  {
    v389 = (unint64_t *)&v405->__shared_owners_;
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v391 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)&v401[0].mSelector = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v401[0].mElement = v391;
  *(_OWORD *)&v401[1].mSelector = xmmword_1B5D68BE0;
  *(_OWORD *)&v401[2].mScope = xmmword_1B5D68C10;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>(&v404, 0, (uint64_t *)v401, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v404 + 40), &v404);
  v392 = v405;
  if (v405)
  {
    v393 = (unint64_t *)&v405->__shared_owners_;
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
      std::__shared_weak_count::__release_weak(v392);
    }
  }
  AMCP::ASP::PlugIn_Object::update_object_core(a1, v395, a3);
}

void sub_1B5AFB050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::PlugIn_Object::update_object_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t Has_Property;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t *v53;
  int v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t (***v66)();
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t (***v83)();
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t *v97;
  int v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  AMCP::ASP::PlugIn *v136;
  uint64_t v137;
  AMCP::ASP::PlugIn *v138;
  uint64_t v139;
  unint64_t PropertyDataSize;
  int PropertyData;
  void *v142;
  int64_t v143;
  unsigned __int32 *v144;
  unsigned __int32 *v145;
  __n128 v146;
  unsigned __int32 *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned __int32 *v151;
  unint64_t *v152;
  int v153;
  uint64_t v154;
  unsigned __int32 v155;
  AMCP *v156;
  int v157;
  char v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t (***v166)();
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  double v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  uint64_t (***v191)();
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t (***v198)();
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t (***v214)();
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  __int128 *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t (***v230)();
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  unint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  __int128 *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t Is_Property_Settable;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t (***v250)();
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t (***v260)();
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t Property_Type_Hint;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t (***v271)();
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t (***v282)();
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  unint64_t v289;
  unint64_t v290;
  _QWORD *v291;
  __int128 *v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t (***v303)();
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  unint64_t v312;
  uint64_t (***v313)();
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t (***v319)();
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unsigned __int32 *v323;
  unsigned __int32 *v324;
  unsigned __int32 *v325;
  unsigned __int32 *v327;
  unsigned __int32 *v328;
  int v329;
  unsigned __int32 v330;
  unsigned __int32 v331;
  unsigned __int32 v332;
  double v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  double v339;
  double v340;
  double v341;
  int v342;
  uint64_t v344;
  std::__shared_weak_count *v345;
  void *__p[2];
  __int128 v347;
  void (*v348)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v349;
  int v350;
  __int128 v351;
  __int128 v352;
  void (*v353)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v354)();
  unint64_t v355;
  __int128 v356;
  int v357;
  uint64_t v358;
  int v359;
  __int128 v360;
  __int128 *v361;
  uint64_t v362;

  v362 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = 0;
  v8 = *(_DWORD *)(a1 + 44);
  v9 = (unint64_t *)&v4->__shared_owners_;
  v330 = vdup_n_s32(0x6C63686Eu).u32[0];
  do
  {
    v10 = 0;
    v334 = v7;
    v11 = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v7];
    LODWORD(v12) = v330;
    HIDWORD(v12) = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v7];
    v339 = v12;
    do
    {
      v13 = 0;
      v360 = 0uLL;
      while ((_DWORD)v11 != AMCP::Property_Traits<1818454126u>::k_valid_scopes[v13])
      {
        if (++v13 == 4)
        {
          v14 = 1735159650;
          if (!v4)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      v14 = v11;
      if (!v4)
        goto LABEL_13;
      do
LABEL_12:
        v15 = __ldxr(v9);
      while (__stxr(v15 + 1, v9));
LABEL_13:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v351, v10, v339);
      v16 = v351;
      v17 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v4)
      {
        do
          v18 = __ldxr(v9);
        while (__stxr(v18 + 1, v9));
      }
      *((_QWORD *)&v356 + 1) = 0;
      v19 = operator new(0x28uLL);
      *v19 = &off_1E6987838;
      v19[1] = v3;
      v19[2] = v4;
      if (v4)
      {
        do
          v20 = __ldxr(v9);
        while (__stxr(v20 + 1, v9));
      }
      *((_DWORD *)v19 + 6) = v8;
      v21 = ((v14 << 32) | 0x6C63636E) + 1280;
      *(_QWORD *)((char *)v19 + 28) = v21;
      *((_DWORD *)v19 + 9) = v10;
      *((_QWORD *)&v356 + 1) = v19;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, v17, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v22 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v22 = &v354;
        v23 = 4;
        goto LABEL_23;
      }
      if (*((_QWORD *)&v356 + 1))
      {
        v23 = 5;
LABEL_23:
        (*v22)[v23]();
      }
      if (v4)
      {
        do
          v24 = __ldaxr(v9);
        while (__stlxr(v24 - 1, v9));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v351);
      v25 = v351;
      v351 = 0uLL;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      v360 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
      if (!*((_QWORD *)&v351 + 1))
        goto LABEL_37;
      v30 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        if (!v4)
        {
LABEL_47:
          v33 = v360;
          Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
          goto LABEL_48;
        }
      }
      else
      {
LABEL_37:
        if (!v4)
          goto LABEL_47;
      }
      do
        v32 = __ldaxr(v9);
      while (__stlxr(v32 - 1, v9));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v33 = v360;
      do
        v34 = __ldxr(v9);
      while (__stxr(v34 + 1, v9));
      Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      do
        v36 = __ldxr(v9);
      while (__stxr(v36 + 1, v9));
LABEL_48:
      *((_QWORD *)&v356 + 1) = 0;
      v37 = operator new(0x28uLL);
      *v37 = &off_1E69878B8;
      v37[1] = v3;
      v37[2] = v4;
      if (v4)
      {
        do
          v38 = __ldxr(v9);
        while (__stxr(v38 + 1, v9));
      }
      *((_DWORD *)v37 + 6) = v8;
      *(_QWORD *)((char *)v37 + 28) = v21;
      *((_DWORD *)v37 + 9) = v10;
      *((_QWORD *)&v356 + 1) = v37;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, Has_Property, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v39 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v39 = &v354;
        v40 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v356 + 1))
          goto LABEL_57;
        v40 = 5;
      }
      (*v39)[v40]();
LABEL_57:
      if (v4)
      {
        do
          v41 = __ldaxr(v9);
        while (__stlxr(v41 - 1, v9));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        do
          v42 = __ldaxr(v9);
        while (__stlxr(v42 - 1, v9));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if ((_QWORD)v360)
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v360 + 40), &v360);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      if (*((_QWORD *)&v360 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      ++v10;
    }
    while (v10 <= a2);
    v7 = v334 + 1;
  }
  while (v334 != 3);
  if (v4)
  {
    do
      v46 = __ldaxr(v9);
    while (__stlxr(v46 - 1, v9));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v47 = *(_QWORD *)(a1 + 24);
  v48 = *(std::__shared_weak_count **)(a1 + 32);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = 0;
  v52 = *(_DWORD *)(a1 + 44);
  v331 = vdup_n_s32(0x6C63636Eu).u32[0];
  v53 = (unint64_t *)&v48->__shared_owners_;
  while (2)
  {
    v54 = 0;
    v335 = v51;
    v55 = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v51];
    LODWORD(v56) = v331;
    HIDWORD(v56) = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v51];
    v340 = v56;
    while (2)
    {
      v57 = 0;
      v360 = 0uLL;
      while ((_DWORD)v55 != AMCP::Property_Traits<1818452846u>::k_valid_scopes[v57])
      {
        if (++v57 == 4)
        {
          v58 = 1735159650;
          if (!v48)
            goto LABEL_89;
          goto LABEL_88;
        }
      }
      v58 = v55;
      if (!v48)
        goto LABEL_89;
      do
LABEL_88:
        v59 = __ldxr(v53);
      while (__stxr(v59 + 1, v53));
LABEL_89:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v351, v54, v340);
      v60 = v351;
      v61 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v48)
      {
        do
          v62 = __ldxr(v53);
        while (__stxr(v62 + 1, v53));
      }
      *((_QWORD *)&v356 + 1) = 0;
      v63 = operator new(0x28uLL);
      *v63 = &off_1E6987938;
      v63[1] = v47;
      v63[2] = v48;
      if (v48)
      {
        do
          v64 = __ldxr(v53);
        while (__stxr(v64 + 1, v53));
      }
      *((_DWORD *)v63 + 6) = v52;
      v65 = (v58 << 32) | 0x6C63636E;
      *(_QWORD *)((char *)v63 + 28) = v65;
      *((_DWORD *)v63 + 9) = v54;
      *((_QWORD *)&v356 + 1) = v63;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v60, v61, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v66 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v66 = &v354;
        v67 = 4;
LABEL_99:
        (*v66)[v67]();
      }
      else if (*((_QWORD *)&v356 + 1))
      {
        v67 = 5;
        goto LABEL_99;
      }
      if (v48)
      {
        do
          v68 = __ldaxr(v53);
        while (__stlxr(v68 - 1, v53));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v351);
      v69 = v351;
      v351 = 0uLL;
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      v360 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
      if (!*((_QWORD *)&v351 + 1))
        goto LABEL_113;
      v74 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (!v48)
          goto LABEL_123;
        do
LABEL_114:
          v76 = __ldaxr(v53);
        while (__stlxr(v76 - 1, v53));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v77 = v360;
        do
          v78 = __ldxr(v53);
        while (__stxr(v78 + 1, v53));
        v79 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        do
          v80 = __ldxr(v53);
        while (__stxr(v80 + 1, v53));
      }
      else
      {
LABEL_113:
        if (v48)
          goto LABEL_114;
LABEL_123:
        v77 = v360;
        v79 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((_QWORD *)&v356 + 1) = 0;
      v81 = operator new(0x28uLL);
      *v81 = &off_1E69879B8;
      v81[1] = v47;
      v81[2] = v48;
      if (v48)
      {
        do
          v82 = __ldxr(v53);
        while (__stxr(v82 + 1, v53));
      }
      *((_DWORD *)v81 + 6) = v52;
      *(_QWORD *)((char *)v81 + 28) = v65;
      *((_DWORD *)v81 + 9) = v54;
      *((_QWORD *)&v356 + 1) = v81;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v77, v79, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v83 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v83 = &v354;
        v84 = 4;
LABEL_132:
        (*v83)[v84]();
      }
      else if (*((_QWORD *)&v356 + 1))
      {
        v84 = 5;
        goto LABEL_132;
      }
      if (v48)
      {
        do
          v85 = __ldaxr(v53);
        while (__stlxr(v85 - 1, v53));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        do
          v86 = __ldaxr(v53);
        while (__stlxr(v86 - 1, v53));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((_QWORD)v360)
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v360 + 40), &v360);
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      if (*((_QWORD *)&v360 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (++v54 <= a2)
        continue;
      break;
    }
    v51 = v335 + 1;
    if (v335 != 3)
      continue;
    break;
  }
  if (v48)
  {
    do
      v90 = __ldaxr(v53);
    while (__stlxr(v90 - 1, v53));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v91 = *(_QWORD *)(a1 + 24);
  v92 = *(std::__shared_weak_count **)(a1 + 32);
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95 = 0;
  v96 = *(_DWORD *)(a1 + 44);
  v332 = vdup_n_s32(0x6C636E6Eu).u32[0];
  v97 = (unint64_t *)&v92->__shared_owners_;
  while (2)
  {
    v98 = 0;
    v336 = v95;
    v99 = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v95];
    LODWORD(v100) = v332;
    HIDWORD(v100) = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v95];
    v341 = v100;
    while (2)
    {
      v101 = 0;
      v360 = 0uLL;
      while ((_DWORD)v99 != AMCP::Property_Traits<1818455662u>::k_valid_scopes[v101])
      {
        if (++v101 == 4)
        {
          v102 = 1735159650;
          if (!v92)
            goto LABEL_165;
          goto LABEL_164;
        }
      }
      v102 = v99;
      if (!v92)
        goto LABEL_165;
      do
LABEL_164:
        v103 = __ldxr(v97);
      while (__stxr(v103 + 1, v97));
LABEL_165:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v351, v98, v341);
      v104 = v351;
      v105 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v92)
      {
        do
          v106 = __ldxr(v97);
        while (__stxr(v106 + 1, v97));
      }
      *((_QWORD *)&v356 + 1) = 0;
      v107 = operator new(0x28uLL);
      *v107 = &off_1E6987A38;
      v107[1] = v91;
      v107[2] = v92;
      if (v92)
      {
        do
          v108 = __ldxr(v97);
        while (__stxr(v108 + 1, v97));
      }
      *((_DWORD *)v107 + 6) = v96;
      v109 = ((v102 << 32) | 0x6C63636E) + 2816;
      *(_QWORD *)((char *)v107 + 28) = v109;
      *((_DWORD *)v107 + 9) = v98;
      *((_QWORD *)&v356 + 1) = v107;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v104, v105, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v110 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v110 = &v354;
        v111 = 4;
LABEL_175:
        (*v110)[v111]();
      }
      else if (*((_QWORD *)&v356 + 1))
      {
        v111 = 5;
        goto LABEL_175;
      }
      if (v92)
      {
        do
          v112 = __ldaxr(v97);
        while (__stlxr(v112 - 1, v97));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v351);
      v113 = v351;
      v351 = 0uLL;
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      v360 = v113;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
      if (!*((_QWORD *)&v351 + 1))
        goto LABEL_189;
      v118 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
        if (!v92)
          goto LABEL_199;
        do
LABEL_190:
          v120 = __ldaxr(v97);
        while (__stlxr(v120 - 1, v97));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
        v121 = v360;
        do
          v122 = __ldxr(v97);
        while (__stxr(v122 + 1, v97));
        v123 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        do
          v124 = __ldxr(v97);
        while (__stxr(v124 + 1, v97));
      }
      else
      {
LABEL_189:
        if (v92)
          goto LABEL_190;
LABEL_199:
        v121 = v360;
        v123 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((_QWORD *)&v356 + 1) = 0;
      v125 = operator new(0x28uLL);
      *v125 = &off_1E6987AB8;
      v125[1] = v91;
      v125[2] = v92;
      if (v92)
      {
        do
          v126 = __ldxr(v97);
        while (__stxr(v126 + 1, v97));
      }
      *((_DWORD *)v125 + 6) = v96;
      *(_QWORD *)((char *)v125 + 28) = v109;
      *((_DWORD *)v125 + 9) = v98;
      *((_QWORD *)&v356 + 1) = v125;
      *(_OWORD *)__p = 0u;
      v347 = 0u;
      v348 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
      v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v121, v123, (AMCP *)__p);
      if (v348)
        v348(0, (uint64_t)__p, 0, 0);
      v127 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
      if (*((uint64_t (****)())&v356 + 1) == &v354)
      {
        v127 = &v354;
        v128 = 4;
LABEL_208:
        (*v127)[v128]();
      }
      else if (*((_QWORD *)&v356 + 1))
      {
        v128 = 5;
        goto LABEL_208;
      }
      if (v92)
      {
        do
          v129 = __ldaxr(v97);
        while (__stlxr(v129 - 1, v97));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
        do
          v130 = __ldaxr(v97);
        while (__stlxr(v130 - 1, v97));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      if ((_QWORD)v360)
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v360 + 40), &v360);
      v131 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
      if (*((_QWORD *)&v360 + 1))
      {
        v132 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      if (++v98 <= a2)
        continue;
      break;
    }
    v95 = v336 + 1;
    if (v336 != 3)
      continue;
    break;
  }
  if (v92)
  {
    do
      v134 = __ldaxr(v97);
    while (__stlxr(v134 - 1, v97));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v135 = a1;
  v136 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  v137 = *(unsigned int *)(a1 + 44);
  __p[0] = (void *)0x676C6F6263757374;
  LODWORD(__p[1]) = 0;
  if (AMCP::ASP::PlugIn::ObjectHasProperty(v136, v137, 0, (const AudioObjectPropertyAddress *)__p))
  {
    v138 = *(AMCP::ASP::PlugIn **)(a1 + 24);
    v139 = *(unsigned int *)(a1 + 44);
    v354 = (uint64_t (**)())0x676C6F6263757374;
    LODWORD(v355) = 0;
    PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(v138, v139, 0, (const AudioObjectPropertyAddress *)&v354, 0, 0);
    if (!(_DWORD)PropertyDataSize && HIDWORD(PropertyDataSize) > 0xB)
    {
      std::vector<AudioServerPlugInCustomPropertyInfo>::vector(__p, HIDWORD(PropertyDataSize) / 0xCuLL);
      PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v138, v139, 0, (const AudioObjectPropertyAddress *)&v354, 0, 0, (LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFFC, __p[0]);
      v142 = __p[0];
      v143 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] == __p[0])
      {
        v144 = 0;
        v324 = 0;
        if (__p[0])
          goto LABEL_235;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v143 >> 2) >= 0x1555555555555556)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v144 = (unsigned __int32 *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(0xAAAAAAAAAAAAAAABLL * (v143 >> 2));
        memmove(v144, v142, v143);
        v324 = &v144[v143 >> 2];
        v142 = __p[0];
        v135 = a1;
        if (__p[0])
        {
LABEL_235:
          __p[1] = v142;
          operator delete(v142);
        }
      }
      if (!PropertyData && v144 != v324)
      {
        if (AMCP::is_base_of((AMCP *)0x61646576, *(_DWORD *)(v135 + 68)))
        {
          v145 = (unsigned __int32 *)operator new(0x10uLL);
          v146.n128_u64[1] = 0x707472756F757470;
          *(_OWORD *)v145 = xmmword_1B5D68DC0;
          v147 = v145 + 4;
        }
        else
        {
          v145 = (unsigned __int32 *)operator new(4uLL);
          *v145 = 1735159650;
          v147 = v145 + 1;
        }
        v327 = v147;
        v323 = v144;
        v325 = v145;
        while (1)
        {
          v148 = *(std::__shared_weak_count **)(v135 + 32);
          v337 = *(_QWORD *)(v135 + 24);
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          if (v145 != v327)
            break;
LABEL_578:
          v145 = v325;
          v135 = a1;
          if (v148)
          {
            v321 = (unint64_t *)&v148->__shared_owners_;
            do
              v322 = __ldaxr(v321);
            while (__stlxr(v322 - 1, v321));
            if (!v322)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          v144 += 3;
          if (v144 == v324)
          {
            operator delete(v325);
            v144 = v323;
            goto LABEL_585;
          }
        }
        v151 = v325;
        v342 = *(_DWORD *)(a1 + 44);
        v152 = (unint64_t *)&v148->__shared_owners_;
        while (2)
        {
          v153 = 0;
          v328 = v151;
LABEL_250:
          v154 = *v151;
          v156 = (AMCP *)*v144;
          v155 = v144[1];
          v146.n128_u32[0] = *v144;
          v146.n128_u32[1] = *v151;
          if (v155 != 1667658612)
          {
            if (v155 != 1918990199)
            {
              if (v155 == 1886155636)
              {
                v157 = 3;
                v158 = 1;
                goto LABEL_268;
              }
              goto LABEL_269;
            }
            if (v144[2])
              goto LABEL_269;
            if (v148)
            {
              do
                v159 = __ldxr(v152);
              while (__stxr(v159 + 1, v152));
              do
                v160 = __ldxr(v152);
              while (__stxr(v160 + 1, v152));
            }
            std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v344, v153, v146.n128_f64[0]);
            v161 = v344;
            v162 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
            if (v148)
            {
              do
                v163 = __ldxr(v152);
              while (__stxr(v163 + 1, v152));
            }
            *((_QWORD *)&v356 + 1) = 0;
            v164 = operator new(0x28uLL);
            *v164 = &off_1E6986220;
            v164[1] = v337;
            v164[2] = v148;
            if (v148)
            {
              do
                v165 = __ldxr(v152);
              while (__stxr(v165 + 1, v152));
            }
            *((_DWORD *)v164 + 6) = v342;
            *((_DWORD *)v164 + 7) = (_DWORD)v156;
            *((_DWORD *)v164 + 8) = v154;
            *((_DWORD *)v164 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v164;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v161, v162, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v166 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v166 = &v354;
              v167 = 4;
LABEL_324:
              (*v166)[v167]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v167 = 5;
              goto LABEL_324;
            }
            if (v148)
            {
              do
                v200 = __ldaxr(v152);
              while (__stlxr(v200 - 1, v152));
              if (!v200)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v201 = v344;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v354, v344);
            v358 = *(_QWORD *)(v201 + 40);
            v359 = *(_DWORD *)(v201 + 48);
            v202 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
            v203 = v354;
            v204 = v355;
            v354 = 0;
            v355 = 0;
            __p[0] = v203;
            __p[1] = (void *)v204;
            v347 = v356;
            LODWORD(v348) = v357;
            if (*((_QWORD *)&v356 + 1))
            {
              v205 = *(_QWORD *)(v356 + 8);
              if ((v204 & (v204 - 1)) != 0)
              {
                if (v205 >= v204)
                  v205 %= v204;
              }
              else
              {
                v205 &= v204 - 1;
              }
              *((_QWORD *)v203 + v205) = &v347;
              v356 = 0uLL;
            }
            v349 = v358;
            v350 = v359;
            v361 = 0;
            v221 = operator new(0x40uLL);
            *v221 = &off_1E69862B0;
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v221 + 1), (uint64_t *)__p);
            v221[6] = v349;
            *((_DWORD *)v221 + 14) = v350;
            v361 = (__int128 *)v221;
            v351 = 0u;
            v352 = 0u;
            v353 = 0;
            std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v351, (uint64_t)&v360);
            v353 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v201, v202, (AMCP *)&v351);
            if (v353)
              v353(0, (uint64_t)&v351, 0, 0);
            v222 = v361;
            if (v361 == &v360)
            {
              v222 = &v360;
              v224 = 4;
              v223 = v337;
LABEL_372:
              (*(void (**)(void))(*(_QWORD *)v222 + 8 * v224))();
            }
            else
            {
              v223 = v337;
              if (v361)
              {
                v224 = 5;
                goto LABEL_372;
              }
            }
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v354);
            v225 = v344;
            v226 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
            if (v148)
            {
              do
                v227 = __ldxr(v152);
              while (__stxr(v227 + 1, v152));
            }
            *((_QWORD *)&v356 + 1) = 0;
            v228 = operator new(0x28uLL);
            *v228 = &off_1E69863A0;
            v228[1] = v223;
            v228[2] = v148;
            if (v148)
            {
              do
                v229 = __ldxr(v152);
              while (__stxr(v229 + 1, v152));
            }
            *((_DWORD *)v228 + 6) = v342;
            *((_DWORD *)v228 + 7) = (_DWORD)v156;
            *((_DWORD *)v228 + 8) = v154;
            *((_DWORD *)v228 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v228;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v225, v226, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v230 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v230 = &v354;
              v231 = 4;
LABEL_383:
              (*v230)[v231]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v231 = 5;
              goto LABEL_383;
            }
            if (v148)
            {
              do
                v232 = __ldaxr(v152);
              while (__stlxr(v232 - 1, v152));
              if (!v232)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v233 = v344;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v354, v344);
            v358 = *(_QWORD *)(v233 + 40);
            v359 = *(_DWORD *)(v233 + 48);
            v234 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            v235 = v354;
            v236 = v355;
            v354 = 0;
            v355 = 0;
            __p[0] = v235;
            __p[1] = (void *)v236;
            v347 = v356;
            LODWORD(v348) = v357;
            if (*((_QWORD *)&v356 + 1))
            {
              v237 = *(_QWORD *)(v356 + 8);
              if ((v236 & (v236 - 1)) != 0)
              {
                if (v237 >= v236)
                  v237 %= v236;
              }
              else
              {
                v237 &= v236 - 1;
              }
              *((_QWORD *)v235 + v237) = &v347;
              v356 = 0uLL;
            }
            v349 = v358;
            v350 = v359;
            v361 = 0;
            v238 = operator new(0x40uLL);
            *v238 = &off_1E6986430;
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v238 + 1), (uint64_t *)__p);
            v238[6] = v349;
            *((_DWORD *)v238 + 14) = v350;
            v361 = (__int128 *)v238;
            v351 = 0u;
            v352 = 0u;
            v353 = 0;
            std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v351, (uint64_t)&v360);
            v353 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v233, v234, (AMCP *)&v351);
            if (v353)
              v353(0, (uint64_t)&v351, 0, 0);
            v239 = v361;
            if (v361 == &v360)
            {
              v239 = &v360;
              v241 = 4;
              v240 = v337;
LABEL_400:
              (*(void (**)(void))(*(_QWORD *)v239 + 8 * v241))();
            }
            else
            {
              v240 = v337;
              if (v361)
              {
                v241 = 5;
                goto LABEL_400;
              }
            }
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v354);
            if (v148)
            {
              do
                v242 = __ldaxr(v152);
              while (__stlxr(v242 - 1, v152));
              if (!v242)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
              do
                v243 = __ldaxr(v152);
              while (__stlxr(v243 - 1, v152));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
              v244 = v344;
              do
                v245 = __ldxr(v152);
              while (__stxr(v245 + 1, v152));
              Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
              do
                v247 = __ldxr(v152);
              while (__stxr(v247 + 1, v152));
            }
            else
            {
              v244 = v344;
              Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
            }
            *((_QWORD *)&v356 + 1) = 0;
            v248 = operator new(0x28uLL);
            *v248 = &off_1E69864B0;
            v248[1] = v240;
            v248[2] = v148;
            if (v148)
            {
              do
                v249 = __ldxr(v152);
              while (__stxr(v249 + 1, v152));
            }
            *((_DWORD *)v248 + 6) = v342;
            *((_DWORD *)v248 + 7) = (_DWORD)v156;
            *((_DWORD *)v248 + 8) = v154;
            *((_DWORD *)v248 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v248;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v244, Is_Property_Settable, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v250 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v250 = &v354;
              v251 = 4;
LABEL_422:
              (*v250)[v251]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v251 = 5;
              goto LABEL_422;
            }
            if (v148)
            {
              do
                v252 = __ldaxr(v152);
              while (__stlxr(v252 - 1, v152));
              if (!v252)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
              do
                v253 = __ldaxr(v152);
              while (__stlxr(v253 - 1, v152));
              if (!v253)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
              v254 = v344;
              do
                v255 = __ldxr(v152);
              while (__stxr(v255 + 1, v152));
              v256 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              do
                v257 = __ldxr(v152);
              while (__stxr(v257 + 1, v152));
            }
            else
            {
              v254 = v344;
              v256 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
            }
            *((_QWORD *)&v356 + 1) = 0;
            v258 = operator new(0x28uLL);
            *v258 = &off_1E6986540;
            v258[1] = v240;
            v258[2] = v148;
            if (v148)
            {
              do
                v259 = __ldxr(v152);
              while (__stxr(v259 + 1, v152));
            }
            *((_DWORD *)v258 + 6) = v342;
            *((_DWORD *)v258 + 7) = (_DWORD)v156;
            *((_DWORD *)v258 + 8) = v154;
            *((_DWORD *)v258 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v258;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v254, v256, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v260 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v260 = &v354;
              v261 = 4;
              v151 = v328;
LABEL_444:
              (*v260)[v261]();
            }
            else
            {
              v151 = v328;
              if (*((_QWORD *)&v356 + 1))
              {
                v261 = 5;
                goto LABEL_444;
              }
            }
            if (v148)
            {
              do
                v262 = __ldaxr(v152);
              while (__stlxr(v262 - 1, v152));
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
              do
                v263 = __ldaxr(v152);
              while (__stlxr(v263 - 1, v152));
              if (!v263)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            v264 = v344;
            Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
            v354 = &off_1E6986640;
            *((_QWORD *)&v356 + 1) = &v354;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v264, Property_Type_Hint, (AMCP *)__p);
            if (v348)
LABEL_569:
              v348(0, (uint64_t)__p, 0, 0);
LABEL_570:
            v319 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v319 = &v354;
              v320 = 4;
LABEL_574:
              (*v319)[v320]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v320 = 5;
              goto LABEL_574;
            }
            if (v344)
              std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v344 + 40), &v344);
LABEL_270:
            v168 = v345;
            if (v345)
            {
              v169 = (unint64_t *)&v345->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v168->__on_zero_shared)(v168, v146);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            if (++v153 > a2)
            {
              if (++v151 == v327)
                goto LABEL_578;
              continue;
            }
            goto LABEL_250;
          }
          break;
        }
        v158 = 0;
        v157 = 4;
LABEL_268:
        if (v144[2])
        {
LABEL_269:
          v344 = 0;
          v345 = 0;
          goto LABEL_270;
        }
        v333 = v146.n128_f64[0];
        v329 = v157;
        AMCP::get_property_traits(v156, (uint64_t)__p);
        v171 = 0x676C6F6200000000;
        if (__p[1] != (void *)v347)
        {
          v172 = __p[1];
          while ((_DWORD)v154 != *v172)
          {
            if (++v172 == (_DWORD *)v347)
            {
              v171 = 0x676C6F6200000000;
              goto LABEL_283;
            }
          }
          v171 = v154 << 32;
        }
LABEL_283:
        v173 = HIDWORD(v348);
        if (__p[1])
          operator delete(__p[1]);
        if (v173)
          v174 = v173;
        else
          v174 = v156;
        v175 = v171 | v174;
        if (v148)
        {
          do
            v176 = __ldxr(v152);
          while (__stxr(v176 + 1, v152));
          v177 = v333;
          if ((v158 & 1) != 0)
          {
            if ((_DWORD)v174 == 1684234612)
            {
              v178 = v337;
              do
                v179 = __ldxr(v152);
              while (__stxr(v179 + 1, v152));
LABEL_304:
              std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v344, v153, v177);
              v186 = v344;
              v187 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
              if (v148)
              {
                do
                  v188 = __ldxr(v152);
                while (__stxr(v188 + 1, v152));
              }
              *((_QWORD *)&v356 + 1) = 0;
              v189 = operator new(0x28uLL);
              *v189 = &off_1E6986728;
              v189[1] = v178;
              v189[2] = v148;
              if (v148)
              {
                do
                  v190 = __ldxr(v152);
                while (__stxr(v190 + 1, v152));
              }
              *((_DWORD *)v189 + 6) = v342;
              *((_DWORD *)v189 + 7) = (_DWORD)v156;
              *((_DWORD *)v189 + 8) = v154;
              *((_DWORD *)v189 + 9) = v153;
              *((_QWORD *)&v356 + 1) = v189;
              *(_OWORD *)__p = 0u;
              v347 = 0u;
              v348 = 0;
              std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
              v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v186, v187, (AMCP *)__p);
              if (v348)
                v348(0, (uint64_t)__p, 0, 0);
              v191 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
              v151 = v328;
              if (*((uint64_t (****)())&v356 + 1) == &v354)
              {
                v191 = &v354;
                v192 = 4;
LABEL_467:
                (*v191)[v192]();
              }
              else if (*((_QWORD *)&v356 + 1))
              {
                v192 = 5;
                goto LABEL_467;
              }
              if (v148)
              {
                do
                  v273 = __ldaxr(v152);
                while (__stlxr(v273 - 1, v152));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(v344);
              if (v148)
              {
                do
                  v220 = __ldaxr(v152);
                while (__stlxr(v220 - 1, v152));
                goto LABEL_518;
              }
LABEL_529:
              v297 = v344;
              v299 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
LABEL_530:
              *((_QWORD *)&v356 + 1) = 0;
              v301 = operator new(0x28uLL);
              *v301 = &off_1E6986C38;
              v301[1] = v178;
              v301[2] = v148;
              if (v148)
              {
                do
                  v302 = __ldxr(v152);
                while (__stxr(v302 + 1, v152));
              }
              *((_DWORD *)v301 + 6) = v342;
              *(_QWORD *)((char *)v301 + 28) = v175;
              *((_DWORD *)v301 + 9) = v153;
              *((_QWORD *)&v356 + 1) = v301;
              *(_OWORD *)__p = 0u;
              v347 = 0u;
              v348 = 0;
              std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
              v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v297, v299, (AMCP *)__p);
              if (v348)
                v348(0, (uint64_t)__p, 0, 0);
              v303 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
              if (*((uint64_t (****)())&v356 + 1) == &v354)
              {
                v303 = &v354;
                v304 = 4;
LABEL_538:
                (*v303)[v304]();
              }
              else if (*((_QWORD *)&v356 + 1))
              {
                v304 = 5;
                goto LABEL_538;
              }
              if (v148)
              {
                do
                  v305 = __ldaxr(v152);
                while (__stlxr(v305 - 1, v152));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
                do
                  v306 = __ldaxr(v152);
                while (__stlxr(v306 - 1, v152));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
                v307 = v344;
                do
                  v308 = __ldxr(v152);
                while (__stxr(v308 + 1, v152));
                v309 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
                do
                  v310 = __ldxr(v152);
                while (__stxr(v310 + 1, v152));
              }
              else
              {
                v307 = v344;
                v309 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              }
              *((_QWORD *)&v356 + 1) = 0;
              v311 = operator new(0x28uLL);
              *v311 = &off_1E6986CB8;
              v311[1] = v178;
              v311[2] = v148;
              if (v148)
              {
                do
                  v312 = __ldxr(v152);
                while (__stxr(v312 + 1, v152));
              }
              *((_DWORD *)v311 + 6) = v342;
              *(_QWORD *)((char *)v311 + 28) = v175;
              *((_DWORD *)v311 + 9) = v153;
              *((_QWORD *)&v356 + 1) = v311;
              *(_OWORD *)__p = 0u;
              v347 = 0u;
              v348 = 0;
              std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
              v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v307, v309, (AMCP *)__p);
              if (v348)
                v348(0, (uint64_t)__p, 0, 0);
              v313 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
              if (*((uint64_t (****)())&v356 + 1) == &v354)
              {
                v313 = &v354;
                v314 = 4;
LABEL_560:
                (*v313)[v314]();
              }
              else if (*((_QWORD *)&v356 + 1))
              {
                v314 = 5;
                goto LABEL_560;
              }
              if (v148)
              {
                do
                  v315 = __ldaxr(v152);
                while (__stlxr(v315 - 1, v152));
                if (!v315)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
                do
                  v316 = __ldaxr(v152);
                while (__stlxr(v316 - 1, v152));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
              v317 = v344;
              v318 = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
              v354 = &off_1E6986D38;
              LODWORD(v355) = v329;
              *((_QWORD *)&v356 + 1) = &v354;
              *(_OWORD *)__p = 0u;
              v347 = 0u;
              v348 = 0;
              std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
              v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v317, v318, (AMCP *)__p);
              if (v348)
                goto LABEL_569;
              goto LABEL_570;
            }
            do
              v183 = __ldxr(v152);
            while (__stxr(v183 + 1, v152));
            v178 = v337;
            do
              v184 = __ldxr(v152);
            while (__stxr(v184 + 1, v152));
            v185 = v148;
LABEL_457:
            std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v344, v153, v177);
            v266 = v344;
            v267 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
            if (v148)
            {
              do
                v268 = __ldxr(v152);
              while (__stxr(v268 + 1, v152));
            }
            *((_QWORD *)&v356 + 1) = 0;
            v269 = operator new(0x28uLL);
            *v269 = &off_1E6986838;
            v269[1] = v178;
            v269[2] = v148;
            if (v148)
            {
              do
                v270 = __ldxr(v152);
              while (__stxr(v270 + 1, v152));
            }
            *((_DWORD *)v269 + 6) = v342;
            *(_QWORD *)((char *)v269 + 28) = v175;
            *((_DWORD *)v269 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v269;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v266, v267, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v271 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v271 = &v354;
              v272 = 4;
LABEL_476:
              (*v271)[v272]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v272 = 5;
              goto LABEL_476;
            }
            if (v148)
            {
              do
                v274 = __ldaxr(v152);
              while (__stlxr(v274 - 1, v152));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(v344);
            v275 = v344;
            v276 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
            if (v185)
            {
              v277 = (unint64_t *)&v185->__shared_owners_;
              do
                v278 = __ldxr(v277);
              while (__stxr(v278 + 1, v277));
            }
            *((_QWORD *)&v356 + 1) = 0;
            v279 = operator new(0x28uLL);
            *v279 = &off_1E6986928;
            v279[1] = v178;
            v279[2] = v185;
            if (v185)
            {
              v280 = (unint64_t *)&v185->__shared_owners_;
              do
                v281 = __ldxr(v280);
              while (__stxr(v281 + 1, v280));
            }
            *((_DWORD *)v279 + 6) = v342;
            *(_QWORD *)((char *)v279 + 28) = v175;
            *((_DWORD *)v279 + 9) = v153;
            *((_QWORD *)&v356 + 1) = v279;
            *(_OWORD *)__p = 0u;
            v347 = 0u;
            v348 = 0;
            std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
            v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v275, v276, (AMCP *)__p);
            if (v348)
              v348(0, (uint64_t)__p, 0, 0);
            v282 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
            if (*((uint64_t (****)())&v356 + 1) == &v354)
            {
              v282 = &v354;
              v283 = 4;
LABEL_493:
              (*v282)[v283]();
            }
            else if (*((_QWORD *)&v356 + 1))
            {
              v283 = 5;
              goto LABEL_493;
            }
            if (v185)
            {
              v284 = (unint64_t *)&v185->__shared_owners_;
              do
                v285 = __ldaxr(v284);
              while (__stlxr(v285 - 1, v284));
              if (!v285)
              {
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
              }
            }
            v286 = v344;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v354, v344);
            v358 = *(_QWORD *)(v286 + 40);
            v359 = *(_DWORD *)(v286 + 48);
            v287 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            v288 = v354;
            v289 = v355;
            v354 = 0;
            v355 = 0;
            __p[0] = v288;
            __p[1] = (void *)v289;
            v347 = v356;
            LODWORD(v348) = v357;
            if (*((_QWORD *)&v356 + 1))
            {
              v290 = *(_QWORD *)(v356 + 8);
              if ((v289 & (v289 - 1)) != 0)
              {
                if (v290 >= v289)
                  v290 %= v289;
              }
              else
              {
                v290 &= v289 - 1;
              }
              *((_QWORD *)v288 + v290) = &v347;
              v356 = 0uLL;
            }
            v349 = v358;
            v350 = v359;
            v361 = 0;
            v291 = operator new(0x40uLL);
            *v291 = &off_1E69869B8;
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v291 + 1), (uint64_t *)__p);
            v291[6] = v349;
            *((_DWORD *)v291 + 14) = v350;
            v361 = (__int128 *)v291;
            v351 = 0u;
            v352 = 0u;
            v353 = 0;
            std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v351, (uint64_t)&v360);
            v353 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
            std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v286, v287, (AMCP *)&v351);
            if (v353)
              v353(0, (uint64_t)&v351, 0, 0);
            v292 = v361;
            v178 = v337;
            v151 = v328;
            if (v361 == &v360)
            {
              v292 = &v360;
              v293 = 4;
LABEL_511:
              (*(void (**)(void))(*(_QWORD *)v292 + 8 * v293))();
            }
            else if (v361)
            {
              v293 = 5;
              goto LABEL_511;
            }
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
            std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v354);
            if (!v185)
              goto LABEL_516;
            v294 = (unint64_t *)&v185->__shared_owners_;
            do
              v295 = __ldaxr(v294);
            while (__stlxr(v295 - 1, v294));
            if (!v295)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
              if (!v148)
                goto LABEL_529;
            }
            else
            {
LABEL_516:
              if (!v148)
                goto LABEL_529;
            }
            do
              v220 = __ldaxr(v152);
            while (__stlxr(v220 - 1, v152));
LABEL_518:
            if (!v220)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
            do
              v296 = __ldaxr(v152);
            while (__stlxr(v296 - 1, v152));
            if (!v296)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
            v297 = v344;
            do
              v298 = __ldxr(v152);
            while (__stxr(v298 + 1, v152));
            v299 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
            do
              v300 = __ldxr(v152);
            while (__stxr(v300 + 1, v152));
            goto LABEL_530;
          }
          do
            v180 = __ldxr(v152);
          while (__stxr(v180 + 1, v152));
          do
            v181 = __ldxr(v152);
          while (__stxr(v181 + 1, v152));
          v182 = v148;
        }
        else
        {
          v177 = v333;
          if ((v158 & 1) != 0)
          {
            v178 = v337;
            if ((_DWORD)v174 == 1684234612)
              goto LABEL_304;
            v185 = 0;
            goto LABEL_457;
          }
          v182 = 0;
        }
        v178 = v337;
        std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v344, v153, v177);
        v193 = v344;
        v194 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
        if (v148)
        {
          do
            v195 = __ldxr(v152);
          while (__stxr(v195 + 1, v152));
        }
        *((_QWORD *)&v356 + 1) = 0;
        v196 = operator new(0x28uLL);
        *v196 = &off_1E6986A38;
        v196[1] = v337;
        v196[2] = v148;
        if (v148)
        {
          do
            v197 = __ldxr(v152);
          while (__stxr(v197 + 1, v152));
        }
        *((_DWORD *)v196 + 6) = v342;
        *(_QWORD *)((char *)v196 + 28) = v175;
        *((_DWORD *)v196 + 9) = v153;
        *((_QWORD *)&v356 + 1) = v196;
        *(_OWORD *)__p = 0u;
        v347 = 0u;
        v348 = 0;
        std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
        v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v193, v194, (AMCP *)__p);
        if (v348)
          v348(0, (uint64_t)__p, 0, 0);
        v198 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
        if (*((uint64_t (****)())&v356 + 1) == &v354)
        {
          v198 = &v354;
          v199 = 4;
LABEL_333:
          (*v198)[v199]();
        }
        else if (*((_QWORD *)&v356 + 1))
        {
          v199 = 5;
          goto LABEL_333;
        }
        if (v148)
        {
          do
            v206 = __ldaxr(v152);
          while (__stlxr(v206 - 1, v152));
          if (!v206)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v344);
        v207 = v344;
        v208 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
        if (v182)
        {
          v209 = (unint64_t *)&v182->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
        }
        *((_QWORD *)&v356 + 1) = 0;
        v211 = operator new(0x28uLL);
        *v211 = &off_1E6986B28;
        v211[1] = v337;
        v211[2] = v182;
        if (v182)
        {
          v212 = (unint64_t *)&v182->__shared_owners_;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
        }
        *((_DWORD *)v211 + 6) = v342;
        *(_QWORD *)((char *)v211 + 28) = v175;
        *((_DWORD *)v211 + 9) = v153;
        *((_QWORD *)&v356 + 1) = v211;
        *(_OWORD *)__p = 0u;
        v347 = 0u;
        v348 = 0;
        std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v354);
        v348 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v207, v208, (AMCP *)__p);
        if (v348)
          v348(0, (uint64_t)__p, 0, 0);
        v214 = (uint64_t (***)())*((_QWORD *)&v356 + 1);
        if (*((uint64_t (****)())&v356 + 1) == &v354)
        {
          v214 = &v354;
          v215 = 4;
          v151 = v328;
LABEL_350:
          (*v214)[v215]();
        }
        else
        {
          v151 = v328;
          if (*((_QWORD *)&v356 + 1))
          {
            v215 = 5;
            goto LABEL_350;
          }
        }
        if (v182)
        {
          v216 = (unint64_t *)&v182->__shared_owners_;
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(v344);
        if (!v182)
          goto LABEL_360;
        v218 = (unint64_t *)&v182->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
          if (!v148)
            goto LABEL_529;
        }
        else
        {
LABEL_360:
          if (!v148)
            goto LABEL_529;
        }
        do
          v220 = __ldaxr(v152);
        while (__stlxr(v220 - 1, v152));
        goto LABEL_518;
      }
LABEL_585:
      if (v144)
        operator delete(v144);
    }
  }
}

void sub_1B5AFD8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  if (v37)
    operator delete(v37);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[245];
}

uint64_t std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[247];
}

uint64_t std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Is_Property_Settable;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      result = 0;
      *a4 = Is_Property_Settable;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Has_Property;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      result = 0;
      *a4 = Has_Property;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Property_Type_Hint;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
      result = 0;
      *a4 = Property_Type_Hint;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[251];
}

uint64_t std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E69867B8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5AFE920(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[253];
}

uint64_t std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6986D38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6986D38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986CB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986CB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986CB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986CB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1)
{
  return AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986C38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986C38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986C38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986C38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::operator()(uint64_t a1)
{
  unint64_t IsPropertySettable;
  BOOL v2;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  if ((_DWORD)IsPropertySettable)
    v2 = 1;
  else
    v2 = HIDWORD(IsPropertySettable) == 0;
  return !v2;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986B28;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986B28;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986B28;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986B28;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  void (*v4)(_QWORD, _QWORD, _QWORD, _QWORD);
  CFTypeRef *v5;
  CFTypeRef v6;
  CFTypeRef *v7;
  AMCP::ASP::PlugIn *v8;
  uint64_t v9;
  _OWORD v10[2];
  void (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t (*v15)(uint64_t, _OWORD *, _QWORD, uint64_t *);

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)v10, a2);
  if (!v11)
    goto LABEL_12;
  v3 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  v4 = v11;
  *(_QWORD *)&v14[0] = 0;
  if (v11)
  {
    v11(3, v10, 0, v14);
    v4 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))&v14[0];
  }
  if (v4 == (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v3)
  {
    *(_QWORD *)&v14[0] = v3;
    v5 = (CFTypeRef *)((uint64_t (*)(uint64_t, _OWORD *, _QWORD, _OWORD *))v11)(4, v10, 0, v14);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
        CFRetain(*v5);
      goto LABEL_13;
    }
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  v13 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v11(6, v10, v14, &v13);
  if (!v15)
    goto LABEL_12;
  v12 = v3;
  v7 = (CFTypeRef *)v15(4, v14, 0, &v12);
  if (v7)
  {
    v6 = *v7;
    if (*v7)
      CFRetain(*v7);
  }
  else
  {
    v6 = 0;
  }
  if (v15)
    v15(0, v14, 0, 0);
LABEL_13:
  v8 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)&v14[0] = v6;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v8, v9, 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, v14);
  if (v6)
    CFRelease(v6);
  if (v11)
    v11(0, v10, 0, 0);
}

void sub_1B5AFF230(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlRKNS_5ThingEE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986A38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986A38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

applesauce::CF::StringRef *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  applesauce::CF::StringRef *result;
  CFTypeRef v5;
  CFTypeRef cf;

  result = (applesauce::CF::StringRef *)AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (result == (applesauce::CF::StringRef *)0x800000000
    && (cf = 0,
        result = (applesauce::CF::StringRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, &cf), !(_DWORD)result)&& (v5 = cf) != 0)
  {
    CFRetain(cf);
    return applesauce::CF::StringRef::StringRef(a2, v5);
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlvE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69869B8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69869B8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69869B8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5AFF590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69869B8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *v13;
  int v14;
  const char *v15;
  std::runtime_error v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  const char *v25;
  std::runtime_error v26;
  CFTypeRef cf;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(&cf, a2);
  v3 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = *(std::__shared_weak_count **)v43;
    v18 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v19 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const mcp_applesauce::CF::PropertyListRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v24);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v25 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v25)
      (*(void (**)(const char *))(*(_QWORD *)v25 + 24))(v25);
    v26 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v43;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v9 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const mcp_applesauce::CF::PropertyListRef &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v14 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v14);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v13, (const std::runtime_error *)buf);
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v46;
    v13[1].__imp_.__imp_ = v46;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v47;
    LODWORD(v13[3].__vftable) = v48;
    v13[2] = v16;
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 48))(v6, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B5AFFB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN14mcp_applesauce2CF15PropertyListRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986928;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986928;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986928;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986928;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  void (*v4)(_QWORD, _QWORD, _QWORD, _QWORD);
  CFTypeRef *v5;
  CFTypeRef v6;
  CFTypeRef *v7;
  AMCP::ASP::PlugIn *v8;
  uint64_t v9;
  _OWORD v10[2];
  void (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t (*v15)(uint64_t, _OWORD *, _QWORD, uint64_t *);

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>((uint64_t)v10, a2);
  if (!v11)
    goto LABEL_12;
  v3 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  v4 = v11;
  *(_QWORD *)&v14[0] = 0;
  if (v11)
  {
    v11(3, v10, 0, v14);
    v4 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))&v14[0];
  }
  if (v4 == (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v3)
  {
    *(_QWORD *)&v14[0] = v3;
    v5 = (CFTypeRef *)((uint64_t (*)(uint64_t, _OWORD *, _QWORD, _OWORD *))v11)(4, v10, 0, v14);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
        CFRetain(*v5);
      goto LABEL_13;
    }
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  v13 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v11(6, v10, v14, &v13);
  if (!v15)
    goto LABEL_12;
  v12 = v3;
  v7 = (CFTypeRef *)v15(4, v14, 0, &v12);
  if (v7)
  {
    v6 = *v7;
    if (*v7)
      CFRetain(*v7);
  }
  else
  {
    v6 = 0;
  }
  if (v15)
    v15(0, v14, 0, 0);
LABEL_13:
  v8 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)&v14[0] = v6;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v8, v9, 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, v14);
  if (v6)
    CFRelease(v6);
  if (v11)
    v11(0, v10, 0, 0);
}

void sub_1B5B00034(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986838;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986838;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

mcp_applesauce::CF::PropertyListRef *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, mcp_applesauce::CF::PropertyListRef *a2@<X8>)
{
  mcp_applesauce::CF::PropertyListRef *result;
  CFTypeRef cf;

  result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (result == (mcp_applesauce::CF::PropertyListRef *)0x800000000)
  {
    cf = 0;
    result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, &cf);
    if (!(_DWORD)result)
      return mcp_applesauce::CF::PropertyListRef::from_get(a2, cf);
  }
  *(_QWORD *)a2 = 0;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69867B8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69867B8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69867B8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B00380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69867B8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::runtime_error *v14;
  int v15;
  const char *v16;
  std::runtime_error v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::runtime_error *exception;
  int v25;
  const char *v26;
  std::runtime_error v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v43;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v20 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = mcp_applesauce::CF::PropertyListRef, Argument_Types = <>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v25 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v25);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v26 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v26)
      (*(void (**)(const char *))(*(_QWORD *)v26 + 24))(v26);
    v27 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v27;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v43;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v10 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = mcp_applesauce::CF::PropertyListRef, Argument_Types = <>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v15 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v15);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v14, (const std::runtime_error *)buf);
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v16 = v46;
    v14[1].__imp_.__imp_ = v46;
    if (v16)
      (*(void (**)(const char *))(*(_QWORD *)v16 + 24))(v16);
    v17 = v47;
    LODWORD(v14[3].__vftable) = v48;
    v14[2] = v17;
    v14->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v7 + 48))(buf);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(a2, (CFTypeRef *)buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
}

void sub_1B5B00968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN14mcp_applesauce2CF15PropertyListRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986728;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986728;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986728;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986728;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

mcp_applesauce::CF::PropertyListRef *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, mcp_applesauce::CF::PropertyListRef *a2@<X8>)
{
  uint64_t v4;
  AMCP::ASP::PlugIn *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  mcp_applesauce::CF::PropertyListRef *result;
  CFTypeRef cf;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;

  v4 = 0x676C6F6200000000;
  cf = 0;
  v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 24);
  AMCP::get_property_traits((AMCP *)*(unsigned int *)(a1 + 28), (uint64_t)&v15);
  if (v16 != v17)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v16;
    while ((_DWORD)v7 != *v8)
    {
      if (++v8 == v17)
        goto LABEL_7;
    }
    v4 = v7 << 32;
  }
LABEL_7:
  v9 = v18;
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 36);
  if (v16)
    operator delete(v16);
  if (v9)
    v12 = v9;
  else
    v12 = v10;
  v15 = v4 | v12;
  LODWORD(v16) = v11;
  result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v6, 0, (const AudioObjectPropertyAddress *)&v15, 0, 0, 8, &cf);
  if (!(_DWORD)result)
    return mcp_applesauce::CF::PropertyListRef::from_get(a2, cf);
  *(_QWORD *)a2 = 0;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL32make_custom_property_getter_dcatERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6986640;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6986640;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::operator()()
{
  return 16;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986540;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986540;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986540;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986540;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

uint64_t AMCP::ASP::property_always_exists(AMCP::ASP *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;
  unsigned __int16 v5;
  unsigned int v6;

  v2 = (int)this;
  result = 1;
  if (v2 > 1935892840)
  {
    if (v2 > 1936092478)
    {
      if (v2 <= 1936745314)
      {
        v6 = v2 - 1936092479;
        if (v6 > 0x35 || ((1 << v6) & 0x20400400000001) == 0)
          return 0;
        return result;
      }
      if (v2 == 1936745315 || v2 == 1936745334)
        return result;
      v4 = 1952805485;
    }
    else if (v2 > 1935960433)
    {
      if (v2 > 1935962741)
      {
        if (v2 == 1935962742)
          return result;
        v4 = 1936092451;
      }
      else
      {
        if (v2 == 1935960434)
          return result;
        v4 = 1935962738;
      }
    }
    else
    {
      if (v2 > 1935894637)
      {
        if (v2 == 1935894638)
          return result;
        v5 = 26990;
      }
      else
      {
        if (v2 == 1935892841)
          return result;
        v5 = 25449;
      }
      v4 = v5 | 0x73630000;
    }
LABEL_39:
    if (v2 == v4)
      return result;
    return 0;
  }
  if (v2 > 1818456949)
  {
    if (v2 > 1885762656)
    {
      if (v2 == 1885762657 || v2 == 1885762669)
        return result;
      v4 = 1935762292;
    }
    else
    {
      if ((v2 - 1885762592) <= 0x1F && ((1 << (v2 - 32)) & 0x80000009) != 0 || v2 == 1818456950)
        return result;
      v4 = 1819569763;
    }
    goto LABEL_39;
  }
  if (v2 > 1668506479)
  {
    if ((v2 - 1818453106) <= 4 && ((1 << (v2 - 114)) & 0x13) != 0 || v2 == 1668506480)
      return result;
    v4 = 1818456932;
    goto LABEL_39;
  }
  if (v2 != 1650685548 && v2 != 1667591277)
  {
    v4 = 1668049771;
    goto LABEL_39;
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69864B0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69864B0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69864B0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69864B0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::operator()(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target_type()
{
}

uint64_t AMCP::ASP::property_always_is_settable(AMCP::ASP *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = (int)this;
  result = 1;
  if (v2 > 1935893352)
  {
    if (v2 > 1936092531)
    {
      if (v2 == 1936092532)
        return result;
      v4 = 1936745334;
    }
    else
    {
      if (v2 == 1935893353)
        return result;
      v4 = 1935962742;
    }
  }
  else if (v2 > 1818456949)
  {
    if (v2 == 1818456950)
      return result;
    v4 = 1885762592;
  }
  else
  {
    if (v2 == 1650685548)
      return result;
    v4 = 1818453110;
  }
  if (v2 != v4)
    return 0;
  return result;
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986430;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986430;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6986430;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B015D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6986430;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *v13;
  int v14;
  const char *v15;
  std::runtime_error v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  const char *v25;
  std::runtime_error v26;
  void *__p[3];
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::runtime_error v34;
  std::runtime_error v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  const char *v46;
  std::runtime_error v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(__p, a2);
  v3 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((_QWORD *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = *(std::__shared_weak_count **)v43;
    v18 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v19 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 154;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const AMCP::Bag_O_Bytes &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 154;
    std::vector<void *>::vector(&v28);
    v24 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v24);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v25 = v46;
    exception[1].__imp_.__imp_ = v46;
    if (v25)
      (*(void (**)(const char *))(*(_QWORD *)v25 + 24))(v25);
    v26 = v47;
    LODWORD(exception[3].__vftable) = v48;
    exception[2] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v43;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v9 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Operation.h";
      v44 = 1024;
      v45 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v36 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    v47.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = void, Argument_Types = <const AMCP::Bag_O_Bytes &>]";
    v47.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v48 = 161;
    std::vector<void *>::vector(&v28);
    v14 = backtrace((void **)v28, (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v14);
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    v30 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v30);
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v13, (const std::runtime_error *)buf);
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v46;
    v13[1].__imp_.__imp_ = v46;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v47;
    LODWORD(v13[3].__vftable) = v48;
    v13[2] = v16;
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v13[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v13[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B5B01BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterINS_11Bag_O_BytesEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69863A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69863A0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69863A0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69863A0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, *(_DWORD *)(a2 + 8) - *(_QWORD *)a2, *(const void **)a2);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69862B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69862B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69862B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B02020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69862B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::runtime_error *v14;
  int v15;
  const char *v16;
  std::runtime_error v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::runtime_error *exception;
  int v25;
  const char *v26;
  std::runtime_error v27;
  void *__p;
  _BYTE *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::string v35;
  std::runtime_error v36;
  std::runtime_error v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint8_t buf[8];
  _BYTE v45[10];
  __int16 v46;
  int v47;
  const char *v48;
  std::runtime_error v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v45;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v45)
    {
      v20 = (unint64_t *)(*(_QWORD *)v45 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Operation.h";
      v46 = 1024;
      v47 = 154;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v38 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    v49.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = AMCP::Bag_O_Bytes, Argument_Types = <>]";
    v49.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v50 = 154;
    std::vector<void *>::vector(&v30);
    v25 = backtrace((void **)v30, (*((_QWORD *)&v30 + 1) - (_QWORD)v30) >> 3);
    std::vector<void *>::resize((char **)&v30, v25);
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    v32 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v32);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v26 = v48;
    exception[1].__imp_.__imp_ = v48;
    if (v26)
      (*(void (**)(const char *))(*(_QWORD *)v26 + 24))(v26);
    v27 = v49;
    LODWORD(exception[3].__vftable) = v50;
    exception[2] = v27;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v45;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v45)
    {
      v10 = (unint64_t *)(*(_QWORD *)v45 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v45 = 2080;
      *(_QWORD *)&v45[2] = "Operation.h";
      v46 = 1024;
      v47 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v38 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    v49.__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const"
                                               " [Return_Type = AMCP::Bag_O_Bytes, Argument_Types = <>]";
    v49.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v50 = 161;
    std::vector<void *>::vector(&v30);
    v15 = backtrace((void **)v30, (*((_QWORD *)&v30 + 1) - (_QWORD)v30) >> 3);
    std::vector<void *>::resize((char **)&v30, v15);
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    v32 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v32);
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v14, (const std::runtime_error *)buf);
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v16 = v48;
    v14[1].__imp_.__imp_ = v48;
    if (v16)
      (*(void (**)(const char *))(*(_QWORD *)v16 + 24))(v16);
    v17 = v49;
    LODWORD(v14[3].__vftable) = v50;
    v14[2] = v17;
    v14->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v14[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v14[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 48))(&__p);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((_QWORD *)a2, __p, (uint64_t)v29, v29 - (_BYTE *)__p);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_1B5B0261C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_11Bag_O_BytesEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986220;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986220;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6986220;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6986220;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::operator()(uint64_t a1@<X0>, void **a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  void *v6;
  char v7;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (!(_DWORD)PropertyDataSize)
  {
    v5 = HIDWORD(PropertyDataSize);
    v7 = 0;
    std::vector<std::byte>::vector(a2, HIDWORD(PropertyDataSize), &v7);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, *a2))return;
    v6 = *a2;
    if (*a2)
    {
      a2[1] = v6;
      operator delete(v6);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::target_type()
{
}

_QWORD *std::vector<AudioServerPlugInCustomPropertyInfo>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B5B02AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987AB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987AB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987A38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987A38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69879B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69879B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69879B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69879B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987938;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987938;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987938;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987938;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69878B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69878B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69878B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69878B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987838;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987838;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

applesauce::CF::URLRef *mcp_applesauce::CF::BundleRef_proxy::get_bundle_url(applesauce::CF::URLRef *this, __CFBundle *a2)
{
  applesauce::CF::URLRef *v2;
  CFURLRef v3;

  v2 = this;
  if (a2)
  {
    v3 = CFBundleCopyBundleURL(a2);
    return applesauce::CF::URLRef::URLRef(v2, v3);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69877B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69877B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69877B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69877B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987738;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987738;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987738;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987738;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69876B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69876B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69876B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69876B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987638;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987638;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987638;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987638;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69875B8;
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E69875B8;
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1E69875B8;
  _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69875B8;
  return _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return _ZNSt3__110__function12__alloc_funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyB8ne180100Ev(a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyB8ne180100Ev((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  const void *v5;
  uint64_t v6;
  _BYTE *v7;
  void *__p;
  _BYTE *v9;
  char v10;

  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28))|| (PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0), (_DWORD)PropertyDataSize))
  {
LABEL_3:
    v5 = *(const void **)(a1 + 40);
    if (v5)
      CFRetain(v5);
    *(_QWORD *)a2 = v5;
    return;
  }
  v6 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v6, __p))
  {
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
    goto LABEL_3;
  }
  v7 = __p;
  if ((unint64_t)(v9 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
  }
  else
  {
    applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
    v7 = __p;
  }
  if (v7)
  {
    v9 = v7;
    operator delete(v7);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667330160EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667330160EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

uint64_t _ZNSt3__110__function12__alloc_funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyB8ne180100Ev(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
    CFRetain(*(CFTypeRef *)(a2 + 32));
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987538;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987538;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987538;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987538;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69874B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69874B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69874B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69874B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::URLRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::URLRef::URLRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987438;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987438;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987438;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987438;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69873B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69873B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69873B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69873B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987338;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987338;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987338;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987338;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69872B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69872B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69872B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69872B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987238;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987238;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987238;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987238;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69871B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69871B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69871B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69871B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987138;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987138;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EEclESN_(uint64_t a1, _QWORD *a2)
{
  void *__p;
  void *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  *(_QWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69870B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69870B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69870B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69870B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

void AMCP::ASP::make_properties<1953653102u>(uint64_t *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t Has_Property;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  double v54[2];
  __int128 v55;
  __int128 v56;
  void (*v57)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v52 = 0uLL;
  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  strcpy((char *)v54, "nartbolg");
  BYTE1(v54[1]) = 0;
  WORD1(v54[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v53, 0, v54[0]);
  v10 = v53;
  v11 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v59 = 0;
  v14 = operator new(0x28uLL);
  *v14 = &off_1E6987C38;
  v14[1] = v7;
  v14[2] = v6;
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_DWORD *)v14 + 6) = a2;
  *(_QWORD *)((char *)v14 + 28) = 0x676C6F627472616ELL;
  *((_DWORD *)v14 + 9) = 0;
  v59 = v14;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v55, (uint64_t)v58);
  v57 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)&v55);
  if (v57)
    v57(0, (uint64_t)&v55, 0, 0);
  v19 = v59;
  if (v59 == v58)
  {
    v20 = 4;
    v19 = v58;
    goto LABEL_16;
  }
  if (v59)
  {
    v20 = 5;
LABEL_16:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v19 + 8 * v20))(v19, v17, v18);
  }
  if (v6)
  {
    v21 = (unint64_t *)&v6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v53);
  v23 = v53;
  v53 = 0uLL;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  v52 = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v6)
  {
    v30 = (unint64_t *)&v6->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v32 = v52;
  v34 = *a1;
  v33 = (std::__shared_weak_count *)a1[1];
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  else
  {
    Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v59 = 0;
  v40 = operator new(0x28uLL);
  *v40 = &off_1E6987CB8;
  v40[1] = v34;
  v40[2] = v33;
  if (v33)
  {
    v41 = (unint64_t *)&v33->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *((_DWORD *)v40 + 6) = a2;
  *(_QWORD *)((char *)v40 + 28) = 0x676C6F627472616ELL;
  *((_DWORD *)v40 + 9) = 0;
  v59 = v40;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v55, (uint64_t)v58);
  v57 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v32, Has_Property, (AMCP *)&v55);
  if (v57)
    v57(0, (uint64_t)&v55, 0, 0);
  v44 = v59;
  if (v59 == v58)
  {
    v45 = 4;
    v44 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_54;
    v45 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v44 + 8 * v45))(v44, v43);
LABEL_54:
  if (v33)
  {
    v46 = (unint64_t *)&v33->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if ((_QWORD)v52)
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v52 + 40), &v52);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1B5B05B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6988BB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6988BB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6988BB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6988BB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  AMCP::Core::Core *v4;
  double simple_required;
  AMCP::ASP::PlugIn *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  CFTypeRef v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  void *__p[3];
  void *v30[3];
  CFTypeRef cf;
  AMCP::Core::Core *v32;
  std::__shared_weak_count *v33;
  CFTypeRef v34;
  uint64_t v35[2];
  __int128 v36;
  AudioObjectPropertyAddress v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v32, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 32) + 16), *(_DWORD *)(a1 + 28));
  v4 = v32;
  if (v32)
  {
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, v32);
    simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v4);
    v6 = *(AMCP::ASP::PlugIn **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 24);
    *(_QWORD *)&v37.mSelector = 0x676C6F6272696E67;
    v37.mElement = 0;
    LODWORD(v30[0]) = 0;
    AMCP::ASP::PlugIn::ObjectGetPropertyData(v6, v7, 0, &v37, 0, 0, 4, v30);
    v8 = (int)v30[0];
    v9 = AMCP::Core::Core::get_simple_required_property<1668049764u>(v4);
    LODWORD(v30[0]) = 0;
    *(_QWORD *)&v37.mSelector = 0x696E707473616674;
    v37.mElement = 0;
    v10 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v37, (unsigned int *)v30);
    LODWORD(v30[0]) = 0;
    *(_QWORD *)&v37.mSelector = 0x6F75747073616674;
    v37.mElement = 0;
    v11 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v37, (unsigned int *)v30);
    LODWORD(v30[0]) = 0;
    *(_QWORD *)&v37.mSelector = 0x696E70746C746E63;
    v37.mElement = 0;
    v12 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v37, (unsigned int *)v30);
    LODWORD(v30[0]) = 0;
    *(_QWORD *)&v37.mSelector = 0x6F7574706C746E63;
    v37.mElement = 0;
    v13 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v37, (unsigned int *)v30);
    AMCP::ASP::make_stream_info_list((uint64_t)v30, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 32) + 16), &v32, 1768845428);
    AMCP::ASP::make_stream_info_list((uint64_t)__p, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 32) + 16), &v32, 1869968496);
    v27 = v11;
    v28 = v10;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v37, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 672));
    v14 = operator new(0x328uLL);
    v15 = v9;
    v16 = a2;
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E6988C28;
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 8);
    *((_QWORD *)&v36 + 1) = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v35[0] = 0;
    v35[1] = 0;
    v20 = *(_DWORD *)(a1 + 24);
    v21 = cf;
    if (cf)
      CFRetain(cf);
    v34 = v21;
    AMCP::ASP::Engine::Engine((uint64_t)(v14 + 3), (uint64_t *)&v36, 0, v35, v20, &v34, v8, v15, simple_required, v28, v27, v12, v13, (uint64_t)v30, (uint64_t)__p, (dispatch_queue_t *)&v37);
    a2 = v16;
    if (v21)
      CFRelease(v21);
    if (v17)
    {
      v22 = (unint64_t *)&v17->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_QWORD *)&v36 = v14 + 3;
    *((_QWORD *)&v36 + 1) = v14;
    std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)&v36, v14 + 4, (uint64_t)(v14 + 3));
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v37);
    if (__p[0])
      operator delete(__p[0]);
    if (v30[0])
      operator delete(v30[0]);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v36 = 0uLL;
  }
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *a2 = v36;
}

void sub_1B5B060CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object19populate_clock_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

void AMCP::ASP::make_stream_info_list(uint64_t a1, std::__shared_mutex_base *a2, AMCP::Core::Core **a3, int a4)
{
  AMCP::Core::Core *v8;
  unsigned int *v9;
  unsigned int *v10;
  AMCP::Core::Core *v11;
  int simple_required;
  unint64_t v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSObject *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  AMCP::Core::Core *v36;
  std::__shared_weak_count *v37;
  unsigned int *v38;
  unsigned int *v39;
  void *__p[2];
  char v41;
  _BYTE buf[44];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *a3;
  *(_DWORD *)buf = 1937009955;
  *(_DWORD *)&buf[4] = a4;
  *(_DWORD *)&buf[8] = 0;
  if (AMCP::Core::Core::has_property(v8, (const AMCP::Address *)buf))
  {
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v38, *a3, a4);
    v9 = v38;
    v10 = v39;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, v39 - v38);
    if (v9 != v10)
    {
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v36, a2, *v9);
        v11 = v36;
        if (v36)
        {
          simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v36);
          strcpy(buf, "jbodbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          v13 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v11, (const AMCP::Address *)buf);
          if (!HIDWORD(v13))
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v33 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              v34 = pthread_self();
              v35 = pthread_mach_thread_np(v34);
              v41 = 4;
              strcpy((char *)__p, "dobj");
              *(_DWORD *)buf = 67110658;
              *(_DWORD *)&buf[4] = v35;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Core.h";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 391;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "optional_value.operator BOOL() == true";
              *(_WORD *)&buf[34] = 2080;
              *(_QWORD *)&buf[36] = __p;
              v43 = 1024;
              v44 = 1735159650;
              v45 = 1024;
              v46 = 0;
              _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
              if (v41 < 0)
                operator delete(__p[0]);
            }
            abort();
          }
          v14 = v13;
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)buf, v11);
          v16 = *(_DWORD **)(a1 + 8);
          v15 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v16 >= v15)
          {
            v18 = *(_DWORD **)a1;
            v19 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v16 - *(_QWORD *)a1) >> 3);
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) > 0x492492492492492)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
            if (2 * v21 > v20)
              v20 = 2 * v21;
            if (v21 >= 0x249249249249249)
              v22 = 0x492492492492492;
            else
              v22 = v20;
            if (v22)
              v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v22);
            else
              v23 = 0;
            v24 = v22 + 56 * v19;
            *(_DWORD *)v24 = simple_required;
            *(_DWORD *)(v24 + 4) = v14;
            *(_DWORD *)(v24 + 8) = 0;
            *(_OWORD *)(v24 + 16) = *(_OWORD *)buf;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)&buf[16];
            *(_QWORD *)(v24 + 48) = *(_QWORD *)&buf[32];
            if (v16 == v18)
            {
              v29 = v22 + 56 * v19;
            }
            else
            {
              v25 = v22 + 56 * v19;
              do
              {
                v26 = *(_OWORD *)(v16 - 14);
                v27 = *(_OWORD *)(v16 - 10);
                v28 = *(_OWORD *)(v16 - 6);
                v29 = v25 - 56;
                *(_QWORD *)(v25 - 8) = *((_QWORD *)v16 - 1);
                *(_OWORD *)(v25 - 24) = v28;
                *(_OWORD *)(v25 - 40) = v27;
                *(_OWORD *)(v25 - 56) = v26;
                v16 -= 14;
                v25 -= 56;
              }
              while (v16 != v18);
            }
            v17 = (_DWORD *)(v24 + 56);
            *(_QWORD *)a1 = v29;
            *(_QWORD *)(a1 + 8) = v24 + 56;
            *(_QWORD *)(a1 + 16) = v22 + 56 * v23;
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v16 = simple_required;
            v16[1] = v14;
            v16[2] = 0;
            *((_OWORD *)v16 + 1) = *(_OWORD *)buf;
            *((_OWORD *)v16 + 2) = *(_OWORD *)&buf[16];
            *((_QWORD *)v16 + 6) = *(_QWORD *)&buf[32];
            v17 = v16 + 14;
          }
          *(_QWORD *)(a1 + 8) = v17;
        }
        v30 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        ++v9;
      }
      while (v9 != v10);
      v10 = v38;
    }
    if (v10)
      operator delete(v10);
  }
}

void sub_1B5B065AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v12;
  void *v14;

  if (v12)
    operator delete(v12);
  v14 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988B38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988B38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988B38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988B38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988AB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988AB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988AB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEEclEv(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *__p;
  _BYTE *v10;
  __int128 v11;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  LOBYTE(v11) = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  v6 = __p;
  v7 = v10 - (_BYTE *)__p;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v7 >= 0x10)
  {
    v8 = 16 * (v7 >> 4);
    do
    {
      v11 = *v6;
      CA::ValueRangeList::AddRange((double **)a2, (double *)&v11);
      ++v6;
      v8 -= 16;
    }
    while (v8);
    v6 = __p;
  }
  if (v6)
  {
    v10 = v6;
    operator delete(v6);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988A38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988A38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988A38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69889B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69889B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69889B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69889B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988938;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988938;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988938;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988938;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  void *__p;
  _BYTE *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  memcpy(__p, a2, v5 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKdE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKdE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69888B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69888B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69888B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69888B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

double _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  double v5;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0.0;
  v3 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    v5 = 0.0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(double *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData)
    return 0.0;
  return v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988838;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988838;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988838;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69887B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69887B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69887B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69887B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988738;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988738;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988738;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988738;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69886B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69886B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69886B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69886B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988638;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988638;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988638;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  v2[40] = *(_BYTE *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988638;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)))return *(_BYTE *)(a1 + 40) != 0;
  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return *(_BYTE *)(a1 + 40) != 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_8;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_8:
  if (PropertyData)
    return *(_BYTE *)(a1 + 40) != 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1751737454EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1751737454EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987CB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987CB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987CB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987CB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987C38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987C38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987C38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987C38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69885B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69885B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69885B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69885B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988538;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988538;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988538;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988538;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6989808;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6989808;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989808;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989808;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)) == 0;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object21populate_control_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989788;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989788;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989788;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989788;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989708;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989708;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989708;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989708;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989688;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989688;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989688;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989688;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989608;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989608;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989608;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989608;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A888;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A888;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A888;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A888;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A808;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A808;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A808;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A808;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

unint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *__p;
  _BYTE *v10;
  char v11;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  v3 = 0;
  v4 = 0;
  if (!(_DWORD)PropertyDataSize)
  {
    v5 = HIDWORD(PropertyDataSize);
    v11 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      if ((unint64_t)(v10 - (_BYTE *)__p) < 8)
      {
        v7 = 0;
        LODWORD(v6) = 0;
        v4 = 0;
        v3 = 0;
        if (!__p)
          return v4 & 0xFFFFFFFF00000000 | v3;
      }
      else
      {
        v6 = *(_QWORD *)__p;
        v7 = *(_QWORD *)__p & 0xFFFFFFFF00000000;
      }
      v10 = __p;
      operator delete(__p);
      v4 = v7;
      v3 = v6;
      return v4 & 0xFFFFFFFF00000000 | v3;
    }
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    v3 = 0;
    v4 = 0;
  }
  return v4 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A788;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A788;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A788;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A788;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A708;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A708;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A708;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A708;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A688;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A688;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A688;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A688;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  void *__p;
  _BYTE *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A608;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A608;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A608;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A608;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  float v5;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0.0;
  v3 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (_BYTE *)__p) < 4)
  {
    v5 = 0.0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(float *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData)
    return 0.0;
  return v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699A190;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5B09C50(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A190;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A190;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699A190;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B09D34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699A190;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t)&v3, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>((_QWORD *)a2, v3, v4, (v4 - v3) >> 4);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  v5 = (void **)&v3;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1B5B09E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A588;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A588;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E698A588;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E698A588;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEEclEv(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  AMCP::ASP::PlugIn *v7;
  uint64_t v8;
  AMCP::ASP::PlugIn *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  AudioObjectPropertyAddress v21;
  CFTypeRef cf;
  AudioObjectPropertyAddress v23;
  int v24;
  void *__p;
  _DWORD *v26;
  AudioObjectPropertyAddress v27;
  CFTypeRef v28[5];

  *(_QWORD *)&v27.mSelector = 0x676C6F6273636169;
  v27.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v24, *(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), &v27);
  v4 = v24;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = __p;
  if (!v4)
  {
    v6 = v26;
    if (__p != v26)
    {
      do
      {
        *(_QWORD *)&v23.mSelector = 0x676C6F627363696ELL;
        v23.mElement = 0;
        v7 = *(AMCP::ASP::PlugIn **)(a1 + 8);
        v8 = *(unsigned int *)(a1 + 24);
        v28[0] = 0;
        if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v7, v8, 0, &v23, 4, v5, 8, v28))
          cf = 0;
        else
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v28[0]);
        *(_QWORD *)&v21.mSelector = 0x676C6F62636C6B6BLL;
        v21.mElement = 0;
        v9 = *(AMCP::ASP::PlugIn **)(a1 + 8);
        v10 = *(unsigned int *)(a1 + 24);
        LODWORD(v28[0]) = 0;
        if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v9, v10, 0, &v21, 4, v5, 4, v28))
          v11 = 0;
        else
          v11 = (int)v28[0];
        v13 = a2[1];
        v12 = a2[2];
        if (v13 >= v12)
        {
          v15 = (uint64_t)(v13 - *a2) >> 4;
          if ((unint64_t)(v15 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v16 = v12 - *a2;
          v17 = v16 >> 3;
          if (v16 >> 3 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          v28[4] = a2 + 2;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v18);
          else
            v19 = 0;
          v20 = (_DWORD *)(v18 + 16 * v15);
          v28[0] = (CFTypeRef)v18;
          v28[1] = v20;
          v28[3] = (CFTypeRef)(v18 + 16 * v19);
          *v20 = *v5;
          v20[1] = v11;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((_QWORD *)v20 + 1, cf);
          v28[2] = v20 + 4;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a2, v28);
          v14 = a2[1];
          std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v28);
        }
        else
        {
          *(_DWORD *)v13 = *v5;
          *(_DWORD *)(v13 + 4) = v11;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((_QWORD *)(v13 + 8), cf);
          v14 = v13 + 16;
          a2[1] = v13 + 16;
        }
        a2[1] = v14;
        if (cf)
          CFRelease(cf);
        ++v5;
      }
      while (v5 != v6);
      v5 = __p;
    }
  }
  if (v5)
  {
    v26 = v5;
    operator delete(v5);
  }
}

void sub_1B5B0A1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (cf)
    CFRelease(cf);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935892841EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935892841EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A508;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A508;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A508;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A508;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A488;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A488;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A488;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A488;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699A028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5B0A7A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699A028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699A028;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B0A884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699A028;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *__p[3];

  v2 = (_QWORD *)(a1 + 8);
  AMCP::Thing::convert_to<std::vector<unsigned int>>(__p, a2);
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B5B0A958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A408;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A408;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A408;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A408;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EEclESO_(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void *__p;
  _BYTE *v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v7 = 0;
  std::vector<std::byte>::vector(&__p, v4, &v7);
  memcpy(__p, *(const void **)a2, v6 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v6 - (_DWORD)__p), __p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKNS2_6vectorIjNS2_9allocatorIjEEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKNS2_6vectorIjNS2_9allocatorIjEEEEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A388;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A388;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A388;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A388;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  void *v6;
  char *v7;
  unint64_t v8;
  void *__p;
  _BYTE *v10;
  char v11;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v11 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
LABEL_2:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v6 = __p;
  v7 = (char *)__p + ((v10 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (v10 - (_BYTE *)__p) >> 2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(a2, v6, (uint64_t)v7, v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A308;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A308;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A308;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A308;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A288;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A288;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A288;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A288;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A208;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A208;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A208;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A208;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  void *__p;
  void *v6;
  char v7;

  v7 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v7);
  v4 = __p;
  *(_DWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v6 - (_DWORD)v4), v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A188;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A188;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A188;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A188;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698A108;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698A108;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E698A108;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E698A108;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  float v2;
  int PropertyData;
  float result;
  float v5;
  AudioObjectPropertyAddress v6;

  v2 = *a2;
  *(_QWORD *)&v6.mSelector = 0x676C6F626C636473;
  v6.mElement = 0;
  v5 = v2;
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, &v6, 0, 0, 4, &v5);
  result = v5;
  if (PropertyData)
    return 0.0;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object28populate_volume_control_coreEjRNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698A088;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698A088;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E698A088;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E698A088;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2;
  int PropertyData;
  float result;
  float v5;
  AudioObjectPropertyAddress v6;

  v2 = *a2;
  *(_QWORD *)&v6.mSelector = 0x676C6F626C637364;
  v6.mElement = 0;
  v5 = v2;
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, &v6, 0, 0, 4, &v5);
  result = v5;
  if (PropertyData)
    return 0.0;
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object28populate_volume_control_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E698A008;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E698A008;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E698A008;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E698A008;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6999988;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B5B0BD18(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999988;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999988;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999988;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B0BDFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999988;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = AMCP::Core::Operation::call_function<CA::ValueRange>((_QWORD *)(a1 + 8));
  a2[2] = 0;
  a2[3] = 0;
  *a2 = v4;
  a2[1] = v5;
  a2[4] = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA10ValueRangeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989F88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989F88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989F88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989F88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

double _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  double v3;
  uint64_t v5;
  void *__p;
  void *v7;
  char v8;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (!(_DWORD)PropertyDataSize)
  {
    v5 = HIDWORD(PropertyDataSize);
    v8 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v8);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      v3 = *(double *)__p;
      v7 = __p;
      operator delete(__p);
      return v3;
    }
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
  }
  return 0.0;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989F08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989F08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989F08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989F08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989E88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989E88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989E88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989E88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989E08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989E08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989E08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989E08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  void *__p;
  _BYTE *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989D88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989D88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989D88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989D88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  float v5;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0.0;
  v3 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (_BYTE *)__p) < 4)
  {
    v5 = 0.0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(float *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData)
    return 0.0;
  return v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989D08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989D08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989D08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989D08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989C88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989C88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989C08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989C08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989C08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989C08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  void *__p;
  _BYTE *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989B88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989B88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989B88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989B88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  float v5;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0.0;
  v3 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (_BYTE *)__p) < 4)
  {
    v5 = 0.0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(float *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData)
    return 0.0;
  return v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989B08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989B08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989B08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989B08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989A88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989A88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989A88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989A88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

unint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *__p;
  _BYTE *v10;
  char v11;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  v3 = 0;
  v4 = 0;
  if (!(_DWORD)PropertyDataSize)
  {
    v5 = HIDWORD(PropertyDataSize);
    v11 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      if ((unint64_t)(v10 - (_BYTE *)__p) < 8)
      {
        v7 = 0;
        LODWORD(v6) = 0;
        v4 = 0;
        v3 = 0;
        if (!__p)
          return v4 & 0xFFFFFFFF00000000 | v3;
      }
      else
      {
        v6 = *(_QWORD *)__p;
        v7 = *(_QWORD *)__p & 0xFFFFFFFF00000000;
      }
      v10 = __p;
      operator delete(__p);
      v4 = v7;
      v3 = v6;
      return v4 & 0xFFFFFFFF00000000 | v3;
    }
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    v3 = 0;
    v4 = 0;
  }
  return v4 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989A08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989A08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989A08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989A08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989988;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989988;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989988;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989988;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989908;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989908;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989908;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989908;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  void *__p;
  _BYTE *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (_BYTE *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKjE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKjE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989888;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989888;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989888;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989888;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989588;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989588;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989588;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989588;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989508;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989508;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989508;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989508;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEEclEv(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *__p;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  LOBYTE(v18) = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v18);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
LABEL_2:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v6 = (char *)__p;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  if ((unint64_t)(v17 - (_BYTE *)__p) > 0x37)
  {
    v7 = v17 - (_BYTE *)__p;
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>((v17 - (_BYTE *)__p) / 0x38uLL);
    v9 = v8;
    v10 = 0;
    v18 = v8;
    v20 = &v8[56 * v11];
    do
    {
      v12 = &v8[v10];
      v13 = *(_OWORD *)&v6[v10];
      v14 = *(_OWORD *)&v6[v10 + 16];
      v15 = *(_OWORD *)&v6[v10 + 32];
      *((_QWORD *)v12 + 6) = *(_QWORD *)&v6[v10 + 48];
      *((_OWORD *)v12 + 1) = v14;
      *((_OWORD *)v12 + 2) = v15;
      *(_OWORD *)v12 = v13;
      v10 += 56;
    }
    while (56 * (v7 / 0x38) != v10);
    v19 = &v8[v10];
    AMCP::make_available_format_list((uint64_t *)&v18, a2);
    if (v9)
      operator delete(v9);
  }
  else
  {
    AMCP::make_available_format_list((uint64_t *)&v18, a2);
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6987038;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6987038;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E6987038;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E6987038;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1 + 8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, const void *a2)
{
  AMCP::Log::Scope_Registry *core;
  _BOOL8 is_an_available_format;
  AMCP::ASP::PlugIn *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  std::runtime_error *exception;
  int v18;
  uint64_t v19;
  std::runtime_error v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  std::runtime_error *v27;
  int v28;
  uint64_t v29;
  std::runtime_error v30;
  unsigned __int128 v31;
  uint64_t v32;
  std::runtime_error v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  std::runtime_error v38;
  uint64_t v39;
  std::runtime_error v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  AMCP::Core::Core *v46;
  std::__shared_weak_count *v47;
  _BYTE buf[18];
  __int16 v49;
  int v50;
  _BYTE v51[24];
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v46, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 32) + 16), *(_DWORD *)(a1 + 28));
  if (!v46)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)&buf[8];
    v12 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      v49 = 1024;
      v50 = 978;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "(stream_core_ptr.get() == nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format, invalid core stream object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v31, "failed to set stream format, invalid core stream object");
    std::runtime_error::runtime_error(&v40, (const std::runtime_error *)&v31);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v41 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(_QWORD *)&v51[8] = "auto AMCP::ASP::make_current_format_property(PlugIn_Ptr, AudioObjectID, Object_ID, Core::System"
                         "_Core_Ptr, Core::Operation_Set &)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    *(_QWORD *)&v51[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    v52 = 978;
    std::vector<void *>::vector(&v35);
    v18 = backtrace((void **)v35, (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 3);
    std::vector<void *>::resize((char **)&v35, v18);
    v38 = (std::runtime_error)v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v19 = *(_QWORD *)v51;
    exception[1].__imp_.__imp_ = *(const char **)v51;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *(std::runtime_error *)&v51[8];
    LODWORD(exception[3].__vftable) = v52;
    exception[2] = v20;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v35, v46);
  is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format((uint64_t)a2, v35, *((uint64_t *)&v35 + 1));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)&buf[8];
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "ASP_Object.cpp";
      v49 = 1024;
      v50 = 982;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format, invalid format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v33, "failed to set stream format, invalid format");
    std::runtime_error::runtime_error(&v40, &v33);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v41 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(_QWORD *)&v51[8] = "auto AMCP::ASP::make_current_format_property(PlugIn_Ptr, AudioObjectID, Object_ID, Core::System"
                         "_Core_Ptr, Core::Operation_Set &)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    *(_QWORD *)&v51[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    v52 = 982;
    std::vector<void *>::vector(&v31);
    v28 = backtrace((void **)v31, (*((_QWORD *)&v31 + 1) - (_QWORD)v31) >> 3);
    std::vector<void *>::resize((char **)&v31, v28);
    v37 = off_1E69A20A0;
    v38 = (std::runtime_error)v31;
    v39 = v32;
    v31 = 0uLL;
    v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    v27[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(v27, (const std::runtime_error *)buf);
    v27[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v29 = *(_QWORD *)v51;
    v27[1].__imp_.__imp_ = *(const char **)v51;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    v30 = *(std::runtime_error *)&v51[8];
    LODWORD(v27[3].__vftable) = v52;
    v27[2] = v30;
    v27->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    v27[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    v27[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v6 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 24);
  strcpy(buf, " tfpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v6, v7, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 40, a2);
  *(_QWORD *)buf = &v35;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v8 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B5B0E8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, std::runtime_error a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  *(_QWORD *)(v26 - 128) = &a17;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 128));
  v28 = *(std::__shared_weak_count **)(v26 - 136);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_current_format_propertyENSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlRKN2CA17StreamDescriptionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986FB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986FB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6986FB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E6986FB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::ASP::PlugIn *v3;
  uint64_t v4;
  int PropertyData;
  double result;
  __int128 v7;
  AudioObjectPropertyAddress v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)&v8.mSelector = 0x676C6F6270667420;
  v8.mElement = 0;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v3, v4, 0, &v8, 0, 0, 40, &v9);
  v12 = v9;
  v13 = v10;
  v14 = v11;
  if (PropertyData)
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    result = *(double *)&v12;
    v7 = v13;
    *(_OWORD *)a2 = v12;
    *(_OWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 32) = v14;
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_current_format_propertyENSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989488;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989488;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989488;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989488;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989408;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989408;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989408;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989408;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989388;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989388;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989388;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989388;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989308;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989308;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989308;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989308;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989288;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989288;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989288;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989288;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)))return *(unsigned int *)(a1 + 40);
  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return *(unsigned int *)(a1 + 40);
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_8;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_8:
  if (PropertyData)
    return *(unsigned int *)(a1 + 40);
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952542835EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952542835EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989208;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989208;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989208;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989208;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989188;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989188;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989188;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989188;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989108;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989108;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989108;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989108;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989088;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989088;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989088;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989088;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

void AMCP::ASP::make_channel_layout_property(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  double v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t Has_Property;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void (*v40)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v37 = 0uLL;
  LODWORD(v14) = vdup_n_s32(0x73726E64u).u32[0];
  HIDWORD(v14) = a1;
  if (a3)
  {
    v15 = (unint64_t *)(a3 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v34 = *a6;
  if (*((_QWORD *)a6 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)a6 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v36, 0, v14);
  v19 = v36;
  v20 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  v42 = 0;
  v21 = (char *)operator new(0x38uLL);
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = a3;
  *(_QWORD *)v21 = &off_1E6986DB8;
  *((_DWORD *)v21 + 2) = a1;
  *((_OWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 4) = a4 | ((unint64_t)a5 << 32);
  *(_OWORD *)(v21 + 40) = v34;
  v42 = v21;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)&v38, (uint64_t)v41);
  v40 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v19, v20, (AMCP *)&v38);
  if (v40)
    v40(0, (uint64_t)&v38, 0, 0);
  v23 = v42;
  if (v42 == v41)
  {
    v24 = 4;
    v23 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_14;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_14:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(v19);
  v35 = v36;
  v37 = v36;
  v33 = *a6;
  if (*((_QWORD *)a6 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)a6 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  v42 = 0;
  v28 = operator new(0x20uLL);
  *v28 = &off_1E6986E38;
  v28[1] = (a5 << 32) | a1;
  *((_OWORD *)v28 + 1) = v33;
  v42 = v28;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v38, (uint64_t)v41);
  v40 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v35, Has_Property, (AMCP *)&v38);
  if (v40)
    v40(0, (uint64_t)&v38, 0, 0);
  v29 = v42;
  if (v42 == v41)
  {
    v30 = 4;
    v29 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_24;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_24:
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a7, (unsigned int *)(v35 + 40), &v37);
  if (*((_QWORD *)&v35 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
}

void sub_1B5B1032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::make_default_device_property(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  double v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  __int128 v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  double (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = 0uLL;
  LODWORD(v10) = vdup_n_s32(0x64666C74u).u32[0];
  HIDWORD(v10) = a1;
  if (a3)
  {
    v11 = (unint64_t *)(a3 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v23, 0, v10);
  v13 = v23;
  v14 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v28 = 0;
  v15 = operator new(0x28uLL);
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  *(_QWORD *)v15 = &off_1E6986EB8;
  v15[2] = a1;
  *((_OWORD *)v15 + 1) = v16;
  v15[8] = a4;
  v28 = v15;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v13, v14, (AMCP *)v25);
  if (v26)
    v17.n128_f64[0] = v26(0, (uint64_t)v25, 0, 0);
  v18 = v28;
  if (v28 == v27)
  {
    v19 = 4;
    v18 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v19 = 5;
  }
  (*(void (**)(__n128))(*v18 + 8 * v19))(v17);
LABEL_11:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v13);
  v24 = v23;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a5, (unsigned int *)(v23 + 40), &v24);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B5B10538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6989008;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6989008;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6989008;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6989008;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988F88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988F88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988F88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988F88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988F08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988F08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988F08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988F08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EEclESN_(uint64_t a1, _QWORD *a2)
{
  void *__p;
  void *v5;
  char v6;

  v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  *(_QWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v5 - (_DWORD)__p), __p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988E88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988E88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988E88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988E88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988E08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988E08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988E08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988E08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988D88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988D88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988D88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988D88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986F38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986F38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6986F38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E6986F38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  AMCP::ASP::PlugIn **v1;
  uint64_t v2;
  uint64_t result;
  AMCP::ASP::PlugIn *v4;
  int PropertyData;
  AudioObjectPropertyAddress v6;
  int v7;

  v1 = (AMCP::ASP::PlugIn **)(a1 + 8);
  v2 = *(unsigned int *)(a1 + 24);
  result = AMCP::ASP::get_number_of_non_reference_streams_for_scope(0x6F757470u, (AMCP::ASP::PlugIn **)(a1 + 8), v2);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v6.mSelector = 0x676C6F6273666C74;
    v6.mElement = 0;
    if (AMCP::ASP::PlugIn::ObjectHasProperty(*v1, v2, 0, &v6))
    {
      v4 = *v1;
      v7 = 0;
      PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v4, v2, 0, &v6, 0, 0, 4, &v7);
      return (PropertyData | v7) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP35make_default_system_device_propertyENSt3__110shared_ptrINS0_6PlugInEEEjRNS_4Core13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

uint64_t AMCP::ASP::get_number_of_non_reference_streams_for_scope(AudioObjectPropertyScope a1, AMCP::ASP::PlugIn **a2, uint64_t a3)
{
  AMCP::ASP::PlugIn *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  AMCP::ASP::PlugIn *v9;
  unsigned int v10;
  BOOL v11;
  AudioObjectPropertyAddress v13;
  int v14;
  void *__p;
  unsigned int *v16;
  int v17;

  v4 = *a2;
  v13.mSelector = 1937009955;
  v13.mScope = a1;
  v13.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v14, v4, a3, &v13);
  v5 = 0;
  v6 = __p;
  if (!v14)
  {
    v7 = v16;
    if (__p == v16)
    {
      v5 = 0;
      if (!__p)
        return v5;
      goto LABEL_12;
    }
    LODWORD(v5) = 0;
    v8 = (unsigned int *)__p;
    do
    {
      v9 = *a2;
      v10 = *v8++;
      *(_QWORD *)&v13.mSelector = 0x676C6F6274617073;
      v13.mElement = 0;
      v17 = 0;
      if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v9, v10, 0, &v13, 0, 0, 4, &v17))
        v11 = 1;
      else
        v11 = v17 == 0;
      if (v11)
        v5 = (v5 + 1);
      else
        v5 = v5;
    }
    while (v8 != v7);
  }
  if (v6)
LABEL_12:
    operator delete(v6);
  return v5;
}

_QWORD *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986EB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986EB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = operator new(0x28uLL);
  *(_QWORD *)result = &off_1E6986EB8;
  result[2] = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 2) = *(_QWORD *)(a1 + 16);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[8] = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E6986EB8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  AudioObjectPropertyScope v1;
  AMCP::ASP::PlugIn **v2;
  uint64_t v3;
  uint64_t result;
  AMCP::ASP::PlugIn *v5;
  int PropertyData;
  AudioObjectPropertyAddress v7;
  int v8;

  v1 = *(_DWORD *)(a1 + 8);
  v2 = (AMCP::ASP::PlugIn **)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 32);
  result = AMCP::ASP::get_number_of_non_reference_streams_for_scope(v1, (AMCP::ASP::PlugIn **)(a1 + 16), v3);
  if ((_DWORD)result)
  {
    v7.mSelector = 1684434036;
    v7.mScope = v1;
    v7.mElement = 0;
    if (AMCP::ASP::PlugIn::ObjectHasProperty(*v2, v3, 0, &v7))
    {
      v5 = *v2;
      v8 = 0;
      PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v3, 0, &v7, 0, 0, 4, &v8);
      return (PropertyData | v8) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_default_device_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjRNS_4Core13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986E38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986E38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = operator new(0x20uLL);
  v3 = a1[1];
  v4 = a1[2];
  *result = &off_1E6986E38;
  result[1] = v3;
  v5 = a1[3];
  result[2] = v4;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a2 = &off_1E6986E38;
  a2[1] = result[1];
  v2 = result[3];
  a2[2] = result[2];
  a2[3] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1)
{
  _BOOL8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v7[3];
  AMCP::Core::Core *v8;
  std::__shared_weak_count *v9;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), *(_DWORD *)(a1 + 12));
  if (v8)
  {
    AMCP::ASP::make_stream_info_list((uint64_t)v7, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 16) + 16), &v8, *(_DWORD *)(a1 + 8));
    v2 = v7[0] != v7[1];
    if (v7[0])
      operator delete(v7[0]);
  }
  else
  {
    v2 = 0;
  }
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1B5B11888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_channel_layout_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986DB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6986DB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = &off_1E6986DB8;
  std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6986DB8;
  return std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 40);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::vector<char>::value_type __x[8];
  _DWORD *v14;
  AMCP::Core::Core *v15;
  std::__shared_weak_count *v16;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v15, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 40) + 16), *(_DWORD *)(a1 + 36));
  if (!v15)
  {
    v4 = 0;
    goto LABEL_10;
  }
  AMCP::ASP::make_stream_info_list((uint64_t)__x, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 40) + 16), &v15, *(_DWORD *)(a1 + 8));
  if (*(_DWORD **)__x == v14)
  {
    v4 = 0;
    if (!*(_QWORD *)__x)
      goto LABEL_10;
  }
  else
  {
    v4 = 0;
    v5 = *(_DWORD **)__x;
    do
    {
      v4 += v5[11];
      v5 += 14;
    }
    while (v5 != v14);
    if (!*(_QWORD *)__x)
      goto LABEL_10;
  }
  operator delete(*(void **)__x);
LABEL_10:
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = v4;
  __x[0] = 0;
  std::vector<char>::vector(a2, 20 * v6 + 12, __x);
  begin = a2->__begin_;
  *(_QWORD *)begin = 0;
  *((_DWORD *)begin + 2) = v4;
  end = a2->__end_;
  if (end - begin != 12)
  {
    v9 = begin + 12;
    do
    {
      *(_QWORD *)v9 = 0xFFFFFFFFLL;
      *((_QWORD *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      v9 += 20;
    }
    while (v9 != end);
  }
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B5B11B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_channel_layout_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988D08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988D08;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988D08;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988D08;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988C88;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988C88;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988C88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69884B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69884B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69884B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E69884B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, char **a2@<X8>)
{
  AMCP::ASP::PlugIn *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int core_id_for_driver_id;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  AudioObjectPropertyAddress v21;
  int v22;
  void *__p;
  unsigned int *v24;

  v4 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)&v21.mSelector = 0x676C6F6262636C23;
  v21.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v22, v4, v5, &v21);
  v6 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v7 = (unsigned int *)__p;
  if (!v6)
  {
    v8 = v24;
    if (__p != v24)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        core_id_for_driver_id = AMCP::ASP::Driver::get_core_id_for_driver_id(*(AMCP::ASP::Driver **)(*(_QWORD *)(a1 + 8) + 8), *v7);
        if (core_id_for_driver_id)
        {
          v13 = core_id_for_driver_id;
          if ((unint64_t)v11 >= v10)
          {
            v15 = (v11 - v9) >> 2;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v10 - (_QWORD)v9) >> 1 > v16)
              v16 = (uint64_t)(v10 - (_QWORD)v9) >> 1;
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
            else
              v18 = 0;
            v19 = (char *)(v17 + 4 * v15);
            *(_DWORD *)v19 = v13;
            v14 = v19 + 4;
            while (v11 != v9)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            v10 = v17 + 4 * v18;
            *a2 = v19;
            a2[1] = v14;
            a2[2] = (char *)v10;
            if (v9)
              operator delete(v9);
            v9 = v19;
          }
          else
          {
            *(_DWORD *)v11 = core_id_for_driver_id;
            v14 = v11 + 4;
          }
          a2[1] = v14;
          v11 = v14;
        }
        ++v7;
      }
      while (v7 != v8);
      v7 = (unsigned int *)__p;
    }
  }
  if (v7)
  {
    v24 = v7;
    operator delete(v7);
  }
}

void sub_1B5B12318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650682915EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650682915EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988438;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988438;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6988438;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E6988438;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, char **a2@<X8>)
{
  AMCP::ASP::PlugIn *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int core_id_for_driver_id;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  AudioObjectPropertyAddress v21;
  int v22;
  void *__p;
  unsigned int *v24;

  v4 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  *(_QWORD *)&v21.mSelector = 0x676C6F6262647623;
  v21.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v22, v4, v5, &v21);
  v6 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v7 = (unsigned int *)__p;
  if (!v6)
  {
    v8 = v24;
    if (__p != v24)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        core_id_for_driver_id = AMCP::ASP::Driver::get_core_id_for_driver_id(*(AMCP::ASP::Driver **)(*(_QWORD *)(a1 + 8) + 8), *v7);
        if (core_id_for_driver_id)
        {
          v13 = core_id_for_driver_id;
          if ((unint64_t)v11 >= v10)
          {
            v15 = (v11 - v9) >> 2;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v10 - (_QWORD)v9) >> 1 > v16)
              v16 = (uint64_t)(v10 - (_QWORD)v9) >> 1;
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
            else
              v18 = 0;
            v19 = (char *)(v17 + 4 * v15);
            *(_DWORD *)v19 = v13;
            v14 = v19 + 4;
            while (v11 != v9)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            v10 = v17 + 4 * v18;
            *a2 = v19;
            a2[1] = v14;
            a2[2] = (char *)v10;
            if (v9)
              operator delete(v9);
            v9 = v19;
          }
          else
          {
            *(_DWORD *)v11 = core_id_for_driver_id;
            v14 = v11 + 4;
          }
          a2[1] = v14;
          v11 = v14;
        }
        ++v7;
      }
      while (v7 != v8);
      v7 = (unsigned int *)__p;
    }
  }
  if (v7)
  {
    v24 = v7;
    operator delete(v7);
  }
}

void sub_1B5B1262C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650751011EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650751011EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69883B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69883B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69883B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69883B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988338;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988338;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988338;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988338;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(unsigned int *)__p;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69882B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69882B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69882B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69882B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988238;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988238;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988238;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988238;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable;
  const AudioObjectPropertyAddress *v3;
  char is_settable;
  BOOL v5;
  unsigned int v6;

  IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if ((_DWORD)IsPropertySettable)
    v5 = 1;
  else
    v5 = HIDWORD(IsPropertySettable) == 0;
  v6 = !v5;
  if ((is_settable & 1) != 0)
    return 1;
  else
    return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69881B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69881B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69881B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69881B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  void *__p;
  void *v6;
  char v7;

  v7 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v7);
  v4 = __p;
  *(_DWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, ((_DWORD)v6 - (_DWORD)v4), v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988138;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988138;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988138;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E69880B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E69880B8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E69880B8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E69880B8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6988038;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6988038;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6988038;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6988038;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987FB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987FB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987FB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987FB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987F38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987F38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987F38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987F38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987EB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987EB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987EB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987EB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987E38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987E38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987E38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987E38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987DB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987DB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987DB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987DB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987D38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987D38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987D38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987D38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize;
  uint64_t v3;
  uint64_t PropertyData;
  _BOOL8 v5;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  char v10;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    return 0;
  v3 = HIDWORD(PropertyDataSize);
  v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (_BYTE *)__p) < 4)
  {
    v5 = 0;
    v6 = 0;
    if (!__p)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_DWORD *)__p != 0;
  }
  v9 = __p;
  operator delete(__p);
  v6 = v5;
LABEL_7:
  if (PropertyData)
    return 0;
  return v6;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987BB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987BB8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987BB8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987BB8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  const AudioObjectPropertyAddress *v3;

  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  return (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2) & 1) != 0
      || AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, v3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

_QWORD *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(_QWORD *a1)
{
  *a1 = &off_1E6987B38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(_QWORD *a1)
{
  *a1 = &off_1E6987B38;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E6987B38;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E6987B38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize;
  uint64_t v5;
  _BYTE *v6;
  void *__p;
  _BYTE *v8;
  char v9;

  PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if ((_DWORD)PropertyDataSize)
    goto LABEL_2;
  v5 = HIDWORD(PropertyDataSize);
  v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(_QWORD *)a2 = 0;
    return;
  }
  v6 = __p;
  if ((unint64_t)(v8 - (_BYTE *)__p) < 8)
  {
    *(_QWORD *)a2 = 0;
    if (!v6)
      return;
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  v6 = __p;
  if (__p)
    goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t AMCP::ASP::get_max_number_channels_for_scope(int a1, AMCP::ASP::PlugIn **a2, uint64_t a3)
{
  AMCP::ASP::PlugIn *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v8;
  unsigned int *i;
  uint64_t v10;
  AMCP::ASP::PlugIn *v11;
  unint64_t PropertyDataSize;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  void *__p;
  unsigned int *v18;
  AudioObjectPropertyAddress v19;
  _DWORD v20[2];
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;

  v4 = *a2;
  v20[0] = 1937009955;
  v20[1] = a1;
  LODWORD(v21) = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v16, v4, a3, (const AudioObjectPropertyAddress *)v20);
  v5 = 0;
  v6 = __p;
  if (!v16)
  {
    v8 = v18;
    if (__p == v18)
    {
      v5 = 0;
      goto LABEL_2;
    }
    LODWORD(v5) = 0;
    for (i = (unsigned int *)__p; i != v8; ++i)
    {
      v10 = *i;
      v11 = *a2;
      *(_QWORD *)&v19.mSelector = 0x676C6F6270667461;
      v19.mElement = 0;
      PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(v11, v10, 0, &v19, 0, 0);
      if ((_DWORD)PropertyDataSize || HIDWORD(PropertyDataSize) <= 0x37)
      {
        v13 = 0;
        v20[0] = PropertyDataSize;
        v22 = 0;
        v23 = 0;
        v21 = 0;
        if ((_DWORD)PropertyDataSize)
          goto LABEL_23;
      }
      else
      {
        std::vector<AudioStreamRangedDescription>::vector(&v24, HIDWORD(PropertyDataSize) / 0x38uLL);
        v20[0] = AMCP::ASP::PlugIn::ObjectGetPropertyData(v11, v10, 0, &v19, 0, 0, ((_DWORD)v25 - (_DWORD)v24) & 0xFFFFFFF8, v24);
        v22 = 0;
        v23 = 0;
        v21 = 0;
        std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(&v21, v24, (uint64_t)v25, 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)v24) >> 3));
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        v13 = v21;
        if (v20[0])
        {
LABEL_23:
          v14 = 0;
          if (!v13)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      if (v13 == v22)
        goto LABEL_23;
      v14 = 0;
      v15 = v13;
      do
      {
        if (v14 <= v15[7])
          v14 = v15[7];
        v15 += 14;
      }
      while (v15 != v22);
      if (!v13)
        goto LABEL_21;
LABEL_20:
      operator delete(v13);
LABEL_21:
      v5 = v14 + v5;
    }
  }
LABEL_2:
  if (v6)
    operator delete(v6);
  return v5;
}

void AMCP::ASP::PlugIn_Object::update_core(AMCP::ASP::PlugIn_Object *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *i;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  __int128 v10;
  int v11;
  unsigned int *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v12, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 15));
  v2 = v12;
  if (v12)
  {
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    v11 = 1065353216;
    v3 = AMCP::ASP::calculate_max_element((AMCP::ASP::PlugIn **)this + 3, *((unsigned int *)this + 11), *((_DWORD *)this + 17));
    if ((AMCP::is_base_of((AMCP *)0x61706C67, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61626F78, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61646576, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61737472, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x736C6472, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x6C65766C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x746F676C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x736C6374, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x7370616E, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x6163746C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17)) & 1) == 0
      && AMCP::is_base_of((AMCP *)0x616F626A, *((_DWORD *)this + 17)))
    {
      AMCP::ASP::PlugIn_Object::update_object_core((uint64_t)this, v3, (uint64_t)__p);
    }
    v14 = (uint64_t)(v2 + 12);
    LOBYTE(v15) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    for (i = (_QWORD *)v10; i; i = (_QWORD *)*i)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(i[4] + 40), i + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v14);
    v14 = 0x676C6F626F776E72;
    v15 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v14, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v10);
    v5 = __p[0];
    __p[0] = 0;
    if (v5)
      operator delete(v5);
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B5B14B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CADeprecated::CAPThread::~CAPThread(CADeprecated::CAPThread *this)
{
  JUMPOUT(0x1B5E50688);
}

void CADeprecated::CAPThread::Start(CADeprecated::CAPThread *this)
{
  unint64_t *v2;
  unint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  _DWORD *exception;
  unint64_t v12;
  sched_param v13;
  uint8_t v14[4];
  const char *v15;
  __int16 v16;
  int v17;
  pthread_attr_t buf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)((char *)this + 8);
  v3 = atomic_load((unint64_t *)this + 1);
  if (v3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"CAPThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 248;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::Start: can't start because the thread is already running", (uint8_t *)&buf, 0x12u);
  }
  if (!atomic_load(v2))
  {
    v5 = pthread_attr_init(&buf);
    if (v5)
    {
      v8 = v5;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)v14 = 136315394;
      v15 = "CAPThread.cpp";
      v16 = 1024;
      v17 = 255;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  CAPThread::Start: Thread attributes could not be created.";
    }
    else
    {
      v6 = pthread_attr_setdetachstate(&buf, 2);
      if (v6)
      {
        v8 = v6;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_20;
        *(_DWORD *)v14 = 136315394;
        v15 = "CAPThread.cpp";
        v16 = 1024;
        v17 = 258;
        v9 = MEMORY[0x1E0C81028];
        v10 = "%25s:%-5d  CAPThread::Start: A thread could not be created in the detached state.";
      }
      else
      {
        pthread_attr_getschedparam(&buf, &v13);
        v13.sched_priority = *((_DWORD *)this + 26);
        pthread_attr_setschedparam(&buf, &v13);
        if (*((_BYTE *)this + 122))
          pthread_attr_setschedpolicy(&buf, 4);
        v12 = 0;
        v7 = pthread_create((pthread_t *)&v12, &buf, (void *(__cdecl *)(void *))CADeprecated::CAPThread::Entry, this);
        if (!v7 && v12)
        {
          atomic_store(v12, (unint64_t *)this + 1);
          pthread_attr_destroy(&buf);
          return;
        }
        v8 = v7;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_20:
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = v8;
        }
        *(_DWORD *)v14 = 136315394;
        v15 = "CAPThread.cpp";
        v16 = 1024;
        v17 = 272;
        v9 = MEMORY[0x1E0C81028];
        v10 = "%25s:%-5d  CAPThread::Start: Could not create a thread.";
      }
    }
    _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, v10, v14, 0x12u);
    goto LABEL_20;
  }
}

uint64_t CADeprecated::CAPThread::Entry(CADeprecated::CAPThread *this, CADeprecated::CAPThread *a2)
{
  int v4;
  _opaque_pthread_t *v5;
  thread_act_t v6;
  kern_return_t v7;
  kern_return_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  _BYTE v12[5];
  integer_t policy_info[2];
  int v14;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  kern_return_t v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 1);
  if (*((_BYTE *)this + 40))
    pthread_setname_np((const char *)this + 40);
  if (*((_BYTE *)this + 121))
  {
    *((_BYTE *)this + 121) = 1;
    if (atomic_load((unint64_t *)this + 1))
    {
      *(_QWORD *)policy_info = *(_QWORD *)((char *)this + 108);
      v4 = *((unsigned __int8 *)this + 120);
      v14 = *((_DWORD *)this + 29);
      v15 = v4;
      v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 1);
      v6 = pthread_mach_thread_np(v5);
      v7 = thread_policy_set(v6, 2u, policy_info, 4u);
      v8 = v7;
      if (v7)
      {
        v12[0] = HIBYTE(v7);
        v12[1] = BYTE2(v7);
        v12[2] = BYTE1(v7);
        v12[3] = v7;
        v12[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v17 = "CAPThread.cpp";
          v18 = 1024;
          v19 = 219;
          v20 = 1024;
          v21 = v8;
          v22 = 2080;
          v23 = v12;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)", buf, 0x22u);
        }
      }
    }
  }
  v9 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 3);
  if (v9)
    v10 = v9(*((_QWORD *)this + 4));
  else
    v10 = 0;
  atomic_store(0, (unint64_t *)this + 1);
  if (*((_BYTE *)this + 123))
    (*(void (**)(CADeprecated::CAPThread *))(*(_QWORD *)this + 8))(this);
  return v10;
}

void AMCP::IOAudio2::Stream::~Stream(AMCP::IOAudio2::Stream *this)
{
  AMCP::IOAudio2::Stream::~Stream(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  int v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E698A940;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v30, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v30 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v33;
      v14 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v15 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        v19 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v18;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Stream.cpp";
        v34 = 1024;
        v35 = 120;
        v36 = 1024;
        v37 = v19;
        v11 = v14;
        v12 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v20 = *(std::__shared_weak_count **)v33;
      v21 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v22 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        v29 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Stream.cpp";
        v34 = 1024;
        v35 = 120;
        v36 = 1024;
        v37 = v29;
        _os_log_debug_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down Stream with object id %u", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v33;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v6 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        v10 = *((_DWORD *)this + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "IOAudio2_Stream.cpp";
        v34 = 1024;
        v35 = 120;
        v36 = 1024;
        v37 = v10;
        v11 = v5;
        v12 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v11, v12, "%6u %32s:%-5d Tore down Stream with object id %u", buf, 0x1Eu);
      }
      break;
  }
  v24 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);
}

void sub_1B5B15334(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  CFNumberRef v7;
  const __CFNumber *v8;
  int v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  std::runtime_error *v13;
  const __CFNumber *valuePtr;
  char v15;

  *(_QWORD *)a1 = &off_1E6998E60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = 0;
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(&valuePtr, *a4, a3);
  if (v15)
  {
    v8 = valuePtr;
    if (!valuePtr)
    {
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
      __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CFRetain(valuePtr);
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  }
  else
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
    v8 = v7;
    v7 = 0;
  }
  v9 = applesauce::CF::convert_to<unsigned int,0>(v8);
  CFRelease(v8);
  if (v7)
    CFRelease(v7);
  *(_DWORD *)(a1 + 36) = v9;
  *(_QWORD *)(a1 + 40) = *a4;
  *a4 = 0;
  return a1;
}

void sub_1B5B154E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v13;

  __cxa_free_exception(v11);
  applesauce::CF::NumberRef::~NumberRef(&a10);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a9);
  v13 = *(std::__shared_weak_count **)(v10 + 16);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  _Unwind_Resume(a1);
}

unint64_t AMCP::IOAudio2::get_stream_starting_channel(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  unint64_t v2;
  std::runtime_error *exception;
  const __CFNumber *v5;
  char v6;

  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, CFSTR("starting channel"));
  if (!v6)
  {
    v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v2 = applesauce::CF::convert_to<unsigned int,0>(v5);
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1B5B155FC(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::IOAudio2::Stream::create_from_dictionary_list(char **a1, uint64_t a2, int a3, CFArrayRef *a4)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v8;
  CFArrayRef v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  CFTypeRef v13;
  const __CFDictionary *v14;
  std::__shared_weak_count *v15;
  const applesauce::CF::DictionaryRef *v16;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  CFIndex v41;
  __int128 v44;
  CFTypeRef cf;
  CFTypeRef v46;
  int64x2_t v47;
  char *v48;
  _QWORD *v49;
  CFTypeRef v50;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a4;
  if (*a4)
  {
    Count = CFArrayGetCount(*a4);
    v8 = Count;
    v9 = *a4;
    if (*a4)
    {
      v41 = CFArrayGetCount(*a4);
      if (!v8)
        return;
      goto LABEL_6;
    }
    v41 = 0;
    if (Count)
    {
LABEL_6:
      v10 = 0;
      while (1)
      {
        if (v4 == v9 && v10 == v41)
          return;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v4, v10);
        v11 = (std::__shared_weak_count *)operator new(0x50uLL);
        v11->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        v11->__shared_weak_owners_ = 0;
        v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698ACA8;
        v13 = cf;
        if (cf)
        {
          CFRetain(cf);
          v50 = v13;
          CFRetain(v13);
          v14 = (const __CFDictionary *)v13;
        }
        else
        {
          v14 = 0;
          v50 = 0;
        }
        v15 = v11 + 1;
        v46 = v13;
        AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object((uint64_t)&v11[1], a2, CFSTR("stream ID"), (CFDictionaryRef *)&v46);
        if (v46)
          CFRelease(v46);
        v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E698A940;
        LODWORD(v11[3].__vftable) = a3;
        HIDWORD(v11[3].__vftable) = AMCP::IOAudio2::get_stream_starting_channel(v14, v16);
        if (v13)
          CFRelease(v13);
        *(_QWORD *)&v44 = v11 + 1;
        *((_QWORD *)&v44 + 1) = v11;
        shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
        if (!shared_weak_owners)
          break;
        if (shared_weak_owners->__shared_owners_ == -1)
        {
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          v11[1].__shared_owners_ = (uint64_t)v15;
          v11[1].__shared_weak_owners_ = (uint64_t)v11;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
          goto LABEL_26;
        }
LABEL_29:
        v26 = a1[1];
        v25 = (unint64_t)a1[2];
        if ((unint64_t)v26 >= v25)
        {
          v28 = (v26 - *a1) >> 4;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v29 = v25 - (_QWORD)*a1;
          v30 = v29 >> 3;
          if (v29 >> 3 <= (unint64_t)(v28 + 1))
            v30 = v28 + 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          v49 = a1 + 2;
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v31);
          v34 = &v32[16 * v28];
          *(_OWORD *)v34 = v44;
          v36 = *a1;
          v35 = a1[1];
          if (v35 == *a1)
          {
            v39 = vdupq_n_s64((unint64_t)v35);
            v37 = &v32[16 * v28];
          }
          else
          {
            v37 = &v32[16 * v28];
            do
            {
              v38 = *((_OWORD *)v35 - 1);
              v35 -= 16;
              *((_OWORD *)v37 - 1) = v38;
              v37 -= 16;
              *(_QWORD *)v35 = 0;
              *((_QWORD *)v35 + 1) = 0;
            }
            while (v35 != v36);
            v39 = *(int64x2_t *)a1;
          }
          v27 = v34 + 16;
          *a1 = v37;
          a1[1] = v34 + 16;
          v47 = v39;
          v40 = a1[2];
          a1[2] = &v32[16 * v33];
          v48 = v40;
          v46 = (CFTypeRef)v39.i64[0];
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *(_OWORD *)v26 = v44;
          v27 = v26 + 16;
        }
        a1[1] = v27;
        if (cf)
          CFRelease(cf);
        if (++v10 == v8)
          return;
      }
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v11[1].__shared_owners_ = (uint64_t)v15;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
      do
LABEL_26:
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_29;
    }
  }
}

void sub_1B5B15998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698ACA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698ACA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id(AMCP::IOAudio2::Stream *this, CFArrayRef *a2, int a3)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v8;
  const __CFArray *v9;
  CFIndex v10;
  unint64_t v11;
  const __CFNumber *v12;
  int v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  CFTypeRef cf;
  const __CFNumber *valuePtr;

  v4 = *a2;
  if (!*a2)
    goto LABEL_18;
  Count = CFArrayGetCount(*a2);
  v8 = Count;
  v9 = *a2;
  if (v9)
  {
    v10 = CFArrayGetCount(v9);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v10 = 0;
    if (!Count)
      goto LABEL_18;
  }
  v11 = 0;
  while (v4 != v9 || v10 != v11)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(this, v4, v11);
    if (!*(_QWORD *)this)
      goto LABEL_21;
    LODWORD(valuePtr) = 0;
    cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *(const __CFDictionary **)this, CFSTR("stream ID"), &cf);
    v12 = valuePtr;
    if (!valuePtr)
    {
LABEL_21:
      v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
      __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v13 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
    CFRelease(v12);
    if (cf)
      CFRelease(cf);
    if (v13 == a3)
      return;
    if (*(_QWORD *)this)
      CFRelease(*(CFTypeRef *)this);
    if (v8 == ++v11)
      break;
  }
LABEL_18:
  *(_QWORD *)this = 0;
}

void sub_1B5B15C1C(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOAudio2::Stream::get_mapping_options(AMCP::IOAudio2::Stream *this)
{
  const __CFNumber *v2;
  unint64_t v3;
  std::runtime_error *exception;
  std::runtime_error *v6;
  CFTypeRef cf;
  const __CFNumber *valuePtr;

  if (!*((_QWORD *)this + 5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_10;
  }
  LODWORD(valuePtr) = 1;
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v6, "Could not construct");
    __cxa_throw(v6, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *((const __CFDictionary **)this + 5), CFSTR("buffer mapping options"), &cf);
  v2 = valuePtr;
  if (!valuePtr)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
  return v3;
}

void sub_1B5B15D68(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio2::get_stream_format(AMCP::IOAudio2 *this, const applesauce::CF::DictionaryRef *a2)
{
  AMCP::Log::Scope_Registry *v3;
  const __CFNumber *v4;
  unint64_t v5;
  const __CFNumber *v6;
  int v7;
  const __CFNumber *v8;
  int v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  std::runtime_error *exception;
  std::runtime_error *v21;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  std::runtime_error *v27;
  std::runtime_error *v28;
  std::runtime_error *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::runtime_error v35;
  std::runtime_error cf;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  const __CFDictionary *v43;
  char v44;
  NSObject **valuePtr;
  __int16 v46;
  char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BYTE v51[14];
  const char *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v43, a2, CFSTR("current format"));
  if (!v44)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    v16 = *valuePtr;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = v18;
      v46 = 2080;
      v47 = "IOAudio2_Stream.cpp";
      v48 = 1024;
      v49 = 107;
      v50 = 2080;
      *(_QWORD *)v51 = "!raw_current_format_opt";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", (uint8_t *)&valuePtr, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    v19 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v35, "failed to find the current format for a stream");
    std::runtime_error::runtime_error(&cf, &v35);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v37 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)&cf);
    *(_QWORD *)&v51[6] = "CA::StreamDescription AMCP::IOAudio2::get_stream_format(const CF::Dictionary &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    v53 = 107;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
    v32 = off_1E69A20A0;
    v33 = v30;
    v34 = v31;
    v30 = 0uLL;
    v31 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&valuePtr, (uint64_t)&v32);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v19, (uint64_t)&valuePtr);
  }
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!v43)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
    goto LABEL_73;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("sample rate"), &cf);
  v4 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  v5 = applesauce::CF::convert_to<unsigned long long,0>((const __CFNumber *)valuePtr);
  CFRelease(v4);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  *(double *)this = (double)v5 * 2.32830644e-10 + (double)HIDWORD(v5);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("format ID"), &cf);
  v6 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  v7 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  *((_DWORD *)this + 2) = v7;
  CFRelease(v6);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("format flags"), &cf);
  v8 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  v9 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  *((_DWORD *)this + 3) = v9;
  CFRelease(v8);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("bytes per packet"), &cf);
  v10 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  *((_DWORD *)this + 4) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v10);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("frames per packet"), &cf);
  v11 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  *((_DWORD *)this + 5) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v11);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("bytes per frame"), &cf);
  v12 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  *((_DWORD *)this + 6) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v12);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("channels per frame"), &cf);
  v13 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
    goto LABEL_72;
  *((_DWORD *)this + 7) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v13);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (!v43)
    goto LABEL_72;
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v43, CFSTR("bits per channel"), &cf);
  v14 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
  {
LABEL_72:
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
LABEL_73:
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *((_DWORD *)this + 8) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v14);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  if (v7 == 1819304813)
    *((_DWORD *)this + 3) = v9 & 0xFFFFFFBF;
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v43);
}

void sub_1B5B166C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Stream::build_core(AMCP::IOAudio2::Stream *this)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  AMCP::Core::Core *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  CFTypeRef cf;
  void *__p[2];
  __int128 v38;
  int v39;
  __int128 v40;

  v2 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(**((_QWORD **)this + 3) + 32) + 16));
  *((_DWORD *)this + 8) = v2;
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  v39 = 1065353216;
  LODWORD(v34) = v2;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  LODWORD(v34) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  LODWORD(v34) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  LODWORD(v34) = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.iokit.IOAudio2");
  v34 = 0x676C6F626F706C67;
  LODWORD(v35) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v40, (uint64_t)&v34, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (cf)
    CFRelease(cf);
  v18 = *((_DWORD *)this + 8);
  *(_QWORD *)&v40 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 3) + 32) + 16);
  DWORD2(v40) = v18;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v34, 0, &v40, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v34 + 40), &v34);
  v19 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  LODWORD(v34) = *((_DWORD *)this + 12);
  AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v34) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)&v40, 0, (int *)&v34, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v40 + 40), &v40);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v40, **(_DWORD **)(*((_QWORD *)this + 3) + 360));
  AMCP::IOAudio2::update_stream_core((uint64_t)__p, (const applesauce::CF::DictionaryRef *)&v40, (CFDictionaryRef *)this + 5, *((_DWORD *)this + 9));
  IOConnectRelease(v40);
  AMCP::Core::Broker::make_core(&v32, *(std::__shared_mutex_base **)(*(_QWORD *)(**((_QWORD **)this + 3) + 32) + 16), (uint64_t)__p, *((unsigned int *)this + 8));
  v28 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v38);
  v31 = __p[0];
  __p[0] = 0;
  if (v31)
    operator delete(v31);
}

void sub_1B5B16D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  IOConnectRelease(*(_DWORD *)(v7 - 48));
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::update_stream_core(uint64_t a1, const applesauce::CF::DictionaryRef *a2, CFDictionaryRef *a3, int a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const __CFDictionary *v19;
  AMCP::Log::Scope_Registry *v20;
  const __CFArray *v21;
  double *v22;
  double *v23;
  CFIndex i;
  const void *v25;
  unint64_t v26;
  const void *v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  const void *v33;
  int v34;
  const void *v35;
  int v36;
  const void *v37;
  int v38;
  const void *v39;
  int v40;
  const void *v41;
  int v42;
  const void *v43;
  int v44;
  const void *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  const __CFDictionary **p_valuePtr;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  io_connect_t v68;
  uint64_t v69;
  int v70;
  const char *imp;
  const __CFDictionary **v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  const __CFDictionary **v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  NSObject *v82;
  _opaque_pthread_t *v83;
  mach_port_t v84;
  void *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::runtime_error *v95;
  std::runtime_error *exception;
  std::runtime_error *v97;
  std::runtime_error *v98;
  std::runtime_error *v99;
  void *v100;
  const std::error_category *v101;
  void *v102;
  const std::error_category *v103;
  void *v104;
  const std::error_category *v105;
  const applesauce::CF::DictionaryRef **v106;
  const applesauce::CF::DictionaryRef *v107;
  int v108;
  uint64_t v109;
  CFIndex Count;
  const __CFArray *v111;
  unint64_t v112;
  unint64_t v113;
  std::runtime_error connect;
  const __CFDictionary **v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  uint64_t v120;
  void *__p;
  void *v122;
  unint64_t v123;
  CFTypeRef cf[2];
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  CFArrayRef theArray;
  io_connect_t v130[4];
  const __CFDictionary **v131;
  uint64_t v132;
  io_connect_t *v133;
  uint8_t buf[40];
  const char *v135;
  int v136;
  const __CFDictionary *valuePtr;
  __int128 v138;
  const __CFDictionary **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  LODWORD(cf[0]) = AMCP::IOAudio2::get_stream_starting_channel(*a3, a2);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LODWORD(cf[0]) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
  {
    v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, *a3, CFSTR("terminal type"), cf);
  v14 = *(const void **)buf;
  if (!*(_QWORD *)buf)
  {
    v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v98, "Could not construct");
    __cxa_throw(v98, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v15 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
  CFRelease(v14);
  if (cf[0])
    CFRelease(cf[0]);
  LODWORD(cf[0]) = v15;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *a3;
  if (!*a3)
  {
    v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v99);
    __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v19, CFSTR("available formats"), buf);
  v20 = *(AMCP::Log::Scope_Registry **)buf;
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  v21 = theArray;
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v82 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      v83 = pthread_self();
      v84 = pthread_mach_thread_np(v83);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v84;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOAudio2_Stream.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 200;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "(raw_available_format_list.is_valid()) == false";
      _os_log_error_impl(&dword_1B57BA000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&__p);
    v85 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&connect, "failed to find the available format list for a stream");
    std::runtime_error::runtime_error((std::runtime_error *)cf, &connect);
    *((_QWORD *)&v125 + 1) = 0;
    v126 = 0;
    v127 = 0;
    v128 = -1;
    cf[0] = &off_1E69A1FB8;
    *(_QWORD *)&v125 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)cf);
    *(_QWORD *)&buf[32] = "void AMCP::IOAudio2::update_stream_core(Core::Operation_Set &, const IOKit::Connection &, cons"
                          "t CF::Dictionary &, uint32_t)";
    v135 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    v136 = 200;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v130);
    v138 = *(_OWORD *)v130;
    valuePtr = (const __CFDictionary *)off_1E69A20A0;
    v139 = v131;
    memset(v130, 0, sizeof(v130));
    v131 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&valuePtr);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v85, (uint64_t)buf);
  }
  v106 = a3;
  v107 = a2;
  v108 = a4;
  v109 = a1;
  __p = 0;
  v122 = 0;
  v123 = 0;
  Count = CFArrayGetCount(theArray);
  v22 = 0;
  v112 = 0;
  v113 = 0;
  v23 = 0;
  v111 = v21;
LABEL_26:
  for (i = CFArrayGetCount(v21); v113 != Count && (v111 != v21 || v113 != i); i = 0)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&valuePtr, v111, v113);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not construct");
      __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("min sample rate"), cf);
    v25 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v26 = applesauce::CF::convert_to<unsigned long long,0>(*(const __CFNumber **)buf);
    CFRelease(v25);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v87, "Could not construct");
      __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("max sample rate"), cf);
    v27 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v28 = applesauce::CF::convert_to<unsigned long long,0>(*(const __CFNumber **)buf);
    CFRelease(v27);
    if (cf[0])
      CFRelease(cf[0]);
    v29 = (double)v26 * 2.32830644e-10;
    v30 = v29 + (double)HIDWORD(v26);
    v31 = (double)v28 * 2.32830644e-10 + (double)HIDWORD(v28);
    v32 = v30 == v31 ? v29 + (double)HIDWORD(v26) : 0.0;
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("format ID"), cf);
    v33 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v34 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v33);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("format flags"), cf);
    v35 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v36 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v35);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
      __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("bytes per packet"), cf);
    v37 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v38 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v37);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "Could not construct");
      __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("frames per packet"), cf);
    v39 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v40 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v39);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not construct");
      __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("bytes per frame"), cf);
    v41 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v42 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v41);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v89, "Could not construct");
      __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("channels per frame"), cf);
    v43 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_160;
    v44 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v43);
    if (cf[0])
      CFRelease(cf[0]);
    if (!valuePtr)
      goto LABEL_160;
    *(_DWORD *)buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v122 = v22;
      v123 = v112;
      v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v95, "Could not construct");
      __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, CFSTR("bits per channel"), cf);
    v45 = *(const void **)buf;
    if (!*(_QWORD *)buf)
    {
LABEL_160:
      v122 = v22;
      v123 = v112;
      v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v94, "Could not construct");
      __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v46 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v45);
    if (cf[0])
      CFRelease(cf[0]);
    if (v34 == 1819304813)
      v36 &= ~0x40u;
    if ((unint64_t)v22 >= v112)
    {
      v47 = 0x6DB6DB6DB6DB6DB7 * (v22 - v23) + 1;
      if (v47 > 0x492492492492492)
      {
        v122 = v22;
        v123 = v112;
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v112 - (_QWORD)v23) >> 3) > v47)
        v47 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v112 - (_QWORD)v23) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v112 - (_QWORD)v23) >> 3)) >= 0x249249249249249)
        v48 = 0x492492492492492;
      else
        v48 = v47;
      if (v48)
        v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v48);
      else
        v49 = 0;
      v50 = v48 + 8 * (v22 - v23);
      *(double *)v50 = v32;
      *(_DWORD *)(v50 + 8) = v34;
      *(_DWORD *)(v50 + 12) = v36;
      *(_DWORD *)(v50 + 16) = v38;
      *(_DWORD *)(v50 + 20) = v40;
      *(_DWORD *)(v50 + 24) = v42;
      *(_DWORD *)(v50 + 28) = v44;
      *(_DWORD *)(v50 + 32) = v46;
      *(_DWORD *)(v50 + 36) = 0;
      *(double *)(v50 + 40) = v30;
      *(double *)(v50 + 48) = v31;
      if (v22 == v23)
      {
        v52 = (void *)(v48 + 8 * (v22 - v23));
      }
      else
      {
        v51 = v48 + 8 * (v22 - v23);
        do
        {
          v52 = (void *)(v51 - 56);
          v53 = *(_OWORD *)(v22 - 7);
          v54 = *(_OWORD *)(v22 - 5);
          v55 = *(_OWORD *)(v22 - 3);
          *(double *)(v51 - 8) = *(v22 - 1);
          *(_OWORD *)(v51 - 24) = v55;
          *(_OWORD *)(v51 - 40) = v54;
          *(_OWORD *)(v51 - 56) = v53;
          v22 -= 7;
          v51 -= 56;
        }
        while (v22 != v23);
      }
      v112 = v48 + 56 * v49;
      v22 = (double *)(v50 + 56);
      __p = v52;
      if (v23)
        operator delete(v23);
      v23 = (double *)v52;
    }
    else
    {
      *v22 = v32;
      *((_DWORD *)v22 + 2) = v34;
      *((_DWORD *)v22 + 3) = v36;
      *((_DWORD *)v22 + 4) = v38;
      *((_DWORD *)v22 + 5) = v40;
      *((_DWORD *)v22 + 6) = v42;
      *((_DWORD *)v22 + 7) = v44;
      *((_DWORD *)v22 + 8) = v46;
      *((_DWORD *)v22 + 9) = 0;
      v22[5] = v30;
      v22[6] = v31;
      v22 += 7;
    }
    if (valuePtr)
      CFRelease(valuePtr);
    ++v113;
    v21 = theArray;
    if (theArray)
      goto LABEL_26;
  }
  v122 = v22;
  v123 = v112;
  AMCP::make_available_format_list((uint64_t *)&__p, &v119);
  cf[0] = (CFTypeRef)0x676C6F62666D7423;
  LODWORD(cf[1]) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)buf, (uint64_t)cf, v119, v120);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v109, (unsigned int *)(*(_QWORD *)buf + 40), buf);
  v56 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)cf, *v106);
  LODWORD(connect.__vftable) = *(_DWORD *)v107;
  v59 = IOConnectAddRef((io_connect_t)connect.__vftable);
  if ((_DWORD)v59)
  {
    v100 = __cxa_allocate_exception(0x20uLL);
    v101 = std::system_category();
    MEMORY[0x1B5E5022C](v100, v59, v101, "Error on IOConnectAddRef");
    __cxa_throw(v100, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  HIDWORD(connect.__vftable) = v108;
  v115 = 0;
  v116 = 0;
  connect.__imp_.__imp_ = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&connect.__imp_, v119, v120, (v120 - v119) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v117, 0, 1.58366008e190);
  v60 = v117;
  v61 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  v139 = 0;
  v62 = (char *)operator new(0x30uLL);
  *(_QWORD *)v62 = &off_1E698AA88;
  v63 = v125;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)cf;
  *(_OWORD *)(v62 + 24) = v63;
  *((_QWORD *)v62 + 5) = v126;
  v139 = (const __CFDictionary **)v62;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&valuePtr);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v60, v61, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  p_valuePtr = v139;
  if (v139 == &valuePtr)
  {
    v65 = 4;
    p_valuePtr = &valuePtr;
  }
  else
  {
    if (!v139)
      goto LABEL_116;
    v65 = 5;
  }
  (*((void (**)(void))*p_valuePtr + v65))();
LABEL_116:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(v117);
  v66 = v117;
  v67 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  v68 = (io_connect_t)connect.__vftable;
  v130[0] = (io_connect_t)connect.__vftable;
  v69 = IOConnectAddRef((io_connect_t)connect.__vftable);
  if ((_DWORD)v69)
  {
    v102 = __cxa_allocate_exception(0x20uLL);
    v103 = std::system_category();
    MEMORY[0x1B5E5022C](v102, v69, v103, "Error on IOConnectAddRef");
    __cxa_throw(v102, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v70 = HIDWORD(connect.__vftable);
  v130[1] = HIDWORD(connect.__vftable);
  imp = connect.__imp_.__imp_;
  v72 = v115;
  *(_QWORD *)&v130[2] = connect.__imp_.__imp_;
  v131 = v115;
  v73 = v116;
  v132 = v116;
  v115 = 0;
  v116 = 0;
  connect.__imp_.__imp_ = 0;
  v139 = 0;
  v74 = operator new(0x28uLL);
  *(_QWORD *)v74 = &off_1E698AB98;
  v74[2] = v68;
  v75 = IOConnectAddRef(v68);
  if ((_DWORD)v75)
  {
    v104 = __cxa_allocate_exception(0x20uLL);
    v105 = std::system_category();
    MEMORY[0x1B5E5022C](v104, v75, v105, "Error on IOConnectAddRef");
    __cxa_throw(v104, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v74[3] = v70;
  *((_QWORD *)v74 + 2) = imp;
  *((_QWORD *)v74 + 3) = v72;
  *((_QWORD *)v74 + 4) = v73;
  v131 = 0;
  v132 = 0;
  *(_QWORD *)&v130[2] = 0;
  v139 = (const __CFDictionary **)v74;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&valuePtr);
  *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v66, v67, (AMCP *)buf);
  if (*(_QWORD *)&buf[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  v76 = v139;
  if (v139 == &valuePtr)
  {
    v78 = 4;
    v76 = &valuePtr;
    v77 = v109;
    goto LABEL_124;
  }
  v77 = v109;
  if (v139)
  {
    v78 = 5;
LABEL_124:
    (*((void (**)(void))*v76 + v78))();
  }
  v133 = &v130[2];
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  IOConnectRelease(v130[0]);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(v117);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v77, (unsigned int *)(v117 + 40), &v117);
  v79 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  *(_QWORD *)buf = &connect.__imp_;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  IOConnectRelease((io_connect_t)connect.__vftable);
  *(_QWORD *)buf = &v119;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p)
  {
    v122 = __p;
    operator delete(__p);
  }
  if (theArray)
    CFRelease(theArray);
}

void sub_1B5B18118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, io_connect_t connect, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35,void *a36,uint64_t a37)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  IOConnectRelease(*(_DWORD *)a1);
  return a1;
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E698AB98;
  v3 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  IOConnectRelease(*(_DWORD *)(a1 + 8));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &off_1E698AB98;
  v2 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);
  IOConnectRelease(*(_DWORD *)(a1 + 8));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E698AB98;
  std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5B18588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E698AB98;
  return std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 is_an_available_format;
  mach_port_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  std::runtime_error *exception;
  int v14;
  uint64_t v15;
  std::runtime_error v16;
  std::runtime_error *v17;
  void *v18;
  const std::error_category *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  void *__p;
  __int128 v25;
  std::string::size_type v26;
  std::runtime_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  std::string::size_type v36;
  size_t v37;
  uint32_t outputCnt;
  uint64_t input;
  NSObject **inputStruct;
  __int128 v41;
  _BYTE v42[24];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inputStruct, "com.apple.coreaudio", "AMCP");
    v7 = (std::__shared_weak_count *)v41;
    v8 = *inputStruct;
    if ((_QWORD)v41)
    {
      v9 = (unint64_t *)(v41 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      LODWORD(inputStruct) = 67109890;
      HIDWORD(inputStruct) = v12;
      LOWORD(v41) = 2080;
      *(_QWORD *)((char *)&v41 + 2) = "IOAudio2_Stream.cpp";
      WORD5(v41) = 1024;
      HIDWORD(v41) = 215;
      *(_WORD *)v42 = 2080;
      *(_QWORD *)&v42[2] = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", (uint8_t *)&inputStruct, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v34, "failed to set stream format");
    std::runtime_error::runtime_error(&v27, (const std::runtime_error *)&v34);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v28 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&inputStruct, (uint64_t)&v27);
    *(_QWORD *)&v42[8] = "auto AMCP::IOAudio2::update_stream_core(Core::Operation_Set &, const IOKit::Connection &, const"
                         " CF::Dictionary &, uint32_t)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    *(_QWORD *)&v42[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    v43 = 215;
    std::vector<void *>::vector(&v35);
    v14 = backtrace((void **)v35, (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 3);
    std::vector<void *>::resize((char **)&v35, v14);
    __p = off_1E69A20A0;
    v25 = v35;
    v26 = v36;
    v35 = 0uLL;
    v36 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&inputStruct, (uint64_t)&__p);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)&inputStruct);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = *(_QWORD *)v42;
    exception[1].__imp_.__imp_ = *(const char **)v42;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v16 = *(std::runtime_error *)&v42[8];
    LODWORD(exception[3].__vftable) = v43;
    exception[2] = v16;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  inputStruct = (NSObject **)(vcvtd_n_s64_f64(*(double *)a2 - floor(*(double *)a2), 0x20uLL) | (vcvtmd_s64_f64(*(double *)a2) << 32));
  v41 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)v42 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v42[8] = *(_DWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a1 + 8);
  if (!v5)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  input = *(unsigned int *)(a1 + 12);
  v27.__vftable = 0;
  v27.__imp_.__imp_ = 0;
  v28 = 0;
  outputCnt = 0;
  __p = 0;
  v25 = 0uLL;
  v37 = 0;
  v6 = IOConnectCallMethod(v5, 5u, &input, 1u, &inputStruct, 0x28uLL, 0, &outputCnt, 0, &v37);
  if ((_DWORD)v6)
  {
    v18 = __cxa_allocate_exception(0x20uLL);
    v19 = std::system_category();
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v34.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v33, 5u);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v33;
    else
      v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v34, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v36 = v22->__r_.__value_.__r.__words[2];
    v35 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](v18, v6, v19, &v35);
    __cxa_throw(v18, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize((char **)&v27, outputCnt);
  if (v37)
  {
    std::vector<unsigned char>::__append((unint64_t *)&__p, v37);
    if (__p)
      operator delete(__p);
  }
  if (v27.__vftable)
    operator delete(v27.__vftable);
}

void sub_1B5B18A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  int v39;

  if (a38 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a32 < 0)
  {
    operator delete(a28.__vftable);
    if ((v39 & 1) == 0)
    {
LABEL_10:
      if (a16.__vftable)
        operator delete(a16.__vftable);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v38);
  goto LABEL_10;
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio2L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit17io_connect_holderERKNS4_2CF13DictionaryRefEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return IOConnectRelease(*(_DWORD *)a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_connect_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void *exception;
  const std::error_category *v10;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = IOConnectAddRef(v4);
  if ((_DWORD)v5)
  {
    v8 = v5;
    exception = __cxa_allocate_exception(0x20uLL);
    v10 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v8, v10, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v6 = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 6);
  return a1;
}

void sub_1B5B18D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E698AA88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E698AA88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio2L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit17io_connect_holderERKNS4_2CF13DictionaryRefEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::target_type()
{
}

double AMCP::DAL::Packetized_File_Handler::get_length_in_frames(AMCP::DAL::Packetized_File_Handler *this)
{
  OpaqueExtAudioFile *v1;
  AMCP::Utility::OSStatus_Error_Category *Property;
  unsigned int v3;
  AMCP::Log::Scope_Registry *v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  void *v13;
  std::string v14;
  uint64_t v15;
  std::logic_error v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  UInt32 ioPropertyDataSize;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  _BYTE v28[24];
  std::logic_error outPropertyData;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  const char *v37;
  const char *v38;
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v31 = 2080;
      v32 = "Packetized_File_Handler.cpp";
      v33 = 1024;
      v34 = 52;
      v35 = 2080;
      *(_QWORD *)v36 = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Handler::GetLengthInFrames: mAudioFile is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Handler::GetLengthInFrames: mAudioFile is null", (uint64_t)&v14);
    std::logic_error::logic_error(&outPropertyData, &v14);
    outPropertyData.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v16, &outPropertyData);
    *((_QWORD *)&v17 + 1) = 0;
    v18 = 0;
    v19 = 0;
    LODWORD(v20) = -1;
    v16.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v17 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(_QWORD *)&v36[6] = "virtual Sample_Time AMCP::DAL::Packetized_File_Handler::get_length_in_frames() const";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
    LODWORD(v38) = 52;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    *(_OWORD *)v28 = v25;
    v27 = off_1E69A20A0;
    *(_QWORD *)&v28[16] = v26;
    v25 = 0uLL;
    v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v27);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  outPropertyData.__vftable = 0;
  ioPropertyDataSize = 8;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(v1, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
  v3 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      v31 = 2080;
      v32 = "Packetized_File_Handler.cpp";
      v33 = 1024;
      v34 = 56;
      v35 = 2080;
      *(_QWORD *)v36 = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Handler::GetFileLengthInFrames: couldn't get the file's length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    v13 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v27, v3, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error((std::runtime_error *)&v16, (const std::runtime_error *)&v27);
    v17 = *(_OWORD *)&v28[8];
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&off_1E69A12F8;
    v18 = &unk_1E69A1320;
    v19 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    v38 = "virtual Sample_Time AMCP::DAL::Packetized_File_Handler::get_length_in_frames() const";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
    v40 = 56;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = v25;
    v15 = v26;
    v25 = 0uLL;
    v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v13, (uint64_t)buf);
  }
  return (double)(uint64_t)outPropertyData.__vftable;
}

void sub_1B5B19214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int16 a24,char a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32)
{
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v36;

  if (__p)
    operator delete(__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  *(_QWORD *)(v34 - 96) = &unk_1E69A2000;
  v36 = *(_QWORD *)(v34 - 88);
  if (v36 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36))
    *(_QWORD *)(v34 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v34 - 128));
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a16);
  std::runtime_error::~runtime_error(&a32);
  if (v33)
    __cxa_free_exception(v32);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a26);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::DAL::Packetized_File_Factory@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *result;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::runtime_error v18;
  std::runtime_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  const char *v31;
  const char *v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(buf, "read");
  v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, buf);
  v5 = v4;
  if (SHIBYTE(v30) < 0)
    operator delete(*(void **)buf);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v27 = 2080;
      v28 = "Packetized_File_Handler.cpp";
      v29 = 1024;
      v30 = 34;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Packetized_File_Factory only supports reading packetized files", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Factory only supports reading packetized files", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v20 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    v31 = "std::shared_ptr<DAL_File_Handler> AMCP::DAL::Packetized_File_Factory(const DAL_Settings &)";
    v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
    v33 = 34;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    v15 = v12;
    v16 = v13;
    v12 = 0uLL;
    v13 = 0;
    v14 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = operator new();
  AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(v6, a1);
  *a2 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E698AED8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1B5B19630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_22Packetized_File_ReaderEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void HALS_IOContext::~HALS_IOContext(HALS_IOContext *this)
{
  HALS_IOContext::~HALS_IOContext(this);
  JUMPOUT(0x1B5E50688);
}

{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  HALB_Mutex *v6;
  AMCP::Utility::Dispatch_Queue *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E698AF28;
  *((_QWORD *)this + 12) = 0;
  v2 = (char *)this + 96;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (HALB_Mutex *)*((_QWORD *)this + 6);
  if (v6)
  {
    HALB_Mutex::~HALB_Mutex(v6);
    MEMORY[0x1B5E50688]();
  }
  v7 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 7);
  if (v7)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v7);
    MEMORY[0x1B5E50688]();
  }
  v8 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v8)
    std::default_delete<HALS_IOContext::OverloadReporter>::operator()[abi:ne180100](v8);
  std::unique_ptr<HALS_IOContext::IntervalReporter>::reset[abi:ne180100]((uint64_t *)this + 24);
  v9 = (void *)*((_QWORD *)this + 20);
  if (v9)
  {
    *((_QWORD *)this + 21) = v9;
    operator delete(v9);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    MEMORY[0x1B5E50688](v10, 0x1000C40B62306B4);
  HALS_Object::~HALS_Object(this);
}

void HALS_IOContext::_Deactivate(HALS_IOContext *this)
{
  HALS_IOProc *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12));
  v2 = (HALS_IOProc *)*((_QWORD *)this + 14);
  if (v2)
  {
    HALS_IOProc::~HALS_IOProc(v2);
    MEMORY[0x1B5E50688]();
  }
  *((_QWORD *)this + 14) = 0;
  free(*((void **)this + 15));
  *((_QWORD *)this + 15) = 0;
  free(*((void **)this + 16));
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *((_DWORD *)this + 2) = 0;
}

uint64_t HALS_IOContext::GetMIGDispatchQueue(HALS_IOContext *this)
{
  return *((_QWORD *)this + 7);
}

{
  return *((_QWORD *)this + 7);
}

BOOL HALS_IOContext::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  _BOOL8 result;
  int v5;
  int v6;
  int v7;

  v3 = *a3;
  result = 1;
  if (*a3 > 1836282993)
  {
    if (v3 > 1902539641)
    {
      if (v3 <= 1935959153)
      {
        if (v3 == 1902539642 || v3 == 1919773028)
          return result;
        v5 = 1935763060;
      }
      else if (v3 > 1937007733)
      {
        if (v3 == 1937007734)
          return result;
        v5 = 1937077093;
      }
      else
      {
        if (v3 == 1935959154)
          return result;
        v5 = 1936482681;
      }
LABEL_38:
      if (v3 == v5)
        goto LABEL_39;
      return 0;
    }
    if (v3 > 1869838182)
    {
      if (v3 == 1869838183 || v3 == 1870030194)
        return result;
      v6 = 1870098020;
    }
    else
    {
      if (v3 == 1836282994 || v3 == 1852012899)
        return result;
      v6 = 1869638759;
    }
LABEL_34:
    if (v3 == v6)
      return result;
    return 0;
  }
  if (v3 <= 1684108386)
  {
    if (v3 > 1634955891)
    {
      if (v3 == 1634955892 || v3 == 1650682995)
        return result;
      v6 = 1668047219;
    }
    else
    {
      if (v3 == 1633906541 || v3 == 1633970532)
        return result;
      v6 = 1634300531;
    }
    goto LABEL_34;
  }
  if (v3 <= 1735354733)
  {
    if (v3 == 1684108387 || v3 == 1718839674)
      return result;
    v6 = 1718843939;
    goto LABEL_34;
  }
  if (v3 <= 1735750500)
  {
    if (v3 == 1735354734)
      return result;
    v5 = 1735551332;
    goto LABEL_38;
  }
  if (v3 != 1735750501)
  {
    v6 = 1752135523;
    goto LABEL_34;
  }
LABEL_39:
  v7 = a3[1];
  return v7 == 1768845428 || v7 == 1869968496;
}

uint64_t HALS_IOContext::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  _DWORD *exception;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v5 = *a3;
  result = 1;
  if (*a3 <= 1752135522)
  {
    if (v5 <= 1718839673)
    {
      if (v5 <= 1634300530)
      {
        if (v5 == 1633906541)
          return result;
        v8 = 1633970532;
      }
      else
      {
        if (v5 == 1634300531)
          return result;
        if (v5 == 1634955892)
          return 0;
        v8 = 1684108387;
      }
      goto LABEL_28;
    }
    if (v5 > 1735354733)
    {
      if (v5 == 1735354734 || v5 == 1735551332)
        return 0;
      v8 = 1735750501;
      goto LABEL_28;
    }
    if (v5 == 1718839674)
      return result;
    v7 = 1718843939;
    goto LABEL_32;
  }
  if (v5 <= 1902539641)
  {
    if (v5 <= 1852012898)
    {
      if (v5 == 1752135523)
        return result;
      v8 = 1836282994;
LABEL_28:
      if (v5 == v8)
        return result;
      return HALS_Object::IsPropertySettable(1, v4, a3);
    }
    if (v5 == 1852012899 || v5 == 1869838183)
      return result;
    v7 = 1870030194;
LABEL_32:
    if (v5 == v7)
      return 0;
    return HALS_Object::IsPropertySettable(1, v4, a3);
  }
  if (v5 > 1935959153)
  {
    if (v5 == 1935959154)
      return result;
    if (v5 == 1936482681)
      return 0;
    v8 = 1937077093;
    goto LABEL_28;
  }
  if (v5 != 1902539642 && v5 != 1919773028)
  {
    v7 = 1935763060;
    goto LABEL_32;
  }
  return result;
}

uint64_t HALS_IOContext::GetPropertyDataSize(HALS_IOContext *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  uint64_t v8;
  uint64_t v9;
  signed int mSelector;
  uint64_t v11;
  int v12;
  HALB_Mutex *v13;
  HALB_Mutex *v14;
  HALB_Mutex *v15;
  HALB_Mutex *v16;
  _DWORD *exception;
  _QWORD v19[7];
  _QWORD v20[7];
  _QWORD v21[7];
  _QWORD v22[7];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v8 = (*(uint64_t (**)(HALS_IOContext *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, const void *))(*(_QWORD *)this + 88))(this, a2, a3, a6, a5);
  if ((v8 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  v11 = 8;
  if ((int)a3->mSelector <= 1752135522)
  {
    if (mSelector > 1718839673)
    {
      if (mSelector <= 1735354733)
      {
        if (mSelector == 1718839674)
          return 4;
        if (mSelector == 1718843939)
          return 16;
        return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
      }
      switch(mSelector)
      {
        case 1735354734:
          return 4;
        case 1735551332:
          v23 = 0;
          v24 = &v23;
          v25 = 0x2000000000;
          v26 = 0;
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 0x40000000;
          v22[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
          v22[3] = &unk_1E698B118;
          v22[4] = &v23;
          v22[5] = this;
          v22[6] = a3;
          v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v22);
          v11 = (56 * *((_DWORD *)v24 + 6));
          break;
        case 1735750501:
          v23 = 0;
          v24 = &v23;
          v25 = 0x2000000000;
          v26 = 0;
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 0x40000000;
          v21[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
          v21[3] = &unk_1E698B140;
          v21[4] = &v23;
          v21[5] = this;
          v21[6] = a3;
          v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v21);
          v11 = (4 * *((_DWORD *)v24 + 6) + 4);
          break;
        default:
          return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
      }
      goto LABEL_39;
    }
    if (mSelector <= 1634300530)
    {
      if (mSelector == 1633906541 || mSelector == 1633970532)
        return v11;
      return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
    }
    if (mSelector == 1634300531)
      return (*((_DWORD *)this + 42) - *((_DWORD *)this + 40)) & 0xFFFFFFF8;
    if (mSelector == 1634955892)
      return v11;
    v12 = 1684108387;
  }
  else
  {
    if (mSelector > 1902539641)
    {
      if (mSelector <= 1935959153)
      {
        if (mSelector != 1902539642)
        {
          if (mSelector != 1919773028)
          {
            v12 = 1935763060;
            goto LABEL_31;
          }
          return v11;
        }
        return 4;
      }
      switch(mSelector)
      {
        case 1935959154:
          return 4;
        case 1936482681:
          v23 = 0;
          v24 = &v23;
          v25 = 0x2000000000;
          v26 = 0;
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 0x40000000;
          v19[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
          v19[3] = &unk_1E698B190;
          v19[4] = &v23;
          v19[5] = this;
          v19[6] = a3;
          v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v19);
          v11 = (16 * *((_DWORD *)v24 + 6)) | 8u;
          break;
        case 1937077093:
          v23 = 0;
          v24 = &v23;
          v25 = 0x2000000000;
          v26 = 0;
          v20[0] = MEMORY[0x1E0C809B0];
          v20[1] = 0x40000000;
          v20[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
          v20[3] = &unk_1E698B168;
          v20[4] = &v23;
          v20[5] = this;
          v20[6] = a3;
          v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v20);
          v11 = (4 * *((_DWORD *)v24 + 6) + 12);
          break;
        default:
          return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
      }
LABEL_39:
      _Block_object_dispose(&v23, 8);
      return v11;
    }
    if (mSelector <= 1852012898)
    {
      if (mSelector == 1752135523)
        return 4;
      v12 = 1836282994;
    }
    else
    {
      if (mSelector == 1852012899)
        return 4;
      if (mSelector == 1869838183)
        return v11;
      v12 = 1870030194;
    }
  }
LABEL_31:
  if (mSelector == v12)
    return 4;
  return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
}

void sub_1B5B1A18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext::GetPropertyData(HALS_IOContext *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v14;
  signed int mSelector;
  BOOL v16;
  BOOL v17;
  HALB_Mutex *v18;
  uint64_t *v19;
  HALB_Mutex *v20;
  int v21;
  HALB_Mutex *v22;
  int AudioCaptureMode;
  uint64_t (*v24)(void);
  HALB_Mutex *v25;
  unsigned int v26;
  HALB_Mutex *v27;
  HALB_Mutex *v28;
  HALB_Mutex *v29;
  HALB_Mutex *v30;
  HALB_Mutex *v31;
  HALB_Mutex *v32;
  HALB_Mutex *v33;
  int v34;
  _DWORD *exception;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  int v53;
  _DWORD *v54;
  int v55;
  _QWORD v56[7];
  unsigned int v57;
  _QWORD v58[9];
  _QWORD v59[7];
  unsigned int v60;
  BOOL v61;
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  BOOL v66;
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[7];
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  _BYTE buf[24];
  void *v80;
  uint64_t *v81;
  uint64_t *v82;
  HALS_IOContext *v83;
  uint64_t *v84;
  unsigned int *v85;
  BOOL v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v70 = a4;
  if (((*(uint64_t (**)(HALS_IOContext *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, unsigned int *, uint64_t *, uint64_t, const void *))(*(_QWORD *)this + 88))(this, a2, a3, a9, a5, a6, a7, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v36 = 2003332927;
    goto LABEL_76;
  }
  mSelector = a3->mSelector;
  v16 = a3->mScope == 1768845428;
  if ((int)a3->mSelector <= 1752135522)
  {
    if (mSelector <= 1718839673)
    {
      if (mSelector <= 1634955891)
      {
        if (mSelector == 1633906541)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 974;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
            }
            v40 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v40 = &off_1E69A1B30;
            v40[2] = 561211770;
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          LODWORD(v80) = 0;
          v69[0] = MEMORY[0x1E0C809B0];
          v69[1] = 0x40000000;
          v69[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
          v69[3] = &unk_1E698B1B8;
          v69[6] = a6;
          v69[5] = this;
          v69[4] = buf;
          v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v69);
          if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24))
          {
            v54 = __cxa_allocate_exception(0x10uLL);
            v55 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
            *(_QWORD *)v54 = &off_1E69A1B30;
            v54[2] = v55;
          }
          v21 = 8;
        }
        else
        {
          if (mSelector != 1634300531)
          {
            v34 = 1633970532;
LABEL_73:
            if (mSelector != v34)
              goto LABEL_74;
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            v36 = 1852797029;
LABEL_76:
            exception[2] = v36;
          }
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          LODWORD(v80) = 0;
          v56[0] = MEMORY[0x1E0C809B0];
          v56[1] = 0x40000000;
          v56[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_35;
          v56[3] = &unk_1E698B2F0;
          v56[4] = buf;
          v56[5] = this;
          v57 = a4;
          v56[6] = a6;
          v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v56);
          v21 = 8 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
        }
        goto LABEL_53;
      }
      if (mSelector == 1634955892)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1038;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyActualSampleRate", buf, 0x12u);
          }
          v44 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v44 = &off_1E69A1B30;
          v44[2] = 561211770;
        }
        v62[0] = MEMORY[0x1E0C809B0];
        v62[1] = 0x40000000;
        v62[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30;
        v62[3] = &__block_descriptor_tmp_31_8564;
        v62[4] = this;
        v62[5] = a6;
        v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v62);
        goto LABEL_51;
      }
      if (mSelector == 1684108387)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1103;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyEnableCaptureFile", buf, 0x12u);
          }
          v38 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v38 = &off_1E69A1B30;
          v38[2] = 561211770;
        }
        AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(this);
        goto LABEL_67;
      }
    }
    else
    {
      if (mSelector > 1735354733)
      {
        if (mSelector == 1735354734)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1029;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
            }
            v47 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v47 = &off_1E69A1B30;
            v47[2] = 561211770;
          }
          v63[0] = MEMORY[0x1E0C809B0];
          v63[1] = 0x40000000;
          v63[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28;
          v63[3] = &__block_descriptor_tmp_29_8562;
          v63[4] = this;
          v63[5] = a6;
          v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v63);
          goto LABEL_68;
        }
        if (mSelector != 1735551332)
        {
          if (mSelector == 1735750501)
          {
            *a5 = a4;
            v17 = a3->mScope == 1768845428;
            v75 = 0;
            v76 = &v75;
            v77 = 0x2000000000;
            v78 = 0;
            v71 = 0;
            v72 = &v71;
            v73 = 0x2000000000;
            v74 = 0;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZNK14HALS_IOContext14GetStreamUsageER26AudioIOContext_StreamUsageRjb_block_invoke;
            v80 = &unk_1E698B3B0;
            v83 = this;
            v84 = a6;
            v85 = &v70;
            v86 = v17;
            v81 = &v75;
            v82 = &v71;
            v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v18, (uint64_t)buf);
            if (*((_DWORD *)v72 + 6))
            {
              v50 = __cxa_allocate_exception(0x10uLL);
              v51 = *((_DWORD *)v72 + 6);
              *(_QWORD *)v50 = &off_1E69A1B30;
              v50[2] = v51;
            }
            v70 = *((_DWORD *)v76 + 6);
            _Block_object_dispose(&v71, 8);
            v19 = &v75;
            goto LABEL_61;
          }
          goto LABEL_74;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        LODWORD(v80) = 0;
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 0x40000000;
        v59[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_32;
        v59[3] = &unk_1E698B2A0;
        v59[5] = this;
        v59[6] = a6;
        v60 = a4;
        v59[4] = buf;
        v61 = v16;
        v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v59);
        v21 = 56 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
LABEL_53:
        *a5 = v21;
LABEL_60:
        v19 = (uint64_t *)buf;
LABEL_61:
        _Block_object_dispose(v19, 8);
        return;
      }
      if (mSelector == 1718839674)
        goto LABEL_42;
      if (mSelector == 1718843939)
      {
        if (a4 <= 0xF)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 992;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSizeRange", buf, 0x12u);
          }
          v43 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v43 = &off_1E69A1B30;
          v43[2] = 561211770;
        }
        v68[0] = MEMORY[0x1E0C809B0];
        v68[1] = 0x40000000;
        v68[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
        v68[3] = &__block_descriptor_tmp_21_8554;
        v68[4] = this;
        v68[5] = a6;
        v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v68);
        v26 = 16;
        goto LABEL_69;
      }
    }
LABEL_74:
    HALS_Object::GetPropertyData((uint64_t)this, v14, (int *)a3, a4, (int *)a5, a6);
    return;
  }
  if (mSelector > 1902539641)
  {
    if (mSelector > 1935959153)
    {
      if (mSelector != 1935959154)
      {
        if (mSelector != 1936482681)
        {
          if (mSelector == 1937077093)
          {
            *a5 = a4;
            (*(void (**)(_QWORD, uint64_t *, unsigned int *, BOOL))(**((_QWORD **)this + 12) + 632))(*((_QWORD *)this + 12), a6, a5, a3->mScope == 1768845428);
            return;
          }
          goto LABEL_74;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2000000000;
        LODWORD(v80) = a4;
        v75 = 0;
        v76 = &v75;
        v77 = 0x2000000000;
        v78 = 0;
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 0x40000000;
        v58[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        v58[3] = &unk_1E698B2C8;
        v58[6] = this;
        v58[7] = a6;
        v58[4] = &v75;
        v58[5] = buf;
        v58[8] = a3;
        v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v58);
        if (*((_DWORD *)v76 + 6))
        {
          v52 = __cxa_allocate_exception(0x10uLL);
          v53 = *((_DWORD *)v76 + 6);
          *(_QWORD *)v52 = &off_1E69A1B30;
          v52[2] = v53;
        }
        *a5 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
        _Block_object_dispose(&v75, 8);
        goto LABEL_60;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1141;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart", buf, 0x12u);
        }
        v49 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v49 = &off_1E69A1B30;
        v49[2] = 561211770;
      }
      v24 = *(uint64_t (**)(void))(**((_QWORD **)this + 12) + 672);
      goto LABEL_66;
    }
    if (mSelector != 1902539642)
    {
      if (mSelector == 1935763060)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1011;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
          }
          v41 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v41 = &off_1E69A1B30;
          v41[2] = 561211770;
        }
        v65[0] = MEMORY[0x1E0C809B0];
        v65[1] = 0x40000000;
        v65[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24;
        v65[3] = &__block_descriptor_tmp_25_8558;
        v65[4] = this;
        v65[5] = a6;
        v66 = v16;
        v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v65);
        goto LABEL_68;
      }
      v34 = 1919773028;
      goto LABEL_73;
    }
LABEL_42:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1002;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSize", buf, 0x12u);
      }
      v37 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v37 = &off_1E69A1B30;
      v37[2] = 561211770;
    }
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 0x40000000;
    v67[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
    v67[3] = &__block_descriptor_tmp_23_8556;
    v67[4] = this;
    v67[5] = a6;
    v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v67);
    goto LABEL_68;
  }
  if (mSelector <= 1852012898)
  {
    if (mSelector == 1752135523)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1150;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyHandleOverloadWithCatchup", buf, 0x12u);
        }
        v48 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v48 = &off_1E69A1B30;
        v48[2] = 561211770;
      }
      v24 = *(uint64_t (**)(void))(**((_QWORD **)this + 12) + 688);
    }
    else
    {
      if (mSelector != 1836282994)
        goto LABEL_74;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1047;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioIOContextProperty_MasterDevice", buf, 0x12u);
        }
        v42 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v42 = &off_1E69A1B30;
        v42[2] = 561211770;
      }
      v24 = *(uint64_t (**)(void))(**((_QWORD **)this + 12) + 600);
    }
LABEL_66:
    AudioCaptureMode = v24();
LABEL_67:
    *(_DWORD *)a6 = AudioCaptureMode;
LABEL_68:
    v26 = 4;
    goto LABEL_69;
  }
  if (mSelector == 1852012899)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1020;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOCycleUsage", buf, 0x12u);
      }
      v46 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v46 = &off_1E69A1B30;
      v46[2] = 561211770;
    }
    v64[0] = MEMORY[0x1E0C809B0];
    v64[1] = 0x40000000;
    v64[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
    v64[3] = &__block_descriptor_tmp_27_8560;
    v64[4] = this;
    v64[5] = a6;
    v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v64);
    goto LABEL_68;
  }
  if (mSelector != 1869838183)
  {
    if (mSelector == 1870030194)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1093;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDeviceProcessorOverload", buf, 0x12u);
        }
        v39 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v39 = &off_1E69A1B30;
        v39[2] = 561211770;
      }
      *(_DWORD *)a6 = 0;
      goto LABEL_68;
    }
    goto LABEL_74;
  }
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1132;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOThreadOSWorkgroup", buf, 0x12u);
    }
    v45 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v45 = &off_1E69A1B30;
    v45[2] = 561211770;
  }
  *a6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 656))(*((_QWORD *)this + 12));
LABEL_51:
  v26 = 8;
LABEL_69:
  *a5 = v26;
}

void sub_1B5B1B344(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext::SetPropertyData(HALS_IOContext *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const __CFDictionary **a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  signed int mSelector;
  HALB_Mutex *v21;
  HALB_Mutex *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  AudioObjectPropertyScope v26;
  HALS_ObjectMap *v27;
  HALS_Object *v28;
  HALB_Mutex *v29;
  HALS_PlatformBehaviors *v30;
  HALS_Object *v31;
  uint64_t *v32;
  HALS_PlatformBehaviors *v33;
  uint64_t *v34;
  HALS_Object *v35;
  int v36;
  int v37;
  _DWORD *exception;
  _DWORD *v39;
  uint64_t v40;
  uint64_t AudioCaptureMode;
  AudioObjectPropertyScope mScope;
  HALS_ObjectMap *v43;
  HALS_Object *v44;
  HALB_Mutex *v45;
  HALS_PlatformBehaviors *v46;
  HALS_Object *v47;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v49;
  uint64_t *v50;
  HALS_Object *v51;
  HALB_Mutex *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  int v63;
  _QWORD v64[6];
  unsigned int v65;
  _QWORD v66[6];
  unsigned int v67;
  _QWORD v68[6];
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __n128 (*v81)(uint64_t, uint64_t);
  uint64_t (*v82)();
  _BYTE v83[14];
  __int16 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  __n128 (*v88)(uint64_t, uint64_t);
  uint64_t (*v89)();
  _BYTE v90[14];
  __int16 v91;
  _BYTE buf[24];
  void *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  HALS_IOContext *v98;
  const __CFDictionary **v99;
  HALS_ObjectMap *v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
    goto LABEL_58;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1836282993)
  {
    if (mSelector > 1684108386)
    {
      if (mSelector <= 1735750500)
      {
        if (mSelector != 1684108387)
        {
          if (mSelector != 1718839674)
LABEL_82:
            HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1223;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyEnableCaptureFile", buf, 0x12u);
          }
          v57 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v57 = &off_1E69A1B30;
          v57[2] = 561211770;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)a5;
        v40 = *((_QWORD *)this + 12);
        AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(this);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 520))(v40, AudioCaptureMode);
        return;
      }
      if (mSelector == 1735750501)
      {
        mScope = a3->mScope;
        v43 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)this + 8));
        v74 = 0;
        v75 = &v74;
        v76 = 0x2000000000;
        v77 = 0;
        v70 = 0;
        v71 = &v70;
        v72 = 0x2000000000;
        v73 = 0;
        v85 = 0;
        v86 = &v85;
        v87 = 0x3802000000;
        v88 = __Block_byref_object_copy__8541;
        v89 = __Block_byref_object_dispose__8542;
        memset(v90, 0, sizeof(v90));
        v91 = 1;
        v78 = 0;
        v79 = &v78;
        v80 = 0x3802000000;
        v81 = __Block_byref_object_copy__8541;
        v82 = __Block_byref_object_dispose__8542;
        memset(v83, 0, sizeof(v83));
        v84 = 1;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 1174405120;
        *(_QWORD *)&buf[16] = ___ZN14HALS_IOContext14SetStreamUsageERK26AudioIOContext_StreamUsagejb_block_invoke;
        v93 = &unk_1E698B378;
        v101 = a4;
        v102 = mScope == 1768845428;
        v94 = &v74;
        v95 = &v70;
        v98 = this;
        v99 = a5;
        v96 = &v85;
        v100 = v43;
        HALS_ObjectMap::RetainObject(v43, v44);
        v97 = &v78;
        v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v45, (uint64_t)buf);
        if (mScope == 1768845428 && *((_BYTE *)v71 + 24))
        {
          platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v46);
          v49 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
          v50 = HALS_PlatformBehaviors::get_platform_behaviors(v49);
          (*(void (**)(uint64_t *))(*v50 + 64))(v50);
        }
        if (*((_DWORD *)v75 + 6))
        {
          v62 = __cxa_allocate_exception(0x10uLL);
          v63 = *((_DWORD *)v75 + 6);
          *(_QWORD *)v62 = &off_1E69A1B30;
          v62[2] = v63;
        }
        HALS_ObjectMap::ReleaseObject(v100, v47);
        _Block_object_dispose(&v78, 8);
        _Block_object_dispose(&v85, 8);
        _Block_object_dispose(&v70, 8);
        _Block_object_dispose(&v74, 8);
        HALS_ObjectMap::ReleaseObject(v43, v51);
        return;
      }
      if (mSelector != 1752135523)
        goto LABEL_82;
      if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1307;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioAggregateDevicePropertyHandleOverloadWithCatchup", buf, 0x12u);
        }
        v56 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v56 = &off_1E69A1B30;
        v56[2] = 561211770;
      }
      v23 = *(unsigned __int8 *)a5;
      v24 = *((_QWORD *)this + 12);
      v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 680);
LABEL_51:
      v25(v24, v23);
      return;
    }
    if (mSelector != 1633906541)
    {
      if (mSelector == 1633970532)
      {
        v68[0] = MEMORY[0x1E0C809B0];
        v68[1] = 0x40000000;
        v68[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v68[3] = &__block_descriptor_tmp_37_8533;
        v69 = a4;
        v68[4] = this;
        v68[5] = a5;
        v52 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v52, (uint64_t)v68);
      }
      else
      {
        if (mSelector != 1634300531)
          goto LABEL_82;
        v64[0] = MEMORY[0x1E0C809B0];
        v64[1] = 0x40000000;
        v64[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_40;
        v64[3] = &__block_descriptor_tmp_41_8535;
        v65 = a4;
        v64[4] = this;
        v64[5] = a5;
        v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v64);
      }
      return;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1171;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
      }
      v54 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v54 = &off_1E69A1B30;
      v54[2] = 561211770;
    }
    v36 = HALS_IOContext::SetComposition(this, *a5);
    if (!v36)
      return;
    v37 = v36;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v37;
LABEL_58:
  }
  if (mSelector <= 1902539641)
  {
    switch(mSelector)
    {
      case 1836282994:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1203;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioIOContextProperty_MasterDevice", buf, 0x12u);
          }
          v39 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v39 = &off_1E69A1B30;
          v39[2] = 561211770;
        }
        break;
      case 1852012899:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1195;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyIOCycleUsage", buf, 0x12u);
          }
          v59 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v59 = &off_1E69A1B30;
          v59[2] = 561211770;
        }
        (*(void (**)(_QWORD, float))(**((_QWORD **)this + 12) + 584))(*((_QWORD *)this + 12), *(float *)a5);
        break;
      case 1869838183:
        if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1290;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyIOThreadOSWorkgroup", buf, 0x12u);
          }
          v55 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v55 = &off_1E69A1B30;
          v55[2] = 561211770;
        }
        (*(void (**)(_QWORD, const __CFDictionary *))(**((_QWORD **)this + 12) + 640))(*((_QWORD *)this + 12), *a5);
        break;
      default:
        goto LABEL_82;
    }
    return;
  }
  if (mSelector > 1935959153)
  {
    if (mSelector != 1935959154)
    {
      if (mSelector != 1937077093)
        goto LABEL_82;
      v26 = a3->mScope;
      v27 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)this + 8));
      v85 = 0;
      v86 = &v85;
      v87 = 0x3802000000;
      v88 = __Block_byref_object_copy__8541;
      v89 = __Block_byref_object_dispose__8542;
      memset(v90, 0, sizeof(v90));
      v91 = 1;
      v78 = 0;
      v79 = &v78;
      v80 = 0x3802000000;
      v81 = __Block_byref_object_copy__8541;
      v82 = __Block_byref_object_dispose__8542;
      memset(v83, 0, sizeof(v83));
      v84 = 1;
      v74 = 0;
      v75 = &v74;
      v76 = 0x2000000000;
      v77 = 0;
      v70 = 0;
      v71 = &v70;
      v72 = 0x2000000000;
      v73 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&buf[16] = ___ZN14HALS_IOContext20SetIOProcStreamUsageERK30AudioHardwareIOProcStreamUsagejb_block_invoke;
      v93 = &unk_1E698B3D8;
      v101 = a4;
      v102 = v26 == 1768845428;
      v94 = &v74;
      v95 = &v70;
      v98 = this;
      v99 = a5;
      v96 = &v85;
      v100 = v27;
      HALS_ObjectMap::RetainObject(v27, v28);
      v97 = &v78;
      v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)buf);
      if (v26 == 1768845428 && *((_BYTE *)v71 + 24))
      {
        v32 = HALS_PlatformBehaviors::get_platform_behaviors(v30);
        v33 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*v32 + 64))(v32);
        v34 = HALS_PlatformBehaviors::get_platform_behaviors(v33);
        (*(void (**)(uint64_t *))(*v34 + 64))(v34);
      }
      if (*((_DWORD *)v75 + 6))
      {
        v60 = __cxa_allocate_exception(0x10uLL);
        v61 = *((_DWORD *)v75 + 6);
        *(_QWORD *)v60 = &off_1E69A1B30;
        v60[2] = v61;
      }
      HALS_ObjectMap::ReleaseObject(v100, v31);
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);
      _Block_object_dispose(&v78, 8);
      _Block_object_dispose(&v85, 8);
      HALS_ObjectMap::ReleaseObject(v27, v35);
      return;
    }
    if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1299;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart", buf, 0x12u);
      }
      v58 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v58 = &off_1E69A1B30;
      v58[2] = 561211770;
    }
    v23 = *(unsigned __int8 *)a5;
    v24 = *((_QWORD *)this + 12);
    v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 664);
    goto LABEL_51;
  }
  if (mSelector == 1902539642)
  {
LABEL_33:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1186;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSize", buf, 0x12u);
      }
      v53 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v53 = &off_1E69A1B30;
      v53[2] = 561211770;
    }
    (*(void (**)(_QWORD, _QWORD, BOOL))(**((_QWORD **)this + 12) + 576))(*((_QWORD *)this + 12), *(unsigned int *)a5, mSelector == 1902539642);
    return;
  }
  if (mSelector != 1919773028)
    goto LABEL_82;
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 0x40000000;
  v66[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38;
  v66[3] = &__block_descriptor_tmp_39_8534;
  v67 = a4;
  v66[4] = this;
  v66[5] = a5;
  v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v66);
}

void sub_1B5B1C18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext::GetClientPID(HALS_IOContext *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 8) + 4);
}

uint64_t HALS_IOContext::HasEnabledInputStreams(HALS_IOContext *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOContext22HasEnabledInputStreamsEv_block_invoke;
  v4[3] = &unk_1E698B088;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B1C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext::HasEnabledOutputStreams(HALS_IOContext *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOContext23HasEnabledOutputStreamsEv_block_invoke;
  v4[3] = &unk_1E698B060;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B1C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext::IsIOThreadRunning(HALS_IOContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 168))(*((_QWORD *)this + 12));
}

uint64_t ___ZNK14HALS_IOContext23HasEnabledOutputStreamsEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), 0);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 48))(*(_QWORD *)(v2 + 96), 0);
    v4 = (_DWORD)result != 0;
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t ___ZNK14HALS_IOContext22HasEnabledInputStreamsEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), 1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 48))(*(_QWORD *)(v2 + 96), 1);
    v4 = (_DWORD)result != 0;
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t HALS_IOContext::SetComposition(HALS_IOContext *this, const __CFDictionary *a2)
{
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  _BOOL8 is_thread_configured_for_realtime;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  NSObject **v14;
  _BYTE v15[10];
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = pthread_self();
  is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v4, v5);
  if (!is_thread_configured_for_realtime)
    return (*(uint64_t (**)(_QWORD, const __CFDictionary *))(**((_QWORD **)this + 12) + 552))(*((_QWORD *)this + 12), a2);
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
  v7 = *(std::__shared_weak_count **)v15;
  v8 = *v14;
  if (*(_QWORD *)v15)
  {
    v9 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    LODWORD(v14) = 67109634;
    HIDWORD(v14) = v13;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = "HALS_IOContext.cpp";
    v16 = 1024;
    v17 = 1883;
    _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContext::SetComposition not allowed on the IO thread, returning kAudioHardwareIllegalOperationError", (uint8_t *)&v14, 0x18u);
  }
  return 1852797029;
}

uint64_t HALS_IOContext::GetAudioCaptureMode(HALS_IOContext *this)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  std::__shared_weak_count *v11;

  v1 = *((unsigned int *)this + 39);
  if (!(_DWORD)v1)
  {
    v9[0] = 0;
    v9[1] = 0;
    HALS_System::GetInstance(&v10, 0, v9);
    if (v10 && *(_BYTE *)(v10 + 1464))
    {
      v3 = 0;
      v4 = *(_DWORD *)(v10 + 1468);
      if (v4 <= 1)
        v1 = 1;
      else
        v1 = v4;
    }
    else
    {
      v3 = 1;
    }
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v3)
      return *((unsigned int *)this + 39);
  }
  return v1;
}

void sub_1B5B1C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char *v3;
  int64_t v4;
  _DWORD *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 48) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "HALS_IOContext.cpp";
      v8 = 1024;
      v9 = 1252;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyRemoveReporterID", (uint8_t *)&v6, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v1 = *(_QWORD *)(result + 32);
  v3 = *(char **)(v1 + 160);
  v2 = *(char **)(v1 + 168);
  if (v3 != v2)
  {
    while (*(_QWORD *)v3 != **(_QWORD **)(result + 40))
    {
      v3 += 8;
      if (v3 == v2)
      {
        v3 = *(char **)(v1 + 168);
        break;
      }
    }
  }
  if (v3 != v2)
  {
    v4 = v2 - (v3 + 8);
    if (v2 != v3 + 8)
      memmove(v3, v3 + 8, v2 - (v3 + 8));
    *(_QWORD *)(v1 + 168) = &v3[v4];
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 352))(*(_QWORD *)(v1 + 96));
  }
  return result;
}

uint64_t ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_40(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *i;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(char **)(v1 + 160);
  *(_QWORD *)(v1 + 168) = v2;
  v3 = *(unsigned int *)(a1 + 48);
  if (v3 >= 8)
  {
    v5 = 0;
    v6 = v3 >> 3;
    do
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(v1 + 176);
      if ((unint64_t)v2 >= v8)
      {
        v9 = *(char **)(v1 + 160);
        v10 = (v2 - v9) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v12 = v8 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
          v15 = v14;
          v9 = *(char **)(v1 + 160);
          v2 = *(char **)(v1 + 168);
        }
        else
        {
          v15 = 0;
        }
        v16 = (_QWORD *)(v13 + 8 * v10);
        *v16 = *(_QWORD *)(v7 + 8 * v5);
        v17 = (char *)(v16 + 1);
        while (v2 != v9)
        {
          v18 = *((_QWORD *)v2 - 1);
          v2 -= 8;
          *--v16 = v18;
        }
        *(_QWORD *)(v1 + 160) = v16;
        *(_QWORD *)(v1 + 168) = v17;
        *(_QWORD *)(v1 + 176) = v13 + 8 * v15;
        if (v9)
          operator delete(v9);
        v2 = v17;
      }
      else
      {
        *(_QWORD *)v2 = *(_QWORD *)(v7 + 8 * v5);
        v2 += 8;
      }
      *(_QWORD *)(v1 + 168) = v2;
      ++v5;
    }
    while (v5 != v6);
  }
  std::__sort<std::__less<long long,long long> &,long long *>();
  v20 = *(uint64_t **)(v1 + 160);
  v19 = *(uint64_t **)(v1 + 168);
  if (v20 == v19)
  {
LABEL_31:
    if (v19 != v20)
      *(_QWORD *)(v1 + 168) = v20;
  }
  else
  {
    v21 = v20 + 1;
    while (v21 != v19)
    {
      v22 = v21 - 1;
      v23 = *(v21 - 1);
      v24 = *v21++;
      if (v23 == v24)
      {
        for (i = v22 + 2; i != v19; ++i)
        {
          v26 = v23;
          v23 = *i;
          if (v26 != *i)
          {
            v22[1] = v23;
            ++v22;
          }
        }
        v20 = v22 + 1;
        goto LABEL_31;
      }
    }
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 352))(*(_QWORD *)(v1 + 96));
}

__n128 __Block_byref_object_copy__8541(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN14HALS_IOContext20SetIOProcStreamUsageERK30AudioHardwareIOProcStreamUsagejb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 624))(*(_QWORD *)(v2 + 96), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 88), *(unsigned __int8 *)(a1 + 92));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 96)
                                                                                                 + 152))(*(_QWORD *)(v2 + 96));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 136))(*(_QWORD *)(v2 + 96), a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v5;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 144))(*(_QWORD *)(v2 + 96), a1 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)(v7 + 40) = result;
  *(_QWORD *)(v7 + 48) = v8;
  return result;
}

void __copy_helper_block_e8_80c34_ZTS13HALS_ReleaserI11HALS_ClientE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 80) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_80c34_ZTS13HALS_ReleaserI11HALS_ClientE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 80), a2);
}

uint64_t ___ZN14HALS_IOContext14SetStreamUsageERK26AudioIOContext_StreamUsagejb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 608))(*(_QWORD *)(v2 + 96), *(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 88), *(unsigned __int8 *)(a1 + 92));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 96)
                                                                                                 + 152))(*(_QWORD *)(v2 + 96));
  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 136))(*(_QWORD *)(v2 + 96), a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v5;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 96) + 144))(*(_QWORD *)(v2 + 96), a1 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)(v7 + 40) = result;
  *(_QWORD *)(v7 + 48) = v8;
  return result;
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 96) + 560))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96));
  **(_QWORD **)(a1 + 48) = result;
  return result;
}

void sub_1B5B1CE38(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v4[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 2003329396;
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 568))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(_QWORD *)(a1 + 40));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 712))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 48));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(uint64_t a1)
{
  **(float **)(a1 + 40) = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30(uint64_t a1)
{
  **(double **)(a1 + 40) = (*(double (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 704))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_32(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 96)
                                                                            + 696))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, *(unsigned __int8 *)(a1 + 60));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = (_DWORD *)a1[7];
  v5 = *(_DWORD *)(a1[8] + 4);
  v6 = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), v5 == 1768845428);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 272))(*(_QWORD *)(v2 + 96));
  v8 = (16 * v6) | 8;
  if (*(_DWORD *)(v3 + 24) < v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "HALS_IOContext.cpp";
      v15 = 1024;
      v16 = 2196;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  *v4 = v6;
  if (v6)
  {
    v9 = result;
    v10 = 0;
    v11 = v4 + 4;
    do
    {
      result = (*(uint64_t (**)(_QWORD, BOOL, uint64_t, int *))(**(_QWORD **)(v2 + 96) + 72))(*(_QWORD *)(v2 + 96), v5 == 1768845428, v10, &v13);
      *((_DWORD *)v11 - 2) = v18;
      *((_DWORD *)v11 - 1) = v17 * v9;
      *v11 = 0;
      v11 += 2;
      ++v10;
    }
    while (v6 != v10);
  }
  *(_DWORD *)(v3 + 24) = v8;
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  return result;
}

void sub_1B5B1D1B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5B1D0CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_35(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unsigned int *)(result + 56);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 40) + 160);
  v3 = (*(_QWORD *)(*(_QWORD *)(result + 40) + 168) - v2) >> 3;
  v4 = v3 >= v1 >> 3;
  v5 = v1 >> 3;
  if (!v4)
    v5 = (*(_QWORD *)(*(_QWORD *)(result + 40) + 168) - v2) >> 3;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v6 = 0;
    do
    {
      if (v3 == v6)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v6) = *(_QWORD *)(v2 + 8 * v6);
      ++v6;
    }
    while (v6 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24));
  }
  return result;
}

uint64_t ___ZNK14HALS_IOContext14GetStreamUsageER26AudioIOContext_StreamUsageRjb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 96) + 616))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 96), *(_QWORD *)(a1 + 56), **(unsigned int **)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5B1D2C4(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v4[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 2003329396;
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(a1[5] + 96) + 32))(*(_QWORD *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1B5B1D358(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(a1[5] + 96) + 32))(*(_QWORD *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1B5B1D3B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(a1[5] + 96) + 32))(*(_QWORD *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1B5B1D418(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(a1[5] + 96) + 32))(*(_QWORD *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1B5B1D478(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::default_delete<HALS_IOContext::OverloadReporter>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    std::default_delete<OverloadDescription>::operator()[abi:ne180100](v2);
  JUMPOUT(0x1B5E50688);
}

uint64_t *std::unique_ptr<HALS_IOContext::IntervalReporter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(v1 + 64), 0);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::default_delete<OverloadDescription>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698B850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698B850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::__on_zero_shared(uint64_t a1)
{
  HALS_IOContext_Legacy_Impl::~HALS_IOContext_Legacy_Impl((HALS_IOContext_Legacy_Impl *)(a1 + 24));
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698B800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698B800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::__on_zero_shared(uint64_t a1)
{
  HALS_IOContext_MCP_Impl::~HALS_IOContext_MCP_Impl((HALS_IOContext_MCP_Impl *)(a1 + 24));
}

uint64_t ___ZNK14HALS_IOContext16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5B1D74C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext20GetStreamInfoAtIndexEbjR25AudioIOContext_StreamInfo_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1B5B1D78C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E698B4A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698B4A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  _DWORD *result;
  uint64_t v8;
  _DWORD *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 112))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_IOContext.cpp";
      v12 = 1024;
      v13 = 351;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcID: only one IOProc at a time is supported", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v3 = operator new();
  *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_QWORD *)(v1 + 112) = v3;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 1);
  v5 = malloc_type_calloc(1uLL, (16 * v4) | 8u, 0xC517D68uLL);
  if (v5)
    *v5 = v4;
  *(_QWORD *)(v1 + 120) = v5;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 0);
  result = malloc_type_calloc(1uLL, (16 * v6) | 8u, 0xC517D68uLL);
  if (result)
    *result = v6;
  v8 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 128) = result;
  *(_QWORD *)(v1 + 136) = v8;
  **(_QWORD **)(a1 + 16) = v8;
  *(_QWORD *)(v1 + 144) = v8 + 1;
  return result;
}

void sub_1B5B1D9D0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B5B1D9D8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  HALS_IOProc *v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v4 = *(HALS_IOProc **)(v3 + 112);
    if (v4)
    {
      HALS_IOProc::~HALS_IOProc(v4);
      MEMORY[0x1B5E50688]();
    }
    *(_QWORD *)(v3 + 112) = 0;
    free(*(void **)(v3 + 120));
    *(_QWORD *)(v3 + 120) = 0;
    free(*(void **)(v3 + 128));
    *(_QWORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    **(_QWORD **)(v2 + 16) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B5B1DA34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5B1DA40(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B1DA48);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext30Server_Internal_CreateIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvES7_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E698B528;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698B528;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  int v6;
  _DWORD *v7;
  int v8;
  _DWORD *result;
  uint64_t v10;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 112))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_IOContext.cpp";
      v14 = 1024;
      v15 = 391;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock: only one IOProc at a time is supported", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v3 = operator new();
  v4 = *(NSObject **)(a1 + 24);
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = v5;
  *(_BYTE *)(v3 + 32) = 0;
  if (v4)
    dispatch_retain(v4);
  if (v5)
    *(_QWORD *)(v3 + 24) = _Block_copy(v5);
  *(_QWORD *)(v1 + 112) = v3;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 1);
  v7 = malloc_type_calloc(1uLL, (16 * v6) | 8u, 0xC517D68uLL);
  if (v7)
    *v7 = v6;
  *(_QWORD *)(v1 + 120) = v7;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 0);
  result = malloc_type_calloc(1uLL, (16 * v8) | 8u, 0xC517D68uLL);
  if (result)
    *result = v8;
  v10 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 128) = result;
  *(_QWORD *)(v1 + 136) = v10;
  **(_QWORD **)(a1 + 16) = v10;
  *(_QWORD *)(v1 + 144) = v10 + 1;
  return result;
}

void sub_1B5B1DCF0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  HALS_IOProc *v6;

  if (a2)
  {
    MEMORY[0x1B5E50688](v3, 0x10A0C406C73CFA5);
    __cxa_begin_catch(exception_object);
    v6 = *(HALS_IOProc **)(v4 + 112);
    if (v6)
    {
      HALS_IOProc::~HALS_IOProc(v6);
      MEMORY[0x1B5E50688]();
    }
    *(_QWORD *)(v4 + 112) = 0;
    free(*(void **)(v4 + 120));
    *(_QWORD *)(v4 + 120) = 0;
    free(*(void **)(v4 + 128));
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 136) = 0;
    **(_QWORD **)(v2 + 16) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5B1DD78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5B1DD84(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B1DD8CLL);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext39Server_Internal_CreateIOProcIDWithBlockEP16dispatch_queue_sU13block_pointerFvPK14AudioTimeStampPK15AudioBufferListS4_PS5_S4_EE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698B5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698B5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  HALS_IOProc *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 112) && *(_QWORD *)(v1 + 136) == *(_QWORD *)(a1 + 16))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 488))(*(_QWORD *)(v1 + 96));
    v2 = *(HALS_IOProc **)(v1 + 112);
    if (v2)
    {
      HALS_IOProc::~HALS_IOProc(v2);
      MEMORY[0x1B5E50688]();
    }
    *(_QWORD *)(v1 + 112) = 0;
    free(*(void **)(v1 + 120));
    *(_QWORD *)(v1 + 120) = 0;
    free(*(void **)(v1 + 128));
    *(_QWORD *)(v1 + 128) = 0;
    *(_QWORD *)(v1 + 136) = 0;
  }
}

void sub_1B5B1DED0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext31Server_Internal_DestroyIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E698B628;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698B628;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  _DWORD *result;
  _DWORD *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 112))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_IOContext.cpp";
      v11 = 1024;
      v12 = 459;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_AddIOProc: only one IOProc at a time is supported", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v3 = operator new();
  *(_OWORD *)v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_QWORD *)(v1 + 112) = v3;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 1);
  v5 = malloc_type_calloc(1uLL, (16 * v4) | 8u, 0xC517D68uLL);
  if (v5)
    *v5 = v4;
  *(_QWORD *)(v1 + 120) = v5;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 96) + 32))(*(_QWORD *)(v1 + 96), 0);
  result = malloc_type_calloc(1uLL, (16 * v6) | 8u, 0xC517D68uLL);
  if (result)
    *result = v6;
  *(_QWORD *)(v1 + 128) = result;
  *(_QWORD *)(v1 + 136) = *(_QWORD *)(a1 + 16);
  return result;
}

void sub_1B5B1E150(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B5B1E158(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  HALS_IOProc *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(HALS_IOProc **)(v2 + 112);
    if (v3)
    {
      HALS_IOProc::~HALS_IOProc(v3);
      MEMORY[0x1B5E50688]();
    }
    *(_QWORD *)(v2 + 112) = 0;
    free(*(void **)(v2 + 120));
    *(_QWORD *)(v2 + 120) = 0;
    free(*(void **)(v2 + 128));
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B5B1E1AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5B1E1B8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B1E1C0);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext25Server_Internal_AddIOProcEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvES7_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698B6A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698B6A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  HALS_IOProc *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 112) && *(_QWORD *)(v1 + 136) == *(_QWORD *)(a1 + 16))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 488))(*(_QWORD *)(v1 + 96));
    v2 = *(HALS_IOProc **)(v1 + 112);
    if (v2)
    {
      HALS_IOProc::~HALS_IOProc(v2);
      MEMORY[0x1B5E50688]();
    }
    *(_QWORD *)(v1 + 112) = 0;
    free(*(void **)(v1 + 120));
    *(_QWORD *)(v1 + 120) = 0;
    free(*(void **)(v1 + 128));
    *(_QWORD *)(v1 + 128) = 0;
    *(_QWORD *)(v1 + 136) = 0;
  }
}

void sub_1B5B1E304(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B1E2BCLL);
}

void sub_1B5B1E310(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext28Server_Internal_RemoveIOProcEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target_type()
{
}

UInt64 HALS_IOContext::Server_Internal_StartIOProcID(UInt64 this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  UInt64 v7;
  UInt64 mHostTime;
  UInt64 v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  _DWORD *exception;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  UInt64 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v7 = this;
  v22 = *MEMORY[0x1E0C80C00];
  if (a3 && (a4 & 8) != 0)
  {
    (*(void (**)(_QWORD, AudioTimeStamp *, uint64_t))(**(_QWORD **)(this + 96) + 472))(*(_QWORD *)(this + 96), a3, a4);
    mHostTime = a3->mHostTime;
    this = mach_absolute_time();
    if (mHostTime > this)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v9 = a3->mHostTime;
        v14 = 136315906;
        v15 = "HALS_IOContext.cpp";
        v16 = 1024;
        v17 = 524;
        v18 = 2048;
        v19 = v9;
        v20 = 2048;
        v21 = mach_absolute_time();
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: Attempting to start in the past with a start time that is in the future. Requested time: %llu  Current time: %llu", (uint8_t *)&v14, 0x26u);
      }
      this = mach_absolute_time();
      a3->mHostTime = this;
    }
    if ((a3->mFlags & 2) == 0)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      v14 = 136315394;
      v15 = "HALS_IOContext.cpp";
      v16 = 1024;
      v17 = 531;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: Invalid start time";
      goto LABEL_18;
    }
  }
  if (a2)
  {
    v10 = *(_QWORD *)(v7 + 112);
    if (v10)
    {
      if (*(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v7 + 136) == a2)
      {
        if (*(_BYTE *)(v10 + 32))
          return this;
        return (*(uint64_t (**)(_QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(_QWORD **)(v7 + 96) + 480))(*(_QWORD *)(v7 + 96), a2, a3, a4);
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_19:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      v14 = 136315394;
      v15 = "HALS_IOContext.cpp";
      v16 = 1024;
      v17 = 537;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: failed to start because the IOProcID wasn't nullpt"
            "r or wasn't registered";
LABEL_18:
      _os_log_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v14, 0x12u);
      goto LABEL_19;
    }
  }
  return (*(uint64_t (**)(_QWORD, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(_QWORD **)(v7 + 96) + 480))(*(_QWORD *)(v7 + 96), a2, a3, a4);
}

void sub_1B5B1E5BC()
{
  __break(1u);
}

void sub_1B5B1E61C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5B1E628(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B1E630);
  __clang_call_terminate(a1);
}

uint64_t ___ZN14HALS_IOContext12PowerChangedEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 496))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(unsigned int *)(a1 + 40));
}

void sub_1B5B1E66C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN14HALS_IOContext16PowerHintChangedEj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 96) + 504))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96), *(unsigned int *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5B1E6B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN14HALS_IOContext24SleepingIsAllowedChangedEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 512))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 40));
}

void HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(HALS_IOContext::OverloadReporter *this)
{
  BOOL v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  caulk::concurrent::messenger *v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::string v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  std::string __p;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::string v66[8];

  if (*(_BYTE *)this)
  {
    if (g_static_start_options == 1)
      goto LABEL_19;
    goto LABEL_8;
  }
  if (*((_BYTE *)this + 1))
    v2 = g_static_start_options == 1;
  else
    v2 = 1;
  if (!v2)
  {
LABEL_8:
    v3 = (__int128 *)*((_QWORD *)this + 1);
    v29 = v3[2];
    v30 = v3[3];
    v31 = *((_QWORD *)v3 + 8);
    v27 = *v3;
    v28 = v3[1];
    if (*((char *)v3 + 95) < 0)
      std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
    else
      v32 = *(std::string *)((_BYTE *)v3 + 3);
    v4 = v3[15];
    v41 = v3[14];
    v42 = v4;
    v43 = v3[16];
    v5 = v3[11];
    v37 = v3[10];
    v38 = v5;
    v6 = v3[13];
    v39 = v3[12];
    v40 = v6;
    v7 = v3[7];
    v33 = v3[6];
    v34 = v7;
    v8 = v3[9];
    v35 = v3[8];
    v36 = v8;
    v46 = v29;
    v47 = v30;
    v48 = v31;
    v44 = v27;
    v45 = v28;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v32.__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      v58 = v41;
      v59 = v42;
      v60 = v43;
      v54 = v37;
      v55 = v38;
      v56 = v39;
      v57 = v40;
      v50 = v33;
      v51 = v34;
      v52 = v35;
      v53 = v36;
      operator delete(v14);
    }
    else
    {
      __p = v32;
      v9 = v3[15];
      v58 = v3[14];
      v59 = v9;
      v60 = v3[16];
      v10 = v3[11];
      v54 = v3[10];
      v55 = v10;
      v11 = v3[13];
      v56 = v3[12];
      v57 = v11;
      v12 = v3[7];
      v50 = v3[6];
      v51 = v12;
      v13 = v3[9];
      v52 = v3[8];
      v53 = v13;
    }
    v15 = (caulk::concurrent::messenger *)*((_QWORD *)this + 2);
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 296, 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = off_1E698B780;
    *(_QWORD *)(v16 + 8) = 0;
    v63 = v46;
    v64 = v47;
    v65 = v48;
    v61 = v44;
    v62 = v45;
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v66[0] = __p;
    v18 = v61;
    *(_OWORD *)(v16 + 40) = v62;
    v19 = v64;
    *(_OWORD *)(v16 + 56) = v63;
    *(_OWORD *)(v16 + 72) = v19;
    *(_QWORD *)(v16 + 88) = v65;
    *(_OWORD *)(v16 + 24) = v18;
    *(std::string *)(v16 + 96) = v66[0];
    v20 = v50;
    v21 = v51;
    v22 = v53;
    *(_OWORD *)(v16 + 152) = v52;
    *(_OWORD *)(v16 + 136) = v21;
    *(_OWORD *)(v16 + 120) = v20;
    v23 = v57;
    *(_OWORD *)(v16 + 216) = v56;
    v24 = v54;
    *(_OWORD *)(v16 + 200) = v55;
    *(_OWORD *)(v16 + 184) = v24;
    *(_OWORD *)(v16 + 168) = v22;
    v25 = v58;
    v26 = v60;
    *(_OWORD *)(v16 + 264) = v59;
    *(_OWORD *)(v16 + 280) = v26;
    *(_OWORD *)(v16 + 248) = v25;
    *(_OWORD *)(v16 + 232) = v23;
    *(_QWORD *)v16 = off_1E698B728;
    caulk::concurrent::messenger::enqueue(v15, (caulk::concurrent::message *)v16);
    if (v17 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_19:
  *(_WORD *)this = 0;
}

void sub_1B5B1E9B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  caulk::concurrent::message *v57;

  caulk::concurrent::message::~message(v57);
  operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B1E994);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::~rt_message_call(void **this)
{
  *this = off_1E698B780;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
}

{
  *this = off_1E698B780;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
  JUMPOUT(0x1B5E50688);
}

uint64_t *caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::perform(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  HALS_OverloadMessage::perform((HALS_OverloadMessage *)(a1 + 24));
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B1EABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::rt_cleanup::~rt_cleanup((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::rt_cleanup::~rt_cleanup(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)v2 = off_1E698B780;
  if (*(char *)(v2 + 119) < 0)
    operator delete(*(void **)(v2 + 96));
  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 296, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::~message_call(void **this)
{
  *this = off_1E698B780;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
}

{
  *this = off_1E698B780;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::perform(uint64_t a1)
{
  HALS_OverloadMessage::perform((HALS_OverloadMessage *)(a1 + 24));
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::perform(uint64_t a1)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  void **v8;
  uint64_t v9;
  _OWORD *v10;
  void **v11;
  uint64_t v12;
  _OWORD *v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  void **v19;
  uint64_t v20;
  _OWORD *v21;
  void **v22;
  uint64_t v23;
  _OWORD *v24;
  void **v25;
  _OWORD *v26;
  void **v27;
  uint64_t *v28;
  uint64_t *v29;
  const void *v30;
  uint64_t *v31;
  uint64_t v32;
  caulk::concurrent::message *v34;
  void *__p[2];
  char v36;
  std::string v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  void **v43;

  v34 = (caulk::concurrent::message *)a1;
  v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 88));
  if (v3)
  {
    HALS_IOContext::GetIssueReporters((HALS_IOContext *)&v41, (uint64_t)v3);
    v39 = 0;
    v40 = 0;
    v38 = (uint64_t *)&v39;
    if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a1 + 40);
      v6 = __udivti3();
      std::to_string(&v37, v6);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartBegin_UptimeNs");
      v43 = __p;
      v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v8 = (void **)v7 + 7;
      if (*((char *)v7 + 79) < 0)
        operator delete(*v8);
      *(std::string *)v8 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      v9 = __udivti3();
      std::to_string(&v37, v9);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartEnd_UptimeNs");
      v43 = __p;
      v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v11 = (void **)v10 + 7;
      if (*((char *)v10 + 79) < 0)
        operator delete(*v11);
      *(std::string *)v11 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      v12 = __udivti3();
      if (v5 < v4)
        v12 = -v12;
      std::to_string(&v37, v12);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartDuration_Ns");
      v43 = __p;
      v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v14 = (void **)v13 + 7;
      if (*((char *)v13 + 79) < 0)
        operator delete(*v14);
      *(std::string *)v14 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 80))
    {
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 72);
      v17 = __udivti3();
      std::to_string(&v37, v17);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentBegin_UptimeNs");
      v43 = __p;
      v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v19 = (void **)v18 + 7;
      if (*((char *)v18 + 79) < 0)
        operator delete(*v19);
      *(std::string *)v19 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      v20 = __udivti3();
      std::to_string(&v37, v20);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentEnd_UptimeNs");
      v43 = __p;
      v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v22 = (void **)v21 + 7;
      if (*((char *)v21 + 79) < 0)
        operator delete(*v22);
      *(std::string *)v22 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      v23 = __udivti3();
      if (v16 < v15)
        v23 = -v23;
      std::to_string(&v37, v23);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentDuration_Ns");
      v43 = __p;
      v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v25 = (void **)v24 + 7;
      if (*((char *)v24 + 79) < 0)
        operator delete(*v25);
      *(std::string *)v25 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    if (v40)
    {
      std::to_string(&v37, 1);
      std::string::basic_string[abi:ne180100]<0>(__p, "AudioAnalyticsRetainMessage");
      v43 = __p;
      v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      v27 = (void **)v26 + 7;
      if (*((char *)v26 + 79) < 0)
        operator delete(*v27);
      *(std::string *)v27 = v37;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&v37, (const UInt8 **)&v38);
      v28 = v41;
      v29 = v42;
      v30 = (const void *)v37.__r_.__value_.__r.__words[0];
      if (v41 != v42)
      {
        v31 = v41;
        do
        {
          v32 = *v31;
          if (AudioStatisticsLibraryLoader(void)::once != -1)
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_5402);
          if (AudioStatisticsLibraryLoader(void)::libSym)
            AudioStatisticsLibraryLoader(void)::libSym(v32, v30, 536870919, 5);
          ++v31;
        }
        while (v31 != v29);
      }
      if (v30)
        CFRelease(v30);
    }
    else
    {
      v28 = v41;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v39);
    if (v28)
      operator delete(v28);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup(&v34);
}

void sub_1B5B1F190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,_QWORD *a23,uint64_t a24,void *a25)
{
  HALS_ObjectMap *v25;
  HALS_Object *v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23);
  if (a25)
    operator delete(a25);
  HALS_ObjectMap::ReleaseObject(v25, v27);
  caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 96, 8);
  return a1;
}

void HALS_IOContext::RemoveTap(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = a2;
  v9 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 744))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5B1F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContext::SignalOverloadToClient(std::__shared_weak_count **this)
{
  AMCP::Log::Scope_Registry *v2;
  _QWORD *v3;
  int v4;
  caulk::concurrent::messenger *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  HALS_PlatformBehaviors *v12;
  uint64_t *platform_behaviors;
  std::__shared_weak_count *v14;
  HALS_NotificationManager *v15;
  AMCP::Log::Scope_Registry *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  caulk::concurrent::messenger *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  AMCP::Log::Scope_Registry *v33;
  int v34;
  caulk::concurrent::messenger *v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  caulk::concurrent::messenger *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;

  v2 = AMCP::Utility::configure_syscall_mask_for_normal_priority((AMCP::Utility *)this);
  v3 = (_QWORD *)MEMORY[0x1E0DDB688];
  if ((_DWORD)v2)
  {
    v4 = (int)v2;
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v51, "com.apple.coreaudio", "AMCP");
    v5 = *(caulk::concurrent::messenger **)(v51 + 8);
    v6 = pthread_self();
    v7 = pthread_mach_thread_np(v6);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 20) = 16;
    *(_DWORD *)(v8 + 24) = v7;
    *(_QWORD *)(v8 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v8 + 40) = 1681;
    *(_DWORD *)(v8 + 44) = v4;
    *(_QWORD *)v8 = &off_1E698B8A0;
    *(_QWORD *)(v8 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v5, (caulk::concurrent::message *)v8);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = (HALS_PlatformBehaviors *)((uint64_t (*)(std::__shared_weak_count **))(*this)[8].__shared_owners_)(this);
  if (!(_DWORD)v12
    || (platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v12),
        v14 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors),
        (v14 & 1) != 0))
  {
    v15 = (HALS_NotificationManager *)*((unsigned int *)this + 18);
    if (!(_DWORD)v15)
      v15 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    *(_QWORD *)&v51 = 0x676C6F626F766572;
    DWORD2(v51) = 0;
    HALS_Object::PropertiesChanged_Sync((HALS_Object *)this, v15, 0, 1u, (const AudioObjectPropertyAddress *)&v51);
    goto LABEL_37;
  }
  v17 = this[11];
  if (!v17)
  {
    v51 = 0uLL;
    goto LABEL_19;
  }
  v18 = this[10];
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  *(_QWORD *)&v51 = 0;
  v14 = std::__shared_weak_count::lock(v17);
  *((_QWORD *)&v51 + 1) = v14;
  if (!v14 || (*(_QWORD *)&v51 = v18) == 0)
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v49, "com.apple.coreaudio", "AMCP");
    v21 = *(caulk::concurrent::messenger **)(v49 + 8);
    v22 = pthread_self();
    v23 = pthread_mach_thread_np(v22);
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v24 + 16) = 0;
    *(_BYTE *)(v24 + 20) = 16;
    *(_DWORD *)(v24 + 24) = v23;
    *(_QWORD *)(v24 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v24 + 40) = 1689;
    *(_QWORD *)v24 = &off_1E698B8F8;
    *(_QWORD *)(v24 + 8) = 0;
    v16 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v24);
    v25 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v18 = (std::__shared_weak_count *)v51;
    if (!(_QWORD)v51)
      goto LABEL_30;
  }
  v16 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v18->__vftable[2].~__shared_weak_count)(v18);
  v28 = (int)v16;
  if ((_DWORD)v16)
    v29 = (_DWORD)v16 == 268451843;
  else
    v29 = 1;
  if (!v29)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v49, "com.apple.coreaudio", "AMCP");
    v42 = *(caulk::concurrent::messenger **)(v49 + 8);
    v43 = pthread_self();
    v44 = pthread_mach_thread_np(v43);
    v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v45 + 16) = 0;
    *(_BYTE *)(v45 + 20) = 16;
    *(_DWORD *)(v45 + 24) = v44;
    *(_QWORD *)(v45 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v45 + 40) = 1695;
    *(_DWORD *)(v45 + 44) = v28;
    *(_QWORD *)v45 = &off_1E698B950;
    *(_QWORD *)(v45 + 8) = 0;
    v16 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v42, (caulk::concurrent::message *)v45);
    v46 = v50;
    if (v50)
    {
      v47 = (unint64_t *)&v50->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
LABEL_30:
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
LABEL_37:
  v33 = AMCP::Utility::configure_syscall_mask_for_realtime_priority(v16);
  if ((_DWORD)v33)
  {
    v34 = (int)v33;
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v51, "com.apple.coreaudio", "AMCP");
    v35 = *(caulk::concurrent::messenger **)(v51 + 8);
    v36 = pthread_self();
    v37 = pthread_mach_thread_np(v36);
    v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v38 + 16) = 0;
    *(_BYTE *)(v38 + 20) = 16;
    *(_DWORD *)(v38 + 24) = v37;
    *(_QWORD *)(v38 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v38 + 40) = 1709;
    *(_DWORD *)(v38 + 44) = v34;
    *(_QWORD *)v38 = &off_1E698B9A8;
    *(_QWORD *)(v38 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v35, (caulk::concurrent::message *)v38);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void sub_1B5B1F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient - Failed to set the syscall mask back to realtime priority: %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient: failed to receive the client message for overload notification, Error: 0x%X", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient: no client connection", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient - Failed to set the syscall mask to normal priority: %d", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t HALS_IOContext::WaitForClientToBeginTransport(HALS_IOContext *this)
{
  HALS_PlatformBehaviors *v2;
  uint64_t *platform_behaviors;
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  int v7;
  int v8;
  AMCP::Log::Scope_Registry *v9;
  int v10;
  int v11;
  caulk::concurrent::messenger *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t (**v21)();
  HALS_IOContext *v22;
  int *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 200))(this);
  if (!(_DWORD)v2)
    return 1;
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v2);
  if (((*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors) & 1) != 0)
    return 1;
  v20 = 0;
  do
  {
    v4 = *((_QWORD *)this + 12);
    v21 = &off_1E698BA00;
    v22 = this;
    v23 = &v20;
    v24 = &v21;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v4 + 320))(v4, &v21);
    v5 = v24;
    if (v24 == &v21)
    {
      v5 = &v21;
      v6 = 4;
    }
    else
    {
      if (!v24)
        goto LABEL_9;
      v6 = 5;
    }
    (*v5)[v6]();
LABEL_9:
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 344))(*((_QWORD *)this + 12));
    if (v20 == 268451843)
      v8 = v7;
    else
      v8 = 1;
  }
  while (v8 != 1);
  v9 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 344))(*((_QWORD *)this + 12));
  v10 = v20;
  if (v20)
    v11 = (int)v9;
  else
    v11 = 1;
  if (v11 == 1)
    return 1;
  AMCP::Log::Scope_Registry::get(v9);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
  v13 = (caulk::concurrent::messenger *)v21[1];
  v14 = pthread_self();
  v15 = pthread_mach_thread_np(v14);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v16 + 16) = 0;
  *(_BYTE *)(v16 + 20) = 16;
  *(_DWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v16 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v16 + 40) = 1737;
  *(_DWORD *)(v16 + 44) = v10;
  *(_QWORD *)v16 = &off_1E698BAD8;
  *(_QWORD *)(v16 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v13, (caulk::concurrent::message *)v16);
  v17 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v18 = (unint64_t *)((char *)v22 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return 0;
}

void sub_1B5B20098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::IOWorkLoop: did not receive the first poke from the client, Error: 0x%X", buf, 0x1Eu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::operator()(std::__shared_weak_count *a1)
{
  uint64_t shared_owners;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  caulk::concurrent::messenger *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  shared_owners = a1->__shared_owners_;
  v2 = *(std::__shared_weak_count **)(shared_owners + 88);
  if (v2)
  {
    v3 = a1;
    v4 = *(_QWORD *)(shared_owners + 80);
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    a1 = std::__shared_weak_count::lock(v2);
    v7 = a1;
    if (a1 && v4)
    {
      *(_DWORD *)v3->__shared_weak_owners_ = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
LABEL_14:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_18;
    }
  }
  else
  {
    v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
  v8 = *(caulk::concurrent::messenger **)(v17 + 8);
  v9 = pthread_self();
  v10 = pthread_mach_thread_np(v9);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 16;
  *(_DWORD *)(v11 + 24) = v10;
  *(_QWORD *)(v11 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v11 + 40) = 1726;
  *(_QWORD *)v11 = &off_1E698BA70;
  *(_QWORD *)(v11 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v11);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
    goto LABEL_14;
LABEL_18:
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1B5B20494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext29WaitForClientToBeginTransportEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::PerformIO: no client connection", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t HALS_IOContext::CallClientIOProc(HALS_IOContext *this, int a2, int a3, int a4)
{
  int v7;
  HALS_PlatformBehaviors *v8;
  uint64_t *platform_behaviors;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  __int128 *v50;
  int v51;
  caulk::concurrent::messenger *v52;
  uint64_t v53;
  unsigned int v55;
  int v56;
  _QWORD block[10];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[4];
  _OWORD v63[4];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v56 = a2;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 48))(*((_QWORD *)this + 12), 0);
  v8 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 200))(this);
  if ((_DWORD)v8
    && (platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v8),
        ((*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors) & 1) == 0))
  {
    if (!a4)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 256))(*((_QWORD *)this + 12));
      kdebug_trace();
      v40 = *((_QWORD *)this + 12);
      v41 = operator new(0x28uLL);
      *v41 = &off_1E698BB30;
      v41[1] = this;
      v41[2] = &v56;
      *((_BYTE *)v41 + 24) = v7 != 0;
      v41[4] = &v55;
      *((_QWORD *)&v59 + 1) = v41;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v40 + 320))(v40, &v58);
      v42 = (__int128 *)*((_QWORD *)&v59 + 1);
      if (*((__int128 **)&v59 + 1) == &v58)
      {
        v43 = 4;
        v42 = &v58;
      }
      else
      {
        if (!*((_QWORD *)&v59 + 1))
          goto LABEL_30;
        v43 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_30:
      if (!v7)
        return v55;
      goto LABEL_31;
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 14);
    if (v10 && *(_BYTE *)(v10 + 32) && (a4 & 1) == 0)
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), 1);
      **((_DWORD **)this + 15) = v11;
      if (v11)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          (*(void (**)(_QWORD, uint64_t, unint64_t, __int128 *))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12), 1, v13, &v58);
          v14 = (unsigned int **)((char *)this + 120);
          v15 = *((_QWORD *)this + 15) + v12 * 4;
          *(_DWORD *)(v15 + 8) = HIDWORD(v60);
          v16 = DWORD2(v60) * a3;
          if (DWORD2(v59) != 1819304813)
            v16 = v60;
          *(_DWORD *)(v15 + 12) = v16;
          v17 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**((_QWORD **)this + 12) + 280))(*((_QWORD *)this + 12), 1, v13);
          v18 = *v14;
          *(_QWORD *)&(*v14)[v12 + 4] = v17;
          ++v13;
          v12 += 4;
        }
        while (v13 < *v18);
      }
      v19 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), 0);
      **((_DWORD **)this + 16) = v19;
      if (v19)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD, unint64_t, __int128 *))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12), 0, v21, &v58);
          v22 = (unsigned int **)((char *)this + 128);
          v23 = *((_QWORD *)this + 16) + v20 * 4;
          *(_DWORD *)(v23 + 8) = HIDWORD(v60);
          v24 = DWORD2(v60) * a3;
          if (DWORD2(v59) != 1819304813)
            v24 = v60;
          *(_DWORD *)(v23 + 12) = v24;
          v25 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**((_QWORD **)this + 12) + 280))(*((_QWORD *)this + 12), 0, v21);
          v26 = *v22;
          *(_QWORD *)&(*v22)[v20 + 4] = v25;
          ++v21;
          v20 += 4;
        }
        while (v21 < *v26);
      }
      v27 = (__int128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 256))(*((_QWORD *)this + 12));
      v28 = *v27;
      v29 = v27[1];
      v30 = v27[2];
      v61 = v27[3];
      v59 = v29;
      v60 = v30;
      v58 = v28;
      v31 = v27[4];
      v32 = v27[5];
      v33 = v27[7];
      v62[2] = v27[6];
      v62[3] = v33;
      v62[0] = v31;
      v62[1] = v32;
      v34 = v27[8];
      v35 = v27[9];
      v36 = v27[11];
      v63[2] = v27[10];
      v63[3] = v36;
      v63[0] = v34;
      v63[1] = v35;
      kdebug_trace();
      v38 = *((_QWORD *)this + 14);
      v37 = *((_QWORD *)this + 15);
      v39 = *((_QWORD *)this + 16);
      if (*(_QWORD *)v38)
      {
        (*(void (**)(_QWORD, __int128 *, uint64_t, _OWORD *, uint64_t, _OWORD *, _QWORD))v38)(*((unsigned int *)this + 18), &v58, v37, v62, v39, v63, *(_QWORD *)(v38 + 8));
      }
      else
      {
        v44 = *(_QWORD *)(v38 + 24);
        if (v44)
        {
          v45 = *(NSObject **)(v38 + 16);
          if (v45)
          {
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = ___ZN11HALS_IOProc4CallEjPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2__block_invoke;
            block[3] = &__block_descriptor_tmp_13120;
            block[4] = v38;
            block[5] = &v58;
            block[6] = v37;
            block[7] = v62;
            block[8] = v39;
            block[9] = v63;
            dispatch_sync(v45, block);
          }
          else
          {
            (*(void (**)(uint64_t, __int128 *, uint64_t, _OWORD *, uint64_t, _OWORD *))(v44 + 16))(v44, &v58, v37, v62, v39, v63);
          }
        }
      }
      kdebug_trace();
      goto LABEL_30;
    }
  }
  if (!v7)
    return v55;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12));
LABEL_31:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 248))(*((_QWORD *)this + 12)))
  {
    kdebug_trace();
    *((_QWORD *)this + 26) = 0;
    ++*((_QWORD *)this + 25);
    v46 = *((_QWORD *)this + 24);
    if (!*(_BYTE *)(v46 + 40))
    {
      *(_QWORD *)(v46 + 32) = mach_absolute_time();
      *(_BYTE *)(v46 + 40) = 1;
    }
  }
  else
  {
    v47 = *((_QWORD *)this + 26) + 1;
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = v47;
    v48 = *((_QWORD *)this + 24);
    if (!*(_BYTE *)(v48 + 56))
    {
      v49 = *(_BYTE *)(v48 + 40) == 0;
      *(_QWORD *)(v48 + 48) = mach_absolute_time();
      *(_BYTE *)(v48 + 56) = 1;
      if (v49)
      {
        *(_QWORD *)(v48 + 32) = *(_QWORD *)(v48 + 48);
        *(_BYTE *)(v48 + 40) = *(_BYTE *)(v48 + 56);
      }
      v50 = (__int128 *)*((_QWORD *)this + 24);
      v51 = *((_DWORD *)this + 4);
      v58 = *v50;
      v59 = v50[1];
      v60 = v50[2];
      v61 = v50[3];
      v52 = (caulk::concurrent::messenger *)*((_QWORD *)v50 + 8);
      v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 96, 8);
      *(_QWORD *)(v53 + 8) = 0;
      *(_DWORD *)(v53 + 16) = 0;
      *(_OWORD *)(v53 + 24) = v58;
      *(_OWORD *)(v53 + 40) = v59;
      *(_OWORD *)(v53 + 56) = v60;
      *(_OWORD *)(v53 + 72) = v61;
      *(_DWORD *)(v53 + 88) = v51;
      *(_QWORD *)v53 = &off_1E698B7A8;
      caulk::concurrent::messenger::enqueue(v52, (caulk::concurrent::message *)v53);
    }
  }
  return v55;
}

void sub_1B5B20C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v24;
  char *v26;
  uint64_t v27;

  v26 = a24;
  if (a24 == v24)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E698BB30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698BB30;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::operator()(std::__shared_weak_count *a1)
{
  uint64_t shared_owners;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  __int16 v9;
  char v10;
  caulk::concurrent::messenger *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  caulk::concurrent::messenger *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  caulk::concurrent::messenger *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  shared_owners = a1->__shared_owners_;
  v2 = *(std::__shared_weak_count **)(shared_owners + 88);
  if (v2)
  {
    v3 = a1;
    v4 = *(_QWORD *)(shared_owners + 80);
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    a1 = std::__shared_weak_count::lock(v2);
    v7 = a1;
    if (a1 && v4)
    {
      v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 88))(v4, *(unsigned int *)v3->__shared_weak_owners_, LOBYTE(v3[1].__vftable));
      v10 = v9;
      if ((_DWORD)v8)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(shared_owners + 96) + 224))(*(_QWORD *)(shared_owners + 96));
      }
      else if ((v9 & 0x100) != 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v37, "com.apple.coreaudio", "AMCP");
        v28 = *(caulk::concurrent::messenger **)(v37 + 8);
        v29 = pthread_self();
        v30 = pthread_mach_thread_np(v29);
        v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v31 + 16) = 0;
        *(_BYTE *)(v31 + 20) = 2;
        *(_DWORD *)(v31 + 24) = v30;
        *(_QWORD *)(v31 + 32) = "HALS_IOContext.cpp";
        *(_DWORD *)(v31 + 40) = 1779;
        *(_QWORD *)v31 = &off_1E698BBF8;
        *(_QWORD *)(v31 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v28, (caulk::concurrent::message *)v31);
        v32 = v38;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        *(_DWORD *)v3[1].__shared_owners_ = 1;
      }
      else
      {
        v18 = HIDWORD(v8);
        if (HIDWORD(v8))
          v19 = *(_DWORD *)v3->__shared_weak_owners_ == HIDWORD(v8);
        else
          v19 = 1;
        if (!v19)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v37, "com.apple.coreaudio", "AMCP");
          v20 = *(caulk::concurrent::messenger **)(v37 + 8);
          v21 = pthread_self();
          v22 = pthread_mach_thread_np(v21);
          v23 = *(_DWORD *)v3->__shared_weak_owners_;
          v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
          *(_DWORD *)(v24 + 16) = 0;
          *(_BYTE *)(v24 + 20) = 2;
          *(_DWORD *)(v24 + 24) = v22;
          *(_QWORD *)(v24 + 32) = "HALS_IOContext.cpp";
          *(_DWORD *)(v24 + 40) = 1784;
          *(_DWORD *)(v24 + 44) = v18;
          *(_DWORD *)(v24 + 48) = v23 + 1;
          *(_QWORD *)v24 = &off_1E698BC50;
          *(_QWORD *)(v24 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v24);
          v25 = v38;
          if (v38)
          {
            v26 = (unint64_t *)&v38->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(shared_owners + 96) + 800))(*(_QWORD *)(shared_owners + 96), v10 & 1);
      goto LABEL_32;
    }
  }
  else
  {
    v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v37, "com.apple.coreaudio", "AMCP");
  v11 = *(caulk::concurrent::messenger **)(v37 + 8);
  v12 = pthread_self();
  v13 = pthread_mach_thread_np(v12);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v14 + 16) = 0;
  *(_BYTE *)(v14 + 20) = 16;
  *(_DWORD *)(v14 + 24) = v13;
  *(_QWORD *)(v14 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v14 + 40) = 1767;
  *(_QWORD *)v14 = &off_1E698BBA0;
  *(_QWORD *)(v14 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v14);
  v15 = v38;
  if (v38)
  {
    v16 = (unint64_t *)&v38->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(shared_owners + 96) + 224))(*(_QWORD *)(shared_owners + 96));
LABEL_32:
  kdebug_trace();
  if (v7)
  {
    v35 = (unint64_t *)&v7->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_1B5B2112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext16CallClientIOProcEjjbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0>,void ()(void)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::CallClientIOProc: received an out of order message (got %d want: %d)", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::CallClientIOProc: client io proc is stopping", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext::PerformIO: no client connection", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void HALS_IOContext::GetIssueReporters(HALS_IOContext *this, uint64_t a2)
{
  HALB_Mutex *v3;
  uint64_t *v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __n128 (*v9)(_QWORD *, uint64_t);
  void (*v10)(uint64_t);
  void *__p;
  void *v12;
  uint64_t v13;

  v6 = 0;
  v7 = &v6;
  v8 = 0x4002000000;
  v9 = __Block_byref_object_copy__49;
  v10 = __Block_byref_object_dispose__50;
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOContext17GetIssueReportersEv_block_invoke;
  v5[3] = &unk_1E698B410;
  v5[4] = &v6;
  v5[5] = a2;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  v4 = v7;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, (const void *)v4[5], v4[6], (v4[6] - v4[5]) >> 3);
  _Block_object_dispose(&v6, 8);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_1B5B2184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__49(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__52(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__53(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 40);
}

void ___ZNK14HALS_IOContext12GetDeviceSetEv_block_invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10[15];
  __int16 v11;

  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v11 = 1;
  do
  {
    v5 = v2;
    v6 = *((unsigned __int8 *)&v11 + v3);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 96) + 32))(*(_QWORD *)(v4 + 96), *((unsigned __int8 *)&v11 + v3));
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      do
      {
        (*(void (**)(_QWORD, BOOL, uint64_t, unsigned int *))(**(_QWORD **)(v4 + 96) + 72))(*(_QWORD *)(v4 + 96), v6 != 0, v9, v10);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, v10[0], v10[0]);
        v9 = (v9 + 1);
      }
      while (v8 != (_DWORD)v9);
    }
    v2 = 1;
    v3 = 1;
  }
  while ((v5 & 1) == 0);
}

BOOL HALS_IOContext::IncludesDevice(HALS_IOContext *this, int a2)
{
  _BOOL8 v4;
  HALB_Mutex *v5;
  _QWORD v7[6];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 720))(*((_QWORD *)this + 12)) == a2)
    return 1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOContext14IncludesDeviceEj_block_invoke;
  v7[3] = &unk_1E698B460;
  v8 = a2;
  v7[4] = &v9;
  v7[5] = this;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v7);
  v4 = *((_BYTE *)v10 + 24) != 0;
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5B21A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext14IncludesDeviceEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  _DWORD v6[14];

  v2 = *(_QWORD *)(a1 + 40);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), 0);
  if ((_DWORD)result)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(**(_QWORD **)(v2 + 96) + 72))(*(_QWORD *)(v2 + 96), 0, v5, v6);
      if (v6[0] == *(_DWORD *)(a1 + 48))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v5 = (v5 + 1);
    }
    while (v4 != (_DWORD)v5);
  }
  return result;
}

void DSP_Host_PropertySet::getHostedDSPPropertyInfo(DSP_Host_PropertySet *this, const AudioObjectPropertyAddress *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  void (**v13)();
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  void **v19;

  if (!(*(unsigned int (**)(const AudioObjectPropertyAddress *, _DWORD *))(*(_QWORD *)&a2->mSelector + 24))(a2, a3))goto LABEL_16;
  (*(void (**)(void (***__return_ptr)(), const AudioObjectPropertyAddress *))(*(_QWORD *)&a2->mSelector + 16))(&v13, a2);
  v6 = v15;
  v12 = (_QWORD *)v16;
  v18 = v16;
  v15 = 0;
  v16 = 0uLL;
  v17 = v6;
  v13 = (void (**)())&off_1E699E778;
  v19 = (void **)&v15;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v13 = off_1E699E7B8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  if (v6 != v12)
  {
    while (1)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_BYTE *)(v7 + 44) ? *(_DWORD *)(v7 + 40) : 0;
        if (v8 == *a3)
          break;
      }
      v6 += 2;
      if (v6 == v12)
        goto LABEL_15;
    }
  }
  if (v12 == v6)
  {
LABEL_15:
    v13 = (void (**)())&v17;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
LABEL_16:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  *(_QWORD *)this = *v6;
  v9 = v6[1];
  *((_QWORD *)this + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = (void (**)())&v17;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

uint64_t DSP_Host_PropertySet::getHostedDSPPropertyDataType(AudioObjectPropertyAddress *this, AudioObjectPropertyAddress *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  DSP_Host_PropertySet::getHostedDSPPropertyInfo((DSP_Host_PropertySet *)&v7, this, a2);
  if (v7 && *(_BYTE *)(v7 + 140))
    v2 = *(unsigned int *)(v7 + 136);
  else
    v2 = 1;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_stream_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v34, 1919246700, 0, 0, 0, &AMCP::Property_Traits<1919246700u>::k_valid_scopes, (uint64_t)"N4AMCP3DAL16Ring_Buffer_BaseE", 0, 0, 15);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x4E0uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1248;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v35, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 312;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr
                        + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5B22418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1248;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

uint64_t HALB_Info::IsStandardClass(HALB_Info *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 0;
  if (v1 <= 1768907635)
  {
    if (v1 <= 1651273578)
    {
      if (v1 > 1634757734)
      {
        if (v1 > 1634957682)
        {
          if (v1 == 1634957683 || v1 == 1635017576)
            return 1;
          v3 = 1650602615;
        }
        else
        {
          if (v1 == 1634757735 || v1 == 1634956402)
            return 1;
          v3 = 1634956642;
        }
      }
      else if (v1 > 1633907819)
      {
        if (v1 == 1633907820 || v1 == 1633969526)
          return 1;
        v3 = 1634689642;
      }
      else
      {
        if (v1 == 1633773415 || v1 == 1633841016)
          return 1;
        v3 = 1633905771;
      }
    }
    else if (v1 <= 1685287522)
    {
      if (v1 > 1668050547)
      {
        if (v1 == 1668050548 || v1 == 1684370292)
          return 1;
        v3 = 1684895092;
      }
      else
      {
        if (v1 == 1651273579 || v1 == 1668047723)
          return 1;
        v3 = 1668049264;
      }
    }
    else if (v1 <= 1701734253)
    {
      if (v1 == 1685287523 || v1 == 1701078390)
        return 1;
      v3 = 1701733488;
    }
    else if (v1 > 1718432369)
    {
      if (v1 == 1718432370)
        return 1;
      v3 = 1751740518;
    }
    else
    {
      if (v1 == 1701734254)
        return 1;
      v3 = 1702259059;
    }
LABEL_70:
    if (v1 != v3)
      return result;
    return 1;
  }
  if (v1 > 1936483187)
  {
    if (v1 <= 1937072757)
    {
      if (v1 > 1936744813)
      {
        if (v1 == 1936744814 || v1 == 1937006960)
          return 1;
        v3 = 1937072749;
      }
      else
      {
        if (v1 == 1936483188 || v1 == 1936483442)
          return 1;
        v3 = 1936682095;
      }
    }
    else if (v1 <= 1953458027)
    {
      if (v1 == 1937072758 || v1 == 1952541794)
        return 1;
      v3 = 1952672883;
    }
    else if (v1 > 1986817380)
    {
      if (v1 == 1999790690)
        return 1;
      v3 = 1986817381;
    }
    else
    {
      if (v1 == 1953458028)
        return 1;
      v3 = 1953656941;
    }
    goto LABEL_70;
  }
  if (v1 <= 1852601963)
  {
    if (v1 > 1818588779)
    {
      if (v1 == 1818588780 || v1 == 1819504226)
        return 1;
      v3 = 1836414053;
    }
    else
    {
      if (v1 == 1768907636 || v1 == 1784767339)
        return 1;
      v3 = 1815241314;
    }
    goto LABEL_70;
  }
  if (v1 <= 1886544236)
  {
    if (v1 == 1852601964 || v1 == 1885888878)
      return 1;
    v3 = 1885893481;
    goto LABEL_70;
  }
  if (v1 > 1936028001)
  {
    if (v1 == 1936028002)
      return 1;
    v3 = 1936028007;
    goto LABEL_70;
  }
  if (v1 != 1886544237)
  {
    v3 = 1919182198;
    goto LABEL_70;
  }
  return 1;
}

uint64_t HALB_Info::GetBaseClass(HALB_Info *this)
{
  int v1;
  int v2;

  if ((int)this <= 1768907635)
  {
    if ((int)this <= 1651273578)
    {
      if ((int)this <= 1634757734)
      {
        if ((int)this > 1633907819)
        {
          if ((_DWORD)this == 1634689642)
            return 0;
          return 1634689642;
        }
        if ((_DWORD)this != 1633773415)
          return 1634689642;
        return 1633969526;
      }
      if ((int)this <= 1634957682)
      {
        if ((_DWORD)this == 1634757735 || (_DWORD)this == 1634956402)
          return 1634689642;
        v1 = 1634956642;
LABEL_46:
        if ((_DWORD)this == v1)
          return 1633969526;
        return 1634689642;
      }
      if ((_DWORD)this == 1634957683)
        return 1634689642;
      if ((_DWORD)this == 1635017576)
        return 1953458028;
      v2 = 1650602615;
    }
    else
    {
      if ((int)this > 1685287522)
      {
        if ((int)this > 1701734253)
        {
          if ((int)this <= 1718432369)
          {
            if ((_DWORD)this == 1701734254)
              return 1634689642;
            v2 = 1702259059;
            goto LABEL_74;
          }
          if ((_DWORD)this == 1718432370)
            return 1953458028;
          if ((_DWORD)this != 1751740518)
            return 1634689642;
          return 1936483188;
        }
        if ((_DWORD)this == 1685287523)
          return 1936483188;
        if ((_DWORD)this != 1701078390)
        {
          v1 = 1701733488;
          goto LABEL_46;
        }
        return 1633969526;
      }
      if ((int)this <= 1668050547)
      {
        if ((_DWORD)this != 1651273579)
        {
          if ((_DWORD)this != 1668047723)
          {
            v2 = 1668049264;
            goto LABEL_74;
          }
          return 1936483188;
        }
        return 1633907820;
      }
      if ((_DWORD)this == 1668050548)
        return 1634689642;
      if ((_DWORD)this == 1684370292)
        return 1936483188;
      v2 = 1684895092;
    }
LABEL_74:
    if ((_DWORD)this == v2)
      return 1953458028;
    return 1634689642;
  }
  if ((int)this > 1936483187)
  {
    if ((int)this <= 1937072757)
    {
      if ((int)this > 1936744813)
      {
        if ((_DWORD)this != 1936744814)
        {
          if ((_DWORD)this == 1937006960)
            return 1634689642;
          v2 = 1937072749;
          goto LABEL_74;
        }
      }
      else if ((_DWORD)this != 1936483188 && (_DWORD)this != 1936483442)
      {
        v2 = 1936682095;
        goto LABEL_74;
      }
    }
    else
    {
      if ((int)this <= 1953458027)
      {
        if ((_DWORD)this == 1937072758)
          return 1818588780;
        if ((_DWORD)this != 1952541794)
          return 1634689642;
        return 1953458028;
      }
      if ((int)this > 1986817380)
      {
        if ((_DWORD)this == 1986817381)
          return 1818588780;
        v2 = 1999790690;
        goto LABEL_74;
      }
      if ((_DWORD)this != 1953458028)
      {
        if ((_DWORD)this == 1953656941)
          return 1634757735;
        return 1634689642;
      }
    }
    return 1633907820;
  }
  if ((int)this <= 1852601963)
  {
    if ((int)this <= 1818588779)
    {
      if ((_DWORD)this == 1768907636)
        return 1634689642;
      if ((_DWORD)this != 1784767339)
      {
        v2 = 1815241314;
        goto LABEL_74;
      }
      return 1953458028;
    }
    if ((_DWORD)this != 1818588780)
    {
      if ((_DWORD)this == 1819504226)
        return 1953458028;
      v2 = 1836414053;
      goto LABEL_74;
    }
    return 1633907820;
  }
  if ((int)this <= 1886544236)
  {
    if ((_DWORD)this != 1852601964)
    {
      if ((_DWORD)this != 1885888878)
      {
        v2 = 1885893481;
        goto LABEL_74;
      }
      return 1953458028;
    }
    return 1936483188;
  }
  if ((int)this <= 1936028001)
  {
    if ((_DWORD)this != 1886544237)
    {
      v1 = 1919182198;
      goto LABEL_46;
    }
    return 1818588780;
  }
  if ((_DWORD)this != 1936028002)
  {
    if ((_DWORD)this != 1936028007)
      return 1634689642;
    return 1818588780;
  }
  return 1651273579;
}

BOOL HALB_Info::IsSubClass(HALB_Info *this, int a2)
{
  uint64_t v2;
  int v3;
  BOOL v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v11;

  if (a2 > 1768907635)
  {
    if (a2 <= 1936483187)
    {
      if (a2 > 1852601963 || a2 <= 1818588779 || a2 != 1818588780)
        return (_DWORD)this == a2;
      v2 = 0;
      if ((int)this <= 1936028006)
      {
        if ((_DWORD)this == 1818588780)
          return 1;
        v3 = 1886544237;
        goto LABEL_117;
      }
      if ((_DWORD)this == 1936028007 || (_DWORD)this == 1986817381)
        return 1;
      v8 = 25206;
      goto LABEL_101;
    }
    if (a2 > 1937072757)
    {
      if (a2 != 1953458028)
        return (_DWORD)this == a2;
      goto LABEL_31;
    }
    if (a2 != 1936483188)
      return (_DWORD)this == a2;
    v2 = 0;
    if ((int)this <= 1751740517)
    {
      if ((_DWORD)this == 1668047723 || (_DWORD)this == 1684370292)
        return 1;
      v3 = 1685287523;
      goto LABEL_117;
    }
    if ((_DWORD)this == 1751740518)
      return 1;
    v9 = 1936483188;
LABEL_72:
    if ((_DWORD)this == v9)
      return 1;
    v3 = 1852601964;
    goto LABEL_117;
  }
  if (a2 > 1651273578)
  {
    if (a2 >= 1668050548 || a2 != 1651273579)
      return (_DWORD)this == a2;
    v6 = (_DWORD)this == 1651273579;
    v7 = 1936028002;
    return v6 || (_DWORD)this == v7;
  }
  if (a2 <= 1634757734)
  {
    if (a2 <= 1633907819)
      return (_DWORD)this == a2;
    if (a2 != 1633907820)
    {
      if (a2 != 1633969526)
      {
        if (a2 != 1634689642)
          return (_DWORD)this == a2;
        return 1;
      }
      v2 = 0;
      if ((int)this <= 1701078389)
      {
        if ((_DWORD)this == 1633773415)
          return 1;
        v3 = 1633969526;
      }
      else
      {
        if ((_DWORD)this == 1701078390 || (_DWORD)this == 1919182198)
          return 1;
        v3 = 1701733488;
      }
LABEL_117:
      if ((_DWORD)this != v3)
        return v2;
      return 1;
    }
    v2 = 0;
    if ((int)this <= 1836414052)
    {
      if ((int)this <= 1685287522)
      {
        if ((int)this <= 1668047722)
        {
          if ((int)this > 1650602614)
          {
            if ((_DWORD)this == 1650602615)
              return 1;
            v3 = 1651273579;
          }
          else
          {
            if ((_DWORD)this == 1633907820)
              return 1;
            v3 = 1635017576;
          }
          goto LABEL_117;
        }
        if ((int)this <= 1684370291)
        {
          if ((_DWORD)this == 1668047723)
            return 1;
          v3 = 1668049264;
          goto LABEL_117;
        }
        v11 = 1684370292;
LABEL_103:
        if ((_DWORD)this == v11)
          return 1;
        v3 = 1684895092;
        goto LABEL_117;
      }
      if ((int)this <= 1784767338)
      {
        if ((int)this > 1718432369)
        {
          if ((_DWORD)this == 1718432370)
            return 1;
          v3 = 1751740518;
        }
        else
        {
          if ((_DWORD)this == 1685287523)
            return 1;
          v3 = 1702259059;
        }
        goto LABEL_117;
      }
      if ((int)this > 1818588779)
      {
        if ((_DWORD)this == 1818588780)
          return 1;
        v3 = 1819504226;
        goto LABEL_117;
      }
LABEL_115:
      if ((_DWORD)this == 1784767339)
        return 1;
      v3 = 1815241314;
      goto LABEL_117;
    }
    if ((int)this > 1936483441)
    {
      if ((int)this > 1937072757)
      {
        if ((int)this <= 1953458027)
        {
          if ((_DWORD)this == 1937072758)
            return 1;
          v3 = 1952541794;
        }
        else
        {
          if ((_DWORD)this == 1953458028 || (_DWORD)this == 1999790690)
            return 1;
          v3 = 1986817381;
        }
        goto LABEL_117;
      }
      if ((int)this <= 1936744813)
      {
        if ((_DWORD)this == 1936483442)
          return 1;
        v3 = 1936682095;
        goto LABEL_117;
      }
      v10 = 1936744814;
LABEL_99:
      if ((_DWORD)this == v10)
        return 1;
      v8 = 25197;
LABEL_101:
      v3 = v8 | 0x73750000;
      goto LABEL_117;
    }
    if ((int)this > 1886544236)
    {
      if ((int)this > 1936028006)
      {
        if ((_DWORD)this == 1936028007)
          return 1;
        v3 = 1936483188;
      }
      else
      {
        if ((_DWORD)this == 1886544237)
          return 1;
        v3 = 1936028002;
      }
      goto LABEL_117;
    }
    if ((int)this > 1885888877)
    {
LABEL_92:
      if ((_DWORD)this == 1885888878)
        return 1;
      v3 = 1885893481;
      goto LABEL_117;
    }
    v9 = 1836414053;
    goto LABEL_72;
  }
  if (a2 <= 1634957682)
  {
    if (a2 != 1634757735)
      return (_DWORD)this == a2;
    v6 = (_DWORD)this == 1634757735;
    v7 = 1953656941;
    return v6 || (_DWORD)this == v7;
  }
  if (a2 == 1650685548)
  {
LABEL_31:
    v2 = 0;
    if ((int)this > 1819504225)
    {
      if ((int)this > 1936682094)
      {
        if ((int)this > 1952541793)
        {
          if ((_DWORD)this == 1952541794 || (_DWORD)this == 1999790690)
            return 1;
          v3 = 1953458028;
          goto LABEL_117;
        }
        v10 = 1936682095;
        goto LABEL_99;
      }
      if ((int)this <= 1885888877)
      {
        if ((_DWORD)this == 1819504226)
          return 1;
        v3 = 1836414053;
        goto LABEL_117;
      }
      goto LABEL_92;
    }
    if ((int)this <= 1702259058)
    {
      if ((int)this <= 1668049263)
      {
        if ((_DWORD)this == 1635017576)
          return 1;
        v3 = 1650602615;
        goto LABEL_117;
      }
      v11 = 1668049264;
      goto LABEL_103;
    }
    if ((int)this <= 1784767338)
    {
      if ((_DWORD)this == 1702259059)
        return 1;
      v3 = 1718432370;
      goto LABEL_117;
    }
    goto LABEL_115;
  }
  return (_DWORD)this == a2;
}

uint64_t HALB_Info::GetPropertyDataType(HALB_Info *this, _BYTE *a2, BOOL *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  int v26;

  if (a2)
    *a2 = 1;
  v3 = 1969828658;
  if ((int)this > 1836281965)
  {
    if ((int)this > 1936092478)
    {
      if ((int)this > 1937142885)
      {
        if ((int)this <= 1969841249)
        {
          if ((int)this > 1953002100)
          {
            if ((int)this > 1953653101)
            {
              if ((int)this > 1969514099)
              {
                if ((_DWORD)this == 1969514100)
                  return v3;
                v7 = 1969841184;
              }
              else
              {
                if ((_DWORD)this == 1953653102)
                  return v3;
                v7 = 1953851748;
              }
              goto LABEL_445;
            }
            if ((int)this <= 1953326882)
            {
              if ((_DWORD)this == 1953002101)
                return v3;
              v4 = 1953325673;
              goto LABEL_429;
            }
            if ((_DWORD)this == 1953326883)
              return 1634284338;
            v13 = 1953526563;
            goto LABEL_388;
          }
          if ((int)this <= 1952740194)
          {
            if ((int)this > 1952542819)
            {
              if ((_DWORD)this == 1952542820)
                return v3;
              v4 = 1952542835;
              goto LABEL_429;
            }
            if ((_DWORD)this == 1937142886)
              return v3;
            v9 = 1952542755;
            goto LABEL_449;
          }
          if ((int)this <= 1952869747)
          {
            if ((_DWORD)this == 1952740195)
              return 1886155636;
            v4 = 1952805485;
            goto LABEL_429;
          }
          if ((_DWORD)this != 1952869748)
          {
            v4 = 1953002099;
            goto LABEL_429;
          }
          return 1634951780;
        }
        if ((int)this <= 1986229349)
        {
          if ((int)this <= 1970170979)
          {
            if (((_DWORD)this - 1969841250) <= 0x12 && ((1 << ((_BYTE)this - 98)) & 0x4000F) != 0)
              return v3;
            goto LABEL_453;
          }
          if ((int)this <= 1983013985)
          {
            if ((_DWORD)this == 1970170980)
              return v3;
            v4 = 1970496882;
            goto LABEL_429;
          }
          if ((_DWORD)this != 1983013986)
          {
            if ((_DWORD)this == 1983996971)
              return v3;
            v4 = 1983997011;
            goto LABEL_429;
          }
          return 1718367026;
        }
        if ((int)this <= 1986880098)
        {
          if ((int)this > 1986359922)
          {
            if ((_DWORD)this == 1986359923 || (_DWORD)this == 1986425722)
              return v3;
            v4 = 1986622324;
            goto LABEL_429;
          }
          if ((_DWORD)this == 1986229350)
            return v3;
          if ((_DWORD)this != 1986290211)
            goto LABEL_453;
          return 1634088500;
        }
        if ((int)this <= 1987013740)
        {
          if ((_DWORD)this == 1986880099 || (_DWORD)this == 1986885219)
            return 1718367026;
          v5 = 1987013732;
          goto LABEL_384;
        }
        if ((_DWORD)this == 1987013741)
          return 1718367026;
        if ((_DWORD)this == 2003136116)
          return v3;
        v17 = 2020373603;
        goto LABEL_298;
      }
      if ((int)this <= 1936811875)
      {
        if ((int)this > 1936618860)
        {
          if ((int)this > 1936745333)
          {
            if ((int)this > 1936811107)
            {
              if ((_DWORD)this == 1936811108)
                return 1918990199;
              v9 = 1936811109;
              goto LABEL_449;
            }
            if ((_DWORD)this == 1936745334)
              return 1718367026;
            v21 = 28195;
          }
          else
          {
            if ((int)this <= 1936744813)
            {
              if ((_DWORD)this == 1936618861)
                return 1667658612;
              v4 = 1936682095;
              goto LABEL_429;
            }
            if ((_DWORD)this == 1936744814)
              return 1718367026;
            v21 = 25443;
          }
          v13 = v21 | 0x73700000;
          goto LABEL_388;
        }
        if ((int)this > 1936224867)
        {
          if ((int)this > 1936483695)
          {
            if ((_DWORD)this == 1936483696)
              return v3;
            v4 = 1936553332;
            goto LABEL_429;
          }
          if ((_DWORD)this == 1936224868)
            return v3;
          v16 = 1936482681;
          goto LABEL_402;
        }
        if ((int)this <= 1936092524)
        {
          if ((_DWORD)this == 1936092479)
            return 1634951780;
          if ((_DWORD)this != 1936092513)
            goto LABEL_453;
          return 1936876641;
        }
        if ((_DWORD)this == 1936092525)
          return 1634951780;
        v22 = 1936092532;
LABEL_329:
        if ((_DWORD)this != v22)
          goto LABEL_453;
        return 1634951780;
      }
      if ((int)this <= 1936945762)
      {
        if ((int)this > 1936876643)
        {
          if ((int)this <= 1936941858)
          {
            if ((_DWORD)this == 1936876644)
              return 1918990199;
            v16 = 1936879204;
            goto LABEL_402;
          }
          if ((_DWORD)this == 1936941859)
            return 1634284338;
          if ((_DWORD)this == 1936941931)
            return v3;
          v6 = 1936941934;
          goto LABEL_433;
        }
        if (((_DWORD)this - 1936811876) > 0x10)
          goto LABEL_453;
        if (((1 << ((_BYTE)this - 100)) & 0x18005) == 0)
        {
          if ((_DWORD)this != 1936811890)
            goto LABEL_453;
          return 1634088500;
        }
        return 1718367026;
      }
      if ((int)this <= 1937077092)
      {
        if ((int)this <= 1937009954)
        {
          if ((_DWORD)this == 1936945763)
            return 1634284338;
          v10 = 25718;
        }
        else
        {
          if ((_DWORD)this == 1937009955)
            return 1634284338;
          if ((_DWORD)this == 1937010031)
            return v3;
          v10 = 28772;
        }
        v4 = v10 | 0x73740000;
        goto LABEL_429;
      }
      if ((int)this <= 1937138722)
      {
        if ((_DWORD)this == 1937077093)
          return 1918990199;
        v15 = 12900;
      }
      else
      {
        if ((_DWORD)this == 1937138723)
          return 1634088500;
        if ((_DWORD)this == 1937140836)
          return 1718367026;
        v15 = 27757;
      }
      v5 = v15 | 0x73760000;
    }
    else
    {
      if ((int)this > 1886156134)
      {
        if ((int)this <= 1934587251)
        {
          if ((int)this <= 1902539641)
          {
            if ((int)this <= 1886353255)
            {
              if ((int)this <= 1886221683)
              {
                if ((_DWORD)this == 1886156135)
                  return v3;
                v4 = 1886218606;
                goto LABEL_429;
              }
              if ((_DWORD)this == 1886221684)
                return v3;
              v25 = 28020;
            }
            else
            {
              if ((int)this > 1886415203)
              {
                if ((_DWORD)this == 1886415204 || (_DWORD)this == 1886546294)
                  return v3;
                v13 = 1886548771;
                goto LABEL_388;
              }
              if ((_DWORD)this == 1886353256)
                return v3;
              v25 = 30578;
            }
            v4 = v25 | 0x706F0000;
            goto LABEL_429;
          }
          if ((int)this <= 1919512166)
          {
            if ((int)this > 1919186466)
            {
              if ((_DWORD)this == 1919186467)
                return 1634284338;
              if ((_DWORD)this == 1919251299)
                return v3;
              v4 = 1919251302;
              goto LABEL_429;
            }
            if ((_DWORD)this == 1902539642)
              return v3;
            v16 = 1919055206;
            goto LABEL_402;
          }
          if ((int)this > 1919839343)
          {
            if ((_DWORD)this != 1919839344)
            {
              if ((_DWORD)this == 1920168547)
                return 1667658612;
              v4 = 1920297316;
              goto LABEL_429;
            }
            return 1918990199;
          }
          if ((_DWORD)this == 1919512167)
            return v3;
          if ((_DWORD)this != 1919773028)
            goto LABEL_453;
          goto LABEL_390;
        }
        if ((int)this <= 1935896177)
        {
          if ((int)this <= 1935763059)
          {
            if ((int)this > 1934647635)
            {
              if ((_DWORD)this == 1934647636)
                return v3;
              v4 = 1935762292;
              goto LABEL_429;
            }
            if ((_DWORD)this == 1934587252)
              return v3;
            v16 = 1934647619;
            goto LABEL_402;
          }
          if ((int)this > 1935893352)
          {
            if ((_DWORD)this == 1935893353)
              return 1634284338;
            if ((_DWORD)this == 1935894638)
              return v3;
            v7 = 1935894894;
            goto LABEL_445;
          }
          if ((_DWORD)this == 1935763060)
            return v3;
          v13 = 1935892841;
          goto LABEL_388;
        }
        if ((int)this > 1935962737)
        {
          if ((int)this > 1936092275)
          {
            if ((_DWORD)this == 1936092276)
              return v3;
            if ((_DWORD)this != 1936092451)
              goto LABEL_453;
            return 1935828065;
          }
          if ((_DWORD)this == 1935962738)
            return 1634284338;
          v20 = 29302;
        }
        else
        {
          if ((int)this <= 1935959153)
          {
            if (((_DWORD)this - 1935896178) < 2)
              return 1667658612;
            v5 = 1935946358;
            goto LABEL_384;
          }
          if ((_DWORD)this == 1935959154)
            return v3;
          v20 = 26994;
        }
        v4 = v20 | 0x73640000;
        goto LABEL_429;
      }
      if ((int)this > 1853059618)
      {
        if ((int)this > 1885762594)
        {
          if ((int)this > 1885956451)
          {
            if (((_DWORD)this - 1885958719) <= 0x30
              && ((1 << (this - 63)) & 0x1040000000001) != 0)
            {
              return v3;
            }
            if ((_DWORD)this == 1885956452)
              return 1667658612;
            v13 = 1886152483;
            goto LABEL_388;
          }
          if ((int)this > 1885762656)
          {
            if ((_DWORD)this != 1885762657)
            {
              if ((_DWORD)this != 1885762669)
              {
                v4 = 1885954665;
                goto LABEL_429;
              }
              return 1634951780;
            }
            return 1936876641;
          }
          if ((_DWORD)this != 1885762595)
          {
            v11 = 29759;
LABEL_304:
            v22 = v11 | 0x70660000;
            goto LABEL_329;
          }
          return 1935828065;
        }
        if ((int)this > 1870030193)
        {
          if ((int)this <= 1885497699)
          {
            if ((_DWORD)this == 1870030194)
              return v3;
            v13 = 1870098020;
            goto LABEL_388;
          }
          if ((_DWORD)this == 1885497700)
            return 1667658612;
          if ((_DWORD)this == 1885632035)
            return 1634284338;
          v11 = 29728;
          goto LABEL_304;
        }
        if ((int)this > 1869180522)
        {
          if ((_DWORD)this == 1869180523)
            return v3;
          v7 = 1869638759;
          goto LABEL_445;
        }
        if ((_DWORD)this == 1853059619)
          return 1634088500;
        v17 = 1853059700;
LABEL_298:
        if ((_DWORD)this != v17)
          goto LABEL_453;
        goto LABEL_423;
      }
      if ((int)this > 1836479589)
      {
        if ((int)this <= 1852012898)
        {
          if ((int)this > 1851878763)
          {
            if ((_DWORD)this == 1851878764)
              return 1667658612;
            v4 = 1851878770;
            goto LABEL_429;
          }
          if ((_DWORD)this == 1836479590)
            return v3;
          v6 = 1851878757;
          goto LABEL_433;
        }
        if ((int)this > 1852601890)
        {
          if ((_DWORD)this == 1852601891 || (_DWORD)this == 1852601964)
            return 1634284338;
          v4 = 1852793963;
          goto LABEL_429;
        }
        if ((_DWORD)this != 1852012899)
        {
          v7 = 1852400499;
          goto LABEL_445;
        }
        return 1718367026;
      }
      if ((int)this <= 1836462691)
      {
        if ((int)this > 1836411235)
        {
          if ((_DWORD)this == 1836411236)
            return 1667658612;
          v4 = 1836414053;
          goto LABEL_429;
        }
        if ((_DWORD)this != 1836281966)
        {
          v4 = 1836282994;
          goto LABEL_429;
        }
        return 1718367026;
      }
      if ((int)this <= 1836475426)
      {
        if ((_DWORD)this == 1836462692)
          return 1718367026;
        v8 = 12915;
      }
      else
      {
        if ((_DWORD)this == 1836475427)
          return 1634088500;
        if ((_DWORD)this == 1836475490)
          return 1718367026;
        v8 = 29539;
      }
      v5 = v8 | 0x6D760000;
    }
LABEL_384:
    if ((_DWORD)this != v5)
      goto LABEL_453;
    return 1718367026;
  }
  if ((int)this <= 1685089382)
  {
    if ((int)this > 1667787119)
    {
      if ((int)this <= 1668702577)
      {
        if ((int)this <= 1668311395)
        {
          if ((int)this <= 1668049698)
          {
            if ((int)this <= 1667851117)
            {
              if ((_DWORD)this == 1667787120)
                return 1668510834;
              v6 = 1667788397;
              goto LABEL_433;
            }
            if ((_DWORD)this == 1667851118)
              return 1886155636;
            v23 = 24947;
          }
          else
          {
            if ((int)this > 1668049770)
            {
              if ((_DWORD)this == 1668049771)
                return v3;
              if ((_DWORD)this == 1668181110)
                return 1668510834;
              v6 = 1668181613;
              goto LABEL_433;
            }
            if ((_DWORD)this == 1668049699)
              return 1634284338;
            v23 = 27492;
          }
          v4 = v23 | 0x636C0000;
          goto LABEL_429;
        }
        if ((int)this <= 1668506479)
        {
          if ((int)this > 1668506474)
          {
            if ((_DWORD)this == 1668506475)
              return v3;
            v6 = 1668506478;
LABEL_433:
            if ((_DWORD)this != v6)
              goto LABEL_453;
            return 1668510834;
          }
          if ((_DWORD)this == 1668311396)
            return v3;
          v18 = 25379;
        }
        else
        {
          if ((int)this > 1668575851)
          {
            if ((_DWORD)this == 1668575852)
              return 1634284338;
            if ((_DWORD)this == 1668639076)
              return 1667658612;
            v13 = 1668641652;
            goto LABEL_388;
          }
          if ((_DWORD)this == 1668506480)
            return v3;
          v18 = 29283;
        }
        v13 = v18 | 0x63730000;
        goto LABEL_388;
      }
      if ((int)this <= 1684301173)
      {
        if ((int)this <= 1684107363)
        {
          if ((int)this <= 1682929011)
          {
            if ((_DWORD)this == 1668702578)
              return v3;
            v4 = 1682533920;
            goto LABEL_429;
          }
          if ((_DWORD)this == 1682929012)
            return v3;
          v24 = 26471;
        }
        else
        {
          if ((int)this > 1684157045)
          {
            if ((_DWORD)this != 1684157046)
            {
              if ((_DWORD)this == 1684236338)
                return 1634284338;
              v9 = 1684301171;
              goto LABEL_449;
            }
            return 1718367026;
          }
          if ((_DWORD)this == 1684107364)
            return v3;
          v24 = 29795;
        }
        v4 = v24 | 0x64610000;
        goto LABEL_429;
      }
      if ((int)this <= 1684500588)
      {
        if ((int)this > 1684434035)
        {
          if ((_DWORD)this == 1684434036 || (_DWORD)this == 1684498541)
            return v3;
          v4 = 1684498544;
          goto LABEL_429;
        }
        if ((_DWORD)this == 1684301174)
          return v3;
        v13 = 1684370979;
        goto LABEL_388;
      }
      if ((int)this > 1684629093)
      {
        if ((_DWORD)this == 1684629094 || (_DWORD)this == 1684893796)
          return v3;
        v4 = 1685087596;
        goto LABEL_429;
      }
      if ((_DWORD)this != 1684500589)
      {
        v16 = 1684500594;
        goto LABEL_402;
      }
      return 1718367026;
    }
    if ((int)this > 1651010920)
    {
      if ((int)this > 1652060005)
      {
        if ((int)this <= 1667460716)
        {
          if ((int)this <= 1667327846)
          {
            if ((_DWORD)this == 1652060006)
              return v3;
            v4 = 1652060014;
            goto LABEL_429;
          }
          if ((_DWORD)this == 1667327847)
            return v3;
          v7 = 1667330160;
          goto LABEL_445;
        }
        if ((int)this > 1667523957)
        {
          if ((_DWORD)this == 1667523958 || (_DWORD)this == 1667591277)
            return v3;
          v4 = 1667658618;
          goto LABEL_429;
        }
        if ((_DWORD)this != 1667460717)
        {
          v9 = 1667523955;
          goto LABEL_449;
        }
        return 1668510834;
      }
      if ((int)this > 1651272547)
      {
        if ((int)this > 1651730809)
        {
          if ((_DWORD)this == 1651730810)
            return v3;
          if ((_DWORD)this != 1651735075)
          {
            v7 = 1651861860;
            goto LABEL_445;
          }
          return 1634088500;
        }
        if ((_DWORD)this == 1651272548)
          return 1886155636;
        v13 = 1651472419;
        goto LABEL_388;
      }
      if ((int)this > 1651074159)
      {
        if ((_DWORD)this == 1651074160)
          return v3;
        v16 = 1651272546;
        goto LABEL_402;
      }
      if ((_DWORD)this == 1651010921)
        return v3;
      v14 = 30313;
LABEL_246:
      v4 = v14 | 0x62680000;
      goto LABEL_429;
    }
    if ((int)this <= 1634758764)
    {
      if ((int)this > 1634300530)
      {
        if ((int)this > 1634496614)
        {
          if ((_DWORD)this == 1634496615)
            return v3;
          if ((_DWORD)this == 1634562932)
            return 1667658612;
          v7 = 1634755428;
          goto LABEL_445;
        }
        if ((_DWORD)this != 1634300531)
        {
          v13 = 1634429294;
          goto LABEL_388;
        }
LABEL_390:
        v26 = 1634284338;
        return (v26 + 770);
      }
      if ((int)this > 1633970531)
      {
        if ((_DWORD)this != 1633970532)
        {
          v13 = 1634169456;
          goto LABEL_388;
        }
        goto LABEL_390;
      }
      if ((_DWORD)this == 1346585414)
        return v3;
      v9 = 1633906541;
LABEL_449:
      if ((_DWORD)this != v9)
        goto LABEL_453;
      return 1886155636;
    }
    if ((int)this > 1650682914)
    {
      if ((int)this <= 1650685547)
      {
        if ((_DWORD)this == 1650682915)
          return 1634284338;
        v4 = 1650682995;
        goto LABEL_429;
      }
      if ((_DWORD)this == 1650685548)
        return v3;
      if ((_DWORD)this == 1650751011)
        return 1634284338;
      v14 = 24949;
      goto LABEL_246;
    }
    if ((int)this <= 1634955891)
    {
      if ((_DWORD)this == 1634758765)
        return v3;
      v5 = 1634758774;
      goto LABEL_384;
    }
    if ((_DWORD)this != 1634955892)
    {
      v4 = 1635087471;
      goto LABEL_429;
    }
LABEL_423:
    v26 = 1718367026;
    return (v26 + 770);
  }
  if ((int)this <= 1768907635)
  {
    if ((int)this > 1735354733)
    {
      if ((int)this > 1751740450)
      {
        if ((int)this <= 1768124269)
        {
          if ((int)this > 1751740523)
          {
            if ((_DWORD)this != 1751740524)
            {
              if ((_DWORD)this == 1752131442)
                return v3;
              v4 = 1752135523;
              goto LABEL_429;
            }
            return 1667658612;
          }
          if ((_DWORD)this != 1751740451)
          {
            v13 = 1751740518;
            goto LABEL_388;
          }
          return 1634284338;
        }
        if ((int)this > 1768187245)
        {
          if ((_DWORD)this == 1768187246)
            return v3;
          if ((_DWORD)this != 1768777573)
          {
            v4 = 1768845172;
            goto LABEL_429;
          }
          return 1886155636;
        }
        if ((_DWORD)this == 1768124270)
          return 1668641388;
        v4 = 1768174192;
        goto LABEL_429;
      }
      if ((int)this > 1735750500)
      {
        if ((int)this > 1751413615)
        {
          if ((_DWORD)this != 1751413616 && (_DWORD)this != 1751474532)
          {
            v4 = 1751737454;
            goto LABEL_429;
          }
          return 1886155636;
        }
        if ((_DWORD)this == 1735750501)
          return 1634284338;
        v4 = 1751412337;
LABEL_429:
        if ((_DWORD)this == v4)
          return v3;
        goto LABEL_453;
      }
      if ((int)this <= 1735551331)
      {
        if ((_DWORD)this == 1735354734)
          return v3;
        v4 = 1735356005;
        goto LABEL_429;
      }
      if ((_DWORD)this != 1735551332)
      {
        v9 = 1735554416;
        goto LABEL_449;
      }
      return 1918990199;
    }
    if ((int)this <= 1685288047)
    {
      if ((int)this > 1685222500)
      {
        if (((_DWORD)this - 1685278561) > 0x11 || ((1 << ((_BYTE)this - 97)) & 0x20003) == 0)
        {
          if ((_DWORD)this == 1685222501)
            return v3;
          v4 = 1685287012;
          goto LABEL_429;
        }
        return 1886155636;
      }
      if (((_DWORD)this - 1685218913) <= 0x13 && ((1 << ((_BYTE)this - 97)) & 0x90001) != 0)
        return v3;
      v7 = 1685089383;
      goto LABEL_445;
    }
    if ((int)this > 1701733410)
    {
      if ((int)this <= 1718839673)
      {
        if ((_DWORD)this == 1701733411)
          return 1634284338;
        v4 = 1702193508;
        goto LABEL_429;
      }
      if ((_DWORD)this == 1718839674)
        return v3;
      if ((_DWORD)this != 1718843939)
      {
        v7 = 1719105134;
        goto LABEL_445;
      }
      return 1634088500;
    }
    if ((int)this > 1685416291)
    {
      if ((_DWORD)this == 1685416292)
        return v3;
      v4 = 1698776147;
      goto LABEL_429;
    }
    if ((_DWORD)this == 1685288048)
      return v3;
    v16 = 1685414763;
LABEL_402:
    if ((_DWORD)this != v16)
      goto LABEL_453;
    return 1918990199;
  }
  if ((int)this <= 1818850161)
  {
    if ((int)this <= 1818453109)
    {
      if ((int)this <= 1769302371)
      {
        if ((int)this > 1769173112)
        {
          if ((_DWORD)this == 1769173113)
            return v3;
          v4 = 1769174370;
          goto LABEL_429;
        }
        if ((_DWORD)this == 1768907636)
          return 1886155636;
        v4 = 1768973155;
        goto LABEL_429;
      }
      if ((int)this <= 1818452845)
      {
        if ((_DWORD)this == 1769302372)
          return v3;
        v4 = 1784767339;
        goto LABEL_429;
      }
      if ((_DWORD)this == 1818452846)
        return 1667658612;
      if ((_DWORD)this == 1818453106)
        return 1634088500;
      v5 = 1818453107;
      goto LABEL_384;
    }
    if ((int)this <= 1818456931)
    {
      if ((int)this > 1818455659)
      {
        if ((_DWORD)this == 1818455660)
          return 1667658612;
        v19 = 28270;
      }
      else
      {
        if ((_DWORD)this == 1818453110)
          return 1718367026;
        v19 = 26734;
      }
    }
    else
    {
      if ((int)this > 1818456949)
      {
        if ((_DWORD)this != 1818456950)
        {
          if ((_DWORD)this == 1818457190)
            return v3;
          v13 = 1818850145;
          goto LABEL_388;
        }
        return 1718367026;
      }
      if ((_DWORD)this == 1818456932)
        return 1718367026;
      v19 = 29550;
    }
    v7 = v19 | 0x6C630000;
    goto LABEL_445;
  }
  if ((int)this <= 1835101041)
  {
    if ((int)this <= 1819173228)
    {
      if ((int)this <= 1819107690)
      {
        if ((_DWORD)this == 1818850162)
          return 1634284338;
        v4 = 1818850926;
        goto LABEL_429;
      }
      if ((_DWORD)this == 1819107691)
        return 1667658612;
      v7 = 1819111268;
LABEL_445:
      if ((_DWORD)this == v7)
        return 1667658612;
      goto LABEL_453;
    }
    if ((int)this <= 1819569762)
    {
      if ((_DWORD)this == 1819173229)
        return 1667658612;
      v7 = 1819501422;
      goto LABEL_445;
    }
    if ((_DWORD)this == 1819569763)
      return v3;
    if ((_DWORD)this == 1819634020)
      return 1886155636;
    v12 = 26990;
    goto LABEL_309;
  }
  if ((int)this <= 1835295858)
  {
    if ((int)this > 1835295778)
    {
      if ((_DWORD)this == 1835295779)
        return 1634284338;
      if ((_DWORD)this == 1835295843)
        return 1667658612;
      v6 = 1835295854;
      goto LABEL_433;
    }
    if ((_DWORD)this == 1835101042)
      return 1668510834;
    v12 = 29556;
LABEL_309:
    v4 = v12 | 0x6D610000;
    goto LABEL_429;
  }
  if ((int)this <= 1835758703)
  {
    if ((_DWORD)this == 1835295859)
      return 1634284338;
    v4 = 1835628607;
    goto LABEL_429;
  }
  if ((_DWORD)this == 1835758704)
    return 1886155636;
  if ((_DWORD)this == 1835821926)
    return v3;
  v13 = 1836281891;
LABEL_388:
  if ((_DWORD)this == v13)
    return 1634284338;
LABEL_453:
  v3 = 1918990199;
  if (a2)
    *a2 = 0;
  return v3;
}

uint64_t HALB_Info::GetPropertyQualifierDataType(HALB_Info *this, _BYTE *a2, BOOL *a3)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  int v17;
  unsigned __int16 v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;

  v3 = (int)this;
  if (a2)
    *a2 = 1;
  result = 0;
  if (v3 <= 1836281965)
  {
    if (v3 <= 1685218912)
    {
      if (v3 > 1667788396)
      {
        if (v3 <= 1682533919)
        {
          if (v3 > 1668506402)
          {
            if (v3 <= 1668510306)
            {
              if (v3 <= 1668506477)
              {
                if (v3 == 1668506403)
                  return result;
                v6 = 1668506475;
                goto LABEL_359;
              }
              if (v3 == 1668506478)
                return 1969828658;
              v5 = 1668506480;
            }
            else if (v3 <= 1668639075)
            {
              if (v3 == 1668510307)
                return result;
              v5 = 1668575852;
            }
            else
            {
              if (v3 == 1668639076 || v3 == 1668641652)
                return result;
              v5 = 1668702578;
            }
            goto LABEL_426;
          }
          if (v3 <= 1668049763)
          {
            if (v3 > 1668047218)
            {
              if (v3 == 1668047219)
                return result;
              v5 = 1668049699;
            }
            else
            {
              if (v3 == 1667788397)
                return result;
              v5 = 1667851118;
            }
            goto LABEL_426;
          }
          if (v3 <= 1668181109)
          {
            if (v3 == 1668049764)
              return result;
            v6 = 1668049771;
            goto LABEL_359;
          }
          if (v3 != 1668181110)
          {
            if (v3 == 1668181613)
              return result;
            v5 = 1668311396;
            goto LABEL_426;
          }
        }
        else
        {
          if (v3 > 1684370978)
          {
            if (v3 > 1684500593)
            {
              if (v3 <= 1684893795)
              {
                if (v3 == 1684500594)
                  return 1969828658;
                v5 = 1684629094;
              }
              else
              {
                if (v3 == 1684893796 || v3 == 1685087596)
                  return result;
                v5 = 1685089383;
              }
            }
            else
            {
              if (v3 > 1684498540)
              {
                if (v3 == 1684498541 || v3 == 1684498544)
                  return 1969828658;
                v6 = 1684500589;
                goto LABEL_359;
              }
              if (v3 == 1684370979)
                return result;
              v5 = 1684434036;
            }
            goto LABEL_426;
          }
          if (v3 > 1684108386)
          {
            if (v3 <= 1684236337)
            {
              if (v3 == 1684108387)
                return result;
              v9 = 1684157046;
              goto LABEL_365;
            }
            if (v3 == 1684236338 || v3 == 1684301171)
              return result;
            v5 = 1684301174;
            goto LABEL_426;
          }
          if (v3 > 1684105062)
          {
            if (v3 == 1684105063)
              return result;
            v5 = 1684107364;
            goto LABEL_426;
          }
          if (v3 != 1682533920)
          {
            v6 = 1682929012;
            goto LABEL_359;
          }
        }
        return 1969828658;
      }
      if (v3 <= 1651013224)
      {
        if (v3 <= 1634758764)
        {
          if (v3 <= 1634300530)
          {
            if (v3 > 1633970531)
            {
              if (v3 == 1633970532)
                return result;
              v5 = 1634169456;
            }
            else
            {
              if (v3 == 1346585414)
                return result;
              v5 = 1633906541;
            }
            goto LABEL_426;
          }
          if (v3 <= 1634496614)
          {
            if (v3 == 1634300531)
              return result;
            v5 = 1634429294;
            goto LABEL_426;
          }
          if (v3 == 1634496615 || v3 == 1634562932)
            return result;
          v7 = 25444;
LABEL_265:
          v5 = v7 | 0x61700000;
          goto LABEL_426;
        }
        if (v3 <= 1650682994)
        {
          if (v3 <= 1634955891)
          {
            if (v3 == 1634758765)
              return result;
            v7 = 28790;
            goto LABEL_265;
          }
          if (v3 == 1634955892)
            return result;
          v22 = 27683;
        }
        else
        {
          if (v3 > 1650751010)
          {
            if (v3 == 1650751011 || v3 == 1651007861)
              return result;
            v5 = 1651010921;
            goto LABEL_426;
          }
          if (v3 == 1650682995)
            return result;
          v22 = 30316;
        }
        v5 = v22 | 0x62630000;
        goto LABEL_426;
      }
      if (v3 <= 1652060013)
      {
        if (v3 > 1651472418)
        {
          if (v3 <= 1651735074)
          {
            if (v3 == 1651472419)
              return result;
            v5 = 1651730810;
          }
          else
          {
            if (v3 == 1651735075 || v3 == 1651861860)
              return result;
            v5 = 1652060006;
          }
          goto LABEL_426;
        }
        if (v3 > 1651272545)
        {
          if (v3 == 1651272546)
            return result;
          v5 = 1651272548;
          goto LABEL_426;
        }
        if (v3 == 1651013225)
          return result;
        v12 = 1651074160;
        goto LABEL_272;
      }
      if (v3 <= 1667523954)
      {
        if (v3 > 1667330159)
        {
          if (v3 == 1667330160)
            return result;
          v5 = 1667460717;
          goto LABEL_426;
        }
        if (v3 == 1652060014)
          return result;
        v19 = 1667327847;
      }
      else
      {
        if (v3 > 1667591276)
        {
          if (v3 == 1667591277)
            return result;
          if (v3 != 1667658618)
          {
            v6 = 1667787120;
            goto LABEL_359;
          }
          return 1969828658;
        }
        if (v3 == 1667523955)
          return result;
        v19 = 1667523958;
      }
      if (v3 != v19)
        goto LABEL_430;
      return 1886155636;
    }
    if (v3 <= 1768907635)
    {
      if (v3 > 1735356004)
      {
        if (v3 > 1751740517)
        {
          if (v3 <= 1768124269)
          {
            if (v3 <= 1752131441)
            {
              if (v3 == 1751740518)
                return result;
              v6 = 1751740524;
              goto LABEL_359;
            }
            if (v3 == 1752131442)
              return result;
            v5 = 1752135523;
          }
          else
          {
            if (v3 <= 1768187245)
            {
              if (v3 == 1768124270)
                return result;
              v6 = 1768174192;
              goto LABEL_359;
            }
            if (v3 == 1768187246 || v3 == 1768777573)
              return result;
            v5 = 1768845172;
          }
        }
        else if (v3 <= 1751412336)
        {
          if (v3 > 1735554415)
          {
            if (v3 == 1735554416)
              return result;
            v5 = 1735750501;
          }
          else
          {
            if (v3 == 1735356005)
              return result;
            v5 = 1735551332;
          }
        }
        else if (v3 <= 1751474531)
        {
          if (v3 == 1751412337)
            return result;
          v5 = 1751413616;
        }
        else
        {
          if (v3 == 1751474532 || v3 == 1751737454)
            return result;
          v5 = 1751740451;
        }
        goto LABEL_426;
      }
      if (v3 <= 1685414762)
      {
        if (v3 <= 1685278560)
        {
          if ((v3 - 1685218913) <= 0x13 && ((1 << (v3 - 97)) & 0x90001) != 0)
            return result;
          v5 = 1685222501;
        }
        else
        {
          if ((v3 - 1685278561) <= 0x11 && ((1 << (v3 - 97)) & 0x20003) != 0 || v3 == 1685287012)
            return result;
          v5 = 1685288048;
        }
        goto LABEL_426;
      }
      if (v3 > 1702193507)
      {
        if (v3 <= 1718843938)
        {
          if (v3 == 1702193508)
            return result;
          v5 = 1718839674;
        }
        else
        {
          if (v3 == 1718843939 || v3 == 1719105134)
            return result;
          v5 = 1735354734;
        }
        goto LABEL_426;
      }
      if (v3 > 1698776146)
      {
        if (v3 == 1698776147)
          return result;
        v5 = 1701733411;
        goto LABEL_426;
      }
      if (v3 == 1685414763)
        return result;
      v12 = 1685416292;
      goto LABEL_272;
    }
    if (v3 <= 1818850161)
    {
      if (v3 <= 1818453109)
      {
        if (v3 <= 1769302371)
        {
          if (v3 > 1769173112)
          {
            if (v3 == 1769173113)
              return result;
            v5 = 1769174370;
          }
          else
          {
            if (v3 == 1768907636)
              return result;
            v5 = 1768973155;
          }
          goto LABEL_426;
        }
        if (v3 > 1818452845)
        {
          if (v3 == 1818452846 || v3 == 1818453106)
            return result;
          v9 = 1818453107;
          goto LABEL_365;
        }
        if (v3 != 1769302372)
        {
          v5 = 1784767339;
          goto LABEL_426;
        }
        return 1969828658;
      }
      if (v3 <= 1818456931)
      {
        if (v3 > 1818455659)
        {
          if (v3 == 1818455660)
            return 1969828658;
          v18 = 28270;
        }
        else
        {
          if (v3 == 1818453110)
            return result;
          v18 = 26734;
        }
        v5 = v18 | 0x6C630000;
        goto LABEL_426;
      }
      if (v3 <= 1818456949)
      {
        if (v3 != 1818456932)
        {
          v6 = 1818456942;
          goto LABEL_359;
        }
        return 1718367026;
      }
      if (v3 == 1818456950 || v3 == 1818457190)
        return result;
      v13 = 29537;
    }
    else
    {
      if (v3 > 1835101041)
      {
        if (v3 > 1835295858)
        {
          if (v3 <= 1835758703)
          {
            if (v3 == 1835295859)
              return result;
            v5 = 1835628607;
            goto LABEL_426;
          }
          if (v3 != 1835758704)
          {
            if (v3 == 1835821926)
              return 1969828658;
            v15 = 28707;
            goto LABEL_233;
          }
          return 1886155636;
        }
        if (v3 > 1835295778)
        {
          if (v3 == 1835295779)
            return result;
          if (v3 != 1835295843)
          {
            v6 = 1835295854;
            goto LABEL_359;
          }
          return 1969828658;
        }
        if (v3 == 1835101042)
          return result;
        v11 = 29556;
LABEL_307:
        v5 = v11 | 0x6D610000;
        goto LABEL_426;
      }
      if (v3 > 1819173228)
      {
        if (v3 <= 1819569762)
        {
          if (v3 == 1819173229)
            return result;
          v6 = 1819501422;
          goto LABEL_359;
        }
        if (v3 == 1819569763 || v3 == 1819634020)
          return result;
        v11 = 26990;
        goto LABEL_307;
      }
      if (v3 > 1819107690)
      {
        if (v3 == 1819107691)
          return result;
        v5 = 1819111268;
        goto LABEL_426;
      }
      if (v3 == 1818850162)
        return result;
      v13 = 30318;
    }
    v5 = v13 | 0x6C690000;
    goto LABEL_426;
  }
  if (v3 <= 1936092478)
  {
    if (v3 <= 1886152482)
    {
      if (v3 > 1853059618)
      {
        if (v3 <= 1885762591)
        {
          if (v3 <= 1869838182)
          {
            if (v3 > 1869180522)
            {
              if (v3 == 1869180523)
                return result;
              v5 = 1869638759;
            }
            else
            {
              if (v3 == 1853059619)
                return result;
              v5 = 1853059700;
            }
          }
          else if (v3 <= 1870098019)
          {
            if (v3 == 1869838183)
              return result;
            v5 = 1870030194;
          }
          else
          {
            if (v3 == 1870098020)
              return 1634284338;
            if (v3 == 1885497700)
              return result;
            v5 = 1885632035;
          }
          goto LABEL_426;
        }
        if (v3 <= 1885954664)
        {
          if ((v3 - 1885762592) <= 0x1F && ((1 << (v3 - 32)) & 0x80000009) != 0 || v3 == 1885762657)
            return result;
          if (v3 != 1885762669)
            goto LABEL_430;
          return 1634951780;
        }
        if ((v3 - 1885958719) <= 0x30 && ((1 << (v3 - 63)) & 0x1040000000001) != 0)
          return result;
        if (v3 != 1885954665)
        {
          v5 = 1885956452;
          goto LABEL_426;
        }
        return 1667658612;
      }
      if (v3 > 1836479589)
      {
        if (v3 > 1852012898)
        {
          if (v3 <= 1852601890)
          {
            if (v3 == 1852012899)
              return result;
            v6 = 1852400499;
            goto LABEL_359;
          }
          if (v3 == 1852601891 || v3 == 1852601964)
            return result;
          v5 = 1852793963;
          goto LABEL_426;
        }
        if ((v3 - 1851878757) <= 0xD && ((1 << (v3 - 101)) & 0x2081) != 0)
          return result;
        v8 = 29798;
LABEL_280:
        v5 = v8 | 0x6D760000;
        goto LABEL_426;
      }
      if (v3 > 1836462691)
      {
        if (v3 <= 1836475426)
        {
          if (v3 == 1836462692)
            return 1718367026;
          v9 = 1836462707;
          goto LABEL_365;
        }
        if (v3 == 1836475427 || v3 == 1836475490)
          return result;
        v8 = 29539;
        goto LABEL_280;
      }
      if (v3 > 1836411235)
      {
        if (v3 == 1836411236)
          return result;
        v5 = 1836414053;
        goto LABEL_426;
      }
      if (v3 == 1836281966)
        return result;
      v15 = 29810;
LABEL_233:
      v5 = v15 | 0x6D730000;
      goto LABEL_426;
    }
    if (v3 > 1934587251)
    {
      if (v3 > 1935896177)
      {
        if (v3 > 1935962737)
        {
          if (v3 > 1936092275)
          {
            if (v3 == 1936092276)
              return result;
            v23 = 27939;
LABEL_418:
            v5 = v23 | 0x73660000;
            goto LABEL_426;
          }
          if (v3 == 1935962738)
            return result;
          v20 = 29302;
        }
        else
        {
          if (v3 <= 1935959153)
          {
            if ((v3 - 1935896178) < 2)
              return 1969828658;
            v9 = 1935946358;
            goto LABEL_365;
          }
          if (v3 == 1935959154)
            return result;
          v20 = 26994;
        }
        v5 = v20 | 0x73640000;
        goto LABEL_426;
      }
      if (v3 <= 1935763059)
      {
        if (v3 <= 1934647635)
        {
          if (v3 != 1934587252)
          {
            v5 = 1934647619;
            goto LABEL_426;
          }
          return 1969828658;
        }
        if (v3 == 1934647636)
          return result;
        v5 = 1935762292;
      }
      else
      {
        if (v3 > 1935893352)
        {
          if (v3 == 1935893353 || v3 == 1935894638)
            return result;
          v6 = 1935894894;
          goto LABEL_359;
        }
        if (v3 == 1935763060)
          return result;
        v5 = 1935892841;
      }
LABEL_426:
      if (v3 == v5)
        return result;
      goto LABEL_430;
    }
    if (v3 <= 1886548770)
    {
      if (v3 <= 1886350707)
      {
        if (v3 > 1886218605)
        {
          if (v3 == 1886218606)
            return 1969828658;
          v5 = 1886221684;
        }
        else
        {
          if (v3 == 1886152483)
            return result;
          v5 = 1886156135;
        }
      }
      else if (v3 <= 1886353265)
      {
        if (v3 == 1886350708)
          return result;
        v5 = 1886353256;
      }
      else
      {
        if (v3 == 1886353266 || v3 == 1886415204)
          return result;
        v5 = 1886546294;
      }
      goto LABEL_426;
    }
    if (v3 <= 1919512166)
    {
      if (v3 > 1919055205)
      {
        if (v3 == 1919055206)
          return result;
        v5 = 1919186467;
      }
      else
      {
        if (v3 == 1886548771)
          return result;
        v5 = 1902539642;
      }
      goto LABEL_426;
    }
    if (v3 <= 1919839343)
    {
      if (v3 == 1919512167)
        return result;
      v5 = 1919773028;
      goto LABEL_426;
    }
    if (v3 == 1919839344 || v3 == 1920168547)
      return result;
    v12 = 1920297316;
LABEL_272:
    if (v3 != v12)
      goto LABEL_430;
    return 1667658612;
  }
  if (v3 > 1952542754)
  {
    if (v3 <= 1970170979)
    {
      if (v3 > 1953526562)
      {
        if (v3 <= 1969514099)
        {
          if (v3 == 1953526563 || v3 == 1953653102)
            return result;
          v5 = 1953851748;
          goto LABEL_426;
        }
        if ((v3 - 1969841250) > 0x12 || ((1 << (v3 - 98)) & 0x4000F) == 0)
        {
          if (v3 == 1969514100)
            return result;
          v5 = 1969841184;
          goto LABEL_426;
        }
      }
      else
      {
        if (v3 <= 1952869747)
        {
          if (v3 <= 1952542834)
          {
            if (v3 == 1952542755)
              return result;
            v5 = 1952542820;
          }
          else
          {
            if (v3 == 1952542835 || v3 == 1952740195)
              return result;
            v5 = 1952805485;
          }
          goto LABEL_426;
        }
        if (v3 <= 1953002100)
        {
          if (v3 == 1952869748)
            return result;
          v5 = 1953002099;
          goto LABEL_426;
        }
        if (v3 == 1953002101)
          return result;
        if (v3 != 1953325673)
        {
          v5 = 1953326883;
          goto LABEL_426;
        }
      }
      return 1667658612;
    }
    if (v3 > 1986425721)
    {
      if (v3 <= 1987013731)
      {
        if (v3 > 1986880098)
        {
          if (v3 == 1986880099)
            return result;
          v5 = 1986885219;
        }
        else
        {
          if (v3 == 1986425722)
            return result;
          v5 = 1986622324;
        }
      }
      else if (v3 <= 2003136115)
      {
        if (v3 == 1987013732)
          return result;
        v5 = 1987013741;
      }
      else
      {
        if (v3 == 2003136116 || v3 == 2003398256)
          return result;
        v5 = 2020373603;
      }
      goto LABEL_426;
    }
    if (v3 > 1983997010)
    {
      if (v3 > 1986290210)
      {
        if (v3 == 1986290211)
          return result;
        v5 = 1986359923;
      }
      else
      {
        if (v3 == 1983997011)
          return result;
        v5 = 1986229350;
      }
      goto LABEL_426;
    }
    if (v3 <= 1983013985)
    {
      if (v3 == 1970170980)
        return result;
      v5 = 1970496882;
      goto LABEL_426;
    }
    if (v3 != 1983013986)
    {
      v5 = 1983996971;
      goto LABEL_426;
    }
    return 1718367026;
  }
  if (v3 > 1936876643)
  {
    if (v3 <= 1937010030)
    {
      if (v3 <= 1936941933)
      {
        if (v3 <= 1936941858)
        {
          if (v3 == 1936876644)
            return result;
          v5 = 1936879204;
          goto LABEL_426;
        }
        if (v3 == 1936941859)
          return result;
        v6 = 1936941931;
LABEL_359:
        if (v3 == v6)
          return 1969828658;
LABEL_430:
        result = 0;
        if (a2)
          *a2 = 0;
        return result;
      }
      if (v3 <= 1937007733)
      {
        if (v3 != 1936941934)
        {
          v5 = 1936945763;
          goto LABEL_426;
        }
        return 1969828658;
      }
      if (v3 == 1937007734)
        return result;
      v14 = 27939;
LABEL_395:
      v5 = v14 | 0x73740000;
      goto LABEL_426;
    }
    if (v3 <= 1937138722)
    {
      if (v3 <= 1937077092)
      {
        if (v3 == 1937010031)
          return result;
        v14 = 28772;
        goto LABEL_395;
      }
      if (v3 == 1937077093)
        return result;
      v9 = 1937125988;
LABEL_365:
      if (v3 != v9)
        goto LABEL_430;
      return 1718367026;
    }
    if (v3 > 1937140844)
    {
      if (v3 == 1937140845)
        return result;
      v21 = 29798;
    }
    else
    {
      if (v3 == 1937138723)
        return result;
      v21 = 27748;
    }
    v5 = v21 | 0x73760000;
    goto LABEL_426;
  }
  if (v3 > 1936745314)
  {
    if (v3 <= 1936811875)
    {
      if (v3 <= 1936811107)
      {
        if (v3 == 1936745315 || v3 == 1936745334)
          return result;
        v10 = 28195;
        goto LABEL_302;
      }
      if ((v3 - 1936811108) < 2)
        return result;
      goto LABEL_430;
    }
    v16 = v3 - 1936811876;
    if (v16 > 0x10)
      goto LABEL_430;
    v17 = 1 << v16;
    if ((v17 & 0xC001) != 0)
      return result;
    if ((v17 & 0x10004) == 0)
      goto LABEL_430;
    return 1718367026;
  }
  if (v3 <= 1936482680)
  {
    if (v3 > 1936092524)
    {
      if (v3 != 1936092525)
      {
        if (v3 == 1936092532)
          return result;
        v6 = 1936224868;
        goto LABEL_359;
      }
      return 1634951780;
    }
    if (v3 == 1936092479)
      return result;
    v23 = 28001;
    goto LABEL_418;
  }
  if (v3 > 1936618860)
  {
    if (v3 == 1936618861 || v3 == 1936682095)
      return result;
    v10 = 24942;
LABEL_302:
    v5 = v10 | 0x73700000;
    goto LABEL_426;
  }
  if (v3 != 1936482681 && v3 != 1936483696)
  {
    v5 = 1936553332;
    goto LABEL_426;
  }
  return result;
}

uint64_t HALB_Info::IsAVTProperty(HALB_Info *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 0;
  if (v1 > 1819501421)
  {
    if (v1 > 1935896177)
    {
      if ((v1 - 1935896178) < 2 || v1 == 1936941934)
        return 1;
      v3 = 1936941931;
    }
    else if (v1 > 1835295853)
    {
      if (v1 == 1835295854)
        return 1;
      v3 = 1885954665;
    }
    else
    {
      if (v1 == 1819501422)
        return 1;
      v3 = 1835295843;
    }
LABEL_22:
    if (v1 != v3)
      return result;
    return 1;
  }
  if (v1 > 1685416291)
  {
    if (v1 > 1818455659)
    {
      if (v1 == 1818455660)
        return 1;
      v3 = 1818456942;
    }
    else
    {
      if (v1 == 1685416292)
        return 1;
      v3 = 1751740524;
    }
    goto LABEL_22;
  }
  if (v1 > 1668506474)
  {
    if (v1 == 1668506475)
      return 1;
    v3 = 1668506478;
    goto LABEL_22;
  }
  if (v1 != 1667787120)
  {
    v3 = 1668181110;
    goto LABEL_22;
  }
  return 1;
}

uint64_t HALB_Info::PropertyRequiresHogMode(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = (int)this;
  result = 1;
  if (v2 > 1735750500)
  {
    if (v2 <= 1818850161)
    {
      if (v2 == 1735750501)
        return 0;
      v4 = 1818850145;
    }
    else
    {
      if (v2 == 1818850162 || v2 == 1937077093)
        return 0;
      v4 = 1919512167;
    }
    goto LABEL_14;
  }
  if (v2 <= 1634758773)
  {
    if (v2 == 1634755428)
      return 0;
    v4 = 1634758765;
LABEL_14:
    if (v2 != v4)
      return result;
    return 0;
  }
  if (v2 != 1634758774 && v2 != 1651730810)
  {
    v4 = 1718839674;
    goto LABEL_14;
  }
  return 0;
}

uint64_t HALB_Info::IsIOContextProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = (int)this;
  result = 0;
  if (v2 <= 1852012898)
  {
    if (v2 <= 1684108386)
    {
      if (v2 <= 1634955891)
      {
        if (v2 == 1633970532)
          return 1;
        v4 = 1634300531;
      }
      else
      {
        if (v2 == 1634955892 || v2 == 1651730810)
          return 1;
        v4 = 1651735075;
      }
    }
    else if (v2 > 1735354733)
    {
      if (v2 == 1735354734 || v2 == 1735750501)
        return 1;
      v4 = 1752135523;
    }
    else
    {
      if (v2 == 1684108387 || v2 == 1718839674)
        return 1;
      v4 = 1718843939;
    }
LABEL_31:
    if (v2 != v4)
      return result;
    return 1;
  }
  if (v2 > 1935959153)
  {
    if (v2 > 1937077092)
    {
      if (v2 == 1937077093 || v2 == 2003398256)
        return 1;
      v4 = 1986425722;
    }
    else
    {
      if (v2 == 1935959154 || v2 == 1936482681)
        return 1;
      v4 = 1937010788;
    }
    goto LABEL_31;
  }
  if (v2 > 1902539641)
  {
    if (v2 == 1902539642 || v2 == 1919773028)
      return 1;
    v4 = 1935763060;
    goto LABEL_31;
  }
  if (v2 != 1852012899 && v2 != 1869838183)
  {
    v4 = 1870030194;
    goto LABEL_31;
  }
  return 1;
}

uint64_t HALB_Info::IsReallyGlobalDeviceProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = (int)this;
  result = 0;
  if (v2 > 1768907635)
  {
    if (v2 <= 1886156134)
    {
      if (v2 > 1851878769)
      {
        if (v2 <= 1869180522)
        {
          if (v2 > 1853059618)
          {
            if (v2 == 1853059619)
              return 1;
            v4 = 1853059700;
          }
          else
          {
            if (v2 == 1851878770)
              return 1;
            v4 = 1852012899;
          }
        }
        else if (v2 <= 1869838182)
        {
          if (v2 == 1869180523)
            return 1;
          v4 = 1869638759;
        }
        else
        {
          if (v2 == 1869838183 || v2 == 1870030194)
            return 1;
          v4 = 1870098020;
        }
      }
      else if (v2 <= 1819173228)
      {
        if (v2 > 1819107690)
        {
          if (v2 == 1819107691)
            return 1;
          v4 = 1819111268;
        }
        else
        {
          if (v2 == 1768907636)
            return 1;
          v4 = 1818850926;
        }
      }
      else if (v2 <= 1819634019)
      {
        if (v2 == 1819173229)
          return 1;
        v4 = 1819569763;
      }
      else
      {
        if (v2 == 1819634020 || v2 == 1836411236)
          return 1;
        v4 = 1851878764;
      }
    }
    else if (v2 <= 1936618860)
    {
      if (v2 <= 1919251298)
      {
        if (v2 > 1886546293)
        {
          if (v2 == 1886546294)
            return 1;
          v4 = 1902539642;
        }
        else
        {
          if (v2 == 1886156135)
            return 1;
          v4 = 1886353266;
        }
      }
      else if (v2 <= 1919773027)
      {
        if (v2 == 1919251299)
          return 1;
        v4 = 1919251302;
      }
      else
      {
        if (v2 == 1919773028 || v2 == 1920168547)
          return 1;
        v4 = 1935959154;
      }
    }
    else if (v2 > 1953653101)
    {
      if (v2 <= 1986425721)
      {
        if (v2 == 1953653102)
          return 1;
        v4 = 1969841184;
      }
      else
      {
        if (v2 == 1986425722 || v2 == 2003398256)
          return 1;
        v4 = 2003136116;
      }
    }
    else if (v2 <= 1937010787)
    {
      if (v2 == 1936618861)
        return 1;
      v4 = 1937007734;
    }
    else
    {
      if (v2 == 1937010788 || v2 == 1937077093)
        return 1;
      v4 = 1952542820;
    }
    goto LABEL_106;
  }
  if (v2 <= 1684301170)
  {
    if (v2 > 1667330159)
    {
      if (v2 <= 1668049763)
      {
        if (v2 > 1667658617)
        {
          if (v2 == 1667658618)
            return 1;
          v4 = 1668047219;
        }
        else
        {
          if (v2 == 1667330160)
            return 1;
          v4 = 1667523955;
        }
      }
      else if (v2 <= 1668639075)
      {
        if (v2 == 1668049764)
          return 1;
        v4 = 1668575852;
      }
      else
      {
        if (v2 == 1668639076 || v2 == 1684107364)
          return 1;
        v4 = 1684108387;
      }
    }
    else if (v2 <= 1634429293)
    {
      if (v2 > 1634169455)
      {
        if (v2 == 1634169456)
          return 1;
        v4 = 1634300531;
      }
      else
      {
        if (v2 == 1633906541)
          return 1;
        v4 = 1633970532;
      }
    }
    else if (v2 <= 1634955891)
    {
      if (v2 == 1634429294)
        return 1;
      v4 = 1634496615;
    }
    else
    {
      if (v2 == 1634955892 || v2 == 1635087471)
        return 1;
      v4 = 1650682995;
    }
LABEL_106:
    if (v2 != v4)
      return result;
    return 1;
  }
  if (v2 <= 1719105133)
  {
    if (v2 <= 1685089382)
    {
      if (v2 > 1684893795)
      {
        if (v2 == 1684893796)
          return 1;
        v4 = 1685087596;
      }
      else
      {
        if (v2 == 1684301171)
          return 1;
        v4 = 1684629094;
      }
    }
    else if (v2 <= 1685287011)
    {
      if (v2 == 1685089383)
        return 1;
      v4 = 1685222501;
    }
    else
    {
      if (v2 == 1685287012 || v2 == 1718839674)
        return 1;
      v4 = 1718843939;
    }
    goto LABEL_106;
  }
  if (v2 > 1751737453)
  {
    if (v2 <= 1768124269)
    {
      if (v2 == 1751737454)
        return 1;
      v4 = 1752135523;
    }
    else
    {
      if (v2 == 1768124270 || v2 == 1768187246)
        return 1;
      v4 = 1768777573;
    }
    goto LABEL_106;
  }
  if (v2 <= 1735356004)
  {
    if (v2 == 1719105134)
      return 1;
    v4 = 1735354734;
    goto LABEL_106;
  }
  if (v2 != 1735356005 && v2 != 1751412337)
  {
    v4 = 1751474532;
    goto LABEL_106;
  }
  return 1;
}

uint64_t HALB_Info::IsLocalizedStringProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2;
  uint64_t result;
  unsigned __int16 v4;
  int v5;

  v2 = (int)this;
  result = 0;
  if (v2 > 1818456941)
  {
    if (v2 <= 1835101041)
    {
      if (v2 > 1819111267)
      {
        if (v2 != 1819111268 && v2 != 1819173229)
        {
          v5 = 1819501422;
          goto LABEL_31;
        }
        return 1;
      }
      if (v2 == 1818456942)
        return 1;
      v5 = 1819107691;
    }
    else
    {
      if (v2 <= 1851878756)
      {
        if (v2 != 1835101042 && v2 != 1835295843)
        {
          v5 = 1835295854;
          goto LABEL_31;
        }
        return 1;
      }
      if (v2 == 1851878757 || v2 == 1936941934)
        return 1;
      v5 = 1935894894;
    }
LABEL_31:
    if (v2 != v5)
      return result;
    return 1;
  }
  if (v2 <= 1668506477)
  {
    if (v2 > 1667788396)
    {
      if (v2 != 1667788397 && v2 != 1668181110)
      {
        v5 = 1668181613;
        goto LABEL_31;
      }
      return 1;
    }
    if (v2 == 1667460717)
      return 1;
    v5 = 1667787120;
    goto LABEL_31;
  }
  if (v2 > 1818454125)
  {
    if (v2 != 1818454126 && v2 != 1818455660)
    {
      v4 = 28270;
      goto LABEL_23;
    }
  }
  else if (v2 != 1668506478 && v2 != 1751740524)
  {
    v4 = 25454;
LABEL_23:
    v5 = v4 | 0x6C630000;
    goto LABEL_31;
  }
  return 1;
}

int *HALB_Info::TranslateDeviceAddressToControlAddress(int *this, const AudioObjectPropertyAddress *a2, unsigned int *a3, unsigned int *a4, AudioObjectPropertyAddress *a5)
{
  int v5;
  AudioObjectPropertySelector v6;
  unsigned int v7;
  AudioObjectPropertySelector v8;
  AudioObjectPropertySelector v9;
  AudioObjectPropertySelector v10;
  AudioObjectPropertySelector v11;
  AudioObjectPropertySelector v12;
  AudioObjectPropertySelector v13;
  AudioObjectPropertySelector v14;
  AudioObjectPropertySelector v15;
  AudioObjectPropertySelector v16;

  a2->mSelector = 0;
  *a3 = this[1];
  *(_QWORD *)(a4 + 1) = 1735159650;
  v5 = *this;
  if (*this <= 1852601890)
  {
    if (v5 > 1818455659)
    {
      if (v5 > 1836281890)
      {
        if (v5 > 1836462706)
        {
          if (v5 > 1836475489)
          {
            if (v5 != 1836475490)
            {
              if (v5 != 1836479331)
              {
                if (v5 != 1836479590)
                  return this;
                a2->mSelector = 1986817381;
                *a3 = 1886679669;
                goto LABEL_164;
              }
              a2->mSelector = 1986817381;
              *a3 = 1886679669;
LABEL_144:
              v7 = 1818456950;
              goto LABEL_107;
            }
            a2->mSelector = 1986817381;
            *a3 = 1886679669;
LABEL_147:
            v7 = 1818453110;
            goto LABEL_107;
          }
          if (v5 != 1836462707)
          {
            if (v5 != 1836475427)
              return this;
            v7 = 1818453106;
            v11 = 1986817381;
            goto LABEL_173;
          }
          a2->mSelector = 1986817381;
          *a3 = 1886679669;
LABEL_178:
          v7 = 1818453107;
          goto LABEL_107;
        }
        if (v5 > 1836414052)
        {
          v6 = 1836414053;
          if (v5 != 1836414053)
          {
            if (v5 == 1836462692)
            {
              a2->mSelector = 1986817381;
              *a3 = 1886679669;
LABEL_141:
              v7 = 1818456932;
              goto LABEL_107;
            }
            return this;
          }
          goto LABEL_105;
        }
        if (v5 != 1836281891)
        {
          if (v5 != 1836281966)
            return this;
          a2->mSelector = 1936744814;
          *a3 = 1886679669;
          v7 = 1936745334;
          goto LABEL_107;
        }
        a2->mSelector = 1936744814;
        *a3 = 1886679669;
        goto LABEL_155;
      }
      if (v5 <= 1835295778)
      {
        if (v5 > 1819501421)
        {
          if (v5 != 1819501422)
          {
            v6 = 1819504226;
            goto LABEL_104;
          }
          v10 = 1685287523;
        }
        else if (v5 == 1818455660)
        {
          v10 = 1852601964;
        }
        else
        {
          if (v5 != 1818456942)
            return this;
          v10 = 1668047723;
        }
        goto LABEL_167;
      }
      if (v5 <= 1835295853)
      {
        if (v5 == 1835295779)
        {
          v7 = 1935892841;
          v6 = 1684370292;
          goto LABEL_106;
        }
        if (v5 != 1835295843)
          return this;
        v10 = 1684370292;
        goto LABEL_167;
      }
      if (v5 == 1835295854)
      {
        a2->mSelector = 1684370292;
        v7 = 1835295854;
        goto LABEL_107;
      }
      if (v5 != 1835295859)
        return this;
      v14 = 1684370292;
    }
    else
    {
      if (v5 > 1684157045)
      {
        if (v5 <= 1751740517)
        {
          if (v5 > 1718432369)
          {
            v6 = 1718432370;
            if (v5 != 1718432370)
            {
              if (v5 == 1751740451)
              {
                v7 = 1935892841;
                v6 = 1751740518;
                goto LABEL_106;
              }
              return this;
            }
            goto LABEL_105;
          }
          if (v5 == 1684157046)
          {
            v16 = 1986817381;
LABEL_177:
            a2->mSelector = v16;
            goto LABEL_178;
          }
          v6 = 1684895092;
          goto LABEL_104;
        }
        if (v5 > 1769174369)
        {
          if (v5 == 1769174370)
          {
            v7 = 1650685548;
            v6 = 1635017576;
            goto LABEL_106;
          }
          v6 = 1784767339;
          if (v5 == 1784767339)
            goto LABEL_105;
          v6 = 1815241314;
          goto LABEL_104;
        }
        v9 = 1751740518;
        if (v5 == 1751740518)
          goto LABEL_133;
        if (v5 != 1751740524)
          return this;
        v10 = 1751740518;
LABEL_167:
        a2->mSelector = v10;
        v7 = 1935894894;
        goto LABEL_107;
      }
      if (v5 <= 1668506402)
      {
        if (v5 > 1668049263)
        {
          if (v5 != 1668049264)
          {
            if (v5 != 1668181110)
              return this;
            a2->mSelector = 1852601964;
            v7 = 1668181110;
            goto LABEL_107;
          }
          v7 = 1650685548;
          v6 = 1668049264;
          goto LABEL_106;
        }
        v6 = 1650602615;
        if (v5 != 1650602615)
        {
          if (v5 != 1667787120)
            return this;
          a2->mSelector = 1751740518;
          v7 = 1667787120;
          goto LABEL_107;
        }
        goto LABEL_105;
      }
      if (v5 <= 1668506477)
      {
        if (v5 == 1668506403)
        {
          v7 = 1935892841;
          v6 = 1668047723;
          goto LABEL_106;
        }
        if (v5 != 1668506475)
          return this;
        a2->mSelector = 1668047723;
LABEL_151:
        v7 = 1668049771;
        goto LABEL_107;
      }
      if (v5 == 1668506478)
      {
        a2->mSelector = 1668047723;
        v7 = 1668506478;
        goto LABEL_107;
      }
      if (v5 != 1668510307)
        return this;
      v14 = 1668047723;
    }
LABEL_169:
    a2->mSelector = v14;
    goto LABEL_170;
  }
  if (v5 <= 1936941930)
  {
    if (v5 > 1936748066)
    {
      if (v5 > 1936811877)
      {
        if (v5 > 1936811890)
        {
          if (v5 != 1936811891)
          {
            if (v5 != 1936811892)
            {
              if (v5 != 1936941859)
                return this;
              v7 = 1935892841;
              v6 = 1685287523;
              goto LABEL_106;
            }
            v13 = 1936028007;
            goto LABEL_140;
          }
          v8 = 1936028007;
LABEL_138:
          a2->mSelector = v8;
          goto LABEL_144;
        }
        if (v5 != 1936811878)
        {
          if (v5 != 1936811890)
            return this;
          v7 = 1818453106;
          v6 = 1936028007;
          goto LABEL_106;
        }
        v16 = 1936028007;
        goto LABEL_177;
      }
      if (v5 > 1936811108)
      {
        if (v5 == 1936811109)
        {
          a2->mSelector = 1936028002;
          v7 = 1651272548;
          goto LABEL_107;
        }
        if (v5 != 1936811876)
          return this;
        v12 = 1936028007;
        goto LABEL_146;
      }
      if (v5 != 1936748067)
      {
        if (v5 != 1936811108)
          return this;
        v7 = 1651272546;
        v6 = 1936028002;
        goto LABEL_106;
      }
      a2->mSelector = 1936744814;
LABEL_155:
      v7 = 1936745315;
      goto LABEL_107;
    }
    if (v5 > 1935946357)
    {
      if (v5 > 1936682094)
      {
        v6 = 1936682095;
        if (v5 != 1936682095)
        {
          if (v5 == 1936744814)
          {
            a2->mSelector = 1936744814;
            v7 = 1936745334;
            goto LABEL_107;
          }
          return this;
        }
        goto LABEL_105;
      }
      if (v5 != 1935946358)
      {
        if (v5 != 1936553332)
          return this;
        v7 = 1650685548;
        v6 = 1937072749;
        goto LABEL_106;
      }
      v16 = 1937072758;
      goto LABEL_177;
    }
    if (v5 <= 1885888877)
    {
      if (v5 == 1852601891)
      {
        v7 = 1935892841;
        v6 = 1852601964;
        goto LABEL_106;
      }
      v9 = 1852601964;
      if (v5 != 1852601964)
        return this;
LABEL_133:
      a2->mSelector = v9;
LABEL_170:
      v7 = 1935893353;
      goto LABEL_107;
    }
    v6 = 1885888878;
    if (v5 == 1885888878)
      goto LABEL_105;
    v6 = 1885893481;
LABEL_104:
    if (v5 != v6)
      return this;
    goto LABEL_105;
  }
  if (v5 <= 1952542819)
  {
    if (v5 > 1937138722)
    {
      if (v5 > 1937140844)
      {
        if (v5 != 1937140845)
        {
          if (v5 != 1937142886)
          {
            v6 = 1952541794;
            goto LABEL_104;
          }
          v15 = 1937072758;
          goto LABEL_163;
        }
        v8 = 1937072758;
        goto LABEL_138;
      }
      if (v5 == 1937138723)
      {
        v7 = 1818453106;
        v6 = 1937072758;
        goto LABEL_106;
      }
      if (v5 != 1937140836)
        return this;
      v12 = 1937072758;
      goto LABEL_146;
    }
    if (v5 <= 1936945762)
    {
      if (v5 != 1936941931)
      {
        if (v5 != 1936941934)
          return this;
        a2->mSelector = 1685287523;
        v7 = 1936941934;
        goto LABEL_107;
      }
      a2->mSelector = 1685287523;
      goto LABEL_151;
    }
    if (v5 != 1936945763)
    {
      if (v5 == 1937125988)
      {
        v13 = 1937072758;
LABEL_140:
        a2->mSelector = v13;
        goto LABEL_141;
      }
      return this;
    }
    v14 = 1685287523;
    goto LABEL_169;
  }
  if (v5 > 1986229349)
  {
    if (v5 <= 1987013731)
    {
      if (v5 != 1986229350)
      {
        if (v5 != 1986290211)
          return this;
        v7 = 1818453106;
        v6 = 1986817381;
        goto LABEL_106;
      }
      v15 = 1986817381;
LABEL_163:
      a2->mSelector = v15;
LABEL_164:
      v7 = 1818457190;
      goto LABEL_107;
    }
    if (v5 != 1987013732)
    {
      v6 = 1999790690;
      if (v5 != 1999790690)
      {
        if (v5 != 1987013741)
          return this;
        v8 = 1986817381;
        goto LABEL_138;
      }
LABEL_105:
      v7 = 1650685548;
LABEL_106:
      a2->mSelector = v6;
LABEL_107:
      *a4 = v7;
      return this;
    }
    v12 = 1986817381;
LABEL_146:
    a2->mSelector = v12;
    goto LABEL_147;
  }
  if (v5 <= 1953002100)
  {
    if (v5 == 1952542820)
    {
      v7 = 1650685548;
      v6 = 1702259059;
      goto LABEL_106;
    }
    if (v5 != 1953002099)
      return this;
    v7 = 1650685548;
    v11 = 1936682095;
LABEL_173:
    a2->mSelector = v11;
    *a3 = 1886679669;
    goto LABEL_107;
  }
  if (v5 == 1953002101)
  {
    v7 = 1650685548;
    v11 = 1836414053;
    goto LABEL_173;
  }
  if (v5 == 1983013986)
  {
    v13 = 1986817381;
    goto LABEL_140;
  }
  return this;
}

void AMCP::DAL::Ring_Buffer_Base::translate_range(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[32];
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 104))(*(_QWORD *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0.0;
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v16, a1);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v18, &v16, 0.0, v6);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v18, a2);
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B5B27F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::receive_zeros(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _BYTE v61[32];
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  __int128 v71;
  _QWORD v72[3];
  uint64_t v73;
  std::__shared_weak_count *v74;
  _BYTE v75[32];
  std::__shared_weak_count *v76;
  double *v77[3];
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _BYTE v86[32];
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  const AMCP::DAL::DAL_Time_Range *v89;

  v78 = *a3;
  v5 = *((_QWORD *)a3 + 3);
  v79 = *((_QWORD *)a3 + 2);
  v80 = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  v81 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v82 = *(__int128 *)((char *)a3 + 40);
  v9 = *((_QWORD *)a3 + 8);
  v83 = *((_QWORD *)a3 + 7);
  v84 = v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
  v85 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v78, (uint64_t)v86);
  v13 = v85;
  if (v85)
  {
    v14 = (unint64_t *)&v85->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v81;
  if (v81)
  {
    v17 = (unint64_t *)&v81->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v77, v89, (uint64_t)v86);
  v19 = v77[0];
  v20 = v77[1];
  while (v19 != v20)
  {
    AMCP::DAL::Container::erase_range(*(_QWORD *)(a1 + 88));
    v19 += 12;
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v67, (AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v72, &v67);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
  if (*((_QWORD *)&v69[0] + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v69[0] + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v61, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v67, (uint64_t)v75, (AMCP::DAL::DAL_Time_Delta *)v61);
  v27 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v72, (AMCP::DAL::DAL_Time *)&v67);
  if (v27)
    v28 = &v67;
  else
    v28 = (__int128 *)v72;
  v63 = *v28;
  v64 = *((_QWORD *)v28 + 2);
  v29 = v69;
  if (!v27)
    v29 = (__int128 *)&v73;
  v30 = *(_QWORD *)v29;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
  v32 = v74;
  if (v27)
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
  v65 = v30;
  v66 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
  }
  if (v31)
  {
    v35 = (unint64_t *)&v31->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v37 = v62;
  if (v62)
  {
    v38 = (unint64_t *)&v62->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v67, (const AMCP::DAL::DAL_Time *)&v63, (const AMCP::DAL::DAL_Time *)v75);
  *(_OWORD *)(a1 + 8) = v67;
  *(_QWORD *)(a1 + 24) = v68;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 32, v69);
  *(_OWORD *)(a1 + 48) = v69[1];
  *(_QWORD *)(a1 + 64) = v70;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 72, &v71);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
  if (*((_QWORD *)&v69[0] + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v69[0] + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v66;
  if (v66)
  {
    v47 = (unint64_t *)&v66->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v76;
  if (v76)
  {
    v50 = (unint64_t *)&v76->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v74;
  if (v74)
  {
    v53 = (unint64_t *)&v74->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v72[0] = v77;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v72);
  v55 = v88;
  if (v88)
  {
    v56 = (unint64_t *)&v88->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v87;
  if (v87)
  {
    v59 = (unint64_t *)&v87->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1B5B2841C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v40);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  a30 = &a40;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a30);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41 - 72);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41 - 112);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_allowed_read_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  return (*(uint64_t (**)(AMCP::DAL::Ring_Buffer_Base *))(*(_QWORD *)this + 64))(this);
}

void AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  __int128 v22;

  v4 = *(std::__shared_weak_count **)(a3 + 32);
  v16 = *(_QWORD *)(a3 + 24);
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v18, &v16, 0.0, 0.0);
  *(_OWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = v19;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 32, v20);
  *(_OWORD *)(a1 + 48) = v20[1];
  *(_QWORD *)(a1 + 64) = v21;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 72, &v22);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B5B28614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::reset_time(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  __int128 v22;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  v3 = a1 + 32;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v18, &v16, 0.0, 0.0);
  v6 = v3 - 24;
  *(_OWORD *)v6 = v18;
  *(_QWORD *)(v6 + 16) = v19;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v3, v20);
  *(_OWORD *)(a1 + 48) = v20[1];
  *(_QWORD *)(a1 + 64) = v21;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 72, &v22);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B5B28778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::create_readable_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  std::logic_error *exception;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::logic_error v11;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::logic_error v18;
  std::logic_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  _BYTE v27[10];
  __int16 v28;
  int v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v27;
  v2 = **(NSObject ***)buf;
  if (*(_QWORD *)v27)
  {
    v3 = (unint64_t *)(*(_QWORD *)v27 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)v27 = 2080;
    *(_QWORD *)&v27[2] = "Ring_Buffer.cpp";
    v28 = 1024;
    v29 = 227;
    *(_WORD *)v30 = 2080;
    *(_QWORD *)&v30[2] = "not (false)";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s A range is required when reading from a ring buffer", buf, 0x22u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
  exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"A range is required when reading from a ring buffer", (uint64_t)&v17);
  std::logic_error::logic_error(&v18, &v17);
  v8 = MEMORY[0x1E0DE5018];
  v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  std::logic_error::logic_error(&v19, &v18);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = -1;
  v19.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
  v20 = &unk_1E69A1230;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
  *(_QWORD *)&v30[8] = "virtual Readable_Range AMCP::DAL::Ring_Buffer_Base::create_readable_range() const";
  *(_QWORD *)&v30[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
  v31 = 227;
  std::vector<void *>::vector(&v12);
  v9 = backtrace((void **)v12, (*((_QWORD *)&v12 + 1) - (_QWORD)v12) >> 3);
  std::vector<void *>::resize((char **)&v12, v9);
  v15 = v12;
  v16 = v13;
  v12 = 0uLL;
  v13 = 0;
  v14 = off_1E69A20A0;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v14);
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
  std::logic_error::logic_error(exception, (const std::logic_error *)buf);
  exception->__vftable = (std::logic_error_vtbl *)(v8 + 16);
  exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
  v10 = *(_QWORD *)v30;
  exception[1].__imp_.__imp_ = *(const char **)v30;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = *(std::logic_error *)&v30[8];
  LODWORD(exception[3].__vftable) = v31;
  exception[2] = v11;
  exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
  exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
}

void AMCP::DAL::Ring_Buffer_Base::create_readable_range(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  double range;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  void *exception;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::logic_error v56;
  std::logic_error v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _QWORD v64[4];
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  uint8_t buf[8];
  __int16 v68;
  char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  _BYTE v73[28];
  __int16 v74;
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  __int16 v78;
  unint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 72))(v64);
  v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v64, a2);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      range = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v64);
      AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v64);
      v32 = v31;
      v33 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
      AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
      *(_DWORD *)buf = 67111170;
      *(_DWORD *)&buf[4] = v29;
      v68 = 2080;
      v69 = "Ring_Buffer.cpp";
      v70 = 1024;
      v71 = 244;
      v72 = 2080;
      *(_QWORD *)v73 = "not (valid_range.encompasses(range))";
      *(_WORD *)&v73[8] = 2048;
      *(_QWORD *)&v73[10] = a1;
      *(_WORD *)&v73[18] = 2048;
      *(_QWORD *)&v73[20] = vcvtmd_s64_f64(range);
      v74 = 2048;
      v75 = vcvtmd_s64_f64(v32);
      v76 = 2048;
      v77 = vcvtmd_s64_f64(v33);
      v78 = 2048;
      v79 = vcvtmd_s64_f64(v34);
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring Buffer %p: valid range [%lld %lld] does not encompass requested range [%lld %lld]", buf, 0x54u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    v35 = a1;
    exception = __cxa_allocate_exception(0x40uLL);
    v37 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v64);
    AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v64);
    v39 = v38;
    v40 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
    AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
    caulk::make_string((caulk *)"Ring Buffer %p: valid range [%lld %lld] does not encompass requested range [%lld %lld]", (uint64_t)&v55, v35, vcvtmd_s64_f64(v37), vcvtmd_s64_f64(v39), vcvtmd_s64_f64(v40), vcvtmd_s64_f64(v41));
    std::logic_error::logic_error(&v56, &v55);
    v56.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v58 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    *(_QWORD *)&v73[6] = "virtual Readable_Range AMCP::DAL::Ring_Buffer_Base::create_readable_range(DAL_Time_Range) const";
    *(_QWORD *)&v73[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    *(_DWORD *)&v73[22] = 244;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
    v53 = v50;
    v54 = v51;
    v50 = 0uLL;
    v51 = 0;
    v52 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v42 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v43 = *(_QWORD *)(a2 + 16);
  v44 = v7;
  v8 = *(std::__shared_weak_count **)(a2 + 32);
  v45 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v46 = *(_OWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 64);
  v47 = *(_QWORD *)(a2 + 56);
  v48 = v11;
  v12 = *(std::__shared_weak_count **)(a2 + 72);
  v49 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AMCP::DAL::Readable_Range::Readable_Range(a3, (uint64_t)&v42, a1);
  v15 = v49;
  if (v49)
  {
    v16 = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v45;
  if (v45)
  {
    v19 = (unint64_t *)&v45->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v66;
  if (v66)
  {
    v22 = (unint64_t *)&v66->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v65;
  if (v65)
  {
    v25 = (unint64_t *)&v65->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1B5B28F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v50 - 192);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v50 - 232);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::create_writable_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  std::logic_error *exception;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::logic_error v11;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::logic_error v18;
  std::logic_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  _BYTE v27[10];
  __int16 v28;
  int v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v1 = *(std::__shared_weak_count **)v27;
  v2 = **(NSObject ***)buf;
  if (*(_QWORD *)v27)
  {
    v3 = (unint64_t *)(*(_QWORD *)v27 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)v27 = 2080;
    *(_QWORD *)&v27[2] = "Ring_Buffer.cpp";
    v28 = 1024;
    v29 = 235;
    *(_WORD *)v30 = 2080;
    *(_QWORD *)&v30[2] = "not (false)";
    _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s A range is required when writing to a ring buffer", buf, 0x22u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
  exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"A range is required when writing to a ring buffer", (uint64_t)&v17);
  std::logic_error::logic_error(&v18, &v17);
  v8 = MEMORY[0x1E0DE5018];
  v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  std::logic_error::logic_error(&v19, &v18);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = -1;
  v19.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
  v20 = &unk_1E69A1230;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
  *(_QWORD *)&v30[8] = "virtual Writable_Range AMCP::DAL::Ring_Buffer_Base::create_writable_range() const";
  *(_QWORD *)&v30[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
  v31 = 235;
  std::vector<void *>::vector(&v12);
  v9 = backtrace((void **)v12, (*((_QWORD *)&v12 + 1) - (_QWORD)v12) >> 3);
  std::vector<void *>::resize((char **)&v12, v9);
  v15 = v12;
  v16 = v13;
  v12 = 0uLL;
  v13 = 0;
  v14 = off_1E69A20A0;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v14);
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
  std::logic_error::logic_error(exception, (const std::logic_error *)buf);
  exception->__vftable = (std::logic_error_vtbl *)(v8 + 16);
  exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
  v10 = *(_QWORD *)v30;
  exception[1].__imp_.__imp_ = *(const char **)v30;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = *(std::logic_error *)&v30[8];
  LODWORD(exception[3].__vftable) = v31;
  exception[2] = v11;
  exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
  exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
  exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
}

void AMCP::DAL::Ring_Buffer_Base::create_writable_range(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  const char *imp;
  void *exception;
  double v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  char v48[8];
  double v49;
  std::string v50;
  std::logic_error v51;
  std::logic_error v52;
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59[8];
  double v60;
  uint64_t v61;
  uint8_t buf[8];
  __int16 v63;
  char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  _BYTE v68[28];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a2 + 5), (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v52, a1);
  v7 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v52, (uint64_t)buf);
  v8 = v7;
  v9 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)&v68[6];
  if (*(_QWORD *)&v68[6])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v68[6] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v52, v6, (AMCP::DAL::DAL_Time *)a2);
      if (((uint64_t)v52.__vftable & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v52);
      imp = v52.__imp_.__imp_;
      AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v59, a1);
      if ((v59[0] & 2) == 0)
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v59);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v31;
      v63 = 2080;
      v64 = "Ring_Buffer.cpp";
      v65 = 1024;
      v66 = 255;
      v67 = 2080;
      *(_QWORD *)v68 = "not (range.length() <= get_length_in_frames())";
      *(_WORD *)&v68[8] = 2048;
      *(_QWORD *)&v68[10] = vcvtmd_s64_f64(*(double *)&imp);
      *(_WORD *)&v68[18] = 2048;
      *(_QWORD *)&v68[20] = vcvtmd_s64_f64(v60);
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s range too large for ring buffer: range size: %llu  ring buffer size: %llu", buf, 0x36u);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v61);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v54);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    exception = __cxa_allocate_exception(0x40uLL);
    AMCP::DAL::DAL_Time::operator-((uint64_t)v59, v6, (AMCP::DAL::DAL_Time *)a2);
    if ((v59[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v59);
    v34 = v60;
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v48, a1);
    if ((v48[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v48);
    caulk::make_string((caulk *)"range too large for ring buffer: range size: %llu  ring buffer size: %llu", (uint64_t)&v50, vcvtmd_s64_f64(v34), vcvtmd_s64_f64(v49));
    std::logic_error::logic_error(&v51, &v50);
    v51.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v51);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(_QWORD *)&v68[6] = "virtual Writable_Range AMCP::DAL::Ring_Buffer_Base::create_writable_range(DAL_Time_Range) const";
    *(_QWORD *)&v68[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    *(_DWORD *)&v68[22] = 255;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
    v46 = v43;
    v47 = v44;
    v43 = 0uLL;
    v44 = 0;
    v45 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v45);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v35 = *(_OWORD *)a2;
  v15 = a2[3];
  v36 = a2[2];
  v37 = v15;
  v16 = (std::__shared_weak_count *)a2[4];
  v38 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v39 = *(_OWORD *)v6;
  v20 = a2[8];
  v19 = (std::__shared_weak_count *)a2[9];
  v40 = *((_QWORD *)v6 + 2);
  v41 = v20;
  v42 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, (uint64_t)&v35, a1);
  v23 = v42;
  if (v42)
  {
    v24 = (unint64_t *)&v42->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1B5B298F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v44 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::commit_direct_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE v39[32];
  std::__shared_weak_count *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47[2];
  uint64_t v48;
  __int128 v49;
  _BYTE v50[24];
  uint64_t v51;
  std::__shared_weak_count *v52;
  _BYTE v53[32];
  std::__shared_weak_count *v54;

  v4 = a1 + 8;
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v45, (AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a3 + 16));
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v50, &v45);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
  if (*((_QWORD *)&v47[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v47[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v39, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v45, (uint64_t)v53, (AMCP::DAL::DAL_Time_Delta *)v39);
  v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v50, (AMCP::DAL::DAL_Time *)&v45);
  if (v11)
    v12 = &v45;
  else
    v12 = (__int128 *)v50;
  v41 = *v12;
  v42 = *((_QWORD *)v12 + 2);
  v13 = v47;
  if (!v11)
    v13 = (__int128 *)&v51;
  v14 = *(_QWORD *)v13;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
  v16 = v52;
  if (v11)
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
  v43 = v14;
  v44 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v45, (const AMCP::DAL::DAL_Time *)&v41, (const AMCP::DAL::DAL_Time *)v53);
  *(_OWORD *)v4 = v45;
  *(_QWORD *)(v4 + 16) = v46;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 32, v47);
  *(_OWORD *)(a1 + 48) = v47[1];
  *(_QWORD *)(a1 + 64) = v48;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 72, &v49);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v47[0] + 1);
  if (*((_QWORD *)&v47[0] + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v47[0] + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v54;
  if (v54)
  {
    v34 = (unint64_t *)&v54->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v52;
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1B5B29DB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 104);
  _Unwind_Resume(a1);
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range(uint64_t a1, AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a3)
{
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 result;
  AMCP::DAL::DAL_Time *v8;
  AMCP::DAL::DAL_Time *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v6 = (AMCP::DAL::DAL_Time *)((char *)this + 40);
  result = AMCP::DAL::DAL_Time::operator<(this, (AMCP::DAL::DAL_Time *)((char *)this + 40));
  if (result)
  {
    v8 = (AMCP::DAL::DAL_Time *)((char *)a3 + 40);
    result = AMCP::DAL::DAL_Time::operator<(a3, (AMCP::DAL::DAL_Time *)((char *)a3 + 40));
    if (result)
    {
      if (!AMCP::DAL::DAL_Time::operator<(a3, this))
        a3 = this;
      result = AMCP::DAL::DAL_Time::operator<(v6, v8);
      if (result)
        v9 = v8;
      else
        v9 = v6;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v10 = *((_QWORD *)a3 + 3);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)(a1 + 24) = v10;
      v11 = *((_QWORD *)a3 + 4);
      *(_QWORD *)(a1 + 32) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
      v14 = *((_QWORD *)v9 + 3);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)v9 + 2);
      *(_QWORD *)(a1 + 64) = v14;
      v15 = *((_QWORD *)v9 + 4);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)this;
      v21 = *((_QWORD *)this + 3);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)this + 2);
      *(_QWORD *)(a1 + 24) = v21;
      v22 = *((_QWORD *)this + 4);
      *(_QWORD *)(a1 + 32) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
      v25 = *((_QWORD *)this + 8);
      v15 = *((_QWORD *)this + 9);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)v6 + 2);
      *(_QWORD *)(a1 + 64) = v25;
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v16 = *((_QWORD *)a3 + 3);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
    *(_QWORD *)(a1 + 24) = v16;
    v17 = *((_QWORD *)a3 + 4);
    *(_QWORD *)(a1 + 32) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)((char *)a3 + 40);
    v20 = *((_QWORD *)a3 + 8);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 7);
    *(_QWORD *)(a1 + 64) = v20;
    v15 = *((_QWORD *)a3 + 9);
  }
  *(_QWORD *)(a1 + 72) = v15;
  if (v15)
  {
    v26 = (unint64_t *)(v15 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return result;
}

void AMCP::DAL::Ring_Buffer::~Ring_Buffer(AMCP::DAL::Ring_Buffer *this)
{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = off_1E6993620;
  v2 = (char *)this + 72;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  JUMPOUT(0x1B5E50688);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::receive_data(_QWORD *a1, uint64_t a2, AMCP::DAL::DAL_Time *a3)
{
  _BOOL8 v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *exception;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  std::string v30;
  std::logic_error v31;
  char v32;
  std::logic_error v33;
  void *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  uint8_t buf[8];
  __int16 v41;
  char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  _BYTE v46[14];
  const char *v47;
  int v48;
  std::__shared_weak_count *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint8_t *__return_ptr))(*a1 + 64))(buf);
  v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v47);
  if (v5)
  {
    (*(void (**)(std::logic_error *__return_ptr, _QWORD *))(*a1 + 64))(&v33, a1);
    v5 = AMCP::DAL::DAL_Time::operator<(a3, (AMCP::DAL::DAL_Time *)&v37);
    v6 = v5;
    v7 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = !v6;
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = 1;
  }
  v14 = v49;
  if (v49)
  {
    v15 = (unint64_t *)&v49->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)&v46[6];
  if (*(_QWORD *)&v46[6])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v46[6] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((v10 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      v41 = 2080;
      v42 = "Ring_Buffer.cpp";
      v43 = 1024;
      v44 = 300;
      v45 = 2080;
      *(_QWORD *)v46 = "not (get_time_range().is_empty() or new_audio.get_time_range().start() >= get_time_range().end())";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write only allows writes at or after the end of the ring buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write only allows writes at or after the end of the ring buffer", (uint64_t)&v30);
    std::logic_error::logic_error(&v31, &v30);
    v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v33, &v31);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = -1;
    v33.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v34 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(_QWORD *)&v46[6] = "virtual void AMCP::DAL::Ring_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v48 = 300;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    v27 = off_1E69A20A0;
    v28 = v25;
    v29 = v26;
    v25 = 0uLL;
    v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v27);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return AMCP::DAL::Ring_Buffer_Base::receive_data_write(a1, (uint64_t)a3);
}

void sub_1B5B2A388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::receive_data_at_range(_QWORD *a1, uint64_t a2, uint64_t a3, AMCP::DAL::DAL_Time *a4)
{
  _BOOL8 v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  __int128 v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  std::string v32;
  std::logic_error v33;
  char v34;
  std::logic_error v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  __int16 v43;
  char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE v48[14];
  const char *v49;
  int v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint8_t *__return_ptr))(*a1 + 64))(buf);
  v7 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v49);
  if (v7)
  {
    (*(void (**)(std::logic_error *__return_ptr, _QWORD *))(*a1 + 64))(&v35, a1);
    v7 = AMCP::DAL::DAL_Time::operator<(a4, (AMCP::DAL::DAL_Time *)&v39);
    v8 = v7;
    v9 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = !v8;
    v13 = v38;
    if (v38)
    {
      v14 = (unint64_t *)&v38->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v12 = 1;
  }
  v16 = v51;
  if (v51)
  {
    v17 = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(std::__shared_weak_count **)&v48[6];
  if (*(_QWORD *)&v48[6])
  {
    v20 = (unint64_t *)(*(_QWORD *)&v48[6] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if ((v12 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      v43 = 2080;
      v44 = "Ring_Buffer.cpp";
      v45 = 1024;
      v46 = 308;
      v47 = 2080;
      *(_QWORD *)v48 = "not (get_time_range().is_empty() or write_range.start() >= get_time_range().end())";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write only allows writes at or after the end of the ring buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write only allows writes at or after the end of the ring buffer", (uint64_t)&v32);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v35, &v33);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v36 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(_QWORD *)&v48[6] = "virtual void AMCP::DAL::Ring_Buffer::receive_data_at_range(const Source_ID &, const Readable_Ra"
                         "nge &, const DAL_Time_Range &)";
    v49 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v50 = 308;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    v29 = off_1E69A20A0;
    v30 = v27;
    v31 = v28;
    v27 = 0uLL;
    v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v29);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(a1, a3, a4);
}

void sub_1B5B2A818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37 - 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::get_direct_write_ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  AMCP::DAL::Ring_Buffer_Base::translate_range(a1, a2);
  v5 = v39;
  for (i = v40; v5 != i; v5 += 96)
  {
    v7 = *(_OWORD *)(v5 + 16);
    v31[0] = *(_OWORD *)v5;
    v8 = *(_QWORD *)(v5 + 40);
    v32 = *(_QWORD *)(v5 + 32);
    v31[1] = v7;
    v9 = *(std::__shared_weak_count **)(v5 + 48);
    v33 = v8;
    v34 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(_OWORD *)(v5 + 56);
    v13 = *(_QWORD *)(v5 + 80);
    v36 = *(_QWORD *)(v5 + 72);
    v35 = v12;
    v14 = *(std::__shared_weak_count **)(v5 + 88);
    v37 = v13;
    v38 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(_QWORD *)(a1 + 96);
    v30.n128_u64[0] = *(_QWORD *)(a1 + 88);
    v30.n128_u64[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(a3, (uint64_t)v31, &v30);
    v20 = (std::__shared_weak_count *)v30.n128_u64[1];
    if (v30.n128_u64[1])
    {
      v21 = (unint64_t *)(v30.n128_u64[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  *(_QWORD *)&v31[0] = &v39;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v31);
}

void sub_1B5B2AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;

  v6 = a1 + 2;
  v7 = a1[2];
  v8 = a1[1];
  if (v8 >= v7)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - *a1) >> 4);
    if ((unint64_t)(v11 + 1) > 0x249249249249249)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x124924924924924)
      v14 = 0x249249249249249;
    else
      v14 = v13;
    v20 = v6;
    if (v14)
      v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>((caulk::rt_safe_memory_resource *)v14);
    else
      v15 = 0;
    v16 = v14;
    v17 = v14 + 112 * v11;
    v19 = (char *)(v14 + 112 * v15);
    std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(v17, a2, a3);
    v18 = v17 + 112;
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(a1, &v16);
    v10 = a1[1];
    std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(v8, a2, a3);
    v10 = v9 + 112;
  }
  a1[1] = v10;
}

__n128 std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *a3;
  *(__n128 *)(a1 + 96) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  AMCP::DAL::DAL_Time *v5;
  _BOOL8 v6;
  uint64_t *v7;
  _BOOL8 is_compatible;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 v13;
  _BOOL8 v14;
  _BOOL4 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL8 v33;
  BOOL v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  AMCP::DAL::DAL_Time *v41;
  uint8_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  double *v73;
  double *v74;
  double v75;
  double sample_time;
  double v77;
  double v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _BOOL4 v122;
  _QWORD *v123;
  __int128 *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  NSObject *v151;
  _opaque_pthread_t *v152;
  mach_port_t v153;
  void *exception;
  NSObject *v155;
  _opaque_pthread_t *v156;
  mach_port_t v157;
  void *v158;
  NSObject *v159;
  _opaque_pthread_t *v160;
  mach_port_t v161;
  void *v162;
  NSObject *v163;
  _opaque_pthread_t *v164;
  mach_port_t v165;
  void *v166;
  NSObject *v167;
  _opaque_pthread_t *v168;
  mach_port_t v169;
  void *v170;
  NSObject *v171;
  _opaque_pthread_t *v172;
  mach_port_t v173;
  void *v174;
  AMCP::DAL::DAL_Time *v175;
  std::string v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::logic_error v183;
  void *v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::logic_error v191;
  void *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  _BYTE v197[24];
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::logic_error v200;
  void *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  std::logic_error v208;
  uint8_t buf[8];
  _BYTE v210[10];
  __int16 v211;
  int v212;
  __int16 v213;
  _BYTE v214[14];
  const char *v215;
  int v216;
  std::__shared_weak_count *v217;
  const AMCP::DAL::DAL_Time_Range *v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v5 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v151 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      v152 = pthread_self();
      v153 = pthread_mach_thread_np(v152);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v153;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 76;
      v213 = 2080;
      *(_QWORD *)v214 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v151, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: Bad time range (start > end)", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: Bad time range (start > end)", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 76;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(buf);
  v7 = a1 + 11;
  is_compatible = AMCP::DAL::Container::container_is_compatible(a1[11], *(uint64_t *)buf);
  v9 = is_compatible;
  v10 = *(std::__shared_weak_count **)v210;
  if (*(_QWORD *)v210)
  {
    v11 = (unint64_t *)(*(_QWORD *)v210 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v155 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      v156 = pthread_self();
      v157 = pthread_mach_thread_np(v156);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v157;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 77;
      v213 = 2080;
      *(_QWORD *)v214 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1B57BA000, v155, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    v158 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: Containers Are Not Compatible", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 77;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v158, (uint64_t)buf);
  }
  v13 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v5);
  if (!v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v159 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      v160 = pthread_self();
      v161 = pthread_mach_thread_np(v160);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v161;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 78;
      v213 = 2080;
      *(_QWORD *)v214 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1B57BA000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: doesnt allow writes of zero length data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    v162 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: doesnt allow writes of zero length data", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 78;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v162, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v5, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v200, (uint64_t)a1);
  v14 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v200, (uint64_t)buf);
  v15 = v14;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(std::__shared_weak_count **)&v214[6];
  if (*(_QWORD *)&v214[6])
  {
    v20 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v163 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
    {
      v164 = pthread_self();
      v165 = pthread_mach_thread_np(v164);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v165;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 79;
      v213 = 2080;
      *(_QWORD *)v214 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1B57BA000, v163, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: doesnt allow writes that are larger than the ring buffer's size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    v166 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 79;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v166, (uint64_t)buf);
  }
  v22 = a1[4];
  v23 = (std::__shared_weak_count *)a1[5];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = *(_QWORD *)(a2 + 24);
  v27 = *(std::__shared_weak_count **)(a2 + 32);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v23)
  {
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v22 != v26)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v167 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
    {
      v168 = pthread_self();
      v169 = pthread_mach_thread_np(v168);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v169;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 80;
      v213 = 2080;
      *(_QWORD *)v214 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1B57BA000, v167, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: All times must use the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    v170 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: All times must use the same clock", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 80;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v170, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v200, v5, (AMCP::DAL::DAL_Time *)a2);
  v33 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v200);
  v34 = v33;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(std::__shared_weak_count **)&v214[6];
  if (*(_QWORD *)&v214[6])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (!v34)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v171 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
    {
      v172 = pthread_self();
      v173 = pthread_mach_thread_np(v172);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v173;
      *(_WORD *)v210 = 2080;
      *(_QWORD *)&v210[2] = "Ring_Buffer.cpp";
      v211 = 1024;
      v212 = 81;
      v213 = 2080;
      *(_QWORD *)v214 = "not (write_range.length() == new_audio.get_time_range().length())";
      _os_log_error_impl(&dword_1B57BA000, v171, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: source audio data length must match write range length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v181);
    v174 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: source audio data length must match write range length", (uint64_t)&v177);
    std::logic_error::logic_error(&v208, &v177);
    v208.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v200, &v208);
    v202 = 0uLL;
    *(_QWORD *)&v203 = 0;
    DWORD2(v203) = -1;
    v200.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v201 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v200);
    *(_QWORD *)&v214[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    v215 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v216 = 81;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v206);
    *(_OWORD *)&v197[8] = v206;
    *(_QWORD *)v197 = off_1E69A20A0;
    v198 = v207;
    v206 = 0uLL;
    v207 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v197);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v174, (uint64_t)buf);
  }
  v41 = (AMCP::DAL::DAL_Time *)(a1 + 6);
  v175 = (AMCP::DAL::DAL_Time *)(a1 + 1);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 1), (AMCP::DAL::DAL_Time *)(a1 + 6))
    && AMCP::DAL::DAL_Time::operator<(v41, (AMCP::DAL::DAL_Time *)a3))
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v197, (uint64_t)a1);
    boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)buf, (uint64_t)a3, (AMCP::DAL::DAL_Time_Delta *)v197);
    if (AMCP::DAL::DAL_Time::operator<(v41, (AMCP::DAL::DAL_Time *)buf))
      v42 = buf;
    else
      v42 = (uint8_t *)(a1 + 6);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v200, (const AMCP::DAL::DAL_Time *)v42, (const AMCP::DAL::DAL_Time *)a3);
    v43 = *(std::__shared_weak_count **)&v214[6];
    if (*(_QWORD *)&v214[6])
    {
      v44 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v199;
    if (v199)
    {
      v47 = (unint64_t *)&v199->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v191 = v200;
    v192 = v201;
    v193 = v202;
    if (*((_QWORD *)&v202 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v194 = v203;
    v195 = v204;
    v196 = v205;
    if (*((_QWORD *)&v205 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v191, (uint64_t)buf);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
    if (*((_QWORD *)&v196 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    if (*((_QWORD *)&v193 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v197, v218, (uint64_t)buf);
    v59 = *(_QWORD *)v197;
    v60 = *(_QWORD *)&v197[8];
    while (v59 != v60)
    {
      AMCP::DAL::Container::erase_range(*v7);
      v59 += 96;
    }
    v177.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v177);
    v61 = v217;
    if (v217)
    {
      v62 = (unint64_t *)&v217->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = *(std::__shared_weak_count **)&v214[6];
    if (*(_QWORD *)&v214[6])
    {
      v65 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
    if (*((_QWORD *)&v205 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v206, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  v73 = (double *)*((_QWORD *)&v206 + 1);
  v74 = (double *)v206;
  if ((_QWORD)v206 != *((_QWORD *)&v206 + 1))
  {
    v75 = 0.0;
    do
    {
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a3);
      v78 = *v74;
      v77 = v74[1];
      v79 = (std::__shared_weak_count *)a3[4];
      v189 = a3[3];
      v190 = v79;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v200, &v189, v75 + sample_time, v75 + sample_time + v77 - v78);
      v82 = v190;
      if (v190)
      {
        v83 = (unint64_t *)&v190->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v183 = v200;
      v184 = v201;
      v185 = v202;
      if (*((_QWORD *)&v202 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v186 = v203;
      v187 = v204;
      v188 = v205;
      if (*((_QWORD *)&v205 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v183, (uint64_t)buf);
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
      if (*((_QWORD *)&v188 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
      if (*((_QWORD *)&v185 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v197, v218, (uint64_t)buf);
      v95 = *(_QWORD *)v197;
      v96 = *(_QWORD *)&v197[8];
      v97 = 0.0;
      while (v95 != v96)
      {
        v98 = v97 + *v74;
        if (round(*(double *)(v95 + 8) - *(double *)v95) >= round(v74[1] - v98))
          v99 = v74[1] - v98;
        else
          v99 = *(double *)(v95 + 8) - *(double *)v95;
        *(double *)&v177.__r_.__value_.__l.__data_ = v97 + *v74;
        *(double *)&v177.__r_.__value_.__l.__size_ = v98 + v99;
        v100 = v99 + *(double *)v95;
        v208.__vftable = *(std::logic_error_vtbl **)v95;
        *(double *)&v208.__imp_.__imp_ = v100;
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(&v181);
        v179 = 0;
        v180 = 0;
        AMCP::DAL::Container::copy_from_this_container(&v181, (uint64_t)&v177, v7, (double *)&v208);
        v101 = v182;
        if (v182)
        {
          v102 = (unint64_t *)&v182->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v97 = v97 + v99;
        v95 += 96;
      }
      v177.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v177);
      v104 = v217;
      if (v217)
      {
        v105 = (unint64_t *)&v217->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = *(std::__shared_weak_count **)&v214[6];
      if (*(_QWORD *)&v214[6])
      {
        v108 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
      if (*((_QWORD *)&v205 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
      if (*((_QWORD *)&v202 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v75 = v75 + v97;
      v74 += 12;
    }
    while (v74 != v73);
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v200, v175, (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (__int128 *)&v200);
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v177, (uint64_t)a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v200, (uint64_t)&v215, (AMCP::DAL::DAL_Time_Delta *)&v177);
  v122 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v200);
  if (v122)
    v123 = &v200;
  else
    v123 = buf;
  *(_OWORD *)v197 = *(_OWORD *)v123;
  *(_QWORD *)&v197[16] = v123[2];
  v124 = &v202;
  if (!v122)
    v124 = (__int128 *)&v213;
  v125 = *(_QWORD *)v124;
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  v127 = *(std::__shared_weak_count **)&v214[6];
  if (v122)
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  v198 = v125;
  v199 = v127;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  }
  if (v126)
  {
    v130 = (unint64_t *)&v126->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v132 = v178;
  if (v178)
  {
    v133 = (unint64_t *)&v178->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v200, (const AMCP::DAL::DAL_Time *)v197, (const AMCP::DAL::DAL_Time *)&v215);
  *(std::logic_error *)v175 = v200;
  a1[3] = v201;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(a1 + 4), &v202);
  *((_OWORD *)a1 + 3) = v203;
  a1[8] = v204;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(a1 + 9), &v205);
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v199;
  if (v199)
  {
    v142 = (unint64_t *)&v199->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v217;
  if (v217)
  {
    v145 = (unint64_t *)&v217->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = *(std::__shared_weak_count **)&v214[6];
  if (*(_QWORD *)&v214[6])
  {
    v148 = (unint64_t *)(*(_QWORD *)&v214[6] + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  *(_QWORD *)buf = &v206;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B5B2C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v63 - 160);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v63 - 200);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_write(_QWORD *a1, uint64_t a2)
{
  AMCP::DAL::DAL_Time *v4;
  _BOOL8 v5;
  _BOOL8 is_compatible;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL8 v11;
  _BOOL8 v12;
  _BOOL4 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint8_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  const char *imp;
  double *v81;
  double v82;
  double v83;
  std::__shared_weak_count *size;
  unint64_t *v85;
  unint64_t v86;
  double v87;
  double v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _BOOL4 v101;
  _QWORD *v102;
  __int128 *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  NSObject *v130;
  _opaque_pthread_t *v131;
  mach_port_t v132;
  void *exception;
  NSObject *v134;
  _opaque_pthread_t *v135;
  mach_port_t v136;
  void *v137;
  NSObject *v138;
  _opaque_pthread_t *v139;
  mach_port_t v140;
  void *v141;
  NSObject *v142;
  _opaque_pthread_t *v143;
  mach_port_t v144;
  void *v145;
  NSObject *v146;
  _opaque_pthread_t *v147;
  mach_port_t v148;
  void *v149;
  uint64_t v150;
  AMCP::DAL::DAL_Time *v151;
  std::string v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::logic_error v164;
  void *v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  _BYTE v170[24];
  uint64_t v171;
  std::__shared_weak_count *v172;
  std::logic_error v173;
  void *v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  std::logic_error v181;
  char v182;
  uint8_t buf[8];
  _BYTE v184[10];
  __int16 v185;
  int v186;
  __int16 v187;
  _BYTE v188[14];
  const char *v189;
  int v190;
  std::__shared_weak_count *v191;
  const AMCP::DAL::DAL_Time_Range *v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v130 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      v131 = pthread_self();
      v132 = pthread_mach_thread_np(v131);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v132;
      *(_WORD *)v184 = 2080;
      *(_QWORD *)&v184[2] = "Ring_Buffer.cpp";
      v185 = 1024;
      v186 = 30;
      v187 = 2080;
      *(_QWORD *)v188 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v130, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::RecieveData: Bad time range (start > end)", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::RecieveData: Bad time range (start > end)", (uint64_t)&v152);
    std::logic_error::logic_error(&v181, &v152);
    v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v173, &v181);
    v175 = 0uLL;
    *(_QWORD *)&v176 = 0;
    DWORD2(v176) = -1;
    v173.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v174 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v173);
    *(_QWORD *)&v188[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    v189 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v190 = 30;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v179);
    *(_OWORD *)&v170[8] = v179;
    *(_QWORD *)v170 = off_1E69A20A0;
    v171 = v180;
    v179 = 0uLL;
    v180 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v170);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(buf);
  is_compatible = AMCP::DAL::Container::container_is_compatible(a1[11], *(uint64_t *)buf);
  v7 = is_compatible;
  v8 = *(std::__shared_weak_count **)v184;
  if (*(_QWORD *)v184)
  {
    v9 = (unint64_t *)(*(_QWORD *)v184 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v134 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
    {
      v135 = pthread_self();
      v136 = pthread_mach_thread_np(v135);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v136;
      *(_WORD *)v184 = 2080;
      *(_QWORD *)&v184[2] = "Ring_Buffer.cpp";
      v185 = 1024;
      v186 = 31;
      v187 = 2080;
      *(_QWORD *)v188 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1B57BA000, v134, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::WriteTo: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
    v137 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v152);
    std::logic_error::logic_error(&v181, &v152);
    v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v173, &v181);
    v175 = 0uLL;
    *(_QWORD *)&v176 = 0;
    DWORD2(v176) = -1;
    v173.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v174 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v173);
    *(_QWORD *)&v188[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    v189 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v190 = 31;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v179);
    *(_OWORD *)&v170[8] = v179;
    *(_QWORD *)v170 = off_1E69A20A0;
    v171 = v180;
    v179 = 0uLL;
    v180 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v170);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v137, (uint64_t)buf);
  }
  v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v4);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v138 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
    {
      v139 = pthread_self();
      v140 = pthread_mach_thread_np(v139);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v140;
      *(_WORD *)v184 = 2080;
      *(_QWORD *)&v184[2] = "Ring_Buffer.cpp";
      v185 = 1024;
      v186 = 32;
      v187 = 2080;
      *(_QWORD *)v188 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1B57BA000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes of zero length data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
    v141 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes of zero length data", (uint64_t)&v152);
    std::logic_error::logic_error(&v181, &v152);
    v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v173, &v181);
    v175 = 0uLL;
    *(_QWORD *)&v176 = 0;
    DWORD2(v176) = -1;
    v173.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v174 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v173);
    *(_QWORD *)&v188[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    v189 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v190 = 32;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v179);
    *(_OWORD *)&v170[8] = v179;
    *(_QWORD *)v170 = off_1E69A20A0;
    v171 = v180;
    v179 = 0uLL;
    v180 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v170);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v141, (uint64_t)buf);
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v4, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v173, (uint64_t)a1);
  v12 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v173, (uint64_t)buf);
  v13 = v12;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)&v188[6];
  if (*(_QWORD *)&v188[6])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v188[6] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v142 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
    {
      v143 = pthread_self();
      v144 = pthread_mach_thread_np(v143);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v144;
      *(_WORD *)v184 = 2080;
      *(_QWORD *)&v184[2] = "Ring_Buffer.cpp";
      v185 = 1024;
      v186 = 33;
      v187 = 2080;
      *(_QWORD *)v188 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1B57BA000, v142, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
    v145 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v152);
    std::logic_error::logic_error(&v181, &v152);
    v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v173, &v181);
    v175 = 0uLL;
    *(_QWORD *)&v176 = 0;
    DWORD2(v176) = -1;
    v173.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v174 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v173);
    *(_QWORD *)&v188[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    v189 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v190 = 33;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v179);
    *(_OWORD *)&v170[8] = v179;
    *(_QWORD *)v170 = off_1E69A20A0;
    v171 = v180;
    v179 = 0uLL;
    v180 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v170);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v145, (uint64_t)buf);
  }
  v21 = a1[4];
  v22 = (std::__shared_weak_count *)a1[5];
  v20 = a1 + 4;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v26 = *(_QWORD *)(a2 + 24);
  v25 = *(std::__shared_weak_count **)(a2 + 32);
  if (v25)
  {
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v20 = a1 + 4;
    }
  }
  if (v22)
  {
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      v32 = v20;
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v20 = v32;
    }
  }
  if (v21 != v26)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v146 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      v147 = pthread_self();
      v148 = pthread_mach_thread_np(v147);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v148;
      *(_WORD *)v184 = 2080;
      *(_QWORD *)&v184[2] = "Ring_Buffer.cpp";
      v185 = 1024;
      v186 = 34;
      v187 = 2080;
      *(_QWORD *)v188 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1B57BA000, v146, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write: All times must use the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
    v149 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write: All times must use the same clock", (uint64_t)&v152);
    std::logic_error::logic_error(&v181, &v152);
    v181.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v173, &v181);
    v175 = 0uLL;
    *(_QWORD *)&v176 = 0;
    DWORD2(v176) = -1;
    v173.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v174 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v173);
    *(_QWORD *)&v188[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    v189 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v190 = 34;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v179);
    *(_OWORD *)&v170[8] = v179;
    *(_QWORD *)v170 = off_1E69A20A0;
    v171 = v180;
    v179 = 0uLL;
    v180 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v170);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v149, (uint64_t)buf);
  }
  v150 = (uint64_t)v20;
  v151 = (AMCP::DAL::DAL_Time *)(v20 - 3);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v20 - 3), (AMCP::DAL::DAL_Time *)(a1 + 6))
    && AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 6), (AMCP::DAL::DAL_Time *)a2))
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v170, (uint64_t)a1);
    boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)buf, a2, (AMCP::DAL::DAL_Time_Delta *)v170);
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 6), (AMCP::DAL::DAL_Time *)buf))
      v33 = buf;
    else
      v33 = (uint8_t *)(a1 + 6);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v173, (const AMCP::DAL::DAL_Time *)v33, (const AMCP::DAL::DAL_Time *)a2);
    v34 = *(std::__shared_weak_count **)&v188[6];
    if (*(_QWORD *)&v188[6])
    {
      v35 = (unint64_t *)(*(_QWORD *)&v188[6] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v172;
    if (v172)
    {
      v38 = (unint64_t *)&v172->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v164 = v173;
    v165 = v174;
    v166 = v175;
    if (*((_QWORD *)&v175 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v167 = v176;
    v168 = v177;
    v169 = v178;
    if (*((_QWORD *)&v178 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v164, (uint64_t)buf);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    if (*((_QWORD *)&v169 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v170, v192, (uint64_t)buf);
    v50 = *(_QWORD *)v170;
    v51 = *(_QWORD *)&v170[8];
    while (v50 != v51)
    {
      AMCP::DAL::Container::erase_range(a1[11]);
      v50 += 96;
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v152);
    v52 = v191;
    if (v191)
    {
      v53 = (unint64_t *)&v191->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)&v188[6];
    if (*(_QWORD *)&v188[6])
    {
      v56 = (unint64_t *)(*(_QWORD *)&v188[6] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
    if (*((_QWORD *)&v178 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
    if (*((_QWORD *)&v175 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v179, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  v65 = *((_QWORD *)&v179 + 1);
  for (i = v179; i != v65; i += 96)
  {
    v156 = *(_OWORD *)(i + 16);
    v66 = *(_QWORD *)(i + 40);
    v157 = *(_QWORD *)(i + 32);
    v158 = v66;
    v67 = *(std::__shared_weak_count **)(i + 48);
    v159 = v67;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    v160 = *(_OWORD *)(i + 56);
    v70 = *(_QWORD *)(i + 80);
    v161 = *(_QWORD *)(i + 72);
    v71 = *(std::__shared_weak_count **)(i + 88);
    v162 = v70;
    v163 = v71;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v156, (uint64_t)buf);
    v74 = v163;
    if (v163)
    {
      v75 = (unint64_t *)&v163->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v159;
    if (v159)
    {
      v78 = (unint64_t *)&v159->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v173, v192, (uint64_t)buf);
    v81 = (double *)v173.__vftable;
    imp = v173.__imp_.__imp_;
    if (v173.__vftable != (std::logic_error_vtbl *)v173.__imp_.__imp_)
    {
      v82 = 0.0;
      do
      {
        v83 = v82 + *(double *)i + v81[1] - *v81;
        *(double *)v170 = v82 + *(double *)i;
        *(double *)&v170[8] = v83;
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(&v152);
        v154 = 0;
        v155 = 0;
        AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v152, (uint64_t)v170, a1 + 11, v81);
        size = (std::__shared_weak_count *)v152.__r_.__value_.__l.__size_;
        if (v152.__r_.__value_.__l.__size_)
        {
          v85 = (unint64_t *)(v152.__r_.__value_.__l.__size_ + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v88 = *v81;
        v87 = v81[1];
        v81 += 12;
        v82 = v82 + v87 - v88;
      }
      while (v81 != (double *)imp);
    }
    *(_QWORD *)v170 = &v173;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v170);
    v89 = v191;
    if (v191)
    {
      v90 = (unint64_t *)&v191->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = *(std::__shared_weak_count **)&v188[6];
    if (*(_QWORD *)&v188[6])
    {
      v93 = (unint64_t *)(*(_QWORD *)&v188[6] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v173, v151, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (__int128 *)&v173);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v152, (uint64_t)a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v173, (uint64_t)&v189, (AMCP::DAL::DAL_Time_Delta *)&v152);
  v101 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v173);
  if (v101)
    v102 = &v173;
  else
    v102 = buf;
  *(_OWORD *)v170 = *(_OWORD *)v102;
  *(_QWORD *)&v170[16] = v102[2];
  v103 = &v175;
  if (!v101)
    v103 = (__int128 *)&v187;
  v104 = *(_QWORD *)v103;
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  v106 = *(std::__shared_weak_count **)&v188[6];
  if (v101)
    v106 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  v171 = v104;
  v172 = v106;
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  }
  if (v105)
  {
    v109 = (unint64_t *)&v105->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v111 = v153;
  if (v153)
  {
    v112 = (unint64_t *)&v153->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v173, (const AMCP::DAL::DAL_Time *)v170, (const AMCP::DAL::DAL_Time *)&v189);
  *(std::logic_error *)v151 = v173;
  *((_QWORD *)v151 + 2) = v174;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v150, &v175);
  *((_OWORD *)a1 + 3) = v176;
  a1[8] = v177;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(a1 + 9), &v178);
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v172;
  if (v172)
  {
    v121 = (unint64_t *)&v172->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v191;
  if (v191)
  {
    v124 = (unint64_t *)&v191->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = *(std::__shared_weak_count **)&v188[6];
  if (*(_QWORD *)&v188[6])
  {
    v127 = (unint64_t *)(*(_QWORD *)&v188[6] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  *(_QWORD *)buf = &v179;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B5B2DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v58 - 144);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v58 - 184);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

AMCP::DAL::Ring_Buffer_Base *AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base(AMCP::DAL::Ring_Buffer_Base *this, const CA::StreamDescription *a2, const AMCP::DAL::DAL_Time_Delta *a3)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_1E6993620;
  v6 = (char *)this + 8;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  v14 = *((_QWORD *)a3 + 3);
  v15 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v6, &v14, 0.0, 0.0);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((*(_BYTE *)a3 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate(a3);
  AMCP::DAL::Container::Container((_QWORD *)this + 11, (uint64_t)a2, *((double *)a3 + 1));
  return this;
}

void sub_1B5B2E164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_mix(_QWORD *a1, uint64_t a2)
{
  AMCP::DAL::DAL_Time *v4;
  _BOOL8 v5;
  _BOOL8 is_compatible;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL8 v11;
  _BOOL8 v12;
  _BOOL4 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL8 v31;
  BOOL v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL8 v39;
  BOOL v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  double *v47;
  double *i;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  double *v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _BOOL8 v70;
  AMCP::Log::Scope_Registry *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  double v86;
  double v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v95;
  NSObject *v96;
  unint64_t *v97;
  unint64_t v98;
  _opaque_pthread_t *v99;
  mach_port_t v100;
  std::logic_error *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  std::logic_error v105;
  std::__shared_weak_count *v106;
  NSObject *v107;
  unint64_t *v108;
  unint64_t v109;
  _opaque_pthread_t *v110;
  mach_port_t v111;
  std::logic_error *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  std::logic_error v116;
  NSObject *v117;
  _opaque_pthread_t *v118;
  mach_port_t v119;
  void *exception;
  NSObject *v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  void *v124;
  NSObject *v125;
  _opaque_pthread_t *v126;
  mach_port_t v127;
  void *v128;
  NSObject *v129;
  _opaque_pthread_t *v130;
  mach_port_t v131;
  void *v132;
  NSObject *v133;
  _opaque_pthread_t *v134;
  mach_port_t v135;
  void *v136;
  NSObject *v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  void *v140;
  NSObject *v141;
  _opaque_pthread_t *v142;
  mach_port_t v143;
  void *v144;
  AMCP::Log::Scope_Registry *v145;
  std::__shared_weak_count *v146;
  double *v147;
  double *v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  double *v157;
  double *v158;
  std::logic_error v159;
  uint64_t v160;
  std::string v161;
  uint64_t v162;
  std::string v163;
  std::logic_error v164;
  void (**v165)();
  std::string v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  char v170;
  uint8_t v171[8];
  _BYTE v172[10];
  __int16 v173;
  int v174;
  __int16 v175;
  _BYTE v176[14];
  const char *v177;
  int v178;
  std::__shared_weak_count *v179;
  AMCP::DAL::DAL_Time_Range *v180;
  uint8_t buf[8];
  __int128 v182;
  _QWORD v183[3];
  int v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v117 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      v118 = pthread_self();
      v119 = pthread_mach_thread_np(v118);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v119;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 130;
      v175 = 2080;
      *(_QWORD *)v176 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1B57BA000, v117, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::RecieveData: Bad time range (start > end)", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::RecieveData: Bad time range (start > end)", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 130;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v171);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(v171);
  is_compatible = AMCP::DAL::Container::container_is_compatible(a1[11], *(uint64_t *)v171);
  v7 = is_compatible;
  v8 = *(std::__shared_weak_count **)v172;
  if (*(_QWORD *)v172)
  {
    v9 = (unint64_t *)(*(_QWORD *)v172 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v121 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v122 = pthread_self();
      v123 = pthread_mach_thread_np(v122);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v123;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 131;
      v175 = 2080;
      *(_QWORD *)v176 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1B57BA000, v121, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::WriteTo: Containers Are Not Compatible", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v124 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 131;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v124, (uint64_t)v171);
  }
  v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v4);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v125 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      v126 = pthread_self();
      v127 = pthread_mach_thread_np(v126);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v127;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 132;
      v175 = 2080;
      *(_QWORD *)v176 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes of zero length data", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v128 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes of zero length data", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v128, (uint64_t)v171);
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)v171, v4, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)buf, (uint64_t)a1);
  v12 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)v171);
  v13 = v12;
  v14 = (std::__shared_weak_count *)v183[1];
  if (v183[1])
  {
    v15 = (unint64_t *)(v183[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)&v176[6];
  if (*(_QWORD *)&v176[6])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v176[6] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v129 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
    {
      v130 = pthread_self();
      v131 = pthread_mach_thread_np(v130);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v131;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 133;
      v175 = 2080;
      *(_QWORD *)v176 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1B57BA000, v129, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v132 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v132, (uint64_t)v171);
  }
  v21 = a1[4];
  v20 = (std::__shared_weak_count *)a1[5];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v25 = *(_QWORD *)(a2 + 24);
  v24 = *(std::__shared_weak_count **)(a2 + 32);
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v20)
  {
    v29 = (unint64_t *)&v20->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v21 != v25)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v133 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
    {
      v134 = pthread_self();
      v135 = pthread_mach_thread_np(v134);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v135;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 134;
      v175 = 2080;
      *(_QWORD *)v176 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1B57BA000, v133, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write: All times must use the same clock", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v136 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write: All times must use the same clock", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 134;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v136, (uint64_t)v171);
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 64))(v171, a1);
  v31 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v171, (AMCP::DAL::DAL_Time *)&v177);
  v32 = v31;
  v33 = v179;
  if (v179)
  {
    v34 = (unint64_t *)&v179->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(std::__shared_weak_count **)&v176[6];
  if (*(_QWORD *)&v176[6])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v176[6] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (!v32)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v137 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
    {
      v138 = pthread_self();
      v139 = pthread_mach_thread_np(v138);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v139;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 136;
      v175 = 2080;
      *(_QWORD *)v176 = "not (not get_time_range().is_empty())";
      _os_log_error_impl(&dword_1B57BA000, v137, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v140 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 136;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v140, (uint64_t)v171);
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 64))(v171, a1);
  v39 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v171, a2);
  v40 = v39;
  v41 = v179;
  if (v179)
  {
    v42 = (unint64_t *)&v179->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(std::__shared_weak_count **)&v176[6];
  if (*(_QWORD *)&v176[6])
  {
    v45 = (unint64_t *)(*(_QWORD *)&v176[6] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (!v40)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v171, "com.apple.coreaudio", "AMCP");
    v141 = **(NSObject ***)v171;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v171);
    if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
    {
      v142 = pthread_self();
      v143 = pthread_mach_thread_np(v142);
      *(_DWORD *)v171 = 67109890;
      *(_DWORD *)&v171[4] = v143;
      *(_WORD *)v172 = 2080;
      *(_QWORD *)&v172[2] = "Ring_Buffer.cpp";
      v173 = 1024;
      v174 = 137;
      v175 = 2080;
      *(_QWORD *)v176 = "not (get_time_range().encompasses(new_audio.get_time_range()))";
      _os_log_error_impl(&dword_1B57BA000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v157);
    v144 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", (uint64_t)&v161);
    std::logic_error::logic_error(&v159, &v161);
    v159.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v159);
    memset(v183, 0, sizeof(v183));
    v184 = -1;
    *(_QWORD *)buf = off_1E69A1208;
    *((_QWORD *)&v182 + 1) = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v171, (uint64_t)buf);
    *(_QWORD *)&v176[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    v177 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    v178 = 137;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v163.__r_.__value_.__l.__data_);
    v166 = v163;
    v165 = (void (**)())off_1E69A20A0;
    memset(&v163, 0, sizeof(v163));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v171, (uint64_t)&v165);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v144, (uint64_t)v171);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v157, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  v47 = v157;
  for (i = v158; v47 != i; v47 += 12)
  {
    v149 = *((_OWORD *)v47 + 1);
    v49 = *((_QWORD *)v47 + 5);
    v150 = *((_QWORD *)v47 + 4);
    v151 = v49;
    v50 = (std::__shared_weak_count *)*((_QWORD *)v47 + 6);
    v152 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v153 = *(_OWORD *)(v47 + 7);
    v53 = *((_QWORD *)v47 + 10);
    v154 = *((_QWORD *)v47 + 9);
    v54 = (std::__shared_weak_count *)*((_QWORD *)v47 + 11);
    v155 = v53;
    v156 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v149, (uint64_t)v171);
    v57 = v156;
    if (v156)
    {
      v58 = (unint64_t *)&v156->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v152;
    if (v152)
    {
      v61 = (unint64_t *)&v152->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v147, v180, (uint64_t)v171);
    v64 = v147;
    v63 = v148;
    if (v147 != v148)
    {
      v65 = 0.0;
      do
      {
        v66 = *v47;
        v68 = *v64;
        v67 = v64[1];
        (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(**(_QWORD **)(a2 + 80) + 56))(&v145);
        v69 = *v64;
        v70 = AMCP::DAL::Container::container_is_compatible((uint64_t)v145, a1[11]);
        if (!v70)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v70);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v95 = (std::__shared_weak_count *)v182;
          v96 = **(NSObject ***)buf;
          if ((_QWORD)v182)
          {
            v97 = (unint64_t *)(v182 + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
          {
            v99 = pthread_self();
            v100 = pthread_mach_thread_np(v99);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v100;
            LOWORD(v182) = 2080;
            *(_QWORD *)((char *)&v182 + 2) = "Container.cpp";
            WORD5(v182) = 1024;
            HIDWORD(v182) = 153;
            LOWORD(v183[0]) = 2080;
            *(_QWORD *)((char *)v183 + 2) = "not (container_is_compatible(dest_container))";
            _os_log_error_impl(&dword_1B57BA000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::mix: Containers Are Not Compatible", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v170);
          v101 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Container::mix: Containers Are Not Compatible", (uint64_t)&v163);
          std::logic_error::logic_error(&v164, &v163);
          v102 = MEMORY[0x1E0DE5018];
          v164.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v165, &v164);
          v166.__r_.__value_.__r.__words[2] = 0;
          v167 = 0;
          v168 = 0;
          v169 = -1;
          v165 = off_1E69A1208;
          v166.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v165);
          v183[1] = "void AMCP::DAL::Container::mix(const Sample_Time_Range &, Container &, Sample_Time, DAL_Operation_Context_Ref)";
          v183[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
          v184 = 153;
          std::vector<void *>::vector(&v159);
          v103 = backtrace((void **)&v159.~logic_error, (unint64_t)(v159.__imp_.__imp_ - (const char *)v159.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v159, v103);
          *(std::logic_error *)&v161.__r_.__value_.__r.__words[1] = v159;
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          v162 = v160;
          v159.__vftable = 0;
          v159.__imp_.__imp_ = 0;
          v160 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v161);
          v101[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v101, (const std::logic_error *)buf);
          v101->__vftable = (std::logic_error_vtbl *)(v102 + 16);
          v101[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v104 = v183[0];
          v101[1].__imp_.__imp_ = (const char *)v183[0];
          if (v104)
            (*(void (**)(uint64_t))(*(_QWORD *)v104 + 24))(v104);
          v105 = *(std::logic_error *)&v183[1];
          LODWORD(v101[3].__vftable) = v184;
          v101[2] = v105;
          v101->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v101[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v101[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "mix");
        v71 = v145;
        if (v145)
        {
          v71 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint8_t *))(*(_QWORD *)v145 + 16))(v145, buf);
          v72 = (char)v71;
        }
        else
        {
          v72 = 0;
        }
        if (SHIBYTE(v182) < 0)
          operator delete(*(void **)buf);
        if ((v72 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(v71);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v106 = (std::__shared_weak_count *)v182;
          v107 = **(NSObject ***)buf;
          if ((_QWORD)v182)
          {
            v108 = (unint64_t *)(v182 + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            v110 = pthread_self();
            v111 = pthread_mach_thread_np(v110);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v111;
            LOWORD(v182) = 2080;
            *(_QWORD *)((char *)&v182 + 2) = "Container.cpp";
            WORD5(v182) = 1024;
            HIDWORD(v182) = 154;
            LOWORD(v183[0]) = 2080;
            *(_QWORD *)((char *)v183 + 2) = "not (dal_operation_is_supported(kDALOperationSettings_Mix))";
            _os_log_error_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::mix: container type does not support mixing", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v170);
          v112 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Container::mix: container type does not support mixing", (uint64_t)&v163);
          std::logic_error::logic_error(&v164, &v163);
          v113 = MEMORY[0x1E0DE5018];
          v164.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&v165, &v164);
          v166.__r_.__value_.__r.__words[2] = 0;
          v167 = 0;
          v168 = 0;
          v169 = -1;
          v165 = off_1E69A1208;
          v166.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v165);
          v183[1] = "void AMCP::DAL::Container::mix(const Sample_Time_Range &, Container &, Sample_Time, DAL_Operation_Context_Ref)";
          v183[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
          v184 = 154;
          std::vector<void *>::vector(&v159);
          v114 = backtrace((void **)&v159.~logic_error, (unint64_t)(v159.__imp_.__imp_ - (const char *)v159.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v159, v114);
          *(std::logic_error *)&v161.__r_.__value_.__r.__words[1] = v159;
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          v162 = v160;
          v159.__vftable = 0;
          v159.__imp_.__imp_ = 0;
          v160 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v161);
          v112[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
          std::logic_error::logic_error(v112, (const std::logic_error *)buf);
          v112->__vftable = (std::logic_error_vtbl *)(v113 + 16);
          v112[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
          v115 = v183[0];
          v112[1].__imp_.__imp_ = (const char *)v183[0];
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115);
          v116 = *(std::logic_error *)&v183[1];
          LODWORD(v112[3].__vftable) = v184;
          v112[2] = v116;
          v112->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
          v112[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
          v112[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
        }
        v73 = (uint64_t)v145;
        v74 = a1[12];
        *(_QWORD *)buf = a1[11];
        *(_QWORD *)&v182 = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v165 = 0;
        v166.__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(uint64_t, uint8_t *, void (***)(), double, double, double))(*(_QWORD *)v73 + 88))(v73, buf, &v165, v65 + v66, v65 + v66 + v67 - v68, v69);
        v77 = (std::__shared_weak_count *)v166.__r_.__value_.__r.__words[0];
        if (v166.__r_.__value_.__r.__words[0])
        {
          v78 = (unint64_t *)(v166.__r_.__value_.__r.__words[0] + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = (std::__shared_weak_count *)v182;
        if ((_QWORD)v182)
        {
          v81 = (unint64_t *)(v182 + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = v146;
        if (v146)
        {
          v84 = (unint64_t *)&v146->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v87 = *v64;
        v86 = v64[1];
        v64 += 12;
        v65 = v65 + v86 - v87;
      }
      while (v64 != v63);
    }
    *(_QWORD *)buf = &v147;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
    v88 = v179;
    if (v179)
    {
      v89 = (unint64_t *)&v179->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = *(std::__shared_weak_count **)&v176[6];
    if (*(_QWORD *)&v176[6])
    {
      v92 = (unint64_t *)(*(_QWORD *)&v176[6] + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  *(_QWORD *)v171 = &v157;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v171);
}

void sub_1B5B2F960(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::PropertiesChanged(HALS_NotificationManager *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, const AudioObjectPropertyAddress *a5)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  const HALS_Listener *v12;
  const HALS_Listener *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  const AudioObjectPropertyAddress *v19;
  int v21;
  int v23;
  void *v24;
  void **v25;
  void **v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  HALS_Listener *v36;
  unsigned int *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unsigned __int8 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const HALS_Listener *v48;
  unsigned int v49;
  _QWORD block[5];
  std::__shared_weak_count *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  HALS_Listener *v57;
  HALS_Listener *v58;
  unint64_t v59;
  int v60[2];
  std::__shared_weak_count *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 __p;
  uint64_t v66;
  void **v67;
  void **v68;
  unint64_t v69;
  HALB_Mutex *v70;
  int v71;

  v9 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v9 != -1)
  {
    v62 = HALS_NotificationManager::Initialize;
    v67 = &v62;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  v10 = mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)v60, this);
  if (*(_QWORD *)v60)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(*(_QWORD *)v60 + 8));
    v47 = v10;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v11 = *(unsigned int **)v60;
    v70 = (HALB_Mutex *)(*(_QWORD *)v60 + 184);
    v71 = HALB_Mutex::Lock((HALB_Mutex *)(*(_QWORD *)v60 + 184));
    v13 = (const HALS_Listener *)*((_QWORD *)v11 + 35);
    v12 = (const HALS_Listener *)*((_QWORD *)v11 + 36);
    if (v13 != v12)
    {
      v14 = a3;
      v49 = a3;
      v48 = v12;
      do
      {
        if (!*(_DWORD *)v13)
        {
          v67 = 0;
          v68 = 0;
          v69 = 0;
          if ((_DWORD)a3)
          {
            v15 = 0;
            v16 = 0;
            do
            {
              v17 = (_DWORD *)*((_QWORD *)v13 + 5);
              v18 = (_DWORD *)*((_QWORD *)v13 + 6);
              if (v17 != v18)
              {
                v19 = &a4[v16];
                while (1)
                {
                  if (*v17 == 707406378 || *v17 == v19->mSelector)
                  {
                    v21 = v17[1];
                    if (v21 == 707406378 || v21 == v19->mScope)
                    {
                      v23 = v17[2];
                      if (v23 == -1 || v23 == v19->mElement)
                        break;
                    }
                  }
                  v17 += 3;
                  if (v17 == v18)
                    goto LABEL_44;
                }
                if ((unint64_t)v15 >= v69)
                {
                  v26 = v67;
                  v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v67) >> 2);
                  v28 = v27 + 1;
                  if (v27 + 1 > 0x1555555555555555)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v69 - (_QWORD)v67) >> 2) > v28)
                    v28 = 0x5555555555555556 * ((uint64_t)(v69 - (_QWORD)v67) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)v67) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v29 = 0x1555555555555555;
                  else
                    v29 = v28;
                  if (v29)
                    v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v29);
                  else
                    v30 = 0;
                  v31 = *(_QWORD *)&v19->mSelector;
                  v32 = v29 + 12 * v27;
                  *(_DWORD *)(v32 + 8) = v19->mElement;
                  *(_QWORD *)v32 = v31;
                  v33 = v32;
                  if (v15 != v26)
                  {
                    do
                    {
                      v34 = *(uint64_t *)((char *)v15 - 12);
                      v15 = (void **)((char *)v15 - 12);
                      v35 = *((_DWORD *)v15 + 2);
                      *(_QWORD *)(v33 - 12) = v34;
                      v33 -= 12;
                      *(_DWORD *)(v33 + 8) = v35;
                    }
                    while (v15 != v26);
                    v15 = v67;
                  }
                  v25 = (void **)(v32 + 12);
                  v67 = (void **)v33;
                  v68 = (void **)(v32 + 12);
                  v69 = v29 + 12 * v30;
                  if (v15)
                    operator delete(v15);
                }
                else
                {
                  v24 = *(void **)&v19->mSelector;
                  *((_DWORD *)v15 + 2) = v19->mElement;
                  *v15 = v24;
                  v25 = (void **)((char *)v15 + 12);
                }
                v68 = v25;
                v15 = v25;
              }
LABEL_44:
              ++v16;
            }
            while (v16 != v14);
            a3 = v49;
            v12 = v48;
            if (v67 != v15)
            {
              v15 = v67;
              std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v62, v13, (uint64_t)&v67);
              v36 = v58;
              if ((unint64_t)v58 >= v59)
              {
                v58 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v57, (uint64_t)&v62);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              else
              {
                *(_QWORD *)v58 = v62;
                *(_OWORD *)((char *)v36 + 8) = v63;
                *(_OWORD *)((char *)v36 + 24) = v64;
                v63 = 0uLL;
                *((_QWORD *)v36 + 6) = 0;
                *((_QWORD *)v36 + 7) = 0;
                *((_QWORD *)v36 + 5) = 0;
                *(_OWORD *)((char *)v36 + 40) = __p;
                *((_QWORD *)v36 + 7) = v66;
                __p = 0uLL;
                v66 = 0;
                v58 = (HALS_Listener *)((char *)v36 + 64);
              }
              HALS_Listener::~HALS_Listener((HALS_Listener *)&v62);
            }
            if (v15)
            {
              v68 = v15;
              operator delete(v15);
            }
          }
        }
        v13 = (const HALS_Listener *)((char *)v13 + 64);
      }
      while (v13 != v12);
    }
    HALB_Mutex::Locker::~Locker(&v70);
    HALS_NotificationManager::Object::CallOwner((HALS_NotificationManager::Object *)**(_DWORD **)v60, a2, a3, a4, 0);
    HALS_NotificationManager::Object::CallListeners_Sync(*(unsigned int **)v60, a2, v57, v58);
    v62 = 0;
    v63 = 0uLL;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v62, a4, (uint64_t)&a4[a3], a3);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN24HALS_NotificationManager17PropertiesChangedEjjjPK26AudioObjectPropertyAddress_block_invoke;
    block[3] = &__block_descriptor_tmp_8867;
    v37 = *(unsigned int **)v60;
    block[4] = *(_QWORD *)v60;
    v51 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v39 = __ldxr(p_shared_owners);
      while (__stxr(v39 + 1, p_shared_owners));
    }
    v52 = 0;
    v53 = 0;
    v54 = 0;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v52, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)v62) >> 2));
    v56 = a2;
    v55 = v47;
    v40 = atomic_load((unsigned __int8 *)v37 + 336);
    if ((v40 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)v37 + 337);
    dispatch_async(*((dispatch_queue_t *)v37 + 38), block);
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    v41 = v51;
    if (v51)
    {
      v42 = (unint64_t *)&v51->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v62)
      operator delete(v62);
    v62 = &v57;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  }
  else
  {
    HALS_NotificationManager::CallOwner(this, a2, a3, (uint64_t)a4, 0);
  }
  v44 = v61;
  if (v61)
  {
    v45 = (unint64_t *)&v61->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1B5B30580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void **a31)
{
  uint64_t v31;
  void *v32;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v31);
  if (v32)
    operator delete(v32);
  a31 = (void **)&a26;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a31);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t HALS_NotificationManager::Initialize(HALS_NotificationManager *this)
{
  HALB_Mutex *v1;
  _QWORD *v2;
  uint64_t result;
  int v4;
  _DWORD *exception;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v1);
  HALS_NotificationManager::sObjectListLock = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  HALS_NotificationManager::sObjectList = (uint64_t)v2;
  result = pthread_key_create((pthread_key_t *)&HALS_NotificationManager::sThreadMarkerKey, 0);
  v4 = result;
  if ((_DWORD)result)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "HALS_NotificationManager.cpp";
      v8 = 1024;
      v9 = 782;
      v10 = 1024;
      v11 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_NotificationManager::Initialize: failed to create the thread marker key, Error: 0x%X", (uint8_t *)&v6, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

void sub_1B5B30770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  uint64_t v9;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_NotificationManager.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 786;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_NotificationManager::Initialize: failure!", (uint8_t *)&a9, 0x12u);
    }
    if (HALS_NotificationManager::sObjectListLock)
      (*(void (**)(uint64_t))(*(_QWORD *)HALS_NotificationManager::sObjectListLock + 8))(HALS_NotificationManager::sObjectListLock);
    HALS_NotificationManager::sObjectListLock = 0;
    v9 = HALS_NotificationManager::sObjectList;
    if (HALS_NotificationManager::sObjectList)
    {
      *(_QWORD *)&a9 = HALS_NotificationManager::sObjectList;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      MEMORY[0x1B5E50688](v9, 0x20C40960023A9);
    }
    HALS_NotificationManager::sObjectList = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B5B306A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

void HALS_NotificationManager::Monitor::BeginReadOperation(HALS_NotificationManager::Monitor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  _DWORD *exception;
  HALB_Guard *v8;
  int v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = this;
  v9 = HALB_Mutex::Lock(this);
  if (*((_QWORD *)this + 21))
  {
    v2 = *((_QWORD *)this + 18);
    if (v2 == -1)
    {
LABEL_10:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 136315394;
      v11 = "HALS_NotificationManager.cpp";
      v12 = 1024;
      v13 = 74;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at maximum before increment. this is probably a bug";
      goto LABEL_14;
    }
    *((_QWORD *)this + 18) = v2 + 1;
    while (*((_QWORD *)this + 21))
      HALB_Guard::Wait(v8);
    v3 = *((_QWORD *)this + 18);
    if (!v3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 136315394;
      v11 = "HALS_NotificationManager.cpp";
      v12 = 1024;
      v13 = 80;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug";
LABEL_14:
      _os_log_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
LABEL_15:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    *((_QWORD *)this + 18) = v3 - 1;
  }
  v4 = *((_QWORD *)this + 19);
  if (v4 == -1)
    goto LABEL_10;
  *((_QWORD *)this + 19) = v4 + 1;
  HALB_Guard::Locker::~Locker(&v8);
}

void sub_1B5B30A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
  HALB_Guard::Locker::~Locker(&a9);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Object::CallOwner(HALS_NotificationManager::Object *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5)
{
  uint64_t v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;

  v9 = HALS_ObjectMap::CopyObjectByObjectID(this);
  v11 = (HALS_ObjectMap *)v9;
  if (v9)
  {
    v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 28));
    v14 = (HALS_ObjectMap *)v12;
    if (v12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12))
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t))(*(_QWORD *)v14 + 144))(v14, v11, a2, a3, a4, a5);
    HALS_ObjectMap::ReleaseObject(v14, v13);
  }
  HALS_ObjectMap::ReleaseObject(v11, v10);
}

void sub_1B5B30AE0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Object::CallListeners_Sync(unsigned int *a1, uint64_t a2, HALS_Listener *this, HALS_Listener *a4)
{
  HALS_Listener *v5;

  if (this != a4)
  {
    v5 = this;
    do
    {
      HALS_Listener::Call(v5, (HALS_ObjectMap *)*a1, a2, -1431655765 * ((*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 2), *((const AudioObjectPropertyAddress **)v5 + 5), 1);
      v5 = (HALS_Listener *)((char *)v5 + 64);
    }
    while (v5 != a4);
  }
}

void ___ZN24HALS_NotificationManager17PropertiesChangedEjjjPK26AudioObjectPropertyAddress_block_invoke(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const HALS_Listener *v5;
  const HALS_Listener *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v13;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  HALS_Listener *v28;
  HALS_Listener *v29;
  HALS_Listener *v30;
  unsigned int *v31;
  uint64_t v32;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v33;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v34;
  const HALS_Listener *v35;
  HALS_Listener *v36;
  HALS_Listener *v37;
  unint64_t v38;
  HALS_Listener **v39;
  __int128 v40;
  __int128 v41;
  void *__p[2];
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  HALB_Mutex *v47;
  int v48;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v2 = (_QWORD *)*((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v47 = (HALB_Mutex *)(v2 + 23);
  v34 = a1;
  v48 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 23));
  v5 = (const HALS_Listener *)v2[35];
  v6 = (const HALS_Listener *)v2[36];
  if (v5 != v6)
  {
    v35 = (const HALS_Listener *)v2[36];
    do
    {
      if ((*(_DWORD *)v5 - 1) <= 5)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        if (-1431655765 * ((v3 - v4) >> 2))
        {
          v7 = 0;
          v8 = 0;
          do
          {
            v9 = (_DWORD *)*((_QWORD *)v5 + 5);
            v10 = (_DWORD *)*((_QWORD *)v5 + 6);
            if (v9 != v10)
            {
              v11 = (_DWORD *)(v4 + 12 * v8);
              while (1)
              {
                if (*v9 == 707406378 || *v9 == *v11)
                {
                  v13 = v9[1];
                  if (v13 == 707406378 || v13 == v11[1])
                  {
                    v15 = v9[2];
                    if (v15 == -1 || v15 == v11[2])
                      break;
                  }
                }
                v9 += 3;
                if (v9 == v10)
                  goto LABEL_39;
              }
              if ((unint64_t)v7 >= v46)
              {
                v18 = v44;
                v19 = 0xAAAAAAAAAAAAAAABLL * (v7 - v44);
                v20 = v19 + 1;
                if (v19 + 1 > 0x1555555555555555)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v46 - (_QWORD)v44) >> 2) > v20)
                  v20 = 0x5555555555555556 * ((uint64_t)(v46 - (_QWORD)v44) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v44) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v21 = 0x1555555555555555;
                else
                  v21 = v20;
                if (v21)
                  v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v21);
                else
                  v22 = 0;
                v23 = *(_QWORD *)v11;
                v24 = v21 + 12 * v19;
                *(_DWORD *)(v24 + 8) = v11[2];
                *(_QWORD *)v24 = v23;
                v25 = (_DWORD *)v24;
                if (v7 != v18)
                {
                  do
                  {
                    v26 = *(_QWORD *)(v7 - 3);
                    v7 -= 3;
                    v27 = v7[2];
                    *(_QWORD *)(v25 - 3) = v26;
                    v25 -= 3;
                    v25[2] = v27;
                  }
                  while (v7 != v18);
                  v7 = v44;
                }
                v17 = (_DWORD *)(v24 + 12);
                v44 = v25;
                v45 = (_DWORD *)(v24 + 12);
                v46 = v21 + 12 * v22;
                if (v7)
                  operator delete(v7);
              }
              else
              {
                v16 = *(_QWORD *)v11;
                v7[2] = v11[2];
                *(_QWORD *)v7 = v16;
                v17 = v7 + 3;
              }
              v45 = v17;
              v7 = v17;
            }
LABEL_39:
            ++v8;
          }
          while (v8 != -1431655765 * ((v3 - v4) >> 2));
          v6 = v35;
          if (v44 != v7)
          {
            v7 = v44;
            std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v39, v5, (uint64_t)&v44);
            v28 = v37;
            if ((unint64_t)v37 >= v38)
            {
              v37 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v36, (uint64_t)&v39);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_QWORD *)v37 = v39;
              *(_OWORD *)((char *)v28 + 8) = v40;
              *(_OWORD *)((char *)v28 + 24) = v41;
              v40 = 0uLL;
              *((_QWORD *)v28 + 6) = 0;
              *((_QWORD *)v28 + 7) = 0;
              *((_QWORD *)v28 + 5) = 0;
              *(_OWORD *)((char *)v28 + 40) = *(_OWORD *)__p;
              *((_QWORD *)v28 + 7) = v43;
              __p[0] = 0;
              __p[1] = 0;
              v43 = 0;
              v37 = (HALS_Listener *)((char *)v28 + 64);
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)&v39);
          }
          if (v7)
          {
            v45 = v7;
            operator delete(v7);
          }
        }
      }
      v5 = (const HALS_Listener *)((char *)v5 + 64);
    }
    while (v5 != v6);
  }
  HALB_Mutex::Locker::~Locker(&v47);
  v30 = v36;
  v29 = v37;
  if (v36 != v37)
  {
    v31 = (unsigned int *)*((_QWORD *)v34 + 4);
    v32 = *((unsigned int *)v34 + 20);
    do
    {
      HALS_Listener::Call(v30, (HALS_ObjectMap *)*v31, v32, -1431655765 * ((*((_QWORD *)v30 + 6) - *((_QWORD *)v30 + 5)) >> 2), *((const AudioObjectPropertyAddress **)v30 + 5), 0);
      v30 = (HALS_Listener *)((char *)v30 + 64);
    }
    while (v30 != v29);
  }
  HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(*((_QWORD *)v34 + 4) + 8));
  v39 = &v36;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1B5B30F64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  void *v17;
  uint64_t v18;

  std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>((HALS_Listener *)&a17);
  if (v17)
    operator delete(v17);
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)(v18 - 104));
  a17 = (void **)&a14;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B30F40);
}

void sub_1B5B30FC4(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  HALS_Listener *v2;
  HALS_Listener *v4;
  void *v5;

  v1 = *a1;
  v2 = (HALS_Listener *)**a1;
  if (v2)
  {
    v4 = (HALS_Listener *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (HALS_Listener *)((char *)v4 - 64);
        std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HALS_NotificationManager::CallOwner(HALS_NotificationManager *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;

  v9 = HALS_ObjectMap::CopyObjectByObjectID(this);
  v11 = (HALS_ObjectMap *)v9;
  if (v9)
  {
    v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 28));
    v14 = (HALS_ObjectMap *)v12;
    if (v12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12))
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v14 + 144))(v14, v11, a2, a3, a4, a5);
    HALS_ObjectMap::ReleaseObject(v14, v13);
  }
  HALS_ObjectMap::ReleaseObject(v11, v10);
}

void sub_1B5B310E0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(HALS_Listener *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  HALS_Listener::~HALS_Listener(this);
}

void HALS_Listener::~HALS_Listener(HALS_Listener *this)
{
  NSObject *v2;
  const void *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    _Block_release(v3);
}

_QWORD *__copy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a1[6] = 0;
  a1[7] = 0;
  v5 = a1 + 6;
  v5[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2));
}

void sub_1B5B311E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
}

void HALS_NotificationManager::`anonymous namespace'::ThreadMarker::ThreadMarker(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *this)
{
  int v1;
  int v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = pthread_setspecific(HALS_NotificationManager::sThreadMarkerKey, (const void *)1);
  if (v1)
  {
    v2 = v1;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315650;
      v4 = "HALS_NotificationManager.cpp";
      v5 = 1024;
      v6 = 756;
      v7 = 1024;
      v8 = v2;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ThreadMarker::ThreadMarker: failed to set the marker, Error: 0x%X", (uint8_t *)&v3, 0x18u);
    }
  }
}

void HALS_NotificationManager::`anonymous namespace'::ThreadMarker::~ThreadMarker(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *this)
{
  int v1;
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = pthread_setspecific(HALS_NotificationManager::sThreadMarkerKey, 0);
  if (v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v2 = 136315650;
      v3 = "HALS_NotificationManager.cpp";
      v4 = 1024;
      v5 = 767;
      v6 = 1024;
      v7 = v1;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ThreadMarker::ThreadMarker: failed to set the marker, Error: 0x%X", (uint8_t *)&v2, 0x18u);
    }
  }
}

void sub_1B5B313C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_NotificationManager::Monitor::FinishReadOperation(HALS_NotificationManager::Monitor *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;
  HALB_Mutex *v5;
  int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = this;
  v6 = HALB_Mutex::Lock(this);
  v2 = *((_QWORD *)this + 19);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v8 = "HALS_NotificationManager.cpp";
      v9 = 1024;
      v10 = 80;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v3 = v2 - 1;
  *((_QWORD *)this + 19) = v3;
  if (!v3)
    HALB_Guard::NotifyAll((pthread_cond_t *)this);
  HALB_Guard::Locker::~Locker(&v5);
}

void sub_1B5B314F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
  HALB_Guard::Locker::~Locker(&a9);
  _Unwind_Resume(a1);
}

void HALS_Listener::Call(HALS_Listener *this, HALS_ObjectMap *a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5, int a6)
{
  const AudioObjectPropertyAddress *v6;
  HALS_ObjectMap *v11;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  HALS_Object *v15;
  NSObject *v16;
  void (*v17)(_QWORD, _QWORD);
  uint64_t v18;
  AudioObjectPropertySelector mSelector;
  void (*v20)(HALS_ObjectMap *, _QWORD, BOOL, _QWORD, _QWORD);
  uint64_t v21;
  AudioObjectPropertyScope *p_mScope;
  void (*v23)(HALS_ObjectMap *, _QWORD, _QWORD, _QWORD);
  uint64_t v24;
  AudioObjectPropertySelector v25;
  uint64_t v26;
  NSObject *v27;
  const void *v28;
  void *v29;
  _QWORD v30[4];
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;
  void *__p;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  dispatch_object_t object;
  __int128 v42;
  uint64_t v43;
  _QWORD block[6];
  int v45;

  v6 = a5;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
      v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 1));
      v14 = (HALS_ObjectMap *)v12;
      if (v11)
      {
        if (v12)
          (*(void (**)(uint64_t, HALS_ObjectMap *, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(_QWORD *)v12 + 160))(v12, v11, a3, a4, v6);
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
      HALS_ObjectMap::ReleaseObject(v11, v15);
      break;
    case 2:
      v16 = *((_QWORD *)this + 1);
      if (v16)
      {
        if (a6)
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke;
          block[3] = &__block_descriptor_tmp_9_8872;
          v45 = a4;
          block[4] = this;
          block[5] = a5;
          dispatch_sync(v16, block);
        }
        else
        {
          v40 = *(_QWORD *)this;
          v42 = *((_OWORD *)this + 1);
          v26 = *((_QWORD *)this + 4);
          object = v16;
          v43 = v26;
          dispatch_retain(v16);
          if ((_QWORD)v42)
            *(_QWORD *)&v42 = _Block_copy((const void *)v42);
          v37 = 0;
          v38 = 0;
          v39 = 0;
          std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v37, v6, (uint64_t)&v6[a4], a4);
          v27 = *((_QWORD *)this + 1);
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 1174405120;
          v30[2] = ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke_2;
          v30[3] = &__block_descriptor_tmp_10_8873;
          v31[0] = v40;
          v32 = v42;
          v33 = v43;
          v28 = (const void *)v42;
          v31[1] = object;
          if (object)
            dispatch_retain(object);
          if (v28)
            *(_QWORD *)&v32 = _Block_copy(v28);
          __p = 0;
          v35 = 0;
          v36 = 0;
          v29 = v37;
          std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, v37, v38, 0xAAAAAAAAAAAAAAABLL * ((v38 - (uint64_t)v37) >> 2));
          dispatch_async(v27, v30);
          if (__p)
          {
            v35 = __p;
            operator delete(__p);
          }
          HALS_Listener::~HALS_Listener((HALS_Listener *)v31);
          if (v29)
            operator delete(v29);
          HALS_Listener::~HALS_Listener((HALS_Listener *)&v40);
        }
      }
      else
      {
        (*(void (**)(void))(*((_QWORD *)this + 2) + 16))();
      }
      break;
    case 3:
      (*((void (**)(HALS_ObjectMap *, uint64_t, const AudioObjectPropertyAddress *, _QWORD))this + 3))(a2, a4, a5, *((_QWORD *)this + 4));
      break;
    case 4:
      if ((_DWORD)a4)
      {
        v17 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 3);
        v18 = a4;
        do
        {
          mSelector = v6->mSelector;
          ++v6;
          v17(mSelector, *((_QWORD *)this + 4));
          --v18;
        }
        while (v18);
      }
      break;
    case 5:
      if ((_DWORD)a4)
      {
        v20 = (void (*)(HALS_ObjectMap *, _QWORD, BOOL, _QWORD, _QWORD))*((_QWORD *)this + 3);
        v21 = a4;
        p_mScope = &a5->mScope;
        do
        {
          v20(a2, p_mScope[1], *p_mScope == 1768845428, *(p_mScope - 1), *((_QWORD *)this + 4));
          p_mScope += 3;
          --v21;
        }
        while (v21);
      }
      break;
    case 6:
      if ((_DWORD)a4)
      {
        v23 = (void (*)(HALS_ObjectMap *, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 3);
        v24 = a4;
        do
        {
          v25 = v6->mSelector;
          ++v6;
          v23(a2, v25, v25, *((_QWORD *)this + 4));
          --v24;
        }
        while (v24);
      }
      break;
    default:
      return;
  }
}

void sub_1B5B31834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a25);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1B5B318CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Listener::HALS_Listener(HALS_Listener *this, const HALS_Listener *a2)
{
  NSObject *v3;
  __int128 v4;
  const void *v5;

  *(_QWORD *)this = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v3;
  v4 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  if (v3)
  {
    dispatch_retain(v3);
    v5 = (const void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  else
  {
    v5 = (const void *)v4;
    if (!(_QWORD)v4)
      return;
  }
  *((_QWORD *)this + 2) = _Block_copy(v5);
}

uint64_t ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 16))(a1[6], -1431655765 * ((a1[10] - a1[9]) >> 2));
}

void sub_1B5B31974(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *__copy_helper_block_e8_32c19_ZTS13HALS_Listener72c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = a1;
  HALS_Listener::HALS_Listener((HALS_Listener *)(a1 + 4), (const HALS_Listener *)(a2 + 32));
  v3[9] = 0;
  v3[10] = 0;
  v3 += 9;
  v3[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v3, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2));
}

void sub_1B5B319E0(_Unwind_Exception *a1)
{
  HALS_Listener *v1;

  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c19_ZTS13HALS_Listener72c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)(a1 + 4));
}

HALS_Listener *std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>(HALS_Listener *a1, const HALS_Listener *a2, uint64_t a3)
{
  _QWORD *v5;

  HALS_Listener::HALS_Listener(a1, a2);
  v5[5] = 0;
  v5[6] = 0;
  v5 += 5;
  v5[2] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v5, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
  return a1;
}

void sub_1B5B31A70(_Unwind_Exception *a1)
{
  HALS_Listener *v1;

  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  char *v22;
  _BYTE v23[24];
  _QWORD *v24;

  v2 = (uint64_t)(a1[1] - *a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 5 > v3)
    v3 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v8 = 0x3FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v24 = v6;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v8);
  v10 = &v9[64 * v2];
  v22 = v9;
  *(_QWORD *)v23 = v10;
  *(_QWORD *)&v23[16] = &v9[64 * v11];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v10 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)&v23[8] = v10 + 64;
  v13 = *a1;
  v12 = a1[1];
  for (i = 64; ; i -= 64)
  {
    v15 = &v10[i];
    if (v12 + i - 64 == v13)
      break;
    v16 = v12 + i - 128;
    std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]((HALS_Listener *)(v15 - 128), v16);
  }
  v17 = a1[2];
  v18 = *(_OWORD *)&v23[8];
  v21 = *(_QWORD *)&v23[8];
  v19 = *(_OWORD *)a1;
  *a1 = v15 - 64;
  *(_OWORD *)v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(_QWORD *)&v23[16] = v17;
  v22 = (char *)v19;
  std::__split_buffer<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::~__split_buffer((uint64_t)&v22);
  return v21;
}

uint64_t std::__split_buffer<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>((HALS_Listener *)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

HALS_Listener *std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100](HALS_Listener *a1, uint64_t a2)
{
  _QWORD *v4;

  HALS_Listener::HALS_Listener(a1, (const HALS_Listener *)a2);
  v4[5] = 0;
  v4[6] = 0;
  v4 += 5;
  v4[2] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v4, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  return a1;
}

void sub_1B5B31C8C(_Unwind_Exception *a1)
{
  HALS_Listener *v1;

  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::PropertiesChanged_Sync(HALS_NotificationManager *this, uint64_t a2, unsigned int a3, const AudioObjectPropertyAddress *a4, const AudioObjectPropertyAddress *a5)
{
  unint64_t v8;
  unsigned int *v9;
  const HALS_Listener *v10;
  void ***v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  const AudioObjectPropertyAddress *v15;
  int v17;
  int v19;
  void **v20;
  void ***v21;
  void ***v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  HALS_Listener *v31;
  HALS_Listener *v32;
  HALS_Listener *v33;
  void *v34;
  HALS_Listener *v35;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v36;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unsigned int v41;
  const HALS_Listener *v42;
  HALS_Listener *v44;
  HALS_Listener *v45;
  unint64_t v46;
  HALS_Listener *v47;
  HALS_Listener *v48;
  unint64_t v49;
  int v50[2];
  std::__shared_weak_count *v51;
  HALS_Listener **v52;
  __int128 v53;
  __int128 v54;
  void *__p[2];
  uint64_t v56;
  void ***v57;
  void ***v58;
  unint64_t v59;
  HALB_Mutex *v60;
  int v61;

  v8 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v8 != -1)
  {
    v52 = (HALS_Listener **)HALS_NotificationManager::Initialize;
    v57 = (void ***)&v52;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)v50, this);
  if (*(_QWORD *)v50)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(*(_QWORD *)v50 + 8));
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v9 = *(unsigned int **)v50;
    v60 = (HALB_Mutex *)(*(_QWORD *)v50 + 184);
    v41 = a2;
    v61 = HALB_Mutex::Lock((HALB_Mutex *)(*(_QWORD *)v50 + 184));
    v10 = (const HALS_Listener *)*((_QWORD *)v9 + 35);
    v42 = (const HALS_Listener *)*((_QWORD *)v9 + 36);
    if (v10 != v42)
    {
      while (1)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        if (a3)
          break;
LABEL_52:
        v10 = (const HALS_Listener *)((char *)v10 + 64);
        if (v10 == v42)
          goto LABEL_56;
      }
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = (_DWORD *)*((_QWORD *)v10 + 5);
        v14 = (_DWORD *)*((_QWORD *)v10 + 6);
        if (v13 != v14)
        {
          v15 = &a4[v12];
          while (1)
          {
            if (*v13 == 707406378 || *v13 == v15->mSelector)
            {
              v17 = v13[1];
              if (v17 == 707406378 || v17 == v15->mScope)
              {
                v19 = v13[2];
                if (v19 == -1 || v19 == v15->mElement)
                  break;
              }
            }
            v13 += 3;
            if (v13 == v14)
              goto LABEL_40;
          }
          if ((unint64_t)v11 >= v59)
          {
            v22 = v57;
            v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v57) >> 2) + 1;
            if (v23 > 0x1555555555555555)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v59 - (_QWORD)v57) >> 2) > v23)
              v23 = 0x5555555555555556 * ((uint64_t)(v59 - (_QWORD)v57) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (_QWORD)v57) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v24 = 0x1555555555555555;
            else
              v24 = v23;
            if (v24)
              v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v24);
            else
              v25 = 0;
            v26 = *(_QWORD *)&v15->mSelector;
            v27 = v24 + 4 * (((char *)v11 - (char *)v22) >> 2);
            *(_DWORD *)(v27 + 8) = v15->mElement;
            *(_QWORD *)v27 = v26;
            v28 = v27;
            if (v11 != v22)
            {
              do
              {
                v29 = *(uint64_t *)((char *)v11 - 12);
                v11 = (void ***)((char *)v11 - 12);
                v30 = *((_DWORD *)v11 + 2);
                *(_QWORD *)(v28 - 12) = v29;
                v28 -= 12;
                *(_DWORD *)(v28 + 8) = v30;
              }
              while (v11 != v22);
              v11 = v57;
            }
            v21 = (void ***)(v27 + 12);
            v57 = (void ***)v28;
            v58 = (void ***)(v27 + 12);
            v59 = v24 + 12 * v25;
            if (v11)
              operator delete(v11);
          }
          else
          {
            v20 = *(void ***)&v15->mSelector;
            *((_DWORD *)v11 + 2) = v15->mElement;
            *v11 = v20;
            v21 = (void ***)((char *)v11 + 12);
          }
          v58 = v21;
          v11 = v21;
        }
LABEL_40:
        ++v12;
      }
      while (v12 != a3);
      if (v57 == v11)
      {
LABEL_50:
        if (v11)
        {
          v58 = v11;
          operator delete(v11);
        }
        goto LABEL_52;
      }
      v11 = v57;
      if (*(_DWORD *)v10)
      {
        std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v52, v10, (uint64_t)&v57);
        v31 = v45;
        if ((unint64_t)v45 < v46)
        {
          *(_QWORD *)v45 = v52;
          *(_OWORD *)((char *)v31 + 8) = v53;
          *(_OWORD *)((char *)v31 + 24) = v54;
          v53 = 0uLL;
          *((_QWORD *)v31 + 6) = 0;
          *((_QWORD *)v31 + 7) = 0;
          *((_QWORD *)v31 + 5) = 0;
          *(_OWORD *)((char *)v31 + 40) = *(_OWORD *)__p;
          *((_QWORD *)v31 + 7) = v56;
          __p[0] = 0;
          __p[1] = 0;
          v56 = 0;
          v45 = (HALS_Listener *)((char *)v31 + 64);
LABEL_49:
          HALS_Listener::~HALS_Listener((HALS_Listener *)&v52);
          goto LABEL_50;
        }
        v33 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v44, (uint64_t)&v52);
        v34 = __p[0];
        v45 = v33;
        if (!__p[0])
          goto LABEL_49;
      }
      else
      {
        std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v52, v10, (uint64_t)&v57);
        v32 = v48;
        if ((unint64_t)v48 < v49)
        {
          *(_QWORD *)v48 = v52;
          *(_OWORD *)((char *)v32 + 8) = v53;
          *(_OWORD *)((char *)v32 + 24) = v54;
          v53 = 0uLL;
          *((_QWORD *)v32 + 6) = 0;
          *((_QWORD *)v32 + 7) = 0;
          *((_QWORD *)v32 + 5) = 0;
          *(_OWORD *)((char *)v32 + 40) = *(_OWORD *)__p;
          *((_QWORD *)v32 + 7) = v56;
          __p[0] = 0;
          __p[1] = 0;
          v56 = 0;
          v48 = (HALS_Listener *)((char *)v32 + 64);
          goto LABEL_49;
        }
        v35 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v47, (uint64_t)&v52);
        v34 = __p[0];
        v48 = v35;
        if (!__p[0])
          goto LABEL_49;
      }
      __p[1] = v34;
      operator delete(v34);
      goto LABEL_49;
    }
LABEL_56:
    HALB_Mutex::Locker::~Locker(&v60);
    HALS_NotificationManager::Object::CallOwner((HALS_NotificationManager::Object *)**(_DWORD **)v50, v41, a3, a4, 1);
    HALS_NotificationManager::Object::CallListeners_Sync(*(unsigned int **)v50, v41, v47, v48);
    HALS_NotificationManager::Object::CallListeners_Sync(*(unsigned int **)v50, v41, v44, v45);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(*(_QWORD *)v50 + 8));
    v52 = &v44;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    v52 = &v47;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  }
  else
  {
    HALS_NotificationManager::CallOwner(this, a2, a3, (uint64_t)a4, (const AudioObjectPropertyAddress *)1);
  }
  v38 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1B5B32158(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B320ACLL);
}

void sub_1B5B32164(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  a23 = (void **)&a18;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;

  if (a5 < 1)
    return;
  v6 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 2)) < a5)
  {
    v11 = *(char **)a1;
    v12 = a5 - 0x5555555555555555 * ((uint64_t)(v10 - *(_QWORD *)a1) >> 2);
    if (v12 > 0x1555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((__dst - v11) >> 2);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 2);
    v15 = 2 * v14;
    if (2 * v14 <= v12)
      v15 = v12;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v15;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v16);
    else
      v17 = 0;
    v26 = v16 + 12 * v13;
    v27 = 3 * a5;
    v28 = (char *)(v26 + 12 * a5);
    v29 = 4 * v27;
    v30 = v26;
    do
    {
      v31 = *(_QWORD *)v6;
      *(_DWORD *)(v30 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)v30 = v31;
      v30 += 12;
      v6 += 12;
      v29 -= 12;
    }
    while (v29);
    v32 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      v33 = __dst;
      do
      {
        v34 = *(_QWORD *)(v33 - 12);
        v33 -= 12;
        v35 = *((_DWORD *)v33 + 2);
        *(_QWORD *)(v26 - 12) = v34;
        v26 -= 12;
        *(_DWORD *)(v26 + 8) = v35;
      }
      while (v33 != v32);
    }
    v36 = v16 + 12 * v17;
    v37 = *(_BYTE **)(a1 + 8);
    v38 = v37 - __dst;
    if (v37 != __dst)
      memmove(v28, __dst, v37 - __dst);
    v39 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v28[v38];
    *(_QWORD *)(a1 + 16) = v36;
    if (v39)
      operator delete(v39);
    return;
  }
  v18 = v10 - (_QWORD)__dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)__dst) >> 2)) >= a5)
  {
    v19 = &__src[12 * a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &__dst[12 * a5];
    v23 = &v21[-12 * a5];
    v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      v24 = v21;
      do
      {
        v25 = *(_QWORD *)v23;
        *((_DWORD *)v24 + 2) = *((_DWORD *)v23 + 2);
        *(_QWORD *)v24 = v25;
        v24 += 12;
        v23 += 12;
      }
      while ((unint64_t)v23 < v10);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&__dst[12 * a5], __dst, v21 - v22);
    if (v19 != v6)
      memmove(__dst, v6, v19 - v6);
    return;
  }
  v19 = &__src[4 * ((uint64_t)(v10 - (_QWORD)__dst) >> 2)];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[4 * ((uint64_t)(v10 - (_QWORD)__dst) >> 2)], a4 - v19);
  v21 = (char *)(v10 + v20);
  *(_QWORD *)(a1 + 8) = v10 + v20;
  if (v18 >= 1)
    goto LABEL_17;
}

_QWORD *std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  if (a4)
  {
    if (a4 >> 58)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[8 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]((HALS_Listener *)&v7[v9 / 8], a2 + v9);
        v9 += 64;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1B5B3250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void HALS_NotificationManager::CallGroupOwner(HALS_NotificationManager *this, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned int *a5, const unsigned int *a6, uint64_t a7, const AudioObjectPropertyAddress *a8, unint64_t a9, BOOL a10)
{
  char v10;
  uint64_t v18;
  HALS_Object *v19;
  HALS_ObjectMap *v20;
  uint64_t v21;
  HALS_Object *v22;
  HALS_ObjectMap *v23;
  char v24;

  v10 = (char)a8;
  v18 = HALS_ObjectMap::CopyObjectByObjectID(this);
  v20 = (HALS_ObjectMap *)v18;
  if (v18)
  {
    v21 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v18 + 28));
    v23 = (HALS_ObjectMap *)v21;
    if (v21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 136))(v21))
    {
      v24 = v10;
      (*(void (**)(HALS_ObjectMap *, HALS_NotificationManager *, uint64_t, uint64_t, uint64_t, const unsigned int *, const unsigned int *, uint64_t, char))(*(_QWORD *)v23 + 152))(v23, this, a2, a3, a4, a5, a6, a7, v24);
    }
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
}

void sub_1B5B326E8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Object::CallGroupListeners_Sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v16;
  _DWORD *v17;
  _DWORD *i;
  dispatch_time_t v19;
  AMCP::Log::Scope_Registry *v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  NSObject *v28;
  uint8_t buf[8];
  _BYTE v30[10];
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v16 = dispatch_group_create();
  v17 = *(_DWORD **)a8;
  for (i = *(_DWORD **)(a8 + 8); v17 != i; v17 += 16)
  {
    if (*v17 <= 1u)
    {
      v28 = v16;
      if (v16)
        dispatch_retain(v16);
      HALS_Listener::GroupCall(v17, a1, a2, a3, a4, a5, a6, a7, 1, a9, &v28);
      if (v16)
        dispatch_release(v16);
    }
  }
  v19 = dispatch_time(0, 2000000000);
  v20 = (AMCP::Log::Scope_Registry *)dispatch_group_wait(v16, v19);
  if (v20)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v30;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v30)
    {
      v23 = (unint64_t *)(*(_QWORD *)v30 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v30 = 2080;
      *(_QWORD *)&v30[2] = "HALS_NotificationManager.cpp";
      v31 = 1024;
      v32 = 682;
      _os_log_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Timed out waiting for group listener notifications to complete", buf, 0x18u);
    }
  }
  if (v16)
    dispatch_release(v16);
}

void sub_1B5B32944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  NSObject *v12;
  _Unwind_Exception *v13;

  if (v12)
    dispatch_release(v12);
  _Unwind_Resume(v13);
}

void HALS_NotificationManager::CallListeners_Sync(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v5 = v3[5];
      v6 = v3[6];
      while (v5 != v6)
      {
        HALS_Listener::Call((HALS_Listener *)v5, (HALS_ObjectMap *)*((unsigned int *)v3 + 8), a1, -1431655765 * ((*(_QWORD *)(v5 + 48) - *(_QWORD *)(v5 + 40)) >> 2), *(const AudioObjectPropertyAddress **)(v5 + 40), 1);
        v5 += 64;
      }
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v2);
  }
}

void ___ZN24HALS_NotificationManager22GroupPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddress_block_invoke(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __int128 v6;
  const void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  const HALS_Listener *v23;
  const HALS_Listener *v24;
  void **v25;
  uint64_t i;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  BOOL v30;
  int v31;
  int v33;
  void *v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char **v55;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v56;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  unsigned int *v61;
  const HALS_Listener *v62;
  char **v63;
  char *v64[2];
  _DWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  _BYTE v74[32];
  __int128 __p;
  uint64_t v76;
  void **v77;
  void **v78;
  unint64_t v79;
  HALB_Mutex *v80;
  int v81;

  v1 = a1;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v2 = *((_QWORD *)v1 + 4);
  v77 = (void **)(v2 + 184);
  LODWORD(v78) = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 184));
  v3 = *(_QWORD *)(v2 + 280);
  v4 = *(_QWORD *)(v2 + 288);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != 1)
    {
LABEL_13:
      v3 += 64;
      if (v3 == v4)
        goto LABEL_14;
    }
    v73 = *(void **)v3;
    v5 = *(NSObject **)(v3 + 8);
    *(_QWORD *)v74 = v5;
    v6 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&v74[8] = v6;
    *(_QWORD *)&v74[24] = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      dispatch_retain(v5);
      v7 = *(const void **)&v74[8];
      if (!*(_QWORD *)&v74[8])
        goto LABEL_8;
    }
    else
    {
      v7 = (const void *)v6;
      if (!(_QWORD)v6)
      {
LABEL_8:
        __p = 0uLL;
        v76 = 0;
        v8 = v66;
        if ((unint64_t)v66 >= v67)
        {
          v66 = (_QWORD *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v65, (uint64_t)&v73);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        else
        {
          *v66 = v73;
          *(_OWORD *)(v8 + 1) = *(_OWORD *)v74;
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v74[16];
          *(_OWORD *)v74 = 0uLL;
          v8[6] = 0;
          v8[7] = 0;
          v8[5] = 0;
          *(_OWORD *)(v8 + 5) = __p;
          v8[7] = v76;
          __p = 0uLL;
          v76 = 0;
          v66 = v8 + 8;
        }
        HALS_Listener::~HALS_Listener((HALS_Listener *)&v73);
        goto LABEL_13;
      }
    }
    *(_QWORD *)&v74[8] = _Block_copy(v7);
    goto LABEL_8;
  }
LABEL_14:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)&v77);
  v9 = *((_QWORD *)v1 + 6);
  v10 = (unint64_t)(*((_QWORD *)v1 + 7) - v9) >> 2;
  v11 = *((_QWORD *)v1 + 12);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 13) - v11) >> 2);
  v14 = v65;
  v13 = v66;
  v57 = v1;
  if (v65 == (_DWORD *)v66)
  {
    v20 = (unsigned int *)*((_QWORD *)v1 + 6);
  }
  else
  {
    v15 = v1;
    v16 = *((unsigned int *)v1 + 32);
    v17 = *((unsigned int *)v15 + 33);
    v18 = *((_QWORD *)v15 + 9);
    do
    {
      if (*v14 <= 1u)
      {
        v73 = 0;
        *(_OWORD *)v74 = 0uLL;
        v77 = 0;
        v19 = v10;
        HALS_Listener::GroupCall(v14, v16, v17, v10, v9, v18, v12, v11, 0, (uint64_t)&v73, (NSObject **)&v77);
        if (v73)
        {
          *(_QWORD *)v74 = v73;
          operator delete(v73);
        }
        v10 = v19;
      }
      v14 += 16;
    }
    while (v14 != v13);
    v1 = v57;
    v20 = (unsigned int *)*((_QWORD *)v57 + 6);
    v11 = *((_QWORD *)v57 + 12);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v57 + 13) - v11) >> 2);
    v10 = (*((_QWORD *)v57 + 7) - (_QWORD)v20) >> 2;
  }
  v64[0] = 0;
  v64[1] = 0;
  v63 = v64;
  if ((_DWORD)v10 && (_DWORD)v12)
  {
    v61 = (unsigned int *)*((_QWORD *)v1 + 9);
    v58 = v11 + 12 * v12;
    do
    {
      v60 = v10;
      HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v71, *v20);
      v21 = v71;
      if (v71)
      {
        v59 = v20;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v22 = *v61;
        v80 = (HALB_Mutex *)(v71 + 184);
        v81 = HALB_Mutex::Lock((HALB_Mutex *)(v71 + 184));
        v24 = *(const HALS_Listener **)(v21 + 280);
        v23 = *(const HALS_Listener **)(v21 + 288);
        if (v24 != v23)
        {
          v62 = v23;
          do
          {
            if (*(_DWORD *)v24 >= 2u)
            {
              v77 = 0;
              v78 = 0;
              v79 = 0;
              if ((_DWORD)v22)
              {
                v25 = 0;
                for (i = 0; i != v22; ++i)
                {
                  v27 = (_DWORD *)*((_QWORD *)v24 + 5);
                  v28 = (_DWORD *)*((_QWORD *)v24 + 6);
                  if (v27 != v28)
                  {
                    v29 = (_DWORD *)(v11 + 12 * i);
                    while (1)
                    {
                      v30 = *v27 == 707406378 || *v27 == *v29;
                      if (v30)
                      {
                        v31 = v27[1];
                        if (v31 == 707406378 || v31 == v29[1])
                        {
                          v33 = v27[2];
                          if (v33 == -1 || v33 == v29[2])
                            break;
                        }
                      }
                      v27 += 3;
                      if (v27 == v28)
                        goto LABEL_65;
                    }
                    if ((unint64_t)v25 >= v79)
                    {
                      v36 = v77;
                      v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v77) >> 2) + 1;
                      if (v37 > 0x1555555555555555)
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)v77) >> 2) > v37)
                        v37 = 0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)v77) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)v77) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v38 = 0x1555555555555555;
                      else
                        v38 = v37;
                      if (v38)
                        v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v38);
                      else
                        v39 = 0;
                      v40 = *(_QWORD *)v29;
                      v41 = v38 + 4 * (((char *)v25 - (char *)v36) >> 2);
                      *(_DWORD *)(v41 + 8) = v29[2];
                      *(_QWORD *)v41 = v40;
                      v42 = v41;
                      if (v25 != v36)
                      {
                        do
                        {
                          v43 = *(uint64_t *)((char *)v25 - 12);
                          v25 = (void **)((char *)v25 - 12);
                          v44 = *((_DWORD *)v25 + 2);
                          *(_QWORD *)(v42 - 12) = v43;
                          v42 -= 12;
                          *(_DWORD *)(v42 + 8) = v44;
                        }
                        while (v25 != v36);
                        v25 = v77;
                      }
                      v35 = (void **)(v41 + 12);
                      v77 = (void **)v42;
                      v78 = (void **)(v41 + 12);
                      v79 = v38 + 12 * v39;
                      if (v25)
                        operator delete(v25);
                    }
                    else
                    {
                      v34 = *(void **)v29;
                      *((_DWORD *)v25 + 2) = v29[2];
                      *v25 = v34;
                      v35 = (void **)((char *)v25 + 12);
                    }
                    v78 = v35;
                    v25 = v35;
                  }
LABEL_65:
                  ;
                }
                v23 = v62;
                if (v77 != v25)
                {
                  v25 = v77;
                  if ((*(_DWORD *)v24 - 1) <= 5)
                  {
                    std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v73, v24, (uint64_t)&v77);
                    v45 = v69;
                    if ((unint64_t)v69 >= v70)
                    {
                      v69 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v68, (uint64_t)&v73);
                      if ((_QWORD)__p)
                      {
                        *((_QWORD *)&__p + 1) = __p;
                        operator delete((void *)__p);
                      }
                    }
                    else
                    {
                      *(_QWORD *)v69 = v73;
                      *(_OWORD *)(v45 + 8) = *(_OWORD *)v74;
                      *(_OWORD *)(v45 + 24) = *(_OWORD *)&v74[16];
                      *(_OWORD *)v74 = 0uLL;
                      *((_QWORD *)v45 + 6) = 0;
                      *((_QWORD *)v45 + 7) = 0;
                      *((_QWORD *)v45 + 5) = 0;
                      *(_OWORD *)(v45 + 40) = __p;
                      *((_QWORD *)v45 + 7) = v76;
                      __p = 0uLL;
                      v76 = 0;
                      v69 = v45 + 64;
                    }
                    HALS_Listener::~HALS_Listener((HALS_Listener *)&v73);
                  }
                }
                if (v25)
                {
                  v78 = v25;
                  operator delete(v25);
                }
              }
            }
            v24 = (const HALS_Listener *)((char *)v24 + 64);
          }
          while (v24 != v23);
        }
        HALB_Mutex::Locker::~Locker(&v80);
        v20 = v59;
        if (v68 != v69)
        {
          LODWORD(v73) = *v59;
          memset(v74, 0, 24);
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v74, (uint64_t)v68, (uint64_t)v69, (v69 - v68) >> 6);
          std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v63, v73, (uint64_t)&v73);
          v77 = (void **)v74;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v77);
        }
        v73 = &v68;
        std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      }
      v46 = *v61++;
      v47 = v72;
      if (v72)
      {
        p_shared_owners = (unint64_t *)&v72->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      LODWORD(v10) = v60 - 1;
      if (v60 == 1)
        break;
      v11 += 12 * v46;
      ++v20;
    }
    while (v11 != v58);
    v50 = (uint64_t)v63;
    v1 = v57;
    if (v63 != v64)
    {
      v51 = *((unsigned int *)v57 + 33);
      do
      {
        v52 = *(_QWORD *)(v50 + 40);
        v53 = *(_QWORD *)(v50 + 48);
        while (v52 != v53)
        {
          HALS_Listener::Call((HALS_Listener *)v52, (HALS_ObjectMap *)*(unsigned int *)(v50 + 32), v51, -1431655765 * ((*(_QWORD *)(v52 + 48) - *(_QWORD *)(v52 + 40)) >> 2), *(const AudioObjectPropertyAddress **)(v52 + 40), 0);
          v52 += 64;
        }
        v54 = *(char **)(v50 + 8);
        if (v54)
        {
          do
          {
            v55 = (char **)v54;
            v54 = *(char **)v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = *(char ***)(v50 + 16);
            v30 = *v55 == (char *)v50;
            v50 = (uint64_t)v55;
          }
          while (!v30);
        }
        v50 = (uint64_t)v55;
      }
      while (v55 != v64);
    }
  }
  HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(*((_QWORD *)v1 + 4) + 8));
  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v64[0]);
  v73 = &v65;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
}

void sub_1B5B33128(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a25;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a33);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B330FCLL);
}

void sub_1B5B33200(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

_QWORD *__copy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE72c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE96c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 9, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(a1 + 12, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2));
}

void sub_1B5B3331C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 80) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v7;
    operator delete(v7);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE72c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE96c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
}

void HALS_Listener::GroupCall(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, NSObject **a11)
{
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  NSObject *v20;
  dispatch_object_t object;

  if (*a1 <= 1u)
  {
    v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
    if (v19)
    {
      v20 = *a11;
      object = v20;
      if (v20)
        dispatch_retain(v20);
      (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, dispatch_object_t *))(*(_QWORD *)v19 + 168))(v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, &object);
      if (object)
        dispatch_release(object);
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
}

void sub_1B5B3348C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  HALS_ObjectMap *v12;

  if (object)
    dispatch_release(object);
  HALS_ObjectMap::ReleaseObject(v12, a2);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::GroupPropertiesChanged(char a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  char *v7;
  uint64_t v8;
  char *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  const void *v47;
  __int128 v48;
  const void *v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  const HALS_Listener *v60;
  const HALS_Listener *v61;
  void **v62;
  uint64_t j;
  _DWORD *v64;
  _DWORD *v65;
  char *v66;
  int v68;
  int v70;
  void *v71;
  uint64_t v72;
  void **v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  void *v85;
  _QWORD *v86;
  unsigned int v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v91;
  HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  const void *v99;
  char *v100;
  char *v101;
  int v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  const HALS_Listener *v107;
  const HALS_Listener *v108;
  void **v109;
  uint64_t i;
  _DWORD *v111;
  _DWORD *v112;
  char *v113;
  int v115;
  int v117;
  void *v118;
  uint64_t v119;
  void **v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  _QWORD *v129;
  unsigned int v130;
  unsigned int v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unsigned __int8 v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  BOOL v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v151;
  unsigned int *v152;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v158;
  int v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int *v162;
  unsigned int *v163;
  int v164;
  char v165;
  const HALS_Listener *v167;
  const HALS_Listener *v168;
  unsigned int *v169;
  void *v170;
  void *__dst;
  uint64_t v172;
  char **v173;
  char *v174[2];
  char **v175;
  char *v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  HALB_Mutex *v181;
  int v182;
  void *block;
  _BYTE v184[32];
  __int128 __p;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  HALB_Mutex *v197;
  char *v198;
  unint64_t v199;
  char **v200;
  char *v201;
  unint64_t v202;
  char *v203;
  char *v204;
  unint64_t v205;
  _BYTE *v206;
  _QWORD *v207;
  unint64_t v208;
  void **p_block;
  unint64_t v210;
  unint64_t v211;

  v170 = 0;
  __dst = 0;
  v172 = 0;
  v7 = *(char **)a4;
  v8 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 == v8)
  {
    v10 = 0;
    v16 = 0;
    v169 = 0;
    v14 = 0;
    v17 = 0;
  }
  else
  {
    v10 = (char *)operator new(4uLL);
    *(_DWORD *)v10 = a2;
    v11 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(1uLL);
    v13 = v12;
    *v11 = -1431655765 * ((unint64_t)(v8 - (_QWORD)v7) >> 2);
    v14 = v11 + 1;
    v15 = -1431655765 * ((*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
    std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)&v170, 0, *(char **)a4, (char *)(*(_QWORD *)a4 + 12 * v15), v15);
    v16 = v10 + 4;
    v169 = v11;
    v17 = (char *)&v11[v13];
  }
  v18 = *a5;
  v19 = a5[1] - *a5;
  v165 = a1;
  if ((v19 & 0x1FFFFFFFE0) != 0)
  {
    v20 = 0;
    v21 = v16;
    do
    {
      v22 = v10;
      if (v20 >= v19 >> 5)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v23 = v18 + 32 * v20;
      v24 = *(_DWORD *)(v23 + 24);
      if (v16 >= v21)
      {
        v25 = (v16 - v22) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((v21 - v22) >> 1 > v26)
          v26 = (v21 - v22) >> 1;
        if ((unint64_t)(v21 - v22) >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        else
          v28 = 0;
        v29 = (char *)(v27 + 4 * v25);
        *(_DWORD *)v29 = v24;
        v30 = v29 + 4;
        while (v16 != v22)
        {
          v31 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v29 - 1) = v31;
          v29 -= 4;
        }
        v21 = (char *)(v27 + 4 * v28);
        if (v22)
          operator delete(v22);
        v22 = v29;
        v16 = v30;
      }
      else
      {
        *(_DWORD *)v16 = v24;
        v16 += 4;
      }
      v32 = -1431655765 * ((*(_QWORD *)(v23 + 8) - *(_QWORD *)v23) >> 2);
      if (v14 >= (unsigned int *)v17)
      {
        v33 = v14 - v169;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if ((v17 - (char *)v169) >> 1 > v34)
          v34 = (v17 - (char *)v169) >> 1;
        if ((unint64_t)(v17 - (char *)v169) >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
        else
          v36 = 0;
        v37 = (unsigned int *)(v35 + 4 * v33);
        *v37 = v32;
        v38 = v37 + 1;
        v10 = v22;
        while (v14 != v169)
        {
          v39 = *--v14;
          *--v37 = v39;
        }
        v17 = (char *)(v35 + 4 * v36);
        if (v169)
          operator delete(v169);
        v169 = v37;
        v14 = v38;
      }
      else
      {
        *v14++ = v32;
        v10 = v22;
      }
      v40 = -1431655765 * ((*(_QWORD *)(v23 + 8) - *(_QWORD *)v23) >> 2);
      std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)&v170, (char *)__dst, *(char **)v23, (char *)(*(_QWORD *)v23 + 12 * v40), v40);
      ++v20;
      v18 = *a5;
      v19 = a5[1] - *a5;
    }
    while (v20 < ((unint64_t)v19 >> 5));
  }
  v155 = (char *)v170;
  v156 = (unint64_t)(v16 - v10) >> 2;
  v154 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)v170) >> 2);
  if ((v165 & 1) == 0)
  {
    v151 = v16 - v10;
    v93 = atomic_load(&HALS_NotificationManager::sInitialized);
    v42 = v169;
    if (v93 != -1)
    {
      block = HALS_NotificationManager::Initialize;
      p_block = &block;
      std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
    }
    v94 = mach_absolute_time();
    HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v173, a2);
    if (v173)
    {
      HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v173 + 1));
      v149 = v94;
      v203 = 0;
      v204 = 0;
      v205 = 0;
      v95 = (uint64_t)v173;
      p_block = (void **)(v173 + 23);
      LODWORD(v210) = HALB_Mutex::Lock((HALB_Mutex *)(v173 + 23));
      v96 = *(_QWORD *)(v95 + 280);
      v97 = *(_QWORD *)(v95 + 288);
      if (v96 != v97)
      {
        while (*(_DWORD *)v96)
        {
LABEL_155:
          v96 += 64;
          if (v96 == v97)
            goto LABEL_156;
        }
        block = *(void **)v96;
        *(_QWORD *)v184 = *(_QWORD *)(v96 + 8);
        v98 = *(_OWORD *)(v96 + 16);
        *(_OWORD *)&v184[8] = v98;
        *(_QWORD *)&v184[24] = *(_QWORD *)(v96 + 32);
        if (*(_QWORD *)v184)
        {
          dispatch_retain(*(dispatch_object_t *)v184);
          v99 = *(const void **)&v184[8];
          if (!*(_QWORD *)&v184[8])
            goto LABEL_150;
        }
        else
        {
          v99 = (const void *)v98;
          if (!(_QWORD)v98)
          {
LABEL_150:
            __p = 0uLL;
            v186 = 0;
            v100 = v204;
            if ((unint64_t)v204 >= v205)
            {
              v204 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v203, (uint64_t)&block);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(_QWORD *)v204 = block;
              *(_OWORD *)(v100 + 8) = *(_OWORD *)v184;
              *(_OWORD *)(v100 + 24) = *(_OWORD *)&v184[16];
              *(_QWORD *)v184 = 0;
              *(_QWORD *)&v184[8] = 0;
              *((_QWORD *)v100 + 6) = 0;
              *((_QWORD *)v100 + 7) = 0;
              *((_QWORD *)v100 + 5) = 0;
              *(_OWORD *)(v100 + 40) = __p;
              *((_QWORD *)v100 + 7) = v186;
              __p = 0uLL;
              v186 = 0;
              v204 = v100 + 64;
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
            goto LABEL_155;
          }
        }
        *(_QWORD *)&v184[8] = _Block_copy(v99);
        goto LABEL_150;
      }
LABEL_156:
      v152 = (unsigned int *)v10;
      HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_block);
      v201 = 0;
      v202 = 0;
      v200 = &v201;
      v158 = (uint64_t)&v155[12 * v154];
      if ((_DWORD)v156 && (_DWORD)v154)
      {
        v101 = v155;
        v102 = v156;
        v103 = v152;
        v104 = v169;
        while (1)
        {
          HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v175, *v103);
          v105 = (uint64_t)v175;
          if (v175)
          {
            v160 = v104;
            v162 = v103;
            v164 = v102;
            v206 = 0;
            v207 = 0;
            v208 = 0;
            v106 = *v104;
            v197 = (HALB_Mutex *)(v175 + 23);
            LODWORD(v198) = HALB_Mutex::Lock((HALB_Mutex *)(v175 + 23));
            v108 = *(const HALS_Listener **)(v105 + 280);
            v107 = *(const HALS_Listener **)(v105 + 288);
            if (v108 != v107)
            {
              v168 = v107;
              while (1)
              {
                if (*(_DWORD *)v108 < 2u)
                  goto LABEL_203;
                p_block = 0;
                v210 = 0;
                v211 = 0;
                if (!(_DWORD)v106)
                  goto LABEL_203;
                v109 = 0;
                for (i = 0; i != v106; ++i)
                {
                  v111 = (_DWORD *)*((_QWORD *)v108 + 5);
                  v112 = (_DWORD *)*((_QWORD *)v108 + 6);
                  if (v111 != v112)
                  {
                    v113 = &v101[12 * i];
                    while (1)
                    {
                      if (*v111 == 707406378 || *v111 == *(_DWORD *)v113)
                      {
                        v115 = v111[1];
                        if (v115 == 707406378 || v115 == *((_DWORD *)v113 + 1))
                        {
                          v117 = v111[2];
                          if (v117 == -1 || v117 == *((_DWORD *)v113 + 2))
                            break;
                        }
                      }
                      v111 += 3;
                      if (v111 == v112)
                        goto LABEL_198;
                    }
                    if ((unint64_t)v109 >= v211)
                    {
                      v120 = p_block;
                      v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - (char *)p_block) >> 2) + 1;
                      if (v121 > 0x1555555555555555)
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)p_block) >> 2) > v121)
                        v121 = 0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)p_block) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (_QWORD)p_block) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v122 = 0x1555555555555555;
                      else
                        v122 = v121;
                      if (v122)
                        v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v122);
                      else
                        v123 = 0;
                      v124 = *(void **)v113;
                      v125 = v122 + 4 * (((char *)v109 - (char *)v120) >> 2);
                      *(_DWORD *)(v125 + 8) = *((_DWORD *)v113 + 2);
                      *(_QWORD *)v125 = v124;
                      v126 = v125;
                      if (v109 != v120)
                      {
                        do
                        {
                          v127 = *(uint64_t *)((char *)v109 - 12);
                          v109 = (void **)((char *)v109 - 12);
                          v128 = *((_DWORD *)v109 + 2);
                          *(_QWORD *)(v126 - 12) = v127;
                          v126 -= 12;
                          *(_DWORD *)(v126 + 8) = v128;
                        }
                        while (v109 != v120);
                        v109 = p_block;
                      }
                      v119 = v125 + 12;
                      p_block = (void **)v126;
                      v210 = v125 + 12;
                      v211 = v122 + 12 * v123;
                      if (v109)
                        operator delete(v109);
                    }
                    else
                    {
                      v118 = *(void **)v113;
                      *((_DWORD *)v109 + 2) = *((_DWORD *)v113 + 2);
                      *v109 = v118;
                      v119 = (uint64_t)v109 + 12;
                    }
                    v210 = v119;
                    v109 = (void **)v119;
                  }
LABEL_198:
                  ;
                }
                v107 = v168;
                if (p_block != v109)
                {
                  v109 = p_block;
                  if (!*(_DWORD *)v108)
                    break;
                }
                if (v109)
                  goto LABEL_202;
LABEL_203:
                v108 = (const HALS_Listener *)((char *)v108 + 64);
                if (v108 == v107)
                  goto LABEL_211;
              }
              std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v108, (uint64_t)&p_block);
              v129 = v207;
              if ((unint64_t)v207 >= v208)
              {
                v207 = (_QWORD *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v206, (uint64_t)&block);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              else
              {
                *v207 = block;
                *(_OWORD *)(v129 + 1) = *(_OWORD *)v184;
                *(_OWORD *)(v129 + 3) = *(_OWORD *)&v184[16];
                *(_QWORD *)v184 = 0;
                *(_QWORD *)&v184[8] = 0;
                v129[6] = 0;
                v129[7] = 0;
                v129[5] = 0;
                *(_OWORD *)(v129 + 5) = __p;
                v129[7] = v186;
                __p = 0uLL;
                v186 = 0;
                v207 = v129 + 8;
              }
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
              if (!v109)
                goto LABEL_203;
LABEL_202:
              v210 = (unint64_t)v109;
              operator delete(v109);
              goto LABEL_203;
            }
LABEL_211:
            HALB_Mutex::Locker::~Locker(&v197);
            v102 = v164;
            v104 = v160;
            v103 = v162;
            if (v206 != (_BYTE *)v207)
            {
              LODWORD(block) = *v162;
              memset(v184, 0, 24);
              std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v184, (uint64_t)v206, (uint64_t)v207, ((char *)v207 - v206) >> 6);
              std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v200, block, (uint64_t)&block);
              p_block = (void **)v184;
              std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
            }
            block = &v206;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
          }
          v131 = *v104++;
          v130 = v131;
          v132 = (std::__shared_weak_count *)v176[0];
          if (v176[0])
          {
            v133 = (unint64_t *)(v176[0] + 8);
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          if (--v102)
          {
            v101 += 12 * v130;
            ++v103;
            if (v101 != (char *)v158)
              continue;
          }
          break;
        }
      }
      v10 = (char *)v152;
      v42 = v169;
      HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v156, (uint64_t)v152, v169, (const unsigned int *)v154, (uint64_t)v155, 0, v146, v154);
      block = 0;
      *(_QWORD *)v184 = 0;
      *(_QWORD *)&v184[8] = 0;
      HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v156, (uint64_t)v152, (uint64_t)v169, v154, (uint64_t)v155, (uint64_t)&v203, (uint64_t)&block);
      if (block)
      {
        *(_QWORD *)v184 = block;
        operator delete(block);
      }
      HALS_NotificationManager::CallListeners_Sync(a3, &v200);
      p_block = 0;
      v210 = 0;
      v211 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&p_block, v152, (uint64_t)&v152[v156], (v151 >> 2));
      v206 = 0;
      v207 = 0;
      v208 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v206, v169, (uint64_t)&v169[(v151 >> 2)], (v151 >> 2));
      v197 = 0;
      v198 = 0;
      v199 = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v197, v155, v158, v148);
      block = (void *)MEMORY[0x1E0C809B0];
      *(_QWORD *)v184 = 1174405120;
      *(_QWORD *)&v184[8] = ___ZN24HALS_NotificationManager22GroupPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddress_block_invoke;
      *(_QWORD *)&v184[16] = &__block_descriptor_tmp_1_8881;
      v135 = (uint64_t)v173;
      *(_QWORD *)&v184[24] = v173;
      *(char **)&__p = v174[0];
      if (v174[0])
      {
        v136 = (unint64_t *)(v174[0] + 8);
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      v195 = a2;
      v186 = 0;
      v187 = 0;
      *((_QWORD *)&__p + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)&__p + 1, p_block, v210, (uint64_t)(v210 - (_QWORD)p_block) >> 2);
      v188 = 0;
      v189 = 0;
      v190 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, v206, (uint64_t)v207, ((char *)v207 - v206) >> 2);
      v191 = 0;
      v192 = 0;
      v193 = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v191, v197, (uint64_t)v198, 0xAAAAAAAAAAAAAAABLL * ((v198 - (char *)v197) >> 2));
      v196 = a3;
      v194 = v149;
      v138 = atomic_load((unsigned __int8 *)(v135 + 336));
      if ((v138 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(v135 + 337));
      dispatch_async(*(dispatch_queue_t *)(v135 + 304), &block);
      if (v191)
      {
        v192 = v191;
        operator delete(v191);
      }
      if (v188)
      {
        v189 = v188;
        operator delete(v188);
      }
      if (*((_QWORD *)&__p + 1))
      {
        v186 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v139 = (std::__shared_weak_count *)__p;
      if ((_QWORD)__p)
      {
        v140 = (unint64_t *)(__p + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      if (v197)
        operator delete(v197);
      if (v206)
        operator delete(v206);
      if (p_block)
        operator delete(p_block);
      std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v201);
      p_block = (void **)&v203;
      std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
    }
    else
    {
      HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v156, (uint64_t)v10, v169, (const unsigned int *)v154, (uint64_t)v155, 0, v146, v147);
    }
    v142 = (std::__shared_weak_count *)v174[0];
    if (!v174[0])
      goto LABEL_257;
    v145 = (unint64_t *)(v174[0] + 8);
    do
      v144 = __ldaxr(v145);
    while (__stlxr(v144 - 1, v145));
    goto LABEL_255;
  }
  v41 = atomic_load(&HALS_NotificationManager::sInitialized);
  v42 = v169;
  if (v41 != -1)
  {
    block = HALS_NotificationManager::Initialize;
    p_block = &block;
    std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v177, a2);
  if (v177)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v177 + 8));
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v43 = v177;
    p_block = (void **)(v177 + 184);
    LODWORD(v210) = HALB_Mutex::Lock((HALB_Mutex *)(v177 + 184));
    v44 = *(_QWORD *)(v43 + 280);
    v45 = *(_QWORD *)(v43 + 288);
    if (v44 != v45)
    {
      while (*(_DWORD *)v44 > 1u)
      {
LABEL_68:
        v44 += 64;
        if (v44 == v45)
          goto LABEL_69;
      }
      if (*(_DWORD *)v44)
      {
        block = *(void **)v44;
        *(_QWORD *)v184 = *(_QWORD *)(v44 + 8);
        v46 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v184[8] = v46;
        *(_QWORD *)&v184[24] = *(_QWORD *)(v44 + 32);
        if (*(_QWORD *)v184)
        {
          dispatch_retain(*(dispatch_object_t *)v184);
          v47 = *(const void **)&v184[8];
          if (!*(_QWORD *)&v184[8])
            goto LABEL_57;
        }
        else
        {
          v47 = (const void *)v46;
          if (!(_QWORD)v46)
          {
LABEL_57:
            __p = 0uLL;
            v186 = 0;
            v50 = v198;
            if ((unint64_t)v198 < v199)
            {
              *(_QWORD *)v198 = block;
              *(_OWORD *)(v50 + 8) = *(_OWORD *)v184;
              *(_OWORD *)(v50 + 24) = *(_OWORD *)&v184[16];
              *(_QWORD *)v184 = 0;
              *(_QWORD *)&v184[8] = 0;
              *((_QWORD *)v50 + 6) = 0;
              *((_QWORD *)v50 + 7) = 0;
              *((_QWORD *)v50 + 5) = 0;
              *(_OWORD *)(v50 + 40) = __p;
              *((_QWORD *)v50 + 7) = v186;
              __p = 0uLL;
              v186 = 0;
              v198 = v50 + 64;
LABEL_67:
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
              goto LABEL_68;
            }
            v51 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v197, (uint64_t)&block);
            v52 = (void *)__p;
            v198 = v51;
            if (!(_QWORD)__p)
              goto LABEL_67;
            goto LABEL_66;
          }
        }
        *(_QWORD *)&v184[8] = _Block_copy(v47);
        goto LABEL_57;
      }
      block = *(void **)v44;
      *(_QWORD *)v184 = *(_QWORD *)(v44 + 8);
      v48 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)&v184[8] = v48;
      *(_QWORD *)&v184[24] = *(_QWORD *)(v44 + 32);
      if (*(_QWORD *)v184)
      {
        dispatch_retain(*(dispatch_object_t *)v184);
        v49 = *(const void **)&v184[8];
        if (!*(_QWORD *)&v184[8])
          goto LABEL_63;
      }
      else
      {
        v49 = (const void *)v48;
        if (!(_QWORD)v48)
        {
LABEL_63:
          __p = 0uLL;
          v186 = 0;
          v53 = v201;
          if ((unint64_t)v201 < v202)
          {
            *(_QWORD *)v201 = block;
            *(_OWORD *)(v53 + 8) = *(_OWORD *)v184;
            *(_OWORD *)(v53 + 24) = *(_OWORD *)&v184[16];
            *(_QWORD *)v184 = 0;
            *(_QWORD *)&v184[8] = 0;
            *((_QWORD *)v53 + 6) = 0;
            *((_QWORD *)v53 + 7) = 0;
            *((_QWORD *)v53 + 5) = 0;
            *(_OWORD *)(v53 + 40) = __p;
            *((_QWORD *)v53 + 7) = v186;
            __p = 0uLL;
            v186 = 0;
            v201 = v53 + 64;
            goto LABEL_67;
          }
          v54 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v200, (uint64_t)&block);
          v52 = (void *)__p;
          v201 = v54;
          if (!(_QWORD)__p)
            goto LABEL_67;
LABEL_66:
          *((_QWORD *)&__p + 1) = v52;
          operator delete(v52);
          goto LABEL_67;
        }
      }
      *(_QWORD *)&v184[8] = _Block_copy(v49);
      goto LABEL_63;
    }
LABEL_69:
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_block);
    v176[0] = 0;
    v176[1] = 0;
    v174[1] = 0;
    v175 = v176;
    v173 = v174;
    v174[0] = 0;
    if ((_DWORD)v156 && (_DWORD)v154)
    {
      v55 = v155;
      v56 = v156;
      v57 = (unsigned int *)v10;
      v161 = v169;
      while (1)
      {
        v159 = v56;
        v163 = v57;
        HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v179, *v57);
        v58 = v179;
        if (v179)
        {
          v206 = 0;
          v207 = 0;
          v208 = 0;
          v203 = 0;
          v204 = 0;
          v205 = 0;
          v59 = *v161;
          v181 = (HALB_Mutex *)(v179 + 184);
          v182 = HALB_Mutex::Lock((HALB_Mutex *)(v179 + 184));
          v61 = *(const HALS_Listener **)(v58 + 280);
          v60 = *(const HALS_Listener **)(v58 + 288);
          if (v61 != v60)
          {
            v167 = v60;
            while (1)
            {
              if (*(_DWORD *)v61 >= 2u)
              {
                p_block = 0;
                v210 = 0;
                v211 = 0;
                if ((_DWORD)v59)
                  break;
              }
LABEL_123:
              v61 = (const HALS_Listener *)((char *)v61 + 64);
              if (v61 == v60)
                goto LABEL_127;
            }
            v62 = 0;
            for (j = 0; j != v59; ++j)
            {
              v64 = (_DWORD *)*((_QWORD *)v61 + 5);
              v65 = (_DWORD *)*((_QWORD *)v61 + 6);
              if (v64 != v65)
              {
                v66 = &v55[12 * j];
                while (1)
                {
                  if (*v64 == 707406378 || *v64 == *(_DWORD *)v66)
                  {
                    v68 = v64[1];
                    if (v68 == 707406378 || v68 == *((_DWORD *)v66 + 1))
                    {
                      v70 = v64[2];
                      if (v70 == -1 || v70 == *((_DWORD *)v66 + 2))
                        break;
                    }
                  }
                  v64 += 3;
                  if (v64 == v65)
                    goto LABEL_111;
                }
                if ((unint64_t)v62 >= v211)
                {
                  v73 = p_block;
                  v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)p_block) >> 2) + 1;
                  if (v74 > 0x1555555555555555)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)p_block) >> 2) > v74)
                    v74 = 0x5555555555555556 * ((uint64_t)(v211 - (_QWORD)p_block) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - (_QWORD)p_block) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v75 = 0x1555555555555555;
                  else
                    v75 = v74;
                  if (v75)
                    v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v75);
                  else
                    v76 = 0;
                  v77 = *(void **)v66;
                  v78 = v75 + 4 * (((char *)v62 - (char *)v73) >> 2);
                  *(_DWORD *)(v78 + 8) = *((_DWORD *)v66 + 2);
                  *(_QWORD *)v78 = v77;
                  v79 = v78;
                  if (v62 != v73)
                  {
                    do
                    {
                      v80 = *(uint64_t *)((char *)v62 - 12);
                      v62 = (void **)((char *)v62 - 12);
                      v81 = *((_DWORD *)v62 + 2);
                      *(_QWORD *)(v79 - 12) = v80;
                      v79 -= 12;
                      *(_DWORD *)(v79 + 8) = v81;
                    }
                    while (v62 != v73);
                    v62 = p_block;
                  }
                  v72 = v78 + 12;
                  p_block = (void **)v79;
                  v210 = v78 + 12;
                  v211 = v75 + 12 * v76;
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  v71 = *(void **)v66;
                  *((_DWORD *)v62 + 2) = *((_DWORD *)v66 + 2);
                  *v62 = v71;
                  v72 = (uint64_t)v62 + 12;
                }
                v210 = v72;
                v62 = (void **)v72;
              }
LABEL_111:
              ;
            }
            v60 = v167;
            if (p_block != v62)
            {
              v62 = p_block;
              if (*(_DWORD *)v61)
              {
                std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v61, (uint64_t)&p_block);
                v82 = v204;
                if ((unint64_t)v204 < v205)
                {
                  *(_QWORD *)v204 = block;
                  *(_OWORD *)(v82 + 8) = *(_OWORD *)v184;
                  *(_OWORD *)(v82 + 24) = *(_OWORD *)&v184[16];
                  *(_QWORD *)v184 = 0;
                  *(_QWORD *)&v184[8] = 0;
                  *((_QWORD *)v82 + 6) = 0;
                  *((_QWORD *)v82 + 7) = 0;
                  *((_QWORD *)v82 + 5) = 0;
                  *(_OWORD *)(v82 + 40) = __p;
                  *((_QWORD *)v82 + 7) = v186;
                  __p = 0uLL;
                  v186 = 0;
                  v204 = v82 + 64;
                  goto LABEL_120;
                }
                v84 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v203, (uint64_t)&block);
                v85 = (void *)__p;
                v204 = v84;
                if ((_QWORD)__p)
                {
LABEL_119:
                  *((_QWORD *)&__p + 1) = v85;
                  operator delete(v85);
                }
              }
              else
              {
                std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v61, (uint64_t)&p_block);
                v83 = v207;
                if ((unint64_t)v207 >= v208)
                {
                  v86 = (_QWORD *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v206, (uint64_t)&block);
                  v85 = (void *)__p;
                  v207 = v86;
                  if ((_QWORD)__p)
                    goto LABEL_119;
                }
                else
                {
                  *v207 = block;
                  *(_OWORD *)(v83 + 1) = *(_OWORD *)v184;
                  *(_OWORD *)(v83 + 3) = *(_OWORD *)&v184[16];
                  *(_QWORD *)v184 = 0;
                  *(_QWORD *)&v184[8] = 0;
                  v83[6] = 0;
                  v83[7] = 0;
                  v83[5] = 0;
                  *(_OWORD *)(v83 + 5) = __p;
                  v83[7] = v186;
                  __p = 0uLL;
                  v186 = 0;
                  v207 = v83 + 8;
                }
              }
LABEL_120:
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
            }
            if (v62)
            {
              v210 = (unint64_t)v62;
              operator delete(v62);
            }
            goto LABEL_123;
          }
LABEL_127:
          HALB_Mutex::Locker::~Locker(&v181);
          v42 = v169;
          if (v206 != (_BYTE *)v207)
          {
            LODWORD(block) = *v163;
            memset(v184, 0, 24);
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v184, (uint64_t)v206, (uint64_t)v207, ((char *)v207 - v206) >> 6);
            std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v175, block, (uint64_t)&block);
            p_block = (void **)v184;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
          }
          if (v203 != v204)
          {
            LODWORD(block) = *v163;
            memset(v184, 0, 24);
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v184, (uint64_t)v203, (uint64_t)v204, (v204 - v203) >> 6);
            std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v173, block, (uint64_t)&block);
            p_block = (void **)v184;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
          }
          block = &v203;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
          block = &v206;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
        }
        v87 = *v161++;
        v88 = v180;
        if (v180)
        {
          p_shared_owners = (unint64_t *)&v180->__shared_owners_;
          do
            v90 = __ldaxr(p_shared_owners);
          while (__stlxr(v90 - 1, p_shared_owners));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v56 = v159 - 1;
        if (v159 != 1)
        {
          v55 += 12 * v87;
          v57 = v163 + 1;
          if (v55 != &v155[12 * v154])
            continue;
        }
        break;
      }
    }
    HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v156, (uint64_t)v10, v42, (const unsigned int *)v154, (uint64_t)v155, (const AudioObjectPropertyAddress *)1, v146, v147);
    HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v156, (uint64_t)v10, (uint64_t)v42, v154, (uint64_t)v155, (uint64_t)&v200, a6);
    HALS_NotificationManager::CallListeners_Sync(a3, &v175);
    HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v156, (uint64_t)v10, (uint64_t)v42, v154, (uint64_t)v155, (uint64_t)&v197, a6);
    HALS_NotificationManager::CallListeners_Sync(a3, &v173);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(v177 + 8));
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v174[0]);
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v176[0]);
    block = &v197;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
    block = &v200;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
  }
  else
  {
    HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v156, (uint64_t)v10, v169, (const unsigned int *)v154, (uint64_t)v155, (const AudioObjectPropertyAddress *)1, v146, v147);
  }
  v142 = v178;
  if (v178)
  {
    v143 = (unint64_t *)&v178->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
LABEL_255:
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
LABEL_257:
  if (v170)
    operator delete(v170);
  if (v42)
    operator delete(v42);
  if (v10)
    operator delete(v10);
}

void sub_1B5B34878(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B33F4CLL);
}

void sub_1B5B34884(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B33F40);
}

void sub_1B5B34890(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,char *a32,uint64_t a33,char a34,char *a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  void *v53;
  void *v54;
  uint64_t v55;

  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(a32);
  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(a35);
  a43 = (void *)(v55 - 208);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  a43 = (void *)(v55 - 184);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (__p)
  {
    operator delete(__p);
    if (!v54)
    {
LABEL_3:
      if (!v53)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v54)
  {
    goto LABEL_3;
  }
  operator delete(v54);
  if (!v53)
LABEL_5:
    _Unwind_Resume((_Unwind_Exception *)a1);
LABEL_4:
  operator delete(v53);
  goto LABEL_5;
}

void HALS_NotificationManager::AddPropertyListener(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  NSObject **v11;
  dispatch_object_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char **v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int64x2_t v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _OWORD *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  char *v64;
  char *v65;
  char *v66;
  NSObject *v67;
  NSObject *v68;
  _QWORD *v69;
  char **v70;
  char **v71;
  NSObject *v72;
  const void *v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v81;
  HALB_Mutex *v82;
  int v83;
  void *__p[2];
  char v85;
  _QWORD v86[2];
  uint64_t v87;
  _QWORD v88[10];
  char v89;
  uint64_t v90;
  dispatch_object_t v91[40];
  char v92;
  dispatch_object_t object;
  _BYTE v94[32];
  void *v95;
  void *v96;
  uint64_t v97;
  char v98;
  dispatch_object_t p_object;
  __int128 v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v7 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v7 != -1)
  {
    object = (dispatch_object_t)HALS_NotificationManager::Initialize;
    p_object = (dispatch_object_t)&object;
    std::__call_once(&HALS_NotificationManager::sInitialized, &p_object, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  LOBYTE(v91[0]) = 0;
  v92 = 0;
  if (*(_BYTE *)(a4 + 320))
  {
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v91, *(dispatch_object_t *)a4);
    v92 = 1;
  }
  v81 = 0uLL;
  v82 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  v83 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  v8 = *(uint64_t **)HALS_NotificationManager::sObjectList;
  v9 = *(uint64_t **)(HALS_NotificationManager::sObjectList + 8);
  if (*(uint64_t **)HALS_NotificationManager::sObjectList != v9)
  {
    while (*(_DWORD *)*v8 < a2)
    {
      v8 += 2;
      if (v8 == v9)
        goto LABEL_14;
    }
  }
  if (v8 != v9)
  {
    if (*(_DWORD *)*v8 == a2)
    {
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v81, *v8, v8[1]);
      v9 = v8;
      if ((_QWORD)v81)
        goto LABEL_88;
    }
    else
    {
      v9 = v8;
    }
  }
LABEL_14:
  v10 = (char *)operator new(0x288uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E698BE70;
  LOBYTE(object) = 0;
  v98 = 0;
  if (v92)
  {
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, v91[0]);
    v98 = 1;
  }
  *((_DWORD *)v10 + 6) = a2;
  HALB_Guard::HALB_Guard((HALB_Guard *)(v10 + 32));
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v10 + 208));
  v11 = (NSObject **)(v10 + 328);
  *((_QWORD *)v10 + 46) = 0;
  *((_QWORD *)v10 + 47) = 0;
  *((_OWORD *)v10 + 19) = 0u;
  *((_OWORD *)v10 + 20) = 0u;
  *((_OWORD *)v10 + 21) = 0u;
  *(_OWORD *)(v10 + 346) = 0u;
  *((_QWORD *)v10 + 48) = 0;
  *((_QWORD *)v10 + 49) = 850045863;
  *((_OWORD *)v10 + 25) = 0u;
  *((_OWORD *)v10 + 26) = 0u;
  *((_OWORD *)v10 + 27) = 0u;
  *((_OWORD *)v10 + 28) = 0u;
  *((_OWORD *)v10 + 29) = 0u;
  *((_QWORD *)v10 + 60) = 850045863;
  *(_OWORD *)(v10 + 488) = 0u;
  *(_OWORD *)(v10 + 504) = 0u;
  *(_OWORD *)(v10 + 520) = 0u;
  *(_OWORD *)(v10 + 536) = 0u;
  *(_OWORD *)(v10 + 552) = 0u;
  *((_QWORD *)v10 + 71) = 850045863;
  *((_OWORD *)v10 + 36) = 0u;
  *((_OWORD *)v10 + 37) = 0u;
  *((_OWORD *)v10 + 38) = 0u;
  *((_OWORD *)v10 + 39) = 0u;
  *((_QWORD *)v10 + 80) = dispatch_semaphore_create(0);
  if (v98)
  {
    v12 = object;
    if (object)
      dispatch_retain(object);
    v13 = *v11;
    *v11 = v12;
    if (v13)
      dispatch_release(v13);
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"HAL Notification Queue ", 23);
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v88);
    if (v85 >= 0)
      v14 = (char *)__p;
    else
      v14 = (char *)__p[0];
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&p_object, v14);
    AMCP::Utility::Dispatch_Queue::operator=((NSObject **)v10 + 41, p_object);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&p_object);
    if (v85 < 0)
      operator delete(__p[0]);
    v86[0] = *MEMORY[0x1E0DE4F50];
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v86 + *(_QWORD *)(v86[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v87 = v15;
    v88[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v89 < 0)
      operator delete((void *)v88[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B5E50598](&v90);
  }
  if (v98)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
  *(_QWORD *)&v16 = v10 + 24;
  *((_QWORD *)&v16 + 1) = v10;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v81 = v16;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (char **)HALS_NotificationManager::sObjectList;
  v22 = HALS_NotificationManager::sObjectList + 16;
  v21 = *(_QWORD *)(HALS_NotificationManager::sObjectList + 16);
  v24 = *(uint64_t **)HALS_NotificationManager::sObjectList;
  v23 = *(char **)(HALS_NotificationManager::sObjectList + 8);
  v25 = (uint64_t)v9 - *(_QWORD *)HALS_NotificationManager::sObjectList;
  v26 = v25 >> 4;
  v27 = (char *)(*(_QWORD *)HALS_NotificationManager::sObjectList + (v25 & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)v23 >= v21)
  {
    v32 = ((v23 - (char *)v24) >> 4) + 1;
    if (v32 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v33 = v21 - (_QWORD)v24;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v102 = HALS_NotificationManager::sObjectList + 16;
    if (v34)
      v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v34);
    else
      v35 = 0;
    v39 = (_QWORD *)(v34 + 16 * v26);
    p_object = (dispatch_object_t)v34;
    *(_QWORD *)&v100 = v39;
    *((_QWORD *)&v100 + 1) = v39;
    v101 = (v34 + 16 * v35);
    if (v26 == v35)
    {
      if (v25 < 1)
      {
        if (v24 == v9)
          v44 = 1;
        else
          v44 = v25 >> 3;
        *(_QWORD *)&v94[24] = v22;
        v45 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v44);
        v47 = v100;
        v48 = *((_QWORD *)&v100 + 1) - v100;
        if (*((_QWORD *)&v100 + 1) == (_QWORD)v100)
        {
          v53 = vdupq_n_s64(v100);
          v50 = (unint64_t)&v45[2 * (v44 >> 2)];
        }
        else
        {
          v49 = v48 >> 4;
          v50 = (unint64_t)&v45[2 * (v44 >> 2)] + (v48 & 0xFFFFFFFFFFFFFFF0);
          v51 = 16 * v49;
          v52 = &v45[2 * (v44 >> 2)];
          do
          {
            *(_OWORD *)&v52->isa = *(_OWORD *)v47;
            v52 += 2;
            *(_QWORD *)v47 = 0;
            *(_QWORD *)(v47 + 8) = 0;
            v47 += 16;
            v51 -= 16;
          }
          while (v51);
          v53 = (int64x2_t)v100;
        }
        v54 = p_object;
        v55 = v101;
        p_object = v45;
        *(_QWORD *)&v100 = &v45[2 * (v44 >> 2)];
        *(int64x2_t *)v94 = v53;
        *((_QWORD *)&v100 + 1) = v50;
        v101 = &v45[2 * v46];
        object = v54;
        *(_QWORD *)&v94[16] = v55;
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
        v39 = (_QWORD *)*((_QWORD *)&v100 + 1);
      }
      else
      {
        v40 = v26 + 2;
        if (v26 >= -1)
          v40 = v26 + 1;
        v39 -= 2 * (v40 >> 1);
        *((_QWORD *)&v100 + 1) = v39;
        *(_QWORD *)&v100 = v39;
      }
    }
    *v39 = v81;
    v56 = *((_QWORD *)&v81 + 1);
    v39[1] = *((_QWORD *)&v81 + 1);
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v39 = (_QWORD *)*((_QWORD *)&v100 + 1);
    }
    v59 = v39 + 2;
    *((_QWORD *)&v100 + 1) = v39 + 2;
    v60 = (char *)v100;
    v61 = *v20;
    if (*v20 != v27)
    {
      v62 = v27;
      do
      {
        v63 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v60 - 1) = v63;
        v60 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v61);
      v59 = (_OWORD *)*((_QWORD *)&v100 + 1);
    }
    *(_QWORD *)&v100 = v60;
    v64 = v20[1];
    if (v64 != v27)
    {
      do
      {
        *v59++ = *(_OWORD *)v27;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        v27 += 16;
      }
      while (v27 != v64);
      v60 = (char *)v100;
    }
    *((_QWORD *)&v100 + 1) = v59;
    v65 = *v20;
    *v20 = v60;
    *(_QWORD *)&v100 = v65;
    v66 = v20[1];
    v20[1] = (char *)*((_QWORD *)&v100 + 1);
    v67 = v100;
    *((_QWORD *)&v100 + 1) = v66;
    v68 = v20[2];
    v20[2] = (char *)v101;
    v101 = v68;
    p_object = v67;
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&p_object);
  }
  else if (v27 == v23)
  {
    v36 = *((_QWORD *)&v81 + 1);
    *(_OWORD *)v23 = v81;
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v20[1] = v23 + 16;
  }
  else
  {
    v28 = v27 + 16;
    v29 = (uint64_t)(v23 - 16);
    if ((unint64_t)v23 < 0x10)
    {
      v31 = *(char **)(HALS_NotificationManager::sObjectList + 8);
    }
    else
    {
      v30 = v23 - 16;
      v31 = *(char **)(HALS_NotificationManager::sObjectList + 8);
      do
      {
        *(_OWORD *)v31 = *(_OWORD *)v30;
        v31 += 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        v30 += 16;
      }
      while (v30 < v23);
    }
    v20[1] = v31;
    if (v23 != v28)
    {
      v41 = 16 * ((v23 - v28) >> 4);
      v42 = (uint64_t)&v24[2 * v26 - 2];
      do
      {
        v29 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v29, (__int128 *)(v42 + v41)) - 16;
        v41 -= 16;
      }
      while (v41);
    }
    v43 = (uint64_t *)&v81;
    if (v27 <= (char *)&v81)
      v43 = (uint64_t *)(&v81 + (v20[1] > (char *)&v81));
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v27, *v43, v43[1]);
  }
LABEL_88:
  HALB_Mutex::Locker::~Locker(&v82);
  if (v92)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v91);
  if ((_QWORD)v81)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v81 + 8));
    v69 = (_QWORD *)v81;
    p_object = (dispatch_object_t)(v81 + 184);
    LODWORD(v100) = HALB_Mutex::Lock((HALB_Mutex *)(v81 + 184));
    v70 = (char **)v69[35];
    v71 = (char **)v69[36];
    if (v70 != v71)
    {
      while (!HALS_Listener::IsSame((HALS_Listener *)v70, (const HALS_Listener *)a1))
      {
        v70 += 8;
        if (v70 == v71)
          goto LABEL_96;
      }
    }
    if (v70 == v71)
    {
LABEL_96:
      object = *(dispatch_object_t *)a1;
      v72 = *(NSObject **)(a1 + 8);
      *(_QWORD *)v94 = v72;
      *(_OWORD *)&v94[8] = *(_OWORD *)(a1 + 16);
      *(_QWORD *)&v94[24] = *(_QWORD *)(a1 + 32);
      v73 = *(const void **)&v94[8];
      if (v72)
        dispatch_retain(v72);
      if (v73)
        *(_QWORD *)&v94[8] = _Block_copy(v73);
      v96 = 0;
      v95 = 0;
      v97 = 0;
      v74 = v69[36];
      if (v74 >= v69[37])
      {
        v75 = std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(v69 + 35, (uint64_t)&object);
        v76 = v95;
        v69[36] = v75;
        if (v76)
        {
          v96 = v76;
          operator delete(v76);
        }
      }
      else
      {
        *(_QWORD *)v74 = object;
        *(_OWORD *)(v74 + 8) = *(_OWORD *)v94;
        *(_OWORD *)(v74 + 24) = *(_OWORD *)&v94[16];
        *(_QWORD *)v94 = 0;
        *(_QWORD *)&v94[8] = 0;
        *(_QWORD *)(v74 + 48) = 0;
        *(_QWORD *)(v74 + 56) = 0;
        *(_QWORD *)(v74 + 40) = 0;
        v96 = 0;
        v97 = 0;
        v95 = 0;
        v69[36] = v74 + 64;
      }
      HALS_Listener::~HALS_Listener((HALS_Listener *)&object);
      v70 = (char **)(v69[36] - 64);
    }
    std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)(v70 + 5), v70[6], a3, a3 + 12, 1);
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_object);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(v81 + 8));
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_1B5B3543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, HALB_Mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&STACK[0x3F8]);
  HALB_Mutex::Locker::~Locker(&a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (LOBYTE(STACK[0x2A8]))
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a54);
  _Unwind_Resume(a1);
}

BOOL HALS_Listener::IsSame(HALS_Listener *this, const HALS_Listener *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_DWORD *)this != *(_DWORD *)a2)
    return 0;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      v4 = *((_DWORD *)this + 1) == *((_DWORD *)a2 + 1);
      goto LABEL_6;
    case 2:
      if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1))
        return 0;
      v2 = *((_QWORD *)this + 2);
      v3 = *((_QWORD *)a2 + 2);
      goto LABEL_4;
    case 3:
      if (*((_QWORD *)this + 3) != *((_QWORD *)a2 + 3))
        return 0;
      v2 = *((_QWORD *)this + 4);
      v3 = *((_QWORD *)a2 + 4);
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
      v2 = *((_QWORD *)this + 3);
      v3 = *((_QWORD *)a2 + 3);
LABEL_4:
      v4 = v2 == v3;
LABEL_6:
      result = v4;
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698BE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698BE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 328));
  v2 = (void **)(a1 + 304);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)(a1 + 208));
  HALB_Guard::~HALB_Guard((pthread_cond_t *)(a1 + 32));
}

void HALS_NotificationManager::RemovePropertyListener(HALS_NotificationManager *this, const HALS_Listener *a2, _DWORD *a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  HALS_Listener *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  pthread_cond_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  NSObject *v36;
  const char *v37;
  _DWORD *v38;
  _DWORD *exception;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  HALB_Guard *v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v8 != -1)
  {
    *(_QWORD *)buf = HALS_NotificationManager::Initialize;
    v42 = (HALB_Guard *)buf;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v40, a2);
  v9 = v40;
  if (!v40)
    goto LABEL_49;
  v42 = (HALB_Guard *)(v40 + 1);
  v43 = HALB_Mutex::Lock((HALB_Mutex *)(v40 + 1));
  v10 = v9[22];
  if (v9[19] + v9[20] + v10)
  {
    v11 = v9[21];
    if (v11 == -1)
    {
LABEL_55:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_63;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_NotificationManager.cpp";
      v45 = 1024;
      v46 = 74;
      v36 = MEMORY[0x1E0C81028];
      v37 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at maximum before increment. this is probably a bug";
      goto LABEL_62;
    }
    v9[21] = v11 + 1;
    while (1)
    {
      v10 = v9[22];
      if (!(v9[19] + v9[20] + v10))
        break;
      HALB_Guard::Wait(v42);
    }
    v12 = v9[21];
    if (!v12)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_63;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_NotificationManager.cpp";
      v45 = 1024;
      v46 = 80;
      v36 = MEMORY[0x1E0C81028];
      v37 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug";
LABEL_62:
      _os_log_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, v37, buf, 0x12u);
LABEL_63:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v9[21] = v12 - 1;
  }
  if (v10 == -1)
    goto LABEL_55;
  v9[22] = v10 + 1;
  HALB_Guard::Locker::~Locker(&v42);
  v13 = v40;
  *(_QWORD *)buf = v40 + 23;
  *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v40 + 23));
  v14 = v13[35];
  v15 = v13[36];
  if (v14 != v15)
  {
    while (!HALS_Listener::IsSame((HALS_Listener *)v14, this))
    {
      v14 += 64;
      if (v14 == v15)
        goto LABEL_43;
    }
  }
  if (v14 != v15)
  {
    v17 = *(_DWORD **)(v14 + 40);
    v16 = *(_DWORD **)(v14 + 48);
    v18 = v17;
    if (v17 != v16)
    {
      v18 = *(_DWORD **)(v14 + 40);
      while (*v18 != *a3 || v18[1] != a3[1] || v18[2] != a3[2])
      {
        v18 += 3;
        if (v18 == v16)
          goto LABEL_34;
      }
    }
    if (v18 != v16)
    {
      v19 = v18 + 3;
      if (v18 + 3 != v16)
      {
        do
        {
          if (*v19 != *a3 || v19[1] != a3[1] || v19[2] != a3[2])
          {
            v20 = *(_QWORD *)v19;
            v18[2] = v19[2];
            *(_QWORD *)v18 = v20;
            v18 += 3;
          }
          v19 += 3;
        }
        while (v19 != v16);
        v17 = *(_DWORD **)(v14 + 40);
        v16 = *(_DWORD **)(v14 + 48);
      }
      if (v16 != v18)
      {
        v16 = v18;
        *(_QWORD *)(v14 + 48) = v18;
      }
    }
LABEL_34:
    if (v17 == v16)
    {
      v21 = (HALS_Listener *)(v14 + 64);
      v22 = v13[36];
      if (v14 + 64 != v22)
      {
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)(v14 + 64);
          *(_OWORD *)(v14 + 8) = *(_OWORD *)(v14 + 72);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v14 + 88);
          *(_QWORD *)(v14 + 72) = 0;
          *(_QWORD *)(v14 + 80) = 0;
          v23 = *(void **)(v14 + 40);
          if (v23)
          {
            *(_QWORD *)(v14 + 48) = v23;
            operator delete(v23);
            *(_QWORD *)(v14 + 40) = 0;
            *(_QWORD *)(v14 + 48) = 0;
            *(_QWORD *)(v14 + 56) = 0;
          }
          *(_OWORD *)(v14 + 40) = *(_OWORD *)(v14 + 104);
          *(_QWORD *)(v14 + 56) = *(_QWORD *)(v14 + 120);
          *(_QWORD *)(v14 + 112) = 0;
          *(_QWORD *)(v14 + 120) = 0;
          *(_QWORD *)(v14 + 104) = 0;
          v24 = v14 + 64;
          v25 = v14 + 128;
          v14 += 64;
        }
        while (v25 != v22);
        v21 = (HALS_Listener *)v13[36];
        v14 = v24;
      }
      while (v21 != (HALS_Listener *)v14)
      {
        v21 = (HALS_Listener *)((char *)v21 - 64);
        std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(v21);
      }
      v13[36] = v14;
    }
  }
LABEL_43:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
  v26 = v40;
  *(_QWORD *)buf = v40 + 23;
  *(_DWORD *)&buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v40 + 23));
  v28 = v26[35];
  v27 = v26[36];
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
  if (v28 == v27)
    HALS_NotificationManager::RemoveObject(a2);
  v29 = v40;
  v30 = (pthread_cond_t *)(v40 + 1);
  v42 = (HALB_Guard *)(v40 + 1);
  v43 = HALB_Mutex::Lock((HALB_Mutex *)(v40 + 1));
  v31 = v29[22];
  if (!v31)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_NotificationManager.cpp";
      v45 = 1024;
      v46 = 80;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug", buf, 0x12u);
    }
    v38 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v38 = &off_1E69A1B30;
    v38[2] = 1852797029;
  }
  v32 = v31 - 1;
  v29[22] = v32;
  if (!v32)
    HALB_Guard::NotifyAll(v30);
  HALB_Guard::Locker::~Locker(&v42);
LABEL_49:
  v33 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1B5B35BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, HALB_Mutex *a11)
{
  HALB_Guard::Locker::~Locker(&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::RemoveObject(HALS_NotificationManager *this)
{
  unsigned int v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  HALB_Mutex *v6;
  int v7;

  v1 = this;
  v6 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  v2 = HALS_NotificationManager::sObjectList;
  v3 = *(__int128 **)HALS_NotificationManager::sObjectList;
  v4 = *(_QWORD *)(HALS_NotificationManager::sObjectList + 8);
  if (*(_QWORD *)HALS_NotificationManager::sObjectList != v4)
  {
    while (**(_DWORD **)v3 < v1)
    {
      if (++v3 == (__int128 *)v4)
        goto LABEL_13;
    }
  }
  if (v3 != (__int128 *)v4 && **(_DWORD **)v3 == v1)
  {
    if (v3 + 1 != (__int128 *)v4)
    {
      do
        v5 = (uint64_t)v3++;
      while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v5, v3) + 32 != v4);
      v4 = *(_QWORD *)(v2 + 8);
    }
    while ((__int128 *)v4 != v3)
    {
      v4 -= 16;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4);
    }
    *(_QWORD *)(v2 + 8) = v3;
  }
LABEL_13:
  HALB_Mutex::Locker::~Locker(&v6);
}

void HALS_NotificationManager::ObjectIsDead(HALS_NotificationManager *this)
{
  unint64_t v2;
  uint64_t (**v3)(HALS_NotificationManager *);
  uint64_t (*v4)(HALS_NotificationManager *);

  v2 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v2 != -1)
  {
    v3 = &v4;
    v4 = HALS_NotificationManager::Initialize;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  HALS_NotificationManager::RemoveObject(this);
}

_QWORD *HALS_Listener::HALS_Listener(_QWORD *a1, dispatch_object_t object, void *aBlock)
{
  *a1 = 2;
  a1[1] = object;
  a1[2] = aBlock;
  a1[3] = 0;
  a1[4] = 0;
  if (object)
  {
    dispatch_retain(object);
    aBlock = (void *)a1[2];
  }
  if (aBlock)
    a1[2] = _Block_copy(aBlock);
  return a1;
}

void HALS_IOA2Control::Activate(HALS_IOA2Control *this)
{
  HALS_Object *v2;

  HALS_IOA2Control::SynchronizeWithDictionary(this);
  HALS_Object::Activate(this, v2);
}

void HALS_IOA2Control::~HALS_IOA2Control(HALS_IOA2Control *this)
{
  HALS_IOA2Control::~HALS_IOA2Control(this);
  JUMPOUT(0x1B5E50688);
}

{
  int v2;
  int v3;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E698BEC0;
  v2 = *((_DWORD *)this + 5);
  v3 = *((_DWORD *)this + 6);
  if (v2 == v3)
  {
    if (v2 != 1936028002 && v2 != 1651273579)
      goto LABEL_19;
LABEL_18:
    if (!*((_QWORD *)this + 13))
      goto LABEL_21;
    goto LABEL_19;
  }
  if (v2 == 1651273579 || v2 == 1936028002 || v3 == 1651273579 || v3 == 1936028002)
    goto LABEL_18;
LABEL_19:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = 136315394;
    v10 = "HALS_IOA2Control.cpp";
    v11 = 1024;
    v12 = 73;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::~HALS_IOA2Control: somebody forgot to unmap the block control buffer", (uint8_t *)&v9, 0x12u);
  }
LABEL_21:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 17));
  CACFDictionary::~CACFDictionary((HALS_IOA2Control *)((char *)this + 80));
  *(_QWORD *)this = off_1E6995A68;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_IOA2Control::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a3, a4);
  if ((_DWORD)result)
    return HALS_Control::HasProperty(a1, a2, a3);
  return result;
}

BOOL HALS_IOA2Control::IsPropertySettable(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  HALB_Mutex *v7;
  _BOOL8 v8;
  _DWORD *exception;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char IsPropertySettable;

  if (((*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  IsPropertySettable = 0;
  IsPropertySettable = HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  if (*((_BYTE *)v13 + 24))
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK16HALS_IOA2Control18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    v11[3] = &unk_1E698BFB0;
    v11[4] = &v12;
    v11[5] = this;
    v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v11);
    v8 = *((_BYTE *)v13 + 24) != 0;
  }
  else
  {
    v8 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1B5B35F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Control::GetPropertyDataSize(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v10;
  HALB_Mutex *v11;
  uint64_t v12;
  HALB_Mutex *v13;
  _DWORD *exception;
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if (a3->mSelector == 1651272546)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x2000000000;
    v22 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
    v16[3] = &unk_1E698C028;
    v16[4] = &v19;
    v16[5] = this;
    v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
    v12 = *((unsigned int *)v20 + 6);
LABEL_9:
    _Block_object_dispose(&v19, 8);
    return v12;
  }
  if (mSelector == 1935892841)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x2000000000;
    v22 = 0;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
    v17[3] = &unk_1E698C000;
    v17[4] = &v19;
    v17[5] = this;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v17);
    goto LABEL_8;
  }
  if (mSelector == 1935893353)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x2000000000;
    v22 = 1;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
    v18[3] = &unk_1E698BFD8;
    v18[4] = &v19;
    v18[5] = this;
    v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v18);
LABEL_8:
    v12 = (4 * *((_DWORD *)v20 + 6));
    goto LABEL_9;
  }
  return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1B5B361C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void HALS_IOA2Control::GetPropertyData(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  signed int mSelector;
  HALB_Mutex *v18;
  HALB_Mutex *v19;
  HALB_Mutex *v20;
  int v21;
  HALB_Mutex *v22;
  _DWORD *v23;
  HALB_Mutex *v24;
  HALB_Mutex *v25;
  HALB_Mutex *v26;
  HALB_Mutex *v27;
  _DWORD *v28;
  HALB_Mutex *v29;
  HALB_Mutex *v30;
  HALB_Mutex *v31;
  HALB_Mutex *v32;
  HALB_Mutex *v33;
  unsigned int v34;
  HALB_Mutex *v35;
  HALB_Mutex *v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  HALB_Mutex *v45;
  HALB_Mutex *v46;
  _DWORD *exception;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _QWORD v66[6];
  _QWORD v67[7];
  unsigned int v68;
  _QWORD v69[6];
  _QWORD v70[9];
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  _QWORD v79[8];
  int v80;
  _QWORD v81[8];
  _QWORD v82[7];
  unsigned int v83;
  _QWORD v84[8];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[7];
  _QWORD v88[7];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _BYTE buf[24];
  int v95;
  _BYTE v96[24];
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818457189)
  {
    if (mSelector <= 1935894893)
    {
      if (mSelector > 1935892840)
      {
        if (mSelector == 1935892841)
        {
          *(_QWORD *)v96 = 0;
          *(_QWORD *)&v96[8] = v96;
          *(_QWORD *)&v96[16] = 0x2000000000;
          v97 = 0;
          v82[0] = MEMORY[0x1E0C809B0];
          v82[1] = 0x40000000;
          v82[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v82[3] = &unk_1E698C198;
          v82[4] = v96;
          v82[5] = this;
          v83 = a4;
          v82[6] = a6;
          v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v82);
        }
        else
        {
          if (mSelector != 1935893353)
            goto LABEL_77;
          *(_QWORD *)v96 = 0;
          *(_QWORD *)&v96[8] = v96;
          *(_QWORD *)&v96[16] = 0x2000000000;
          v97 = 0;
          v84[0] = MEMORY[0x1E0C809B0];
          v84[1] = 0x40000000;
          v84[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
          v84[3] = &unk_1E698C170;
          v84[5] = this;
          v84[4] = v96;
          v84[6] = a5;
          v84[7] = a6;
          v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v84);
        }
        v21 = 4 * *(_DWORD *)(*(_QWORD *)&v96[8] + 24);
LABEL_60:
        *a5 = v21;
        goto LABEL_83;
      }
      if (mSelector == 1818457190)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 487;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelsToScalarTransferFunction", v96, 0x12u);
          }
          v54 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v54 = &off_1E69A1B30;
          v54[2] = 561211770;
        }
        v86[0] = MEMORY[0x1E0C809B0];
        v86[1] = 0x40000000;
        v86[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18;
        v86[3] = &__block_descriptor_tmp_19_8974;
        v86[4] = this;
        v86[5] = a6;
        v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v86);
        goto LABEL_79;
      }
      if (mSelector != 1852400499)
        goto LABEL_77;
    }
    else
    {
      if (mSelector > 1935962741)
      {
        if (mSelector == 1936745334)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v96 = 136315394;
              *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 636;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue", v96, 0x12u);
            }
            v59 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v59 = &off_1E69A1B30;
            v59[2] = 561211770;
          }
          *(_QWORD *)v96 = 0;
          *(_QWORD *)&v96[8] = v96;
          *(_QWORD *)&v96[16] = 0x2000000000;
          v97 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2000000000;
          v95 = 0;
          v75 = 0;
          v76 = &v75;
          v77 = 0x2000000000;
          v78 = 0;
          v71 = 0;
          v72 = &v71;
          v73 = 0x2000000000;
          v74 = 0;
          v70[0] = MEMORY[0x1E0C809B0];
          v70[1] = 0x40000000;
          v70[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_36;
          v70[3] = &unk_1E698C210;
          v70[7] = &v71;
          v70[8] = this;
          v70[4] = v96;
          v70[5] = buf;
          v70[6] = &v75;
          v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v70);
          v37 = *((_DWORD *)v72 + 6);
          v38 = *(_DWORD *)(*(_QWORD *)&v96[8] + 24);
          v39 = 0.0;
          v40 = v37 - v38;
          if (v37 < v38)
          {
            v41 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
            v39 = 0.5;
            if (v37 != v41)
            {
              v42 = *((_DWORD *)v76 + 6);
              v39 = 1.0;
              if (v37 > v42)
              {
                v43 = v37 >= v41;
                v44 = v37 - v41;
                if (v43)
                  v39 = (float)((float)((float)v44 / (float)(v42 - v41)) * 0.5) + 0.5;
                else
                  v39 = (float)((float)v40 / (float)(v41 - v38)) * 0.5;
              }
            }
          }
          *(float *)a6 = v39;
          *a5 = 4;
          _Block_object_dispose(&v71, 8);
          _Block_object_dispose(&v75, 8);
          _Block_object_dispose(buf, 8);
          goto LABEL_83;
        }
        if (mSelector != 1936745315)
        {
          if (mSelector == 1935962742)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v96 = 136315394;
                *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
                *(_WORD *)&v96[12] = 1024;
                *(_DWORD *)&v96[14] = 412;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyValue", v96, 0x12u);
              }
              v51 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v51 = &off_1E69A1B30;
              v51[2] = 561211770;
            }
            v93[0] = MEMORY[0x1E0C809B0];
            v93[1] = 0x40000000;
            v93[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
            v93[3] = &__block_descriptor_tmp_5_8958;
            v93[4] = this;
            v93[5] = a6;
            v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v93);
            goto LABEL_79;
          }
          goto LABEL_77;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 681;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyPanningChannels", v96, 0x12u);
          }
          v57 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v57 = &off_1E69A1B30;
          v57[2] = 561211770;
        }
        v69[0] = MEMORY[0x1E0C809B0];
        v69[1] = 0x40000000;
        v69[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_38;
        v69[3] = &__block_descriptor_tmp_39_8990;
        v69[4] = this;
        v69[5] = a6;
        v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v69);
LABEL_66:
        v34 = 8;
LABEL_80:
        *a5 = v34;
        return;
      }
      if (mSelector != 1935894894)
      {
        if (mSelector != 1935962738)
          goto LABEL_77;
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 421;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyRange", v96, 0x12u);
          }
          v62 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v62 = &off_1E69A1B30;
          v62[2] = 561211770;
        }
        v92[0] = MEMORY[0x1E0C809B0];
        v92[1] = 0x40000000;
        v92[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
        v92[3] = &__block_descriptor_tmp_7_8960;
        v92[4] = this;
        v92[5] = a6;
        v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v92);
        goto LABEL_66;
      }
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v96 = 136315394;
        *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 565;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemName", v96, 0x12u);
      }
      v48 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v48 = &off_1E69A1B30;
      v48[2] = 561211770;
    }
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v96 = 136315394;
        *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 566;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioSelectorControlPropertyItemName", v96, 0x12u);
      }
      v49 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v49 = &off_1E69A1B30;
      v49[2] = 561211770;
    }
    *(_QWORD *)v96 = 0;
    *(_QWORD *)&v96[8] = v96;
    *(_QWORD *)&v96[16] = 0x2000000000;
    LOBYTE(v97) = 0;
    v81[0] = MEMORY[0x1E0C809B0];
    v81[1] = 0x40000000;
    v81[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
    v81[3] = &unk_1E698C1C0;
    v81[4] = v96;
    v81[5] = this;
    v81[6] = a8;
    v81[7] = a6;
    v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v81);
    *a5 = 8;
    if (!*(_BYTE *)(*(_QWORD *)&v96[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 594;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: item not in item dictionary for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      v28 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v28 = &off_1E69A1B30;
      v28[2] = 1852797029;
    }
    goto LABEL_83;
  }
  if (mSelector > 1818453105)
  {
    if (mSelector <= 1818453109)
    {
      if (mSelector == 1818453106)
      {
        if (a4 <= 0xF)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 453;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelRange", v96, 0x12u);
          }
          v60 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v60 = &off_1E69A1B30;
          v60[2] = 561211770;
        }
        v89[0] = MEMORY[0x1E0C809B0];
        v89[1] = 0x40000000;
        v89[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12;
        v89[3] = &__block_descriptor_tmp_13_8966;
        v89[4] = this;
        v89[5] = a6;
        v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v45, (uint64_t)v89);
        v34 = 16;
        goto LABEL_80;
      }
      if (mSelector == 1818453107)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 477;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertDecibelsToScalar", v96, 0x12u);
          }
          v61 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v61 = &off_1E69A1B30;
          v61[2] = 561211770;
        }
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v96 = 136315394;
            *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 478;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioLevelControlPropertyConvertDecibelsToScalar", v96, 0x12u);
          }
          v65 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v65 = &off_1E69A1B30;
          v65[2] = 561211770;
        }
        v87[0] = MEMORY[0x1E0C809B0];
        v87[1] = 0x40000000;
        v87[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16;
        v87[3] = &__block_descriptor_tmp_17_8972;
        v87[4] = this;
        v87[5] = a6;
        v87[6] = a8;
        v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v87);
        goto LABEL_79;
      }
    }
    else
    {
      switch(mSelector)
      {
        case 1818453110:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v96 = 136315394;
              *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 444;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue", v96, 0x12u);
            }
            v58 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v58 = &off_1E69A1B30;
            v58[2] = 561211770;
          }
          v90[0] = MEMORY[0x1E0C809B0];
          v90[1] = 0x40000000;
          v90[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
          v90[3] = &__block_descriptor_tmp_11_8964;
          v90[4] = this;
          v90[5] = a6;
          v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v90);
          goto LABEL_79;
        case 1818456932:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v96 = 136315394;
              *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 467;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertScalarToDecibels", v96, 0x12u);
            }
            v56 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v56 = &off_1E69A1B30;
            v56[2] = 561211770;
          }
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v96 = 136315394;
              *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 468;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioLevelControlPropertyConvertScalarToDecibels", v96, 0x12u);
            }
            v64 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v64 = &off_1E69A1B30;
            v64[2] = 561211770;
          }
          v88[0] = MEMORY[0x1E0C809B0];
          v88[1] = 0x40000000;
          v88[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
          v88[3] = &__block_descriptor_tmp_15_8969;
          v88[4] = this;
          v88[5] = a6;
          v88[6] = a8;
          v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v88);
          goto LABEL_79;
        case 1818456950:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v96 = 136315394;
              *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 435;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue", v96, 0x12u);
            }
            v50 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v50 = &off_1E69A1B30;
            v50[2] = 561211770;
          }
          v91[0] = MEMORY[0x1E0C809B0];
          v91[1] = 0x40000000;
          v91[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8;
          v91[3] = &__block_descriptor_tmp_9_8962;
          v91[4] = this;
          v91[5] = a6;
          v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v91);
LABEL_79:
          v34 = 4;
          goto LABEL_80;
      }
    }
LABEL_77:
    HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (mSelector <= 1651272547)
  {
    if (mSelector == 1650685548)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v96 = 136315394;
          *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 496;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", v96, 0x12u);
        }
        v53 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v53 = &off_1E69A1B30;
        v53[2] = 561211770;
      }
      if (*((_DWORD *)this + 5) == 1702259059)
      {
        *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a9);
      }
      else
      {
        v85[0] = MEMORY[0x1E0C809B0];
        v85[1] = 0x40000000;
        v85[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
        v85[3] = &__block_descriptor_tmp_21_8976;
        v85[4] = this;
        v85[5] = a6;
        v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v85);
      }
      goto LABEL_79;
    }
    if (mSelector != 1651272546)
      goto LABEL_77;
    *(_QWORD *)v96 = 0;
    *(_QWORD *)&v96[8] = v96;
    *(_QWORD *)&v96[16] = 0x2000000000;
    v97 = 0;
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 0x40000000;
    v67[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_40;
    v67[3] = &unk_1E698C258;
    v67[4] = v96;
    v67[5] = this;
    v68 = a4;
    v67[6] = a6;
    v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v67);
    v21 = *(_DWORD *)(*(_QWORD *)&v96[8] + 24);
    goto LABEL_60;
  }
  if (mSelector == 1651272548)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v96 = 136315394;
        *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 713;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioBlockControlPropertyDescriptor", v96, 0x12u);
      }
      v55 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v55 = &off_1E69A1B30;
      v55[2] = 561211770;
    }
    v66[0] = MEMORY[0x1E0C809B0];
    v66[1] = 0x40000000;
    v66[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_42;
    v66[3] = &__block_descriptor_tmp_43_8993;
    v66[4] = this;
    v66[5] = a6;
    v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v66);
    goto LABEL_66;
  }
  if (mSelector != 1668049771)
    goto LABEL_77;
  if (a4 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v96 = 136315394;
      *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&v96[12] = 1024;
      *(_DWORD *)&v96[14] = 601;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioClockSourceControlPropertyItemKind", v96, 0x12u);
    }
    v52 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v52 = &off_1E69A1B30;
    v52[2] = 561211770;
  }
  if (a7 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v96 = 136315394;
      *(_QWORD *)&v96[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&v96[12] = 1024;
      *(_DWORD *)&v96[14] = 602;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioClockSourceControlPropertyItemKind", v96, 0x12u);
    }
    v63 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v63 = &off_1E69A1B30;
    v63[2] = 561211770;
  }
  *(_QWORD *)v96 = 0;
  *(_QWORD *)&v96[8] = v96;
  *(_QWORD *)&v96[16] = 0x2000000000;
  LOBYTE(v97) = 0;
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 0x40000000;
  v79[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30;
  v79[3] = &unk_1E698C1E8;
  v79[4] = v96;
  v79[5] = this;
  v80 = 4;
  v79[6] = a8;
  v79[7] = a6;
  v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v79);
  *a5 = 4;
  if (!*(_BYTE *)(*(_QWORD *)&v96[8] + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 629;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: item not in item dictionary for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
    }
    v23 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v23 = &off_1E69A1B30;
    v23[2] = 1852797029;
  }
LABEL_83:
  _Block_object_dispose(v96, 8);
}

void sub_1B5B378F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);
  _Block_object_dispose((const void *)(v42 - 144), 8);
  _Unwind_Resume(a1);
}

void HALS_IOA2Control::SetPropertyData(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  signed int mSelector;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  HALB_Mutex *v20;
  HALS_Object *v21;
  HALB_Mutex *v22;
  HALS_Object *v23;
  HALB_Mutex *v24;
  HALS_Object *v25;
  int v26;
  HALB_Mutex *v27;
  HALS_Object *v28;
  int v29;
  HALB_Mutex *v30;
  const AudioObjectPropertyAddress *v31;
  HALB_Mutex *v32;
  HALS_Object *v33;
  HALB_Mutex *v34;
  HALS_Object *v35;
  uint64_t v36;
  HALB_Mutex *v37;
  HALS_Object *v38;
  uint64_t v39;
  HALS_Object *v40;
  _DWORD *exception;
  _DWORD *v42;
  int v43;
  NSObject *v44;
  const char *v45;
  _DWORD *v46;
  _DWORD *v47;
  int v48;
  _DWORD *v49;
  int v50;
  _DWORD *v51;
  int v52;
  _DWORD *v53;
  int v54;
  _DWORD *v55;
  int v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  int v60;
  HALS_Device *v61;
  _QWORD v62[7];
  HALS_ObjectMap *v63;
  int v64;
  _QWORD v65[8];
  HALS_ObjectMap *v66;
  _QWORD v67[8];
  HALS_ObjectMap *v68;
  int v69;
  _QWORD v70[7];
  HALS_ObjectMap *v71;
  int v72;
  _QWORD v73[6];
  _QWORD v74[9];
  HALS_ObjectMap *v75;
  int v76;
  int v77;
  _QWORD v78[9];
  HALS_ObjectMap *v79;
  int v80;
  int v81;
  _QWORD v82[7];
  HALS_ObjectMap *v83;
  int v84;
  _BYTE v85[24];
  int v86;
  _BYTE buf[24];
  char *(*v88)(uint64_t, uint64_t);
  void (*v89)(uint64_t);
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v61 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v61)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 729;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    v42 = __cxa_allocate_exception(0x10uLL);
    v43 = 560947818;
LABEL_60:
    *(_QWORD *)v42 = &off_1E69A1B30;
    v42[2] = v43;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_6;
  if (!HALS_Device::IsHogModeOwnerOrFree(v61, a8))
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    v43 = 560492391;
    goto LABEL_60;
  }
  mSelector = a3->mSelector;
LABEL_6:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4802000000;
  v88 = __Block_byref_object_copy__8924;
  v89 = __Block_byref_object_dispose__8925;
  v90 = 0u;
  v91 = 0u;
  if (mSelector > 1818457189)
  {
    if (mSelector <= 1935962741)
    {
      if (mSelector != 1818457190)
      {
        if (mSelector == 1935893353)
        {
          *(_QWORD *)v85 = 0;
          *(_QWORD *)&v85[8] = v85;
          *(_QWORD *)&v85[16] = 0x2000000000;
          v86 = 0;
          v67[0] = MEMORY[0x1E0C809B0];
          v67[1] = 1174405120;
          v67[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_54;
          v67[3] = &unk_1E698C3A0;
          v69 = a4;
          v67[6] = this;
          v67[7] = a5;
          v67[4] = v85;
          v19 = v61;
          v68 = v61;
          HALS_ObjectMap::RetainObject(v61, v18);
          v67[5] = buf;
          v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v67);
          if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
          {
            v49 = __cxa_allocate_exception(0x10uLL);
            v50 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
            *(_QWORD *)v49 = &off_1E69A1B30;
            v49[2] = v50;
          }
          HALS_ObjectMap::ReleaseObject(v68, v23);
          goto LABEL_41;
        }
LABEL_38:
        v36 = a7;
        v19 = v61;
        HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, v36, (uint64_t)a8);
        goto LABEL_42;
      }
      if (a4 > 3)
      {
        v73[0] = MEMORY[0x1E0C809B0];
        v73[1] = 0x40000000;
        v73[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_50;
        v73[3] = &__block_descriptor_tmp_51_8940;
        v73[4] = this;
        v73[5] = a5;
        v19 = v61;
        v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v73);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(_QWORD *)&buf[8] + 40), a3, v31);
        goto LABEL_42;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v85 = 136315394;
        *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 888;
        v44 = MEMORY[0x1E0C81028];
        v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibe"
              "lsToScalarTransferFunction";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector == 1936745334)
    {
      if (a4 > 3)
      {
        *(_QWORD *)v85 = 0;
        *(_QWORD *)&v85[8] = v85;
        *(_QWORD *)&v85[16] = 0x2000000000;
        v86 = 0;
        v65[0] = MEMORY[0x1E0C809B0];
        v65[1] = 1174405120;
        v65[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_56;
        v65[3] = &unk_1E698C3D8;
        v65[6] = this;
        v65[7] = a5;
        v65[4] = v85;
        v19 = v61;
        v66 = v61;
        HALS_ObjectMap::RetainObject(v61, v18);
        v65[5] = buf;
        v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v65);
        if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
        {
          v57 = __cxa_allocate_exception(0x10uLL);
          v58 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
          *(_QWORD *)v57 = &off_1E69A1B30;
          v57[2] = v58;
        }
        HALS_ObjectMap::ReleaseObject(v66, v35);
        goto LABEL_41;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v85 = 136315394;
        *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 1053;
        v44 = MEMORY[0x1E0C81028];
        v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector != 1935962742)
      goto LABEL_38;
    v19 = v61;
    if (a4 > 3)
    {
      v26 = *a5;
      *(_QWORD *)v85 = 0;
      *(_QWORD *)&v85[8] = v85;
      *(_QWORD *)&v85[16] = 0x2000000000;
      v86 = 0;
      v82[0] = MEMORY[0x1E0C809B0];
      v82[1] = 1174405120;
      v82[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v82[3] = &unk_1E698C2A0;
      v84 = v26;
      v82[6] = this;
      v82[4] = v85;
      v83 = v61;
      HALS_ObjectMap::RetainObject(v61, v18);
      v82[5] = buf;
      v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v82);
      if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
      {
        v53 = __cxa_allocate_exception(0x10uLL);
        v54 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
        *(_QWORD *)v53 = &off_1E69A1B30;
        v53[2] = v54;
      }
      HALS_ObjectMap::ReleaseObject(v83, v28);
      goto LABEL_41;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_74;
    *(_DWORD *)v85 = 136315394;
    *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
    *(_WORD *)&v85[12] = 1024;
    *(_DWORD *)&v85[14] = 745;
    v44 = MEMORY[0x1E0C81028];
    v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
LABEL_73:
    _os_log_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, v45, v85, 0x12u);
    goto LABEL_74;
  }
  if (mSelector > 1818453109)
  {
    if (mSelector == 1818453110)
    {
      if (a4 > 3)
      {
        *(_QWORD *)v85 = 0;
        *(_QWORD *)&v85[8] = v85;
        *(_QWORD *)&v85[16] = 0x2000000000;
        v86 = 0;
        v74[0] = MEMORY[0x1E0C809B0];
        v74[1] = 1174405120;
        v74[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_48;
        v74[3] = &unk_1E698C310;
        v76 = a2;
        v77 = a4;
        v74[7] = a3;
        v74[8] = a5;
        v74[6] = this;
        v74[4] = v85;
        v19 = v61;
        v75 = v61;
        HALS_ObjectMap::RetainObject(v61, v18);
        v74[5] = buf;
        v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v74);
        if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
        {
          v55 = __cxa_allocate_exception(0x10uLL);
          v56 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
          *(_QWORD *)v55 = &off_1E69A1B30;
          v55[2] = v56;
        }
        HALS_ObjectMap::ReleaseObject(v75, v33);
        goto LABEL_41;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v85 = 136315394;
        *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 839;
        v44 = MEMORY[0x1E0C81028];
        v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector != 1818456950)
      goto LABEL_38;
    v19 = v61;
    if (a4 > 3)
    {
      *(_QWORD *)v85 = 0;
      *(_QWORD *)&v85[8] = v85;
      *(_QWORD *)&v85[16] = 0x2000000000;
      v86 = 0;
      v78[0] = MEMORY[0x1E0C809B0];
      v78[1] = 1174405120;
      v78[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_45;
      v78[3] = &unk_1E698C2D8;
      v80 = a2;
      v81 = a4;
      v78[7] = a3;
      v78[8] = a5;
      v78[6] = this;
      v78[4] = v85;
      v79 = v61;
      HALS_ObjectMap::RetainObject(v61, v18);
      v78[5] = buf;
      v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v78);
      if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
      {
        v51 = __cxa_allocate_exception(0x10uLL);
        v52 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
        *(_QWORD *)v51 = &off_1E69A1B30;
        v51[2] = v52;
      }
      HALS_ObjectMap::ReleaseObject(v79, v25);
      goto LABEL_41;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_74;
    *(_DWORD *)v85 = 136315394;
    *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
    *(_WORD *)&v85[12] = 1024;
    *(_DWORD *)&v85[14] = 789;
    v44 = MEMORY[0x1E0C81028];
    v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
    goto LABEL_73;
  }
  if (mSelector == 1650685548)
  {
    if (a4 > 3)
    {
      v29 = *a5;
      v19 = v61;
      if (*((_DWORD *)this + 5) == 1702259059)
      {
        HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a8, v29 != 0);
        goto LABEL_42;
      }
      *(_QWORD *)v85 = 0;
      *(_QWORD *)&v85[8] = v85;
      *(_QWORD *)&v85[16] = 0x2000000000;
      v86 = 0;
      v70[0] = MEMORY[0x1E0C809B0];
      v70[1] = 1174405120;
      v70[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_52;
      v70[3] = &unk_1E698C368;
      v72 = v29;
      v70[6] = this;
      v71 = v61;
      v70[4] = v85;
      HALS_ObjectMap::RetainObject(v61, v18);
      v70[5] = buf;
      v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v70);
      if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
      {
        v59 = __cxa_allocate_exception(0x10uLL);
        v60 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
        *(_QWORD *)v59 = &off_1E69A1B30;
        v59[2] = v60;
      }
      HALS_ObjectMap::ReleaseObject(v71, v38);
      goto LABEL_41;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v85 = 136315394;
      *(_QWORD *)&v85[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = 897;
      v44 = MEMORY[0x1E0C81028];
      v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
      goto LABEL_73;
    }
LABEL_74:
    v46 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v46 = &off_1E69A1B30;
    v46[2] = 561211770;
  }
  if (mSelector != 1651272546)
    goto LABEL_38;
  *(_QWORD *)v85 = 0;
  *(_QWORD *)&v85[8] = v85;
  *(_QWORD *)&v85[16] = 0x2000000000;
  v86 = 0;
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 1174405120;
  v62[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_58;
  v62[3] = &unk_1E698C410;
  v64 = a4;
  v62[5] = this;
  v62[6] = a5;
  v19 = v61;
  v63 = v61;
  HALS_ObjectMap::RetainObject(v61, v18);
  v62[4] = v85;
  v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v62);
  if (*(_DWORD *)(*(_QWORD *)&v85[8] + 24))
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    v48 = *(_DWORD *)(*(_QWORD *)&v85[8] + 24);
    *(_QWORD *)v47 = &off_1E69A1B30;
    v47[2] = v48;
  }
  HALS_ObjectMap::ReleaseObject(v63, v21);
LABEL_41:
  _Block_object_dispose(v85, 8);
LABEL_42:
  if (-1431655765
     * ((*(_QWORD *)(*(_QWORD *)&buf[8] + 48) - *(_QWORD *)(*(_QWORD *)&buf[8] + 40)) >> 2))
  {
    if (a3->mSelector == 1818456950 || a3->mSelector == 1818453110)
      kdebug_trace();
    if (a8)
      v39 = *((unsigned int *)a8 + 4);
    else
      v39 = 0;
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v39, -1431655765* ((*(_QWORD *)(*(_QWORD *)&buf[8] + 48) - *(_QWORD *)(*(_QWORD *)&buf[8] + 40)) >> 2), *(const AudioObjectPropertyAddress **)(*(_QWORD *)&buf[8] + 40));
    if (a3->mSelector == 1818456950 || a3->mSelector == 1818453110)
      kdebug_trace();
  }
  _Block_object_dispose(buf, 8);
  if ((_QWORD)v90)
  {
    *((_QWORD *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  HALS_ObjectMap::ReleaseObject(v19, v40);
}

void sub_1B5B385EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void HALS_IOA2Control::SetHardwareReferenceStreamControlValue(HALS_IOA2Control *this, HALS_Client *a2, char a3)
{
  HALB_Mutex *v5;
  const AudioObjectPropertyAddress *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  char v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *(*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  __int128 v18;
  __int128 v19;

  v13 = 0;
  v14 = &v13;
  v15 = 0x4802000000;
  v16 = __Block_byref_object_copy__8924;
  v17 = __Block_byref_object_dispose__8925;
  v18 = 0u;
  v19 = 0u;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v12 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN16HALS_IOA2Control38SetHardwareReferenceStreamControlValueEP11HALS_Clientb_block_invoke;
  v9[3] = &unk_1E698C448;
  v9[5] = &v13;
  v9[6] = this;
  v10 = a3;
  v9[4] = v11;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  v6 = (const AudioObjectPropertyAddress *)v14[5];
  v7 = -1431655765 * ((unint64_t)(v14[6] - (_QWORD)v6) >> 2);
  if ((_DWORD)v7)
  {
    if (a2)
      v8 = *((unsigned int *)a2 + 4);
    else
      v8 = 0;
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v8, v7, v6);
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v13, 8);
  if ((_QWORD)v18)
  {
    *((_QWORD *)&v18 + 1) = v18;
    operator delete((void *)v18);
  }
}

void sub_1B5B388C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  v12 = *(void **)(v10 - 48);
  if (v12)
  {
    *(_QWORD *)(v10 - 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOA2Control::GetHardwareReferenceStreamControlValue(HALS_IOA2Control *this, const HALS_Client *a2)
{
  HALB_Mutex *v2;
  _BOOL8 v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK16HALS_IOA2Control38GetHardwareReferenceStreamControlValueEPK11HALS_Client_block_invoke;
  v5[3] = &unk_1E698C470;
  v5[4] = &v6;
  v5[5] = this;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *, const HALS_Client *))(*(_QWORD *)this + 56))(this, a2);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((_DWORD *)v7 + 6) != 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B5B38994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK16HALS_IOA2Control38GetHardwareReferenceStreamControlValueEPK11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;

  result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 40) + 80), a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B5B389E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

char *__Block_byref_object_copy__8924(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__8925(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN16HALS_IOA2Control38SetHardwareReferenceStreamControlValueEP11HALS_Clientb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  HALS_Object *v5;
  _DWORD *exception;
  int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "HALS_IOA2Control.cpp";
      v13 = 1024;
      v14 = 1176;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetHardwareReferenceStreamControlValue: owning device is missing", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v4 = *(unsigned __int8 *)(a1 + 56);
  v10 = 0;
  CACFDictionary::GetUInt32(*(_QWORD *)(v2 + 80), CFSTR("value"), &v10);
  if (v10 != v4)
  {
    v9 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 72), v4, &v9);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v12 = "HALS_IOA2Control.cpp";
        v13 = 1024;
        v14 = 1185;
        v15 = 1024;
        v16 = v7;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetHardwareReferenceStreamControlValue: error setting BOOLean control value on the device, Error: 0x%X", buf, 0x18u);
      }
      v8 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v8 = &off_1E69A1B30;
      v8[2] = 560226676;
    }
    if (v9 == v4)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), CFSTR("value"), v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v5);
}

void sub_1B5B38CB8(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;
  int v5;
  _DWORD *v6;
  int v7;

  if (!(_DWORD)a2)
    _Unwind_Resume(exception_object);
  v5 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  v6 = __cxa_begin_catch(exception_object);
  if (v5 == 2)
    v7 = v6[2];
  else
    v7 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v7;
  __cxa_end_catch();
  JUMPOUT(0x1B5B38B40);
}

void sub_1B5B38D48()
{
  JUMPOUT(0x1B5B38CCCLL);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  _DWORD *exception;
  unsigned int v7;
  unsigned int v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v8 = 0;
  result = CACFDictionary::GetUInt32(*(_QWORD *)(v2 + 80), CFSTR("value"), &v8);
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 != v8)
  {
    v7 = 0;
    result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), v4, &v7);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v10 = "HALS_IOA2Control.cpp";
        v11 = 1024;
        v12 = 758;
        v13 = 1024;
        v14 = v5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting slider control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    if (v7 == *(_DWORD *)(a1 + 64))
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), CFSTR("value"), v7);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1B5B38EF0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v4[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B38E18);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_45(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  HALS_ObjectMap *v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  int v16;
  _DWORD *exception;
  unsigned int v19;
  unsigned int v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(v23, "HALS_IOA2Control::SetPropertyData");
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(float **)(a1 + 64);
  v5 = *(_QWORD *)v3;
  v6 = *(_DWORD *)(v3 + 8);
  v8 = *(_DWORD *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 84);
  v9 = *(_DWORD *)(v2 + 48);
  v10 = *(_DWORD *)(v2 + 52);
  v12 = (HALS_ObjectMap *)*(unsigned int *)(v2 + 56);
  v11 = *(_DWORD *)(v2 + 60);
  v13 = "no control type";
  if (v11 == 1)
    v13 = "software control";
  if (v11)
    v14 = (char *)v13;
  else
    v14 = "external driver";
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  LogVolumeChangeForServerSideControl((uint64_t)v23, v8, v5, v6, v7, v4, v12, v9, v10, (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  kdebug_trace();
  v15 = CAVolumeCurve::ConvertScalarToRaw((CAVolumeCurve *)(v2 + 120), **(float **)(a1 + 64));
  v20 = 0;
  CACFDictionary::GetUInt32(*(_QWORD *)(v2 + 80), CFSTR("value"), &v20);
  if (v15 != v20)
  {
    v19 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 72) + 1808), *(_DWORD *)(v2 + 72), v15, &v19);
    v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v26 = "HALS_IOA2Control.cpp";
        v27 = 1024;
        v28 = 806;
        v29 = 1024;
        v30 = v16;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting level control scalar value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    if (v19 == v15)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), CFSTR("value"), v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  return kdebug_trace();
}

void sub_1B5B391FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _DWORD *v26;

  if (a2)
  {
    v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = v26[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B3911CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  HALS_ObjectMap *v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  int v16;
  _DWORD *exception;
  unsigned int v19;
  unsigned int v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(v23, "HALS_IOA2Control::SetPropertyData");
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(float **)(a1 + 64);
  v5 = *(_QWORD *)v3;
  v6 = *(_DWORD *)(v3 + 8);
  v8 = *(_DWORD *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 84);
  v9 = *(_DWORD *)(v2 + 48);
  v10 = *(_DWORD *)(v2 + 52);
  v12 = (HALS_ObjectMap *)*(unsigned int *)(v2 + 56);
  v11 = *(_DWORD *)(v2 + 60);
  v13 = "no control type";
  if (v11 == 1)
    v13 = "software control";
  if (v11)
    v14 = (char *)v13;
  else
    v14 = "external driver";
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  LogVolumeChangeForServerSideControl((uint64_t)v23, v8, v5, v6, v7, v4, v12, v9, v10, (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  kdebug_trace();
  v15 = CAVolumeCurve::ConvertDBToRaw((CAVolumeCurve *)(v2 + 120), **(float **)(a1 + 64));
  v20 = 0;
  CACFDictionary::GetUInt32(*(_QWORD *)(v2 + 80), CFSTR("value"), &v20);
  if (v15 != v20)
  {
    v19 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 72) + 1808), *(_DWORD *)(v2 + 72), v15, &v19);
    v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v26 = "HALS_IOA2Control.cpp";
        v27 = 1024;
        v28 = 856;
        v29 = 1024;
        v30 = v16;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting level control decibel value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    if (v19 == v15)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), CFSTR("value"), v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  return kdebug_trace();
}

void sub_1B5B3956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _DWORD *v26;

  if (a2)
  {
    v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = v26[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B3948CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  float v4;
  float v5;

  v1 = *(_QWORD *)(result + 32);
  v2 = **(unsigned int **)(result + 40);
  *(_DWORD *)(v1 + 156) = v2;
  if (v2 > 0xF)
  {
    v5 = 1.0;
    v4 = 2.0;
    v3 = 1;
  }
  else
  {
    v3 = byte_1B5D68E70[v2];
    v4 = flt_1B5D1E560[v2];
    v5 = flt_1B5D1E5A0[v2];
  }
  *(_BYTE *)(v1 + 152) = v3;
  *(float *)(v1 + 160) = v4;
  *(float *)(v1 + 164) = v5;
  return result;
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_52(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  _DWORD *exception;
  unsigned int v7;
  unsigned int v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v8 = 0;
  result = CACFDictionary::GetUInt32(*(_QWORD *)(v2 + 80), CFSTR("value"), &v8);
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 != v8)
  {
    v7 = 0;
    result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), v4, &v7);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v10 = "HALS_IOA2Control.cpp";
        v11 = 1024;
        v12 = 916;
        v13 = 1024;
        v14 = v5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting BOOLean control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    if (v7 == *(_DWORD *)(a1 + 64))
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), CFSTR("value"), v7);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1B5B39824(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v4[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B3974CLL);
  }
  _Unwind_Resume(a1);
}

void ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_54(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  const __CFArray *v4;
  const __CFDictionary *v5;
  unsigned int Count;
  unsigned int v7;
  int v8;
  unint64_t v9;
  const unsigned int *v10;
  const __CFArray *v11;
  unint64_t v12;
  unsigned int v13;
  std::vector<unsigned int>::pointer v14;
  unsigned int *v15;
  std::vector<unsigned int>::pointer v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  CFMutableDictionaryRef v24;
  uint64_t v25;
  unsigned int *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  CFMutableDictionaryRef v35;
  uint64_t v36;
  _BOOL4 v37;
  CFMutableArrayRef Mutable;
  BOOL v39;
  unsigned int *v40;
  _DWORD *exception;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _BYTE v45[12];
  unsigned int v46;
  const __CFArray *v47;
  __int16 v48;
  unsigned int v49[2];
  uint64_t v50;
  uint64_t v51;
  unsigned int v52[2];
  __int16 v53;
  unsigned int valuePtr;
  std::vector<unsigned int> v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v3 + 96))
  {
    v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    v47 = v4;
    v48 = 1;
    if (v4)
      Count = CFArrayGetCount(v4);
    else
      Count = 0;
    v9 = *(unsigned int *)(a1 + 72);
    if (4 * (unint64_t)Count < v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v55.__begin_) = 136315394;
        *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
        WORD2(v55.__end_) = 1024;
        *(_DWORD *)((char *)&v55.__end_ + 6) = 956;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem", (uint8_t *)&v55, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v10 = *(const unsigned int **)(a1 + 56);
    v11 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v3 + 80), v5);
    *(_QWORD *)v52 = v11;
    v53 = 1;
    if (v11)
      LODWORD(v11) = CFArrayGetCount(v11);
    v12 = v9 >> 2;
    if ((_DWORD)v11 != (v9 >> 2))
    {
      CACFArray::~CACFArray((CACFArray *)v52);
LABEL_44:
      MEMORY[0x1E0C80A78](v28);
      v30 = (unsigned int *)&v45[-v29];
      v46 = Count;
      bzero(&v45[-v29], 4 * Count);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetMultiControlValue((mach_port_t *)(*(_QWORD *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v10, v9 >> 2, v30, Count, &v46);
      v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v31)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v55.__begin_) = 136315650;
          *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
          WORD2(v55.__end_) = 1024;
          *(_DWORD *)((char *)&v55.__end_ + 6) = 973;
          WORD1(v55.__end_cap_.__value_) = 1024;
          HIDWORD(v55.__end_cap_.__value_) = v31;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting selector control value on the device, Error: 0x%X", (uint8_t *)&v55, 0x18u);
        }
        v42 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v42 = &off_1E69A1B30;
        v42[2] = 560226676;
      }
      if ((_DWORD)v12 == v46)
      {
        v32 = v12;
        memset(&v55, 0, sizeof(v55));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v55, v10, (uint64_t)&v10[v12], v12);
        begin = v55.__begin_;
        end = v55.__end_;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        *(_QWORD *)v49 = 0;
        v50 = 0;
        v51 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v49, v30, (uint64_t)&v30[v12], v12);
        v35 = *(CFMutableDictionaryRef *)v49;
        v36 = v50;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v37 = (char *)end - (char *)begin == v36 - (_QWORD)v35 && memcmp(begin, v35, (char *)end - (char *)begin) == 0;
        if (v35)
          operator delete(v35);
        if (begin)
          operator delete(begin);
        if (v37)
        {
          *(_QWORD *)v49 = *(_QWORD *)(v3 + 80);
          LOWORD(v50) = 256;
          if (*(_QWORD *)v49)
          {
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
            *(_QWORD *)v52 = Mutable;
            v53 = 257;
            if (v9 >= 4)
            {
              do
              {
                if (*(_QWORD *)v52)
                  v39 = HIBYTE(v53) == 0;
                else
                  v39 = 1;
                if (!v39)
                {
                  valuePtr = *v30;
                  v40 = (unsigned int *)CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  v55.__begin_ = v40;
                  LOBYTE(v55.__end_) = 1;
                  if (v40 && *(_QWORD *)v52 && HIBYTE(v53))
                    CFArrayAppendValue(*(CFMutableArrayRef *)v52, v40);
                  CACFNumber::~CACFNumber((CACFNumber *)&v55);
                }
                ++v30;
                --v32;
              }
              while (v32);
              Mutable = *(CFMutableArrayRef *)v52;
            }
            if (BYTE1(v50) && Mutable)
            {
              if (*(_QWORD *)v49)
                CFDictionarySetValue(*(CFMutableDictionaryRef *)v49, CFSTR("value"), Mutable);
            }
            CACFArray::~CACFArray((CACFArray *)v52);
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)v49);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 200))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        }
      }
LABEL_73:
      CACFArray::~CACFArray((CACFArray *)&v47);
      return;
    }
    std::vector<unsigned int>::vector(&v55, v9 >> 2);
    if (v9 >= 4)
    {
      v13 = 0;
      do
      {
        v49[0] = 0;
        if (CACFArray::GetUInt32((CFArrayRef *)v52, v13, v49))
        {
          v14 = v55.__end_;
          if (v55.__end_ >= v55.__end_cap_.__value_)
          {
            v16 = v55.__begin_;
            v17 = v55.__end_ - v55.__begin_;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v19 = (char *)v55.__end_cap_.__value_ - (char *)v55.__begin_;
            if (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
              v16 = v55.__begin_;
              v14 = v55.__end_;
            }
            else
            {
              v21 = 0;
            }
            v22 = (unsigned int *)(v20 + 4 * v17);
            *v22 = v49[0];
            v15 = v22 + 1;
            while (v14 != v16)
            {
              v23 = *--v14;
              *--v22 = v23;
            }
            v55.__begin_ = v22;
            v55.__end_ = v15;
            v55.__end_cap_.__value_ = (unsigned int *)(v20 + 4 * v21);
            if (v16)
              operator delete(v16);
          }
          else
          {
            *v55.__end_ = v49[0];
            v15 = v14 + 1;
          }
          v55.__end_ = v15;
        }
        ++v13;
      }
      while (v13 != (_DWORD)v12);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    *(_QWORD *)v49 = 0;
    v50 = 0;
    v51 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v49, v10, (uint64_t)&v10[v12], v9 >> 2);
    v24 = *(CFMutableDictionaryRef *)v49;
    v25 = v50;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v26 = v55.__begin_;
    if ((char *)v55.__end_ - (char *)v55.__begin_ == v25 - (_QWORD)v24)
    {
      v27 = memcmp(v55.__begin_, v24, (char *)v55.__end_ - (char *)v55.__begin_) == 0;
      if (!v24)
      {
LABEL_41:
        if (v26)
        {
          v55.__end_ = v26;
          operator delete(v26);
        }
        CACFArray::~CACFArray((CACFArray *)v52);
        if (v27)
          goto LABEL_73;
        goto LABEL_44;
      }
    }
    else
    {
      v27 = 0;
      if (!v24)
        goto LABEL_41;
    }
    operator delete(v24);
    v26 = v55.__begin_;
    goto LABEL_41;
  }
  if (*(_DWORD *)(a1 + 72) <= 3u)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v55.__begin_) = 136315394;
      *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
      WORD2(v55.__end_) = 1024;
      *(_DWORD *)((char *)&v55.__end_ + 6) = 1012;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem", (uint8_t *)&v55, 0x12u);
    }
    v43 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v43 = &off_1E69A1B30;
    v43[2] = 561211770;
  }
  v7 = **(_DWORD **)(a1 + 56);
  v49[0] = 0;
  CACFDictionary::GetUInt32(*(_QWORD *)(v3 + 80), CFSTR("value"), v49);
  if (v7 != v49[0])
  {
    v52[0] = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v7, v52);
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v55.__begin_) = 136315650;
        *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
        WORD2(v55.__end_) = 1024;
        *(_DWORD *)((char *)&v55.__end_ + 6) = 1021;
        WORD1(v55.__end_cap_.__value_) = 1024;
        HIDWORD(v55.__end_cap_.__value_) = v8;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting selector control value on the device, Error: 0x%X", (uint8_t *)&v55, 0x18u);
      }
      v44 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v44 = &off_1E69A1B30;
      v44[2] = 560226676;
    }
    if (v52[0] == v7)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v3 + 80), CFSTR("value"), v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 200))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
}

void sub_1B5B3A070(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v6;

  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)(v3 - 136));
    CACFDictionary::~CACFDictionary((CACFDictionary *)(v3 - 160));
    CACFArray::~CACFArray((CACFArray *)(v3 - 176));
    v6 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v6[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B39DACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_56(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int StereoPanControlInfo_LeftValue;
  const __CFDictionary *v6;
  unsigned int StereoPanControlInfo_CenterValue;
  const __CFDictionary *v8;
  unsigned int StereoPanControlInfo_RightValue;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  uint64_t result;
  int v15;
  _DWORD *exception;
  unsigned int v17;
  unsigned int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (uint64_t *)(v3 + 80);
  StereoPanControlInfo_LeftValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  StereoPanControlInfo_CenterValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(*(HALS_IOA2UCDevice **)(v3 + 80), v6);
  StereoPanControlInfo_RightValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(*(HALS_IOA2UCDevice **)(v3 + 80), v8);
  v10 = **(float **)(a1 + 56);
  v11 = StereoPanControlInfo_LeftValue;
  if (v10 > 0.0)
  {
    v11 = StereoPanControlInfo_CenterValue;
    if (v10 != 0.5)
    {
      v11 = StereoPanControlInfo_RightValue;
      if (v10 < 1.0)
      {
        if (v10 >= 0.5)
        {
          v12 = (float)((float)(v10 + -0.5) + (float)(v10 + -0.5))
              * (float)(StereoPanControlInfo_RightValue - StereoPanControlInfo_CenterValue);
          v13 = (float)StereoPanControlInfo_CenterValue;
        }
        else
        {
          v12 = (float)(v10 + v10) * (float)(StereoPanControlInfo_CenterValue - StereoPanControlInfo_LeftValue);
          v13 = (float)StereoPanControlInfo_LeftValue;
        }
        v11 = (float)(v12 + v13);
      }
    }
  }
  v18 = 0;
  result = CACFDictionary::GetUInt32(*v4, CFSTR("value"), &v18);
  if (v11 != v18)
  {
    v17 = 0;
    result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v11, &v17);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v20 = "HALS_IOA2Control.cpp";
        v21 = 1024;
        v22 = 1095;
        v23 = 1024;
        v24 = v15;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting pan control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    if (v17 == v11)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)v4, CFSTR("value"), v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 200))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1B5B3A45C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v4[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B3A384);
  }
  _Unwind_Resume(a1);
}

void sub_1B5B3A4C8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B3A4C4);
  JUMPOUT(0x1B5B3A484);
}

void ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  size_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 104);
  if (v3)
  {
    v4 = *(_DWORD *)(v2 + 112);
    v5 = *(_DWORD *)(a1 + 64);
    if (v4 >= v5)
      v6 = v5;
    else
      v6 = v4;
    memcpy(v3, *(const void **)(a1 + 48), v6);
    HALS_IOA2UCDevice::MoveBlockControlData((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), 1u, v6);
  }
}

void sub_1B5B3A538(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    v5 = v4[2];
  else
    v5 = 2003329396;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void __copy_helper_block_e8_56c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_56c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 56), a2);
}

void __copy_helper_block_e8_64c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_64c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 64), a2);
}

void __copy_helper_block_e8_72c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_72c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 72), a2);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;

  result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 32) + 80), a2);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B5B3A628(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *exception;
  _DWORD *v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 80);
  v11 = 0;
  v9 = v3;
  v10 = 0;
  if (v3)
  {
    if (!CACFDictionary::GetUInt32(v3, CFSTR("minimum value"), &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALS_IOA2UCDevice.cpp";
        v14 = 1024;
        v15 = 948;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetSliderControlInfoByIndex_MinimumValue: there is no minimum control value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v4 = v11;
  }
  else
  {
    v4 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  **(_DWORD **)(a1 + 40) = v4;
  v5 = *(_QWORD *)(v2 + 80);
  v11 = 0;
  v9 = v5;
  v10 = 0;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32(v5, CFSTR("maximum value"), &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALS_IOA2UCDevice.cpp";
        v14 = 1024;
        v15 = 960;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetSliderControlInfoByIndex_MaximumValue: there is no maximum control value", buf, 0x12u);
      }
      v8 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v8 = &off_1E69A1B30;
      v8[2] = 1852797029;
    }
    v6 = v11;
  }
  else
  {
    v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v6;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  int ControlInfo_Value;

  v3 = *(_QWORD *)(a1 + 32);
  ControlInfo_Value = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  **(float **)(a1 + 40) = CAVolumeCurve::ConvertRawToScalar((CAVolumeCurve *)(v3 + 120), ControlInfo_Value);
}

void sub_1B5B3A8E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  int ControlInfo_Value;
  uint64_t result;
  int v6;

  v3 = *(_QWORD *)(a1 + 32);
  ControlInfo_Value = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  result = CAVolumeCurve::ConvertRawToDB((CAVolumeCurve *)(v3 + 120), ControlInfo_Value);
  **(_DWORD **)(a1 + 40) = v6;
  return result;
}

void sub_1B5B3A92C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12(uint64_t a1)
{
  _QWORD *v1;
  double v2;
  double *v3;
  double result;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1[18])
    v2 = *(float *)(v1[16] + 36);
  else
    v2 = 0.0;
  v3 = *(double **)(a1 + 40);
  *v3 = v2;
  result = CAVolumeCurve::GetMaximumDB((CAVolumeCurve *)(v1 + 15));
  v3[1] = result;
  return result;
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t a1)
{
  CAVolumeCurve *v2;
  int v3;
  uint64_t result;
  int v5;

  v2 = (CAVolumeCurve *)(*(_QWORD *)(a1 + 32) + 120);
  v3 = CAVolumeCurve::ConvertScalarToRaw(v2, **(float **)(a1 + 48));
  result = CAVolumeCurve::ConvertRawToDB(v2, v3);
  **(_DWORD **)(a1 + 40) = v5;
  return result;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16(uint64_t a1)
{
  CAVolumeCurve *v2;
  int v3;

  v2 = (CAVolumeCurve *)(*(_QWORD *)(a1 + 32) + 120);
  v3 = CAVolumeCurve::ConvertDBToRaw(v2, **(float **)(a1 + 48));
  **(float **)(a1 + 40) = CAVolumeCurve::ConvertRawToScalar(v2, v3);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 156);
  return result;
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;

  result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 32) + 80), a2);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1B5B3AA60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  const __CFArray *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  CFArrayRef v9;
  __int16 v10;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v3 + 96))
  {
    v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    v9 = v4;
    v10 = 1;
    v5 = **(_DWORD **)(a1 + 48);
    if (v4)
      LODWORD(v4) = CFArrayGetCount(v4);
    v6 = v5 >> 2;
    if (v4 < v5 >> 2)
      v6 = v4;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        CACFArray::GetUInt32(&v9, v8++, (unsigned int *)(*(_QWORD *)(a1 + 56) + v7));
        v7 += 4;
      }
      while (v8 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    }
    CACFArray::~CACFArray((CACFArray *)&v9);
  }
  else
  {
    **(_DWORD **)(a1 + 56) = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1B5B3AB58(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B3AB44);
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  const __CFArray *v3;
  unsigned int v4;
  unsigned int Count;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *exception;
  CACFDictionary *v12;
  __int16 v13;
  CFArrayRef v14;
  __int16 v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 40) + 80), a2);
  v14 = v3;
  v15 = 1;
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "HALS_IOA2Control.cpp";
      v18 = 1024;
      v19 = 544;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v4 = *(_DWORD *)(a1 + 56);
  Count = CFArrayGetCount(v3);
  v6 = v4 >> 2;
  if (v4 >> 2 >= Count)
    v6 = Count;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v12 = 0;
      v13 = 0;
      CACFArray::GetCACFDictionary(&v14, v8, (CACFDictionary *)&v12);
      if (!v12)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "HALS_IOA2Control.cpp";
          v18 = 1024;
          v19 = 550;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
        }
        v9 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v9 = &off_1E69A1B30;
        v9[2] = 1852797029;
      }
      if ((CACFDictionary::GetUInt32((uint64_t)v12, CFSTR("value"), (unsigned int *)(*(_QWORD *)(a1 + 48) + v7)) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "HALS_IOA2Control.cpp";
          v18 = 1024;
          v19 = 553;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
        }
        v10 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v10 = &off_1E69A1B30;
        v10[2] = 1852797029;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v12);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&v14);
}

void sub_1B5B3AE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a11);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B3AC68);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int v3;
  unsigned int Count;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *exception;
  CFTypeRef cf;
  char v10;
  unsigned int v11;
  CACFDictionary *v12;
  __int16 v13;
  CFArrayRef theArray;
  __int16 v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  theArray = (CFArrayRef)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 40) + 80), a2);
  v15 = 1;
  if (!theArray)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v17 = "HALS_IOA2Control.cpp";
      v18 = 1024;
      v19 = 572;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioSelectorControlPropertyItemName", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = 0;
    do
    {
      Count = theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (v3 >= Count)
        break;
      v12 = 0;
      v13 = 0;
      CACFArray::GetCACFDictionary(&theArray, v3, (CACFDictionary *)&v12);
      if (!v12)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "HALS_IOA2Control.cpp";
          v18 = 1024;
          v19 = 577;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioSelectorControlPropertyItemName", buf, 0x12u);
        }
        v5 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v5 = &off_1E69A1B30;
        v5[2] = 1852797029;
      }
      v11 = 0;
      if ((CACFDictionary::GetUInt32((uint64_t)v12, CFSTR("value"), &v11) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v17 = "HALS_IOA2Control.cpp";
          v18 = 1024;
          v19 = 581;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioSelectorControlPropertyItemName", buf, 0x12u);
        }
        v6 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v6 = &off_1E69A1B30;
        v6[2] = 1852797029;
      }
      if (v11 == **(_DWORD **)(a1 + 48))
      {
        cf = 0;
        v10 = 0;
        CACFDictionary::GetCACFString(&v12, CFSTR("name"), &cf);
        if (!cf)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v17 = "HALS_IOA2Control.cpp";
            v18 = 1024;
            v19 = 586;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item name for kAudioSelectorControlPropertyItemName", buf, 0x12u);
          }
          v7 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v7 = &off_1E69A1B30;
          v7[2] = 1852797029;
        }
        CFRetain(cf);
        **(_QWORD **)(a1 + 56) = cf;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        CACFString::~CACFString((CACFString *)&cf);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v12);
      ++v3;
    }
    while (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&theArray);
}

void sub_1B5B3B2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B3AFFCLL);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int v3;
  int UInt32;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *exception;
  unsigned int v9;
  CACFDictionary *v10;
  __int16 v11;
  CFTypeRef v12;
  __int16 v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 40) + 80), a2);
  v13 = 1;
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "HALS_IOA2Control.cpp";
      v16 = 1024;
      v17 = 608;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = 0;
    do
    {
      if (v3 >= *(_DWORD *)(a1 + 64))
        break;
      v10 = 0;
      v11 = 0;
      CACFArray::GetCACFDictionary((CFArrayRef *)&v12, v3, (CACFDictionary *)&v10);
      if (!v10)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "HALS_IOA2Control.cpp";
          v16 = 1024;
          v17 = 613;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
        }
        v7 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v7 = &off_1E69A1B30;
        v7[2] = 1852797029;
      }
      v9 = 0;
      if ((CACFDictionary::GetUInt32((uint64_t)v10, CFSTR("IOAudioSelectorControlSelectionValue"), &v9) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "HALS_IOA2Control.cpp";
          v16 = 1024;
          v17 = 617;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
        }
        v6 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v6 = &off_1E69A1B30;
        v6[2] = 1852797029;
      }
      if (v9 == **(_DWORD **)(a1 + 48))
      {
        *(_DWORD *)buf = 0;
        UInt32 = CACFDictionary::GetUInt32((uint64_t)v10, CFSTR("IOAudioSelectorControlClockSourceKey"), (unsigned int *)buf);
        v5 = *(_DWORD *)buf;
        if (!UInt32)
          v5 = 0;
        **(_DWORD **)(a1 + 56) = v5;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v10);
      ++v3;
    }
    while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&v12);
}

void sub_1B5B3B638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a13);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B3B430);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_36(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  uint64_t result;

  v3 = a1[8];
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(*(HALS_IOA2UCDevice **)(v3 + 80), v4);
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(*(HALS_IOA2UCDevice **)(v3 + 80), v5);
  result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), v6);
  *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1B5B3B704(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *exception;
  _DWORD *v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 80);
  v11 = 0;
  v9 = v3;
  v10 = 0;
  if (v3)
  {
    if (!CACFDictionary::GetUInt32(v3, CFSTR("left channel"), &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALS_IOA2UCDevice.cpp";
        v14 = 1024;
        v15 = 1096;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftChannel: there is no left channel", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v4 = v11;
  }
  else
  {
    v4 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  **(_DWORD **)(a1 + 40) = v4;
  v5 = *(_QWORD *)(v2 + 80);
  v11 = 0;
  v9 = v5;
  v10 = 0;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32(v5, CFSTR("right channel"), &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALS_IOA2UCDevice.cpp";
        v14 = 1024;
        v15 = 1108;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftChannel: there is no right channel", buf, 0x12u);
      }
      v8 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v8 = &off_1E69A1B30;
      v8[2] = 1852797029;
    }
    v6 = v11;
  }
  else
  {
    v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v6;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  BOOL v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  v5 = (HALS_ObjectMap *)v3;
  if (*(_QWORD *)(v2 + 104))
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *(_DWORD *)(v2 + 112);
    if (v7 >= *(_DWORD *)(a1 + 56))
      v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
    HALS_IOA2UCDevice::MoveBlockControlData((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 72), 0, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    memcpy(*(void **)(a1 + 48), *(const void **)(v2 + 104), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1B5B3BA1C(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap *v14;

  HALS_ObjectMap::ReleaseObject(v14, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_42(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  _DWORD *exception;
  uint64_t v5;
  __int16 v6;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  cf = 0;
  v5 = v2;
  v6 = 0;
  if (v2)
  {
    if ((CACFDictionary::GetDictionary(v2, CFSTR("descriptor"), (const __CFDictionary **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1120;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetBlockControlInfoByID_Descriptor: there is no descriptor", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v3 = cf;
    if (cf)
      CFRetain(cf);
  }
  else
  {
    v3 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  **(_QWORD **)(a1 + 40) = v3;
}

void ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v2;
  const __CFArray *v4;
  const __CFArray *v5;
  __int16 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 96))
  {
    v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v2 + 80), a2);
    v5 = v4;
    v6 = 1;
    if (v4)
      LODWORD(v4) = CFArrayGetCount(v4);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)v4;
    CACFArray::~CACFArray((CACFArray *)&v5);
  }
}

void sub_1B5B3BC38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFArray::~CACFArray((CACFArray *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B3BC28);
}

void ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  __int16 v5;

  v3 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(_QWORD *)(a1 + 40) + 80), a2);
  v4 = v3;
  v5 = 1;
  if (v3)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayGetCount(v3);
  CACFArray::~CACFArray((CACFArray *)&v4);
}

void sub_1B5B3BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFArray::~CACFArray((CACFArray *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (*(_QWORD *)(v1 + 104))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 112);
  return result;
}

void ___ZNK16HALS_IOA2Control18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
  v6 = 0;
  v4 = v2;
  v5 = 0;
  if (v2)
  {
    CACFDictionary::GetBool(v2, CFSTR("read only"), &v6);
    v3 = !v6;
  }
  else
  {
    v3 = 1;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v4);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
}

void sub_1B5B3BD5C(void *a1)
{
  uint64_t v2;

  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOA2Control::SynchronizeWithDictionary(HALS_IOA2Control *this)
{
  CACFDictionary *v2;
  const __CFArray *v3;
  unsigned int Count;
  unint64_t v5;
  unsigned int *v6;
  int v7;
  BOOL v8;
  int v9;
  CACFDictionary *v11;
  const __CFArray *v12;
  unsigned int v13;
  double Fixed64;
  float v15;
  uint64_t v16;
  char v17;
  float v18;
  float v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  CFArrayRef v25;
  __int16 v26;
  double v27;
  unsigned int v28;
  double v29;
  int v30;
  CACFDictionary *v31;
  __int16 v32;
  CFTypeRef cf;
  __int16 v34;
  CACFDictionary *v35;
  __int16 v36;

  v2 = (CACFDictionary *)*((_QWORD *)this + 10);
  cf = 0;
  v35 = v2;
  v36 = 0;
  if (v2)
  {
    CACFDictionary::GetArray((uint64_t)v2, CFSTR("property selectors"), (const __CFArray **)&cf);
    v3 = (const __CFArray *)cf;
    if (cf)
      CFRetain(cf);
  }
  else
  {
    v3 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
  v25 = v3;
  v26 = 1;
  if (!v3)
  {
    *((_DWORD *)this + 42) = 0;
    goto LABEL_13;
  }
  Count = CFArrayGetCount(v3);
  if (Count >= 6)
  {
    *((_DWORD *)this + 42) = 6;
  }
  else
  {
    *((_DWORD *)this + 42) = Count;
    if (!Count)
      goto LABEL_13;
  }
  v5 = 0;
  v6 = (unsigned int *)((char *)this + 172);
  do
    CACFArray::GetUInt32(&v25, v5++, v6++);
  while (v5 < *((unsigned int *)this + 42));
LABEL_13:
  v7 = *((_DWORD *)this + 5);
  if (v7 <= 1936028006)
  {
    v8 = v7 == 1818588780;
    v9 = 1886544237;
  }
  else
  {
    v8 = v7 == 1936028007 || v7 == 1937072758;
    v9 = 1986817381;
  }
  if (!v8 && v7 != v9)
  {
    v20 = *((_DWORD *)this + 6);
    if (v7 == v20)
      goto LABEL_45;
    if (v20 <= 1936028006)
    {
      if (v20 != 1818588780)
      {
        v21 = 1886544237;
LABEL_67:
        if (v20 != v21)
          goto LABEL_45;
      }
    }
    else if (v20 != 1936028007 && v20 != 1937072758)
    {
      v21 = 1986817381;
      goto LABEL_67;
    }
  }
  v11 = (CACFDictionary *)*((_QWORD *)this + 10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 17));
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v35 = v11;
  v36 = 0;
  if (v11)
  {
    cf = 0;
    v34 = 1;
    CACFDictionary::GetCACFArray(&v35, CFSTR("range map"), (CACFArray *)&cf);
    v12 = (const __CFArray *)cf;
    if (cf)
    {
      v13 = 0;
LABEL_27:
      LODWORD(v12) = CFArrayGetCount(v12);
      while (v13 < v12)
      {
        v31 = 0;
        v32 = 1;
        CACFArray::GetCACFDictionary((CFArrayRef *)&cf, v13, (CACFDictionary *)&v31);
        if (v31)
        {
          v30 = 0;
          v29 = 0.0;
          v28 = 0;
          v27 = 0.0;
          CACFDictionary::GetSInt32(v31, CFSTR("start int value"), &v30);
          CACFDictionary::GetFixed64(v31, CFSTR("start db value"), &v29);
          CACFDictionary::GetUInt32((uint64_t)v31, CFSTR("integer steps"), &v28);
          Fixed64 = CACFDictionary::GetFixed64(v31, CFSTR("db per step"), &v27);
          *(float *)&Fixed64 = v29;
          v15 = v29 + (double)v28 * v27;
          CAVolumeCurve::AddRange((HALS_IOA2Control *)((char *)this + 120), v30, v28 + v30, Fixed64, v15);
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
        ++v13;
        v12 = (const __CFArray *)cf;
        if (cf)
          goto LABEL_27;
      }
    }
    LODWORD(v31) = 0;
    if (CACFDictionary::GetUInt32((uint64_t)v35, CFSTR("transfer function"), (unsigned int *)&v31))
    {
      v16 = v31;
      *((_DWORD *)this + 39) = (_DWORD)v31;
      if (v16 > 0xF)
      {
        v19 = 1.0;
        v18 = 2.0;
        v17 = 1;
      }
      else
      {
        v17 = byte_1B5D68E70[v16];
        v18 = flt_1B5D1E560[v16];
        v19 = flt_1B5D1E5A0[v16];
      }
      *((_BYTE *)this + 152) = v17;
      *((float *)this + 40) = v18;
      *((float *)this + 41) = v19;
    }
    CACFArray::~CACFArray((CACFArray *)&cf);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
  v7 = *((_DWORD *)this + 5);
LABEL_45:
  if (v7 > 1751740517)
  {
    if (v7 == 1751740518 || v7 == 1852601964)
      goto LABEL_53;
    v22 = 1936483188;
  }
  else
  {
    if (v7 == 1668047723 || v7 == 1684370292)
      goto LABEL_53;
    v22 = 1685287523;
  }
  if (v7 != v22)
  {
    v23 = *((_DWORD *)this + 6);
    if (v7 == v23)
      goto LABEL_54;
    if (v23 > 1751740517)
    {
      if (v23 == 1751740518 || v23 == 1936483188)
        goto LABEL_53;
      v24 = 1852601964;
    }
    else
    {
      if (v23 == 1668047723 || v23 == 1684370292)
        goto LABEL_53;
      v24 = 1685287523;
    }
    if (v23 != v24)
      goto LABEL_54;
  }
LABEL_53:
  CACFDictionary::GetBool(*((_QWORD *)this + 10), CFSTR("multi-selector"), (BOOL *)this + 96);
LABEL_54:
  CACFArray::~CACFArray((CACFArray *)&v25);
}

void sub_1B5B3C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  CACFArray::~CACFArray((CACFArray *)&a17);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a19);
  CACFArray::~CACFArray((CACFArray *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Control::HALS_IOA2Control(uint64_t a1, uint64_t a2, int a3, const __CFDictionary *a4, int a5, int a6, HALS_Object *a7, int a8, int a9)
{
  HALS_Object *v12;
  CFMutableDictionaryRef Mutable;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = HALS_Control::HALS_Control((HALS_Object *)a1, a2, a5, a6, a7, a8, a9);
  *(_QWORD *)v12 = off_1E698BEC0;
  *((_DWORD *)v12 + 18) = a3;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 80) = Mutable;
  *(_WORD *)(a1 + 88) = 257;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_BYTE *)(a1 + 152) = 1;
  *(_DWORD *)(a1 + 156) = 5;
  *(_QWORD *)(a1 + 160) = 0x3F80000040000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)(a1 + 80), a4);
  if (!*(_QWORD *)(a1 + 80))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "HALS_IOA2Control.cpp";
      v18 = 1024;
      v19 = 53;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::HALS_IOA2Control: the control info is nullptr", (uint8_t *)&v16, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  return a1;
}

void sub_1B5B3C54C(_Unwind_Exception *a1)
{
  HALS_Object *v1;
  uint64_t v3;

  *(_QWORD *)v1 = off_1E6995A68;
  v3 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

void HALS_IOA2Control::SynchronizeWithRegistry(HALS_IOA2Control *this)
{
  HALB_Mutex *v1;
  _QWORD v2[5];

  if (*((_DWORD *)this + 15) == 1)
  {
    *((_DWORD *)this + 43) = 1650685548;
  }
  else
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN16HALS_IOA2Control23SynchronizeWithRegistryEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_62_9032;
    v2[4] = this;
    v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
  }
}

void ___ZN16HALS_IOA2Control23SynchronizeWithRegistryEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  const __CFDictionary *v5;
  _DWORD *exception;
  const __CFDictionary *v7;
  __int16 v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v1 + 56));
  v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    v5 = (const __CFDictionary *)HALS_IOA2UCDevice::CopyControlDictionaryByID((const __CFDictionary **)(v2 + 1808), *(_DWORD *)(v1 + 72));
    v7 = v5;
    v8 = 1;
    if (!v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v10 = "HALS_IOA2Control.cpp";
        v11 = 1024;
        v12 = 1253;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SynchronizeWithRegistry: couldn't find the control dictionary", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)(v1 + 80), v5);
    HALS_IOA2Control::SynchronizeWithDictionary((HALS_IOA2Control *)v1);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v7);
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
}

void sub_1B5B3C750(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN16HALS_IOA2Control12PushNewValueEi_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALS_Object *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  const __CFArray *v9;
  int UInt32;
  int v11;
  int v12;
  const __CFArray *v13;
  unsigned int Count;
  const __CFArray *v15;
  CFIndex v16;
  const __CFArray *v17;
  unsigned int v18;
  CFArrayRef v19;
  __CFDictionary *v20;
  const __CFArray *v21;
  CFMutableDictionaryRef MutableCopy;
  __int16 v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  CFDictionaryRef theDict;
  __int16 v28;
  CFArrayRef v29;
  __int16 v30;
  CFArrayRef theArray;
  __int16 v32;
  int valuePtr;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  v5 = v3;
  if (v3)
  {
    if (*(_BYTE *)(v2 + 96))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 1808) + 16))(v3 + 1808);
      HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v2);
    }
    else
    {
      v6 = *(_DWORD *)(v2 + 72);
      v7 = *(_DWORD *)(a1 + 40);
      theArray = 0;
      HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)(v3 + 1808), CFSTR("controls"), &theArray);
      v8 = 0;
      v9 = theArray;
      v29 = theArray;
      v30 = 1;
      if (!theArray)
        goto LABEL_6;
LABEL_5:
      LODWORD(v9) = CFArrayGetCount(v9);
LABEL_6:
      while (v8 < v9)
      {
        theDict = 0;
        v28 = 0;
        CACFArray::GetCACFDictionary(&v29, v8, (CACFDictionary *)&theDict);
        if (theDict)
        {
          v26 = 0;
          UInt32 = CACFDictionary::GetUInt32((uint64_t)theDict, CFSTR("control ID"), &v26);
          v11 = v26 == v6 ? UInt32 : 0;
          if (v11 == 1)
          {
            v25 = 0;
            CACFDictionary::GetUInt32((uint64_t)theDict, CFSTR("base class"), &v25);
            v24 = 0;
            CACFDictionary::GetSInt32(theDict, CFSTR("value"), &v24);
            if ((int)v25 <= 1936483441)
            {
              if (v25 != 1818588780 && v25 != 1936483188)
                goto LABEL_40;
            }
            else if (v25 != 1936483442 && v25 != 1936744814)
            {
              if (v25 != 1953458028)
                goto LABEL_40;
              v12 = (v7 != 0) ^ (v24 == 0);
              if (!v12)
                v7 = v7 != 0;
              if ((v12 & 1) != 0)
                goto LABEL_40;
LABEL_25:
              MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
              v23 = 257;
              valuePtr = v7;
              v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
              theArray = v13;
              LOBYTE(v32) = 1;
              if (v13 && MutableCopy)
                CFDictionarySetValue(MutableCopy, CFSTR("value"), v13);
              CACFNumber::~CACFNumber((CACFNumber *)&theArray);
              if (v29)
              {
                Count = CFArrayGetCount(v29);
                v15 = v29;
                v16 = Count;
              }
              else
              {
                v15 = 0;
                v16 = 0;
              }
              v17 = CFArrayCreateMutableCopy(0, v16, v15);
              theArray = v17;
              v32 = 257;
              if (v17)
              {
                v18 = CFArrayGetCount(v17);
                v19 = theArray;
                if (v8 <= v18)
                {
                  CFArraySetValueAtIndex(theArray, v8, MutableCopy);
                  v19 = theArray;
                }
              }
              else
              {
                v19 = 0;
              }
              if (*(_BYTE *)(v5 + 1833))
              {
                if (v19)
                {
                  v20 = *(__CFDictionary **)(v5 + 1824);
                  if (v20)
                    CFDictionarySetValue(v20, CFSTR("controls"), v19);
                }
              }
              CACFArray::~CACFArray((CACFArray *)&theArray);
              CACFDictionary::~CACFDictionary((CACFDictionary *)&MutableCopy);
LABEL_40:
              CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
              break;
            }
            if (v24 != v7)
              goto LABEL_25;
            goto LABEL_40;
          }
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
        ++v8;
        v9 = v29;
        if (v29)
          goto LABEL_5;
      }
      CACFArray::~CACFArray((CACFArray *)&v29);
      v21 = (const __CFArray *)HALS_IOA2UCDevice::CopyControlDictionaryByID((const __CFDictionary **)(v5 + 1808), *(_DWORD *)(v2 + 72));
      theArray = v21;
      v32 = 1;
      if (v21)
      {
        CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)(v2 + 80), v21);
        HALS_IOA2Control::SynchronizeWithDictionary((HALS_IOA2Control *)v2);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v4);
}

void sub_1B5B3CAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  HALS_ObjectMap *v2;
  HALS_Object *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  CACFNumber::~CACFNumber((CACFNumber *)va3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFArray::~CACFArray((CACFArray *)va2);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio1::Device::Device(uint64_t a1, std::string::size_type a2, io_service_t *a3, const __CFDictionary **a4)
{
  const __CFString *v8;
  std::string *v9;
  CFTypeRef *v10;
  NSObject *v11;
  AMCP::Utility::Mach_Port *v12;
  AMCP::Utility::Mach_Port *v13;
  CFDictionaryRef *v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef *v17;
  mach_error_t v18;
  io_object_t v19;
  uint64_t v20;
  io_object_t v21;
  uint64_t v22;
  const char *v23;
  const char *imp;
  const char *v25;
  io_object_t v26;
  _DWORD *v27;
  io_object_t v28;
  uint64_t v29;
  void *v30;
  const std::error_category *v31;
  io_registry_entry_t v32;
  uint64_t CFProperties;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  io_service_t v40;
  uint64_t v41;
  NSObject *v42;
  std::string *data;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  io_connect_t *v48;
  io_connect_t *v49;
  AMCP::Utility::Kernel_Error_Category *v50;
  unsigned int v51;
  AMCP::Log::Scope_Registry *v52;
  AMCP::Log::Scope_Registry *v53;
  AMCP::Log::Scope_Registry *v54;
  int what;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  mach_port_t v62;
  _BYTE *v63;
  int v64;
  NSObject *v65;
  os_log_type_t v66;
  std::__shared_weak_count *v67;
  NSObject *v68;
  unint64_t *v69;
  unint64_t v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  const __CFString **v73;
  _BYTE *v74;
  int v75;
  std::__shared_weak_count *size;
  NSObject *v77;
  unint64_t *v78;
  unint64_t v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  mach_port_t v82;
  _BYTE *v83;
  int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  CFTypeRef v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::string::size_type v117;
  int v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  CFTypeRef v122;
  unint64_t v123;
  std::runtime_error *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  unsigned int v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned int v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  int v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  CFTypeRef v157;
  uint64_t v158;
  unint64_t v159;
  std::runtime_error *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  std::runtime_error *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  std::runtime_error *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  AMCP::IOAudio1::Stream **v180;
  AMCP::IOAudio1::Stream **v181;
  AMCP::IOAudio1::Stream **v182;
  AMCP::IOAudio1::Stream **v183;
  AMCP::IOAudio1::Control **v184;
  AMCP::IOAudio1::Control **v185;
  NSObject *v187;
  _opaque_pthread_t *v188;
  mach_port_t v189;
  uint64_t v190;
  void *v191;
  void *v192;
  const std::error_category *v193;
  std::logic_error *v194;
  std::runtime_error *exception;
  std::runtime_error *v196;
  void *v197;
  const std::string::value_type *v198;
  std::string::size_type v199;
  std::string *v200;
  std::runtime_error *v201;
  std::runtime_error *v202;
  std::runtime_error *v203;
  std::runtime_error *v204;
  std::runtime_error *v205;
  void *v206;
  const std::error_category *v207;
  void *v208;
  const std::error_category *v209;
  void *v210;
  const std::error_category *v211;
  void *v212;
  const std::error_category *v213;
  std::runtime_error *v214;
  std::runtime_error *v215;
  std::runtime_error *v216;
  std::runtime_error *v217;
  const __CFString **v218;
  uint64_t *v219;
  applesauce::CF::DictionaryRef *v220;
  unsigned int *v221;
  io_object_t object[4];
  uint64_t v223;
  CFTypeRef v224;
  __int128 v225;
  uint64_t v226;
  _BYTE v227[32];
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  io_object_t iterator[2];
  io_object_t *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  CFTypeRef v239;
  std::__shared_weak_count *v240;
  CFTypeRef v241[2];
  std::string buf[2];
  const char *v243;
  const char *v244;
  int v245;
  _QWORD v246[3];
  _QWORD *v247;
  dispatch_object_t v248[40];
  std::string __p[13];
  CFTypeRef cf[3];
  __int128 v251;
  uint64_t v252;
  std::runtime_error v253;
  __int128 v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, &stru_1E69A2360);
  applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>((_QWORD *)(a1 + 24), *a4, CFSTR("IOAudioEngineGlobalUniqueID"), cf);
  if (cf[0])
    CFRelease(cf[0]);
  *(_DWORD *)(a1 + 32) = 0;
  v8 = *(const __CFString **)(a1 + 24);
  v218 = (const __CFString **)(a1 + 24);
  if (!v8)
  {
    v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v196, "Could not construct");
    __cxa_throw(v196, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v8);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = __p;
  else
    v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  caulk::make_string((caulk *)"%s Work Queue", (uint64_t)cf, v9);
  if (SHIBYTE(cf[2]) >= 0)
    v10 = cf;
  else
    v10 = (CFTypeRef *)cf[0];
  v11 = dispatch_queue_create((const char *)v10, 0);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 40), v11);
  if (v11)
    dispatch_release(v11);
  if (SHIBYTE(cf[2]) < 0)
    operator delete((void *)cf[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v12 = (AMCP::Utility::Mach_Port *)*a3;
  *(_DWORD *)(a1 + 360) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v12 = (AMCP::Utility::Mach_Port *)IOObjectRetain((io_object_t)v12);
    v13 = v12;
    if ((_DWORD)v12)
    {
      v206 = __cxa_allocate_exception(0x20uLL);
      v207 = std::system_category();
      MEMORY[0x1B5E5022C](v206, v13, v207, "Error on Retain");
      __cxa_throw(v206, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v219 = (uint64_t *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v221 = (unsigned int *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = AMCP::Utility::Mach_Port::create_port(v12);
  *(_WORD *)(a1 + 388) = 257;
  *(_QWORD *)(a1 + 392) = 850045863;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  v14 = (CFDictionaryRef *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = *a4;
  *a4 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v224, "IOAudioDevice");
  std::string::basic_string[abi:ne180100]<0>(&v235, "IOService");
  v253.__imp_.__imp_ = 0;
  *(_QWORD *)&v254 = 0;
  v253.__vftable = 0;
  v15 = *a3;
  LODWORD(v239) = v15;
  if ((_DWORD)v15)
  {
    v16 = IOObjectRetain(v15);
    if ((_DWORD)v16)
    {
      v208 = __cxa_allocate_exception(0x20uLL);
      v209 = std::system_category();
      MEMORY[0x1B5E5022C](v208, v16, v209, "Error on Retain");
      __cxa_throw(v208, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  if (SHIBYTE(v236) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v227, (const std::string::value_type *)v235, *((std::string::size_type *)&v235 + 1));
  }
  else
  {
    *(_OWORD *)v227 = v235;
    *(_QWORD *)&v227[16] = v236;
  }
  LODWORD(cf[0]) = v15;
  LODWORD(v239) = 0;
  *(_OWORD *)&cf[1] = *(_OWORD *)v227;
  *(_QWORD *)&v251 = *(_QWORD *)&v227[16];
  memset(v227, 0, 24);
  object[0] = 0;
  if ((SBYTE7(v251) & 0x80u) == 0)
    v17 = &cf[1];
  else
    v17 = (CFTypeRef *)cf[1];
  v18 = MEMORY[0x1B5E4FBFC](v15, v17, object);
  if (v18)
  {
    v197 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Could not find any parents for plane ");
    if ((SBYTE7(v251) & 0x80u) == 0)
      v198 = (const std::string::value_type *)&cf[1];
    else
      v198 = (const std::string::value_type *)cf[1];
    if ((SBYTE7(v251) & 0x80u) == 0)
      v199 = BYTE7(v251);
    else
      v199 = (std::string::size_type)cf[2];
    v200 = std::string::append(buf, v198, v199);
    __p[0] = *v200;
    v200->__r_.__value_.__l.__size_ = 0;
    v200->__r_.__value_.__r.__words[2] = 0;
    v200->__r_.__value_.__r.__words[0] = 0;
    applesauce::iokit::kern_return_exception::kern_return_exception((uint64_t)v197, (const void **)&__p[0].__r_.__value_.__l.__data_, v18);
  }
  v19 = object[0];
  LODWORD(__p[0].__r_.__value_.__l.__data_) = object[0];
  LODWORD(buf[0].__r_.__value_.__l.__data_) = object[0];
  if (object[0])
  {
    v20 = IOObjectRetain(object[0]);
    if ((_DWORD)v20)
    {
      v210 = __cxa_allocate_exception(0x20uLL);
      v211 = std::system_category();
      MEMORY[0x1B5E5022C](v210, v20, v211, "Error on Retain");
      __cxa_throw(v210, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  applesauce::iokit::details::io_services_iterator::io_services_iterator(iterator, v19);
  if (v19)
  {
    IOObjectRelease(v19);
    IOObjectRelease(v19);
  }
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v21 = iterator[1];
  while (v21)
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = v21;
    v22 = IOObjectRetain(v21);
    if ((_DWORD)v22)
    {
      v192 = __cxa_allocate_exception(0x20uLL);
      v193 = std::system_category();
      MEMORY[0x1B5E5022C](v192, v22, v193, "Error on Retain");
      __cxa_throw(v192, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    if (v225 >= 0)
      v23 = (const char *)&v224;
    else
      v23 = (const char *)v224;
    if (IOObjectConformsTo(v21, v23))
    {
      imp = v253.__imp_.__imp_;
      if (v253.__imp_.__imp_ >= (const char *)v254)
      {
        v25 = (const char *)std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>((char **)&v253, v21);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>((_DWORD *)v253.__imp_.__imp_, v21);
        v25 = imp + 4;
      }
      v253.__imp_.__imp_ = v25;
    }
    IOObjectRelease(v21);
    if (!iterator[1])
    {
      v194 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v194, "io_services_iterator exceeding size");
      v194->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(v194, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
    }
    v21 = IOIteratorNext(iterator[0]);
    v26 = iterator[1];
    iterator[1] = v21;
    if (v26)
    {
      IOObjectRelease(v26);
      v21 = iterator[1];
    }
  }
  if (iterator[0])
    IOObjectRelease(iterator[0]);
  if (SBYTE7(v251) < 0)
    operator delete((void *)cf[1]);
  if (LODWORD(cf[0]))
    IOObjectRelease((io_object_t)cf[0]);
  v27 = (_DWORD *)(a1 + 472);
  if (v253.__vftable == (std::runtime_error_vtbl *)v253.__imp_.__imp_)
  {
    *v27 = 0;
  }
  else
  {
    v28 = (io_object_t)v253.~runtime_error;
    *v27 = v253.~runtime_error;
    if (v28)
    {
      v29 = IOObjectRetain(v28);
      if ((_DWORD)v29)
      {
        v30 = __cxa_allocate_exception(0x20uLL);
        v31 = std::system_category();
        MEMORY[0x1B5E5022C](v30, v29, v31, "Error on Retain");
        __cxa_throw(v30, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
  }
  cf[0] = &v253;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
  if (SHIBYTE(v236) < 0)
    operator delete((void *)v235);
  if (SHIBYTE(v225) < 0)
    operator delete((void *)v224);
  v32 = *(_DWORD *)(a1 + 472);
  v220 = (applesauce::CF::DictionaryRef *)(a1 + 480);
  if (v32)
  {
    cf[0] = 0;
    CFProperties = IORegistryEntryCreateCFProperties(v32, (CFMutableDictionaryRef *)cf, 0, 0);
    if ((_DWORD)CFProperties)
    {
      v212 = __cxa_allocate_exception(0x20uLL);
      v213 = std::system_category();
      MEMORY[0x1B5E5022C](v212, CFProperties, v213, "Error on get_properties");
      __cxa_throw(v212, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    applesauce::CF::DictionaryRef::DictionaryRef(v220, cf[0]);
  }
  else
  {
    *(_QWORD *)(a1 + 480) = 0;
  }
  *(_OWORD *)(a1 + 536) = 0u;
  v34 = (_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  std::string::basic_string[abi:ne180100]<0>(cf, "IOAudioStream");
  std::string::basic_string[abi:ne180100]<0>(__p, "IOService");
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
  _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)&v235, *a3, (uint64_t)__p, (const char **)&buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(cf[2]) < 0)
    operator delete((void *)cf[0]);
  AMCP::IOAudio1::Stream::create_from_service_list((uint64_t)cf, a1, (io_object_t *)v235, *((io_object_t **)&v235 + 1));
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate((_QWORD *)(a1 + 488));
  *(_OWORD *)(a1 + 488) = *(_OWORD *)cf;
  *(CFTypeRef *)(a1 + 504) = cf[2];
  memset(cf, 0, sizeof(cf));
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate((_QWORD *)(a1 + 512));
  *(_OWORD *)(a1 + 512) = v251;
  *(_QWORD *)(a1 + 528) = v252;
  v252 = 0;
  v251 = 0uLL;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(cf, "IOAudioControl");
  std::string::basic_string[abi:ne180100]<0>(__p, "IOService");
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
  _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)iterator, *a3, (uint64_t)__p, (const char **)&buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(cf[2]) < 0)
    operator delete((void *)cf[0]);
  AMCP::IOAudio1::Control::create_from_service_list((uint64_t **)cf, a1, *(io_object_t **)iterator, v234);
  v35 = (_QWORD *)*v34;
  if (*v34)
  {
    v36 = *(_QWORD **)(a1 + 544);
    v37 = (_QWORD *)*v34;
    if (v36 != v35)
    {
      do
      {
        v39 = *--v36;
        v38 = v39;
        *v36 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      while (v36 != v35);
      v37 = (_QWORD *)*v34;
    }
    *(_QWORD *)(a1 + 544) = v35;
    operator delete(v37);
    *v34 = 0;
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 552) = 0;
  }
  *(_OWORD *)v34 = *(_OWORD *)cf;
  *(CFTypeRef *)(a1 + 552) = cf[2];
  memset(cf, 0, sizeof(cf));
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 32) + 352));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 32) + 672));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v248, (dispatch_object_t)cf[0]);
  dispatch_set_target_queue(v248[0], (dispatch_queue_t)__p[0].__r_.__value_.__l.__data_);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v248);
  v40 = *a3;
  v41 = operator new();
  v42 = cf[0];
  *(CFTypeRef *)v227 = cf[0];
  if (cf[0])
    dispatch_retain((dispatch_object_t)cf[0]);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E698C538;
  buf[0].__r_.__value_.__l.__size_ = a2;
  buf[0].__r_.__value_.__r.__words[2] = a1;
  buf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  applesauce::iokit::io_service_notifications::io_service_notifications(v41, v40, (NSObject **)v227, "IOGeneralInterest", (uint64_t)buf);
  data = (std::string *)buf[1].__r_.__value_.__l.__data_;
  if ((std::string *)buf[1].__r_.__value_.__l.__data_ == buf)
  {
    v44 = 4;
    data = buf;
  }
  else
  {
    if (!buf[1].__r_.__value_.__r.__words[0])
      goto LABEL_87;
    v44 = 5;
  }
  (*(void (**)(void))(data->__r_.__value_.__r.__words[0] + 8 * v44))();
LABEL_87:
  if (v42)
    dispatch_release(v42);
  v45 = *v219;
  *v219 = v41;
  if (v45)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v45);
  v246[0] = &off_1E698C5C8;
  v246[1] = a1;
  v247 = v246;
  AMCP::Utility::Mach_Port::set_receive_handler(v221, (dispatch_queue_t *)cf, (uint64_t)v246);
  v46 = v247;
  if (v247 == v246)
  {
    v47 = 4;
    v46 = v246;
  }
  else
  {
    if (!v247)
      goto LABEL_96;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_96:
  v48 = (io_connect_t *)operator new();
  applesauce::iokit::io_connect_holder::io_connect_holder(v48, *(_DWORD *)(a1 + 360));
  v49 = *(io_connect_t **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v48;
  if (v49)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v49);
  v50 = (AMCP::Utility::Kernel_Error_Category *)MEMORY[0x1B5E4FAB8](*v48, 0, *v221, 0);
  v51 = v50;
  AMCP::Utility::Kernel_Error_Category::get(v50);
  if (v51)
  {
    AMCP::Log::Scope_Registry::get(v52);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v187 = *(NSObject **)buf[0].__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    {
      v188 = pthread_self();
      v189 = pthread_mach_thread_np(v188);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v189;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOAudio1_Device.cpp";
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 138;
      LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v187, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the notification port", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v239);
    v190 = v51;
    v191 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v253, v190, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error((std::runtime_error *)v227, &v253);
    *(_OWORD *)&v227[16] = v254;
    v230 = 0;
    v231 = 0;
    v232 = -1;
    *(_QWORD *)v227 = &off_1E69A12F8;
    v228 = &unk_1E69A1320;
    v229 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)v227);
    v243 = "AMCP::IOAudio1::Device::Device(Driver &, const IOKit::Service &, CF::Dictionary)";
    v244 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Device.cpp";
    v245 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)object);
    v224 = off_1E69A20A0;
    v225 = *(_OWORD *)object;
    v226 = v223;
    memset(object, 0, sizeof(object));
    v223 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v224);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v191, (uint64_t)buf);
  }
  v53 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)
                                                                                                 + 16));
  *(_DWORD *)(a1 + 32) = (_DWORD)v53;
  AMCP::Log::Scope_Registry::get(v53);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v253, "com.apple.coreaudio", "AMCP");
  what = (int)v253.what;
  switch(what)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
      v77 = *(NSObject **)buf[0].__r_.__value_.__l.__data_;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        v78 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
      {
        v80 = pthread_self();
        v81 = pthread_mach_thread_np(v80);
        if (!*v218)
        {
          v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v217, "Could not construct");
          __cxa_throw(v217, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v82 = v81;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v227, *v218);
        if (v227[23] >= 0)
          v83 = v227;
        else
          v83 = *(_BYTE **)v227;
        v84 = *(_DWORD *)(a1 + 32);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v82;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOAudio1_Device.cpp";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 385;
        LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v83;
        WORD1(buf[1].__r_.__value_.__r.__words[1]) = 1024;
        HIDWORD(buf[1].__r_.__value_.__r.__words[1]) = v84;
        v65 = v77;
        v66 = OS_LOG_TYPE_INFO;
        goto LABEL_134;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v67 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
      v68 = *(NSObject **)buf[0].__r_.__value_.__l.__data_;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        v69 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        v71 = pthread_self();
        v72 = pthread_mach_thread_np(v71);
        v73 = (const __CFString **)applesauce::CF::StringRef::operator->(v218);
        applesauce::CF::convert_to<std::string,0>((uint64_t)v227, *v73);
        if (v227[23] >= 0)
          v74 = v227;
        else
          v74 = *(_BYTE **)v227;
        v75 = *(_DWORD *)(a1 + 32);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v72;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOAudio1_Device.cpp";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 385;
        LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v74;
        WORD1(buf[1].__r_.__value_.__r.__words[1]) = 1024;
        HIDWORD(buf[1].__r_.__value_.__r.__words[1]) = v75;
        _os_log_debug_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Creating device '%s' with object id %u", (uint8_t *)buf, 0x28u);
LABEL_135:
        if ((v227[23] & 0x80000000) != 0)
          operator delete(*(void **)v227);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v56 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
      v57 = *(NSObject **)buf[0].__r_.__value_.__l.__data_;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        v58 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        v60 = pthread_self();
        v61 = pthread_mach_thread_np(v60);
        if (!*v218)
        {
          v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v216, "Could not construct");
          __cxa_throw(v216, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v62 = v61;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v227, *v218);
        if (v227[23] >= 0)
          v63 = v227;
        else
          v63 = *(_BYTE **)v227;
        v64 = *(_DWORD *)(a1 + 32);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v62;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOAudio1_Device.cpp";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 385;
        LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v63;
        WORD1(buf[1].__r_.__value_.__r.__words[1]) = 1024;
        HIDWORD(buf[1].__r_.__value_.__r.__words[1]) = v64;
        v65 = v57;
        v66 = OS_LOG_TYPE_DEFAULT;
LABEL_134:
        _os_log_impl(&dword_1B57BA000, v65, v66, "%6u %32s:%-5d Creating device '%s' with object id %u", (uint8_t *)buf, 0x28u);
        goto LABEL_135;
      }
      break;
  }
  v85 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v86 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  memset(v227, 0, sizeof(v227));
  LODWORD(v228) = 1065353216;
  LODWORD(v253.__vftable) = *(_DWORD *)(a1 + 32);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v253, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v88 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v89 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  LODWORD(v253.__vftable) = 1633969526;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v253, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v91 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v92 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  LODWORD(v253.__vftable) = 1633969526;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v253, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v94 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v95 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  LODWORD(v253.__vftable) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v253, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v97 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v98 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v224, "com.apple.iokit.IOAudio1");
  v253.__vftable = (std::runtime_error_vtbl *)0x676C6F626F706C67;
  LODWORD(v253.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v253, v224);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v100 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v101 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v224)
    CFRelease(v224);
  v103 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v103;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v253, 0, (__int128 *)buf, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v104 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v105 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  AMCP::IOAudio1::Device::get_resource_bundle_url((AMCP::IOAudio1::Device *)v241, a1);
  if (v241[0])
  {
    v253.__vftable = (std::runtime_error_vtbl *)0x676C6F6272737263;
    LODWORD(v253.__imp_.__imp_) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)buf, (uint64_t)&v253, v241[0]);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
    v107 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
    if (buf[0].__r_.__value_.__l.__size_)
    {
      v108 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  v253.__vftable = (std::runtime_error_vtbl *)0x676C6F6275696420;
  LODWORD(v253.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v253, *v218);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v110 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v111 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (!*v14)
  {
    v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v201, "Could not construct");
    __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v224, *v14, CFSTR("IOAudioDeviceModelID"));
  if ((_BYTE)v225)
    goto LABEL_195;
  if (!*(_QWORD *)v220)
  {
    v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v214, "Could not construct");
    __cxa_throw(v214, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(buf, *(CFDictionaryRef *)v220, CFSTR("IOAudioDeviceModelID"));
  if (v225 == buf[0].__r_.__value_.__s.__data_[8])
  {
    if ((_BYTE)v225)
    {
      v113 = v224;
      v224 = (CFTypeRef)buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
    }
  }
  else if ((_BYTE)v225)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&v224);
  }
  else
  {
    v224 = (CFTypeRef)buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0;
    LOBYTE(v225) = 1;
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if ((_BYTE)v225)
  {
LABEL_195:
    v253.__vftable = (std::runtime_error_vtbl *)0x676C6F626D756964;
    LODWORD(v253.__imp_.__imp_) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v253, v224);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
    v114 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
    if (buf[0].__r_.__value_.__l.__size_)
    {
      v115 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
  }
  if (!*v14)
  {
    v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v202, "Could not construct");
    __cxa_throw(v202, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(object, *v14, CFSTR("IOAudioDeviceTransportType"));
  if (LOBYTE(object[2]))
    goto LABEL_210;
  if (!*(_QWORD *)v220)
  {
    v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v215, "Could not construct");
    __cxa_throw(v215, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(buf, *(CFDictionaryRef *)v220, CFSTR("IOAudioDeviceTransportType"));
  if (LOBYTE(object[2]) == buf[0].__r_.__value_.__s.__data_[8])
  {
    if (LOBYTE(object[2]))
    {
      v117 = *(_QWORD *)object;
      *(_QWORD *)object = buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = v117;
    }
  }
  else if (LOBYTE(object[2]))
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)object);
  }
  else
  {
    *(_QWORD *)object = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0;
    LOBYTE(object[2]) = 1;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if (LOBYTE(object[2]))
  {
LABEL_210:
    if (!*(_QWORD *)object)
    {
      v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v205, "Could not construct");
      __cxa_throw(v205, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v118 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)object);
  }
  else
  {
    v118 = 0;
  }
  LODWORD(v253.__vftable) = v118;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v253, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(buf[0].__r_.__value_.__r.__words[0] + 40), buf);
  v119 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v120 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v239, 0, 1.5836601e190);
  v122 = v239;
  v123 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  v253.__vftable = (std::runtime_error_vtbl *)&off_1E698CCB0;
  v253.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v254 + 1) = &v253;
  memset(buf, 0, 40);
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v253);
  buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v122, v123, (AMCP *)buf);
  if (buf[1].__r_.__value_.__l.__size_)
    ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))buf[1].__r_.__value_.__l.__size_)(0, (uint64_t)buf, 0, 0);
  v124 = (std::runtime_error *)*((_QWORD *)&v254 + 1);
  if (*((std::runtime_error **)&v254 + 1) == &v253)
  {
    v125 = 4;
    v124 = &v253;
    goto LABEL_223;
  }
  if (*((_QWORD *)&v254 + 1))
  {
    v125 = 5;
LABEL_223:
    (*((void (**)(void))&v124->~runtime_error + v125))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>((uint64_t)v239);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)v239 + 10, &v239);
  v126 = v240;
  if (v240)
  {
    p_shared_owners = (unint64_t *)&v240->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  AMCP::IOAudio1::Device::update_core_common(a1, (uint64_t)v227);
  v129 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  buf[0].__r_.__value_.__l.__size_ = v129 | 0x6173747200000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v253, 0, (__int128 *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v130 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v131 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v133;
  *(_OWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 4) = xmmword_1B5D68B60;
  *(_OWORD *)((char *)buf[1].__r_.__value_.__r.__words + 4) = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v253, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v134 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v135 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v137;
  *(_OWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 4) = xmmword_1B5D68B60;
  *(_OWORD *)((char *)buf[1].__r_.__value_.__r.__words + 4) = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v253, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v138 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v139 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  buf[0].__r_.__value_.__l.__size_ = v141 | 0x6163746C00000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v253, 0, (__int128 *)buf, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v142 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v143 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v145;
  *(_OWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 4) = xmmword_1B5D68BE0;
  *(_OWORD *)((char *)buf[1].__r_.__value_.__r.__words + 4) = xmmword_1B5D68BF0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v253, 0, (uint64_t *)buf, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v146 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v147 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v149;
  *(_OWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 4) = xmmword_1B5D68BE0;
  *(_OWORD *)((char *)buf[1].__r_.__value_.__r.__words + 4) = xmmword_1B5D68C00;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v253, 0, (uint64_t *)buf, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v150 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v151 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = *(_DWORD *)(a1 + 32);
  buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16);
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = v153;
  *(_OWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 4) = xmmword_1B5D68BE0;
  *(_OWORD *)((char *)buf[1].__r_.__value_.__r.__words + 4) = xmmword_1B5D68C10;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v253, 0, (uint64_t *)buf, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)&v253.__vftable[1].what, &v253);
  v154 = (std::__shared_weak_count *)v253.__imp_.__imp_;
  if (v253.__imp_.__imp_)
  {
    v155 = (unint64_t *)(v253.__imp_.__imp_ + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (!*v14)
  {
    v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v203, "Could not construct");
    __cxa_throw(v203, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v239, *v14, CFSTR("IOAudioEngineDeviceDescription"));
  if ((_BYTE)v240)
  {
    v157 = v239;
    if (v239)
      CFRetain(v239);
    v241[1] = v157;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v237, 0, 1.58366007e190);
    v158 = v237;
    v159 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    if (v157)
    {
      CFRetain(v157);
      *((_QWORD *)&v254 + 1) = 0;
      v253.__vftable = (std::runtime_error_vtbl *)&off_1E698CFF0;
      CFRetain(v157);
    }
    else
    {
      *((_QWORD *)&v254 + 1) = 0;
      v253.__vftable = (std::runtime_error_vtbl *)&off_1E698CFF0;
    }
    v253.__imp_.__imp_ = (const char *)v157;
    *((_QWORD *)&v254 + 1) = &v253;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v253);
    buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v158, v159, (AMCP *)buf);
    if (buf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))buf[1].__r_.__value_.__l.__size_)(0, (uint64_t)buf, 0, 0);
    v160 = (std::runtime_error *)*((_QWORD *)&v254 + 1);
    if (*((std::runtime_error **)&v254 + 1) == &v253)
    {
      v161 = 4;
      v160 = &v253;
    }
    else
    {
      if (!*((_QWORD *)&v254 + 1))
      {
LABEL_278:
        if (v157)
          CFRelease(v157);
        AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(v237);
        if (v157)
          CFRelease(v157);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(v237 + 40), &v237);
        v162 = v238;
        if (v238)
        {
          v163 = (unint64_t *)&v238->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        goto LABEL_287;
      }
      v161 = 5;
    }
    (*((void (**)(void))&v160->~runtime_error + v161))();
    goto LABEL_278;
  }
LABEL_287:
  if (!*v14)
  {
    v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v204, "Could not construct");
    __cxa_throw(v204, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (applesauce::CF::details::has_key<__CFString const*>(*v14, CFSTR("IOAudioEngineClientDescription")))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v237, 0, 1.58366007e190);
    v165 = v237;
    v166 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    v253.__vftable = (std::runtime_error_vtbl *)&off_1E698D100;
    v253.__imp_.__imp_ = (const char *)a1;
    *((_QWORD *)&v254 + 1) = &v253;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v253);
    buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v165, v166, (AMCP *)buf);
    if (buf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))buf[1].__r_.__value_.__l.__size_)(0, (uint64_t)buf, 0, 0);
    v167 = (std::runtime_error *)*((_QWORD *)&v254 + 1);
    if (*((std::runtime_error **)&v254 + 1) == &v253)
    {
      v168 = 4;
      v167 = &v253;
    }
    else
    {
      if (!*((_QWORD *)&v254 + 1))
        goto LABEL_296;
      v168 = 5;
    }
    (*((void (**)(void))&v167->~runtime_error + v168))();
LABEL_296:
    AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(v237);
    v169 = v237;
    v170 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
    v253.__vftable = (std::runtime_error_vtbl *)&off_1E698D1F0;
    v253.__imp_.__imp_ = (const char *)a1;
    *((_QWORD *)&v254 + 1) = &v253;
    memset(buf, 0, 40);
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v253);
    buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v169, v170, (AMCP *)buf);
    if (buf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))buf[1].__r_.__value_.__l.__size_)(0, (uint64_t)buf, 0, 0);
    v171 = (std::runtime_error *)*((_QWORD *)&v254 + 1);
    if (*((std::runtime_error **)&v254 + 1) == &v253)
    {
      v172 = 4;
      v171 = &v253;
    }
    else
    {
      if (!*((_QWORD *)&v254 + 1))
      {
LABEL_303:
        AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(v237);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v227, (unsigned int *)(v237 + 40), &v237);
        v173 = v238;
        if (v238)
        {
          v174 = (unint64_t *)&v238->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        goto LABEL_308;
      }
      v172 = 5;
    }
    (*((void (**)(void))&v171->~runtime_error + v172))();
    goto LABEL_303;
  }
LABEL_308:
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)buf, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16), (uint64_t)v227, *(unsigned int *)(a1 + 32));
  v176 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v177 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v239);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)object);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v224);
  if (v241[0])
    CFRelease(v241[0]);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&v227[16]);
  v179 = *(void **)v227;
  *(_QWORD *)v227 = 0;
  if (v179)
    operator delete(v179);
  v180 = *(AMCP::IOAudio1::Stream ***)(a1 + 488);
  v181 = *(AMCP::IOAudio1::Stream ***)(a1 + 496);
  while (v180 != v181)
    AMCP::IOAudio1::Stream::build_core(*v180++);
  v182 = *(AMCP::IOAudio1::Stream ***)(a1 + 512);
  v183 = *(AMCP::IOAudio1::Stream ***)(a1 + 520);
  while (v182 != v183)
    AMCP::IOAudio1::Stream::build_core(*v182++);
  v184 = *(AMCP::IOAudio1::Control ***)(a1 + 536);
  v185 = *(AMCP::IOAudio1::Control ***)(a1 + 544);
  while (v184 != v185)
    AMCP::IOAudio1::Control::build_core(*v184++);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf);
  cf[0] = iterator;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
  cf[0] = &v235;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
  return a1;
}

void sub_1B5B3EC48()
{
  void *v0;
  uint64_t v1;

  __cxa_free_exception(v0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 136);
  JUMPOUT(0x1B5B3F360);
}

void sub_1B5B3ED88(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3ED90(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3ED98()
{
  JUMPOUT(0x1B5B3EEECLL);
}

void sub_1B5B3EDA4()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5B3EEECLL);
}

void sub_1B5B3EDE0()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5B3F350);
}

void sub_1B5B3EE00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  JUMPOUT(0x1B5B3F5A8);
}

void sub_1B5B3EE18()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5B3F5B0);
}

void sub_1B5B3EE3C(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,const void *a50)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}::~Address(&a50);
  JUMPOUT(0x1B5B3EEECLL);
}

void sub_1B5B3EE70(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EE80(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EE88(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EE90(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EE98(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EEA0(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EEA8(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3EEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  JUMPOUT(0x1B5B3F348);
}

void sub_1B5B3EEC0()
{
  JUMPOUT(0x1B5B3F348);
}

void sub_1B5B3EEC8()
{
  applesauce::iokit::io_object_holder::~io_object_holder((applesauce::iokit::io_object_holder *)&STACK[0x300]);
  JUMPOUT(0x1B5B3F3D4);
}

void sub_1B5B3EED0()
{
  JUMPOUT(0x1B5B3F3DCLL);
}

void sub_1B5B3EED8()
{
  JUMPOUT(0x1B5B3F5A0);
}

void sub_1B5B3EEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a47);
  JUMPOUT(0x1B5B3F340);
}

void sub_1B5B3EEF8()
{
  uint64_t v0;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v0 - 136);
  JUMPOUT(0x1B5B3F340);
}

void sub_1B5B3EF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  JUMPOUT(0x1B5B3F350);
}

void sub_1B5B3EF78()
{
  JUMPOUT(0x1B5B3F350);
}

void sub_1B5B3EF80()
{
  uint64_t v0;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v0 - 136);
  JUMPOUT(0x1B5B3F358);
}

void sub_1B5B3EFE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,NSObject **buf,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,int a57,__int16 a58,__int16 a59)
{
  uint64_t v59;
  uint64_t v60;
  AMCP::Log::Scope_Registry *v63;
  AMCP::Log::Scope_Registry *v64;
  NSObject *v65;
  _opaque_pthread_t *v66;
  mach_port_t v67;
  uint64_t v68;
  NSObject *v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;

  if (a2)
  {
    MEMORY[0x1B5E50688](v60, 0x1000C4052888210);
    v63 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v64 = v63;
      AMCP::Log::Scope_Registry::get(v63);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v65 = *buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        v66 = pthread_self();
        v67 = pthread_mach_thread_np(v66);
        v68 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v64 + 16))(v64);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v67;
        a52 = 2080;
        *(_QWORD *)(v59 + 82) = "IOAudio1_Device.cpp";
        a56 = 1024;
        a57 = 129;
        a58 = 2080;
        *(_QWORD *)(v59 + 98) = v68;
        _os_log_error_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver's engine: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v63);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v69 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      v70 = pthread_self();
      v71 = pthread_mach_thread_np(v70);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v71;
      a52 = 2080;
      *(_QWORD *)(v59 + 82) = "IOAudio1_Device.cpp";
      a56 = 1024;
      a57 = 134;
      _os_log_error_impl(&dword_1B57BA000, v69, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver's engine", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3F194()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5B3F4ECLL);
}

void sub_1B5B3F1BC(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3F1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char *a64;
  char *v64;
  char *v65;
  uint64_t v66;

  v65 = a64;
  if (a64 == v64)
  {
    v66 = 4;
    v65 = &a61;
  }
  else
  {
    if (!a64)
      goto LABEL_6;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_6:
  JUMPOUT(0x1B5B3F360);
}

void sub_1B5B3F1F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char *a54)
{
  char *v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  uint64_t v58;

  v57 = a54;
  if (a54 == v54)
  {
    v58 = 4;
    v57 = &a51;
  }
  else
  {
    if (!a54)
      goto LABEL_6;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_6:
  if (v56)
    dispatch_release(v56);
  MEMORY[0x1B5E50688](v55, 0x1020C40DCC910D7);
  JUMPOUT(0x1B5B3F4ECLL);
}

void sub_1B5B3F258()
{
  JUMPOUT(0x1B5B3F360);
}

void sub_1B5B3F260()
{
  JUMPOUT(0x1B5B3F4FCLL);
}

void sub_1B5B3F26C()
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  JUMPOUT(0x1B5B3F50CLL);
}

void sub_1B5B3F2AC()
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  JUMPOUT(0x1B5B3F51CLL);
}

void sub_1B5B3F2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,io_object_t a51)
{
  applesauce::iokit::io_object_holder::~io_object_holder(&a51);
  JUMPOUT(0x1B5B3F2F4);
}

void sub_1B5B3F300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  AMCP::IOKit::Service_Parent_Range_For::~Service_Parent_Range_For((AMCP::IOKit::Service_Parent_Range_For *)&STACK[0x440]);
  STACK[0x300] = v50 - 136;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  if (a50 < 0)
    operator delete(a45);
  if (a30 < 0)
    operator delete(a25);
  JUMPOUT(0x1B5B3F564);
}

void sub_1B5B3F308()
{
  JUMPOUT(0x1B5B3F3FCLL);
}

void sub_1B5B3F310()
{
  JUMPOUT(0x1B5B3F40CLL);
}

void sub_1B5B3F318()
{
  JUMPOUT(0x1B5B3F574);
}

void sub_1B5B3F320()
{
  JUMPOUT(0x1B5B3F5B0);
}

void sub_1B5B3F328()
{
  JUMPOUT(0x1B5B3F5A8);
}

void sub_1B5B3F33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49)
{
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a21);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a25);
  applesauce::CF::URLRef::~URLRef(&a49);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a29);
  JUMPOUT(0x1B5B3F4ECLL);
}

void sub_1B5B3F368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,io_object_t a51)
{
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)(v52 - 128) = v51;
  applesauce::iokit::io_object_holder::~io_object_holder(&a51);
  applesauce::iokit::details::io_services_iterator::~io_services_iterator((applesauce::iokit::details::io_services_iterator *)&STACK[0x300]);
  applesauce::iokit::details::io_services_iterator::~io_services_iterator((applesauce::iokit::details::io_services_iterator *)&a39);
  JUMPOUT(0x1B5B3F3D4);
}

void sub_1B5B3F378()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1B5B3F3C4);
}

void sub_1B5B3F390(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3F3A4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5B3F3A8);
  JUMPOUT(0x1B5B3F5BCLL);
}

void sub_1B5B3F3B0()
{
  JUMPOUT(0x1B5B3F3C4);
}

void sub_1B5B3F414(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,std::runtime_error a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  int v54;
  void *v55;
  uint64_t v56;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  a53 = &unk_1E69A2000;
  if (a54 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a54 + 32))(a54))
    a54 = 0;
  std::runtime_error::~runtime_error(&a50);
  a32 = &unk_1E69A2000;
  if (a33 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a33 + 32))(a33))
    a33 = 0;
  std::runtime_error::~runtime_error(&a29);
  std::runtime_error::~runtime_error((std::runtime_error *)(v56 - 136));
  if (v54)
    __cxa_free_exception(v55);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a46);
  JUMPOUT(0x1B5B3F4ECLL);
}

void sub_1B5B3F4C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B3F4C8);
  __clang_call_terminate(a1);
}

void sub_1B5B3F4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, io_object_t *a10, AMCP::Utility::Dispatch_Queue *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, const void **a16, uint64_t a17, uint64_t a18, uint64_t a19, AMCP::Utility::Mach_Port *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  _QWORD *v42;
  unint64_t v43;
  const void **v44;
  const void **v45;
  unint64_t v46;
  io_object_t *v47;
  std::__shared_weak_count *v49;
  io_connect_t *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x300]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a39;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a42;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  v49 = (std::__shared_weak_count *)v42[71];
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  STACK[0x440] = v43;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a14;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = v46;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  applesauce::CF::DictionaryRef::~DictionaryRef(a16);
  applesauce::iokit::io_object_holder::~io_object_holder(a10);
  applesauce::CF::DictionaryRef::~DictionaryRef(v44);
  AMCP::Utility::Mach_Port::~Mach_Port(a20);
  v50 = (io_connect_t *)v42[47];
  v42[47] = 0;
  if (v50)
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v50);
  v51 = *a15;
  *a15 = 0;
  if (v51)
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v51);
  applesauce::iokit::io_object_holder::~io_object_holder(v47);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a11);
  applesauce::CF::StringRef::~StringRef(v45);
  v52 = (std::__shared_weak_count *)v42[1];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_(uint64_t a1, uint64_t object, uint64_t a3, const char **a4)
{
  uint64_t v8;
  std::string *p_p;
  mach_error_t v10;
  io_object_t v11;
  uint64_t v12;
  io_object_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  _DWORD *v17;
  io_object_t v18;
  uint64_t result;
  std::logic_error *v20;
  void *v21;
  const std::error_category *v22;
  mach_error_t v23;
  void *v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  uint64_t v28;
  void *exception;
  const std::error_category *v30;
  void *v31;
  const std::error_category *v32;
  io_iterator_t iterator;
  io_object_t objecta;
  std::string v35;
  int v36;
  io_object_t v37;
  std::string __p;
  std::string v39;
  std::string v40;
  io_object_t v41;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v36 = object;
  if ((_DWORD)object)
  {
    v8 = IOObjectRetain(object);
    if ((_DWORD)v8)
    {
      v28 = v8;
      exception = __cxa_allocate_exception(0x20uLL);
      v30 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v28, v30, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v35 = *(std::string *)a3;
  v36 = 0;
  v37 = object;
  __p = v35;
  memset(&v35, 0, sizeof(v35));
  v41 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v10 = MEMORY[0x1B5E4FBE4](object, p_p, &v41);
  if (v10)
  {
    v23 = v10;
    v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v39, "Could not find any parents for plane ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v39, (const std::string::value_type *)v25, size);
    v40 = *v27;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    applesauce::iokit::kern_return_exception::kern_return_exception((uint64_t)v24, (const void **)&v40.__r_.__value_.__l.__data_, v23);
  }
  v11 = v41;
  LODWORD(v40.__r_.__value_.__l.__data_) = v41;
  LODWORD(v39.__r_.__value_.__l.__data_) = v41;
  if (v41)
  {
    v12 = IOObjectRetain(v41);
    if ((_DWORD)v12)
    {
      v31 = __cxa_allocate_exception(0x20uLL);
      v32 = std::system_category();
      MEMORY[0x1B5E5022C](v31, v12, v32, "Error on Retain");
      __cxa_throw(v31, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  applesauce::iokit::details::io_services_iterator::io_services_iterator(&iterator, v11);
  if (v11)
  {
    IOObjectRelease(v11);
    IOObjectRelease(v11);
  }
  v40.__r_.__value_.__r.__words[0] = 0;
LABEL_15:
  v13 = objecta;
  while (v13)
  {
    LODWORD(v39.__r_.__value_.__l.__data_) = v13;
    v14 = IOObjectRetain(v13);
    if ((_DWORD)v14)
    {
      v21 = __cxa_allocate_exception(0x20uLL);
      v22 = std::system_category();
      MEMORY[0x1B5E5022C](v21, v14, v22, "Error on Retain");
      __cxa_throw(v21, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    v15 = *a4;
    if ((*a4)[23] < 0)
      v15 = *(const char **)v15;
    if (IOObjectConformsTo(v13, v15))
    {
      v16 = *(_QWORD *)(a1 + 8);
      if (v16 >= *(_QWORD *)(a1 + 16))
      {
        v17 = std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>((char **)a1, v13);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(*(_DWORD **)(a1 + 8), v13);
        v17 = (_DWORD *)(v16 + 4);
        *(_QWORD *)(a1 + 8) = v16 + 4;
      }
      *(_QWORD *)(a1 + 8) = v17;
    }
    IOObjectRelease(v13);
    if (!objecta)
    {
      v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v20, "io_services_iterator exceeding size");
      v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(v20, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
    }
    v13 = IOIteratorNext(iterator);
    v18 = objecta;
    objecta = v13;
    if (v18)
    {
      IOObjectRelease(v18);
      goto LABEL_15;
    }
  }
  if (iterator)
    IOObjectRelease(iterator);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = v37;
  if (v37)
    return IOObjectRelease(v37);
  return result;
}

void sub_1B5B3F998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16, __int16 a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      AMCP::IOKit::Service_Child_Range_For::~Service_Child_Range_For(&a18);
      *(_QWORD *)(v30 - 64) = v27;
      std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(uint64_t result)
{
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

uint64_t AMCP::IOAudio1::Device::get_resource_bundle_url(AMCP::IOAudio1::Device *this, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v5;
  CFStringRef v6;
  CFURLRef v7;
  std::runtime_error *exception;
  CFStringRef filePath;
  char v11;
  CFStringRef v12;
  char v13;

  v3 = *(const __CFDictionary **)(a2 + 464);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_12;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v12, v3, CFSTR("IOAudioDeviceLocalizedBundle"));
  if (v13)
    goto LABEL_6;
  v5 = *(const __CFDictionary **)(a2 + 480);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_12:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&filePath, v5, CFSTR("IOAudioDeviceLocalizedBundle"));
  if (!v11)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&filePath);
    *(_QWORD *)this = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
  }
  v12 = filePath;
  filePath = 0;
  v13 = 1;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&filePath);
LABEL_6:
  v6 = CFStringCreateWithFormat(0, 0, CFSTR("/System/Library/Extensions/%@"), v12);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&filePath, v6);
  v7 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
  applesauce::CF::URLRef::URLRef(this, v7);
  if (filePath)
    CFRelease(filePath);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
}

void sub_1B5B3FD10(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
}

uint64_t AMCP::IOAudio1::Device::update_core_common(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  CFTypeRef v6;
  AMCP::Log::Scope_Registry *v7;
  CFDictionaryRef *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const __CFDictionary *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFDictionary *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  const void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int16 BOOL_from;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const __CFDictionary *v32;
  const __CFNumber *v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const __CFNumber *v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const __CFString *v55;
  double sample_rate_from_dictionary;
  uint64_t v57;
  unint64_t v58;
  std::vector<char>::value_type *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::vector<char>::value_type *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  CFArrayRef v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  const __CFArray *v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  void *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  CFArrayRef v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  const __CFArray *v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::vector<char>::value_type v155;
  unsigned __int16 v156;
  BOOL v157;
  char v158;
  unsigned __int16 v159;
  BOOL v160;
  char v161;
  CFTypeRef v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  CFTypeRef v169;
  unint64_t v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  __int128 v178;
  uint64_t *p_valuePtr;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  NSObject *v197;
  _opaque_pthread_t *v198;
  mach_port_t v199;
  std::runtime_error *v200;
  std::runtime_error *v201;
  std::runtime_error *v202;
  std::runtime_error *v203;
  std::runtime_error *v204;
  std::runtime_error *v205;
  std::runtime_error *v206;
  std::runtime_error *v207;
  std::runtime_error *v208;
  std::runtime_error *v209;
  std::runtime_error *v210;
  std::logic_error *v211;
  std::logic_error *v212;
  std::runtime_error *v213;
  std::runtime_error *v214;
  std::runtime_error *v215;
  std::logic_error *v216;
  std::logic_error *v217;
  std::runtime_error *exception;
  std::runtime_error *v219;
  std::runtime_error *v220;
  std::runtime_error *v221;
  std::runtime_error *v222;
  std::runtime_error *v223;
  std::runtime_error *v224;
  std::runtime_error *v225;
  std::runtime_error *v226;
  std::runtime_error *v227;
  void *v228;
  const std::error_category *v229;
  std::runtime_error *v230;
  std::runtime_error *v231;
  void *v232;
  const std::error_category *v233;
  std::runtime_error *v234;
  std::runtime_error *v235;
  std::runtime_error *v236;
  std::runtime_error *v237;
  std::runtime_error *v238;
  std::runtime_error *v239;
  std::runtime_error *v240;
  std::runtime_error *v241;
  std::runtime_error *v242;
  std::runtime_error *v243;
  std::runtime_error *v244;
  std::runtime_error *v245;
  std::runtime_error *v246;
  std::runtime_error *v247;
  std::runtime_error *v248;
  std::runtime_error *v249;
  std::vector<char>::value_type v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  io_connect_t connect;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  int v271;
  __int128 v272;
  CFDictionaryRef *v273;
  __int128 v274;
  int v275;
  int v276;
  __int128 v277;
  CFTypeRef v278;
  std::__shared_weak_count *v279;
  CFTypeRef v280;
  unint64_t v281;
  char *v282;
  void *v283;
  unint64_t v284;
  char *v285;
  CFTypeRef v286;
  AMCP::IOAudio1 *v287;
  char v288;
  const __CFNumber *v289;
  char v290;
  const __CFNumber *v291;
  unsigned __int8 v292;
  const __CFNumber *v293;
  char v294;
  const __CFNumber *v295;
  char v296;
  const __CFNumber *v297;
  unsigned __int8 v298;
  const __CFBoolean *v299;
  char v300;
  CFTypeRef cf;
  unsigned __int8 v302;
  CFTypeRef v303;
  unsigned __int8 v304;
  CFTypeRef v305;
  unsigned __int8 v306;
  int v307;
  _BYTE v308[40];
  __int128 v309;
  _BYTE v310[28];
  __int128 v311;
  uint64_t v312;
  void *__p[2];
  uint64_t v314;
  uint64_t valuePtr;
  std::__shared_weak_count *v316;
  CFTypeRef *v317;
  std::vector<char>::value_type __x[16];
  __int128 v319;
  void (*v320)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t v321;

  v321 = *MEMORY[0x1E0C80C00];
  v3 = *(const __CFDictionary **)(a1 + 464);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = a1;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v305, v3, CFSTR("IOAudioEngineDescription"));
  if (!v306)
  {
    v5 = *(const __CFDictionary **)(v4 + 480);
    if (!v5)
    {
      v240 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v240, "Could not construct");
      __cxa_throw(v240, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v308, v5, CFSTR("IOAudioDeviceName"));
    if (v306 == v308[8])
    {
      if (v306)
      {
        v6 = v305;
        v305 = *(CFTypeRef *)v308;
        *(_QWORD *)v308 = v6;
      }
    }
    else if (v306)
    {
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&v305);
    }
    else
    {
      v305 = *(CFTypeRef *)v308;
      *(_QWORD *)v308 = 0;
      v306 = 1;
    }
    v7 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v308);
    if (!v306)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v308, "com.apple.coreaudio", "AMCP");
      v197 = **(NSObject ***)v308;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v308);
      if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
      {
        v198 = pthread_self();
        v199 = pthread_mach_thread_np(v198);
        *(_DWORD *)v308 = 67109890;
        *(_DWORD *)&v308[4] = v199;
        *(_WORD *)&v308[8] = 2080;
        *(_QWORD *)&v308[10] = "IOAudio1_Device.cpp";
        *(_WORD *)&v308[18] = 1024;
        *(_DWORD *)&v308[20] = 170;
        *(_WORD *)&v308[24] = 2080;
        *(_QWORD *)&v308[26] = "device_name_opt.operator BOOL() == true";
        _os_log_error_impl(&dword_1B57BA000, v197, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Devices have to have a name", v308, 0x22u);
      }
      abort();
    }
  }
  strcpy(__x, "manlbolg");
  __x[9] = 0;
  *(_WORD *)&__x[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v308, (uint64_t)__x, v305);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v8 = (CFDictionaryRef *)(v4 + 464);
  v9 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!*v8)
  {
    v219 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v219, "Could not construct");
    __cxa_throw(v219, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v303, *v8, CFSTR("IOAudioDeviceManufacturerName"));
  if (v304)
    goto LABEL_26;
  v12 = *(const __CFDictionary **)(v4 + 480);
  if (!v12)
  {
    v241 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v241, "Could not construct");
    __cxa_throw(v241, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v308, v12, CFSTR("IOAudioDeviceManufacturerName"));
  if (v304 == v308[8])
  {
    if (v304)
    {
      v13 = v303;
      v303 = *(CFTypeRef *)v308;
      *(_QWORD *)v308 = v13;
    }
  }
  else if (v304)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&v303);
  }
  else
  {
    v303 = *(CFTypeRef *)v308;
    *(_QWORD *)v308 = 0;
    v304 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v308);
  if (v304)
  {
LABEL_26:
    strcpy(__x, "kamlbolg");
    __x[9] = 0;
    *(_WORD *)&__x[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v308, (uint64_t)__x, v303);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
    v14 = *(std::__shared_weak_count **)&v308[8];
    if (*(_QWORD *)&v308[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (!*v8)
  {
    v220 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v220, "Could not construct");
    __cxa_throw(v220, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, *v8, CFSTR("IOAudioDeviceConfigurationApplication"));
  if (v302)
    goto LABEL_41;
  v17 = *(const __CFDictionary **)(v4 + 480);
  if (!v17)
  {
    v242 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v242, "Could not construct");
    __cxa_throw(v242, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v308, v17, CFSTR("IOAudioDeviceConfigurationApplication"));
  if (v302 == v308[8])
  {
    if (v302)
    {
      v18 = cf;
      cf = *(CFTypeRef *)v308;
      *(_QWORD *)v308 = v18;
    }
  }
  else if (v302)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&cf);
  }
  else
  {
    cf = *(CFTypeRef *)v308;
    *(_QWORD *)v308 = 0;
    v302 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v308);
  if (v302)
  {
LABEL_41:
    v19 = cf;
    if (cf)
      CFRetain(cf);
    valuePtr = (uint64_t)v19;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "com.apple.audio.AudioMIDISetup");
    v19 = (CFTypeRef)valuePtr;
  }
  strcpy(__x, "ppacbolg");
  __x[9] = 0;
  *(_WORD *)&__x[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v308, (uint64_t)__x, v19);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v20 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (valuePtr)
    CFRelease((CFTypeRef)valuePtr);
  if (!*v8)
  {
    v221 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v221, "Could not construct");
    __cxa_throw(v221, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v299, *v8, CFSTR("IOAudioEngineIsHidden"));
  if (v300)
  {
    if (!v299)
    {
      v236 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v236, "Could not construct");
      __cxa_throw(v236, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v23 = applesauce::CF::convert_to<BOOL,0>(v299);
  }
  else
  {
    if (!*v8)
    {
      v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v243, "Could not construct");
      __cxa_throw(v243, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    LODWORD(valuePtr) = 0;
    *(_QWORD *)__x = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!*(_QWORD *)__x)
    {
      v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v244, "Could not construct");
      __cxa_throw(v244, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v308, *v8, CFSTR("IOAudioEngineIsHidden"), __x);
    v24 = *(const void **)v308;
    if (!*(_QWORD *)v308)
    {
      v245 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v245, "Could not construct");
      __cxa_throw(v245, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v23 = applesauce::CF::convert_to<BOOL,0>(*(const __CFNumber **)v308);
    CFRelease(v24);
    if (*(_QWORD *)__x)
      CFRelease(*(CFTypeRef *)__x);
  }
  __x[0] = v23;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v308, 0, __x, 1.58366008e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v25 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v26 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)v308 = CFSTR("DisplayRouting");
  BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(v4 + 464), (const void **)v308);
  if (BOOL_from > 0xFFu
    || (*(_QWORD *)v308 = CFSTR("DisplayRouting"),
        BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(v4 + 480), (const void **)v308), BOOL_from >= 0x100u))
  {
    __x[0] = BOOL_from;
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v308, 0, __x, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
    v29 = *(std::__shared_weak_count **)&v308[8];
    if (*(_QWORD *)&v308[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (!*v8)
  {
    v222 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v222, "Could not construct");
    __cxa_throw(v222, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v297, *v8, CFSTR("IOAudioEngineClockDomain"));
  if (v298)
    goto LABEL_83;
  v32 = *(const __CFDictionary **)(v4 + 480);
  if (!v32)
  {
    v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v246, "Could not construct");
    __cxa_throw(v246, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(v308, v32, CFSTR("IOAudioEngineClockDomain"));
  if (v298 == v308[8])
  {
    if (v298)
    {
      v33 = v297;
      v297 = *(const __CFNumber **)v308;
      *(_QWORD *)v308 = v33;
    }
  }
  else if (v298)
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v297);
  }
  else
  {
    v297 = *(const __CFNumber **)v308;
    *(_QWORD *)v308 = 0;
    v298 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v308);
  if (v298)
  {
LABEL_83:
    if (!v297)
    {
      v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v234, "Could not construct");
      __cxa_throw(v234, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v34 = applesauce::CF::convert_to<unsigned int,0>(v297);
  }
  else
  {
    v34 = 0;
  }
  *(_DWORD *)__x = v34;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v308, 0, (int *)__x, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v35 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (!*v8)
  {
    v223 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v223, "Could not construct");
    __cxa_throw(v223, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v295, *v8, CFSTR("IOAudioEngineInputSampleLatency"));
  if (v296)
  {
    if (!v295)
    {
      v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v237, "Could not construct");
      __cxa_throw(v237, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v38 = applesauce::CF::convert_to<unsigned int,0>(v295);
  }
  else
  {
    v38 = 0;
  }
  *(_DWORD *)__x = v38;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v308, 0, (int *)__x, 7.28117498e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v39 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (!*v8)
  {
    v224 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v224, "Could not construct");
    __cxa_throw(v224, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v293, *v8, CFSTR("IOAudioEngineOutputSampleLatency"));
  if (v294)
  {
    if (!v293)
    {
      v238 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v238, "Could not construct");
      __cxa_throw(v238, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v42 = applesauce::CF::convert_to<unsigned int,0>(v293);
  }
  else
  {
    v42 = 0;
  }
  *(_DWORD *)__x = v42;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v308, 0, (int *)__x, 8.13208691e228);
  v256 = v42;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v43 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v44 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (!*v8)
  {
    v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v225, "Could not construct");
    __cxa_throw(v225, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v291, *v8, CFSTR("IOAudioEngineInputSampleOffset"));
  if (v292)
    goto LABEL_121;
  if (!*v8)
  {
    v247 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v247, "Could not construct");
    __cxa_throw(v247, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(v308, *v8, CFSTR("IOAudioEngineSampleOffset"));
  if (v292 == v308[8])
  {
    if (v292)
    {
      v46 = v291;
      v291 = *(const __CFNumber **)v308;
      *(_QWORD *)v308 = v46;
    }
  }
  else if (v292)
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v291);
  }
  else
  {
    v291 = *(const __CFNumber **)v308;
    *(_QWORD *)v308 = 0;
    v292 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v308);
  if (v292)
  {
LABEL_121:
    if (!v291)
    {
      v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v235, "Could not construct");
      __cxa_throw(v235, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v47 = applesauce::CF::convert_to<unsigned int,0>(v291);
  }
  else
  {
    v47 = 0;
  }
  *(_DWORD *)__x = v47;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v308, 0, (int *)__x, 7.28117508e199);
  v255 = v47;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v48 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (!*v8)
  {
    v226 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v226, "Could not construct");
    __cxa_throw(v226, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v289, *v8, CFSTR("IOAudioEngineSampleOffset"));
  if (v290)
  {
    if (!v289)
    {
      v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v239, "Could not construct");
      __cxa_throw(v239, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v51 = applesauce::CF::convert_to<unsigned int,0>(v289);
  }
  else
  {
    v51 = 0;
  }
  *(_DWORD *)__x = v51;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v308, 0, (int *)__x, 8.13208706e228);
  v254 = v51;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v52 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (!*v8)
  {
    v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v227, "Could not construct");
    __cxa_throw(v227, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v287, *v8, CFSTR("IOAudioSampleRate"));
  if (v288)
    sample_rate_from_dictionary = AMCP::IOAudio1::make_sample_rate_from_dictionary(v287, 0, v55);
  else
    sample_rate_from_dictionary = 44100.0;
  v252 = v38;
  v253 = v34;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&valuePtr, 0, 1.5836601e190);
  v57 = valuePtr;
  v58 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(_QWORD *)__x = &off_1E698C648;
  *(double *)&__x[8] = sample_rate_from_dictionary;
  *((_QWORD *)&v319 + 1) = __x;
  memset(v308, 0, sizeof(v308));
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v308, (uint64_t)__x);
  *(_QWORD *)&v308[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v57, v58, (AMCP *)v308);
  if (*(_QWORD *)&v308[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v308[32])(0, (uint64_t)v308, 0, 0);
  v59 = (std::vector<char>::value_type *)*((_QWORD *)&v319 + 1);
  if (*((std::vector<char>::value_type **)&v319 + 1) == __x)
  {
    v60 = 4;
    v59 = __x;
  }
  else
  {
    if (!*((_QWORD *)&v319 + 1))
      goto LABEL_149;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_149:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(valuePtr);
  v61 = valuePtr;
  v62 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(_QWORD *)__x = &off_1E698C7C8;
  *(_QWORD *)&__x[8] = v4;
  *((_QWORD *)&v319 + 1) = __x;
  memset(v308, 0, sizeof(v308));
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v308, (uint64_t)__x);
  *(_QWORD *)&v308[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v61, v62, (AMCP *)v308);
  if (*(_QWORD *)&v308[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v308[32])(0, (uint64_t)v308, 0, 0);
  v63 = (std::vector<char>::value_type *)*((_QWORD *)&v319 + 1);
  if (*((std::vector<char>::value_type **)&v319 + 1) == __x)
  {
    v64 = 4;
    v63 = __x;
    goto LABEL_155;
  }
  if (*((_QWORD *)&v319 + 1))
  {
    v64 = 5;
LABEL_155:
    (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(valuePtr);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(valuePtr + 40), &valuePtr);
  v65 = v316;
  if (v316)
  {
    p_shared_owners = (unint64_t *)&v316->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  connect = **(_DWORD **)(v4 + 376);
  v68 = IOConnectAddRef(connect);
  if ((_DWORD)v68)
  {
    v228 = __cxa_allocate_exception(0x20uLL);
    v229 = std::system_category();
    MEMORY[0x1B5E5022C](v228, v68, v229, "Error on IOConnectAddRef");
    __cxa_throw(v228, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v69 = *(const void **)(v4 + 24);
  if (v69)
    CFRetain(*(CFTypeRef *)(v4 + 24));
  v286 = v69;
  if (!*v8)
  {
    v230 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v230, "Could not construct");
    __cxa_throw(v230, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v308, *v8, CFSTR("IOAudioEngineNumSampleFramesPerBuffer"));
  if (!*(_QWORD *)v308)
  {
    v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v231, "Could not construct");
    __cxa_throw(v231, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v251 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v308);
  if (*(_QWORD *)v308)
    CFRelease(*(CFTypeRef *)v308);
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v70 = *(_QWORD *)(v4 + 488);
  v71 = *(_QWORD *)(v4 + 496);
  v257 = v4;
  v258 = a2;
  v273 = (CFDictionaryRef *)(v4 + 464);
  if (v70 == v71)
  {
    v250 = 0;
  }
  else
  {
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(&v283, (v71 - v70) >> 3);
    v72 = v4;
    v73 = *(_QWORD *)(v4 + 488);
    v74 = *(_QWORD *)(v72 + 496);
    if (v73 == v74)
      goto LABEL_229;
    LODWORD(v75) = 0;
    v77 = v284;
    v76 = v285;
    v78 = v283;
    v260 = *(_QWORD *)(v72 + 496);
    do
    {
      AMCP::IOAudio1::Device_Sub_Object::get_registry_entries((AMCP::IOAudio1::Device_Sub_Object *)__x, *(_DWORD *)(*(_QWORD *)v73 + 20));
      if (!*(_QWORD *)__x)
      {
        v284 = v77;
        v285 = v76;
        v283 = v78;
        v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v200, "Could not construct");
        __cxa_throw(v200, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v308, *(CFDictionaryRef *)__x, CFSTR("IOAudioStreamStartingChannelNumber"));
      if (!*(_QWORD *)v308)
      {
        v284 = v77;
        v285 = v76;
        v283 = v78;
        v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v201, "Could not construct");
        __cxa_throw(v201, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v79 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      if (!*(_QWORD *)__x)
      {
        v284 = v77;
        v285 = v76;
        v283 = v78;
        v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v202, "Could not construct");
        __cxa_throw(v202, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v308, *(CFDictionaryRef *)__x, CFSTR("IOAudioStreamID"));
      if (!*(_QWORD *)v308)
      {
        v284 = v77;
        v285 = v76;
        v283 = v78;
        v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v203, "Could not construct");
        __cxa_throw(v203, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v80 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      v270 = v79;
      AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v308, v8, *(CFDictionaryRef *)__x);
      v81 = *(_DWORD *)&v308[8];
      v82 = *(_DWORD *)&v308[12];
      v83 = *(_DWORD *)&v308[16];
      v84 = *(_DWORD *)&v308[20];
      v85 = *(_DWORD *)&v308[24];
      v275 = *(_DWORD *)&v308[28];
      v86 = *(_DWORD *)&v308[32];
      v87 = v76;
      if (*(_DWORD *)&v308[8] == 1819304813 && (v308[12] & 0x40) == 0)
      {
        v83 = 4 * *(_DWORD *)&v308[28];
        v86 = 32;
        v84 = 1;
        v82 = 9;
        v85 = 4 * *(_DWORD *)&v308[28];
      }
      v88 = *(_QWORD *)v308;
      v89 = *(_DWORD *)&v308[36];
      if (v77 >= (unint64_t)v76)
      {
        v262 = *(_DWORD *)&v308[36];
        v264 = v85;
        v91 = *(_DWORD *)&v308[8];
        v266 = v86;
        v268 = v75;
        v92 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v77 - (_QWORD)v78) >> 3) + 1;
        if (v92 > 0x492492492492492)
        {
          v284 = v77;
          v285 = v87;
          v283 = v78;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        v93 = 0x6DB6DB6DB6DB6DB7 * ((v87 - (_BYTE *)v78) >> 3);
        if (2 * v93 > v92)
          v92 = 2 * v93;
        if (v93 >= 0x249249249249249)
          v94 = 0x492492492492492;
        else
          v94 = v92;
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v94);
        v97 = &v95[8 * ((uint64_t)(v77 - (_QWORD)v78) >> 3)];
        *(_DWORD *)v97 = v270;
        *((_DWORD *)v97 + 1) = v80;
        *((_DWORD *)v97 + 2) = 0;
        *((_QWORD *)v97 + 2) = v88;
        *((_DWORD *)v97 + 6) = v91;
        *((_DWORD *)v97 + 7) = v82;
        *((_DWORD *)v97 + 8) = v83;
        *((_DWORD *)v97 + 9) = v84;
        v90 = v275;
        *((_DWORD *)v97 + 10) = v264;
        *((_DWORD *)v97 + 11) = v275;
        *((_DWORD *)v97 + 12) = v266;
        *((_DWORD *)v97 + 13) = v262;
        if ((void *)v77 == v78)
        {
          v75 = (unint64_t)&v95[8 * ((uint64_t)(v77 - (_QWORD)v78) >> 3)];
          v8 = v273;
        }
        else
        {
          v98 = &v95[8 * ((uint64_t)(v77 - (_QWORD)v78) >> 3)];
          v8 = v273;
          do
          {
            v99 = *(_OWORD *)(v77 - 56);
            v100 = *(_OWORD *)(v77 - 40);
            v101 = *(_OWORD *)(v77 - 24);
            v75 = (unint64_t)(v98 - 56);
            *((_QWORD *)v98 - 1) = *(_QWORD *)(v77 - 8);
            *(_OWORD *)(v98 - 24) = v101;
            *(_OWORD *)(v98 - 40) = v100;
            *(_OWORD *)(v98 - 56) = v99;
            v77 -= 56;
            v98 -= 56;
          }
          while ((void *)v77 != v78);
        }
        v76 = &v95[56 * v96];
        v77 = (unint64_t)(v97 + 56);
        v74 = v260;
        if (v78)
          operator delete(v78);
        v78 = (void *)v75;
        LODWORD(v75) = v268;
      }
      else
      {
        *(_DWORD *)v77 = v270;
        *(_DWORD *)(v77 + 4) = v80;
        *(_DWORD *)(v77 + 8) = 0;
        *(_QWORD *)(v77 + 16) = v88;
        *(_DWORD *)(v77 + 24) = v81;
        *(_DWORD *)(v77 + 28) = v82;
        *(_DWORD *)(v77 + 32) = v83;
        *(_DWORD *)(v77 + 36) = v84;
        v90 = v275;
        *(_DWORD *)(v77 + 40) = v85;
        *(_DWORD *)(v77 + 44) = v275;
        *(_DWORD *)(v77 + 48) = v86;
        *(_DWORD *)(v77 + 52) = v89;
        v77 += 56;
        v8 = v273;
      }
      if (*(_QWORD *)__x)
        CFRelease(*(CFTypeRef *)__x);
      v75 = (v90 + v75);
      v73 += 8;
    }
    while (v73 != v74);
    v284 = v77;
    v285 = v76;
    v283 = v78;
    if (!(_DWORD)v75)
    {
LABEL_229:
      v250 = 0;
      v4 = v257;
    }
    else
    {
      if (!*v8)
      {
        v248 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v248, "Could not construct");
        __cxa_throw(v248, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v102 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v308, v102);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v280, *v8, CFSTR("IOAudioEngineOutputChannelLayout"), v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      __x[0] = 0;
      std::vector<char>::vector((std::vector<char> *)v308, 20 * v75 + 12, __x);
      v103 = *(_QWORD *)v308;
      **(_QWORD **)v308 = 0;
      *(_DWORD *)(v103 + 8) = v75;
      if (v75 > (*(_QWORD *)&v308[8] - v103 - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      v104 = 0;
      v105 = 0;
      v106 = (const __CFArray *)v280;
      do
      {
        if (!v106)
        {
          v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v208, "Could not construct");
          __cxa_throw(v208, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        LODWORD(v278) = -1;
        valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v278);
        if (!valuePtr)
        {
          v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v209, "Could not construct");
          __cxa_throw(v209, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(__x, v106, v105, &valuePtr);
        if (!*(_QWORD *)__x)
        {
          v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v210, "Could not construct");
          __cxa_throw(v210, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v107 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)__x);
        v108 = *(unsigned int *)(*(_QWORD *)v308 + 8);
        if (v108 > (*(_QWORD *)&v308[8] - *(_QWORD *)v308 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v105 >= v108)
        {
          v211 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v211, "accessing a CA::ChannelLayout with an out-of-range index");
          v211->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v211, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        *(_DWORD *)(*(_QWORD *)v308 + v104 + 12) = v107;
        if (*(_QWORD *)__x)
          CFRelease(*(CFTypeRef *)__x);
        if (valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v109 = *(unsigned int *)(*(_QWORD *)v308 + 8);
        if (v109 > (*(_QWORD *)&v308[8] - *(_QWORD *)v308 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v105 >= v109)
        {
          v212 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v212, "accessing a CA::ChannelLayout with an out-of-range index");
          v212->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v212, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        v110 = *(_QWORD *)v308 + v104;
        ++v105;
        *(_QWORD *)(v110 + 16) = 0;
        *(_QWORD *)(v110 + 24) = 0;
        v104 += 20;
      }
      while (v105 < v109);
      valuePtr = 0x6F75747073726E64;
      LODWORD(v316) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)__x, (uint64_t)&valuePtr, *(const void **)v308, *(uint64_t *)&v308[8]);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)(*(_QWORD *)__x + 40), __x);
      v4 = v257;
      v111 = *(std::__shared_weak_count **)&__x[8];
      if (*(_QWORD *)&__x[8])
      {
        v112 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (*(_QWORD *)v308)
      {
        *(_QWORD *)&v308[8] = *(_QWORD *)v308;
        operator delete(*(void **)v308);
      }
      if (v280)
        CFRelease(v280);
      v250 = 1;
    }
  }
  v280 = 0;
  v281 = 0;
  v282 = 0;
  v114 = *(_QWORD *)(v4 + 512);
  v115 = *(_QWORD *)(v4 + 520);
  if (v114 == v115)
  {
    v155 = 0;
  }
  else
  {
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)&v280, (v115 - v114) >> 3);
    v116 = v4;
    v117 = *(_QWORD *)(v4 + 512);
    v267 = *(_QWORD *)(v116 + 520);
    if (v117 == v267)
      goto LABEL_292;
    LODWORD(v118) = 0;
    v120 = v281;
    v119 = v282;
    v121 = (void *)v280;
    do
    {
      AMCP::IOAudio1::Device_Sub_Object::get_registry_entries((AMCP::IOAudio1::Device_Sub_Object *)__x, *(_DWORD *)(*(_QWORD *)v117 + 20));
      if (!*(_QWORD *)__x)
      {
        v281 = v120;
        v282 = v119;
        v280 = v121;
        v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v204, "Could not construct");
        __cxa_throw(v204, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v308, *(CFDictionaryRef *)__x, CFSTR("IOAudioStreamStartingChannelNumber"));
      if (!*(_QWORD *)v308)
      {
        v281 = v120;
        v282 = v119;
        v280 = v121;
        v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v205, "Could not construct");
        __cxa_throw(v205, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v122 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      if (!*(_QWORD *)__x)
      {
        v281 = v120;
        v282 = v119;
        v280 = v121;
        v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v206, "Could not construct");
        __cxa_throw(v206, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v308, *(CFDictionaryRef *)__x, CFSTR("IOAudioStreamID"));
      if (!*(_QWORD *)v308)
      {
        v281 = v120;
        v282 = v119;
        v280 = v121;
        v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v207, "Could not construct");
        __cxa_throw(v207, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v123 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      v271 = v122;
      v269 = v117;
      AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v308, v8, *(CFDictionaryRef *)__x);
      v124 = *(_DWORD *)&v308[8];
      v125 = *(_DWORD *)&v308[12];
      v126 = *(_DWORD *)&v308[16];
      v127 = *(_DWORD *)&v308[20];
      v128 = *(_DWORD *)&v308[24];
      v276 = *(_DWORD *)&v308[28];
      v129 = *(_DWORD *)&v308[32];
      if (*(_DWORD *)&v308[8] == 1819304813 && (v308[12] & 0x40) == 0)
      {
        v128 = 4 * *(_DWORD *)&v308[28];
        v125 = 9;
        v127 = 1;
        v129 = 32;
        v126 = 4 * *(_DWORD *)&v308[28];
      }
      v130 = *(_QWORD *)v308;
      v131 = *(_DWORD *)&v308[36];
      if (v120 >= (unint64_t)v119)
      {
        v261 = *(_DWORD *)&v308[36];
        v263 = v129;
        v265 = v118;
        v134 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v120 - (_QWORD)v121) >> 3) + 1;
        if (v134 > 0x492492492492492)
        {
          v281 = v120;
          v282 = v119;
          v280 = v121;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((v119 - (_BYTE *)v121) >> 3) > v134)
          v134 = 0xDB6DB6DB6DB6DB6ELL * ((v119 - (_BYTE *)v121) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v119 - (_BYTE *)v121) >> 3)) >= 0x249249249249249)
          v135 = 0x492492492492492;
        else
          v135 = v134;
        v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v135);
        v138 = &v136[8 * ((uint64_t)(v120 - (_QWORD)v121) >> 3)];
        *(_DWORD *)v138 = v271;
        *((_DWORD *)v138 + 1) = v123;
        *((_DWORD *)v138 + 2) = 0;
        *((_QWORD *)v138 + 2) = v130;
        *((_DWORD *)v138 + 6) = v124;
        *((_DWORD *)v138 + 7) = v125;
        *((_DWORD *)v138 + 8) = v126;
        *((_DWORD *)v138 + 9) = v127;
        *((_DWORD *)v138 + 10) = v128;
        v132 = v276;
        *((_DWORD *)v138 + 11) = v276;
        *((_DWORD *)v138 + 12) = v263;
        *((_DWORD *)v138 + 13) = v261;
        if ((void *)v120 == v121)
        {
          v118 = (unint64_t)&v136[8 * ((uint64_t)(v120 - (_QWORD)v121) >> 3)];
          v8 = v273;
          v133 = v269;
        }
        else
        {
          v139 = &v136[8 * ((uint64_t)(v120 - (_QWORD)v121) >> 3)];
          v8 = v273;
          v133 = v269;
          do
          {
            v140 = *(_OWORD *)(v120 - 56);
            v141 = *(_OWORD *)(v120 - 40);
            v142 = *(_OWORD *)(v120 - 24);
            v118 = (unint64_t)(v139 - 56);
            *((_QWORD *)v139 - 1) = *(_QWORD *)(v120 - 8);
            *(_OWORD *)(v139 - 24) = v142;
            *(_OWORD *)(v139 - 40) = v141;
            *(_OWORD *)(v139 - 56) = v140;
            v120 -= 56;
            v139 -= 56;
          }
          while ((void *)v120 != v121);
        }
        v119 = &v136[56 * v137];
        v120 = (unint64_t)(v138 + 56);
        if (v121)
          operator delete(v121);
        v121 = (void *)v118;
        LODWORD(v118) = v265;
      }
      else
      {
        *(_DWORD *)v120 = v271;
        *(_DWORD *)(v120 + 4) = v123;
        *(_DWORD *)(v120 + 8) = 0;
        *(_QWORD *)(v120 + 16) = v130;
        *(_DWORD *)(v120 + 24) = v124;
        *(_DWORD *)(v120 + 28) = v125;
        *(_DWORD *)(v120 + 32) = v126;
        *(_DWORD *)(v120 + 36) = v127;
        *(_DWORD *)(v120 + 40) = v128;
        v132 = v276;
        *(_DWORD *)(v120 + 44) = v276;
        *(_DWORD *)(v120 + 48) = v129;
        *(_DWORD *)(v120 + 52) = v131;
        v120 += 56;
        v8 = v273;
        v133 = v269;
      }
      if (*(_QWORD *)__x)
        CFRelease(*(CFTypeRef *)__x);
      v118 = (v132 + v118);
      v117 = v133 + 8;
    }
    while (v117 != v267);
    v281 = v120;
    v282 = v119;
    v280 = v121;
    if (!(_DWORD)v118)
    {
LABEL_292:
      v155 = 0;
      v4 = v257;
    }
    else
    {
      if (!*v8)
      {
        v249 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v249, "Could not construct");
        __cxa_throw(v249, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v143 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v308, v143);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v278, *v8, CFSTR("IOAudioEngineInputChannelLayout"), v308);
      if (*(_QWORD *)v308)
        CFRelease(*(CFTypeRef *)v308);
      __x[0] = 0;
      std::vector<char>::vector((std::vector<char> *)v308, 20 * v118 + 12, __x);
      v144 = *(_QWORD *)v308;
      **(_QWORD **)v308 = 0;
      *(_DWORD *)(v144 + 8) = v118;
      if (v118 > (*(_QWORD *)&v308[8] - v144 - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      v145 = 0;
      v146 = 0;
      v147 = (const __CFArray *)v278;
      do
      {
        if (!v147)
        {
          v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v213, "Could not construct");
          __cxa_throw(v213, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v307 = -1;
        valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v307);
        if (!valuePtr)
        {
          v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v214, "Could not construct");
          __cxa_throw(v214, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(__x, v147, v146, &valuePtr);
        if (!*(_QWORD *)__x)
        {
          v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v215, "Could not construct");
          __cxa_throw(v215, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v148 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)__x);
        v149 = *(unsigned int *)(*(_QWORD *)v308 + 8);
        if (v149 > (*(_QWORD *)&v308[8] - *(_QWORD *)v308 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v146 >= v149)
        {
          v216 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v216, "accessing a CA::ChannelLayout with an out-of-range index");
          v216->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v216, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        *(_DWORD *)(*(_QWORD *)v308 + v145 + 12) = v148;
        if (*(_QWORD *)__x)
          CFRelease(*(CFTypeRef *)__x);
        if (valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v150 = *(unsigned int *)(*(_QWORD *)v308 + 8);
        if (v150 > (*(_QWORD *)&v308[8] - *(_QWORD *)v308 - 12) / 0x14uLL)
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        if (v146 >= v150)
        {
          v217 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v217, "accessing a CA::ChannelLayout with an out-of-range index");
          v217->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
          __cxa_throw(v217, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
        }
        v151 = *(_QWORD *)v308 + v145;
        ++v146;
        *(_QWORD *)(v151 + 16) = 0;
        *(_QWORD *)(v151 + 24) = 0;
        v145 += 20;
      }
      while (v146 < v150);
      valuePtr = 0x696E707473726E64;
      LODWORD(v316) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)__x, (uint64_t)&valuePtr, *(const void **)v308, *(uint64_t *)&v308[8]);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)(*(_QWORD *)__x + 40), __x);
      v4 = v257;
      v152 = *(std::__shared_weak_count **)&__x[8];
      if (*(_QWORD *)&__x[8])
      {
        v153 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      if (*(_QWORD *)v308)
      {
        *(_QWORD *)&v308[8] = *(_QWORD *)v308;
        operator delete(*(void **)v308);
      }
      if (v278)
        CFRelease(v278);
      v155 = 1;
    }
  }
  *(_QWORD *)v308 = CFSTR("IOAudioEngineUseHiResSampleInterval");
  v156 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v8, (const void **)v308);
  if ((_BYTE)v156)
    v157 = v156 > 0xFFu;
  else
    v157 = 0;
  v158 = v157;
  *(_QWORD *)v308 = CFSTR("AllowDisplaySleep");
  v159 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v8, (const void **)v308);
  if ((_BYTE)v159)
    v160 = 0;
  else
    v160 = v159 > 0xFFu;
  v161 = v160;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v278, 0, 1.58366007e190);
  v162 = v278;
  v163 = *(_QWORD *)(v4 + 16);
  v165 = *(_QWORD *)(v163 + 32);
  v164 = *(_QWORD *)(v163 + 40);
  *(_QWORD *)v308 = v4 + 560;
  *(_QWORD *)&v308[8] = v165;
  *(_QWORD *)&v308[16] = v164;
  if (v164)
  {
    v166 = (unint64_t *)(v164 + 8);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
  }
  *(_DWORD *)&v308[24] = connect;
  v168 = IOConnectAddRef(connect);
  if ((_DWORD)v168)
  {
    v232 = __cxa_allocate_exception(0x20uLL);
    v233 = std::system_category();
    MEMORY[0x1B5E5022C](v232, v168, v233, "Error on IOConnectAddRef");
    __cxa_throw(v232, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v169 = v286;
  if (v286)
    CFRetain(v286);
  *(_QWORD *)&v308[32] = v169;
  LOBYTE(v309) = v158;
  *((double *)&v309 + 1) = sample_rate_from_dictionary;
  v310[0] = v161;
  *(_DWORD *)&v310[4] = v251;
  *(_DWORD *)&v310[8] = v253;
  *(_DWORD *)&v310[12] = v255;
  *(_DWORD *)&v310[16] = v254;
  *(_DWORD *)&v310[20] = v252;
  *(_DWORD *)&v310[24] = v256;
  v312 = 0;
  v311 = 0uLL;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v311, v280, v281, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v281 - (_QWORD)v280) >> 3));
  __p[0] = 0;
  __p[1] = 0;
  v314 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(__p, v283, v284, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v284 - (_QWORD)v283) >> 3));
  v170 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  v171 = *(_OWORD *)v308;
  v172 = *(_QWORD *)&v308[16];
  memset(&v308[8], 0, 20);
  v173 = *(_DWORD *)&v308[24];
  v274 = v311;
  v277 = v171;
  v174 = *(_QWORD *)&v308[32];
  v175 = v312;
  *(_QWORD *)&v308[32] = 0;
  v312 = 0;
  v311 = 0uLL;
  v272 = *(_OWORD *)__p;
  v176 = v314;
  __p[0] = 0;
  __p[1] = 0;
  v314 = 0;
  v317 = 0;
  v177 = (char *)operator new(0x90uLL);
  *(_QWORD *)v177 = &off_1E698CB88;
  *(_OWORD *)(v177 + 8) = v277;
  *((_QWORD *)v177 + 3) = v172;
  *((_DWORD *)v177 + 8) = v173;
  *((_QWORD *)v177 + 5) = v174;
  v178 = *(_OWORD *)v310;
  *((_OWORD *)v177 + 3) = v309;
  *((_OWORD *)v177 + 4) = v178;
  *(_OWORD *)(v177 + 76) = *(_OWORD *)&v310[12];
  *((_OWORD *)v177 + 6) = v274;
  *((_QWORD *)v177 + 14) = v175;
  *(_OWORD *)(v177 + 120) = v272;
  *((_QWORD *)v177 + 17) = v176;
  v317 = (CFTypeRef *)v177;
  *(_OWORD *)__x = 0u;
  v319 = 0u;
  v320 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)__x, (uint64_t)&valuePtr);
  v320 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v162, v170, (AMCP *)__x);
  if (v320)
    v320(0, (uint64_t)__x, 0, 0);
  p_valuePtr = (uint64_t *)v317;
  if (v317 == (CFTypeRef *)&valuePtr)
  {
    v180 = 4;
    p_valuePtr = &valuePtr;
  }
  else
  {
    if (!v317)
      goto LABEL_319;
    v180 = 5;
  }
  (*(void (**)(void))(*p_valuePtr + 8 * v180))();
LABEL_319:
  IOConnectRelease(0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v311)
  {
    *((_QWORD *)&v311 + 1) = v311;
    operator delete((void *)v311);
  }
  if (*(_QWORD *)&v308[32])
    CFRelease(*(CFTypeRef *)&v308[32]);
  IOConnectRelease(*(io_connect_t *)&v308[24]);
  v181 = *(std::__shared_weak_count **)&v308[16];
  if (*(_QWORD *)&v308[16])
  {
    v182 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  __x[0] = v155;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v308, 0, __x, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v184 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v185 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  __x[0] = v250;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v308, 0, __x, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v187 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v188 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  __x[0] = v250;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v308, 0, __x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)(*(_QWORD *)v308 + 40), v308);
  v190 = *(std::__shared_weak_count **)&v308[8];
  if (*(_QWORD *)&v308[8])
  {
    v191 = (unint64_t *)(*(_QWORD *)&v308[8] + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v258, (unsigned int *)v278 + 10, &v278);
  v193 = v279;
  if (v279)
  {
    v194 = (unint64_t *)&v279->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v280)
    operator delete((void *)v280);
  if (v283)
    operator delete(v283);
  if (v286)
    CFRelease(v286);
  IOConnectRelease(connect);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v287);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v289);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v291);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v293);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v295);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v297);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v299);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v303);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v305);
}

void sub_1B5B42434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698D1F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698D1F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v2;
  const void *v4;
  std::runtime_error *exception;
  const void *v6;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v2 + 360))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IOAudioEngineClientDescription");
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  v6 = v4;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(v2 + 360), (const __CFString *)cf, &v6);
  if (v4)
    CFRelease(v4);
  if (cf)
    CFRelease(cf);
}

void sub_1B5B42C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698D100;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698D100;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  io_registry_entry_t v4;
  CFTypeRef CFProperty;
  const void *v6;
  CFTypeID v7;
  std::runtime_error *exception;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = 0;
  v4 = *(_DWORD *)(v3 + 360);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFProperty = IORegistryEntryCreateCFProperty(v4, CFSTR("IOAudioEngineClientDescription"), 0, 0);
  if (CFProperty)
  {
    v6 = CFProperty;
    v7 = CFGetTypeID(CFProperty);
    if (v7 == CFDictionaryGetTypeID())
    {
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v9, v6);
      *a2 = v9;
    }
    else
    {
      CFRelease(v6);
    }
  }
}

void sub_1B5B42E4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E698CFF0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E698CFF0;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  CFTypeRef *v1;
  _QWORD *v2;

  v1 = (CFTypeRef *)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E698CFF0;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E698CFF0;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if (v3)
    result = CFRetain(*((CFTypeRef *)result + 1));
  *a2 = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF13DictionaryRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(CFDictionaryRef *a1, const void **a2)
{
  _BOOL4 v4;
  int v5;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  const __CFNumber *v11;
  char v12;
  const __CFBoolean *v13;
  char v14;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v13, *a1, *a2);
  if (v14)
  {
    if (!v13)
    {
      v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v4 = applesauce::CF::convert_to<BOOL,0>(v13);
    v5 = 1;
  }
  else
  {
    if (!*a1)
    {
      v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "Could not construct");
      __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v11, *a1, *a2);
    if (v12)
    {
      if (!v11)
      {
        v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v10, "Could not construct");
        __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v4 = applesauce::CF::convert_to<BOOL,0>(v11);
      v5 = 1;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v11);
  }
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v13);
  return v4 | (v5 << 8);
}

void sub_1B5B4322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *AMCP::IOAudio1::Device_Sub_Object::get_registry_entries(AMCP::IOAudio1::Device_Sub_Object *this, io_registry_entry_t a2)
{
  uint64_t v3;
  std::runtime_error *exception;
  void (*v6)(void *);
  struct type_info *v7;
  uint64_t v8;
  const std::error_category *v9;
  CFMutableDictionaryRef properties;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v6 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_6;
  }
  properties = 0;
  v3 = IORegistryEntryCreateCFProperties(a2, &properties, 0, 0);
  if ((_DWORD)v3)
  {
    v8 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v9 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v8, v9, "Error on get_properties");
    v6 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v7 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_6:
    __cxa_throw(exception, v7, v6);
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(this, properties);
}

void sub_1B5B43350(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  *(_QWORD *)a1 = &off_1E698CB88;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  *(_QWORD *)a1 = &off_1E698CB88;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x90uLL);
  *v2 = &off_1E698CB88;
  std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5B434A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E698CB88;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  io_connect_t v6;
  uint64_t v7;
  const __CFString *v8;
  char v9;
  double v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  const AMCP::Utility::Dispatch_Queue *v14;
  std::__shared_weak_count *v15;
  AMCP::Log::Scope_Registry *v16;
  uint64_t v17;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count **v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *exception;
  const std::error_category *v38;
  std::__shared_count v39;
  uint64_t v40;
  const __CFString *v41;
  std::__shared_count v42;
  uint64_t v43;
  std::__shared_count v44;
  uint64_t v45;
  dispatch_queue_t v46[40];
  uint8_t buf[8];
  _BYTE v48[10];
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;
  _QWORD v53[3];
  AMCP::Log::Scope_Registry *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v46, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 672));
  v4 = (std::__shared_weak_count *)operator new(0x338uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698CBF8;
  v6 = *(_DWORD *)(a1 + 32);
  v7 = IOConnectAddRef(v6);
  if ((_DWORD)v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v38 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v7, v38, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v8 = *(const __CFString **)(a1 + 40);
  if (v8)
    CFRetain(*(CFTypeRef *)(a1 + 40));
  v41 = v8;
  v9 = *(_BYTE *)(a1 + 48);
  v10 = *(double *)(a1 + 56);
  v11 = *(unsigned __int8 *)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 68);
  v39 = *(std::__shared_count *)(a1 + 76);
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E69745B8;
  if (v8)
    CFRetain(v8);
  v44 = (std::__shared_count)0;
  v45 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v44, *(const void **)(a1 + 96), *(_QWORD *)(a1 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
  v42 = (std::__shared_count)0;
  v43 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v42, *(const void **)(a1 + 120), *(_QWORD *)(a1 + 128), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
  v4[2].__vftable = (std::__shared_weak_count_vtbl *)v8;
  *(double *)&v4[2].__shared_owners_ = v10;
  v4[2].__shared_weak_owners_ = v40;
  LOBYTE(v4[3].__vftable) = 0;
  *(std::__shared_count *)((char *)v4 + 76) = v39;
  v4[4].std::__shared_count = v44;
  v4[4].__shared_weak_owners_ = v45;
  v44 = (std::__shared_count)0;
  v45 = 0;
  v4[5].std::__shared_count = v42;
  v4[5].__shared_weak_owners_ = v43;
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3);
  v13 = (uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3;
  v42 = (std::__shared_count)0;
  v43 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)&v4[6], &v41, v12, 0x6DB6DB6DB6DB6DB7 * v13, v11 != 0, v46, v14);
  v15 = v4 + 1;
  v53[0] = &off_1E6974770;
  v53[1] = v4 + 1;
  v54 = (AMCP::Log::Scope_Registry *)v53;
  AMCP::IO_Clock::IO_Clock((uint64_t)&v4[24].__shared_owners_, (uint64_t)v53, v40, v10);
  v16 = v54;
  if (v54 == (AMCP::Log::Scope_Registry *)v53)
  {
    v17 = 4;
    v16 = (AMCP::Log::Scope_Registry *)v53;
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v17 = 5;
  }
  v16 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_11:
  v4[31].__vftable = 0;
  HIDWORD(v4[31].__vftable) = v6;
  v4[31].__shared_owners_ = 0;
  LODWORD(v4[31].__shared_weak_owners_) = (_DWORD)v15;
  v4[32].std::__shared_count = 0u;
  *(_OWORD *)&v4[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[33].__shared_owners_ = 0u;
  LOBYTE(v4[34].__vftable) = v9;
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = *(std::__shared_weak_count **)v48;
    v32 = **(NSObject ***)buf;
    if (*(_QWORD *)v48)
    {
      v33 = (unint64_t *)(*(_QWORD *)v48 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)v48 = 2080;
      *(_QWORD *)&v48[2] = "IOAudio1_Engine.cpp";
      v49 = 1024;
      v50 = 51;
      v51 = 2080;
      v52 = "m_connection.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the connection has to be valid", buf, 0x22u);
    }
    abort();
  }
  if (v8)
    CFRelease(v8);
  IOConnectRelease(0);
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = (uint64_t)v15;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v4[1].__shared_owners_ = (uint64_t)v15;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_27:
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v46);
  v26 = *(std::__shared_weak_count ***)(a1 + 8);
  v27 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = v26[1];
  *v26 = v15;
  v26[1] = v4;
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  *(_QWORD *)&v30 = v4 + 1;
  *((_QWORD *)&v30 + 1) = v4;
  *a2 = v30;
}

void sub_1B5B43988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  AMCP::IO_Clock *v24;
  uint64_t v25;
  unsigned int *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  const void *v32;
  std::__shared_weak_count *v33;
  void *v34;

  *(_QWORD *)(v25 - 192) = v23 + 792;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 192));
  *(_QWORD *)(v25 - 192) = v23 + 768;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 192));
  v27 = *(unsigned int **)(v23 + 752);
  *(_QWORD *)(v23 + 752) = 0;
  if (v27)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v27);
  IOConnectRelease(*(_DWORD *)(v23 + 748));
  AMCP::IO_Clock::~IO_Clock(v24);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v23 + 264));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23 + 248);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23 + 232);
  v28 = *(void **)(v23 + 200);
  if (v28)
    operator delete(v28);
  v29 = *(void **)(v23 + 168);
  if (v29)
    operator delete(v29);
  v30 = *(void **)(v23 + 120);
  if (v30)
  {
    *(_QWORD *)(v23 + 128) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v23 + 96);
  if (v31)
  {
    *(_QWORD *)(v23 + 104) = v31;
    operator delete(v31);
  }
  v32 = *(const void **)(v23 + 48);
  if (v32)
    CFRelease(v32);
  v33 = *(std::__shared_weak_count **)(v23 + 40);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  applesauce::CF::StringRef::~StringRef(&a14);
  IOConnectRelease(0);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v23);
  operator delete(v34);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698CBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698CBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_connect_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *exception;
  const std::error_category *v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v7;
  v8 = IOConnectAddRef(v7);
  if ((_DWORD)v8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v8, v15, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 32));
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(_OWORD *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 68) = v12;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((_QWORD *)(a1 + 112), *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3));
  return a1;
}

void sub_1B5B43D44(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698C7C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698C7C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  std::__shared_mutex_base *v4;
  __n128 simple_required;
  __n128 v6;
  uint64_t (***v7)();
  uint64_t v8;
  AMCP::Core::Core *v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  AMCP::Core::Core *v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t (**v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 32) + 16);
  v30 = &off_1E698C848;
  v31 = v3;
  v33 = &v30;
  AMCP::Core::Broker::fetch_first_core_if (&v24, v4, (uint64_t)&v30);
  v7 = v33;
  if (v33 == &v30)
  {
    v8 = 4;
    v7 = &v30;
    goto LABEL_5;
  }
  if (v33)
  {
    v8 = 5;
LABEL_5:
    (*v7)[v8]();
  }
  v9 = v24;
  if (!v24)
    goto LABEL_24;
  simple_required = AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)v22, v24);
  v6.n128_u64[0] = *(_QWORD *)&v22[0];
  simple_required.n128_u64[0] = *a2;
  if (*(double *)v22 == *(double *)a2)
    goto LABEL_24;
  *(_QWORD *)&v22[0] = *a2;
  v28 = 0x676C6F62666D6174;
  v29 = 0;
  if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v9, (const AMCP::Address *)&v28))
    goto LABEL_24;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)v9, (unsigned int *)&v28);
  v10 = v26;
  if (!v26)
    goto LABEL_19;
  v11 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11))
  {
    v15 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v15))
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      v16 = operator new();
      v17 = v22[1];
      *(_OWORD *)v16 = v22[0];
      *(_OWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v16 + 32) = v23;
      v30 = (uint64_t (**)())v16;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)&v30);
      if (v34)
        v34(0, (uint64_t)&v30, 0, 0);
      goto LABEL_12;
    }
LABEL_19:
    v12 = v27;
    if (!v27)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    goto LABEL_22;
  }
  AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v10, (uint64_t)v22);
LABEL_12:
  v12 = v27;
  if (!v27)
    goto LABEL_24;
  v13 = (unint64_t *)&v27->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
LABEL_22:
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_24:
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v19->__on_zero_shared)(v19, simple_required, v6);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1B5B4404C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5B44064(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v18;
  void (*v20)(_QWORD, uint64_t, _QWORD, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a2)
  {
    v20 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v18 - 32);
    if (v20)
      v20(0, v18 - 64, 0, 0);
    if (a18)
    {
      p_shared_owners = (unint64_t *)&a18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
        std::__shared_weak_count::__release_weak(a18);
      }
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5B43FE8);
  }
  JUMPOUT(0x1B5B44054);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698C848;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698C848;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEEclESL_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3;
  int simple_required;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 32) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEENK3$_0clERKdEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_;
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698C648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698C648;
  a2[1] = v2;
  return result;
}

double std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698CCB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698CCB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (**v3)();
  std::__shared_mutex_base *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t (**v8)();
  double *v9;
  double *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  AMCP::Core::Core *v14;
  std::__shared_weak_count *v15;
  uint64_t (***v16)();
  uint64_t (**v17)();
  uint64_t (**v18)();
  uint64_t (***v19)();
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t (***)())(a1 + 8);
  v4 = *(std::__shared_mutex_base **)(*((_QWORD *)v3[2] + 4) + 16);
  v17 = &off_1E698CD30;
  v18 = v3;
  v19 = &v17;
  AMCP::Core::Broker::fetch_first_core_if (&v14, v4, (uint64_t)&v17);
  v5 = v19;
  if (v19 == &v17)
  {
    v6 = 4;
    v5 = &v17;
    goto LABEL_5;
  }
  if (v19)
  {
    v6 = 5;
LABEL_5:
    (*v5)[v6]();
  }
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v17, v14);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = v17;
  v8 = v18;
  while (v7 != v8)
  {
    v9 = (double *)*v7;
    v10 = (double *)v7[1];
    while (v9 != v10)
    {
      CA::ValueRangeList::AddRange((double **)a2, v9);
      v9 += 2;
    }
    v7 += 8;
  }
  v16 = &v17;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5B444A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void **a11, char a12)
{
  uint64_t v12;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a11 = (void **)&a12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698CD30;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698CD30;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3;
  int simple_required;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 32) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio16Device10build_coreEvENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_;
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698C5C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698C5C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  AMCP::Utility::Kernel_Error_Category *v2;
  int v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  AMCP::Log::Scope_Registry *v15;
  int v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  const __CFString *v23;
  mach_port_t v24;
  void **v25;
  NSObject *v26;
  os_log_type_t v27;
  AMCP::Log::Scope_Registry *v28;
  int v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  const __CFString *v36;
  mach_port_t v37;
  void **v38;
  NSObject *v39;
  os_log_type_t v40;
  AMCP::Log::Scope_Registry *v41;
  int v42;
  std::__shared_weak_count *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  const __CFString *v49;
  mach_port_t v50;
  void **v51;
  NSObject *v52;
  os_log_type_t v53;
  AMCP::Log::Scope_Registry *v54;
  int v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  const __CFString *v62;
  mach_port_t v63;
  void **v64;
  NSObject *v65;
  os_log_type_t v66;
  std::__shared_weak_count *v67;
  NSObject *v68;
  unint64_t *v69;
  unint64_t v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  const __CFString *v73;
  mach_port_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  NSObject *v77;
  unint64_t *v78;
  unint64_t v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  const __CFString *v82;
  mach_port_t v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  NSObject *v89;
  unint64_t *v90;
  unint64_t v91;
  _opaque_pthread_t *v92;
  mach_port_t v93;
  const __CFString *v94;
  mach_port_t v95;
  void **v96;
  std::__shared_weak_count *v97;
  NSObject *v98;
  unint64_t *v99;
  unint64_t v100;
  _opaque_pthread_t *v101;
  mach_port_t v102;
  const __CFString *v103;
  mach_port_t v104;
  void **v105;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v107;
  NSObject *v108;
  unint64_t *v109;
  unint64_t v110;
  _opaque_pthread_t *v111;
  mach_port_t v112;
  const __CFString *v113;
  mach_port_t v114;
  void **v115;
  std::__shared_weak_count *v116;
  NSObject *v117;
  unint64_t *v118;
  unint64_t v119;
  _opaque_pthread_t *v120;
  mach_port_t v121;
  const __CFString *v122;
  mach_port_t v123;
  void **v124;
  std::__shared_weak_count *v125;
  NSObject *v126;
  unint64_t *v127;
  unint64_t v128;
  _opaque_pthread_t *v129;
  mach_port_t v130;
  const __CFString *v131;
  mach_port_t v132;
  void **v133;
  unint64_t *v134;
  std::__shared_weak_count *v135;
  NSObject *v136;
  unint64_t *v137;
  unint64_t v138;
  _opaque_pthread_t *v139;
  mach_port_t v140;
  const __CFString *v141;
  mach_port_t v142;
  void **v143;
  unint64_t *v144;
  std::runtime_error *exception;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  void *__p[2];
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint8_t buf[8];
  __int128 v154;
  _QWORD v155[3];

  v155[2] = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 8);
  v147 = 0u;
  v148 = 0u;
  v146 = 0u;
  v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*((_DWORD *)v1 + 96), 0x30u, (mach_msg_header_t *)&v146, (mach_msg_header_t *)1);
  v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
    return;
  switch(DWORD2(v147))
  {
    case 1:
    case 2:
      v5 = v1[2];
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32);
      v7 = *(_DWORD *)(v5 + 48);
      v8 = *((_DWORD *)v1 + 8);
      v10 = *v1;
      v9 = v1[1];
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 16);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)buf = &off_1E698D300;
      *(_QWORD *)&v154 = v10;
      *((_QWORD *)&v154 + 1) = v9;
      v155[0] = buf;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v8, 1, (uint64_t)buf);
      v13 = (uint8_t *)v155[0];
      if ((uint8_t *)v155[0] == buf)
      {
        v14 = 4;
        v13 = buf;
      }
      else
      {
        if (!v155[0])
          return;
        v14 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
      return;
    case 3:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v151, "com.apple.coreaudio", "AMCP");
      v29 = *(_DWORD *)(v151 + 16);
      switch(v29)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v97 = (std::__shared_weak_count *)v154;
          v98 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v99 = (unint64_t *)(v154 + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          if (!os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
            goto LABEL_122;
          v101 = pthread_self();
          v102 = pthread_mach_thread_np(v101);
          v103 = (const __CFString *)v1[3];
          if (v103)
          {
            v104 = v102;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v103);
            if (v150 >= 0)
              v105 = __p;
            else
              v105 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v104;
            LOWORD(v154) = 2080;
            *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
            WORD5(v154) = 1024;
            HIDWORD(v154) = 717;
            LOWORD(v155[0]) = 2080;
            *(_QWORD *)((char *)v155 + 2) = v105;
            v39 = v98;
            v40 = OS_LOG_TYPE_INFO;
            goto LABEL_119;
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v88 = (std::__shared_weak_count *)v154;
          v89 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v90 = (unint64_t *)(v154 + 8);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            goto LABEL_122;
          v92 = pthread_self();
          v93 = pthread_mach_thread_np(v92);
          v94 = (const __CFString *)v1[3];
          if (v94)
          {
            v95 = v93;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v94);
            if (v150 >= 0)
              v96 = __p;
            else
              v96 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v95;
            LOWORD(v154) = 2080;
            *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
            WORD5(v154) = 1024;
            HIDWORD(v154) = 717;
            LOWORD(v155[0]) = 2080;
            *(_QWORD *)((char *)v155 + 2) = v96;
            _os_log_debug_impl(&dword_1B57BA000, v89, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d 'Started' notification for device '%s'", buf, 0x22u);
LABEL_120:
            if (v150 < 0)
              operator delete(__p[0]);
LABEL_122:
            v85 = v152;
            if (!v152)
              return;
            p_shared_owners = (unint64_t *)&v152->__shared_owners_;
            do
              v87 = __ldaxr(p_shared_owners);
            while (__stlxr(v87 - 1, p_shared_owners));
            goto LABEL_183;
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v30 = (std::__shared_weak_count *)v154;
          v31 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v32 = (unint64_t *)(v154 + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            goto LABEL_122;
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          v36 = (const __CFString *)v1[3];
          if (v36)
          {
            v37 = v35;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v36);
            if (v150 >= 0)
              v38 = __p;
            else
              v38 = (void **)__p[0];
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v37;
            LOWORD(v154) = 2080;
            *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
            WORD5(v154) = 1024;
            HIDWORD(v154) = 717;
            LOWORD(v155[0]) = 2080;
            *(_QWORD *)((char *)v155 + 2) = v38;
            v39 = v31;
            v40 = OS_LOG_TYPE_DEFAULT;
LABEL_119:
            _os_log_impl(&dword_1B57BA000, v39, v40, "%6u %32s:%-5d 'Started' notification for device '%s'", buf, 0x22u);
            goto LABEL_120;
          }
          break;
        default:
          goto LABEL_122;
      }
      goto LABEL_185;
    case 4:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v151, "com.apple.coreaudio", "AMCP");
      v16 = *(_DWORD *)(v151 + 16);
      if (v16 == 3)
      {
        AMCP::Log::Scope_Registry::get(v15);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v76 = (std::__shared_weak_count *)v154;
        v77 = **(NSObject ***)buf;
        if ((_QWORD)v154)
        {
          v78 = (unint64_t *)(v154 + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
          goto LABEL_93;
        v80 = pthread_self();
        v81 = pthread_mach_thread_np(v80);
        v82 = (const __CFString *)v1[3];
        if (v82)
        {
          v83 = v81;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v82);
          if (v150 >= 0)
            v84 = __p;
          else
            v84 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v83;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 721;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v84;
          v26 = v77;
          v27 = OS_LOG_TYPE_INFO;
          goto LABEL_90;
        }
LABEL_185:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v16 != 2)
      {
        if (v16 != 1)
          goto LABEL_93;
        AMCP::Log::Scope_Registry::get(v15);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v17 = (std::__shared_weak_count *)v154;
        v18 = **(NSObject ***)buf;
        if ((_QWORD)v154)
        {
          v19 = (unint64_t *)(v154 + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_93;
        v21 = pthread_self();
        v22 = pthread_mach_thread_np(v21);
        v23 = (const __CFString *)v1[3];
        if (v23)
        {
          v24 = v22;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v23);
          if (v150 >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v24;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 721;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v25;
          v26 = v18;
          v27 = OS_LOG_TYPE_DEFAULT;
LABEL_90:
          _os_log_impl(&dword_1B57BA000, v26, v27, "%6u %32s:%-5d 'Stopped' notification for device '%s'", buf, 0x22u);
          goto LABEL_91;
        }
        goto LABEL_185;
      }
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v67 = (std::__shared_weak_count *)v154;
      v68 = **(NSObject ***)buf;
      if ((_QWORD)v154)
      {
        v69 = (unint64_t *)(v154 + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        goto LABEL_93;
      v71 = pthread_self();
      v72 = pthread_mach_thread_np(v71);
      v73 = (const __CFString *)v1[3];
      if (!v73)
        goto LABEL_185;
      v74 = v72;
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v73);
      if (v150 >= 0)
        v75 = __p;
      else
        v75 = (void **)__p[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v74;
      LOWORD(v154) = 2080;
      *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
      WORD5(v154) = 1024;
      HIDWORD(v154) = 721;
      LOWORD(v155[0]) = 2080;
      *(_QWORD *)((char *)v155 + 2) = v75;
      _os_log_debug_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d 'Stopped' notification for device '%s'", buf, 0x22u);
LABEL_91:
      if (v150 < 0)
        operator delete(__p[0]);
LABEL_93:
      v85 = v152;
      if (!v152)
        return;
      v86 = (unint64_t *)&v152->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
LABEL_183:
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      return;
    case 5:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v151, "com.apple.coreaudio", "AMCP");
      v55 = *(_DWORD *)(v151 + 16);
      switch(v55)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v54);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v135 = (std::__shared_weak_count *)v154;
          v136 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v137 = (unint64_t *)(v154 + 8);
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          if (!os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
            goto LABEL_180;
          v139 = pthread_self();
          v140 = pthread_mach_thread_np(v139);
          v141 = (const __CFString *)v1[3];
          if (!v141)
            goto LABEL_185;
          v142 = v140;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v141);
          if (v150 >= 0)
            v143 = __p;
          else
            v143 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v142;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 725;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v143;
          v65 = v136;
          v66 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v54);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v116 = (std::__shared_weak_count *)v154;
          v117 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v118 = (unint64_t *)(v154 + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          if (!os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
            goto LABEL_180;
          v120 = pthread_self();
          v121 = pthread_mach_thread_np(v120);
          v122 = (const __CFString *)v1[3];
          if (!v122)
            goto LABEL_185;
          v123 = v121;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v122);
          if (v150 >= 0)
            v124 = __p;
          else
            v124 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v123;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 725;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v124;
          _os_log_debug_impl(&dword_1B57BA000, v117, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d 'Paused' notification for device '%s'", buf, 0x22u);
          goto LABEL_178;
        case 1:
          AMCP::Log::Scope_Registry::get(v54);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v56 = (std::__shared_weak_count *)v154;
          v57 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v58 = (unint64_t *)(v154 + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            goto LABEL_180;
          v60 = pthread_self();
          v61 = pthread_mach_thread_np(v60);
          v62 = (const __CFString *)v1[3];
          if (!v62)
            goto LABEL_185;
          v63 = v61;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v62);
          if (v150 >= 0)
            v64 = __p;
          else
            v64 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v63;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 725;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v64;
          v65 = v57;
          v66 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_180;
      }
      _os_log_impl(&dword_1B57BA000, v65, v66, "%6u %32s:%-5d 'Paused' notification for device '%s'", buf, 0x22u);
LABEL_178:
      if (v150 < 0)
        operator delete(__p[0]);
LABEL_180:
      v85 = v152;
      if (!v152)
        return;
      v144 = (unint64_t *)&v152->__shared_owners_;
      do
        v87 = __ldaxr(v144);
      while (__stlxr(v87 - 1, v144));
      goto LABEL_183;
    case 6:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v151, "com.apple.coreaudio", "AMCP");
      v42 = *(_DWORD *)(v151 + 16);
      switch(v42)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v41);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v125 = (std::__shared_weak_count *)v154;
          v126 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v127 = (unint64_t *)(v154 + 8);
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          if (!os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
            goto LABEL_162;
          v129 = pthread_self();
          v130 = pthread_mach_thread_np(v129);
          v131 = (const __CFString *)v1[3];
          if (!v131)
            goto LABEL_185;
          v132 = v130;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v131);
          if (v150 >= 0)
            v133 = __p;
          else
            v133 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v132;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 729;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v133;
          v52 = v126;
          v53 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v41);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v107 = (std::__shared_weak_count *)v154;
          v108 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v109 = (unint64_t *)(v154 + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          if (!os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
            goto LABEL_162;
          v111 = pthread_self();
          v112 = pthread_mach_thread_np(v111);
          v113 = (const __CFString *)v1[3];
          if (!v113)
            goto LABEL_185;
          v114 = v112;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v113);
          if (v150 >= 0)
            v115 = __p;
          else
            v115 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v114;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 729;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v115;
          _os_log_debug_impl(&dword_1B57BA000, v108, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d 'Resumed' notification for device '%s'", buf, 0x22u);
          goto LABEL_160;
        case 1:
          AMCP::Log::Scope_Registry::get(v41);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v43 = (std::__shared_weak_count *)v154;
          v44 = **(NSObject ***)buf;
          if ((_QWORD)v154)
          {
            v45 = (unint64_t *)(v154 + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            goto LABEL_162;
          v47 = pthread_self();
          v48 = pthread_mach_thread_np(v47);
          v49 = (const __CFString *)v1[3];
          if (!v49)
            goto LABEL_185;
          v50 = v48;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v49);
          if (v150 >= 0)
            v51 = __p;
          else
            v51 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v50;
          LOWORD(v154) = 2080;
          *(_QWORD *)((char *)&v154 + 2) = "IOAudio1_Device.cpp";
          WORD5(v154) = 1024;
          HIDWORD(v154) = 729;
          LOWORD(v155[0]) = 2080;
          *(_QWORD *)((char *)v155 + 2) = v51;
          v52 = v44;
          v53 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_162;
      }
      _os_log_impl(&dword_1B57BA000, v52, v53, "%6u %32s:%-5d 'Resumed' notification for device '%s'", buf, 0x22u);
LABEL_160:
      if (v150 < 0)
        operator delete(__p[0]);
LABEL_162:
      v85 = v152;
      if (!v152)
        return;
      v134 = (unint64_t *)&v152->__shared_owners_;
      do
        v87 = __ldaxr(v134);
      while (__stlxr(v87 - 1, v134));
      goto LABEL_183;
    default:
      return;
  }
}

void sub_1B5B456B0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E698D300;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E698D300;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E698D300;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E698D300;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  AMCP::Log::Scope_Registry *v6;
  io_object_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  const __CFString *v14;
  mach_port_t v15;
  _BYTE *v16;
  NSObject *v17;
  os_log_type_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  const __CFString *v25;
  mach_port_t v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  const __CFString *v34;
  mach_port_t v35;
  _BYTE *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  io_registry_entry_t v40;
  uint64_t CFProperties;
  const void *v42;
  io_registry_entry_t v43;
  uint64_t v44;
  const void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  io_object_t v53;
  io_object_t v54;
  BOOL v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  AMCP::IOAudio1::Control **v65;
  void *v66;
  char *v67;
  char *v68;
  io_object_t v69;
  io_object_t v70;
  BOOL v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  AMCP::IOAudio1::Control ***v78;
  AMCP::IOAudio1::Control **v79;
  __int128 v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  AMCP::IOAudio1::Control **v84;
  AMCP::IOAudio1::Control ***v85;
  AMCP::IOAudio1::Control ***v86;
  _QWORD *v87;
  AMCP::IOAudio1::Control ***v88;
  AMCP::IOAudio1::Control **v89;
  AMCP::IOAudio1::Control *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  AMCP::IOAudio1::Control *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  int64x2_t v102;
  uint64_t v103;
  AMCP::IOAudio1::Control **i;
  AMCP::IOAudio1::Control *v105;
  unsigned int v106;
  _DWORD *v107;
  io_registry_entry_t v108;
  io_object_t *v109;
  io_registry_entry_t v110;
  uint64_t v111;
  unsigned int simple_required;
  _QWORD *v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _DWORD *v118;
  _QWORD *v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  AMCP::Log::Scope_Registry *v124;
  AMCP::Log::Scope_Registry *v125;
  int v126;
  std::__shared_weak_count *v127;
  NSObject *v128;
  unint64_t *v129;
  unint64_t v130;
  _opaque_pthread_t *v131;
  mach_port_t v132;
  const __CFString *v133;
  mach_port_t v134;
  void *v135;
  NSObject *v136;
  os_log_type_t v137;
  std::__shared_weak_count *v138;
  NSObject *v139;
  unint64_t *v140;
  unint64_t v141;
  _opaque_pthread_t *v142;
  mach_port_t v143;
  const __CFString *v144;
  mach_port_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  NSObject *v148;
  unint64_t *v149;
  unint64_t v150;
  _opaque_pthread_t *v151;
  mach_port_t v152;
  const __CFString *v153;
  mach_port_t v154;
  void *p_properties;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  AMCP::IOAudio1::Control **v161;
  AMCP::IOAudio1::Control *v162;
  AMCP::IOAudio1::Control ***v163;
  AMCP::IOAudio1::Control *v164;
  uint64_t v165;
  uint64_t v166;
  std::runtime_error *v167;
  void (*v168)(void *);
  struct type_info *v169;
  uint64_t v170;
  const std::error_category *v171;
  std::runtime_error *v172;
  void (*v173)(void *);
  struct type_info *v174;
  const std::error_category *v175;
  std::runtime_error *v176;
  void (*v177)(void *);
  struct type_info *v178;
  const std::error_category *v179;
  std::runtime_error *v180;
  std::runtime_error *v181;
  std::runtime_error *v182;
  std::runtime_error *exception;
  std::runtime_error *v184;
  std::runtime_error *v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  __int128 v188;
  CFMutableDictionaryRef properties;
  int v190;
  char v191;
  void *__p;
  char *v193;
  char v194;
  const char *v195[3];
  io_object_t *v196;
  std::__shared_weak_count *v197;
  CFTypeRef cf;
  _DWORD *v199;
  std::__shared_weak_count *v200;
  uint8_t buf[8];
  _BYTE v202[10];
  __int16 v203;
  int v204;
  __int16 v205;
  _BYTE *v206;
  _BYTE v207[40];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
      {
LABEL_241:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v160 = __ldaxr(p_shared_owners);
        while (__stlxr(v160 - 1, p_shared_owners));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v196, "com.apple.coreaudio", "AMCP");
      v7 = v196[4];
      v186 = v4;
      switch(v7)
      {
        case 3u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v28 = *(std::__shared_weak_count **)v202;
          v29 = **(NSObject ***)buf;
          if (*(_QWORD *)v202)
          {
            v30 = (unint64_t *)(*(_QWORD *)v202 + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            v32 = pthread_self();
            v33 = pthread_mach_thread_np(v32);
            v34 = *(const __CFString **)(v5 + 24);
            if (!v34)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v35 = v33;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v207, v34);
            if (v207[23] >= 0)
              v36 = v207;
            else
              v36 = *(_BYTE **)v207;
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v35;
            *(_WORD *)v202 = 2080;
            *(_QWORD *)&v202[2] = "IOAudio1_Device.cpp";
            v203 = 1024;
            v204 = 611;
            v205 = 2080;
            v206 = v36;
            v17 = v29;
            v18 = OS_LOG_TYPE_INFO;
            goto LABEL_40;
          }
          break;
        case 2u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v19 = *(std::__shared_weak_count **)v202;
          v20 = **(NSObject ***)buf;
          if (*(_QWORD *)v202)
          {
            v21 = (unint64_t *)(*(_QWORD *)v202 + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            v23 = pthread_self();
            v24 = pthread_mach_thread_np(v23);
            v25 = *(const __CFString **)(v5 + 24);
            if (!v25)
            {
              v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v180, "Could not construct");
              __cxa_throw(v180, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v26 = v24;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v207, v25);
            if (v207[23] >= 0)
              v27 = v207;
            else
              v27 = *(_BYTE **)v207;
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v26;
            *(_WORD *)v202 = 2080;
            *(_QWORD *)&v202[2] = "IOAudio1_Device.cpp";
            v203 = 1024;
            v204 = 611;
            v205 = 2080;
            v206 = v27;
            _os_log_debug_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
            goto LABEL_41;
          }
          break;
        case 1u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v8 = *(std::__shared_weak_count **)v202;
          v9 = **(NSObject ***)buf;
          if (*(_QWORD *)v202)
          {
            v10 = (unint64_t *)(*(_QWORD *)v202 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v12 = pthread_self();
            v13 = pthread_mach_thread_np(v12);
            v14 = *(const __CFString **)(v5 + 24);
            if (!v14)
            {
              v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v182, "Could not construct");
              __cxa_throw(v182, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v15 = v13;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v207, v14);
            if (v207[23] >= 0)
              v16 = v207;
            else
              v16 = *(_BYTE **)v207;
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v15;
            *(_WORD *)v202 = 2080;
            *(_QWORD *)&v202[2] = "IOAudio1_Device.cpp";
            v203 = 1024;
            v204 = 611;
            v205 = 2080;
            v206 = v16;
            v17 = v9;
            v18 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
            _os_log_impl(&dword_1B57BA000, v17, v18, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
LABEL_41:
            if ((v207[23] & 0x80000000) != 0)
              operator delete(*(void **)v207);
          }
          break;
      }
      v37 = v197;
      if (v197)
      {
        v38 = (unint64_t *)&v197->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      kdebug_trace();
      v40 = *(_DWORD *)(v5 + 360);
      if (v40)
      {
        *(_QWORD *)buf = 0;
        CFProperties = IORegistryEntryCreateCFProperties(v40, (CFMutableDictionaryRef *)buf, 0, 0);
        if (!(_DWORD)CFProperties)
        {
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v207, *(CFTypeRef *)buf);
          v42 = *(const void **)(v5 + 464);
          *(_QWORD *)(v5 + 464) = *(_QWORD *)v207;
          *(_QWORD *)v207 = v42;
          if (v42)
            CFRelease(v42);
          v43 = *(_DWORD *)(v5 + 472);
          if (v43)
          {
            *(_QWORD *)buf = 0;
            v44 = IORegistryEntryCreateCFProperties(v43, (CFMutableDictionaryRef *)buf, 0, 0);
            if (!(_DWORD)v44)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v207, *(CFTypeRef *)buf);
              v45 = *(const void **)(v5 + 480);
              *(_QWORD *)(v5 + 480) = *(_QWORD *)v207;
              *(_QWORD *)v207 = v45;
              if (v45)
                CFRelease(v45);
              std::string::basic_string[abi:ne180100]<0>(buf, "IOAudioStream");
              std::string::basic_string[abi:ne180100]<0>(v207, "IOService");
              v195[0] = (const char *)buf;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)&v196, *(unsigned int *)(v5 + 360), (uint64_t)v207, v195);
              if ((v207[23] & 0x80000000) != 0)
                operator delete(*(void **)v207);
              if (SHIBYTE(v204) < 0)
                operator delete(*(void **)buf);
              AMCP::IOAudio1::Stream::create_from_service_list((uint64_t)buf, v5, v196, (io_object_t *)v197);
              v46 = (unint64_t *)&v4->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_((_QWORD *)(v5 + 488), (AMCP::IOAudio1::Stream ***)buf);
              _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_((_QWORD *)(v5 + 512), (AMCP::IOAudio1::Stream ***)&v205);
              do
                v48 = __ldaxr(v46);
              while (__stlxr(v48 - 1, v46));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
              std::string::basic_string[abi:ne180100]<0>(v207, "IOAudioControl");
              std::string::basic_string[abi:ne180100]<0>(&__p, "IOService");
              properties = (CFMutableDictionaryRef)v207;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)v195, *(unsigned int *)(v5 + 360), (uint64_t)&__p, (const char **)&properties);
              if (v194 < 0)
                operator delete(__p);
              if ((v207[23] & 0x80000000) != 0)
                operator delete(*(void **)v207);
              AMCP::IOAudio1::Control::create_from_service_list((uint64_t **)&__p, v5, (io_object_t *)v195[0], (io_object_t *)v195[1]);
              v49 = (char *)__p;
              *(_OWORD *)v187 = 0u;
              v188 = 0u;
              if (__p != v193)
              {
                v50 = 0;
                v188 = 0uLL;
                do
                {
                  v51 = *(_QWORD *)(v5 + 536);
                  v52 = *(_QWORD *)(v5 + 544);
                  if (v51 == v52)
                    goto LABEL_84;
                  do
                  {
                    v53 = *(_DWORD *)(*(_QWORD *)v51 + 20);
                    v54 = *(_DWORD *)(*(_QWORD *)v49 + 20);
                    if (v53)
                      v55 = v54 == 0;
                    else
                      v55 = 1;
                    if (v55)
                    {
                      if (!(v53 | v54))
                        goto LABEL_83;
                    }
                    else if (IOObjectIsEqualTo(v53, v54))
                    {
                      goto LABEL_83;
                    }
                    v51 += 8;
                  }
                  while (v51 != v52);
                  v51 = v52;
LABEL_83:
                  if (v51 == *(_QWORD *)(v5 + 544))
                  {
LABEL_84:
                    v56 = (char *)*((_QWORD *)&v188 + 1);
                    if (*((_QWORD *)&v188 + 1) >= v50)
                    {
                      v58 = (uint64_t)(*((_QWORD *)&v188 + 1) - v188) >> 3;
                      v59 = v58 + 1;
                      if ((unint64_t)(v58 + 1) >> 61)
LABEL_264:
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if ((uint64_t)(v50 - v188) >> 2 > v59)
                        v59 = (uint64_t)(v50 - v188) >> 2;
                      if (v50 - (unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
                        v60 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v60 = v59;
                      if (v60)
                        v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v60);
                      else
                        v61 = 0;
                      v62 = (_QWORD *)(v60 + 8 * v58);
                      *v62 = v49;
                      v57 = (uint64_t)(v62 + 1);
                      if (*((_QWORD *)&v188 + 1) != (_QWORD)v188)
                      {
                        do
                        {
                          v63 = *((_QWORD *)v56 - 1);
                          v56 -= 8;
                          *--v62 = v63;
                        }
                        while (v56 != (char *)v188);
                        v56 = (char *)v188;
                      }
                      v50 = v60 + 8 * v61;
                      *(_QWORD *)&v188 = v62;
                      if (v56)
                        operator delete(v56);
                    }
                    else
                    {
                      **((_QWORD **)&v188 + 1) = v49;
                      v57 = *((_QWORD *)&v188 + 1) + 8;
                    }
                    *(_QWORD *)&v64 = v188;
                    *((_QWORD *)&v64 + 1) = v57;
                    v188 = v64;
                  }
                  v49 += 8;
                }
                while (v49 != v193);
              }
              v65 = *(AMCP::IOAudio1::Control ***)(v5 + 536);
              if (v65 != *(AMCP::IOAudio1::Control ***)(v5 + 544))
              {
                v66 = 0;
                *(_OWORD *)v187 = 0u;
                do
                {
                  v67 = (char *)__p;
                  v68 = v193;
                  if (__p == v193)
                    goto LABEL_116;
                  do
                  {
                    v69 = *(_DWORD *)(*(_QWORD *)v67 + 20);
                    v70 = *((_DWORD *)*v65 + 5);
                    if (v69)
                      v71 = v70 == 0;
                    else
                      v71 = 1;
                    if (v71)
                    {
                      if (!(v69 | v70))
                        goto LABEL_115;
                    }
                    else if (IOObjectIsEqualTo(v69, v70))
                    {
                      goto LABEL_115;
                    }
                    v67 += 8;
                  }
                  while (v67 != v68);
                  v67 = v68;
LABEL_115:
                  if (v67 == v193)
                  {
LABEL_116:
                    v72 = (char *)v187[1];
                    if (v187[1] >= v66)
                    {
                      v74 = ((char *)v187[1] - (char *)v187[0]) >> 3;
                      v75 = v74 + 1;
                      if ((unint64_t)(v74 + 1) >> 61)
                        goto LABEL_264;
                      if ((int64_t)((uint64_t)v66 - (unint64_t)v187[0]) >> 2 > v75)
                        v75 = (int64_t)((uint64_t)v66 - (unint64_t)v187[0]) >> 2;
                      if ((unint64_t)v66 - (unint64_t)v187[0] >= 0x7FFFFFFFFFFFFFF8)
                        v76 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v76 = v75;
                      if (v76)
                        v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v76);
                      else
                        v77 = 0;
                      v78 = (AMCP::IOAudio1::Control ***)(v76 + 8 * v74);
                      *v78 = v65;
                      v73 = (uint64_t)(v78 + 1);
                      if (v187[1] != v187[0])
                      {
                        do
                        {
                          v79 = (AMCP::IOAudio1::Control **)*((_QWORD *)v72 - 1);
                          v72 -= 8;
                          *--v78 = v79;
                        }
                        while (v72 != v187[0]);
                        v72 = (char *)v187[0];
                      }
                      v66 = (void *)(v76 + 8 * v77);
                      v187[0] = v78;
                      if (v72)
                        operator delete(v72);
                    }
                    else
                    {
                      *(_QWORD *)v187[1] = v65;
                      v73 = (uint64_t)v187[1] + 8;
                    }
                    *(void **)&v80 = v187[0];
                    *((_QWORD *)&v80 + 1) = v73;
                    *(_OWORD *)v187 = v80;
                  }
                  ++v65;
                }
                while (v65 != *(AMCP::IOAudio1::Control ***)(v5 + 544));
              }
              if (v187[0] != v187[1])
              {
                v81 = (uint64_t **)v187[0];
                do
                {
                  v82 = *v81++;
                  v83 = *v82;
                  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v82 + 8) + 16) + 32) + 16), *(_DWORD *)(*v82 + 16));
                  *(_DWORD *)(v83 + 16) = 0;
                }
                while (v81 != v187[1]);
                v65 = *(AMCP::IOAudio1::Control ***)(v5 + 536);
                v84 = *(AMCP::IOAudio1::Control ***)(v5 + 544);
                if (v65 != v84)
                {
                  while (2)
                  {
                    v85 = (AMCP::IOAudio1::Control ***)v187[0];
                    while (*v65 != **v85)
                    {
                      if (++v85 == v187[1])
                        goto LABEL_143;
                    }
                    if (v187[1] == v85)
                    {
LABEL_143:
                      if (++v65 != v84)
                        continue;
                      goto LABEL_144;
                    }
                    break;
                  }
                  if (v65 == v84)
                    goto LABEL_144;
                  v161 = v65 + 1;
                  if (v65 + 1 != v84)
                  {
                    do
                    {
                      v162 = *v161;
                      v163 = (AMCP::IOAudio1::Control ***)v187[0];
                      while (v162 != **v163)
                      {
                        if (++v163 == v187[1])
                          goto LABEL_253;
                      }
                      if (v187[1] != v163)
                        goto LABEL_256;
LABEL_253:
                      *v161 = 0;
                      v164 = *v65;
                      *v65 = v162;
                      if (v164)
                        (*(void (**)(AMCP::IOAudio1::Control *))(*(_QWORD *)v164 + 8))(v164);
                      ++v65;
LABEL_256:
                      ++v161;
                    }
                    while (v161 != v84);
                    v84 = *(AMCP::IOAudio1::Control ***)(v5 + 544);
                  }
                  if (v65 == v84)
                  {
LABEL_144:
                    v65 = v84;
                    goto LABEL_145;
                  }
                  while (v84 != v65)
                  {
                    v166 = (uint64_t)*--v84;
                    v165 = v166;
                    *v84 = 0;
                    if (v166)
                      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
                  }
                  *(_QWORD *)(v5 + 544) = v65;
                }
              }
LABEL_145:
              v86 = (AMCP::IOAudio1::Control ***)(v5 + 536);
              if ((_QWORD)v188 != *((_QWORD *)&v188 + 1))
              {
                v87 = (_QWORD *)(v5 + 552);
                v88 = (AMCP::IOAudio1::Control ***)v188;
                do
                {
                  v89 = *v88;
                  if ((unint64_t)v65 >= *v87)
                  {
                    v91 = v65 - *v86;
                    if ((unint64_t)(v91 + 1) >> 61)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v92 = *v87 - (_QWORD)*v86;
                    v93 = v92 >> 2;
                    if (v92 >> 2 <= (unint64_t)(v91 + 1))
                      v93 = v91 + 1;
                    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                      v94 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v93;
                    *(_QWORD *)&v207[32] = v5 + 552;
                    if (v94)
                      v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v94);
                    else
                      v95 = 0;
                    v96 = (_QWORD *)(v94 + 8 * v91);
                    v97 = v94 + 8 * v95;
                    *(_QWORD *)&v207[24] = v97;
                    v98 = *v89;
                    *v89 = 0;
                    *v96 = v98;
                    v65 = (AMCP::IOAudio1::Control **)(v96 + 1);
                    *(_QWORD *)&v207[16] = v96 + 1;
                    v99 = *(_QWORD **)(v5 + 544);
                    v100 = *(_QWORD **)(v5 + 536);
                    if (v99 == v100)
                    {
                      v102 = vdupq_n_s64((unint64_t)v99);
                    }
                    else
                    {
                      do
                      {
                        v101 = *--v99;
                        *v99 = 0;
                        *--v96 = v101;
                      }
                      while (v99 != v100);
                      v102 = *(int64x2_t *)v86;
                      v65 = *(AMCP::IOAudio1::Control ***)&v207[16];
                      v97 = *(_QWORD *)&v207[24];
                    }
                    *(_QWORD *)(v5 + 536) = v96;
                    *(_QWORD *)(v5 + 544) = v65;
                    *(int64x2_t *)&v207[8] = v102;
                    v103 = *(_QWORD *)(v5 + 552);
                    *(_QWORD *)(v5 + 552) = v97;
                    *(_QWORD *)&v207[24] = v103;
                    *(_QWORD *)v207 = v102.i64[0];
                    std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)v207);
                  }
                  else
                  {
                    v90 = *v89;
                    *v89 = 0;
                    *v65++ = v90;
                  }
                  *(_QWORD *)(v5 + 544) = v65;
                  ++v88;
                }
                while (v88 != *((AMCP::IOAudio1::Control ****)&v188 + 1));
              }
              for (i = *v86; i != v65; ++i)
              {
                v105 = *i;
                v106 = *((_DWORD *)*i + 4);
                if (v106)
                {
                  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v199, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v105 + 1) + 16) + 32) + 16), v106);
                  v107 = v199;
                  if (v199)
                  {
                    memset(v207, 0, 32);
                    *(_DWORD *)&v207[32] = 1065353216;
                    v110 = *((_DWORD *)v105 + 5);
                    v109 = (io_object_t *)((char *)v105 + 20);
                    v108 = v110;
                    if (!v110)
                    {
                      v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v167, "cannot create io_object_proxy from null io_object");
                      v168 = (void (*)(void *))MEMORY[0x1E0DE4338];
                      v169 = (struct type_info *)MEMORY[0x1E0DE4E80];
                      goto LABEL_268;
                    }
                    properties = 0;
                    v111 = IORegistryEntryCreateCFProperties(v108, &properties, 0, 0);
                    if ((_DWORD)v111)
                    {
                      v170 = v111;
                      v167 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
                      v171 = std::system_category();
                      MEMORY[0x1B5E5022C](v167, v170, v171, "Error on get_properties");
                      v168 = (void (*)(void *))MEMORY[0x1E0DE4580];
                      v169 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_268:
                      __cxa_throw(v167, v169, v168);
                    }
                    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
                    simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v107);
                    AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)v207, v109, (CFDictionaryRef *)&cf);
                    AMCP::IOAudio1::update_control_range(simple_required, (uint64_t)v207, (CFDictionaryRef *)&cf);
                    properties = (CFMutableDictionaryRef)(v107 + 12);
                    LOBYTE(v190) = 1;
                    caulk::concurrent::shared_spin_lock::lock(v107 + 12);
                    v113 = *(_QWORD **)&v207[16];
                    if (*(_QWORD *)&v207[16])
                    {
                      do
                      {
                        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v107 + 2), (unsigned int *)(v113[4] + 40), v113 + 4);
                        v113 = (_QWORD *)*v113;
                      }
                      while (v113);
                    }
                    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
                    properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
                    v190 = 0;
                    v107[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v107, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
                    if (cf)
                      CFRelease(cf);
                    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&v207[16]);
                    v114 = *(void **)v207;
                    *(_QWORD *)v207 = 0;
                    if (v114)
                      operator delete(v114);
                  }
                  v115 = v200;
                  if (v200)
                  {
                    v116 = (unint64_t *)&v200->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                }
                else
                {
                  AMCP::IOAudio1::Control::build_core(*i);
                }
              }
              AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v199, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32) + 16), *(_DWORD *)(v5 + 32));
              v118 = v199;
              v4 = v186;
              if (v199)
              {
                memset(v207, 0, 32);
                *(_DWORD *)&v207[32] = 1065353216;
                AMCP::IOAudio1::Device::update_core_common(v5, (uint64_t)v207);
                properties = (CFMutableDictionaryRef)(v118 + 12);
                LOBYTE(v190) = 1;
                caulk::concurrent::shared_spin_lock::lock(v118 + 12);
                v119 = *(_QWORD **)&v207[16];
                if (*(_QWORD *)&v207[16])
                {
                  do
                  {
                    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v118 + 2), (unsigned int *)(v119[4] + 40), v119 + 4);
                    v119 = (_QWORD *)*v119;
                  }
                  while (v119);
                }
                std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
                properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
                v190 = 0;
                v118[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v118, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
                std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&v207[16]);
                v120 = *(void **)v207;
                *(_QWORD *)v207 = 0;
                if (v120)
                  operator delete(v120);
              }
              v121 = v200;
              if (v200)
              {
                v122 = (unint64_t *)&v200->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              v124 = (AMCP::Log::Scope_Registry *)kdebug_trace();
              AMCP::Log::Scope_Registry::get(v124);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v199, "com.apple.coreaudio", "AMCP");
              v126 = v199[4];
              switch(v126)
              {
                case 1:
                  AMCP::Log::Scope_Registry::get(v125);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
                  v147 = *(std::__shared_weak_count **)&v207[8];
                  v148 = **(NSObject ***)v207;
                  if (*(_QWORD *)&v207[8])
                  {
                    v149 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
                  if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_231;
                  v151 = pthread_self();
                  v152 = pthread_mach_thread_np(v151);
                  v153 = *(const __CFString **)(v5 + 24);
                  if (!v153)
                  {
                    v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v185, "Could not construct");
                    __cxa_throw(v185, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v154 = v152;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v153);
                  if (v191 >= 0)
                    p_properties = &properties;
                  else
                    p_properties = properties;
                  *(_DWORD *)v207 = 67109890;
                  *(_DWORD *)&v207[4] = v154;
                  *(_WORD *)&v207[8] = 2080;
                  *(_QWORD *)&v207[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v207[18] = 1024;
                  *(_DWORD *)&v207[20] = 705;
                  *(_WORD *)&v207[24] = 2080;
                  *(_QWORD *)&v207[26] = p_properties;
                  v136 = v148;
                  v137 = OS_LOG_TYPE_DEFAULT;
                  break;
                case 2:
                  AMCP::Log::Scope_Registry::get(v125);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
                  v138 = *(std::__shared_weak_count **)&v207[8];
                  v139 = **(NSObject ***)v207;
                  if (*(_QWORD *)&v207[8])
                  {
                    v140 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
                    do
                      v141 = __ldaxr(v140);
                    while (__stlxr(v141 - 1, v140));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  if (!os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                    goto LABEL_231;
                  v142 = pthread_self();
                  v143 = pthread_mach_thread_np(v142);
                  v144 = *(const __CFString **)(v5 + 24);
                  if (!v144)
                  {
                    v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v181, "Could not construct");
                    __cxa_throw(v181, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v145 = v143;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v144);
                  if (v191 >= 0)
                    v146 = &properties;
                  else
                    v146 = properties;
                  *(_DWORD *)v207 = 67109890;
                  *(_DWORD *)&v207[4] = v145;
                  *(_WORD *)&v207[8] = 2080;
                  *(_QWORD *)&v207[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v207[18] = 1024;
                  *(_DWORD *)&v207[20] = 705;
                  *(_WORD *)&v207[24] = 2080;
                  *(_QWORD *)&v207[26] = v146;
                  _os_log_debug_impl(&dword_1B57BA000, v139, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d End configuration change for device '%s'", v207, 0x22u);
                  goto LABEL_229;
                case 3:
                  AMCP::Log::Scope_Registry::get(v125);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v207, "com.apple.coreaudio", "AMCP");
                  v127 = *(std::__shared_weak_count **)&v207[8];
                  v128 = **(NSObject ***)v207;
                  if (*(_QWORD *)&v207[8])
                  {
                    v129 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                      std::__shared_weak_count::__release_weak(v127);
                    }
                  }
                  if (!os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
                    goto LABEL_231;
                  v131 = pthread_self();
                  v132 = pthread_mach_thread_np(v131);
                  v133 = *(const __CFString **)(v5 + 24);
                  if (!v133)
                  {
                    v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v184, "Could not construct");
                    __cxa_throw(v184, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  v134 = v132;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v133);
                  if (v191 >= 0)
                    v135 = &properties;
                  else
                    v135 = properties;
                  *(_DWORD *)v207 = 67109890;
                  *(_DWORD *)&v207[4] = v134;
                  *(_WORD *)&v207[8] = 2080;
                  *(_QWORD *)&v207[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v207[18] = 1024;
                  *(_DWORD *)&v207[20] = 705;
                  *(_WORD *)&v207[24] = 2080;
                  *(_QWORD *)&v207[26] = v135;
                  v136 = v128;
                  v137 = OS_LOG_TYPE_INFO;
                  break;
                default:
                  goto LABEL_231;
              }
              _os_log_impl(&dword_1B57BA000, v136, v137, "%6u %32s:%-5d End configuration change for device '%s'", v207, 0x22u);
LABEL_229:
              if (v191 < 0)
                operator delete(properties);
LABEL_231:
              v156 = v200;
              if (v200)
              {
                v157 = (unint64_t *)&v200->__shared_owners_;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              if (v187[0])
                operator delete(v187[0]);
              if ((_QWORD)v188)
                operator delete((void *)v188);
              *(_QWORD *)v207 = &__p;
              std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
              *(_QWORD *)v207 = v195;
              std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
              *(_QWORD *)v207 = &v205;
              std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
              *(_QWORD *)v207 = buf;
              std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
              *(_QWORD *)buf = &v196;
              std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              goto LABEL_241;
            }
            v176 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
            v179 = std::system_category();
            MEMORY[0x1B5E5022C](v176, v44, v179, "Error on get_properties");
            v177 = (void (*)(void *))MEMORY[0x1E0DE4580];
            v178 = (struct type_info *)MEMORY[0x1E0DE4E38];
          }
          else
          {
            v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v176, "cannot create io_object_proxy from null io_object");
            v177 = (void (*)(void *))MEMORY[0x1E0DE4338];
            v178 = (struct type_info *)MEMORY[0x1E0DE4E80];
          }
          __cxa_throw(v176, v178, v177);
        }
        v172 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
        v175 = std::system_category();
        MEMORY[0x1B5E5022C](v172, CFProperties, v175, "Error on get_properties");
        v173 = (void (*)(void *))MEMORY[0x1E0DE4580];
        v174 = (struct type_info *)MEMORY[0x1E0DE4E38];
      }
      else
      {
        v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v172, "cannot create io_object_proxy from null io_object");
        v173 = (void (*)(void *))MEMORY[0x1E0DE4338];
        v174 = (struct type_info *)MEMORY[0x1E0DE4E80];
      }
      __cxa_throw(v172, v174, v173);
    }
  }
}

void sub_1B5B46CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,void **a32,std::__shared_weak_count *a33,char *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  __cxa_free_exception(v40);
  v42 = a33;
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v39)
    operator delete(v39);
  if (__p)
    operator delete(__p);
  a32 = (void **)&a19;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a19 = &a25;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = a9;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)&a34;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a34 = &a28;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  v45 = (unint64_t *)&a10->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_(_QWORD *a1, AMCP::IOAudio1::Stream ***a2)
{
  AMCP::IOAudio1::Stream **v4;
  unint64_t v5;
  AMCP::IOAudio1::Stream **v6;
  AMCP::IOAudio1::Stream **v7;
  AMCP::IOAudio1::Stream **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  AMCP::IOAudio1::Stream ***v15;
  AMCP::IOAudio1::Stream **v16;
  __int128 v17;
  AMCP::IOAudio1::Stream **v18;
  AMCP::IOAudio1::Stream **v19;
  unint64_t v20;
  __int128 v21;
  AMCP::IOAudio1::Stream **v22;
  AMCP::IOAudio1::Stream **v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  AMCP::IOAudio1::Stream ***v31;
  AMCP::IOAudio1::Stream **v32;
  __int128 v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  AMCP::IOAudio1::Stream **v37;
  AMCP::IOAudio1::Stream **v38;
  uint64_t v39;
  AMCP::IOAudio1::Stream **v40;
  uint64_t v41;
  AMCP::IOAudio1::Stream *v42;
  AMCP::IOAudio1::Stream *v43;
  AMCP::IOAudio1::Stream **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  AMCP::IOAudio1::Stream **i;
  AMCP::IOAudio1::Stream *v57;
  unsigned int v58;
  _DWORD *v59;
  io_registry_entry_t v60;
  const applesauce::CF::DictionaryRef *v61;
  io_registry_entry_t v62;
  uint64_t v63;
  _QWORD *j;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  std::runtime_error *exception;
  const std::error_category *v71;
  void (*v72)(void *);
  struct type_info *v73;
  __int128 v74;
  __int128 v75;
  AMCP::IOAudio1::Stream ***v76;
  CFTypeRef cf;
  CFTypeRef v78;
  void *__p[2];
  __int128 v80;
  int v81;
  _DWORD *v82;
  std::__shared_weak_count *v83;
  CFMutableDictionaryRef properties;
  int v85;

  v4 = *a2;
  v74 = 0u;
  if (*a2 != a2[1])
  {
    v5 = 0;
    v74 = 0uLL;
    do
    {
      v6 = (AMCP::IOAudio1::Stream **)*a1;
      v7 = (AMCP::IOAudio1::Stream **)a1[1];
      if ((AMCP::IOAudio1::Stream **)*a1 == v7)
      {
        v8 = (AMCP::IOAudio1::Stream **)*a1;
      }
      else
      {
        while (!AMCP::IOAudio1::operator==(*((_DWORD *)*v6 + 5), *((_DWORD *)*v4 + 5)))
        {
          if (++v6 == v7)
          {
            v6 = v7;
            break;
          }
        }
        v8 = v6;
        v6 = (AMCP::IOAudio1::Stream **)a1[1];
      }
      if (v8 == v6)
      {
        v9 = (char *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1) >= v5)
        {
          v11 = (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
LABEL_128:
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v5 - v74) >> 2 > v12)
            v12 = (uint64_t)(v5 - v74) >> 2;
          if (v5 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
          else
            v14 = 0;
          v15 = (AMCP::IOAudio1::Stream ***)(v13 + 8 * v11);
          *v15 = v4;
          v10 = (uint64_t)(v15 + 1);
          if (*((_QWORD *)&v74 + 1) != (_QWORD)v74)
          {
            do
            {
              v16 = (AMCP::IOAudio1::Stream **)*((_QWORD *)v9 - 1);
              v9 -= 8;
              *--v15 = v16;
            }
            while (v9 != (char *)v74);
            v9 = (char *)v74;
          }
          v5 = v13 + 8 * v14;
          *(_QWORD *)&v74 = v15;
          if (v9)
            operator delete(v9);
        }
        else
        {
          **((_QWORD **)&v74 + 1) = v4;
          v10 = *((_QWORD *)&v74 + 1) + 8;
        }
        *(_QWORD *)&v17 = v74;
        *((_QWORD *)&v17 + 1) = v10;
        v74 = v17;
      }
      ++v4;
    }
    while (v4 != a2[1]);
  }
  v18 = (AMCP::IOAudio1::Stream **)*a1;
  v19 = (AMCP::IOAudio1::Stream **)a1[1];
  if ((AMCP::IOAudio1::Stream **)*a1 == v19)
  {
    v19 = (AMCP::IOAudio1::Stream **)*a1;
    v21 = 0uLL;
  }
  else
  {
    v20 = 0;
    v21 = 0uLL;
    do
    {
      v22 = *a2;
      v23 = a2[1];
      if (*a2 != v23)
      {
        v75 = v21;
        while (!AMCP::IOAudio1::operator==(*((_DWORD *)*v22 + 5), *((_DWORD *)*v18 + 5)))
        {
          if (++v22 == v23)
          {
            v22 = v23;
            break;
          }
        }
        v21 = v75;
        v19 = (AMCP::IOAudio1::Stream **)a1[1];
      }
      if (v22 == v19)
      {
        v24 = (char *)*((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1) >= v20)
        {
          v26 = (char *)v21;
          v27 = (uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_128;
          if ((uint64_t)(v20 - v21) >> 2 > v28)
            v28 = (uint64_t)(v20 - v21) >> 2;
          if (v20 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29);
          else
            v30 = 0;
          v31 = (AMCP::IOAudio1::Stream ***)(v29 + 8 * v27);
          *v31 = v18;
          v25 = (uint64_t)(v31 + 1);
          if (v24 != v26)
          {
            do
            {
              v32 = (AMCP::IOAudio1::Stream **)*((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v31 = v32;
            }
            while (v24 != v26);
            v24 = v26;
          }
          v20 = v29 + 8 * v30;
          *(_QWORD *)&v21 = v31;
          if (v24)
          {
            v76 = v31;
            operator delete(v24);
            *(_QWORD *)&v21 = v76;
          }
        }
        else
        {
          **((_QWORD **)&v21 + 1) = v18;
          v25 = *((_QWORD *)&v21 + 1) + 8;
        }
        *((_QWORD *)&v21 + 1) = v25;
        v19 = (AMCP::IOAudio1::Stream **)a1[1];
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v33 = v21;
  if ((_QWORD)v21 != *((_QWORD *)&v21 + 1))
  {
    v34 = (uint64_t **)v21;
    do
    {
      v35 = *v34++;
      v36 = *v35;
      AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v35 + 8) + 16) + 32) + 16), *(_DWORD *)(*v35 + 16));
      *(_DWORD *)(v36 + 16) = 0;
    }
    while (v34 != *((uint64_t ***)&v33 + 1));
    v38 = (AMCP::IOAudio1::Stream **)*a1;
    v37 = (AMCP::IOAudio1::Stream **)a1[1];
    if ((AMCP::IOAudio1::Stream **)*a1 != v37)
    {
      v19 = (AMCP::IOAudio1::Stream **)a1[1];
      while (2)
      {
        v39 = v33;
        while (!AMCP::IOAudio1::operator==(*((_DWORD *)*v38 + 5), *(_DWORD *)(**(_QWORD **)v39 + 20)))
        {
          v39 += 8;
          if (v39 == *((_QWORD *)&v33 + 1))
            goto LABEL_67;
        }
        if (*((_QWORD *)&v33 + 1) == v39)
        {
LABEL_67:
          if (++v38 != v37)
            continue;
          goto LABEL_83;
        }
        break;
      }
      if (v38 == v37)
        goto LABEL_83;
      v40 = v38 + 1;
      if (v38 + 1 != v37)
      {
        v19 = v38;
        do
        {
          v41 = v33;
          while (!AMCP::IOAudio1::operator==(*((_DWORD *)*v40 + 5), *(_DWORD *)(**(_QWORD **)v41 + 20)))
          {
            v41 += 8;
            if (v41 == *((_QWORD *)&v33 + 1))
              goto LABEL_77;
          }
          if (*((_QWORD *)&v33 + 1) != v41)
            goto LABEL_80;
LABEL_77:
          v42 = *v40;
          *v40 = 0;
          v43 = *v19;
          *v19 = v42;
          if (v43)
            (*(void (**)(AMCP::IOAudio1::Stream *))(*(_QWORD *)v43 + 8))(v43);
          ++v19;
LABEL_80:
          ++v40;
        }
        while (v40 != v37);
        goto LABEL_83;
      }
    }
    v19 = v38;
LABEL_83:
    v44 = (AMCP::IOAudio1::Stream **)a1[1];
    if (v19 != v44)
    {
      while (v44 != v19)
      {
        v46 = (uint64_t)*--v44;
        v45 = v46;
        *v44 = 0;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      a1[1] = v19;
    }
  }
  if ((_QWORD)v74 != *((_QWORD *)&v74 + 1))
  {
    v47 = (uint64_t **)v74;
    do
    {
      v48 = *v47;
      v50 = (char *)*a1;
      v49 = (char *)a1[1];
      if (v49 != (char *)*a1)
      {
        v51 = (uint64_t)&v49[-*a1] >> 3;
        do
        {
          v52 = v51 >> 1;
          v53 = &v50[8 * (v51 >> 1)];
          v55 = *(_QWORD *)v53;
          v54 = v53 + 8;
          v51 += ~(v51 >> 1);
          if (*(_DWORD *)(v55 + 28) < *(_DWORD *)(*v48 + 28))
            v50 = v54;
          else
            v51 = v52;
        }
        while (v51);
        v49 = v50;
      }
      std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::emplace<std::unique_ptr<AMCP::IOAudio1::Stream>>(a1, v49, v48);
      ++v47;
    }
    while (v47 != *((uint64_t ***)&v74 + 1));
    v19 = (AMCP::IOAudio1::Stream **)a1[1];
  }
  for (i = (AMCP::IOAudio1::Stream **)*a1; i != v19; ++i)
  {
    v57 = *i;
    v58 = *((_DWORD *)*i + 4);
    if (v58)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v82, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v57 + 1) + 16) + 32) + 16), v58);
      v59 = v82;
      if (v82)
      {
        *(_OWORD *)__p = 0u;
        v80 = 0u;
        v81 = 1065353216;
        AMCP::IOAudio1::Device::get_engine_registry_entries(&v78, *(const void **)(*((_QWORD *)v57 + 1) + 464));
        v62 = *((_DWORD *)v57 + 5);
        v61 = (AMCP::IOAudio1::Stream *)((char *)v57 + 20);
        v60 = v62;
        if (!v62)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
          v72 = (void (*)(void *))MEMORY[0x1E0DE4338];
          v73 = (struct type_info *)MEMORY[0x1E0DE4E80];
LABEL_127:
          __cxa_throw(exception, v73, v72);
        }
        properties = 0;
        v63 = IORegistryEntryCreateCFProperties(v60, &properties, 0, 0);
        if ((_DWORD)v63)
        {
          v69 = v63;
          exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
          v71 = std::system_category();
          MEMORY[0x1B5E5022C](exception, v69, v71, "Error on get_properties");
          v72 = (void (*)(void *))MEMORY[0x1E0DE4580];
          v73 = (struct type_info *)MEMORY[0x1E0DE4E38];
          goto LABEL_127;
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
        AMCP::IOAudio1::update_stream_core((uint64_t)__p, v61, (AMCP::IOAudio1 **)&v78, (CFDictionaryRef *)&cf);
        if (cf)
          CFRelease(cf);
        if (v78)
          CFRelease(v78);
        properties = (CFMutableDictionaryRef)(v59 + 12);
        LOBYTE(v85) = 1;
        caulk::concurrent::shared_spin_lock::lock(v59 + 12);
        for (j = (_QWORD *)v80; j; j = (_QWORD *)*j)
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v59 + 2), (unsigned int *)(j[4] + 40), j + 4);
        std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
        properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
        v85 = 0;
        v59[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v59, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
        std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v80);
        v65 = __p[0];
        __p[0] = 0;
        if (v65)
          operator delete(v65);
      }
      v66 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v68 = __ldaxr(p_shared_owners);
        while (__stlxr(v68 - 1, p_shared_owners));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
    }
    else
    {
      AMCP::IOAudio1::Stream::build_core(*i);
    }
  }
  if ((_QWORD)v33)
    operator delete((void *)v33);
  if ((_QWORD)v74)
    operator delete((void *)v74);
}

void sub_1B5B4770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v28);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a15);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (v26)
    operator delete(v26);
  if (v27)
    operator delete(v27);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698C538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698C538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::operator()(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11[4];
  __int128 v12;
  uint64_t v13[2];
  int v14;
  int v15;
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a2 == -536870896)
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD **)(v2 + 64);
    v4 = *(_QWORD **)(v2 + 72);
    if (v3 != v4)
    {
      while (*v3 != *(_QWORD *)(result + 16))
      {
        v3 += 2;
        if (v3 == v4)
          return result;
      }
    }
    v16 = v3;
    if (v3 != v4)
    {
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_1E69A0170;
      *((_BYTE *)v5 + 24) = 0;
      v13[0] = (uint64_t)(v5 + 3);
      v13[1] = (uint64_t)v5;
      v14 = 0;
      v15 = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
      v7 = *(_DWORD *)(v2 + 48);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v11, v13);
      *(_QWORD *)&v12 = v2;
      *((_QWORD *)&v12 + 1) = &v16;
      v18 = 0;
      v8 = (char *)operator new(0x38uLL);
      *(_QWORD *)v8 = &off_1E69A0078;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v8 + 8), v11);
      *(_OWORD *)(v8 + 40) = v12;
      v18 = v8;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v7, 9, (uint64_t)v17);
      v9 = v18;
      if (v18 == v17)
      {
        v10 = 4;
        v9 = v17;
      }
      else
      {
        if (!v18)
        {
LABEL_12:
          std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
          return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
        }
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_12;
    }
  }
  return result;
}

void sub_1B5B47990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  if (!a2)
    _Unwind_Resume(exception_object);
  v17 = *(_QWORD **)(v15 - 48);
  if (v17 == (_QWORD *)(v15 - 72))
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 72);
  }
  else
  {
    if (!v17)
    {
LABEL_7:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
      JUMPOUT(0x1B5B47960);
    }
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
  goto LABEL_7;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target_type()
{
}

_DWORD *std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(_DWORD *a1, io_object_t object)
{
  uint64_t v3;
  uint64_t v5;
  void *exception;
  const std::error_category *v7;

  *a1 = object;
  if (object)
  {
    v3 = IOObjectRetain(object);
    if ((_DWORD)v3)
    {
      v5 = v3;
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  return a1;
}

void sub_1B5B47AF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>(char **a1, io_object_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  _DWORD *v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;

  v2 = (a1[1] - *a1) >> 2;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 62)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 1 > v3)
    v3 = v6 >> 1;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v22 = a1 + 2;
  if (v7)
  {
    if (v7 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(4 * v7);
  }
  else
  {
    v8 = 0;
  }
  v18 = v8;
  v19 = &v8[4 * v2];
  v20 = v19;
  v21 = &v8[4 * v7];
  std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(v19, a2);
  v10 = *a1;
  v9 = a1[1];
  v12 = v19;
  v11 = v19;
  if (v9 != *a1)
  {
    v13 = a1[1];
    do
    {
      *((_DWORD *)v12 - 1) = 0;
      v12 -= 4;
      v14 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *(_DWORD *)v12 = v14;
      *(_DWORD *)v13 = 0;
    }
    while (v13 != v10);
  }
  v15 = v11 + 4;
  *a1 = v12;
  a1[1] = v11 + 4;
  v16 = a1[2];
  a1[2] = v21;
  v20 = v9;
  v21 = v16;
  v18 = v10;
  v19 = v10;
  std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer((uint64_t)&v18);
  return v15;
}

void sub_1B5B47C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IOKit::Service_Child_Range_For::~Service_Child_Range_For(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_DWORD *)this)
    IOObjectRelease(*(_DWORD *)this);
}

uint64_t std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_DWORD *)(i - 4);
    *(_QWORD *)(a1 + 16) = i - 4;
    std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t applesauce::iokit::kern_return_exception::kern_return_exception(uint64_t a1, const void **a2, mach_error_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  char *v9;
  size_t v10;
  std::string *v11;
  __int128 v12;
  std::string v14;
  std::string v15;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 32;
  v9 = mach_error_string(a3);
  v10 = strlen(v9);
  v11 = std::string::append(&v14, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E698C510;
  *(_DWORD *)(a1 + 16) = a3;
  return a1;
}

void sub_1B5B47DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void applesauce::iokit::kern_return_exception::~kern_return_exception(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B5E50688);
}

void AMCP::IOKit::Service_Parent_Range_For::~Service_Parent_Range_For(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  if (*(_DWORD *)this)
    IOObjectRelease(*(_DWORD *)this);
}

void HALS_RemotePlugInEngine::~HALS_RemotePlugInEngine(HALS_RemotePlugInEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_RemotePlugInEngine::GetZeroTimeStamp(HALS_RemotePlugInEngine *this, int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  HALB_Mutex *v5;
  uint64_t v6;
  _QWORD v8[9];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZNK23HALS_RemotePlugInEngine16GetZeroTimeStampEjRdRyS1__block_invoke;
  v8[3] = &unk_1E698D8D0;
  v8[4] = &v10;
  v8[5] = this;
  v9 = a2;
  v8[6] = a3;
  v8[7] = a4;
  v8[8] = a5;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1B5B47F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_RemotePlugInEngine::Register_IOThread(HALS_RemotePlugInEngine *this, unsigned int a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v10 = *((_QWORD *)this + 139);
  v12 = *(_QWORD *)(v10 + 400);
  v11 = *(std::__shared_weak_count **)(v10 + 408);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
  v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 176))(v12, *(unsigned int *)(v15 + 44), a3, a5, a6, a4);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v16;
}

void sub_1B5B48014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_RemotePlugInEngine::Unregister_IOThread(HALS_RemotePlugInEngine *this, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *((_QWORD *)this + 139);
  v6 = *(_QWORD *)(v4 + 400);
  v5 = *(std::__shared_weak_count **)(v4 + 408);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 184))(v6, *(unsigned int *)(v9 + 44), a3);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v10;
}

void sub_1B5B480D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_RemotePlugInEngine::RegisterIOBuffer(HALS_RemotePlugInEngine *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  HALB_Mutex *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[7];
  int v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZN23HALS_RemotePlugInEngine16RegisterIOBufferEbjjjPv_block_invoke;
  v22[3] = &unk_1E698D8F8;
  v22[5] = &v25;
  v22[6] = this;
  v24 = a2;
  v23 = a3;
  v22[4] = &v29;
  v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v22);
  v12 = 560947818;
  if (v30[3] && *((_DWORD *)v26 + 6))
  {
    v13 = *((_QWORD *)this + 139);
    v15 = *(_QWORD *)(v13 + 400);
    v14 = *(std::__shared_weak_count **)(v13 + 408);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v15 + 160))(v15, *(unsigned int *)(v18 + 44), *((unsigned int *)v26 + 6), a4, a2, a5, a6);
    if (v14)
    {
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  return v12;
}

void sub_1B5B48284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v19 - 96), 8);
  _Unwind_Resume(a1);
}

void HALS_RemotePlugInEngine::UnregisterIOBuffer(HALS_RemotePlugInEngine *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  HALB_Mutex *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[7];
  int v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN23HALS_RemotePlugInEngine18UnregisterIOBufferEbjjjPv_block_invoke;
  v20[3] = &unk_1E698D8F8;
  v20[5] = &v23;
  v20[6] = this;
  v22 = a2;
  v21 = a3;
  v20[4] = &v27;
  v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v20);
  if (v28[3] && *((_DWORD *)v24 + 6))
  {
    v12 = *((_QWORD *)this + 139);
    v14 = *(_QWORD *)(v12 + 400);
    v13 = *(std::__shared_weak_count **)(v12 + 408);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v14 + 168))(v14, *(unsigned int *)(v17 + 44), *((unsigned int *)v24 + 6), a4, a2, a5, a6);
    if (v13)
    {
      v18 = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
}

void sub_1B5B48440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v19 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_RemotePlugInEngine::CanSkipBeginEndIOOperation(HALS_RemotePlugInEngine *this)
{
  return 1;
}

uint64_t HALS_RemotePlugInEngine::_AllocateTempBuffers(HALS_RemotePlugInEngine *this)
{
  int64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  int *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  int64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unsigned int v51;
  char *v52;
  char *v53;
  int v54[2];
  std::__shared_weak_count *v55;

  HALS_IOEngine2::_AllocateTempBuffers(this);
  v2 = *(unsigned int *)((*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this) + 44);
  v3 = *((_QWORD *)this + 139);
  v4 = *(char **)(v3 + 400);
  v5 = *(_QWORD *)(v3 + 408);
  v52 = v4;
  v53 = (char *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v4
  {
    *(_QWORD *)v54 = v8;
    v55 = (std::__shared_weak_count *)v5;
    v9 = (int *)&v52;
  }
  else
  {
    v9 = v54;
  }
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v11 = (unint64_t *)(v53 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)v54;
  HALS_UCRemotePlugIn::register_shared_buffer(*(uint64_t *)v54, v2, 0, 0, 3u, **((void ***)this + 97), *(unsigned int *)(*((_QWORD *)this + 97) + 8));
  HALS_UCRemotePlugIn::register_shared_buffer(v13, v2, 0, 0, 4u, **((void ***)this + 98), *(unsigned int *)(*((_QWORD *)this + 98) + 8));
  HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList(&v52, *((_QWORD *)this + 96));
  v15 = v52;
  v14 = v53;
  if (v53 == v52)
  {
    v16 = 0;
    if (v53)
LABEL_68:
      operator delete(v14);
  }
  else
  {
    v51 = v2;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_DWORD *)v15;
      v20 = *((_QWORD *)v15 + 1);
      v21 = *((_DWORD *)v15 + 5);
      if ((unint64_t)v17 >= v18)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3) + 1;
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v18 - (_QWORD)v16) >> 3) > v22)
          v22 = 0x5555555555555556 * ((uint64_t)(v18 - (_QWORD)v16) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v16) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
        else
          v24 = 0;
        v25 = v23 + 8 * ((v17 - v16) >> 3);
        *(_DWORD *)v25 = v19;
        *(_QWORD *)(v25 + 8) = v20;
        *(_DWORD *)(v25 + 16) = v21;
        if (v17 == v16)
        {
          v27 = (char *)(v23 + 8 * ((v17 - v16) >> 3));
        }
        else
        {
          v26 = v23 + 8 * ((v17 - v16) >> 3);
          do
          {
            v27 = (char *)(v26 - 24);
            v28 = *(_OWORD *)(v17 - 24);
            *(_QWORD *)(v26 - 8) = *((_QWORD *)v17 - 1);
            *(_OWORD *)(v26 - 24) = v28;
            v17 -= 24;
            v26 -= 24;
          }
          while (v17 != v16);
        }
        v18 = v23 + 24 * v24;
        v17 = (char *)(v25 + 24);
        if (v16)
          operator delete(v16);
        v16 = v27;
      }
      else
      {
        *(_DWORD *)v17 = v19;
        *((_QWORD *)v17 + 1) = v20;
        *((_DWORD *)v17 + 4) = v21;
        v17 += 24;
      }
      v15 += 32;
    }
    while (v15 != v14);
    v29 = v17 - v16;
    if (v17 != v16)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = *(_QWORD *)v54;
      v35 = (unsigned __int128)(v29 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
      v36 = (v35 >> 2) + ((unint64_t)v35 >> 63);
      if (v36 <= 1)
        v37 = 1;
      else
        v37 = (v35 >> 2) + ((unint64_t)v35 >> 63);
      while (!HALS_UCRemotePlugIn::register_shared_buffer(v34, v51, 0, *(unsigned int *)&v16[24 * v33], 2u, *(void **)&v16[24 * v33 + 8], *(unsigned int *)&v16[24 * v33 + 16]))
      {
        if ((unint64_t)v31 >= v32)
        {
          v39 = (v31 - v30) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v32 - (_QWORD)v30) >> 1 > v40)
            v40 = (uint64_t)(v32 - (_QWORD)v30) >> 1;
          if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
            v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
          else
            v42 = 0;
          v43 = (char *)(v41 + 4 * v39);
          *(_DWORD *)v43 = v33;
          v38 = v43 + 4;
          while (v31 != v30)
          {
            v44 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          v32 = v41 + 4 * v42;
          if (v30)
            operator delete(v30);
          v30 = v43;
        }
        else
        {
          *(_DWORD *)v31 = v33;
          v38 = v31 + 4;
        }
        ++v33;
        v31 = v38;
        if (v33 == v37)
          goto LABEL_65;
      }
      if (v30 != v31)
      {
        v45 = v30;
        do
        {
          v46 = *(unsigned int *)v45;
          if (v36 <= v46)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          HALS_UCRemotePlugIn::unregister_shared_buffer(v34, v51, 0, *(_DWORD *)&v16[24 * v46], 2u);
          v45 += 4;
        }
        while (v45 != v31);
      }
LABEL_65:
      if (v30)
        operator delete(v30);
    }
    v14 = v52;
    if (v52)
      goto LABEL_68;
  }
  if (v16)
    operator delete(v16);
  v47 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return 0;
}

void sub_1B5B488CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void HALS_RemotePlugInEngine::_FreeTempBuffers(HALS_RemotePlugInEngine *this)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint8_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  __int128 v32;
  uint64_t v33;
  unsigned int *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint8_t buf[8];
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = *(_DWORD *)((*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this) + 44);
  v2 = *((_QWORD *)this + 139);
  v3 = *(const void **)(v2 + 400);
  v4 = *(std::__shared_weak_count **)(v2 + 408);
  *(_QWORD *)buf = v3;
  v46 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3
  {
    v43 = (uint64_t)v7;
    v44 = v4;
    v8 = buf;
  }
  else
  {
    v8 = (uint8_t *)&v43;
  }
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = v46;
  if (v46)
  {
    v10 = (unint64_t *)&v46->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (uint64_t *)((char *)this + 776);
  if (*((_QWORD *)this + 97))
  {
    v13 = v43;
    v14 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
    HALS_UCRemotePlugIn::unregister_shared_buffer(v13, *(_DWORD *)(v14 + 44), 0, 0, 3u);
  }
  v15 = (uint64_t *)((char *)this + 784);
  if (*((_QWORD *)this + 98))
  {
    v16 = v43;
    v17 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(_QWORD *)this + 320))(this);
    HALS_UCRemotePlugIn::unregister_shared_buffer(v16, *(_DWORD *)(v17 + 44), 0, 0, 4u);
  }
  HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList(&v41, *((_QWORD *)this + 96));
  v19 = v41;
  v18 = v42;
  if (v42 == v41)
  {
    v20 = 0;
  }
  else
  {
    v38 = (uint64_t *)((char *)this + 784);
    v39 = (uint64_t *)((char *)this + 776);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = *(_DWORD *)v19;
      v24 = *((_QWORD *)v19 + 1);
      v25 = *((_DWORD *)v19 + 5);
      if ((unint64_t)v21 >= v22)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3) + 1;
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v22 - (_QWORD)v20) >> 3) > v26)
          v26 = 0x5555555555555556 * ((uint64_t)(v22 - (_QWORD)v20) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v20) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v27);
        else
          v28 = 0;
        v29 = v27 + 8 * (((char *)v21 - (char *)v20) >> 3);
        *(_DWORD *)v29 = v23;
        *(_QWORD *)(v29 + 8) = v24;
        *(_DWORD *)(v29 + 16) = v25;
        if (v21 == v20)
        {
          v31 = (unsigned int *)(v27 + 8 * (((char *)v21 - (char *)v20) >> 3));
        }
        else
        {
          v30 = v27 + 8 * (((char *)v21 - (char *)v20) >> 3);
          do
          {
            v31 = (unsigned int *)(v30 - 24);
            v32 = *(_OWORD *)(v21 - 6);
            *(_QWORD *)(v30 - 8) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v30 - 24) = v32;
            v21 -= 6;
            v30 -= 24;
          }
          while (v21 != v20);
        }
        v22 = v27 + 24 * v28;
        v21 = (unsigned int *)(v29 + 24);
        if (v20)
          operator delete(v20);
        v20 = v31;
      }
      else
      {
        *v21 = v23;
        *((_QWORD *)v21 + 1) = v24;
        v21[4] = v25;
        v21 += 6;
      }
      v19 += 32;
    }
    while (v19 != v18);
    if (v20 != v21)
    {
      v33 = v43;
      v34 = v20;
      do
      {
        HALS_UCRemotePlugIn::unregister_shared_buffer(v33, v40, 0, *v34, 2u);
        v34 += 6;
      }
      while (v34 != v21);
    }
    v18 = v41;
    v15 = v38;
    v12 = v39;
  }
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v12, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v15, 0);
  if (v18)
    operator delete(v18);
  if (v20)
    operator delete(v20);
  v35 = v44;
  if (v44)
  {
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1B5B48D70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,int buf,uint64_t a22,__int16 a23,int a24,__int16 a25,int a26,__int16 a27,uint64_t a28)
{
  void *v28;
  _Unwind_Exception *v29;

  if (__p)
    operator delete(__p);
  if (v28)
    operator delete(v28);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(v29);
}

uint64_t ___ZN23HALS_RemotePlugInEngine18UnregisterIOBufferEbjjjPv_block_invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 56);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 48);
  v3 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 56) - v2) >> 3;
  if (v1 >= v3)
  {
    v4 = 0;
  }
  else
  {
    if (v3 <= v1)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v4 = *(_QWORD *)(v2 + 8 * v1);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8)
                                                                                          + 24)
                                                                              + 16);
  return result;
}

uint64_t ___ZN23HALS_RemotePlugInEngine16RegisterIOBufferEbjjjPv_block_invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 56);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 48);
  v3 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 56) - v2) >> 3;
  if (v1 >= v3)
  {
    v4 = 0;
  }
  else
  {
    if (v3 <= v1)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v4 = *(_QWORD *)(v2 + 8 * v1);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8)
                                                                                          + 24)
                                                                              + 16);
  return result;
}

void ___ZNK23HALS_RemotePlugInEngine16GetZeroTimeStampEjRdRyS1__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = v2[139];
  v5 = *(_QWORD *)(v3 + 400);
  v4 = *(std::__shared_weak_count **)(v3 + 408);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*v2 + 320))(v2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 208))(v5, *(unsigned int *)(v8 + 44), *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B5B49090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::create_device_node_uid_from_device_uid_and_direction(const __CFString **a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  size_t v5;
  const char *v6;
  size_t v7;
  void **v8;
  char *v9;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v12;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *a1);
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (size_t)__p[1];
  if (a2)
    v6 = "-in";
  else
    v6 = "-out";
  if (a2)
    v7 = 3;
  else
    v7 = 4;
  std::string::basic_string[abi:ne180100]((uint64_t)a3, v5 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v5)
  {
    if ((v12 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    memmove(a3, v8, v5);
  }
  v9 = (char *)a3 + v5;
  memcpy(v9, v6, v7);
  v9[v7] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1B5B491A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::Activate(HALS_IOEngine2 *this, HALS_Object *a2)
{
  HALS_Object::Activate(this, a2);
  return (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 928))(this);
}

void HALS_IOEngine2::_Deactivate(HALS_IOEngine2 *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;

  *((_DWORD *)this + 2) = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  (*(void (**)(HALS_IOEngine2 *, _QWORD **))(*(_QWORD *)this + 888))(this, &v5);
  v2 = v5;
  v3 = v6;
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 208))(this);
    ++v2;
  }
  v4 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v4)
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v4);
  *((_QWORD *)this + 88) = 0;
  v8 = (void **)&v5;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1B5B492A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetMIGDispatchQueue(HALS_IOEngine2 *this)
{
  return *((_QWORD *)this + 90);
}

{
  return *((_QWORD *)this + 90);
}

void HALS_IOEngine2::RegisterIOContext(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine217RegisterIOContextEP14HALS_IOContext_block_invoke;
  v3[3] = &__block_descriptor_tmp_9535;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_IOEngine2::UnregisterIOContext(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  HALB_Mutex *v2;
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine219UnregisterIOContextEP14HALS_IOContext_block_invoke;
  v3[3] = &__block_descriptor_tmp_8_9534;
  v3[4] = this;
  v3[5] = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_IOEngine2::PauseAllContexts(uint64_t a1, uint64_t a2)
{
  HALB_Mutex *v4;
  int v5;
  NSObject *v6;
  void **v7;
  dispatch_time_t v8;
  void **v9;
  _QWORD v10[8];
  void **v11;
  void ***v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[3];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x4002000000;
  v17[3] = __Block_byref_object_copy__9522;
  v17[4] = __Block_byref_object_dispose__9523;
  memset(v18, 0, sizeof(v18));
  v11 = 0;
  v12 = &v11;
  v13 = 0x3002000000;
  v14 = __Block_byref_object_copy__9;
  v15 = __Block_byref_object_dispose__10;
  v16 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
  v10[3] = &unk_1E698DF40;
  v10[4] = v17;
  v10[5] = &v11;
  v10[6] = a1;
  v10[7] = a2;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v10);
  v5 = 1;
  v6 = MEMORY[0x1E0C81028];
  while (1)
  {
    v7 = v12[5];
    v8 = dispatch_time(0, 2000000000);
    if (!dispatch_block_wait(v7, v8))
      break;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v20 = "HALS_IOEngine2.cpp";
      v21 = 1024;
      v22 = 1129;
      v23 = 1024;
      v24 = 2 * v5;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::PauseAllContexts: still waiting after %d seconds", buf, 0x18u);
      ++v5;
    }
  }
  v9 = v12[5];
  if (v9)
    _Block_release(v9);
  kdebug_trace();
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v17, 8);
  v11 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B5B495E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  a21 = a12;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::ResumeAllContexts(uint64_t a1)
{
  HALB_Mutex *v2;
  int v3;
  NSObject *v4;
  void **v5;
  dispatch_time_t v6;
  void **v7;
  _QWORD v8[7];
  void **v9;
  void ***v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[3];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4002000000;
  v15[3] = __Block_byref_object_copy__9522;
  v15[4] = __Block_byref_object_dispose__9523;
  memset(v16, 0, sizeof(v16));
  v9 = 0;
  v10 = &v9;
  v11 = 0x3002000000;
  v12 = __Block_byref_object_copy__9;
  v13 = __Block_byref_object_dispose__10;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
  v8[3] = &unk_1E698DF90;
  v8[5] = &v9;
  v8[6] = a1;
  v8[4] = v15;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v8);
  v3 = 1;
  v4 = MEMORY[0x1E0C81028];
  while (1)
  {
    v5 = v10[5];
    v6 = dispatch_time(0, 2000000000);
    if (!dispatch_block_wait(v5, v6))
      break;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v18 = "HALS_IOEngine2.cpp";
      v19 = 1024;
      v20 = 1177;
      v21 = 1024;
      v22 = 2 * v3;
      _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::ResumeAllContexts: still waiting after %d seconds", buf, 0x18u);
      ++v3;
    }
  }
  v7 = v10[5];
  if (v7)
    _Block_release(v7);
  kdebug_trace();
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(v15, 8);
  v9 = (void **)v16;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1B5B49864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void **v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, void **);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  v12 = a4;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::AssessAllContexts(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t *v2;
  uint64_t i;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 (*v8)(_QWORD *, uint64_t);
  void (*v9)(uint64_t);
  _QWORD v10[3];
  void **v11;

  v5 = 0;
  v6 = &v5;
  v7 = 0x4002000000;
  v8 = __Block_byref_object_copy__9522;
  v9 = __Block_byref_object_dispose__9523;
  memset(v10, 0, sizeof(v10));
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine217AssessAllContextsEv_block_invoke;
  v4[3] = &unk_1E698DFB8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6;
  for (i = v6[5]; i != v2[6]; i += 8)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)i + 96) + 216))(*(_QWORD *)(*(_QWORD *)i + 96));
    v2 = v6;
  }
  _Block_object_dispose(&v5, 8);
  v11 = (void **)v10;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B5B49980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 24) = v8;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 24));
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::CopyAllContexts(uint64_t a1, char **a2)
{
  HALB_Mutex *v3;
  char *v4;
  _BYTE *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  char *v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __n128 (*v26)(_QWORD *, uint64_t);
  void (*v27)(uint64_t);
  void *__p;
  void *v29;
  uint64_t v30;

  v23 = 0;
  v24 = &v23;
  v25 = 0x4002000000;
  v26 = __Block_byref_object_copy__17;
  v27 = __Block_byref_object_dispose__18;
  v29 = 0;
  v30 = 0;
  __p = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZNK14HALS_IOEngine215CopyAllContextsERNSt3__16vectorIP14HALS_IOContextNS0_9allocatorIS3_EEEE_block_invoke;
  v22[3] = &unk_1E698DFE0;
  v22[4] = &v23;
  v22[5] = a1;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v22);
  if (v24 + 5 == (uint64_t *)a2)
    goto LABEL_24;
  v4 = (char *)v24[5];
  v5 = (_BYTE *)v24[6];
  v6 = v5 - v4;
  v7 = (v5 - v4) >> 3;
  v8 = (uint64_t)a2[2];
  v9 = *a2;
  if (v7 > (v8 - (uint64_t)*a2) >> 3)
  {
    if (v9)
    {
      a2[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_27;
    v10 = v8 >> 2;
    if (v8 >> 2 <= v7)
      v10 = (v5 - v4) >> 3;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_27:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
    v9 = v12;
    *a2 = v12;
    a2[1] = v12;
    a2[2] = &v12[8 * v13];
    if (v5 != v4)
      memmove(v12, v4, v5 - v4);
    v14 = (void **)(a2 + 1);
    goto LABEL_23;
  }
  v16 = a2[1];
  v14 = (void **)(a2 + 1);
  v15 = v16;
  v17 = v16 - v9;
  v18 = (v16 - v9) >> 3;
  if (v18 < v7)
  {
    v19 = &v4[8 * v18];
    if (v15 != v9)
    {
      memmove(v9, v4, v17);
      v9 = (char *)*v14;
    }
    v6 = v5 - v19;
    if (v5 == v19)
      goto LABEL_23;
    v20 = v9;
    v21 = v19;
    goto LABEL_22;
  }
  if (v5 != v4)
  {
    v20 = v9;
    v21 = (char *)v24[5];
LABEL_22:
    memmove(v20, v21, v6);
  }
LABEL_23:
  *v14 = &v9[v6];
LABEL_24:
  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_1B5B49B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::_SetIOContextStreamUsage(HALS_IOEngine2 *this, int a2, unsigned int a3, unsigned int a4, BOOL *a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t *v23;
  void **v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type size;
  void **v40;
  uint64_t *v41;
  int v42;
  std::string v43;
  std::string::size_type v44;
  int v45;

  if (a2)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 92);
    v7 = (uint64_t *)*((_QWORD *)this + 93);
    if (v6 != v7)
    {
      while (1)
      {
        v11 = *v6;
        if (*(_DWORD *)(*(_QWORD *)(*v6 + 32) + 16) == a2)
          break;
        if (++v6 == v7)
          return;
      }
      v12 = v11 + 56 + 24 * a3;
      *(_QWORD *)(v12 + 8) = 0;
      v13 = (_QWORD *)(v12 + 8);
      if (a4)
      {
        v14 = v11 + 56 + 24 * a3;
        v15 = *(char **)v14;
        v16 = a4;
        v17 = *(_QWORD *)(v14 + 16);
        if (v17 << 6 >= (unint64_t)a4)
        {
          *v13 = a4;
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15[((unint64_t)a4 >> 3) & 0x1FFFFFF8];
          if ((a4 & 0x3F) != 0)
          {
            LODWORD(v43.__r_.__value_.__r.__words[1]) = a4 & 0x3F;
            std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v44, (uint64_t)v15, 0, v15, 0, (uint64_t)&v43);
          }
          else
          {
            LODWORD(v43.__r_.__value_.__r.__words[1]) = 0;
            std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v44, (uint64_t)v15, 0, v15, 0, (uint64_t)&v43);
          }
          v29 = 8 * (_QWORD)&v15[-*(_QWORD *)v14];
          if ((uint64_t)&v15[-*(_QWORD *)v14] < 0)
          {
            v31 = v29 - 63;
            if ((uint64_t)(v29 - 63) < 0)
              v31 = 8 * (_QWORD)&v15[-*(_QWORD *)v14];
            v30 = v31 >> 6;
          }
          else
          {
            v30 = v29 >> 6;
          }
          v23 = (uint64_t *)(*(_QWORD *)v14 + 8 * v30);
          v25 = v29 & 0x38;
        }
        else
        {
          memset(&v43, 0, sizeof(v43));
          if ((unint64_t)(v17 << 6) > 0x3FFFFFFFFFFFFFFELL)
          {
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v18 = v17 << 7;
            if (v18 <= ((a4 + 63) & 0x1FFFFFFC0uLL))
              v19 = (a4 + 63) & 0x1FFFFFFC0;
            else
              v19 = v18;
          }
          std::vector<BOOL>::reserve((uint64_t)&v43, v19);
          v43.__r_.__value_.__l.__size_ = *v13 + v16;
          size = v43.__r_.__value_.__l.__size_;
          v20 = *(char **)v14;
          v21 = v43.__r_.__value_.__r.__words[0];
          v44 = v43.__r_.__value_.__r.__words[0];
          v45 = 0;
          std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)&v41, v20, 0, (uint64_t)v15, 0, (uint64_t)&v44);
          v22 = (uint64_t)v15;
          v23 = v41;
          v24 = (void **)v14;
          v25 = v42;
          v40 = v24;
          v26 = (char *)*v24 + 8 * (*v13 >> 6);
          v27 = *v13 & 0x3FLL;
          v44 = v21 + 8 * (size >> 6);
          v45 = size & 0x3F;
          if (v45 == (_DWORD)v27)
            std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v41, v22, 0, v26, v27, (uint64_t)&v44);
          else
            std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v41, v22, 0, v26, v27, (uint64_t)&v44);
          v28 = *v40;
          *v40 = (void *)v21;
          *(_OWORD *)v13 = *(_OWORD *)&v43.__r_.__value_.__r.__words[1];
          if (v28)
            operator delete(v28);
        }
        do
        {
          v32 = 1 << v25;
          if (*a5)
            v33 = *v23 | v32;
          else
            v33 = *v23 & ~v32;
          *v23 = v33;
          ++a5;
          v23 += v25 == 63;
          if (v25 == 63)
            v25 = 0;
          else
            ++v25;
          --v16;
        }
        while (v16);
      }
      HALS_IOEngine2::_UpdateTotalStreamUsage(this, a3);
      if (*(_BYTE *)(v11 + 48))
      {
        v34 = *((_QWORD *)this + 96);
        v35 = (_OWORD *)(v11 + 136);
        if (*(char *)(v11 + 159) < 0)
        {
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v11 + 136), *(_QWORD *)(v11 + 144));
        }
        else
        {
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *v35;
          v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 152);
        }
        HALS_IOEngine2_DeviceInfo::StopContext(v34, a2, (uint64_t)&v43);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        *(_DWORD *)(v11 + 104) = 0;
        v37 = *(_QWORD *)(v11 + 112);
        for (i = *(_QWORD *)(v11 + 120);
              i != v37;
        *(_QWORD *)(v11 + 120) = v37;
        *(_BYTE *)(v11 + 48) = 0;
        HALS_IOEngine2_IOContextInfo::StartIO((HALS_IOEngine2_IOContextInfo *)v11);
        v38 = *((_QWORD *)this + 96);
        if (*(char *)(v11 + 159) < 0)
        {
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v11 + 136), *(_QWORD *)(v11 + 144));
        }
        else
        {
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *v35;
          v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 152);
        }
        HALS_IOEngine2_DeviceInfo::StartContext(v38, a2, (uint64_t)&v43);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1B5B49F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOEngine2::_GetIOContextStreamUsage(_QWORD *this, int a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  if (a2)
  {
    for (i = (uint64_t *)this[92]; i != (uint64_t *)this[93]; ++i)
    {
      v6 = *i;
      if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == a2)
      {
        v7 = (*(_QWORD *)(this[96] + 24 * a3 + 56) - *(_QWORD *)(this[96] + 24 * a3 + 48)) >> 3;
        if (*a4 >= v7)
          v7 = v7;
        else
          v7 = *a4;
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = v6 + 24 * a3;
          v10 = (_QWORD *)(v9 + 56);
          v11 = *(_QWORD *)(v9 + 64);
          do
          {
            if (v11 <= v8)
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            a5[v8] = (*(_QWORD *)(*v10 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1;
            ++v8;
          }
          while (v7 != v8);
        }
        goto LABEL_7;
      }
    }
  }
  LODWORD(v7) = 0;
LABEL_7:
  *a4 = v7;
  return this;
}

uint64_t HALS_IOEngine2::GetCombinedIOContextVolumeScalarForClient(HALS_IOEngine2 *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 88) + 248))(*((_QWORD *)this + 88));
}

void HALS_IOEngine2::SetIOContextVolumeScalarForClient(HALS_IOEngine2 *this, int a2, char a3)
{
  float v6;
  HALS_Object *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  HALS_ObjectMap *v11;
  uint64_t v12;
  HALB_Mutex *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];
  float v18;
  char v19;

  v6 = (*(float (**)(_QWORD))(**((_QWORD **)this + 88) + 248))(*((_QWORD *)this + 88));
  v14 = 0;
  v15 = 0;
  v16 = 0;
  (*(void (**)(HALS_IOEngine2 *, char **))(*(_QWORD *)this + 240))(this, &v14);
  v8 = v14;
  v9 = v15;
  if (v14 != v15)
  {
    v10 = MEMORY[0x1E0C809B0];
    do
    {
      v11 = *(HALS_ObjectMap **)v8;
      if (**(_DWORD **)(*(_QWORD *)v8 + 64) == a2)
      {
        v12 = *((_QWORD *)v11 + 12);
        v17[0] = v10;
        v17[1] = 0x40000000;
        v17[2] = ___ZN26HALS_IOContext_Legacy_Impl18SetVolumeForEngineEP13HALS_IOEnginebf_block_invoke;
        v17[3] = &__block_descriptor_tmp_18_9718;
        v17[4] = v12;
        v17[5] = this;
        v19 = a3;
        v18 = v6;
        v13 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 24) + 56))(*(_QWORD *)(v12 + 24));
        HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v17);
      }
      HALS_ObjectMap::ReleaseObject(v11, v7);
      v8 += 8;
    }
    while (v8 != v9);
    v8 = v14;
  }
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
}

void sub_1B5B4A14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2::DuckIOContextVolumeScalarForClient(HALS_IOEngine2 *this, double a2, double a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  HALS_ObjectMap *v9;
  float v10;
  uint64_t v11;
  HALB_Mutex *v12;
  HALS_Object *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[8];
  float v18;
  char v19;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  (*(void (**)(HALS_IOEngine2 *, char **))(*(_QWORD *)this + 240))(this, &v14);
  v6 = v14;
  v7 = v15;
  if (v14 != v15)
  {
    v8 = MEMORY[0x1E0C809B0];
    do
    {
      v9 = *(HALS_ObjectMap **)v6;
      v10 = (*(float (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 88) + 248))(*((_QWORD *)this + 88), **(unsigned int **)(*(_QWORD *)v6 + 64), 0);
      v11 = *((_QWORD *)v9 + 12);
      v17[0] = v8;
      v17[1] = 0x40000000;
      v17[2] = ___ZN26HALS_IOContext_Legacy_Impl19RampVolumeForEngineEP13HALS_IOEnginebfdd_block_invoke;
      v17[3] = &__block_descriptor_tmp_19_9721;
      v17[4] = v11;
      v17[5] = this;
      v19 = 0;
      v18 = v10;
      *(double *)&v17[6] = a2;
      *(double *)&v17[7] = a3;
      v12 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 56))(*(_QWORD *)(v11 + 24));
      HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v17);
      HALS_ObjectMap::ReleaseObject(v9, v13);
      v6 += 8;
    }
    while (v6 != v7);
    v6 = v14;
  }
  if (v6)
  {
    v15 = v6;
    operator delete(v6);
  }
}

void sub_1B5B4A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2::HogModeOwnerChanged(HALS_IOEngine2 *this, int a2)
{
  HALB_Mutex *v3;
  uint64_t *v4;
  uint64_t i;
  int v6;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(_QWORD *, uint64_t);
  void (*v13)(uint64_t);
  _QWORD v14[3];
  void **v15;

  v9 = 0;
  v10 = &v9;
  v11 = 0x4002000000;
  v12 = __Block_byref_object_copy__9522;
  v13 = __Block_byref_object_dispose__9523;
  memset(v14, 0, sizeof(v14));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine219HogModeOwnerChangedEi_block_invoke;
  v8[3] = &unk_1E698E028;
  v8[4] = &v9;
  v8[5] = this;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v8);
  v4 = v10;
  for (i = v10[5]; i != v4[6]; i += 8)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 4);
    if (v6)
    {
      v7 = **(_QWORD **)(*(_QWORD *)i + 96);
      if (a2 == -1 || v6 == a2)
        (*(void (**)(void))(v7 + 200))();
      else
        (*(void (**)(void))(v7 + 192))();
    }
    v4 = v10;
  }
  _Block_object_dispose(&v9, 8);
  v15 = (void **)v14;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1B5B4A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 40) = v8;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 40));
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::FlushAllQueues(AMCP::Utility::Dispatch_Queue **this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(this + 8));
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(this + 48));
  AMCP::Utility::Dispatch_Queue::flush_all_work(this[91]);
}

uint64_t HALS_IOEngine2::DoAnyQueuesHaveWorkAfterFlush(HALS_IOEngine2 *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;

  v1 = atomic_load((unsigned __int8 *)this + 97);
  if ((v1 & 1) != 0)
    return 1;
  v2 = atomic_load((unsigned __int8 *)this + 417);
  if ((v2 & 1) != 0)
    return 1;
  v3 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 91) + 33));
  return v3 & 1;
}

uint64_t HALS_IOEngine2::GetOwningDevice(HALS_IOEngine2 *this)
{
  return *((_QWORD *)this + 88);
}

double HALS_IOEngine2::GetNominalSampleRate(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  double v2;
  _QWORD v4[6];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine220GetNominalSampleRateEv_block_invoke;
  v4[3] = &unk_1E698E0B0;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4A4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetRingBufferFrameSize(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine222GetRingBufferFrameSizeEv_block_invoke;
  v4[3] = &unk_1E698E0D8;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4A59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetLatency(HALS_IOEngine2 *this, char a2)
{
  HALB_Mutex *v2;
  uint64_t v3;
  _QWORD v5[6];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOEngine210GetLatencyEb_block_invoke;
  v5[3] = &unk_1E698E128;
  v5[4] = &v7;
  v5[5] = this;
  v6 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B5B4A64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetClockAlgorithm(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 1768518246;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine217GetClockAlgorithmEv_block_invoke;
  v4[3] = &unk_1E698E150;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::IsClockStable(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine213IsClockStableEv_block_invoke;
  v4[3] = &unk_1E698E178;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetDataStartByteOffset(HALS_IOEngine2 *this)
{
  return 0;
}

void HALS_IOEngine2::TransitionContextFromCatchupToRealtime(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  HALB_Mutex *v3;
  _QWORD v4[6];
  int v5;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine238TransitionContextFromCatchupToRealtimeEjRK17HALS_IOEngineInfo_block_invoke;
  v4[3] = &__block_descriptor_tmp_47_9515;
  v5 = a2;
  v4[4] = this;
  v4[5] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t HALS_IOEngine2::GetNumberStreamsVisibleToClient(HALS_IOEngine2 *this, char a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK14HALS_IOEngine231GetNumberStreamsVisibleToClientEbj_block_invoke;
  v6[3] = &unk_1E698E1E8;
  v6[4] = &v9;
  v6[5] = this;
  v8 = a2;
  v7 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5B4A8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::IsStreamAtIndexActive(HALS_IOEngine2 *this, char a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK14HALS_IOEngine221IsStreamAtIndexActiveEbj_block_invoke;
  v6[3] = &unk_1E698E210;
  v6[4] = &v9;
  v6[5] = this;
  v8 = a2;
  v7 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5B4A980(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__n128 HALS_IOEngine2::GetVirtualFormatForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, CA::StreamDescription *a4)
{
  HALB_Mutex *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  _QWORD v9[6];
  int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  uint64_t (*v16)();
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v12 = 0;
  v13 = &v12;
  v14 = 0x5002000000;
  v15 = __Block_byref_object_copy__52_9507;
  v16 = __Block_byref_object_dispose__53_9508;
  v18 = 0u;
  v19 = 0;
  v17 = 0u;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK14HALS_IOEngine232GetVirtualFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke;
  v9[3] = &unk_1E698E260;
  v11 = a2;
  v10 = a3;
  v9[4] = &v12;
  v9[5] = this;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  v6 = v13[9];
  v7 = *(_OWORD *)(v13 + 7);
  *(_OWORD *)a4 = *(_OWORD *)(v13 + 5);
  *((_OWORD *)a4 + 1) = v7;
  *((_QWORD *)a4 + 4) = v6;
  _Block_object_dispose(&v12, 8);
  return result;
}

void sub_1B5B4AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 HALS_IOEngine2::GetPhysicalFormatForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, CA::StreamDescription *a4)
{
  HALB_Mutex *v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  _QWORD v9[6];
  int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  uint64_t (*v16)();
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v12 = 0;
  v13 = &v12;
  v14 = 0x5002000000;
  v15 = __Block_byref_object_copy__52_9507;
  v16 = __Block_byref_object_dispose__53_9508;
  v18 = 0u;
  v19 = 0;
  v17 = 0u;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK14HALS_IOEngine233GetPhysicalFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke;
  v9[3] = &unk_1E698E288;
  v11 = a2;
  v10 = a3;
  v9[4] = &v12;
  v9[5] = this;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  v6 = v13[9];
  v7 = *(_OWORD *)(v13 + 7);
  *(_OWORD *)a4 = *(_OWORD *)(v13 + 5);
  *((_OWORD *)a4 + 1) = v7;
  *((_QWORD *)a4 + 4) = v6;
  _Block_object_dispose(&v12, 8);
  return result;
}

void sub_1B5B4AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::CalculateBufferByteSizeForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, int a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[6];
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOEngine239CalculateBufferByteSizeForStreamAtIndexEbjj_block_invoke;
  v7[3] = &unk_1E698E310;
  v7[4] = &v11;
  v7[5] = this;
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1B5B4ABFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::HasAnyNonMixableFormats(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine223HasAnyNonMixableFormatsEv_block_invoke;
  v4[3] = &unk_1E698E360;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4ACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::SetStartSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  HALB_Mutex *v6;
  _QWORD v7[7];
  int v8;
  int v9;
  char v10;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine214SetStartSampleEjN4AMCP11Index_GroupIxNS0_9DirectionEEEjb_block_invoke;
  v7[3] = &__block_descriptor_tmp_71_9504;
  v7[4] = a1;
  v7[5] = a3;
  v7[6] = a4;
  v8 = a2;
  v9 = a5;
  v10 = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

uint64_t HALS_IOEngine2::GetStartSample(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine214GetStartSampleEv_block_invoke;
  v4[3] = &unk_1E698E440;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::SetDSPForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, const HALS_DSPSettings *a4)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE *v29;
  HALB_Mutex *v30;
  int v31;
  _DWORD *v33;
  _DWORD *exception;
  char v35;
  _QWORD v36[7];
  void *__p;
  void *v38;
  uint64_t v39;
  int v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  if (!(*(unsigned int (**)(HALS_IOEngine2 *, _QWORD))(*(_QWORD *)this + 400))(this, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "HALS_IOEngine2.cpp";
      v47 = 1024;
      v48 = 1845;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetInputStreamChannelCountsForOutputDSP: bad stream index", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1970171760;
  }
  (*(void (**)(HALS_IOEngine2 *, _QWORD, _QWORD, __int128 *))(*(_QWORD *)this + 432))(this, 0, 0, &v42);
  v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
  v35 = a2;
  v10 = v42;
  v11 = v43;
  v8[4] = v44;
  *(_OWORD *)v8 = v10;
  *((_OWORD *)v8 + 1) = v11;
  v12 = (unint64_t)(v8 + 5);
  v13 = (unsigned int *)*((_QWORD *)a4 + 9);
  v14 = (unsigned int *)*((_QWORD *)a4 + 10);
  if (v13 == v14)
  {
    v16 = v8;
  }
  else
  {
    v15 = (char *)&v8[5 * v9];
    v16 = v8;
    do
    {
      v17 = *v13;
      if (v17 >= (*(unsigned int (**)(HALS_IOEngine2 *, uint64_t))(*(_QWORD *)this + 400))(this, 1))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v46 = "HALS_IOEngine2.cpp";
          v47 = 1024;
          v48 = 1851;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetInputStreamChannelCountsForOutputDSP: bad stream index", buf, 0x12u);
        }
        v33 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v33 = &off_1E69A1B30;
        v33[2] = 1970171760;
      }
      (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, __int128 *))(*(_QWORD *)this + 432))(this, 1, v17, &v42);
      if (v12 >= (unint64_t)v15)
      {
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v16) >> 3) + 1;
        if (v20 > 0x666666666666666)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v15 - v16) >> 3) > v20)
          v20 = 0x999999999999999ALL * ((v15 - v16) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 3) >= 0x333333333333333)
          v21 = 0x666666666666666;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v21);
        else
          v22 = 0;
        v23 = v21 + 8 * ((uint64_t)(v12 - (_QWORD)v16) >> 3);
        v24 = v42;
        v25 = v43;
        *(_QWORD *)(v23 + 32) = v44;
        *(_OWORD *)v23 = v24;
        *(_OWORD *)(v23 + 16) = v25;
        if ((_BYTE *)v12 == v16)
        {
          v29 = (_BYTE *)(v21 + 8 * ((uint64_t)(v12 - (_QWORD)v16) >> 3));
        }
        else
        {
          v26 = v21 + 8 * ((uint64_t)(v12 - (_QWORD)v16) >> 3);
          do
          {
            v27 = *(_OWORD *)(v12 - 40);
            v28 = *(_OWORD *)(v12 - 24);
            v29 = (_BYTE *)(v26 - 40);
            *(_QWORD *)(v26 - 8) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(v26 - 24) = v28;
            *(_OWORD *)(v26 - 40) = v27;
            v12 -= 40;
            v26 -= 40;
          }
          while ((_BYTE *)v12 != v16);
        }
        v15 = (char *)(v21 + 40 * v22);
        v12 = v23 + 40;
        if (v16)
          operator delete(v16);
        v16 = v29;
      }
      else
      {
        v18 = v42;
        v19 = v43;
        *(_QWORD *)(v12 + 32) = v44;
        *(_OWORD *)v12 = v18;
        *(_OWORD *)(v12 + 16) = v19;
        v12 += 40;
      }
      ++v13;
    }
    while (v13 != v14);
  }
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = &v42;
  *(_QWORD *)&v43 = 0x2000000000;
  BYTE8(v43) = 0;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN14HALS_IOEngine222SetDSPForStreamAtIndexEbjRK16HALS_DSPSettings_block_invoke;
  v36[3] = &unk_1E698E2B0;
  v36[4] = &v42;
  v36[5] = this;
  v41 = v35;
  v40 = a3;
  v36[6] = a4;
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(&__p, v16, v12, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v16) >> 3));
  v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v36);
  v31 = *(unsigned __int8 *)(*((_QWORD *)&v42 + 1) + 24);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v42, 8);
  if (v16)
    operator delete(v16);
  return v31 != 0;
}

void sub_1B5B4B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  _Block_object_dispose(&a23, 8);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::HasSoftwareReferenceStreamAtIndex(HALS_IODevice **this, char a2, int a3)
{
  HALS_ObjectMap *v3;
  HALS_Object *v4;
  _BOOL8 v5;

  v3 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(this[88], a2, a3);
  if (v3)
    v5 = *((_DWORD *)v3 + 14) == 1;
  else
    v5 = 0;
  HALS_ObjectMap::ReleaseObject(v3, v4);
  return v5;
}

uint64_t HALS_IOEngine2::HasSoftwareReferenceStream(HALS_IOEngine2 *this)
{
  int HasSoftwareReferenceStreamInScope;

  HasSoftwareReferenceStreamInScope = HALS_IOEngine2::HasSoftwareReferenceStreamInScope(this, 1);
  return HasSoftwareReferenceStreamInScope | HALS_IOEngine2::HasSoftwareReferenceStreamInScope(this, 0);
}

uint64_t HALS_IOEngine2::GetDSPLatencyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  DSPGraph::Graph **v4;
  double v5;
  DSPGraph::Graph *v6;
  unsigned int v7;
  double v8;
  DSPGraph::Box *v9;
  double v10;
  uint64_t v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  DSPGraph::Graph **v17;
  std::__shared_weak_count *v18;

  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v17, (uint64_t)this, a2, a3);
  v4 = v17;
  if (v17 && *v17 && *((_BYTE *)*v17 + 762))
  {
    v5 = (*(double (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 328))(this);
    v6 = *v4;
    if (*v4)
    {
      v7 = 0;
      v8 = 0.0;
      while (v7 < DSPGraph::Graph::numOutputs(v6))
      {
        v9 = (DSPGraph::Box *)DSPGraph::Graph::out(*v4);
        DSPGraph::Box::totalLatencyInSeconds(v9);
        if (v10 >= v8)
          v8 = v10;
        ++v7;
        v6 = *v4;
      }
    }
    else
    {
      v8 = 0.0;
    }
    v12 = v5;
    v11 = (v8 * v12);
  }
  else
  {
    v11 = 0;
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v11;
}

void sub_1B5B4B408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::SetDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  HALS_IOStreamDSP *v14;
  std::__shared_weak_count *v15;

  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v14, (uint64_t)this, a2, a3);
  if (v14 && *(_QWORD *)v14 && *(_BYTE *)(*(_QWORD *)v14 + 762))
    v9 = HALS_IOStreamDSP::SetDSPProperty(v14, a4, a5, a6);
  else
    v9 = 0;
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

BOOL HALS_IOEngine2::GetDSPPropertyInfoForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  _QWORD *v9;
  DSPGraph::Graph *v10;
  uint64_t v11;
  int v12;
  char v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE **v19;
  std::__shared_weak_count *v20;
  _BYTE v21[5];
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _DWORD v27[7];

  *(_QWORD *)&v27[5] = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v19, (uint64_t)this, a2, a3);
  v9 = v19;
  if (v19
    && (v10 = (DSPGraph::Graph *)*v19) != 0
    && *((_BYTE *)v10 + 762)
    && DSPGraph::Graph::hasProperty(v10))
  {
    v21[0] = BYTE3(a4);
    v21[1] = BYTE2(a4);
    v21[2] = BYTE1(a4);
    v21[3] = a4;
    v21[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v23 = "HALS_IOStreamDSP.cpp";
      v24 = 1024;
      v25 = 284;
      v26 = 2080;
      *(_QWORD *)v27 = v21;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPPropertyInfo property %s", buf, 0x1Cu);
    }
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 64))(*v9, a4);
    v12 = v11;
    v14 = v13 != 0;
    if (v13)
    {
      *a5 = v11;
      *a6 = BYTE4(v11);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v23 = "HALS_IOStreamDSP.cpp";
      v24 = 1024;
      v25 = 288;
      v26 = 1024;
      v27[0] = v12;
      LOWORD(v27[1]) = 2080;
      *(_QWORD *)((char *)&v27[1] + 2) = v21;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  error %d while getting property info %s in HALS_IOStreamDSP::GetDSPPropertyInfo()", buf, 0x22u);
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

uint64_t HALS_IOEngine2::GetDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  _QWORD *v9;
  DSPGraph::Graph *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE **v16;
  std::__shared_weak_count *v17;
  _BYTE v18[5];
  _DWORD buf[3];
  __int16 v20;
  int v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v16, (uint64_t)this, a2, a3);
  v9 = v16;
  if (v16
    && (v10 = (DSPGraph::Graph *)*v16) != 0
    && *((_BYTE *)v10 + 762)
    && DSPGraph::Graph::hasProperty(v10))
  {
    v18[0] = BYTE3(a4);
    v18[1] = BYTE2(a4);
    v18[2] = BYTE1(a4);
    v18[3] = a4;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(_QWORD *)&buf[1] = "HALS_IOStreamDSP.cpp";
      v20 = 1024;
      v21 = 309;
      v22 = 2080;
      v23 = v18;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPProperty property %s", (uint8_t *)buf, 0x1Cu);
    }
    buf[0] = *a5;
    (*(void (**)(_QWORD, uint64_t, _DWORD *, void *))(*(_QWORD *)*v9 + 72))(*v9, a4, buf, a6);
    *a5 = buf[0];
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1B5B4BA28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::HasDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  DSPGraph::Graph *v3;
  uint64_t hasProperty;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  DSPGraph::Graph **v9;
  std::__shared_weak_count *v10;

  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v9, (uint64_t)this, a2, a3);
  if (v9 && (v3 = *v9) != 0 && *((_BYTE *)v3 + 762))
    hasProperty = DSPGraph::Graph::hasProperty(v3);
  else
    hasProperty = 0;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return hasProperty;
}

uint64_t HALS_IOEngine2::SetDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, float a5)
{
  _QWORD *v7;
  DSPGraph::Graph *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE **v14;
  std::__shared_weak_count *v15;
  _BYTE v16[5];
  _DWORD buf[3];
  __int16 v18;
  int v19;
  __int16 v20;
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v14, (uint64_t)this, a2, a3);
  v7 = v14;
  if (v14
    && (v8 = (DSPGraph::Graph *)*v14) != 0
    && *((_BYTE *)v8 + 762)
    && DSPGraph::Graph::hasParameter(v8))
  {
    v16[0] = BYTE3(a4);
    v16[1] = BYTE2(a4);
    v16[2] = BYTE1(a4);
    v16[3] = a4;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(_QWORD *)&buf[1] = "HALS_IOStreamDSP.cpp";
      v18 = 1024;
      v19 = 348;
      v20 = 2080;
      v21 = v16;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::SetDSPParameter parameter %s", (uint8_t *)buf, 0x1Cu);
    }
    (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v7 + 40))(*v7, a4, a5);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1B5B4BDE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::GetDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, float *a5)
{
  _QWORD *v7;
  DSPGraph::Graph *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE **v14;
  std::__shared_weak_count *v15;
  _BYTE v16[5];
  _DWORD buf[3];
  __int16 v18;
  int v19;
  __int16 v20;
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v14, (uint64_t)this, a2, a3);
  v7 = v14;
  if (v14
    && (v8 = (DSPGraph::Graph *)*v14) != 0
    && *((_BYTE *)v8 + 762)
    && DSPGraph::Graph::hasParameter(v8))
  {
    v16[0] = BYTE3(a4);
    v16[1] = BYTE2(a4);
    v16[2] = BYTE1(a4);
    v16[3] = a4;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(_QWORD *)&buf[1] = "HALS_IOStreamDSP.cpp";
      v18 = 1024;
      v19 = 379;
      v20 = 2080;
      v21 = v16;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPParameter parameter %s", (uint8_t *)buf, 0x1Cu);
    }
    *a5 = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 48))(*v7, a4);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1B5B4C100(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::HasDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  DSPGraph::Graph *v3;
  uint64_t hasParameter;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  DSPGraph::Graph **v9;
  std::__shared_weak_count *v10;

  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v9, (uint64_t)this, a2, a3);
  if (v9 && (v3 = *v9) != 0 && *((_BYTE *)v3 + 762))
    hasParameter = DSPGraph::Graph::hasParameter(v3);
  else
    hasParameter = 0;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return hasParameter;
}

uint64_t HALS_IOEngine2::IsCaptureFileEnabled(HALS_IOEngine2 *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine220IsCaptureFileEnabledEv_block_invoke;
  v4[3] = &unk_1E698E388;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B4C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::SetAudioCaptureMode(uint64_t a1, int a2)
{
  HALB_Mutex *v2;
  _QWORD v3[5];
  int v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine219SetAudioCaptureModeE17AudioCapturerMode_block_invoke;
  v3[3] = &__block_descriptor_tmp_64_9497;
  v3[4] = a1;
  v4 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_IOEngine2::CreateCaptureFiles(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v13 = 136315650;
    v14 = "HALS_IOEngine2.cpp";
    v15 = 1024;
    v16 = 2142;
    v17 = 2080;
    v18 = a1 + 796;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::CreateCaptureFiles() device %s", (uint8_t *)&v13, 0x1Cu);
  }
  v4 = *(_QWORD *)(a1 + 768);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v13 = 136315394;
    v14 = "HALS_IOEngine2.cpp";
    v15 = 1024;
    v16 = 955;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2_DeviceInfo::CreateCaptureFiles()", (uint8_t *)&v13, 0x12u);
  }
  v5 = 0;
  v6 = v4 + 48;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = (uint64_t **)(v6 + 24 * v5);
    v10 = *v9;
    v11 = v9[1];
    while (v10 != v11)
    {
      v12 = *v10++;
      HALS_IOEngine2_StreamInfo::CreateCaptureFile(v12, a2);
    }
    v7 = 0;
    v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void HALS_IOEngine2::DestroyCaptureFiles(HALS_IOEngine2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v11 = 136315650;
    v12 = "HALS_IOEngine2.cpp";
    v13 = 1024;
    v14 = 2148;
    v15 = 2080;
    v16 = (char *)this + 796;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::DestroyCaptureFiles() device %s", (uint8_t *)&v11, 0x1Cu);
  }
  v2 = *((_QWORD *)this + 96);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v11 = 136315394;
    v12 = "HALS_IOEngine2.cpp";
    v13 = 1024;
    v14 = 967;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2_DeviceInfo::DestroyCaptureFiles()", (uint8_t *)&v11, 0x12u);
  }
  v3 = 0;
  v4 = v2 + 48;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (uint64_t **)(v4 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    while (v8 != v9)
    {
      v10 = *v8++;
      std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(v10 + 200), 0);
    }
    v5 = 0;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
}

void HALS_IOEngine2::UpdateIssueReporters(HALS_IOEngine2 *this)
{
  HALB_Mutex *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13;
  NSObject *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  void *__p;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v24 = 0;
  v25 = &v24;
  v26 = 0x4002000000;
  v27 = __Block_byref_object_copy__65;
  v28 = __Block_byref_object_dispose__66;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___ZN14HALS_IOEngine220UpdateIssueReportersEv_block_invoke;
  v23[3] = &unk_1E698E3D0;
  v23[4] = &v24;
  v23[5] = this;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v23);
  v3 = v25;
  v5 = *((_QWORD *)this + 6);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v37 = v5;
  v38 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void *)v3[5];
  v9 = v3[6];
  if (v8 != (const void *)v9 && v5 != 0)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v32, v8, v9, (v9 - (uint64_t)v8) >> 2);
    v35 = v5;
    v36 = v4;
    if (v4)
    {
      v11 = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = atomic_load((unsigned __int8 *)this + 96);
    if ((v13 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 97);
    v14 = *((_QWORD *)this + 8);
    v15 = (_QWORD *)operator new();
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v15, v32, v33, (v33 - (uint64_t)v32) >> 2);
    v16 = v36;
    v15[3] = v35;
    v15[4] = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v39 = 0;
    dispatch_async_f(v14, v15, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](&v39);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v32)
      operator delete(v32);
    v4 = v38;
  }
  if (v4)
  {
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Block_object_dispose(&v24, 8);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
}

void sub_1B5B4C7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21 - 56);
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::TimelineWasReset(HALS_IOEngine2 *this, int a2, int a3)
{
  HALB_Mutex *v3;
  _QWORD v4[5];
  int v5;
  int v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine216TimelineWasResetEjj_block_invoke;
  v4[3] = &__block_descriptor_tmp_74_9491;
  v4[4] = this;
  v5 = a3;
  v6 = a2;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t HALS_IOEngine2::Register_IOThread(HALS_IOEngine2 *this, double a2)
{
  return 0;
}

uint64_t HALS_IOEngine2::Unregister_IOThread(HALS_IOEngine2 *this)
{
  return 0;
}

uint64_t HALS_IOEngine2::RegisterIOBuffer(HALS_IOEngine2 *this, char a2, int a3, int a4, int a5, void *a6)
{
  HALB_Mutex *v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine216RegisterIOBufferEbjjjPv_block_invoke;
  v9[3] = &unk_1E698E3F8;
  v9[4] = &v14;
  v9[5] = this;
  v13 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v9[6] = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  v7 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_1B5B4C924(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::UnregisterIOBuffer(HALS_IOEngine2 *this, char a2, int a3, int a4, int a5, void *a6)
{
  HALB_Mutex *v6;
  _QWORD v7[6];
  int v8;
  int v9;
  int v10;
  char v11;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine218UnregisterIOBufferEbjjjPv_block_invoke;
  v7[3] = &__block_descriptor_tmp_69_9489;
  v11 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v7[4] = this;
  v7[5] = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

BOOL HALS_IOEngine2::IsIORunning(HALS_IOEngine2 *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)this + 268);
  return v1 != 0;
}

uint64_t HALS_IOEngine2::IsIORunningForReferenceStream(HALS_IOEngine2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 1076);
  return v1 & 1;
}

uint64_t HALS_IOEngine2::StartIO(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[7];
  _BYTE buf[28];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOEngine2.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2213;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = (char *)this + 796;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::StartIO: starting IO on device %s", buf, 0x1Cu);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  *(_DWORD *)&buf[24] = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine27StartIOEP14HALS_IOContext_block_invoke;
  v7[3] = &unk_1E698E488;
  v7[4] = buf;
  v7[5] = this;
  v7[6] = a2;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v5;
}

void sub_1B5B4CB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::StopIO(uint64_t a1, uint64_t a2, int a3)
{
  HALB_Mutex *v6;
  _QWORD v7[6];
  int v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "HALS_IOEngine2.cpp";
    v11 = 1024;
    v12 = 2227;
    v13 = 2080;
    v14 = a1 + 796;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::StopIO: stopping IO on device %s", buf, 0x1Cu);
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine26StopIOEP14HALS_IOContextN21HALS_IOPrewarmManager11EngineStateE_block_invoke;
  v7[3] = &__block_descriptor_tmp_73_9486;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

uint64_t HALS_IOEngine2::BeginIOThread(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine213BeginIOThreadEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E698E4F0;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5B4CCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::EndIOThread(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine211EndIOThreadEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E698E518;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5B4CD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::BeginIOCycle(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine212BeginIOCycleEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E698E540;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5B4CE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::EndIOCycle(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine210EndIOCycleEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E698E568;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1B5B4CEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::BeginReading(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine212BeginReadingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E698E590;
  v7[4] = &v10;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v7[6] = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1B5B4CFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::ReadFromStream(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  HALB_Mutex *v6;
  uint64_t v7;
  _QWORD v9[8];
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine214ReadFromStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E698E630;
  v9[4] = &v13;
  v9[5] = a1;
  v10 = a3;
  v11 = a2;
  v12 = a4;
  v9[6] = a5;
  v9[7] = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1B5B4D068(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::IsolatedReadFromStream(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4, int a5)
{
  HALB_Mutex *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine222IsolatedReadFromStreamEjjRK17HALS_IOEngineInfoj_block_invoke;
  v8[3] = &unk_1E698E608;
  v8[4] = &v12;
  v8[5] = this;
  v9 = a2;
  v10 = a3;
  v8[6] = a4;
  v11 = a5;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  v6 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v6;
}

void sub_1B5B4D120(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::SetupForIsolatedIO(HALS_IOEngine2 *this, int a2, int a3, int a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[6];
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine218SetupForIsolatedIOEjjj_block_invoke;
  v7[3] = &unk_1E698E5B8;
  v7[4] = &v11;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1B5B4D1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::TeardownForIsolatedIO(HALS_IOEngine2 *this, int a2, int a3)
{
  HALB_Mutex *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine221TeardownForIsolatedIOEjj_block_invoke;
  v6[3] = &unk_1E698E5E0;
  v6[4] = &v9;
  v6[5] = this;
  v7 = a2;
  v8 = a3;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1B5B4D284(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::EndReading(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine210EndReadingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E698E658;
  v7[4] = &v10;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v7[6] = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1B5B4D338(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::BeginWriting(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine212BeginWritingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E698E680;
  v7[4] = &v10;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v7[6] = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1B5B4D3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::WriteToStream(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  HALB_Mutex *v6;
  uint64_t v7;
  _QWORD v9[8];
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine213WriteToStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E698E6A8;
  v9[4] = &v13;
  v9[5] = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v9[6] = a5;
  v9[7] = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1B5B4D4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::WriteToStream_CommitTrailingSilence(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  HALB_Mutex *v6;
  uint64_t v7;
  _QWORD v9[8];
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine235WriteToStream_CommitTrailingSilenceEjjjR17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E698E6F8;
  v9[4] = &v13;
  v9[5] = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v9[6] = a5;
  v9[7] = a6;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1B5B4D55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::EndWriting(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine210EndWritingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E698E720;
  v7[4] = &v10;
  v7[5] = this;
  v8 = a2;
  v9 = a3;
  v7[6] = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1B5B4D610(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::HandleOverload(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  HALB_Mutex *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine214HandleOverloadEjjjRN22HALS_IOContextReporter13EngineMetricsE_block_invoke;
  v8[3] = &unk_1E698E6D0;
  v8[4] = &v12;
  v8[5] = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v8[6] = a5;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  v6 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v6;
}

void sub_1B5B4D6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::IsEngineMixing(HALS_IOEngine2 *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 92);
  v2 = *((_QWORD *)this + 93);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v1 + 48))
      {
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 96);
        v3 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
      }
      v1 += 8;
    }
    while (v1 != v2);
  }
  return v3 > 1;
}

void HALS_IOEngine2::_CopyAllContexts(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(_QWORD *)(a1 + 736);
  v3 = *(_QWORD *)(a1 + 744);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      v5 = *(HALS_ObjectMap **)(*(_QWORD *)v2 + 32);
      HALS_ObjectMap::RetainObject(v5, (HALS_Object *)a2);
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOEngine2::_CopyIOContextList(uint64_t result, HALS_Object *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  HALS_ObjectMap *v6;
  unint64_t v7;
  HALS_ObjectMap **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  HALS_ObjectMap **v15;
  HALS_Object *v16;
  _QWORD v17[5];

  v2 = *(_QWORD *)(result + 736);
  v3 = *(_QWORD *)(result + 744);
  if (v2 != v3)
  {
    v5 = (_QWORD *)((char *)a2 + 16);
    do
    {
      v6 = *(HALS_ObjectMap **)(*(_QWORD *)v2 + 32);
      HALS_ObjectMap::RetainObject(v6, a2);
      v8 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((uint64_t)v8 - *(_QWORD *)a2) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v11 = v7 - *(_QWORD *)a2;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v17[4] = v5;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        else
          v14 = 0;
        v15 = (HALS_ObjectMap **)(v13 + 8 * v10);
        v17[0] = v13;
        v17[1] = v15;
        v17[3] = v13 + 8 * v14;
        *v15 = v6;
        v17[2] = v15 + 1;
        std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer((uint64_t *)a2, (HALS_Object *)v17);
        v9 = (_QWORD *)*((_QWORD *)a2 + 1);
        std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer((uint64_t)v17, v16);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
        *((_QWORD *)a2 + 1) = v9;
      }
      *((_QWORD *)a2 + 1) = v9;
      result = pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1B5B4D98C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::_GetAllContextIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  v2 = *(_QWORD *)(a1 + 736);
  v3 = *(_QWORD *)(a1 + 744);
  if (v2 != v3)
  {
    v5 = *(_DWORD **)(a2 + 8);
    do
    {
      v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 16);
      v7 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v5 >= v7)
      {
        v9 = *(_DWORD **)a2;
        v10 = ((uint64_t)v5 - *(_QWORD *)a2) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
          v9 = *(_DWORD **)a2;
          v5 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = (_DWORD *)(v13 + 4 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        while (v5 != v9)
        {
          v16 = *--v5;
          *--v15 = v16;
        }
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = v13 + 4 * v14;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v5 = v6;
        v8 = v5 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v2 += 8;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void HALS_IOEngine2::_GetAllRunningContextClientInfos(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;

  v2 = *(_QWORD *)(a1 + 736);
  for (i = *(_QWORD *)(a1 + 744); v2 != i; v2 += 8)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 32);
    if (v5)
    {
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 224))(*(_QWORD *)(*(_QWORD *)v2 + 32));
      v7 = v6;
      v8 = *(_DWORD *)(v5 + 16);
      v9 = **(_DWORD **)(v5 + 64);
      v11 = *(_DWORD **)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_DWORD **)a2;
        v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a2) >> 2);
        v15 = v14 + 1;
        if (v14 + 1 > 0x1555555555555555)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v13) >> 2);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0xAAAAAAAAAAAAAAALL)
          v17 = 0x1555555555555555;
        else
          v17 = v15;
        if (v17)
        {
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v17);
          v13 = *(_DWORD **)a2;
          v11 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = v17 + 12 * v14;
        *(_BYTE *)v19 = v7;
        *(_DWORD *)(v19 + 4) = v8;
        *(_DWORD *)(v19 + 8) = v9;
        v20 = v19;
        if (v11 != v13)
        {
          do
          {
            v21 = *(_QWORD *)(v11 - 3);
            v11 -= 3;
            v22 = v11[2];
            *(_QWORD *)(v20 - 12) = v21;
            v20 -= 12;
            *(_DWORD *)(v20 + 8) = v22;
          }
          while (v11 != v13);
          v13 = *(_DWORD **)a2;
        }
        v12 = (_DWORD *)(v19 + 12);
        *(_QWORD *)a2 = v20;
        *(_QWORD *)(a2 + 8) = v19 + 12;
        *(_QWORD *)(a2 + 16) = v17 + 12 * v18;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_BYTE *)v11 = v6;
        v12 = v11 + 3;
        v11[1] = v8;
        v11[2] = v9;
      }
      *(_QWORD *)(a2 + 8) = v12;
    }
  }
}

uint64_t HALS_IOEngine2::_RegisterIOContext(uint64_t this, HALS_IOContext *a2)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  HALS_ObjectMap *v12;
  uint64_t v13;
  HALS_ObjectMap *v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  HALS_Object *v21;
  std::string::size_type v22;
  char v23;
  std::string *v24;
  __int128 v25;
  size_t v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  HALS_Object *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 v52;
  NSObject *v53;
  _DWORD *v54;
  unsigned int v55;
  unsigned __int8 v56;
  NSObject *v57;
  _QWORD *v58;
  void *v59;
  std::string v60;
  std::string __p;
  std::string v62;
  uint64_t v63;
  _QWORD v64[3];

  v64[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = this;
    kdebug_trace();
    for (i = *(uint64_t **)(v3 + 736); i != *(uint64_t **)(v3 + 744); ++i)
    {
      v5 = *i;
      if (*(HALS_IOContext **)(v5 + 32) == a2)
        return kdebug_trace();
    }
    v6 = operator new();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v3;
    v7 = *((_DWORD *)a2 + 4);
    v8 = *(_DWORD *)(v3 + 16);
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    if (v7)
    {
      v62.__r_.__value_.__r.__words[0] = HALS_ObjectMap::sObjectInfoListMutex;
      LODWORD(v62.__r_.__value_.__r.__words[1]) = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
      if (!HALS_ObjectMap::sObjectInfoList)
        goto LABEL_14;
      v9 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
      v10 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
      if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v9)
      {
        while (*(_DWORD *)(v10 + 16) != v7)
        {
          v10 += 24;
          if (v10 == v9)
          {
            v10 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v10 == v9)
      {
LABEL_14:
        v11 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(*(_QWORD *)HALS_ObjectMap::sObjectInfoList
                        + 8 * ((v10 - *(_QWORD *)HALS_ObjectMap::sObjectInfoList) >> 3)
                        + 8);
        ++*(_QWORD *)v10;
      }
      HALB_Mutex::Locker::~Locker((HALB_Mutex **)&v62);
    }
    else
    {
      v11 = 0;
    }
    *(_OWORD *)(v6 + 112) = 0u;
    *(_QWORD *)(v6 + 32) = v11;
    *(_DWORD *)(v6 + 40) = v8;
    *(_BYTE *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_DWORD *)(v6 + 104) = 0;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 144) = 0u;
    v12 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)a2 + 8));
    if (v12)
    {
      HALS_Client::GetUniqueDebugString((HALS_Client *)&v62, (uint64_t)v12);
      v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a2 + 18));
      v14 = (HALS_ObjectMap *)v13;
      if (v13)
      {
        v15 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 216))(v13);
        std::string::basic_string[abi:ne180100]<0>(&v60, v15);
        v16 = std::string::insert(&v60, 0, "-", 1uLL);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
      }
      else
      {
        std::to_string(&v60, *((_DWORD *)a2 + 18));
        v24 = std::string::insert(&v60, 0, "-", 1uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v26 = v62.__r_.__value_.__l.__size_;
      v27 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v26)
      {
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v62;
        else
          v28 = (std::string *)v62.__r_.__value_.__r.__words[0];
        memmove(v27, v28, v26);
      }
      *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 45;
      std::to_string(&v60, *((_DWORD *)a2 + 4));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v60;
      else
        v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v30 = v60.__r_.__value_.__l.__size_;
      v31 = std::string::append(&__p, (const std::string::value_type *)v29, v30);
      v22 = v31->__r_.__value_.__r.__words[0];
      v64[0] = v31->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      HALS_ObjectMap::ReleaseObject(v14, v32);
    }
    else
    {
      std::to_string(&v62, *((_DWORD *)a2 + 4));
      v20 = std::string::insert(&v62, 0, "Context: ", 9uLL);
      v22 = v20->__r_.__value_.__r.__words[0];
      v64[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    HALS_ObjectMap::ReleaseObject(v12, v21);
    if (*(char *)(v6 + 159) < 0)
      operator delete(*(void **)(v6 + 136));
    v33 = v64[0];
    *(_QWORD *)(v6 + 136) = v22;
    *(_QWORD *)(v6 + 144) = v33;
    *(_QWORD *)(v6 + 151) = *(_QWORD *)((char *)v64 + 7);
    *(_BYTE *)(v6 + 159) = v23;
    v34 = *(uint64_t **)(v3 + 744);
    v35 = *(_QWORD *)(v3 + 752);
    if ((unint64_t)v34 >= v35)
    {
      v37 = *(_QWORD **)(v3 + 736);
      v38 = v34 - v37;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v40 = v35 - (_QWORD)v37;
      if (v40 >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v42 = (char *)operator new(8 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = (uint64_t *)&v42[8 * v38];
      v44 = &v42[8 * v41];
      *v43 = v6;
      v36 = v43 + 1;
      if (v34 == v37)
      {
        *(_QWORD *)(v3 + 736) = v43;
        *(_QWORD *)(v3 + 744) = v36;
        *(_QWORD *)(v3 + 752) = v44;
      }
      else
      {
        do
        {
          v45 = *--v34;
          *v34 = 0;
          *--v43 = v45;
        }
        while (v34 != v37);
        v34 = *(uint64_t **)(v3 + 736);
        v46 = *(uint64_t **)(v3 + 744);
        *(_QWORD *)(v3 + 736) = v43;
        *(_QWORD *)(v3 + 744) = v36;
        *(_QWORD *)(v3 + 752) = v44;
        while (v46 != v34)
        {
          v48 = *--v46;
          v47 = v48;
          *v46 = 0;
          if (v48)
            std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v47);
        }
      }
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v34 = v6;
      v36 = v34 + 1;
    }
    *(_QWORD *)(v3 + 744) = v36;
    if (*(_DWORD *)(v3 + 760))
    {
      v49 = *(_DWORD *)(v3 + 760);
      v50 = *((_DWORD *)a2 + 4);
      v51 = *(_DWORD *)(v3 + 16);
      v52 = atomic_load((unsigned __int8 *)(v3 + 416));
      if ((v52 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(v3 + 417));
      v53 = *(NSObject **)(v3 + 384);
      v54 = (_DWORD *)operator new();
      *v54 = v49;
      v54[1] = v50;
      v54[2] = v51;
      dispatch_async_f(v53, v54, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke);
    }
    HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 0);
    HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 1u);
    v55 = **((_DWORD **)a2 + 8);
    memset(&__p, 0, sizeof(__p));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 904))(v3, &__p);
    v62.__r_.__value_.__r.__words[0] = __PAIR64__(*(_DWORD *)(v3 + 28), v55);
    v63 = 0;
    *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(&v62.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2));
    v56 = atomic_load((unsigned __int8 *)(v3 + 96));
    if ((v56 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v3 + 97));
    v57 = *(NSObject **)(v3 + 64);
    v58 = (_QWORD *)operator new();
    v59 = (void *)v62.__r_.__value_.__l.__size_;
    *v58 = v62.__r_.__value_.__r.__words[0];
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = 0;
    std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(v58 + 1, v59, v62.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62.__r_.__value_.__r.__words[2] - (_QWORD)v59) >> 2));
    v60.__r_.__value_.__r.__words[0] = 0;
    dispatch_async_f(v57, v58, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v60);
    if (v59)
      operator delete(v59);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return kdebug_trace();
  }
  return this;
}

void sub_1B5B4E2FC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  HALS_ObjectMap *v28;
  HALS_ObjectMap *v29;
  HALS_Object *v31;
  HALS_Object *v32;
  uint64_t v33;
  void *v34;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  HALS_ObjectMap::ReleaseObject(v29, a2);
  if (a27 < 0)
    operator delete(a22);
  HALS_ObjectMap::ReleaseObject(v28, v31);
  if (*(char *)(v27 + 159) < 0)
    operator delete(*(void **)(v27 + 136));
  std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  v33 = 80;
  while (1)
  {
    v34 = *(void **)(v27 + v33);
    if (v34)
      operator delete(v34);
    v33 -= 24;
    if (v33 == 32)
    {
      HALS_Releaser_LongTerm<HALS_IOContext>::~HALS_Releaser_LongTerm((HALS_ObjectMap **)(v27 + 32), v32);
      MEMORY[0x1B5E50688](v27, 0x1032C4028AA3196);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t HALS_IOEngine2::_UnregisterIOContext(uint64_t this, HALS_IOContext *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  HALS_IOContext *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  NSObject *v17;
  _DWORD *v18;

  if (a2)
  {
    v3 = this;
    kdebug_trace();
    v4 = *(uint64_t **)(v3 + 736);
    v5 = *(uint64_t **)(v3 + 744);
    while (v4 != v5)
    {
      v6 = *v4++;
      v7 = *(HALS_IOContext **)(v6 + 32);
      if (v7 == a2)
      {
        v8 = (uint64_t)&v4[(v7 != a2) - 1];
        v9 = &v4[v7 != a2];
        if (v9 != v5)
        {
          do
          {
            v8 = (uint64_t)v9;
            v10 = *(v9 - 1);
            *(v9 - 1) = *v9;
            *v9 = 0;
            if (v10)
              std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v10);
            v9 = (uint64_t *)(v8 + 8);
          }
          while ((uint64_t *)(v8 + 8) != v5);
          v5 = *(uint64_t **)(v3 + 744);
        }
        while (v5 != (uint64_t *)v8)
        {
          v12 = *--v5;
          v11 = v12;
          *v5 = 0;
          if (v12)
            std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v11);
        }
        *(_QWORD *)(v3 + 744) = v8;
        if (*(_DWORD *)(v3 + 760))
        {
          v13 = *(_DWORD *)(v3 + 760);
          v14 = *((_DWORD *)a2 + 4);
          v15 = *(_DWORD *)(v3 + 16);
          v16 = atomic_load((unsigned __int8 *)(v3 + 416));
          if ((v16 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(v3 + 417));
          v17 = *(NSObject **)(v3 + 384);
          v18 = (_DWORD *)operator new();
          *v18 = v13;
          v18[1] = v14;
          v18[2] = v15;
          dispatch_async_f(v17, v18, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke);
        }
        HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 0);
        HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 1u);
        return kdebug_trace();
      }
    }
    return kdebug_trace();
  }
  return this;
}

void HALS_IOEngine2::GatherDeviceInfo(HALS_IOEngine2 *this)
{
  uint64_t v2;
  HALB_Mutex *v3;
  _QWORD v4[6];

  v2 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 320))(this);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_40_9467;
  v4[4] = this;
  v4[5] = v2;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t HALS_IOEngine2::CalculateBufferByteSizeForStreamDomainObjectID(HALS_IOEngine2 *this, char a2, int a3, int a4)
{
  HALB_Mutex *v4;
  uint64_t v5;
  _QWORD v7[6];
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOEngine246CalculateBufferByteSizeForStreamDomainObjectIDEbjj_block_invoke;
  v7[3] = &unk_1E698E338;
  v7[4] = &v11;
  v7[5] = this;
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1B5B4E70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::_IsCaptureFileEnabled(HALS_IOEngine2 *this)
{
  return *((_DWORD *)this + 191) != 0;
}

_DWORD *HALS_IOEngine2::_SetAudioCaptureMode(_DWORD *result, int a2)
{
  int v2;
  int v3;

  v2 = result[191];
  if (a2)
  {
    result[191] = v2 + 1;
    if (!v2)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 592))(result);
  }
  else if (v2)
  {
    v3 = v2 - 1;
    result[191] = v3;
    if (!v3)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 600))(result);
  }
  return result;
}

uint64_t HALS_IOEngine2::_RegisterIOBuffer(HALS_IOEngine2 *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  return 0;
}

AMCP::Log::Scope_Registry *HALS_IOEngine2::_StartIO(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  caulk::concurrent::messenger *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  unsigned int v18;
  caulk::concurrent::messenger *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL8 v29;
  AMCP::Log::Scope_Registry *v30;
  AMCP::Log::Scope_Registry *v31;
  caulk::concurrent::messenger *v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  caulk::concurrent::messenger *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  const BOOL *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  std::string *v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  vm_address_t Buffer;
  _DWORD *v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  Float64 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  AudioConverterRef *v113;
  __int128 v114;
  __int128 v115;
  AudioConverterRef *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  _DWORD *v125;
  std::string *v126;
  uint64_t v127;
  size_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  int64x2_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  std::string::size_type size;
  std::string::size_type v146;
  unint64_t v147;
  unint64_t v148;
  Float64 v149;
  uint64_t v150;
  char *v151;
  _DWORD *v152;
  std::string *v153;
  uint64_t v154;
  AMCP::Log::Scope_Registry *v155;
  caulk::concurrent::messenger *v156;
  _opaque_pthread_t *v157;
  mach_port_t v158;
  uint64_t v159;
  unint64_t *v160;
  int v161;
  HALS_IOEngine2_IOContextInfo **i;
  HALS_IOEngine2_IOContextInfo *v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v169;
  int v170;
  char v172;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  int64x2_t *v177;
  unsigned int v178;
  int AudioCaptureMode;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  std::string::size_type v185;
  __int128 __p;
  _QWORD *v187;
  __int128 *p_p;
  std::string v189;
  std::string *v190;
  int v191;
  AudioStreamBasicDescription v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 16);
  v170 = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1056);
  if (v6)
    v7 = "Prewarmed";
  else
    v7 = "Stopped";
  if (v5)
    v8 = "Running";
  else
    v8 = v7;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v192, "com.apple.coreaudio", "AMCP");
  v9 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v192.mSampleRate + 8);
  v10 = pthread_self();
  v11 = pthread_mach_thread_np(v10);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 80, 8);
  *(_DWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 20) = 2;
  *(_DWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v12 + 40) = 2508;
  *(_DWORD *)(v12 + 44) = v4;
  *(_DWORD *)(v12 + 48) = v170;
  *(_QWORD *)(v12 + 56) = v6;
  *(_QWORD *)(v12 + 64) = v5;
  *(_QWORD *)(v12 + 72) = v8;
  *(_QWORD *)v12 = &off_1E698E848;
  *(_QWORD *)(v12 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v12);
  v13 = (_QWORD *)(a1 + 1056);
  v14 = *(std::__shared_weak_count **)&v192.mFormatID;
  if (*(_QWORD *)&v192.mFormatID)
  {
    v15 = (unint64_t *)(*(_QWORD *)&v192.mFormatID + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (AMCP::Log::Scope_Registry *)HALS_IOPrewarmManager::Start(v13, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 1060));
  v18 = atomic_load((unsigned int *)(a1 + 1072));
  if ((_DWORD)v17 == v18)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v192, "com.apple.coreaudio", "AMCP");
    v19 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v192.mSampleRate + 8);
    v20 = pthread_self();
    v21 = pthread_mach_thread_np(v20);
    v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v22 + 16) = 0;
    *(_BYTE *)(v22 + 20) = 0;
    *(_DWORD *)(v22 + 24) = v21;
    *(_QWORD *)(v22 + 32) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v22 + 40) = 2516;
    *(_DWORD *)(v22 + 44) = v4;
    *(_DWORD *)(v22 + 48) = v170;
    *(_QWORD *)v22 = &off_1E698E8A0;
    *(_QWORD *)(v22 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v22);
    v23 = *(std::__shared_weak_count **)&v192.mFormatID;
    if (*(_QWORD *)&v192.mFormatID)
    {
      v24 = (unint64_t *)(*(_QWORD *)&v192.mFormatID + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
LABEL_186:
    v31 = 0;
    goto LABEL_187;
  }
  v26 = v17;
  v27 = atomic_load((unsigned int *)(a1 + 1072));
  if (*(_QWORD *)(a1 + 1064))
    v28 = 1;
  else
    v28 = *v13 != 0;
  if (v27)
    v29 = 0;
  else
    v29 = v28;
  v30 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t, AMCP::Log::Scope_Registry *, _BOOL8))(*(_QWORD *)a1 + 992))(a1, a2, v17, v29);
  v31 = v30;
  if ((_DWORD)v30)
  {
    AMCP::Log::Scope_Registry::get(v30);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v192, "com.apple.coreaudio", "AMCP");
    v32 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v192.mSampleRate + 8);
    v33 = pthread_self();
    v34 = pthread_mach_thread_np(v33);
    v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v35 + 16) = 0;
    *(_BYTE *)(v35 + 20) = 16;
    *(_DWORD *)(v35 + 24) = v34;
    *(_QWORD *)(v35 + 32) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v35 + 40) = 2528;
    *(_DWORD *)(v35 + 44) = v170;
    *(_DWORD *)(v35 + 48) = (_DWORD)v31;
    *(_QWORD *)v35 = &off_1E698E8F8;
    *(_QWORD *)(v35 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v32, (caulk::concurrent::message *)v35);
    v36 = *(std::__shared_weak_count **)&v192.mFormatID;
    if (!*(_QWORD *)&v192.mFormatID)
      goto LABEL_187;
    v37 = (unint64_t *)(*(_QWORD *)&v192.mFormatID + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    goto LABEL_28;
  }
  v39 = *(_QWORD *)(a1 + 1064);
  v40 = *(_QWORD *)(a1 + 1056);
  if (v40)
    v41 = "Prewarmed";
  else
    v41 = "Stopped";
  if (v39)
    v42 = "Running";
  else
    v42 = v41;
  AMCP::Log::Scope_Registry::get(v30);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v192, "com.apple.coreaudio", "AMCP");
  v43 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v192.mSampleRate + 8);
  v44 = pthread_self();
  v45 = pthread_mach_thread_np(v44);
  v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 80, 8);
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 0;
  *(_DWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v46 + 40) = 2537;
  *(_DWORD *)(v46 + 44) = v4;
  *(_DWORD *)(v46 + 48) = v170;
  *(_QWORD *)(v46 + 56) = v40;
  *(_QWORD *)(v46 + 64) = v39;
  *(_QWORD *)(v46 + 72) = v42;
  *(_QWORD *)v46 = &off_1E698E950;
  *(_QWORD *)(v46 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v43, (caulk::concurrent::message *)v46);
  v47 = *(std::__shared_weak_count **)&v192.mFormatID;
  if (*(_QWORD *)&v192.mFormatID)
  {
    v48 = (unint64_t *)(*(_QWORD *)&v192.mFormatID + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  atomic_store(v26, (unsigned int *)(a1 + 1072));
  if (!v29)
    goto LABEL_186;
  v50 = *(_QWORD *)(a1 + 768);
  if (v50)
  {
    AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode((HALS_IOContext *)a2);
    v51 = 0;
    v169 = v50 + 48;
    v52 = 1;
    while (1)
    {
      v172 = v52;
      v53 = (_QWORD *)(v169 + 24 * v51);
      v54 = v53 + 1;
      v55 = v53[1] - *v53;
      if ((v55 & 0x7FFFFFFF8) != 0)
        break;
LABEL_180:
      v52 = 0;
      v51 = 1;
      if ((v172 & 1) == 0)
        goto LABEL_181;
    }
    v56 = 0;
    v57 = (v55 >> 3);
    v175 = v53 + 1;
    v176 = v53;
    v174 = v57;
    while (1)
    {
      if (v56 >= (uint64_t)(*v54 - *v53) >> 3)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v58 = *(_QWORD **)(*v53 + 8 * v56);
      *((_DWORD *)v58 + 9) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 336))(*v58);
      v58[58] = 0;
      if (!*((_BYTE *)v58 + 20))
      {
        if (AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v59))
          break;
      }
LABEL_87:
      if (*((_DWORD *)v58 + 12) == 1819304813)
      {
        v92 = *((_DWORD *)v58 + 13);
        if ((v92 & 0x40) == 0)
        {
          if ((v92 & 0x20) != 0)
            v93 = 1;
          else
            v93 = *((_DWORD *)v58 + 17);
          v94 = (v93 * *((_DWORD *)v58 + 9));
          v96 = v58[59];
          v95 = (_DWORD *)v58[60];
          v97 = ((uint64_t)v95 - v96) >> 2;
          if (v94 <= v97)
          {
            if (v94 < v97)
              v58[60] = v96 + 4 * v94;
          }
          else
          {
            v98 = v58[61];
            if (v94 - v97 <= (v98 - (uint64_t)v95) >> 2)
            {
              v111 = &v95[v94 - v97];
              v112 = 4 * v94 - 4 * v97;
              do
              {
                *v95++ = 0;
                v112 -= 4;
              }
              while (v112);
              v58[60] = v111;
            }
            else
            {
              v99 = v98 - v96;
              v100 = v99 >> 1;
              if (v99 >> 1 <= v94)
                v100 = v94;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v101 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              *(_QWORD *)&v192.mBitsPerChannel = v58 + 61;
              Buffer = HALB_IOBufferManager_Server::AllocateBuffer((4 * v101));
              v103 = (_DWORD *)(Buffer + 4 * v97);
              v104 = v103;
              v105 = 4 * v94 - 4 * v97;
              do
              {
                *v104++ = 0;
                v105 -= 4;
              }
              while (v105);
              v107 = *((double *)v58 + 59);
              v106 = v58[60];
              if (v106 != *(_QWORD *)&v107)
              {
                v108 = v58[60];
                do
                {
                  v109 = *(_DWORD *)(v108 - 4);
                  v108 -= 4;
                  *--v103 = v109;
                }
                while (v108 != *(_QWORD *)&v107);
              }
              v58[59] = v103;
              v58[60] = Buffer + 4 * v94;
              v110 = v58[61];
              v58[61] = Buffer + 4 * v101;
              *(_QWORD *)&v192.mBytesPerPacket = v106;
              *(_QWORD *)&v192.mBytesPerFrame = v110;
              v192.mSampleRate = v107;
              *(Float64 *)&v192.mFormatID = v107;
              std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer((uint64_t)&v192);
            }
          }
          std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit(v58 + 59);
          if (*((_BYTE *)v58 + 20))
          {
            v113 = (AudioConverterRef *)operator new();
            v114 = *(_OWORD *)(v58 + 7);
            *(_OWORD *)&v192.mSampleRate = *(_OWORD *)(v58 + 5);
            *(_OWORD *)&v192.mBytesPerPacket = v114;
            *(_QWORD *)&v192.mBitsPerChannel = v58[9];
            FormatConverter::FormatConverter(v113, (const AudioStreamBasicDescription *)v58 + 3, &v192);
          }
          else
          {
            v113 = (AudioConverterRef *)operator new();
            v115 = *(_OWORD *)(v58 + 17);
            *(_OWORD *)&v192.mSampleRate = *(_OWORD *)(v58 + 15);
            *(_OWORD *)&v192.mBytesPerPacket = v115;
            *(_QWORD *)&v192.mBitsPerChannel = v58[19];
            FormatConverter::FormatConverter(v113, (const AudioStreamBasicDescription *)v58 + 1, &v192);
          }
          v116 = (AudioConverterRef *)v58[20];
          v58[20] = v113;
          if (v116)
            std::default_delete<FormatConverter>::operator()[abi:ne180100](v116);
          v178 = *((_DWORD *)v58 + 9);
          v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 576))(*v58);
          v118 = v58[23];
          v119 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 320))(*v58);
          v120 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 216))(v119);
          std::string::basic_string[abi:ne180100]<0>(v184, v120);
          if (*(_QWORD *)v118)
          {
            v177 = (int64x2_t *)(v118 + 144);
            std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)(v118 + 144));
            v122 = *(_QWORD *)(v118 + 24);
            v121 = *(_QWORD *)(v118 + 32);
            if (v122 != v121)
            {
              v123 = 0;
              v124 = 1;
              while (1)
              {
                v125 = malloc_type_calloc(1uLL, 0x18uLL, 0xC517D68uLL);
                if (v125)
                  *v125 = 1;
                v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697F7F0;
                v190 = &v189;
                *(_QWORD *)&v192.mSampleRate = v125;
                std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v192.mFormatID, (uint64_t)&v189);
                std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100]((uint64_t *)(v122 + 40), (uint64_t *)&v192);
                std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v192);
                v126 = v190;
                if (v190 == &v189)
                  break;
                if (v190)
                {
                  v127 = 5;
LABEL_124:
                  (*(void (**)(std::string *))(v126->__r_.__value_.__r.__words[0] + 8 * v127))(v126);
                }
                if ((v124 & 1) == 0)
                {
                  v128 = 4 * *(unsigned int *)(v122 + 28) * (unint64_t)v178;
                  v130 = *(_QWORD *)(v118 + 152);
                  v129 = *(_QWORD *)(v118 + 160);
                  if (v130 >= v129)
                  {
                    v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - v177->i64[0]) >> 3);
                    v133 = v132 + 1;
                    if (v132 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - v177->i64[0]) >> 3);
                    if (2 * v134 > v133)
                      v133 = 2 * v134;
                    if (v134 >= 0x555555555555555)
                      v135 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v135 = v133;
                    *(_QWORD *)&v192.mBitsPerChannel = v118 + 160;
                    if (v135)
                    {
                      if (v135 > 0xAAAAAAAAAAAAAAALL)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v136 = (char *)operator new(24 * v135);
                    }
                    else
                    {
                      v136 = 0;
                    }
                    *(_QWORD *)&v192.mSampleRate = v136;
                    *(_QWORD *)&v192.mFormatID = &v136[24 * v132];
                    *(_QWORD *)&v192.mBytesPerPacket = *(_QWORD *)&v192.mFormatID;
                    *(_QWORD *)&v192.mBytesPerFrame = &v136[24 * v135];
                    std::vector<unsigned char>::vector(*(_QWORD **)&v192.mFormatID, v128);
                    v137 = *(_QWORD *)&v192.mFormatID;
                    v131 = *(_QWORD *)&v192.mBytesPerPacket + 24;
                    *(_QWORD *)&v192.mBytesPerPacket += 24;
                    v139 = *(_QWORD **)(v118 + 144);
                    v138 = *(_QWORD **)(v118 + 152);
                    if (v138 == v139)
                    {
                      v141 = vdupq_n_s64((unint64_t)v138);
                    }
                    else
                    {
                      do
                      {
                        *(_QWORD *)(v137 - 24) = 0;
                        *(_QWORD *)(v137 - 16) = 0;
                        v137 -= 24;
                        *(_QWORD *)(v137 + 16) = 0;
                        v140 = *(_OWORD *)(v138 - 3);
                        v138 -= 3;
                        *(_OWORD *)v137 = v140;
                        *(_QWORD *)(v137 + 16) = v138[2];
                        *v138 = 0;
                        v138[1] = 0;
                        v138[2] = 0;
                      }
                      while (v138 != v139);
                      v141 = *v177;
                      v131 = *(_QWORD *)&v192.mBytesPerPacket;
                    }
                    *(_QWORD *)(v118 + 144) = v137;
                    *(_QWORD *)(v118 + 152) = v131;
                    *(int64x2_t *)&v192.mFormatID = v141;
                    v142 = *(_QWORD *)(v118 + 160);
                    *(_QWORD *)(v118 + 160) = *(_QWORD *)&v192.mBytesPerFrame;
                    *(_QWORD *)&v192.mBytesPerFrame = v142;
                    *(_QWORD *)&v192.mSampleRate = v141.i64[0];
                    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v192);
                  }
                  else
                  {
                    std::vector<unsigned char>::vector(*(_QWORD **)(v118 + 152), 4 * *(unsigned int *)(v122 + 28) * (unint64_t)v178);
                    v131 = v130 + 24;
                    *(_QWORD *)(v118 + 152) = v131;
                  }
                  *(_QWORD *)(v118 + 152) = v131;
                }
                if (*(_DWORD *)(v122 + 8) == 1819304813)
                  v143 = v117;
                else
                  v143 = 0;
                if (v143 == 1)
                {
                  memset(&v189, 0, sizeof(v189));
                  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>((uint64_t *)&v189, (uint64_t)v184);
                  if (v123)
                    v144 = "DSP-aux";
                  else
                    v144 = "DSP-main";
                  std::string::basic_string[abi:ne180100]<0>(&__p, v144);
                  size = v189.__r_.__value_.__l.__size_;
                  if (v189.__r_.__value_.__l.__size_ >= v189.__r_.__value_.__r.__words[2])
                  {
                    v147 = 0xCCCCCCCCCCCCCCCDLL
                         * ((uint64_t)(v189.__r_.__value_.__l.__size_ - v189.__r_.__value_.__r.__words[0]) >> 3);
                    v148 = v147 + 1;
                    if (v147 + 1 > 0x666666666666666)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    if (0x999999999999999ALL
                       * ((uint64_t)(v189.__r_.__value_.__r.__words[2] - v189.__r_.__value_.__r.__words[0]) >> 3) > v148)
                      v148 = 0x999999999999999ALL
                           * ((uint64_t)(v189.__r_.__value_.__r.__words[2] - v189.__r_.__value_.__r.__words[0]) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL
                       * ((uint64_t)(v189.__r_.__value_.__r.__words[2] - v189.__r_.__value_.__r.__words[0]) >> 3) >= 0x333333333333333)
                      v149 = 7.89772539e-278;
                    else
                      v149 = *(double *)&v148;
                    *(_QWORD *)&v192.mBitsPerChannel = (char *)&v189.__r_.__value_.__l + 16;
                    if (v149 == 0.0)
                      v150 = 0;
                    else
                      v149 = COERCE_DOUBLE(std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(*(unint64_t *)&v149));
                    v192.mSampleRate = v149;
                    *(_QWORD *)&v192.mFormatID = *(_QWORD *)&v149 + 40 * v147;
                    *(_QWORD *)&v192.mBytesPerPacket = *(_QWORD *)&v192.mFormatID;
                    *(_QWORD *)&v192.mBytesPerFrame = *(_QWORD *)&v149 + 40 * v150;
                    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(*(uint64_t *)&v192.mFormatID, 1, (uint64_t)&__p);
                    *(_QWORD *)&v192.mBytesPerPacket += 40;
                    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer((uint64_t *)&v189, &v192);
                    v146 = v189.__r_.__value_.__l.__size_;
                    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v192);
                  }
                  else
                  {
                    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(v189.__r_.__value_.__l.__size_, 1, (uint64_t)&__p);
                    v146 = size + 40;
                  }
                  v189.__r_.__value_.__l.__size_ = v146;
                  LODWORD(v192.mSampleRate) = v123;
                  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>((uint64_t *)&v189, (unsigned int *)&v192);
                  if (SHIBYTE(v187) < 0)
                    operator delete((void *)__p);
                  v151 = (char *)operator new();
                  HALB_CaptureFile::HALB_CaptureFile(v151, (uint64_t *)&v189, v122, AudioCaptureMode);
                  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(v122 + 80), (ca::concurrent::details::service_thread ***)v151);
                  *(_QWORD *)&v192.mSampleRate = &v189;
                  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
                }
                v124 = 0;
                ++v123;
                v122 += 88;
                if (v122 == v121)
                  goto LABEL_167;
              }
              v126 = &v189;
              v127 = 4;
              goto LABEL_124;
            }
LABEL_167:
            v152 = malloc_type_calloc(1uLL, 0x18uLL, 0xC517D68uLL);
            v54 = v175;
            v53 = v176;
            v57 = v174;
            if (v152)
              *v152 = 1;
            v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E697F870;
            v190 = &v189;
            *(_QWORD *)&v192.mSampleRate = v152;
            std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v192.mFormatID, (uint64_t)&v189);
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100]((uint64_t *)(v118 + 104), (uint64_t *)&v192);
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v192);
            v153 = v190;
            if (v190 == &v189)
            {
              v153 = &v189;
              v154 = 4;
LABEL_173:
              (*(void (**)(std::string *))(v153->__r_.__value_.__r.__words[0] + 8 * v154))(v153);
            }
            else if (v190)
            {
              v154 = 5;
              goto LABEL_173;
            }
            DSPGraph::Graph::reset(*(DSPGraph::Graph **)v118);
          }
          if (SHIBYTE(v185) < 0)
            operator delete(v184[0]);
        }
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v58 + 576))(*v58))
        HALS_IOEngine2_StreamInfo::CreateCaptureFile((uint64_t)v58, AudioCaptureMode);
      if (++v56 == v57)
        goto LABEL_180;
    }
    LODWORD(v60) = *((_DWORD *)v58 + 9);
    v61 = *(_QWORD *)(*v58 + 1080);
    v62 = *(_QWORD *)(*v58 + 1088);
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    *(_QWORD *)&v65 = v61;
    *((_QWORD *)&v65 + 1) = v62;
    LODWORD(v192.mSampleRate) = 2;
    *(double *)&v192.mFormatID = (double)v60;
    *(_QWORD *)&v192.mBytesPerPacket = 0;
    *(_OWORD *)&v192.mBytesPerFrame = v65;
    v66 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 320))(*v58);
    v67 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 216))(v66);
    std::string::basic_string[abi:ne180100]<0>(v184, v67);
    v68 = (std::string *)*((unsigned int *)v58 + 3);
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *(_OWORD *)v184;
    v69 = v185;
    v184[1] = 0;
    v185 = 0;
    v184[0] = 0;
    v189.__r_.__value_.__r.__words[2] = v69;
    v190 = v68;
    v191 = 0;
    v180 = 0;
    v181 = 0;
    HALS_System::GetInstance(&__p, 0, &v180);
    v70 = *(std::__shared_weak_count **)(__p + 1344);
    v182 = *(_QWORD *)(__p + 1336);
    v183 = v70;
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
    }
    v73 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v181;
    if (v181)
    {
      v77 = (unint64_t *)&v181->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    AMCP::Graph::Synchronized_Mixer_Manager::get_mixer(&__p, v182, (uint64_t)&v189, (uint64_t)(v58 + 5), (const AMCP::DAL::DAL_Time_Delta *)&v192);
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)(v58 + 26), &__p);
    v79 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v58[26];
    v83 = *v58;
    *(_QWORD *)&__p = &off_1E6991F78;
    *((_QWORD *)&__p + 1) = v83;
    v187 = v58;
    p_p = &__p;
    AMCP::DAL::Synchronized_Mixer::add_emission_handler(v82, &__p);
    v84 = p_p;
    if (p_p == &__p)
    {
      v84 = &__p;
      v85 = 4;
    }
    else
    {
      if (!p_p)
        goto LABEL_75;
      v85 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v84 + 8 * v85))(v84);
LABEL_75:
    v86 = v183;
    if (v183)
    {
      v87 = (unint64_t *)&v183->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v189.__r_.__value_.__l.__data_);
    v89 = *(std::__shared_weak_count **)&v192.mBitsPerChannel;
    if (*(_QWORD *)&v192.mBitsPerChannel)
    {
      v90 = (unint64_t *)(*(_QWORD *)&v192.mBitsPerChannel + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    goto LABEL_87;
  }
LABEL_181:
  v155 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
  v31 = v155;
  if (!(_DWORD)v155)
    goto LABEL_187;
  AMCP::Log::Scope_Registry::get(v155);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v192, "com.apple.coreaudio", "AMCP");
  v156 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v192.mSampleRate + 8);
  v157 = pthread_self();
  v158 = pthread_mach_thread_np(v157);
  v159 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v159 + 16) = 0;
  *(_BYTE *)(v159 + 20) = 16;
  *(_DWORD *)(v159 + 24) = v158;
  *(_QWORD *)(v159 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v159 + 40) = 2553;
  *(_DWORD *)(v159 + 44) = v170;
  *(_DWORD *)(v159 + 48) = (_DWORD)v31;
  *(_QWORD *)v159 = &off_1E698E9A8;
  *(_QWORD *)(v159 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v156, (caulk::concurrent::message *)v159);
  v36 = *(std::__shared_weak_count **)&v192.mFormatID;
  if (!*(_QWORD *)&v192.mFormatID)
    goto LABEL_187;
  v160 = (unint64_t *)(*(_QWORD *)&v192.mFormatID + 8);
  do
    v38 = __ldaxr(v160);
  while (__stlxr(v38 - 1, v160));
LABEL_28:
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_187:
  v161 = *(_DWORD *)(a2 + 16);
  if (v161)
  {
    for (i = *(HALS_IOEngine2_IOContextInfo ***)(a1 + 736); i != *(HALS_IOEngine2_IOContextInfo ***)(a1 + 744); ++i)
    {
      v163 = *i;
      if (*(_DWORD *)(*((_QWORD *)*i + 4) + 16) == v161)
      {
        if (!(_DWORD)v31 && !*((_BYTE *)v163 + 48))
        {
          HALS_IOEngine2_IOContextInfo::StartIO(*i);
          v164 = *(_QWORD *)(a1 + 768);
          v165 = *(_DWORD *)(a2 + 16);
          if (*((char *)v163 + 159) < 0)
            std::string::__init_copy_ctor_external(&v189, *((const std::string::value_type **)v163 + 17), *((_QWORD *)v163 + 18));
          else
            v189 = *(std::string *)((char *)v163 + 136);
          HALS_IOEngine2_DeviceInfo::StartContext(v164, v165, (uint64_t)&v189);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          *a4 = 1;
        }
        break;
      }
    }
  }
  v166 = atomic_load((unsigned int *)(a1 + 1072));
  atomic_store(v166 != 0, (unsigned __int8 *)(a1 + 1076));
  return v31;
}

void sub_1B5B4F7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 169) < 0)
    operator delete(*(void **)(v35 - 192));
  _Unwind_Resume(exception_object);
}

void sub_1B5B4F844(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x1B5E50688](v2, 0x20C4093837F09);
    JUMPOUT(0x1B5B4F9D8);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F86C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void **a42)
{
  uint64_t v42;
  void **v43;
  uint64_t v44;

  if (!a2)
    JUMPOUT(0x1B5B4F83CLL);
  v43 = a42;
  if (a42 == &a36)
  {
    v44 = 4;
    v43 = &a36;
  }
  else
  {
    if (!a42)
      goto LABEL_7;
    v44 = 5;
  }
  (*((void (**)(void))*v43 + v44))();
LABEL_7:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (*(char *)(v42 - 169) < 0)
    operator delete(*(void **)(v42 - 192));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a9);
  JUMPOUT(0x1B5B4F9D8);
}

void sub_1B5B4F8FC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    *(_QWORD *)(v3 - 184) = v2;
    JUMPOUT(0x1B5B4F96CLL);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F910(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a2)
  {
    *(_QWORD *)(v36 + 152) = v35;
    if (a35 < 0)
      operator delete(a30);
    JUMPOUT(0x1B5B4F9D8);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F920(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a2)
  {
    std::__split_buffer<std::vector<float>>::~__split_buffer(v35 - 144);
    if (a35 < 0)
      operator delete(a30);
    JUMPOUT(0x1B5B4F9D8);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F934(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer(v2 - 144);
    JUMPOUT(0x1B5B4F96CLL);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F950(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  if (a2)
  {
    a33 = v33 - 192;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100](&a33);
    JUMPOUT(0x1B5B4F9BCLL);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F964(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a2)
  {
    if (a41 < 0)
      operator delete(__p);
    __p = (void *)(v41 - 192);
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (a35 < 0)
      operator delete(a30);
    JUMPOUT(0x1B5B4F9D8);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F980(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x1B5E50688](v2, 0x1020C40C1DD3C34);
    JUMPOUT(0x1B5B4F9A0);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F9B4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5B4F9BCLL);
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4F9D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  AMCP::Log::Scope_Registry *v36;
  caulk::concurrent::messenger *v37;
  _opaque_pthread_t *v38;

  if (a2)
  {
    v36 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a35, "com.apple.coreaudio", "AMCP");
    v37 = *(caulk::concurrent::messenger **)(a35 + 8);
    a30 = 16;
    v38 = pthread_self();
    *(_DWORD *)(v35 - 192) = pthread_mach_thread_np(v38);
    *(_QWORD *)(v35 - 184) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v35 - 176) = 2565;
    *(_DWORD *)(v35 - 172) = a15;
    *(_DWORD *)(v35 - 168) = a11;
    caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>(v37, &a30, (__int128 *)(v35 - 192));
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
    __cxa_end_catch();
    JUMPOUT(0x1B5B4F698);
  }
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4FA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  __cxa_end_catch();
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4FA74(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B5B4F83CLL);
}

void sub_1B5B4FA84()
{
  JUMPOUT(0x1B5B4F83CLL);
}

uint64_t HALS_IOEngine2::_StopIO(AMCP::Log::Scope_Registry *j, uint64_t a2, int a3, _BYTE *a4)
{
  AMCP::Log::Scope_Registry *v6;
  int v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  AMCP::Log::Scope_Registry *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  caulk::concurrent::messenger *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  int64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  _BOOL8 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  AudioConverterRef *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  std::string v61;

  v6 = j;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    for (i = (uint64_t *)*((_QWORD *)j + 92); i != *((uint64_t **)j + 93); ++i)
    {
      v9 = *i;
      if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == v7)
      {
        if (!a3 && *(_BYTE *)(v9 + 48))
        {
          v10 = *((_QWORD *)j + 96);
          if (*(char *)(v9 + 159) < 0)
            std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(v9 + 136), *(_QWORD *)(v9 + 144));
          else
            v61 = *(std::string *)(v9 + 136);
          HALS_IOEngine2_DeviceInfo::StopContext(v10, v7, (uint64_t)&v61);
          v11 = a4;
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          *(_DWORD *)(v9 + 104) = 0;
          v12 = *(AMCP::Log::Scope_Registry **)(v9 + 112);
          for (j = *(AMCP::Log::Scope_Registry **)(v9 + 120);
                j != v12;
          *(_QWORD *)(v9 + 120) = v12;
          *(_BYTE *)(v9 + 48) = 0;
          v7 = *(_DWORD *)(a2 + 16);
          a4 = v11;
        }
        break;
      }
    }
  }
  v13 = *((_DWORD *)v6 + 4);
  v14 = *((_QWORD *)v6 + 133);
  v15 = *((_QWORD *)v6 + 132);
  v16 = "Prewarmed";
  if (!v15)
    v16 = "Stopped";
  if (v14)
    v17 = "Running";
  else
    v17 = v16;
  AMCP::Log::Scope_Registry::get(j);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v61, "com.apple.coreaudio", "AMCP");
  v18 = *(caulk::concurrent::messenger **)(v61.__r_.__value_.__r.__words[0] + 8);
  v19 = pthread_self();
  v20 = pthread_mach_thread_np(v19);
  v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 80, 8);
  *(_DWORD *)(v21 + 16) = 0;
  *(_BYTE *)(v21 + 20) = 0;
  *(_DWORD *)(v21 + 24) = v20;
  *(_QWORD *)(v21 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v21 + 40) = 2603;
  *(_DWORD *)(v21 + 44) = v13;
  *(_DWORD *)(v21 + 48) = v7;
  *(_QWORD *)(v21 + 56) = v15;
  *(_QWORD *)(v21 + 64) = v14;
  *(_QWORD *)(v21 + 72) = v17;
  *(_QWORD *)v21 = &off_1E698EA80;
  *(_QWORD *)(v21 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v18, (caulk::concurrent::message *)v21);
  v22 = (_QWORD *)((char *)v6 + 1056);
  size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
  if (v61.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  result = HALS_IOPrewarmManager::Stop((_QWORD *)v6 + 132, *(_DWORD *)(*(_QWORD *)(a2 + 96) + 1060));
  v27 = result;
  v28 = atomic_load((unsigned int *)v6 + 268);
  if ((_DWORD)result == v28)
  {
    v29 = *((_QWORD *)v6 + 96);
    v30 = *(unint64_t **)(v29 + 72);
    v31 = *(unint64_t **)(v29 + 80);
    v32 = (char *)v31 - (char *)v30;
    if ((((char *)v31 - (char *)v30) & 0x7FFFFFFF8) != 0)
    {
      v33 = 0;
      while ((v32 & 0x7FFFFFFF8) != 0)
      {
        if (v31 == v30)
          goto LABEL_75;
        v34 = *v30;
        if (!*v30)
          goto LABEL_44;
        v34 = *(unsigned int *)(v34 + 12);
        v35 = (uint64_t *)*((_QWORD *)v6 + 92);
        v36 = (uint64_t *)*((_QWORD *)v6 + 93);
        if (v35 == v36)
          goto LABEL_44;
        while (1)
        {
          result = *v35;
          v37 = *(_QWORD *)(*v35 + 88);
          if ((_DWORD)v37)
          {
            if (v37 <= v34)
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            v38 = *(unsigned __int8 *)(result + 48);
            result = *(_QWORD *)(*(_QWORD *)(result + 80) + 8 * (v34 >> 6)) & (1 << v34);
            if (v38 && result != 0)
              break;
          }
          if (++v35 == v36)
            goto LABEL_44;
        }
LABEL_47:
        ++v33;
        v30 = *(unint64_t **)(v29 + 72);
        v31 = *(unint64_t **)(v29 + 80);
        v32 = (char *)v31 - (char *)v30;
        if (v33 >= ((unint64_t)((char *)v31 - (char *)v30) >> 3))
          goto LABEL_74;
      }
      v34 = 0;
LABEL_44:
      v40 = v31 - v30;
      if (v34 < v40)
      {
        if (v40 <= v34)
          goto LABEL_75;
        *(_QWORD *)(v30[v34] + 464) = 0;
      }
      goto LABEL_47;
    }
  }
  else
  {
    atomic_store((_DWORD)result != 0, (unsigned __int8 *)v6 + 1076);
    v41 = atomic_load((unsigned int *)v6 + 268);
    if (*((_QWORD *)v6 + 133))
      v42 = 0;
    else
      v42 = *v22 == 0;
    if (v41)
      v43 = v42;
    else
      v43 = 0;
    result = (*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v6 + 1000))(v6, a2, result, v43);
    v44 = atomic_load((unsigned int *)v6 + 268);
    if (!*((_QWORD *)v6 + 133) && v44 && !*v22)
    {
      v60 = a4;
      result = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v6 + 1344))(v6);
      v45 = *((_QWORD *)v6 + 96);
      if (v45)
      {
        v46 = 0;
        v47 = v45 + 48;
        v48 = 1;
        do
        {
          v49 = v48;
          v50 = (_QWORD *)(v47 + 24 * v46);
          v51 = v50[1] - *v50;
          if ((v51 & 0x7FFFFFFF8) != 0)
          {
            v52 = 0;
            v53 = (v51 >> 3);
            do
            {
              if (v52 >= (uint64_t)(v50[1] - *v50) >> 3)
LABEL_75:
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              v54 = *(_QWORD *)(*v50 + 8 * v52);
              v55 = *(_QWORD *)(v54 + 472);
              if (*(_QWORD *)(v54 + 480) != v55)
                *(_QWORD *)(v54 + 480) = v55;
              std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit((uint64_t *)(v54 + 472));
              v56 = *(AudioConverterRef **)(v54 + 160);
              *(_QWORD *)(v54 + 160) = 0;
              if (v56)
                std::default_delete<FormatConverter>::operator()[abi:ne180100](v56);
              std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(v54 + 200), 0);
              v57 = *(uint64_t **)(v54 + 184);
              result = *v57;
              if (*v57)
              {
                result = DSPGraph::Graph::reset((DSPGraph::Graph *)result);
                v58 = v57[3];
                v59 = v57[4];
                while (v58 != v59)
                {
                  result = (uint64_t)std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(v58 + 80), 0);
                  v58 += 88;
                }
              }
              ++v52;
            }
            while (v52 != v53);
          }
          v48 = 0;
          v46 = 1;
        }
        while ((v49 & 1) != 0);
      }
      *v60 = 1;
    }
  }
LABEL_74:
  atomic_store(v27, (unsigned int *)v6 + 268);
  return result;
}

void sub_1B5B4FF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::_TellHardwareToStart()
{
  return 0;
}

uint64_t HALS_IOEngine2::_BeginIOThread(HALS_IOEngine2 *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;

  v4 = *(_QWORD *)this;
  if (!*((_DWORD *)this + 198))
  {
    result = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *))(v4 + 1024))(this, a2, a3);
    if ((_DWORD)result)
      return result;
    v6 = 1;
    goto LABEL_6;
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *))(v4 + 1272))(this, a2, a3);
  v5 = *((_DWORD *)this + 198);
  if (v5 != -1)
  {
    v6 = v5 + 1;
LABEL_6:
    result = 0;
    *((_DWORD *)this + 198) = v6;
    return result;
  }
  return 1852797029;
}

uint64_t HALS_IOEngine2::_EndIOThread(HALS_IOEngine2 *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  int v3;
  int v4;

  v3 = *((_DWORD *)this + 198);
  if (v3)
  {
    v4 = v3 - 1;
    *((_DWORD *)this + 198) = v4;
    if (!v4)
      (*(void (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *))(*(_QWORD *)this + 1032))(this, a2, a3);
  }
  return 0;
}

uint64_t HALS_IOEngine2::_FirstIOThreadStarted(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOEngine2::_LastIOThreadStopped(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOEngine2::_BeginIOCycle(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *((_QWORD *)this + 96);
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v6 = 0;
    do
    {
      v7 = v5 >> 3;
      if (v6 < v7)
      {
        if (v7 <= v6)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v8 = *(_QWORD *)(v4 + 8 * v6);
        if (v8)
        {
          v9 = *((_DWORD *)a3 + 78);
          v10 = *((_OWORD *)a3 + 38);
          v12 = *((_OWORD *)a3 + 39);
          v11 = *((_OWORD *)a3 + 40);
          *(_OWORD *)(v8 + 392) = *((_OWORD *)a3 + 37);
          *(_OWORD *)(v8 + 408) = v10;
          *(_OWORD *)(v8 + 424) = v12;
          *(_OWORD *)(v8 + 440) = v11;
          v13 = *((_OWORD *)a3 + 27);
          *(_OWORD *)(v8 + 248) = *((_OWORD *)a3 + 28);
          *(_OWORD *)(v8 + 232) = v13;
          v14 = *((_OWORD *)a3 + 29);
          v15 = *((_OWORD *)a3 + 30);
          v16 = *((_OWORD *)a3 + 32);
          *(_OWORD *)(v8 + 296) = *((_OWORD *)a3 + 31);
          *(_OWORD *)(v8 + 312) = v16;
          *(_OWORD *)(v8 + 264) = v14;
          *(_OWORD *)(v8 + 280) = v15;
          v17 = *((_OWORD *)a3 + 33);
          v18 = *((_OWORD *)a3 + 34);
          v19 = *((_OWORD *)a3 + 36);
          *(_OWORD *)(v8 + 360) = *((_OWORD *)a3 + 35);
          *(_OWORD *)(v8 + 376) = v19;
          *(_OWORD *)(v8 + 328) = v17;
          *(_OWORD *)(v8 + 344) = v18;
          *(_DWORD *)(v8 + 456) = v9;
          v3 = *((_QWORD *)this + 96);
        }
      }
      ++v6;
      v4 = *(_QWORD *)(v3 + 48);
      v5 = *(_QWORD *)(v3 + 56) - v4;
    }
    while (v6 < ((unint64_t)v5 >> 3));
  }
  return 0;
}

uint64_t HALS_IOEngine2::_EndIOCycle(HALS_IOEngine2 *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  AMCP::DAL::Synchronized_Mixer **v9;

  v3 = *((_QWORD *)this + 96);
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v7 = 0;
    do
    {
      v8 = v5 >> 3;
      if (v7 < v8)
      {
        if (v8 <= v7)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v9 = *(AMCP::DAL::Synchronized_Mixer ***)(v4 + 8 * v7);
        if (v9)
        {
          HALS_IOEngine2_StreamInfo::end_cycle(v9, a2);
          v3 = *((_QWORD *)this + 96);
        }
      }
      ++v7;
      v4 = *(_QWORD *)(v3 + 48);
      v5 = *(_QWORD *)(v3 + 56) - v4;
    }
    while (v7 < ((unint64_t)v5 >> 3));
  }
  return 0;
}

uint64_t HALS_IOEngine2::_BeginReading(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_ReadFromStream(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = a1[96];
  if (!v6)
    return 0;
  result = 1852797029;
  if ((_DWORD)a2)
  {
    for (i = a1[92]; i != a1[93]; i += 8)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 32) + 16) == (_DWORD)a2)
      {
        v11 = v6 + 72;
        v10 = *(_QWORD *)(v6 + 72);
        v12 = (*(_QWORD *)(v11 + 8) - v10) >> 3;
        if (v12 > a3)
        {
          if (v12 <= a3)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v13 = *(_QWORD *)(v10 + 8 * a3);
          if (v13)
          {
            if (*(_DWORD *)(v13 + 48) == 1819304813 && (*(_DWORD *)(v13 + 52) & 0x40) == 0)
              HALS_IOEngine2::_ReadFromStream_Mixable(a1, a2, v13, a4, (uint64_t)a5, a6);
            else
              HALS_IOEngine2::_ReadFromStream_NonMixable(a1, a2, v13, a4, a5, a6);
            return 0;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t HALS_IOEngine2::_IsolatedReadFromStream(HALS_IOEngine2 *this, unsigned int a2, uint64_t a3, HALS_IOClock **a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  double v16;
  float v17;

  v5 = *((_QWORD *)this + 96);
  if (v5)
  {
    v11 = v5 + 72;
    v10 = *(_QWORD *)(v5 + 72);
    v12 = (*(_QWORD *)(v11 + 8) - v10) >> 3;
    if (v12 <= a2)
    {
      v13 = 0;
    }
    else
    {
      if (v12 <= a2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v13 = *(_QWORD *)(v10 + 8 * a2);
    }
    CalculateSafetyViolation_Read(a4, a3);
    v15 = v14;
    if (v15 <= -5.0)
      kdebug_trace();
    kdebug_trace();
    (*(void (**)(HALS_IOEngine2 *, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)this + 1096))(this, v13, (char *)a4 + 432, a3, a5);
    kdebug_trace();
    CalculateSafetyViolation_Read(a4, a3);
    v17 = v16;
    if ((int)v17 <= -5)
      kdebug_trace();
  }
  return 0;
}

uint64_t HALS_IOEngine2::_EndReading(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_ReadFromStream_ConvertToMixBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v13[24];
  uint64_t v14;

  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)v13, a3, (unint64_t)*(double *)(a4 + 80), a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1128))(a1, a2, a3, a4, v13, &v14, a5, a6);
}

uint64_t HALS_IOEngine2::_ReadFromStream_ConvertToTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AudioConverterRef *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  UInt32 v18;
  UInt32 ioOutputDataSize;

  v9 = *(AudioConverterRef **)(a3 + 160);
  if (*(_QWORD *)a8)
    v10 = (char *)(*(_QWORD *)a8 + *(unsigned int *)(a8 + 8));
  else
    v10 = 0;
  v11 = *a5;
  if (*(_QWORD *)a6)
    v12 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v12 = 0;
  v13 = *(_DWORD *)(a6 + 16);
  if (v11)
  {
    v14 = (void *)(v11 + *((unsigned int *)a5 + 2));
    v15 = *((_DWORD *)a5 + 4);
    v16 = (*(_DWORD *)(a3 + 144) * v15);
    ioOutputDataSize = *(_DWORD *)(a3 + 64) * v15;
    result = AudioConverterConvertBuffer(*v9, v16, v10, &ioOutputDataSize, v14);
    if (!v12)
      return result;
  }
  else
  {
    v16 = 0;
    if (!v12)
      return result;
  }
  v18 = *(_DWORD *)(a3 + 144) * v13;
  ioOutputDataSize = *(_DWORD *)(a3 + 64) * v13;
  return AudioConverterConvertBuffer(*v9, v18, &v10[v16], &ioOutputDataSize, v12);
}

uint64_t HALS_IOEngine2::_ReadFromStream_ApplyStreamDSP(uint64_t this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v8;
  AudioTimeStamp *p_mInputTime;
  UInt64 *p_mHostTime;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double mSampleTime;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  UInt64 v23;
  __int128 v24[4];
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;

  v5 = **((_QWORD **)a3 + 23);
  if (v5 && *(_BYTE *)(v5 + 762))
  {
    v8 = this;
    p_mInputTime = &a4->mInputTime;
    p_mHostTime = &a4->mInputTime.mHostTime;
    kdebug_trace();
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v27, (uint64_t)a3, (unint64_t)p_mInputTime->mSampleTime, a5);
    v26 = v29;
    if (v30)
      v11 = v30 + v31;
    else
      v11 = 0;
    if (v27)
    {
      v12 = v32;
      v13 = v27 + v28;
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(_QWORD *)(*((_QWORD *)a3 + 23) + 168), *(_QWORD *)(*((_QWORD *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | ((unint64_t)v29 << 32), v13, 0);
      v14 = *(_OWORD *)&p_mInputTime->mRateScalar;
      v24[0] = *(_OWORD *)&p_mInputTime->mSampleTime;
      v24[1] = v14;
      v15 = *(_OWORD *)&p_mInputTime->mSMPTETime.mHours;
      v24[2] = *(_OWORD *)&p_mInputTime->mSMPTETime.mSubframes;
      v24[3] = v15;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8);
      HALS_IOEngine2_StreamInfo::ApplyDSP(*((_QWORD *)a3 + 23), v24, 0, (_QWORD *)(*((_QWORD *)a3 + 23) + 168), v13, &v26);
      if (v11)
      {
        v16 = *((_OWORD *)p_mHostTime + 1);
        v20 = *(_OWORD *)p_mHostTime;
        mSampleTime = p_mInputTime->mSampleTime;
        v21 = v16;
        v22 = *((_OWORD *)p_mHostTime + 2);
        v23 = p_mHostTime[6];
        v18 = mSampleTime + (double)__PAIR64__(DWORD1(v22), v26);
        HALS_IOStreamDSP::AddInputStreamAtIndex(*(_QWORD *)(*((_QWORD *)a3 + 23) + 168), *(_QWORD *)(*((_QWORD *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v12 << 32), v11, 0);
        v19 = v18;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8);
        HALS_IOEngine2_StreamInfo::ApplyDSP(*((_QWORD *)a3 + 23), (__int128 *)&v19, 1, (_QWORD *)(*((_QWORD *)a3 + 23) + 168), v11, &v25);
      }
    }
    return kdebug_trace();
  }
  return this;
}

void *HALS_IOEngine2::_ReadFromStream_Fetch(double a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  void *result;
  const void *v8;
  int v9;
  const void *v10;
  int v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = (void *)HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v14, a3, (unint64_t)a1, a4);
  if (v17)
    v8 = (const void *)(v17 + v18);
  else
    v8 = 0;
  if (v14)
  {
    v9 = v16;
    v10 = (const void *)(v14 + v15);
    v11 = v19;
    if (*(_QWORD *)a5)
    {
      v12 = (char *)(*(_QWORD *)a5 + *(unsigned int *)(a5 + 8));
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v21 = "HALS_IOEngine2.cpp";
        v22 = 1024;
        v23 = 3247;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::_ReadFromStream_Fetch: ERROR: theOutputBuffer is null", buf, 0x12u);
      }
      v12 = 0;
    }
    v13 = (*(_DWORD *)(a3 + 64) * v9);
    result = memcpy(v12, v10, v13);
    if (v8)
      return memcpy(&v12[v13], v8, (*(_DWORD *)(a3 + 64) * v11));
  }
  return result;
}

uint64_t HALS_IOEngine2::_BeginWriting(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_WriteToStream(HALS_IOEngine2 *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = *((_QWORD *)a1 + 96);
  if (!v6)
    return 0;
  v7 = 1852797029;
  if ((_DWORD)a2)
  {
    for (i = *((_QWORD *)a1 + 92); i != *((_QWORD *)a1 + 93); i += 8)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 32) + 16) == (_DWORD)a2)
      {
        v11 = v6 + 48;
        v10 = *(_QWORD *)(v6 + 48);
        v12 = (*(_QWORD *)(v11 + 8) - v10) >> 3;
        if (v12 > a3)
        {
          if (v12 <= a3)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v13 = *(_QWORD *)(v10 + 8 * a3);
          if (v13)
          {
            if (*(_DWORD *)(v13 + 48) == 1819304813 && (*(_DWORD *)(v13 + 52) & 0x40) == 0)
              return HALS_IOEngine2::_WriteToStream_Mixable(a1, a2, v13, a4, a5, a6);
            else
              return HALS_IOEngine2::_WriteToStream_NonMixable(a1, a2, v13, a4, a5, a6);
          }
        }
        return v7;
      }
    }
  }
  return v7;
}

uint64_t HALS_IOEngine2::_EndWriting(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_HandleOverload(_QWORD *a1, int a2, unsigned int a3, unsigned int a4, int32x2_t *a5)
{
  uint64_t result;
  HALS_IOEngine2_IOContextInfo **v7;
  int32x2_t **v8;
  int32x2_t **v9;
  int32x2_t *v10;
  int32x2_t *v11;
  HALS_IOEngine2_IOContextInfo *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  result = 1852797029;
  if (a2)
  {
    v7 = (HALS_IOEngine2_IOContextInfo **)a1[92];
    v8 = (int32x2_t **)a1[93];
    if (v7 != (HALS_IOEngine2_IOContextInfo **)v8)
    {
      v9 = (int32x2_t **)a1[92];
      while (1)
      {
        v10 = *v9;
        if (*(_DWORD *)(*(_QWORD *)&(*v9)[4] + 16) == a2)
          break;
        if (++v9 == v8)
          goto LABEL_14;
      }
      a5[2] = vadd_s32(a5[2], v10[2]);
      if (*(_QWORD *)&v10[1] <= *(_QWORD *)&a5[1])
        v11 = a5;
      else
        v11 = v10;
      *(_OWORD *)a5->i8 = *(_OWORD *)v11->i8;
      v8 = (int32x2_t **)a1[93];
      v7 = (HALS_IOEngine2_IOContextInfo **)a1[92];
LABEL_14:
      if ((unint64_t)((char *)v8 - (char *)v7) <= 8)
      {
        while (v7 != (HALS_IOEngine2_IOContextInfo **)v8)
        {
          v12 = *v7;
          if (*(_DWORD *)(*((_QWORD *)*v7 + 4) + 16) == a2)
          {
            v14 = (uint64_t *)(a1[96] + 48);
            v13 = *v14;
            v15 = (v14[1] - *v14) >> 3;
            if (v15 > a3)
            {
              if (v15 <= a3)
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              v16 = a3;
              v17 = *(_QWORD *)(v13 + 8 * a3);
              if (v17)
              {
                if (*(_DWORD *)(v17 + 48) == 1819304813 && (*(_DWORD *)(v17 + 52) & 0x40) == 0)
                {
                  HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(v12, a3, a4, *(_QWORD *)(v17 + 464));
                  v19 = *((_QWORD *)v12 + 14);
                  v20 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v12 + 15) - v19) >> 3) <= v16
                      ? 0
                      : *(_QWORD *)(v19 + 40 * v16 + 32);
                  if (*(_QWORD *)(v17 + 464) <= v20)
                  {
                    result = 0;
                    *(_QWORD *)(v17 + 464) = v20;
                    return result;
                  }
                }
              }
            }
            return 0;
          }
          ++v7;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else if (a1[93] - a1[92] <= 8uLL)
  {
    return 1852797029;
  }
  else
  {
    return 0;
  }
  return result;
}

void HALS_IOEngine2::_WriteToStream_ProcessClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  *a8 = 1;
}

void *HALS_IOEngine2::_WriteToStream_Store(int a1, HALS_IOEngine2_IOContextInfo *this, unsigned int a3, int a4, unsigned int a5, double a6, uint64_t a7)
{
  char *v13;
  size_t v14;
  void *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  void *__dst;
  unsigned int v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  __dst = 0;
  v25 = 0;
  v24 = 0;
  HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex((uint64_t)this, a3, (unint64_t)a6, a5, &v27, (float **)&__dst, &v25, (float **)&v24);
  if (*(_QWORD *)a7)
  {
    v13 = (char *)(*(_QWORD *)a7 + *(unsigned int *)(a7 + 8));
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v29 = "HALS_IOEngine2.cpp";
      v30 = 1024;
      v31 = 3767;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::_WriteToStream_Store: ERROR: theInputBuffer is null", buf, 0x12u);
    }
    v13 = 0;
  }
  if (__dst)
  {
    v14 = v27 * a4;
    memcpy(__dst, v13, v14);
  }
  else
  {
    v14 = 0;
  }
  result = v24;
  if (v24)
    result = memcpy(v24, &v13[v14], v25 * a4);
  v16 = *((_QWORD *)this + 14);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 15) - v16) >> 3) > a3)
  {
    v17 = v16 + 40 * a3;
    v19 = *(_QWORD *)(v17 + 24);
    v18 = (_QWORD *)(v17 + 24);
    if (!v19)
      *v18 = (uint64_t)a6;
    v20 = (double)a5 + a6;
    v21 = v16 + 40 * a3;
    v23 = *(_QWORD *)(v21 + 32);
    v22 = (_QWORD *)(v21 + 32);
    if (v23 <= (uint64_t)v20)
      *v22 = (uint64_t)v20;
  }
  return result;
}

uint64_t HALS_IOEngine2::_WriteToStream_Mix(HALS_IOEngine2 *this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, double a4, unsigned int a5)
{
  unint64_t v9;
  uint64_t result;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  float *v23;
  BOOL v24;
  uint64_t v25;
  float *v27;
  float v28;
  int v29;
  float *v30;
  unsigned int v31;
  void *__src;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;

  v9 = (unint64_t)a4;
  result = HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v34, (uint64_t)a3, (unint64_t)a4, a5);
  if (v34)
    v11 = (void *)(v34 + v35);
  else
    v11 = 0;
  if (v37)
    v12 = (void *)(v37 + v38);
  else
    v12 = 0;
  v13 = *((_QWORD *)this + 92);
  v14 = *((_QWORD *)this + 93);
  if (v13 != v14)
  {
    v29 = v36;
    v15 = v39;
    v16 = (uint64_t)((double)a5 + a4);
    v17 = 1;
    do
    {
      result = *(_QWORD *)v13;
      if (*(_BYTE *)(*(_QWORD *)v13 + 48))
      {
        __src = 0;
        v30 = 0;
        result = HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(result, *((_DWORD *)a3 + 3), v9, a5, &v33, (float **)&__src, &v31, &v30);
        if ((v17 & 1) != 0)
        {
          if (__src && v11)
            result = (uint64_t)memcpy(v11, __src, (*((_DWORD *)a3 + 16) * v29));
          if (v30 && v12)
            result = (uint64_t)memcpy(v12, v30, (*((_DWORD *)a3 + 16) * v15));
        }
        else
        {
          v18 = *((_DWORD *)a3 + 17);
          v19 = (float *)__src;
          if (__src)
          {
            if (v11)
            {
              v20 = (v18 * v29);
              if ((_DWORD)v20)
              {
                v21 = (float *)v11;
                do
                {
                  v22 = *v19++;
                  *v21 = v22 + *v21;
                  ++v21;
                  --v20;
                }
                while (v20);
              }
            }
          }
          v23 = v30;
          if (v30)
            v24 = v12 == 0;
          else
            v24 = 1;
          v25 = (v18 * v15);
          if (!v24 && (_DWORD)v25 != 0)
          {
            v27 = (float *)v12;
            do
            {
              v28 = *v23++;
              *v27 = v28 + *v27;
              ++v27;
              --v25;
            }
            while (v25);
          }
        }
        if (*((_QWORD *)a3 + 58) <= v16)
          *((_QWORD *)a3 + 58) = v16;
        v17 = 0;
      }
      v13 += 8;
    }
    while (v13 != v14);
  }
  return result;
}

HALS_IOEngine2 *HALS_IOEngine2::_WriteToStream_ApplyStreamDSP(HALS_IOEngine2 *this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5, double a6)
{
  uint64_t v6;
  HALS_IOEngine2 *v10;
  AudioTimeStamp *p_mOutputTime;
  UInt64 *p_mHostTime;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double mSampleTime;
  __int128 v21;
  __n128 v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  UInt64 v28;
  __int128 v29[4];
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  v6 = **((_QWORD **)a3 + 23);
  if (v6 && *(_BYTE *)(v6 + 762))
  {
    v10 = this;
    p_mOutputTime = &a4->mOutputTime;
    p_mHostTime = &a4->mOutputTime.mHostTime;
    kdebug_trace();
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v31, (uint64_t)a3, (unint64_t)p_mOutputTime->mSampleTime, a5);
    if (v34)
      v14 = v34 + v35;
    else
      v14 = 0;
    if (v31)
    {
      v15 = v36;
      v16 = v33;
      v17 = v31 + v32;
      HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(v10, a3, a6, v33, v13);
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(_QWORD *)(*((_QWORD *)a3 + 23) + 168), *(_QWORD *)(*((_QWORD *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v16 << 32), v17, 0);
      v18 = *(_OWORD *)&p_mOutputTime->mRateScalar;
      v29[0] = *(_OWORD *)&p_mOutputTime->mSampleTime;
      v29[1] = v18;
      v19 = *(_OWORD *)&p_mOutputTime->mSMPTETime.mHours;
      v29[2] = *(_OWORD *)&p_mOutputTime->mSMPTETime.mSubframes;
      v29[3] = v19;
      (*(void (**)(HALS_IOEngine2 *))(*(_QWORD *)v10 + 328))(v10);
      HALS_IOEngine2_StreamInfo::ApplyDSP(*((_QWORD *)a3 + 23), v29, 0, (_QWORD *)(*((_QWORD *)a3 + 23) + 168), v17, &v30);
      if (v14)
      {
        mSampleTime = p_mOutputTime->mSampleTime;
        v21 = *((_OWORD *)p_mHostTime + 1);
        v25 = *(_OWORD *)p_mHostTime;
        v26 = v21;
        v27 = *((_OWORD *)p_mHostTime + 2);
        v22.n128_u64[1] = *((_QWORD *)&v27 + 1);
        v28 = p_mHostTime[6];
        v22.n128_f64[0] = (double)v16;
        v23 = mSampleTime + (double)v16;
        HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(v10, a3, (double)v16 + a6, v15, v22);
        HALS_IOStreamDSP::AddInputStreamAtIndex(*(_QWORD *)(*((_QWORD *)a3 + 23) + 168), *(_QWORD *)(*((_QWORD *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v15 << 32), v14, 0);
        v24 = v23;
        (*(void (**)(HALS_IOEngine2 *))(*(_QWORD *)v10 + 328))(v10);
        HALS_IOEngine2_StreamInfo::ApplyDSP(*((_QWORD *)a3 + 23), (__int128 *)&v24, 1, (_QWORD *)(*((_QWORD *)a3 + 23) + 168), v14, &v30);
      }
    }
    return (HALS_IOEngine2 *)kdebug_trace();
  }
  return this;
}

uint64_t HALS_IOEngine2::_WriteToStream_ConvertFromMixBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v13[24];
  uint64_t v14;

  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)v13, a3, (unint64_t)*(double *)(a4 + 144), a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1248))(a1, a2, a3, a4, v13, &v14, a5, a6);
}

uint64_t HALS_IOEngine2::_WriteToStream_ConvertFromTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AudioConverterRef *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  const void *v13;
  uint64_t result;
  UInt32 ioOutputDataSize;

  v9 = *(AudioConverterRef **)(a3 + 160);
  ioOutputDataSize = 0;
  v10 = *a5;
  if (*(_QWORD *)a6)
    v11 = (const void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v11 = 0;
  if (*(_QWORD *)a8)
    v12 = (char *)(*(_QWORD *)a8 + *(unsigned int *)(a8 + 8));
  else
    v12 = 0;
  if (v10)
  {
    v13 = (const void *)(v10 + *((unsigned int *)a5 + 2));
    ioOutputDataSize = *((_DWORD *)a5 + 3);
    result = AudioConverterConvertBuffer(*v9, ioOutputDataSize, v13, &ioOutputDataSize, v12);
  }
  if (v11)
    return AudioConverterConvertBuffer(*v9, *(_DWORD *)(a6 + 12), v11, &ioOutputDataSize, &v12[ioOutputDataSize]);
  return result;
}

uint64_t HALS_IOEngine2::_WriteToStream_Write()
{
  return 0;
}

uint64_t HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  AMCP::Log::Scope_Registry *v28;
  double v29;
  double v30;
  int v32;
  int v33;
  int v34;
  _opaque_pthread_t *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  caulk::concurrent::messenger *v47;
  __int128 v48;
  int v49;
  int v50;
  int v51;
  char v52;
  _QWORD v53[2];
  int v54;
  double *v55;
  double *v56;
  uint64_t *v57;
  uint64_t v58;
  double v59;
  double v60;

  if (*(_QWORD *)a6)
    v12 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v12 = 0;
  bzero(v12, *(unsigned int *)(a6 + 12));
  kdebug_trace();
  v59 = 0.0;
  v60 = 0.0;
  v54 = *(_DWORD *)(a1 + 16);
  v55 = &v60;
  v56 = &v59;
  v57 = &v58;
  v58 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 48);
  v14 = (*(_QWORD *)(*(_QWORD *)(a1 + 768) + 56) - v13) >> 3;
  if (v14 <= a3)
    goto LABEL_12;
  if (v14 <= a3)
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v15 = *(_DWORD **)(v13 + 8 * a3);
  if (!v15)
  {
LABEL_12:
    v17 = 1;
    goto LABEL_13;
  }
  if (v15[12] != 1819304813 || (v15[13] & 0x40) != 0)
  {
    v17 = 2;
LABEL_13:
    v58 = v17;
    goto LABEL_14;
  }
  if (v15[16] > *(_DWORD *)(a6 + 12))
  {
    v17 = 3;
    goto LABEL_13;
  }
  if ((_DWORD)a2)
  {
    v19 = *(uint64_t **)(a1 + 736);
    v20 = *(uint64_t **)(a1 + 744);
    if (v19 != v20)
    {
      v21 = *(uint64_t **)(a1 + 736);
      while (1)
      {
        v22 = *v21;
        if (*(_DWORD *)(*(_QWORD *)(*v21 + 32) + 16) == (_DWORD)a2)
          break;
        if (++v21 == v20)
          goto LABEL_14;
      }
      if ((unint64_t)((char *)v20 - (char *)v19) >= 9 && !*(_BYTE *)(a5 + 424))
      {
        v23 = *(_QWORD *)(v22 + 112);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v22 + 120) - v23) >> 3) > a3)
        {
          v24 = v23 + 40 * a3;
          v26 = *(_QWORD *)(v24 + 32);
          v25 = (_QWORD *)(v24 + 32);
          if (!v26)
          {
            v27 = *(double *)(a5 + 576);
            if (((uint64_t)v27 & 0x8000000000000000) == 0)
              *v25 = (uint64_t)v27;
          }
        }
        v29 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1288))(a1, a2, a3);
        v30 = *(double *)(a5 + 576);
        v59 = v29;
        v60 = v30;
        if (v29 <= 0.0 || v30 >= v29)
        {
          v17 = 4;
          goto LABEL_13;
        }
        v32 = (int)(v29 - v30);
        v33 = *(_DWORD *)(a5 + 776);
        v34 = v32 - v33;
        if (v32 > v33)
        {
          AMCP::Log::Scope_Registry::get(v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v53, "com.apple.coreaudio", "AMCP");
          v47 = *(caulk::concurrent::messenger **)(v53[0] + 8);
          v52 = 16;
          v35 = pthread_self();
          LODWORD(v48) = pthread_mach_thread_np(v35);
          *((_QWORD *)&v48 + 1) = "HALS_IOEngine2.cpp";
          v49 = 3669;
          v50 = a2;
          v51 = v34;
          caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>(v47, &v52, &v48);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v53);
          v36 = v60 + (double)v34;
          v37 = *(_QWORD *)(v22 + 112);
          if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v22 + 120) - v37) >> 3) <= a3)
          {
            *(double *)(a5 + 576) = v36;
          }
          else
          {
            v38 = (uint64_t)v36;
            v39 = v37 + 40 * a3;
            v41 = *(_QWORD *)(v39 + 32);
            v40 = (uint64_t *)(v39 + 32);
            if (v41 <= (uint64_t)v36)
              *v40 = v38;
            *(double *)(a5 + 576) = v36;
            v42 = v37 + 40 * a3;
            v44 = *(_QWORD *)(v42 + 24);
            v43 = (uint64_t *)(v42 + 24);
            if (v36 < (double)v44)
              *v43 = v38;
          }
          v32 = v33;
        }
        if (v32 >= 1)
        {
          while (1)
          {
            v45 = v32 - a4;
            v46 = v32 >= a4 ? a4 : v32;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1176))(a1, a2, a3, v46, a5, a6, 0))
            {
              break;
            }
            *(double *)(a5 + 576) = *(double *)(a5 + 576) + (double)v46;
            v32 = v45;
            if (v45 <= 0)
              goto LABEL_14;
          }
          v17 = 5;
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)&v54);
  return 0;
}

void sub_1B5B51490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::_InitializePositionsForOutputStreams(uint64_t this, int a2, const HALS_IOEngineInfo *a3, double a4, double a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD **)(this + 736);
  v7 = (_QWORD *)*v6;
  if (*(_DWORD *)(*(_QWORD *)(*v6 + 32) + 16) != a2)
  {
    v8 = v6 + 1;
    do
    {
      v9 = (_QWORD *)*v8++;
      v7 = v9;
    }
    while (*(_DWORD *)(v9[4] + 16) != a2);
  }
  v10 = v7[8];
  v11 = v10 & 0x3F;
  if (v10 <= 0x3F && v11 == 0)
    goto LABEL_20;
  v13 = 0;
  v14 = 0;
  v15 = (_QWORD *)v7[7];
  v16 = &v15[v10 >> 6];
  while (((*v15 >> v14) & 1) == 0)
  {
    v17 = v14 + 1;
    v15 += v13 == 63;
    if (v13 == 63)
      v13 = 0;
    else
      v13 = v17;
    v18 = v15 == v16 && v11 == v13;
    v14 = v13;
    if (v18)
      goto LABEL_20;
  }
  if (*((_BYTE *)a3 + 424))
  {
LABEL_20:
    v20 = v7[14];
    v19 = v7[15];
    if (v20 != v19)
    {
      v21 = v20;
      do
      {
        *(_QWORD *)(v21 + 24) = 0;
        v21 += 40;
      }
      while (v21 != v19);
      do
      {
        if (*(uint64_t *)(v20 + 32) <= 0)
          *(_QWORD *)(v20 + 32) = 0;
        v20 += 40;
      }
      while (v20 != v19);
    }
  }
  else
  {
    v23 = v7[14];
    v22 = v7[15];
    if (v23 != v22)
    {
      *(double *)&v24 = (double)*((uint64_t *)a3 + 82);
      v25 = *((double *)a3 + 45) + *(double *)&v24;
      LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(this + 768) + 20);
      v26 = v25 + (double)v24;
      *(double *)&v27 = (double)*((int *)a3 + 80);
      v28 = v26 + *(double *)&v27;
      LODWORD(v27) = *((_DWORD *)a3 + 84);
      LODWORD(a6) = *((_DWORD *)a3 + 170);
      v29 = (double)*(unint64_t *)&a6;
      v30 = v28 + (double)v27 + round(*((double *)a3 + 86) * v29);
      v31 = v23;
      do
      {
        *(_QWORD *)(v31 + 24) = (uint64_t)v30;
        v31 += 40;
      }
      while (v31 != v22);
      v32 = (uint64_t)(v30 + v29);
      do
      {
        if (*(_QWORD *)(v23 + 32) <= v32)
          *(_QWORD *)(v23 + 32) = v32;
        v23 += 40;
      }
      while (v23 != v22);
    }
  }
  return this;
}

void HALS_IOEngine2::_SetStartSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6)
{
  unsigned int v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const BOOL *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v43[8];
  void *__p;
  char v45;
  std::string v46;
  _QWORD v47[2];
  uint64_t v48;
  std::__shared_weak_count *v49;
  _BYTE v50[32];
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;

  if (*(_QWORD *)(a1 + 768))
  {
    v6 = atomic_load((unsigned int *)(a1 + 1072));
    if (v6 == 2)
    {
      if (!a2 || (v8 = *(uint64_t **)(a1 + 736), v9 = *(uint64_t **)(a1 + 744), v8 == v9))
      {
LABEL_7:
        v10 = 0;
      }
      else
      {
        while (1)
        {
          v10 = *v8;
          if (*(_DWORD *)(*(_QWORD *)(*v8 + 32) + 16) == a2)
            break;
          if (++v8 == v9)
            goto LABEL_7;
        }
      }
      v11 = *(_QWORD *)(a1 + 768);
      v47[0] = a3;
      v47[1] = a4;
      if (*(char *)(v10 + 159) < 0)
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v10 + 136), *(_QWORD *)(v10 + 144));
      else
        v46 = *(std::string *)(v10 + 136);
      v12 = 0;
      v38 = v10 + 56;
      v39 = v11 + 48;
      v13 = 1;
      v37 = a5;
      do
      {
        v40 = v13;
        v14 = (_QWORD *)(v39 + 24 * v12);
        v15 = v14[1] - *v14;
        if ((v15 & 0x7FFFFFFF8) != 0)
        {
          v16 = 0;
          v17 = (_QWORD *)(v38 + 24 * v12);
          v18 = v17 + 1;
          v19 = (v15 >> 3);
          do
          {
            if (v16 >= *v18)
            {
              LODWORD(v20) = 0;
            }
            else
            {
              if (*v18 <= (unint64_t)v16)
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              v20 = (*(_QWORD *)(*v17 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1;
            }
            if (v16 >= (uint64_t)(v14[1] - *v14) >> 3)
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            v21 = v47[v12];
            v22 = *(_QWORD *)(*v14 + 8 * v16);
            if ((*(_BYTE *)(v22 + 20) || (a6 & 1) == 0) && v21 >= *(_QWORD *)(v22 + 464))
            {
              HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)v43, a2, (uint64_t)&v46, v16);
              if (*(_QWORD *)(v22 + 464) > v21)
                *(_QWORD *)(v22 + 464) = v21;
              if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v23) & v20) == 1
                && *(_DWORD *)(v22 + 48) == 1819304813
                && (*(_BYTE *)(v22 + 52) & 0x40) == 0
                && !*(_BYTE *)(v22 + 20))
              {
                v24 = *(_QWORD *)(*(_QWORD *)v22 + 1080);
                v25 = *(std::__shared_weak_count **)(*(_QWORD *)v22 + 1088);
                if (v25)
                {
                  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
                  do
                    v27 = __ldxr(p_shared_owners);
                  while (__stxr(v27 + 1, p_shared_owners));
                }
                v48 = v24;
                v49 = v25;
                AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v50, &v48, (double)v21, (double)(v21 + v37));
                v28 = v49;
                if (v49)
                {
                  v29 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v30 = __ldaxr(v29);
                  while (__stlxr(v30 - 1, v29));
                  if (!v30)
                  {
                    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                    std::__shared_weak_count::__release_weak(v28);
                  }
                }
                (*(void (**)(_QWORD, char *, _BYTE *, _QWORD))(**(_QWORD **)(v22 + 208) + 96))(*(_QWORD *)(v22 + 208), v43, v50, 0);
                v31 = v52;
                if (v52)
                {
                  v32 = (unint64_t *)&v52->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v34 = v51;
                if (v51)
                {
                  v35 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                    std::__shared_weak_count::__release_weak(v34);
                  }
                }
              }
              if (v45 < 0)
                operator delete(__p);
            }
            ++v16;
          }
          while (v16 != v19);
        }
        v13 = 0;
        v12 = 1;
      }
      while ((v40 & 1) != 0);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B5B51990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;

  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a43->__on_zero_shared)(a43);
      std::__shared_weak_count::__release_weak(a43);
    }
  }
  if (a38)
  {
    v46 = (unint64_t *)&a38->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a38->__on_zero_shared)(a38);
      std::__shared_weak_count::__release_weak(a38);
    }
  }
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::_GetStartSample(HALS_IOEngine2 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char i;
  char v5;
  uint64_t v6;
  uint64_t *v7;

  v1 = *((_QWORD *)this + 96);
  if (!v1)
    return 0;
  v2 = 0;
  v3 = v1 + 48;
  for (i = 1; ; i = 0)
  {
    v5 = i;
    v7 = (uint64_t *)(v3 + 24 * v2);
    v6 = *v7;
    if (v7[1] != *v7)
      break;
    v2 = 1;
    if ((v5 & 1) == 0)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)v6 + 464);
}

void HALS_IOEngine2::RegisterAudioIssueDetectorNode(HALS_IOEngine2 *this, CA::StreamDescription *a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  std::string v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 6))
  {
    memset(&v29, 0, sizeof(v29));
    v12 = (char *)this + 796;
    if (!strncmp((const char *)this + 796, "Baseband Voice", 0x100uLL)
      || !strncmp(v12, "MaggieDebug", 0x100uLL)
      || !strncmp(v12, "Hawking", 0x100uLL)
      || !strncmp(v12, "Mikeybus Secondary", 0x100uLL)
      || !strncmp(v12, "Reference", 0x100uLL)
      || !strncmp(v12, "Speaker", 0x100uLL)
      || !strncmp(v12, "Codec", 0x100uLL)
      || !strncmp(v12, "AOP Audio-1", 0x100uLL)
      || !strncmp(v12, "Actuator", 0x100uLL))
    {
      std::string::__assign_external(&v29, v12);
    }
    std::string::append(&v29, "-", 1uLL);
    if (a3)
      v13 = "Input";
    else
      v13 = "Output";
    if (a3)
      v14 = 5;
    else
      v14 = 6;
    std::string::append(&v29, v13, v14);
    if ((a6 & 1) != 0)
      goto LABEL_44;
    v15 = (_QWORD *)*((_QWORD *)this + 6);
    v16 = v15[4];
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      v17 = AudioIssueDetectorLibraryLoader(void)::libSym(v16, &v29, a4, a3 ^ 1u, a2, a5);
      if (!v17)
      {
        v19 = (_QWORD *)v15[2];
        v18 = v15[3];
        if ((unint64_t)v19 >= v18)
        {
          v21 = (_QWORD *)v15[1];
          v22 = v19 - v21;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v24 = v18 - (_QWORD)v21;
          if (v24 >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = (char *)operator new(8 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = a4;
          v20 = v27 + 8;
          if (v19 != v21)
          {
            do
            {
              v28 = *--v19;
              *((_QWORD *)v27 - 1) = v28;
              v27 -= 8;
            }
            while (v19 != v21);
            v19 = (_QWORD *)v15[1];
          }
          v15[1] = v27;
          v15[2] = v20;
          v15[3] = &v26[8 * v25];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v19 = a4;
          v20 = v19 + 1;
        }
        v15[2] = v20;
LABEL_44:
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      v17 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v31 = "HALS_IssueDetector.h";
      v32 = 1024;
      v33 = 139;
      v34 = 1024;
      v35 = v17;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientSetNodeFormat", buf, 0x18u);
    }
    goto LABEL_44;
  }
}

void sub_1B5B51E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2::InitializeAudioIssueDetectorNodes(HALS_IOEngine2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    HALS_IssueDetector::Initialize(*(HALS_IssueDetector **)(v1 + 32));
}

uint64_t HALS_IOEngine2::_AllocateTempBuffers(HALS_IOEngine2 *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  vm_size_t v16;
  _QWORD *v17;

  v1 = *((_QWORD *)this + 96);
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v5;
      v7 = v1 + 48 + 24 * v3;
      v8 = *(uint64_t **)v7;
      v9 = *(uint64_t **)(v7 + 8);
      while (v8 != v9)
      {
        v11 = *v8++;
        v10 = v11;
        v12 = *(_DWORD *)(v11 + 68);
        if (v12 <= v4)
          v12 = v4;
        v13 = *(_DWORD *)(v10 + 108);
        if (v13 <= v12)
          v4 = v12;
        else
          v4 = v13;
      }
      v5 = 0;
      v3 = 1;
    }
    while ((v6 & 1) != 0);
    v14 = *(unsigned int *)(v1 + 16);
    v15 = (_QWORD *)operator new();
    v16 = 4 * v4 * v14;
    *v15 = HALB_IOBufferManager_Server::AllocateBuffer(v16);
    v15[1] = v16;
    v15[2] = v14;
    std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 97, (uint64_t)v15);
    v17 = (_QWORD *)operator new();
    *v17 = HALB_IOBufferManager_Server::AllocateBuffer(v16);
    v17[1] = v16;
    v17[2] = v14;
    std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 98, (uint64_t)v17);
  }
  return 0;
}

void sub_1B5B51F40(void *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1010C40113C0ABBLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B51F30);
}

uint64_t *HALS_IOEngine2::_FreeTempBuffers(HALS_IOEngine2 *this)
{
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 97, 0);
  return std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 98, 0);
}

uint64_t *std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)v2, *(_DWORD *)(v2 + 8));
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALS_IOEngine2_DeviceInfo::get_source_id(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  void *v7;
  int v8;
  std::string v9;
  uint64_t v10;
  int v11;
  std::string v12;
  _DWORD v13[2];

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v12 = *(std::string *)a3;
  v7 = (void *)v12.__r_.__value_.__r.__words[0];
  v13[0] = v12.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
  v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LODWORD(v9.__r_.__value_.__r.__words[2]) = v13[0];
    *(_DWORD *)((char *)&v9.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
    *((_BYTE *)&v9.__r_.__value_.__s + 23) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  v10 = a4;
  v11 = 0;
  *(_DWORD *)a1 = a2;
  *(std::string *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = 0;
  if (v8 < 0)
    operator delete(v7);
}

void sub_1B5B520F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E698EB30;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E698EAD8;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B52234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d _WriteToStream_CommitTrailingSilence: the context (%u), context is too far behind, updating write position by %d frames", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(HALS_IOEngine2 *this, HALS_IOEngine2_StreamInfo *a2, double a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *exception;
  _BYTE v23[12];
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 23);
  v6 = *(unsigned int **)(v5 + 48);
  v7 = *(unsigned int **)(v5 + 56);
  if (v6 != v7)
  {
    v12 = 0;
    v13 = a4 << 32;
    v14 = 1;
    do
    {
      v15 = *v6;
      v16 = *(_QWORD *)(*((_QWORD *)this + 96) + 72);
      v17 = (*(_QWORD *)(*((_QWORD *)this + 96) + 80) - v16) >> 3;
      if (v15 >= v17)
        goto LABEL_17;
      if (v17 <= v15)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v18 = *(_QWORD *)(v16 + 8 * v15);
      if (!v18)
      {
LABEL_17:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v23 = 136315394;
          *(_QWORD *)&v23[4] = "HALS_IOEngine2.cpp";
          LOWORD(v24) = 1024;
          *(_DWORD *)((char *)&v24 + 2) = 4197;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetExtraInputStreamsForOutputProcessing: no such stream", v23, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      v19 = *(_QWORD *)(*((_QWORD *)a2 + 23) + 144);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)a2 + 23) + 152) - v19) >> 3) <= v14 - 1)
        v20 = 0;
      else
        v20 = *(_QWORD *)(v19 + v12);
      v21 = *(_DWORD *)(v18 + 64) * a4;
      *(_QWORD *)v23 = v20;
      *(_DWORD *)&v23[8] = 0;
      v24 = __PAIR64__(a4, v21);
      (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, _BYTE *, double, __n128))(*(_QWORD *)this + 1152))(this, v18, a4, v23, a3, a5);
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(_QWORD *)(*((_QWORD *)a2 + 23) + 168), *(_QWORD *)(*((_QWORD *)a2 + 23) + 176), v13 | *(unsigned int *)(v18 + 68), v20, v14++);
      ++v6;
      v12 += 24;
    }
    while (v6 != v7);
  }
}

void HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(HALS_IOEngine2_IOContextInfo *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  double mSampleTime;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  double v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  AudioTimeStamp v43;
  float *v44;
  unsigned int v45;
  float *v46;
  unsigned int v47;

  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3) > a2)
  {
    v8 = a2;
    memset(&v43, 0, sizeof(v43));
    v43.mFlags = 1;
    v10 = (char *)this + 24;
    v9 = *((_QWORD *)this + 3);
    v11 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 96);
    v12 = *(uint64_t **)(v11 + 1528);
    v13 = *(uint64_t **)(v11 + 1536);
    if (v12 != v13)
    {
      while (*(_QWORD *)(*v12 + 8) != v9)
      {
        if (++v12 == v13)
        {
          mSampleTime = 0.0;
          goto LABEL_10;
        }
      }
    }
    mSampleTime = 0.0;
    if (v12 != v13)
    {
      v15 = *v12;
      if (v15)
      {
        if (*(_QWORD *)(v15 + 8))
        {
          HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v15 + 288), &v43);
          v9 = *((_QWORD *)this + 3);
          mSampleTime = v43.mSampleTime;
        }
      }
    }
LABEL_10:
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 344))(v9, 0);
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 96) + 272))(*(_QWORD *)(*((_QWORD *)this + 4) + 96));
    v18 = *(_QWORD *)(*((_QWORD *)this + 4) + 96);
    v19 = *(uint64_t **)(v18 + 1528);
    v20 = *(uint64_t **)(v18 + 1536);
    if (v19 != v20)
    {
      while (*(_QWORD *)(*v19 + 8) != *((_QWORD *)this + 3))
      {
        if (++v19 == v20)
        {
          v21 = 0.0;
          goto LABEL_18;
        }
      }
    }
    v21 = 0.0;
    if (v19 != v20)
    {
      v22 = *v19;
      if (v22)
      {
        if (*(_QWORD *)(v22 + 8))
          v21 = *(double *)(v22 + 792);
      }
    }
LABEL_18:
    v23 = *((_QWORD *)this + 14);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 15) - v23) >> 3) > v8)
    {
      v24 = *(_QWORD *)(v23 + 40 * v8 + 32);
      if (v24 >= 1 && v21 > 0.0 && v21 <= (double)(unint64_t)(mSampleTime - (double)v16))
      {
        v25 = (unint64_t)(mSampleTime + (double)v16 + (double)a3);
        if (a4 + (unint64_t)a3 > v25)
          v25 = a4 + a3;
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        if (v24 >= v25)
          v27 = v24;
        else
          v27 = v24 + 1;
        v28 = v26 - v27;
        if (v17 <= 1uLL)
          v29 = 1;
        else
          v29 = v17;
        v30 = v24 < v25;
        v31 = v28 / v29;
        if (v30)
          LODWORD(v31) = v31 + 1;
        v32 = v31 * v17;
        kdebug_trace();
        v33 = (double)v24;
        v34 = *(_DWORD *)(*((_QWORD *)this + 14) + 40 * v8 + 16);
        v47 = 0;
        v46 = 0;
        v45 = 0;
        v44 = 0;
        HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex((uint64_t)this, a2, (unint64_t)(double)v24, v32, &v47, &v46, &v45, &v44);
        if (v46)
          bzero(v46, v47 * v34);
        if (v44)
          bzero(v44, v45 * v34);
        v35 = *((_QWORD *)this + 14);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 15) - v35) >> 3) > v8)
        {
          v36 = v35 + 40 * v8;
          v38 = *(_QWORD *)(v36 + 24);
          v37 = (_QWORD *)(v36 + 24);
          if (!v38)
            *v37 = (uint64_t)v33;
          v39 = (double)v32 + v33;
          v40 = v35 + 40 * v8;
          v42 = *(_QWORD *)(v40 + 32);
          v41 = (_QWORD *)(v40 + 32);
          if (v42 <= (uint64_t)v39)
            *v41 = (uint64_t)v39;
        }
      }
    }
  }
}

uint64_t HALS_IOEngine2::_WriteToStream_Mixable(HALS_IOEngine2 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  const BOOL *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  HALS_IOEngine2_IOContextInfo *v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  float v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  double sample_time;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const BOOL *v55;
  float *v56;
  int64x2_t v57;
  _QWORD v58[3];
  char v59;
  float *v60;
  unsigned int v61[2];
  int v62;
  void *__p;
  char v64;
  _BYTE v65[64];
  __int128 v66;

  if (*(_BYTE *)(a5 + 424))
    return 0;
  v8 = a4;
  v59 = 1;
  v12 = *((_QWORD *)a1 + 97);
  if (v12)
  {
    v58[0] = *(_QWORD *)v12;
    LODWORD(v58[1]) = 0;
    *(int32x2_t *)((char *)&v58[1] + 4) = vmovn_s64(*(int64x2_t *)(v12 + 8));
  }
  else
  {
    memset(v58, 0, 20);
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, char *))(*(_QWORD *)a1 + 1200))(a1, a2, a3, a5, a4, a6, v58, &v59);
  v13 = (uint64_t *)*((_QWORD *)a1 + 92);
  if (*(_DWORD *)(*(_QWORD *)(*v13 + 32) + 16) != (_DWORD)a2)
  {
    v14 = v13 + 1;
    do
      v15 = *v14++;
    while (*(_DWORD *)(*(_QWORD *)(v15 + 32) + 16) != (_DWORD)a2);
  }
  (*(void (**)(HALS_IOEngine2 *, double))(*(_QWORD *)a1 + 1208))(a1, *(double *)(a5 + 576));
  v17 = AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v16);
  v18 = (uint64_t *)*((_QWORD *)a1 + 92);
  v19 = (uint64_t *)*((_QWORD *)a1 + 93);
  if (v17)
  {
    while (v18 != v19)
    {
      v20 = *v18;
      if (*(_DWORD *)(*(_QWORD *)(*v18 + 32) + 16) == (_DWORD)a2)
        goto LABEL_19;
      ++v18;
    }
    v20 = 0;
LABEL_19:
    v28 = *(unsigned int *)(a3 + 12);
    if (*(char *)(v20 + 159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v65, *(const std::string::value_type **)(v20 + 136), *(_QWORD *)(v20 + 144));
    }
    else
    {
      *(_OWORD *)v65 = *(_OWORD *)(v20 + 136);
      *(_QWORD *)&v65[16] = *(_QWORD *)(v20 + 152);
    }
    HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v62, a2, (uint64_t)v65, v28);
    if ((v65[23] & 0x80000000) != 0)
      operator delete(*(void **)v65);
    v35 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 208) + 104) + 8);
    if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v35, &v62))
    {
      v36 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v35, &v62);
      if (!v36)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      *(_OWORD *)v65 = *(_OWORD *)(v36 + 15);
      v37 = v36[18];
      *(_QWORD *)&v65[16] = v36[17];
      *(_QWORD *)&v65[24] = v37;
      v38 = v36[19];
      *(_QWORD *)&v65[32] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      *(_OWORD *)&v65[40] = *((_OWORD *)v36 + 10);
      v41 = v36[23];
      *(_QWORD *)&v65[56] = v36[22];
      *(_QWORD *)&v66 = v41;
      v42 = v36[24];
      *((_QWORD *)&v66 + 1) = v42;
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
    }
    else
    {
      v66 = 0u;
      memset(v65, 0, sizeof(v65));
    }
    sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v65[40]);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = *(std::__shared_weak_count **)&v65[32];
    if (*(_QWORD *)&v65[32])
    {
      v50 = (unint64_t *)(*(_QWORD *)&v65[32] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = vcvtmd_s64_f64(sample_time);
    v53 = *(_QWORD *)(v20 + 112);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v20 + 120) - v53) >> 3) <= v28)
      LODWORD(v54) = 0;
    else
      v54 = *(_QWORD *)(v53 + 40 * v28 + 32);
    v60 = 0;
    *(_QWORD *)v61 = 0;
    *(_QWORD *)v65 = 0;
    HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(v20, v28, v52, v54 - v52, &v61[1], (float **)v65, v61, &v60);
    if (*(_QWORD *)v65)
      HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(a3, (uint64_t)&v62, v52, v61[1], *(uint64_t *)v65);
    v56 = v60;
    if (v60)
    {
      HALS_IOEngine2_StreamInfo::end_cycle((AMCP::DAL::Synchronized_Mixer **)a3, v55);
      HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(a3, (uint64_t)&v62, v52 + v61[1], v61[0], (uint64_t)v56);
    }
    if (v64 < 0)
      operator delete(__p);
    return 0;
  }
  v21 = *v18;
  if (*(_DWORD *)(*(_QWORD *)(*v18 + 32) + 16) != (_DWORD)a2)
  {
    v22 = v18 + 1;
    do
    {
      v23 = *v22++;
      v21 = v23;
    }
    while (*(_DWORD *)(*(_QWORD *)(v23 + 32) + 16) != (_DWORD)a2);
  }
  v24 = *(unsigned int *)(a3 + 12);
  v26 = v21 + 112;
  v25 = *(_QWORD *)(v21 + 112);
  v27 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v26 + 8) - v25) >> 3) <= v24
      ? 0
      : *(_QWORD *)(v25 + 40 * v24 + 32);
  v57 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  do
  {
    if (*(_BYTE *)(*v18 + 48))
    {
      v29 = *(_QWORD *)(*(_QWORD *)(*v18 + 32) + 96);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 160))(v29))
      {
        v30 = (HALS_IOEngine2_IOContextInfo *)*v18;
        if (*(_DWORD *)(*(_QWORD *)(*v18 + 32) + 16) != (_DWORD)a2)
        {
          HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(v30, v24, v8, v27);
          v30 = (HALS_IOEngine2_IOContextInfo *)*v18;
        }
        v31 = *((_QWORD *)v30 + 14);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v30 + 15) - v31) >> 3) > v24)
        {
          v32 = *(int64x2_t *)(v31 + 40 * v24 + 24);
          v57 = (int64x2_t)vbslq_s8((int8x16_t)vcgtzq_s64(v32), vbslq_s8((int8x16_t)vcgtq_s64(v57, v32), (int8x16_t)v32, (int8x16_t)v57), (int8x16_t)v57);
        }
      }
    }
    ++v18;
  }
  while (v18 != v19);
  if (v57.i64[0] <= *(_QWORD *)(a3 + 464))
    v33 = *(_QWORD *)(a3 + 464);
  else
    v33 = v57.i64[0];
  v34 = (float)v8 * 1.5;
  if (v34 < (float)(v57.i64[1] - v33))
  {
    kdebug_trace();
    v33 = (uint64_t)(float)((float)v57.i64[1] - v34);
  }
  if (v57.i64[1] <= v33)
    return 0;
  (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)a1 + 1216))(a1, a2, a3, (v57.i32[2] - v33), (double)v33);
  return HALS_IOEngine2::_ColoringMixer_EmitRange(a1, a2, (HALS_IOEngine2_StreamInfo *)a3, v33, v57.i64[1], *(HALS_IOClock **)(a5 + 288), (const AudioServerPlugInIOCycleInfo *)(a5 + 432), *(_DWORD *)(a5 + 312));
}

void sub_1B5B52E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::_WriteToStream_NonMixable(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  HALS_IOClock *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  float v27;
  uint64_t *i;
  uint64_t v29;
  uint64_t v30;
  _OWORD v32[4];
  AudioTimeStamp v33;

  v12 = *(unsigned int **)(a3 + 200);
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 944))(a1))
  {
    v13 = *(HALS_IOClock **)(a5 + 288);
    v14 = *(_OWORD *)(a5 + 592);
    *(_OWORD *)&v33.mSampleTime = *(_OWORD *)(a5 + 576);
    *(_OWORD *)&v33.mRateScalar = v14;
    v15 = *(_OWORD *)(a5 + 624);
    *(_OWORD *)&v33.mSMPTETime.mSubframes = *(_OWORD *)(a5 + 608);
    *(_OWORD *)&v33.mSMPTETime.mHours = v15;
    v16 = *(_OWORD *)(a5 + 464);
    v32[0] = *(_OWORD *)(a5 + 448);
    v32[1] = v16;
    v17 = *(_OWORD *)(a5 + 496);
    if (*(_QWORD *)a6)
      v18 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 8);
    else
      v18 = 0;
    v32[2] = *(_OWORD *)(a5 + 480);
    v32[3] = v17;
    WriteToCaptureFile(v12, v13, &v33, (uint64_t)v32, a4, v18);
  }
  CalculateSafetyViolation_Write(*(HALS_IOClock **)(a5 + 288), *(_DWORD *)(a5 + 312), (const AudioTimeStamp *)(a5 + 576));
  v20 = v19;
  if (v20 < 0.0)
    kdebug_trace();
  kdebug_trace();
  v21 = a3;
  v22 = (uint64_t *)(a5 + 432);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1256))(a1, a2, v21, a5 + 432, a4, a6);
  kdebug_trace();
  CalculateSafetyViolation_Write(*(HALS_IOClock **)(a5 + 288), *(_DWORD *)(a5 + 312), (const AudioTimeStamp *)(a5 + 576));
  v25 = v24;
  v26 = v24;
  v27 = v24;
  if ((int)v27 < 0)
    kdebug_trace();
  if (v26 < 0.0)
  {
    for (i = (uint64_t *)a1[92]; ; ++i)
    {
      v29 = *i;
      if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == (_DWORD)a2)
        break;
    }
    v30 = *v22;
    *(double *)v29 = v25;
    *(_QWORD *)(v29 + 8) = v30;
    ++*(_DWORD *)(v29 + 20);
  }
  return v23;
}

unsigned int *WriteToCaptureFile(unsigned int *result, HALS_IOClock *this, AudioTimeStamp *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v10;
  __int128 v11;
  __int128 v12;
  double v13;
  unint64_t v14[2];
  AudioTimeStamp v15;

  if (result)
  {
    v10 = result;
    v11 = *(_OWORD *)&a3->mRateScalar;
    *(_OWORD *)&v15.mSampleTime = *(_OWORD *)&a3->mSampleTime;
    *(_OWORD *)&v15.mRateScalar = v11;
    v12 = *(_OWORD *)&a3->mSMPTETime.mHours;
    *(_OWORD *)&v15.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
    *(_OWORD *)&v15.mSMPTETime.mHours = v12;
    v15.mFlags = DWORD2(v12) | 6;
    HALS_IOClock::TranslateTime((uint64_t)this, a3, &v15);
    v13 = 0.0;
    v14[0] = 0;
    v14[1] = 0;
    HALS_IOClock::GetRaw0Time(this, &v13, v14);
    return HALB_CaptureFile::Write(v10, a4, &v15.mSampleTime, (uint64_t)&v13, a5, a6);
  }
  return result;
}

uint64_t HALS_IOEngine2::_ColoringMixer_EmitRange(HALS_IOEngine2 *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, uint64_t a4, uint64_t a5, HALS_IOClock *a6, const AudioServerPlugInIOCycleInfo *a7, unsigned int a8)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  double v31;
  double v32;
  double v33;
  float v34;
  Float64 mSampleTime;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  caulk::concurrent::messenger *v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  uint64_t v42;
  Float64 v43;
  uint64_t v44;
  std::__shared_weak_count *mHostTime;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  float v52;
  uint64_t *i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  HALS_IOClock *v58;
  unsigned int v59;
  double v60;
  unint64_t v61[2];
  AudioTimeStamp v62;
  _QWORD v63[3];
  _QWORD v64[3];
  AudioTimeStamp v65;
  __int128 v66;
  _OWORD v67[4];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  AudioTimeStamp v72;
  __int128 v73;
  AudioTimeStamp v74;

  v16 = *(_OWORD *)&a7->mOutputTime.mSMPTETime.mSubframes;
  *(_OWORD *)&v72.mRateScalar = *(_OWORD *)&a7->mOutputTime.mRateScalar;
  *(_OWORD *)&v72.mSMPTETime.mSubframes = v16;
  v17 = *(_OWORD *)&a7->mMainHostTicksPerFrame;
  *(_OWORD *)&v72.mSMPTETime.mHours = *(_OWORD *)&a7->mOutputTime.mSMPTETime.mHours;
  v73 = v17;
  v18 = *(_OWORD *)&a7->mInputTime.mSMPTETime.mSubframes;
  v69 = *(_OWORD *)&a7->mInputTime.mRateScalar;
  v70 = v18;
  v19 = *(_OWORD *)&a7->mOutputTime.mSampleTime;
  v71 = *(_OWORD *)&a7->mInputTime.mSMPTETime.mHours;
  *(_OWORD *)&v72.mSampleTime = v19;
  v20 = *(_OWORD *)&a7->mCurrentTime.mSMPTETime.mSubframes;
  v67[1] = *(_OWORD *)&a7->mCurrentTime.mRateScalar;
  v67[2] = v20;
  v21 = *(_OWORD *)&a7->mInputTime.mSampleTime;
  v67[3] = *(_OWORD *)&a7->mCurrentTime.mSMPTETime.mHours;
  v68 = v21;
  v22 = *(_OWORD *)&a7->mCurrentTime.mSampleTime;
  v66 = *(_OWORD *)&a7->mIOCycleCounter;
  v67[0] = v22;
  DWORD2(v71) = 0;
  v68 = 0uLL;
  v72.mSampleTime = (double)a4;
  v72.mHostTime = 0;
  v72.mFlags = 1;
  *(_OWORD *)&v74.mSampleTime = COERCE_UNSIGNED_INT64((double)a4);
  *(_OWORD *)&v74.mRateScalar = *(_OWORD *)&v72.mRateScalar;
  *(_OWORD *)&v74.mSMPTETime.mSubframes = *(_OWORD *)&v72.mSMPTETime.mSubframes;
  *(_OWORD *)&v74.mSMPTETime.mHours = *(_OWORD *)&v72.mSMPTETime.mHours;
  v74.mFlags = 2;
  HALS_IOClock::TranslateTime((uint64_t)a6, &v72, &v74);
  v72.mHostTime = v74.mHostTime;
  v72.mFlags = 3;
  v74 = v72;
  v23 = a5 - a4;
  (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, __int128 *, uint64_t))(*(_QWORD *)this + 1224))(this, a2, a3, &v66, v23);
  v24 = v72.mSampleTime - (a7->mOutputTime.mSampleTime - a7->mInputTime.mSampleTime);
  if (*((_QWORD *)this + 133))
  {
    v65 = v72;
    (*(void (**)(HALS_IOEngine2 *, HALS_IOEngine2_StreamInfo *, AudioTimeStamp *, uint64_t))(*(_QWORD *)this + 1280))(this, a3, &v65, v23);
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, __int128 *, uint64_t, double))(*(_QWORD *)this + 1232))(this, a2, a3, &v66, v23, v24);
  v25 = *((_QWORD *)this + 97);
  if (v25)
  {
    v26 = *(_QWORD *)v25;
    v64[0] = *(_QWORD *)v25;
    LODWORD(v64[1]) = 0;
    *(int32x2_t *)((char *)&v64[1] + 4) = vmovn_s64(*(int64x2_t *)(v25 + 8));
  }
  else
  {
    v26 = 0;
    memset(v64, 0, 20);
  }
  v27 = *((_QWORD *)this + 98);
  if (v27)
  {
    v63[0] = *(_QWORD *)v27;
    LODWORD(v63[1]) = 0;
    *(int32x2_t *)((char *)&v63[1] + 4) = vmovn_s64(*(int64x2_t *)(v27 + 8));
  }
  else
  {
    memset(v63, 0, 20);
  }
  v28 = *((_QWORD *)a3 + 23);
  if (*(_QWORD *)v28
    && *(_BYTE *)(*(_QWORD *)v28 + 762)
    && (v29 = *(_QWORD *)(v28 + 24), v29 != *(_QWORD *)(v28 + 32))
    && *(_DWORD *)(v28 + 96) != *(_DWORD *)(v29 + 28))
  {
    memset(&v62, 0, 24);
    (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, __int128 *, _QWORD *, AudioTimeStamp *, uint64_t, _QWORD *))(*(_QWORD *)this + 1248))(this, a2, a3, &v66, v63, &v62, v23, v64);
  }
  else
  {
    (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, __int128 *, uint64_t, _QWORD *))(*(_QWORD *)this + 1240))(this, a2, a3, &v66, v23, v64);
  }
  v30 = (unsigned int *)*((_QWORD *)a3 + 25);
  if (v30 && (*(unsigned int (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 944))(this))
  {
    v62 = v72;
    v62.mFlags = v72.mFlags | 6;
    HALS_IOClock::TranslateTime((uint64_t)a6, &v72, &v62);
    v60 = 0.0;
    v61[0] = 0;
    v61[1] = 0;
    HALS_IOClock::GetRaw0Time(a6, &v60, v61);
    HALB_CaptureFile::Write(v30, (uint64_t)v67, &v62.mSampleTime, (uint64_t)&v60, v23, v26);
  }
  v58 = a6;
  v59 = a8;
  CalculateSafetyViolation_Write(a6, a8, &v74);
  v32 = v31;
  v33 = v31;
  v34 = v31;
  if (v34 < 0.0)
    v31 = COERCE_DOUBLE(kdebug_trace());
  if (v33 < 0.0)
  {
    mSampleTime = v74.mSampleTime;
    if (v74.mSampleTime < v72.mSampleTime)
    {
      v36 = *((_QWORD *)this + 92);
      v37 = *((_QWORD *)this + 93);
      if (v36 != v37)
      {
        v38 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)v36 + 48))
          {
            v31 = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v36 + 32)
                                                                                + 96)
                                                                  + 152))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 + 32)
                                                                                      + 96)));
            v38 += LODWORD(v31);
          }
          v36 += 8;
        }
        while (v36 != v37);
        if (v38 > 1)
        {
          AMCP::Log::Scope_Registry::get(*(AMCP::Log::Scope_Registry **)&v31);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v62, "com.apple.coreaudio", "AMCP");
          v39 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v62.mSampleTime + 8);
          v40 = pthread_self();
          v41 = pthread_mach_thread_np(v40);
          v42 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 320))(this);
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 216))(v42);
          v43 = v72.mSampleTime;
          v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 88, 8);
          *(_DWORD *)(v44 + 16) = 0;
          *(_BYTE *)(v44 + 20) = 16;
          *(_DWORD *)(v44 + 24) = v41;
          *(_QWORD *)(v44 + 32) = "HALS_IOEngine2.cpp";
          *(_DWORD *)(v44 + 40) = 4377;
          *(_QWORD *)(v44 + 48) = v57;
          *(Float64 *)(v44 + 56) = v43;
          *(Float64 *)(v44 + 64) = mSampleTime;
          *(double *)(v44 + 72) = v32;
          *(_DWORD *)(v44 + 80) = v38;
          *(_QWORD *)v44 = &off_1E698EB58;
          *(_QWORD *)(v44 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v39, (caulk::concurrent::message *)v44);
          mHostTime = (std::__shared_weak_count *)v62.mHostTime;
          if (v62.mHostTime)
          {
            v46 = (unint64_t *)(v62.mHostTime + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
              std::__shared_weak_count::__release_weak(mHostTime);
            }
          }
        }
      }
    }
  }
  kdebug_trace();
  v48 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, __int128 *, uint64_t, _QWORD *))(*(_QWORD *)this + 1256))(this, a2, a3, &v66, v23, v64);
  kdebug_trace();
  CalculateSafetyViolation_Write(v58, v59, &v74);
  v50 = v49;
  v51 = v49;
  v52 = v49;
  if ((int)v52 < 0)
    kdebug_trace();
  if (v51 < 0.0)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 92); ; ++i)
    {
      v54 = *i;
      if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == (_DWORD)a2)
        break;
    }
    v55 = v66;
    *(double *)v54 = v50;
    *(_QWORD *)(v54 + 8) = v55;
    ++*(_DWORD *)(v54 + 20);
  }
  return v48;
}

void sub_1B5B53754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  caulk::concurrent::message *v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v18;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v4 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 2082;
    v22 = v10;
    v23 = 2048;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 1024;
    v30 = v14;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Detected possible coloring mixer glitch on %{public}s: buffer time: %.0f  actual time: %.0f  safety violation: %.0lf  with %d running contexts", buf, 0x46u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::rt_cleanup::~rt_cleanup(&v16);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 88, 8);
  return a1;
}

void HALS_IOEngine2::_ReadFromStream_Mixable(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t *i;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  HALS_IOClock *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v46;
  AudioTimeStamp v47;
  _QWORD v48[3];
  _QWORD v49[3];
  _OWORD v50[4];
  AudioTimeStamp v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  AudioTimeStamp v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  AudioTimeStamp v63;

  v6 = a6;
  if (*(_QWORD *)a6)
    v12 = (void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8));
  else
    v12 = 0;
  v13 = *(_QWORD *)(a3 + 464);
  v14 = *(double *)(a5 + 512);
  v15 = fmax(v14, 0.0);
  if (!v13)
    v13 = (uint64_t)v15;
  v16 = (double)a4;
  v17 = v14 + (double)a4;
  if (v17 > (double)v13)
  {
    v46 = v12;
    v18 = *(_OWORD *)(a5 + 512);
    v56 = *(_OWORD *)(a5 + 496);
    *(_OWORD *)&v57.mSampleTime = v18;
    v19 = *(_OWORD *)(a5 + 480);
    v54 = *(_OWORD *)(a5 + 464);
    v55 = v19;
    v20 = *(_OWORD *)(a5 + 576);
    *(_OWORD *)&v57.mSMPTETime.mHours = *(_OWORD *)(a5 + 560);
    v58 = v20;
    v21 = *(_OWORD *)(a5 + 544);
    *(_OWORD *)&v57.mRateScalar = *(_OWORD *)(a5 + 528);
    *(_OWORD *)&v57.mSMPTETime.mSubframes = v21;
    v22 = *(_OWORD *)(a5 + 640);
    v61 = *(_OWORD *)(a5 + 624);
    v62 = v22;
    v23 = *(_OWORD *)(a5 + 608);
    v59 = *(_OWORD *)(a5 + 592);
    v60 = v23;
    v24 = *(_OWORD *)(a5 + 448);
    v52 = *(_OWORD *)(a5 + 432);
    v53 = v24;
    v25 = (v17 - (double)v13);
    v26 = *(_DWORD *)(a1[96] + 16);
    if (v26 >= v25)
      v27 = v25;
    else
      v27 = v26;
    if (v26 < v25)
      v13 = (uint64_t)(v17 - (double)v26);
    v28 = *(_QWORD *)(a5 + 288);
    DWORD2(v61) = 0;
    v58 = 0uLL;
    v57.mSampleTime = (double)v13;
    v57.mHostTime = 0;
    v57.mFlags = 1;
    *(_OWORD *)&v63.mSampleTime = COERCE_UNSIGNED_INT64((double)v13);
    *(_OWORD *)&v63.mRateScalar = *(_OWORD *)&v57.mRateScalar;
    *(_OWORD *)&v63.mSMPTETime.mSubframes = *(_OWORD *)&v57.mSMPTETime.mSubframes;
    *(_OWORD *)&v63.mSMPTETime.mHours = *(_OWORD *)&v57.mSMPTETime.mHours;
    v63.mFlags = 2;
    HALS_IOClock::TranslateTime(v28, &v57, &v63);
    v57.mHostTime = v63.mHostTime;
    v57.mFlags = 3;
    CalculateSafetyViolation_Read((HALS_IOClock **)a5, a4);
    if ((int)v29 <= -5)
      kdebug_trace();
    kdebug_trace();
    v30 = a1[97];
    if (v30)
    {
      v44 = *(void **)v30;
      v63.mSampleTime = *(Float64 *)v30;
      LODWORD(v63.mHostTime) = 0;
      *(int32x2_t *)((char *)&v63.mHostTime + 4) = vmovn_s64(*(int64x2_t *)(v30 + 8));
    }
    else
    {
      v44 = 0;
      memset(&v63, 0, 20);
    }
    v31 = v27;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, AudioTimeStamp *))(*a1 + 1088))(a1, a2, a3, &v52, v27, &v63);
    kdebug_trace();
    CalculateSafetyViolation_Read((HALS_IOClock **)a5, a4);
    v33 = v32;
    v34 = v32;
    if ((int)v32 <= -5)
      kdebug_trace();
    v6 = a6;
    if (v34 <= -5.0)
    {
      for (i = (uint64_t *)a1[92]; ; ++i)
      {
        v36 = *i;
        if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == (_DWORD)a2)
          break;
      }
      v37 = *(_QWORD *)(a5 + 432);
      *(double *)v36 = v33;
      *(_QWORD *)(v36 + 8) = v37;
      ++*(_DWORD *)(v36 + 16);
    }
    v38 = *(unsigned int **)(a3 + 200);
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 944))(a1))
    {
      v39 = *(HALS_IOClock **)(a5 + 288);
      v51 = v57;
      v50[0] = v53;
      v50[1] = v54;
      v50[2] = v55;
      v50[3] = v56;
      WriteToCaptureFile(v38, v39, &v51, (uint64_t)v50, v31, (uint64_t)v44);
    }
    v40 = *(_QWORD *)(a3 + 184);
    if (*(_QWORD *)v40
      && *(_BYTE *)(*(_QWORD *)v40 + 762)
      && (v41 = *(_QWORD *)(v40 + 24), v41 != *(_QWORD *)(v40 + 32))
      && *(_DWORD *)(v40 + 96) != *(_DWORD *)(v41 + 28))
    {
      v42 = a1[98];
      if (v42)
      {
        v49[0] = *(_QWORD *)v42;
        LODWORD(v49[1]) = 0;
        *(int32x2_t *)((char *)&v49[1] + 4) = vmovn_s64(*(int64x2_t *)(v42 + 8));
      }
      else
      {
        memset(v49, 0, 20);
      }
      memset(v48, 0, sizeof(v48));
      (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, _QWORD *, _QWORD *, uint64_t, AudioTimeStamp *))(*a1 + 1128))(a1, a2, a3, &v52, v49, v48, v31, &v63);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t))(*a1 + 1144))(a1, a2, a3, &v52, v31);
    }
    else if (v57.mSampleTime >= 0.0)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, AudioTimeStamp *, Float64))(*a1 + 1120))(a1, a2, a3, &v52, v31, &v63, v57.mSampleTime);
    }
    else
    {
      bzero(v44, (*(_DWORD *)(a3 + 64) * v31));
    }
    if (a1[133])
    {
      v47 = v57;
      (*(void (**)(_QWORD *, uint64_t, AudioTimeStamp *, uint64_t))(*a1 + 1280))(a1, a3, &v47, v31);
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t))(*a1 + 1136))(a1, a2, a3, &v52, v31);
    v14 = *(double *)(a5 + 512);
    v43 = (uint64_t)(v14 + v16);
    if (*(_QWORD *)(a3 + 464) <= v43)
      *(_QWORD *)(a3 + 464) = v43;
    v12 = v46;
  }
  if (v14 >= 0.0)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 1152))(a1, a3, a4, v6);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1160))(a1, a2, a3, a5, a4, v6);
  }
  else
  {
    bzero(v12, (*(_DWORD *)(a3 + 64) * a4));
  }
}

unsigned int *HALS_IOEngine2::_ReadFromStream_NonMixable(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  double v12;
  float v13;
  double v14;
  double v15;
  double v16;
  float v17;
  uint64_t *i;
  uint64_t v19;
  HALS_IOClock *v20;
  unsigned int *v21;
  unsigned int *result;
  HALS_IOClock *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[4];
  AudioTimeStamp v30;

  CalculateSafetyViolation_Read(a5, a4);
  v13 = v12;
  if (v13 <= -5.0)
    kdebug_trace();
  kdebug_trace();
  (*(void (**)(_QWORD *, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*a1 + 1088))(a1, a2, a3, (char *)a5 + 432, a4, a6);
  kdebug_trace();
  CalculateSafetyViolation_Read(a5, a4);
  v15 = v14;
  v16 = v14;
  v17 = v14;
  if ((int)v17 <= -5)
    kdebug_trace();
  if (v16 < -5.0)
  {
    for (i = (uint64_t *)a1[92]; ; ++i)
    {
      v19 = *i;
      if (*(_DWORD *)(*(_QWORD *)(*i + 32) + 16) == (_DWORD)a2)
        break;
    }
    v20 = a5[54];
    *(double *)v19 = v15;
    *(_QWORD *)(v19 + 8) = v20;
    ++*(_DWORD *)(v19 + 16);
  }
  v21 = *(unsigned int **)(a3 + 200);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  if ((_DWORD)result)
  {
    v23 = a5[36];
    v24 = *((_OWORD *)a5 + 33);
    *(_OWORD *)&v30.mSampleTime = *((_OWORD *)a5 + 32);
    *(_OWORD *)&v30.mRateScalar = v24;
    v25 = *((_OWORD *)a5 + 35);
    *(_OWORD *)&v30.mSMPTETime.mSubframes = *((_OWORD *)a5 + 34);
    *(_OWORD *)&v30.mSMPTETime.mHours = v25;
    v26 = *((_OWORD *)a5 + 29);
    v29[0] = *((_OWORD *)a5 + 28);
    v29[1] = v26;
    v27 = *((_OWORD *)a5 + 31);
    if (*(_QWORD *)a6)
      v28 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 8);
    else
      v28 = 0;
    v29[2] = *((_OWORD *)a5 + 30);
    v29[3] = v27;
    return WriteToCaptureFile(v21, v23, &v30, (uint64_t)v29, a4, v28);
  }
  return result;
}

void HALS_IOEngine2_DeviceInfo::StopContext(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const BOOL *v15;
  int v16;
  uint64_t v17;
  void *__p;
  char v19;

  v5 = 0;
  v6 = a1 + 48;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = (_QWORD *)(v6 + 24 * v5);
    v10 = v9 + 1;
    v11 = v9[1] - *v9;
    if ((v11 & 0x7FFFFFFF8) != 0)
    {
      v12 = 0;
      v13 = (v11 >> 3);
      do
      {
        if (v12 >= (uint64_t)(*v10 - *v9) >> 3)
LABEL_18:
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v14 = *(_QWORD *)(*v9 + 8 * v12);
        HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v17, a2, a3, v12);
        if (*(_BYTE *)(v14 + 20) || !AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v15))
          v16 = 0;
        else
          v16 = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v14 + 208) + 192))(*(_QWORD *)(v14 + 208), &v17, 0);
        if (v19 < 0)
        {
          operator delete(__p);
          if (v16)
          {
LABEL_13:
            if (v12 >= (uint64_t)(*v10 - *v9) >> 3)
              goto LABEL_18;
            HALS_IOEngine2_StreamInfo::end_cycle(*(AMCP::DAL::Synchronized_Mixer ***)(*v9 + 8 * v12), v15);
          }
        }
        else if (v16)
        {
          goto LABEL_13;
        }
        ++v12;
      }
      while (v13 != v12);
    }
    v7 = 0;
    v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1B5B5416C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo(HALS_IOEngine2_IOContextInfo::BufferInfo *this)
{
  HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)this, *((_DWORD *)this + 2));
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  caulk::concurrent::message *v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v18;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v4 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 1024;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 2080;
    v30 = v14;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOEngine2::_StopIO(%d) called on Context %d  current state: Prewarm: %llu Play: %llu State: %s", buf, 0x42u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(&v16);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 80, 8);
  return a1;
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E698EA58;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E698EA00;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void HALS_IOEngine2_IOContextInfo::StartIO(HALS_IOEngine2_IOContextInfo *this)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  vm_size_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *Buffer;
  char *v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 336))(*((_QWORD *)this + 3));
  v3 = (_QWORD *)((char *)this + 112);
  v4 = *((_QWORD *)this + 14);
  *((_DWORD *)this + 26) = v2;
  for (i = *((_QWORD *)this + 15);
        i != v4;
  *((_QWORD *)this + 15) = v4;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 400))(*((_QWORD *)this + 3), 0);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v34 = v6;
    do
    {
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      (*(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(**((_QWORD **)this + 3) + 432))(*((_QWORD *)this + 3), 0, v8, &v35);
      if (DWORD2(v35) == 1819304813)
      {
        v9 = HIDWORD(v36);
        v10 = (4 * *((_DWORD *)this + 26) * HIDWORD(v36));
        v11 = 4 * HIDWORD(v36);
        v13 = *((_QWORD *)this + 15);
        v12 = *((_QWORD *)this + 16);
        if (v13 >= v12)
        {
          v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *v3) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0x666666666666666)
            goto LABEL_33;
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v3) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x333333333333333)
            v22 = 0x666666666666666;
          else
            v22 = v20;
          v42 = (char *)this + 128;
          if (v22)
          {
            v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
            v9 = HIDWORD(v36);
          }
          else
          {
            v24 = 0;
            v23 = 0;
          }
          v38 = v24;
          v39 = (char *)&v24[5 * v19];
          v40 = v39;
          v41 = (char *)&v24[5 * v23];
          Buffer = (void *)HALB_IOBufferManager_Server::AllocateBuffer(v10);
          v24[5 * v19] = Buffer;
          v31 = (char *)&v24[5 * v19];
          *((_DWORD *)v31 + 2) = v10;
          *((_DWORD *)v31 + 3) = v9;
          *((_DWORD *)v31 + 4) = v11;
          *((_QWORD *)v31 + 3) = 0;
          *((_QWORD *)v31 + 4) = 0;
          bzero(Buffer, v10);
          v40 += 40;
          std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer((uint64_t *)this + 14, &v38);
          v15 = *((_QWORD *)this + 15);
          std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)&v38);
          v7 = v34;
        }
        else
        {
          v14 = (void *)HALB_IOBufferManager_Server::AllocateBuffer((4
                                                                                 * *((_DWORD *)this + 26)
                                                                                 * HIDWORD(v36)));
          *(_QWORD *)v13 = v14;
          *(_DWORD *)(v13 + 8) = v10;
          *(_DWORD *)(v13 + 12) = v9;
          *(_DWORD *)(v13 + 16) = v11;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 32) = 0;
          bzero(v14, v10);
          v15 = v13 + 40;
          *((_QWORD *)this + 15) = v13 + 40;
        }
      }
      else
      {
        v16 = *((_QWORD *)this + 15);
        v17 = *((_QWORD *)this + 16);
        if (v16 >= v17)
        {
          v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - *v3) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0x666666666666666)
LABEL_33:
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - *v3) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x333333333333333)
            v28 = 0x666666666666666;
          else
            v28 = v26;
          v42 = (char *)this + 128;
          if (v28)
            v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v28);
          else
            v29 = 0;
          v32 = v28 + 40 * v25;
          v38 = (_QWORD *)v28;
          v39 = (char *)v32;
          v41 = (char *)(v28 + 40 * v29);
          v33 = HIDWORD(v36);
          *(_QWORD *)v32 = 0;
          *(_DWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 12) = v33;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = 0;
          v40 = (char *)(v32 + 40);
          std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer((uint64_t *)this + 14, &v38);
          v15 = *((_QWORD *)this + 15);
          std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          v18 = HIDWORD(v36);
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 12) = v18;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v15 = v16 + 40;
        }
      }
      *((_QWORD *)this + 15) = v15;
      v8 = (v8 + 1);
    }
    while (v7 != (_DWORD)v8);
  }
  *((_BYTE *)this + 48) = 1;
}

void sub_1B5B54734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2_DeviceInfo::StartContext(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const BOOL *v14;
  uint64_t v15;
  void *__p;
  char v17;

  v5 = 0;
  v6 = a1 + 48;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = (_QWORD *)(v6 + 24 * v5);
    v10 = v9[1] - *v9;
    if ((v10 & 0x7FFFFFFF8) != 0)
    {
      v11 = 0;
      v12 = (v10 >> 3);
      do
      {
        if (v11 >= (uint64_t)(v9[1] - *v9) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v13 = *(_QWORD *)(*v9 + 8 * v11);
        HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v15, a2, a3, v11);
        if (!*(_BYTE *)(v13 + 20) && AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v14))
          (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v13 + 208) + 184))(*(_QWORD *)(v13 + 208), &v15, 0);
        if (v17 < 0)
          operator delete(__p);
        ++v11;
      }
      while (v12 != v11);
    }
    v7 = 0;
    v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1B5B54858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 24) = *(_DWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_DWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo((HALS_IOEngine2_IOContextInfo::BufferInfo *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B549B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: Caught exception while starting IO on Context %d  result: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: _AllocateTempBuffers on Context %d  returned error: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  caulk::concurrent::message *v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v18;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v4 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 1024;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 2080;
    v30 = v14;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d \t\tHALS_IOEngine2::_StartIO(%d) succeeded on Context %d  new state: Prewarm: %llu Play: %llu State: %s", buf, 0x42u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(&v16);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 80, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: _TellHardwareToStart on Context %d  returned error: 0x%X", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOEngine2::_StartIO(%d): play state has not changed on Context %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  caulk::concurrent::message *v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v18;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v4 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 1024;
    v22 = v10;
    v23 = 1024;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 2080;
    v30 = v14;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d >>> HALS_IOEngine2::_StartIO(%d) called on Context %d  current state: Prewarm: %llu Play: %llu State: %s", buf, 0x42u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(&v16);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 80, 8);
  return a1;
}

uint64_t ___ZNK14HALS_IOEngine246CalculateBufferByteSizeForStreamDomainObjectIDEbjj_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
  {
    v2 = v1 + 24 * *(unsigned __int8 *)(result + 56);
    v3 = *(_QWORD *)(v2 + 48);
    v4 = *(_QWORD *)(v2 + 56);
    if (v3 == v4)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      do
      {
        v6 = *(_DWORD **)v3;
        if (*(_DWORD *)(*(_QWORD *)v3 + 16) == *(_DWORD *)(result + 48))
        {
          v7 = v6[12];
          v8 = v6[14];
          v9 = v6[16] * *(_DWORD *)(result + 52);
          if (v7 == 1819304813)
            v5 = v9;
          else
            v5 = v8;
        }
        v3 += 8;
      }
      while (v3 != v4);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v5;
  }
  return result;
}

void ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke(__n128 *a1)
{
  HALB_Mutex *v1;
  _QWORD v2[4];
  __n128 v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_39_9468;
  v3 = a1[2];
  v1 = (HALB_Mutex *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v3.n128_u64[0] + 56))(v3.n128_u64[0], v3);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

void ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  HALS_IODevice *v4;
  int NumberStreams;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  uint64_t v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  uint64_t v12;
  HALS_ObjectMap *v13;
  uint64_t v14;
  char *v15;
  HALS_ObjectMap *v16;
  HALS_Object *v17;
  HALS_ObjectMap *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  int v28;
  char v29;
  HALS_Object *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int64x2_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  uint64_t **v86;
  char v87;
  HALS_IODevice *v88;
  _QWORD *v89;
  char **v90;
  int v91;
  unint64_t v92;
  __int128 v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  int64x2_t v97;
  char *v98;
  _QWORD *v99;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = operator new();
  *(_DWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0x6969726600000000;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  v82 = v3 + 48;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  v89 = v2;
  v4 = (HALS_IODevice *)(*(uint64_t (**)(_QWORD *))(*v2 + 320))(v2);
  *(_DWORD *)v3 = *((_DWORD *)v4 + 4);
  *(double *)(v3 + 8) = (*(double (**)(HALS_IODevice *))(*(_QWORD *)v4 + 264))(v4);
  *(_DWORD *)(v3 + 16) = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v4 + 296))(v4);
  *(_DWORD *)(v3 + 20) = (*(uint64_t (**)(HALS_IODevice *, _QWORD))(*(_QWORD *)v4 + 312))(v4, 0);
  *(_DWORD *)(v3 + 24) = (*(uint64_t (**)(HALS_IODevice *, uint64_t))(*(_QWORD *)v4 + 312))(v4, 1);
  *(_DWORD *)(v3 + 28) = (*(uint64_t (**)(HALS_IODevice *, _QWORD))(*(_QWORD *)v4 + 304))(v4, 0);
  *(_DWORD *)(v3 + 32) = (*(uint64_t (**)(HALS_IODevice *, uint64_t))(*(_QWORD *)v4 + 304))(v4, 1);
  *(_DWORD *)(v3 + 36) = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v4 + 328))(v4);
  *(_BYTE *)(v3 + 40) = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v4 + 336))(v4);
  *(_DWORD *)(v3 + 96) = HALS_IODevice::GetTransportType(v4);
  (*(void (**)(_QWORD *))(*v89 + 1328))(v89);
  v88 = *(HALS_IODevice **)(a1 + 40);
  NumberStreams = HALS_IODevice::GetNumberStreams(v88, 0);
  v87 = 0;
  v6 = 0;
  v83 = 1;
  v84 = v3;
  while (1)
  {
    if (NumberStreams)
    {
      v7 = 0;
      v8 = (uint64_t **)(v82 + 24 * v6);
      v86 = v8 + 1;
      v90 = (char **)(v8 + 2);
      v85 = NumberStreams;
      while (1)
      {
        v9 = HALS_IODevice::CopyStreamByIndex(v88, v87 & 1, v7);
        v11 = (HALS_ObjectMap *)v9;
        if (!v9)
          goto LABEL_73;
        v12 = *(unsigned int *)(v3 + 16);
        v13 = (HALS_ObjectMap *)*(unsigned int *)(v9 + 16);
        v14 = operator new();
        *(_QWORD *)v14 = v89;
        *(_DWORD *)(v14 + 8) = (_DWORD)v13;
        *(_DWORD *)(v14 + 12) = v7;
        *(_QWORD *)(v14 + 24) = 0;
        *(_DWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 19) = 0;
        *(_BYTE *)(v14 + 32) = 1;
        *(_OWORD *)(v14 + 36) = 0u;
        *(_OWORD *)(v14 + 52) = 0u;
        *(_OWORD *)(v14 + 68) = 0u;
        *(_OWORD *)(v14 + 84) = 0u;
        *(_OWORD *)(v14 + 100) = 0u;
        *(_OWORD *)(v14 + 116) = 0u;
        *(_OWORD *)(v14 + 132) = 0u;
        *(_OWORD *)(v14 + 148) = 0u;
        *(_OWORD *)(v14 + 164) = 0u;
        v15 = (char *)operator new(0xD8uLL);
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *(_QWORD *)v15 = &off_1E6991F28;
        *((_QWORD *)v15 + 16) = 0;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *((_DWORD *)v15 + 30) = 0;
        *(_OWORD *)(v15 + 24) = 0u;
        *((_OWORD *)v15 + 10) = 0u;
        *((_OWORD *)v15 + 11) = 0u;
        *((_OWORD *)v15 + 12) = 0u;
        *((_QWORD *)v15 + 26) = 0;
        *(_OWORD *)(v14 + 200) = 0u;
        *(_QWORD *)(v14 + 184) = v15 + 24;
        *(_QWORD *)(v14 + 192) = v15;
        *(_DWORD *)(v14 + 456) = 0;
        *(_OWORD *)(v14 + 216) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 464) = 0u;
        v16 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v13);
        v18 = v16;
        v20 = *((_DWORD *)v16 + 5);
        v19 = *((_DWORD *)v16 + 6);
        if (v20 == v19 || v20 == 1634956402)
          break;
        if (v19 != 1634956402)
          goto LABEL_11;
LABEL_12:
        *(_DWORD *)(v14 + 16) = *((_DWORD *)v18 + 11);
        *(_BYTE *)(v14 + 20) = *((_BYTE *)v18 + 52);
        *(_BYTE *)(v14 + 21) = HALS_Stream::IsReferenceStream(v18);
        *(_BYTE *)(v14 + 32) = HALS_Stream::GetStreamIsActive((unsigned int *)v18);
        *(_DWORD *)(v14 + 28) = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v18 + 200))(v18);
        HALS_Stream::GetCurrentVirtualFormat(v18, (AudioStreamBasicDescription *)(v14 + 40));
        v21 = *((unsigned int *)v18 + 4);
        v96 = 0x676C6F6270667420;
        v97.i32[0] = 0;
        LODWORD(v92) = 0;
        (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 112))(v18, v21, &v96, 40, &v92, v14 + 120, 0, 0, 0);
        v22 = *((unsigned int *)v18 + 4);
        v96 = 0x676C6F6273666D74;
        v97.i32[0] = 0;
        LODWORD(v92) = 0;
        (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 112))(v18, v22, &v96, 40, &v92, v14 + 80, 0, 0, 0);
        *(_QWORD *)(v14 + 168) = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v18 + 216))(v18);
        *(_DWORD *)(v14 + 176) = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v18 + 224))(v18);
        *(_DWORD *)(v14 + 24) = *((_DWORD *)v18 + 14);
        v23 = (_QWORD *)operator new();
        AMCP::DAL::Container::Container(v23, v14 + 40, 0.0);
        std::unique_ptr<AMCP::DAL::Container>::reset[abi:ne180100]((uint64_t *)(v14 + 224), (uint64_t)v23);
        v24 = *(_QWORD *)v14;
        v25 = *(unsigned __int8 *)(v14 + 20);
        v26 = *((unsigned int *)v18 + 4);
        v96 = 0x676C6F627465726DLL;
        v97.i32[0] = 0;
        v91 = 0;
        LODWORD(v92) = 0;
        (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, unint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 112))(v18, v26, &v96, 4, &v91, &v92, 0, 0, 0);
        if ((_DWORD)v92 == 1953330297
          || (v27 = (const char *)(v24 + 796), !strncmp(v27, "Hawking", 0x100uLL))
          || (v28 = strncmp(v27, "Speaker", 0x100uLL), v29 = 0, !v28) && v25)
        {
          v29 = 1;
        }
        *(_BYTE *)(v14 + 22) = v29;
        (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t))(*v89 + 1312))(v89, v14 + 40, *(unsigned __int8 *)(v14 + 20), *(unsigned int *)(v14 + 8), v12);
        HALS_ObjectMap::ReleaseObject(v18, v30);
        v31 = *v8;
        v32 = *v86;
        v33 = (char *)*v86 - (char *)*v8;
        if (*v86 != *v8)
        {
          v34 = v33 >> 3;
          v35 = *v8;
          while (1)
          {
            v36 = v34 >> 1;
            v37 = &v35[v34 >> 1];
            v38 = *v37;
            if (*v37)
            {
              if ((*(_BYTE *)(v38 + 20) != 0) != (*(_BYTE *)(v14 + 20) != 0))
              {
                if (!*(_BYTE *)(v14 + 20) || *(_BYTE *)(v38 + 20))
                  goto LABEL_26;
LABEL_25:
                v35 = v37 + 1;
                v36 = v34 + ~v36;
                goto LABEL_26;
              }
              if (*(_DWORD *)(v38 + 28) < *(_DWORD *)(v14 + 28))
                goto LABEL_25;
            }
LABEL_26:
            v34 = v36;
            if (!v36)
              goto LABEL_29;
          }
        }
        v35 = *v86;
LABEL_29:
        v39 = (char *)v35 - (char *)v31;
        v40 = v35 - v31;
        v41 = (uint64_t *)((char *)v31 + (((char *)v35 - (char *)v31) & 0xFFFFFFFFFFFFFFF8));
        v42 = *v90;
        if (v32 >= (uint64_t *)*v90)
        {
          v52 = (v33 >> 3) + 1;
          if (v52 >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v53 = v42 - (char *)v31;
          v54 = (v42 - (char *)v31) >> 2;
          if (v54 > v52)
            v52 = v54;
          if (v53 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v52;
          v95 = v8 + 2;
          if (v55)
            v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v55);
          else
            v56 = 0;
          v57 = (uint64_t *)(v55 + 8 * v40);
          v92 = v55;
          *(_QWORD *)&v93 = v57;
          *((_QWORD *)&v93 + 1) = v57;
          v94 = (char *)(v55 + 8 * v56);
          v58 = v57;
          if (v40 == v56)
          {
            if (v39 < 1)
            {
              if (v35 == v31)
                v60 = 1;
              else
                v60 = v39 >> 2;
              v99 = v95;
              v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v60);
              v63 = (uint64_t *)v93;
              v64 = *((_QWORD *)&v93 + 1) - v93;
              if (*((_QWORD *)&v93 + 1) == (_QWORD)v93)
              {
                v70 = vdupq_n_s64(v93);
                v66 = (unint64_t)&v61[8 * (v60 >> 2)];
              }
              else
              {
                v65 = v64 >> 3;
                v66 = (unint64_t)&v61[8 * (v60 >> 2) + (v64 & 0xFFFFFFFFFFFFFFF8)];
                v67 = 8 * v65;
                v68 = &v61[8 * (v60 >> 2)];
                do
                {
                  v69 = *v63;
                  *v63++ = 0;
                  *(_QWORD *)v68 = v69;
                  v68 += 8;
                  v67 -= 8;
                }
                while (v67);
                v70 = (int64x2_t)v93;
              }
              v71 = v94;
              v96 = v92;
              v92 = (unint64_t)v61;
              *(_QWORD *)&v93 = &v61[8 * (v60 >> 2)];
              v97 = v70;
              *((_QWORD *)&v93 + 1) = v66;
              v94 = &v61[8 * v62];
              v98 = v71;
              std::__split_buffer<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::~__split_buffer((uint64_t)&v96);
              v58 = (uint64_t *)*((_QWORD *)&v93 + 1);
              v57 = (uint64_t *)v93;
            }
            else
            {
              v59 = v40 + 2;
              if (v40 >= -1)
                v59 = v40 + 1;
              v57 -= v59 >> 1;
              *(_QWORD *)&v93 = v57;
              v58 = v57;
            }
          }
          *v58 = v14;
          v72 = v58 + 1;
          *((_QWORD *)&v93 + 1) = v72;
          v73 = *v8;
          if (v41 == *v8)
          {
            v3 = v84;
          }
          else
          {
            v74 = v41;
            v3 = v84;
            do
            {
              v75 = *--v74;
              *v74 = 0;
              *--v57 = v75;
            }
            while (v74 != v73);
            v72 = (uint64_t *)*((_QWORD *)&v93 + 1);
          }
          *(_QWORD *)&v93 = v57;
          v76 = *v86;
          if (v41 != *v86)
          {
            do
            {
              v77 = *v41;
              *v41++ = 0;
              *v72++ = v77;
            }
            while (v41 != v76);
            v57 = (uint64_t *)v93;
            v41 = *v86;
          }
          v78 = *v8;
          *v8 = v57;
          *v86 = v72;
          v79 = *v90;
          *v90 = v94;
          *((_QWORD *)&v93 + 1) = v41;
          v94 = v79;
          v92 = (unint64_t)v78;
          *(_QWORD *)&v93 = v78;
          std::__split_buffer<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::~__split_buffer((uint64_t)&v92);
          NumberStreams = v85;
        }
        else if (v41 == v32)
        {
          *v32 = v14;
          *v86 = v32 + 1;
          v3 = v84;
          NumberStreams = v85;
        }
        else
        {
          v43 = v32 - 1;
          v44 = *v86;
          v45 = v32 - 1;
          if ((unint64_t)v32 >= 8)
          {
            do
            {
              v46 = *v45;
              *v45++ = 0;
              *v44++ = v46;
            }
            while (v45 < v32);
          }
          *v86 = v44;
          if (v32 != v41 + 1)
          {
            v47 = 8 * (v32 - (v41 + 1));
            v48 = (uint64_t)&v31[v40 - 1];
            do
            {
              v49 = *(_QWORD *)(v48 + v47);
              *(_QWORD *)(v48 + v47) = 0;
              v50 = *v43;
              *v43 = v49;
              if (v50)
                std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v50);
              --v43;
              v47 -= 8;
            }
            while (v47);
          }
          v51 = *v41;
          *v41 = v14;
          v3 = v84;
          NumberStreams = v85;
          if (v51)
            std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v51);
        }
LABEL_73:
        HALS_ObjectMap::ReleaseObject(v11, v10);
        if (++v7 == NumberStreams)
          goto LABEL_74;
      }
      if (v20 == 1634956402 || v20 != v19)
        goto LABEL_12;
LABEL_11:
      HALS_ObjectMap::ReleaseObject(v16, v17);
      v18 = 0;
      goto LABEL_12;
    }
LABEL_74:
    if ((v83 & 1) == 0)
      break;
    v87 = 1;
    NumberStreams = HALS_IODevice::GetNumberStreams(v88, 1);
    v83 = 0;
    v6 = 1;
  }
  v80 = v89[96];
  v89[96] = v3;
  if (v80)
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v80);
  v81 = v89[6];
  if (v81)
    HALS_IssueDetector::Initialize(*(HALS_IssueDetector **)(v81 + 32));
}

void sub_1B5B55E0C()
{
  uint64_t v0;

  std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v0);
}

void std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  void **v3;

  for (i = 72; i != 24; i -= 24)
  {
    v3 = (void **)(a1 + i);
    std::vector<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  JUMPOUT(0x1B5E50688);
}

void std::vector<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](uint64_t a1)
{
  AudioConverterRef *v2;

  std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::__destroy_vector::operator()[abi:ne180100](a1 + 472);
  std::unique_ptr<AMCP::DAL::Container>::reset[abi:ne180100]((uint64_t *)(a1 + 224), 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 208);
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(a1 + 200), 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 184);
  v2 = *(AudioConverterRef **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
  {
    AudioConverterDispose(*v2);
    MEMORY[0x1B5E50688](v2, 0x20C4093837F09);
  }
  JUMPOUT(0x1B5E50688);
}

void std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::__destroy_vector::operator()[abi:ne180100](uint64_t a1)
{
  HALB_IOBufferManager_Server *v2;

  v2 = *(HALB_IOBufferManager_Server **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    HALB_IOBufferManager_Server::FreeBuffer(v2, (*(_DWORD *)(a1 + 16) - (_DWORD)v2) & 0xFFFFFFFC);
  }
}

uint64_t std::unique_ptr<AMCP::DAL::Container>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void applesauce::dispatch::v1::async<HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unsigned int v4;

  v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (v3 && *a1)
  {
    v4 = 0;
    do
    {
      (*(void (**)(_QWORD *, _QWORD))(**((_QWORD **)v3 + 12) + 200))(*((_QWORD **)v3 + 12), a1[2]);
      ++v4;
    }
    while (v4 < *a1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  JUMPOUT(0x1B5E50688);
}

void sub_1B5B5620C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::_UpdateTotalStreamUsage(HALS_IOEngine2 *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD block[4];
  int v21;
  char v22;

  v2 = *((_QWORD *)this + 96);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24 * a2 + 56) - *(_QWORD *)(v2 + 24 * a2 + 48);
    if ((v3 & 0x7FFFFFFF8) != 0)
    {
      v5 = 0;
      v6 = (v3 >> 3);
      v8 = MEMORY[0x1E0C809B0];
      while (1)
      {
        v9 = *(_QWORD *)(*((_QWORD *)this + 96) + 24 * a2 + 48);
        v10 = (*(_QWORD *)(*((_QWORD *)this + 96) + 24 * a2 + 56) - v9) >> 3;
        if (v5 >= v10)
        {
          v11 = 0;
        }
        else
        {
          if (v10 <= v5)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v11 = *(_QWORD *)(v9 + 8 * v5);
        }
        v12 = (_QWORD *)*((_QWORD *)this + 92);
        v13 = (_QWORD *)*((_QWORD *)this + 93);
        if (v12 != v13)
          break;
LABEL_13:
        v16 = 0;
        if (v11)
          goto LABEL_16;
LABEL_20:
        if (++v5 == v6)
          return;
      }
      while (1)
      {
        v14 = *v12 + 56;
        v15 = *(_QWORD *)(v14 + 24 * a2 + 8);
        if (v5 < v15)
        {
          if (v15 <= v5)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          if ((*(_QWORD *)(*(_QWORD *)(v14 + 24 * a2) + 8 * (v5 >> 6)) & (1 << v5)) != 0)
            break;
        }
        if (++v12 == v13)
          goto LABEL_13;
      }
      v16 = 1;
      if (!v11)
        goto LABEL_20;
LABEL_16:
      if (v16 != (*(_BYTE *)(v11 + 32) != 0))
      {
        *(_BYTE *)(v11 + 32) = v16;
        v17 = *(_DWORD *)(v11 + 8);
        v18 = *((_QWORD *)this + 91);
        block[0] = v8;
        block[1] = 0x40000000;
        block[2] = ___ZN14HALS_IOEngine223_UpdateTotalStreamUsageEb_block_invoke;
        block[3] = &__block_descriptor_tmp_33_9469;
        v21 = v17;
        v22 = v16;
        v19 = atomic_load((unsigned __int8 *)(v18 + 32));
        if ((v19 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(v18 + 33));
        dispatch_async(*(dispatch_queue_t *)v18, block);
      }
      goto LABEL_20;
    }
  }
}

void ___ZN14HALS_IOEngine223_UpdateTotalStreamUsageEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  HALS_Object *v10;
  HALS_ObjectMap *v11;
  unsigned int v12;
  unsigned int v13;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;

  v18 = 0;
  v19 = 0;
  HALS_System::GetInstance(&v20, 0, &v18);
  v3 = v20;
  v2 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = v19;
  if (!v19)
    goto LABEL_10;
  v7 = (unint64_t *)&v19->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_10:
    if (!v3)
      return;
LABEL_11:
    v9 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
    v11 = (HALS_ObjectMap *)v9;
    if (v9)
    {
      v13 = v9[5];
      v12 = v9[6];
      if (v13 == v12 || v13 == 1634956402)
      {
        if (v13 == 1634956402 || v13 != v12)
          goto LABEL_26;
      }
      else if (v12 == 1634956402)
      {
LABEL_26:
        v16 = *(unsigned __int8 *)(a1 + 36);
        v17 = v9[4];
        v20 = 0x676C6F6273616374;
        LODWORD(v21) = 0;
        v22 = v16;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v9 + 120))(v9, v17, &v20, 4, &v22, 0, 0, 0);
        goto LABEL_27;
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v10);
      v11 = 0;
    }
LABEL_27:
    HALS_ObjectMap::ReleaseObject(v11, v10);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (v3)
    goto LABEL_11;
}

void sub_1B5B56540(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  HALS_ObjectMap *v10;

  HALS_ObjectMap::ReleaseObject(v10, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B5652CLL);
}

void std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](uint64_t a1)
{
  HALS_Object *v2;
  uint64_t v3;
  void *v4;
  void **v5;

  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v5 = (void **)(a1 + 112);
  std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = 80;
  while (1)
  {
    v4 = *(void **)(a1 + v3);
    if (v4)
      operator delete(v4);
    v3 -= 24;
    if (v3 == 32)
    {
      HALS_ObjectMap::ReleaseObject_LongTerm(*(HALS_ObjectMap **)(a1 + 32), v2);
      JUMPOUT(0x1B5E50688);
    }
  }
}

void std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo((HALS_IOEngine2_IOContextInfo::BufferInfo *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

HALS_ObjectMap **HALS_Releaser_LongTerm<HALS_IOContext>::~HALS_Releaser_LongTerm(HALS_ObjectMap **a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject_LongTerm(*a1, a2);
  return a1;
}

void applesauce::dispatch::v1::async<HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unsigned int v4;

  v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (v3 && *a1)
  {
    v4 = 0;
    do
    {
      (*(void (**)(_QWORD *, _QWORD))(**((_QWORD **)v3 + 12) + 192))(*((_QWORD **)v3 + 12), a1[2]);
      ++v4;
    }
    while (v4 < *a1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  JUMPOUT(0x1B5E50688);
}

void sub_1B5B5671C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine214HandleOverloadEjjjRN22HALS_IOContextReporter13EngineMetricsE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1192))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine210EndWritingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1184))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine235WriteToStream_CommitTrailingSilenceEjjjR17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1264))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine213WriteToStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                              + 1176))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 1);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine212BeginWritingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1168))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine210EndReadingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1080))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN14HALS_IOEngine222IsolatedReadFromStreamEjjRK17HALS_IOEngineInfoj_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  HALS_IOClock *v12;
  AudioTimeStamp v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v2 + 1072))(v2, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64));
  v3 = *(unsigned int *)(a1 + 56);
  v4 = *(_QWORD *)(v2[96] + 72);
  v5 = (*(_QWORD *)(v2[96] + 80) - v4) >> 3;
  if (v3 < v5)
  {
    if (v5 <= v3)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v6 = *(_QWORD *)(v4 + 8 * v3);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(unsigned int *)(a1 + 60);
      v9 = *(_QWORD *)(v6 + 200);
      v15 = 0;
      v14 = 0uLL;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 320))(v7))
      {
        v10 = *(_OWORD *)(v7 + 560);
        *(_OWORD *)&v13.mSMPTETime.mSubframes = *(_OWORD *)(v7 + 544);
        *(_OWORD *)&v13.mSMPTETime.mHours = v10;
        v11 = *(_OWORD *)(v7 + 528);
        *(_OWORD *)&v13.mSampleTime = *(_OWORD *)(v7 + 512);
        *(_OWORD *)&v13.mRateScalar = v11;
        v13.mFlags = DWORD2(v10) | 6;
        HALS_IOClock::TranslateTime(*(_QWORD *)(v7 + 288), (const AudioTimeStamp *)(v7 + 512), &v13);
        v12 = *(HALS_IOClock **)(v7 + 288);
        v17 = 0;
        v16 = 0uLL;
        HALS_IOClock::GetRaw0Time(v12, (double *)&v16, (unint64_t *)&v16 + 1);
        v14 = v16;
        v15 = v17;
        if (v9)
          HALB_CaptureFile::WriteTimestamps(v9, v7 + 448, (uint64_t)&v13, (uint64_t)&v14, v8);
      }
    }
  }
}

uint64_t ___ZN14HALS_IOEngine212BeginReadingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1056))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine210EndIOCycleEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1048))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine212BeginIOCycleEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1040))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine211EndIOThreadEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1016))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine213BeginIOThreadEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1008))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN14HALS_IOEngine26StopIOEP14HALS_IOContextN21HALS_IOPrewarmManager11EngineStateE_block_invoke(uint64_t a1)
{
  HALS_IOEngine2 *v1;
  BOOL v2;

  v2 = 0;
  v1 = *(HALS_IOEngine2 **)(a1 + 32);
  (*(void (**)(HALS_IOEngine2 *, _QWORD, _QWORD, BOOL *))(*(_QWORD *)v1 + 984))(v1, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &v2);
  HALS_IOEngine2::_SendIsRunningNotifications(v1, v2);
}

void HALS_IOEngine2::_SendIsRunningNotifications(HALS_IOEngine2 *this, char a2)
{
  _BYTE *v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(HALS_IOEngine2 *, _BYTE **))(*(_QWORD *)this + 904))(this, &v10);
  v4 = v10;
  if ((a2 & 1) != 0 || v10 != v11)
  {
    v5 = *((_DWORD *)this + 7);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(&v13, v10, (uint64_t)v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 2));
    v16 = v5;
    v17 = a2;
    v6 = atomic_load((unsigned __int8 *)this + 96);
    if ((v6 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)this + 97);
    v7 = *((_QWORD *)this + 8);
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    v9 = v13;
    std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>((_QWORD *)v8, v13, v14, 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v13) >> 2));
    *(_DWORD *)(v8 + 24) = v16;
    *(_BYTE *)(v8 + 28) = v17;
    v18 = 0;
    dispatch_async_f(v7, (void *)v8, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&v18);
    if (v9)
      operator delete(v9);
    v4 = v10;
  }
  if (v4)
  {
    v11 = v4;
    operator delete(v4);
  }
}

void sub_1B5B5714C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN14HALS_IOEngine27StartIOEP14HALS_IOContext_block_invoke(_QWORD *a1)
{
  HALS_IOEngine2 *v1;
  BOOL v2;

  v2 = 0;
  v1 = (HALS_IOEngine2 *)a1[5];
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(HALS_IOEngine2 *, _QWORD, uint64_t, BOOL *))(*(_QWORD *)v1 + 976))(v1, a1[6], 2, &v2);
  HALS_IOEngine2::_SendIsRunningNotifications(v1, v2);
}

uint64_t ___ZN14HALS_IOEngine218UnregisterIOBufferEbjjjPv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 968))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 60), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

uint64_t ___ZN14HALS_IOEngine216RegisterIOBufferEbjjjPv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 960))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 68), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL ___ZN14HALS_IOEngine216TimelineWasResetEjj_block_invoke(uint64_t a1)
{
  HALS_IOEngine2 *v2;
  int v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(HALS_IOEngine2 **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  result = HALS_IOEngine2::IsEngineMixing(v2);
  v5 = *((_QWORD *)v2 + 96);
  if (v5)
  {
    if ((v3 & 1) != 0 || !result)
    {
      v7 = 0;
      v8 = v5 + 48;
      v9 = 1;
      do
      {
        v10 = v9;
        v12 = v8 + 24 * v7;
        v11 = *(uint64_t **)v12;
        v13 = *(_QWORD *)(v12 + 8) - *(_QWORD *)v12;
        if ((v13 & 0x7FFFFFFF8) != 0)
        {
          v14 = ((unint64_t)v13 >> 3);
          v15 = v13 >> 3;
          do
          {
            if (!v15)
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            v16 = *v11++;
            *(_QWORD *)(v16 + 464) = 0;
            --v15;
            --v14;
          }
          while (v14);
        }
        v9 = 0;
        v7 = 1;
      }
      while ((v10 & 1) != 0);
    }
  }
  v17 = (uint64_t *)*((_QWORD *)v2 + 92);
  v18 = (uint64_t *)*((_QWORD *)v2 + 93);
  if (v17 != v18)
  {
    v19 = *(_DWORD *)(a1 + 44);
    do
    {
      v20 = *v17;
      if (*(_DWORD *)(*(_QWORD *)(*v17 + 32) + 16) == v19)
      {
        v21 = *(_QWORD *)(v20 + 112);
        v22 = *(_QWORD *)(v20 + 120);
        if (v21 != v22)
        {
          v23 = v21;
          do
          {
            *(_QWORD *)(v23 + 24) = 0;
            v23 += 40;
          }
          while (v23 != v22);
          do
          {
            *(_QWORD *)(v21 + 32) = 0;
            v21 += 40;
          }
          while (v21 != v22);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  return result;
}

__n128 __Block_byref_object_copy__65(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN14HALS_IOEngine220UpdateIssueReportersEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 896))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

uint64_t ___ZN14HALS_IOEngine219SetAudioCaptureModeE17AudioCapturerMode_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 952))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ___ZNK14HALS_IOEngine220IsCaptureFileEnabledEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 944))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_IOEngine2::GetDSPForStreamAtIndex(HALS_IOEngine2 *this, uint64_t a2, char a3, int a4)
{
  HALB_Mutex *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[6];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(uint64_t, uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  std::__shared_weak_count *v21;

  v15 = 0;
  v16 = &v15;
  v17 = 0x3802000000;
  v18 = __Block_byref_object_copy__57;
  v19 = __Block_byref_object_dispose__58;
  v20 = 0;
  v21 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK14HALS_IOEngine222GetDSPForStreamAtIndexEbj_block_invoke;
  v12[3] = &unk_1E698E2E8;
  v14 = a3;
  v13 = a4;
  v12[4] = &v15;
  v12[5] = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
  v6 = v16[6];
  *(_QWORD *)this = v16[5];
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  _Block_object_dispose(&v15, 8);
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B5B574E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__57(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__58(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZNK14HALS_IOEngine222GetDSPForStreamAtIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_QWORD *)(v3 + 8 * v2);
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 184);
        v7 = *(_QWORD *)(v6 + 192);
        *(_QWORD *)&v14 = v8;
        *((_QWORD *)&v14 + 1) = v7;
        if (v7)
        {
          v9 = (unint64_t *)(v7 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v14);
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
        if (*((_QWORD *)&v14 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
  }
}

uint64_t HALS_IOEngine2::HasSoftwareReferenceStreamInScope(HALS_IOEngine2 *this, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  result = (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 400))(this);
  if ((_DWORD)result)
  {
    v5 = result;
    if (((*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, _QWORD))(*(_QWORD *)this + 488))(this, a2, 0) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = 1;
      while (v5 != (_DWORD)v6)
      {
        v7 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, a2, v6);
        v6 = (v6 + 1);
        if (v7)
        {
          v8 = v6 - 1;
          return v8 < v5;
        }
      }
      v8 = v5;
      return v8 < v5;
    }
  }
  return result;
}

void ___ZN14HALS_IOEngine222SetDSPForStreamAtIndexEbjRK16HALS_DSPSettings_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  HALS_IOStreamDSP **v10;
  DSPGraph *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  HALS_IOStreamDSP *v15;
  uint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  HALB_CaptureFile *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  HALB_CaptureFile *v36;
  ca::concurrent::details::service_thread ****v37;
  ca::concurrent::details::service_thread ****v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  ca::concurrent::details::service_thread ****v48;
  ca::concurrent::details::service_thread ***v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  int v63;
  int v64;
  _DWORD *v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  const __CFDictionary *v104;
  CFIndex Count;
  CFTypeRef *v106;
  CFTypeRef *v107;
  CFTypeRef v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *i;
  __int128 v119;
  void *v120;
  uint64_t v121;
  void (***v122)(uint64_t);
  void (**v123)(uint64_t);
  BOOL v124;
  uint64_t v125;
  int v126;
  std::string::size_type v127;
  std::string *v128;
  _QWORD *v129;
  _QWORD *v130;
  std::string *v131;
  unsigned __int8 *v132;
  unint64_t v133;
  int8x8_t v134;
  void *v135;
  uint8x8_t v136;
  unint64_t v137;
  unint64_t v138;
  std::string *v139;
  unsigned __int8 **v140;
  unsigned __int8 *j;
  unint64_t v142;
  float v143;
  _BOOL8 v144;
  unint64_t v145;
  unint64_t v146;
  int8x8_t prime;
  void *v148;
  void *v149;
  uint64_t v150;
  _QWORD **v151;
  unint64_t v152;
  uint8x8_t v153;
  unint64_t v154;
  uint8x8_t v155;
  uint64_t v156;
  _QWORD *k;
  unint64_t v158;
  unint64_t v159;
  uint8x8_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *p_shared_owners;
  unint64_t v170;
  uint64_t v171;
  const __CFDictionary *v172;
  const __CFDictionary *v173;
  const __CFArray *v174;
  CFIndex v175;
  const __CFArray *v176;
  CFIndex v177;
  unint64_t m;
  const __CFDictionary *v179;
  const __CFNumber *Value;
  unint64_t v181;
  const __CFDictionary *v182;
  uint64_t v183;
  int v184;
  const __CFDictionary *v185;
  const void *v186;
  const void *v187;
  CFTypeID TypeID;
  const UInt8 *BytePtr;
  CFIndex Length;
  size_t v191;
  void *v192;
  const __CFDictionary *v193;
  int v194;
  const void *v195;
  const void *v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *size;
  unint64_t *v200;
  unint64_t v201;
  __int128 v202;
  int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  std::runtime_error *exception;
  std::runtime_error *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  __int128 *v213;
  char *v214;
  uint64_t v215;
  _QWORD *v216;
  HALS_IOStreamDSP *v217;
  uint64_t v218;
  void *__p[2];
  __int128 v220;
  float v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  char *v226;
  std::string v227;
  _QWORD v228[2];
  CFTypeRef cf[2];
  _BYTE buf[32];
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[4];
  HALB_CaptureFile *v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::string v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 40);
  v3 = v2[96];
  if (v3)
  {
    v4 = *(unsigned __int8 *)(a1 + 84);
    v5 = *(unsigned int *)(a1 + 80);
    v216 = (_QWORD *)a1;
    v218 = *(_QWORD *)(a1 + 48);
    (*(void (**)(_QWORD *))(*v2 + 336))(v2);
    v6 = *(_QWORD *)(v3 + 24 * v4 + 48);
    v7 = (*(_QWORD *)(v3 + 24 * v4 + 56) - v6) >> 3;
    if (v5 >= v7)
      goto LABEL_306;
    v212 = (*(_QWORD *)(v3 + 24 * v4 + 56) - v6) >> 3;
    if (v7 <= v5)
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    v8 = *(_QWORD *)(v6 + 8 * v5);
    v9 = (char *)operator new(0xD8uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E6991F28;
    *((_QWORD *)v9 + 16) = 0;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    *((_QWORD *)v9 + 26) = 0;
    *(_QWORD *)&buf[8] = v9;
    *(_OWORD *)(v9 + 24) = 0u;
    v211 = v8;
    v10 = (HALS_IOStreamDSP **)(v8 + 184);
    *(_QWORD *)buf = v9 + 24;
    v11 = (DSPGraph *)std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v10, (__int128 *)buf);
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *v10;
    v16 = *(unsigned __int8 *)(v218 + 23);
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(v218 + 8);
    if (v16)
    {
      v17 = (AMCP::Log::Scope_Registry *)DSPGraph::ABIVersion(v11);
      if ((_DWORD)v17 == 4)
      {
        v210 = v5;
        if ((HALS_IOStreamDSP *)((char *)v15 + 48) != (HALS_IOStreamDSP *)(v218 + 72))
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v15 + 48, *(char **)(v218 + 72), *(_QWORD *)(v218 + 80), (uint64_t)(*(_QWORD *)(v218 + 80) - *(_QWORD *)(v218 + 72)) >> 2);
        v214 = (char *)v15 + 24;
        std::vector<HALS_IOStreamDSP::InputChannelData>::__base_destruct_at_end[abi:ne180100]((uint64_t *)v15 + 3, *((_QWORD *)v15 + 3));
        v18 = v216;
        v19 = (__int128 *)v216[7];
        v20 = (__int128 *)v216[8];
        v217 = v15;
        if (v19 != v20)
        {
          v213 = (__int128 *)v216[8];
          while (1)
          {
            v21 = v19[1];
            v222 = *v19;
            v223 = v21;
            v224 = *((_QWORD *)v19 + 4);
            *(_OWORD *)buf = v222;
            *(_OWORD *)&buf[16] = v21;
            v231 = v224;
            v232 = 0;
            v233[3] = 0;
            v234 = 0;
            v23 = *((_QWORD *)v15 + 4);
            v22 = *((_QWORD *)v15 + 5);
            if (v23 >= v22)
            {
              v28 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v23 - *(_QWORD *)v214) >> 3);
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) > 0x2E8BA2E8BA2E8BALL)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v30 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22 - *(_QWORD *)v214) >> 3);
              if (2 * v30 > v29)
                v29 = 2 * v30;
              if (v30 >= 0x1745D1745D1745DLL)
                v31 = 0x2E8BA2E8BA2E8BALL;
              else
                v31 = v29;
              if (v31)
              {
                if (v31 > 0x2E8BA2E8BA2E8BALL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v32 = (char *)operator new(88 * v31);
              }
              else
              {
                v32 = 0;
              }
              v33 = &v32[88 * v28];
              v34 = &v32[88 * v31];
              v35 = v223;
              *(_OWORD *)v33 = v222;
              *((_OWORD *)v33 + 1) = v35;
              *((_QWORD *)v33 + 4) = v224;
              *((_QWORD *)v33 + 5) = 0;
              std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v33 + 48), (uint64_t)v233);
              v36 = v234;
              v234 = 0;
              *((_QWORD *)v33 + 10) = v36;
              v27 = v33 + 88;
              v37 = (ca::concurrent::details::service_thread ****)*((_QWORD *)v217 + 3);
              v38 = (ca::concurrent::details::service_thread ****)*((_QWORD *)v217 + 4);
              if (v38 != v37)
              {
                v39 = (uint64_t)&v32[88 * v28 - 40];
                v40 = (uint64_t)(v38 - 5);
                do
                {
                  v41 = v39;
                  v42 = v40 - 48;
                  v43 = *(_OWORD *)(v40 - 48);
                  v44 = *(_OWORD *)(v40 - 32);
                  *(_QWORD *)(v39 - 16) = *(_QWORD *)(v40 - 16);
                  *(_OWORD *)(v39 - 48) = v43;
                  *(_OWORD *)(v39 - 32) = v44;
                  v45 = *(_QWORD *)(v40 - 8);
                  *(_QWORD *)(v40 - 8) = 0;
                  *(_QWORD *)(v41 - 8) = v45;
                  v46 = std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](v41, v40);
                  v47 = *(_QWORD *)(v40 + 32);
                  *(_QWORD *)(v40 + 32) = 0;
                  *(_QWORD *)(v46 + 32) = v47;
                  v39 = v46 - 88;
                  v40 -= 88;
                }
                while ((ca::concurrent::details::service_thread ****)v42 != v37);
                v15 = v217;
                v48 = (ca::concurrent::details::service_thread ****)*((_QWORD *)v217 + 3);
                v38 = (ca::concurrent::details::service_thread ****)*((_QWORD *)v217 + 4);
                *((_QWORD *)v217 + 3) = v46 - 48;
                *((_QWORD *)v217 + 4) = v27;
                *((_QWORD *)v217 + 5) = v34;
                if (v38 == v48)
                {
                  v20 = v213;
                  if (!v38)
                    goto LABEL_39;
                }
                else
                {
                  v20 = v213;
                  do
                  {
                    std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100](v38 - 1, 0);
                    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)v38 - 6);
                    v38 -= 11;
                  }
                  while (v38 != v48);
                  v38 = v48;
                  if (!v48)
                    goto LABEL_39;
                }
LABEL_38:
                operator delete(v38);
                goto LABEL_39;
              }
              *((_QWORD *)v217 + 3) = v33;
              *((_QWORD *)v217 + 4) = v27;
              *((_QWORD *)v217 + 5) = v34;
              v15 = v217;
              v20 = v213;
              if (v38)
                goto LABEL_38;
            }
            else
            {
              v24 = v223;
              *(_OWORD *)v23 = v222;
              *(_OWORD *)(v23 + 16) = v24;
              *(_QWORD *)(v23 + 32) = v224;
              v25 = v232;
              v232 = 0;
              *(_QWORD *)(v23 + 40) = v25;
              std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](v23 + 48, (uint64_t)v233);
              v26 = v234;
              v234 = 0;
              *(_QWORD *)(v23 + 80) = v26;
              v27 = (char *)(v23 + 88);
            }
LABEL_39:
            *((_QWORD *)v15 + 4) = v27;
            v49 = (ca::concurrent::details::service_thread ***)v234;
            v234 = 0;
            if (v49)
            {
              HALB_CaptureFile::~HALB_CaptureFile(v49);
              MEMORY[0x1B5E50688]();
            }
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](&v232);
            v19 = (__int128 *)((char *)v19 + 40);
            if (v19 == v20)
            {
              v18 = v216;
              v19 = (__int128 *)v216[7];
              break;
            }
          }
        }
        if ((*((_BYTE *)v19 + 12) & 0x20) != 0)
          v63 = 1;
        else
          v63 = *((_DWORD *)v19 + 7);
        *((_DWORD *)v15 + 24) = v63;
        v64 = *(_DWORD *)(v218 + 64);
        if (!v64)
        {
LABEL_71:
          v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18[8] - (_QWORD)v19) >> 3);
          v71 = *((_QWORD *)v15 + 9);
          v72 = *((_QWORD *)v15 + 10);
          v73 = 0xCCCCCCCCCCCCCCCDLL * ((v72 - v71) >> 4);
          v74 = v70 - v73;
          if (v70 <= v73)
          {
            if (v70 >= v73)
              goto LABEL_89;
            v87 = v71 + 80 * v70;
          }
          else
          {
            v75 = *((_QWORD *)v15 + 11);
            if (0xCCCCCCCCCCCCCCCDLL * ((v75 - v72) >> 4) < v74)
            {
              if (v70 > 0x333333333333333)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v76 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v71) >> 4);
              if (2 * v76 > v70)
                v70 = 2 * v76;
              if (v76 >= 0x199999999999999)
                v77 = 0x333333333333333;
              else
                v77 = v70;
              if (v77 > 0x333333333333333)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v78 = (char *)operator new(80 * v77);
              v79 = &v78[80 * v73];
              v80 = &v78[80 * v77];
              bzero(v79, 80 * ((80 * v74 - 80) / 0x50) + 80);
              v81 = &v79[80 * ((80 * v74 - 80) / 0x50) + 80];
              v83 = (char *)*((_QWORD *)v15 + 9);
              v82 = (char *)*((_QWORD *)v15 + 10);
              if (v82 != v83)
              {
                do
                {
                  *((_OWORD *)v79 - 5) = *((_OWORD *)v82 - 5);
                  v84 = *((_OWORD *)v82 - 4);
                  v85 = *((_OWORD *)v82 - 3);
                  v86 = *((_OWORD *)v82 - 1);
                  *((_OWORD *)v79 - 2) = *((_OWORD *)v82 - 2);
                  *((_OWORD *)v79 - 1) = v86;
                  *((_OWORD *)v79 - 4) = v84;
                  *((_OWORD *)v79 - 3) = v85;
                  v79 -= 80;
                  v82 -= 80;
                }
                while (v82 != v83);
                v82 = (char *)*((_QWORD *)v15 + 9);
              }
              *((_QWORD *)v15 + 9) = v79;
              *((_QWORD *)v15 + 10) = v81;
              *((_QWORD *)v15 + 11) = v80;
              if (v82)
                operator delete(v82);
LABEL_89:
              v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v216[8] - v216[7]) >> 3);
              v89 = *((_QWORD *)v15 + 21);
              v90 = *((_QWORD *)v15 + 22);
              v91 = (v90 - v89) >> 4;
              if (v88 <= v91)
              {
                if (v88 >= v91)
                {
LABEL_106:
                  *(_OWORD *)__p = 0u;
                  v220 = 0u;
                  v221 = 1.0;
                  v104 = *(const __CFDictionary **)(v218 + 112);
                  if (v104)
                  {
                    v225 = 0uLL;
                    v226 = 0;
                    Count = CFDictionaryGetCount(v104);
                    std::vector<__CFString const*>::vector(buf, Count);
                    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v218 + 112), *(const void ***)buf, 0);
                    v107 = *(CFTypeRef **)buf;
                    v106 = *(CFTypeRef **)&buf[8];
                    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
                    {
                      do
                      {
                        v108 = *v107;
                        if (*v107)
                          CFRetain(*v107);
                        v244.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A0F60;
                        v244.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
                        v109 = (_QWORD *)*((_QWORD *)&v225 + 1);
                        if (*((_QWORD *)&v225 + 1) >= (unint64_t)v226)
                        {
                          v111 = (_QWORD *)v225;
                          v112 = (uint64_t)(*((_QWORD *)&v225 + 1) - v225) >> 4;
                          v113 = v112 + 1;
                          if ((unint64_t)(v112 + 1) >> 60)
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          v114 = (uint64_t)&v226[-v225];
                          if ((uint64_t)&v226[-v225] >> 3 > v113)
                            v113 = v114 >> 3;
                          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
                            v115 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v115 = v113;
                          if (v115)
                          {
                            if (v115 >> 60)
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v116 = (char *)operator new(16 * v115);
                          }
                          else
                          {
                            v116 = 0;
                          }
                          v244.__r_.__value_.__l.__size_ = 0;
                          v117 = &v116[16 * v112];
                          *(_QWORD *)v117 = &off_1E69A0F60;
                          *((_QWORD *)v117 + 1) = v108;
                          for (i = v117; v109 != v111; v109 -= 2)
                          {
                            *((_QWORD *)i - 2) = &off_1E69A0F60;
                            i -= 16;
                            *((_QWORD *)i + 1) = *(v109 - 1);
                            *(v109 - 1) = 0;
                          }
                          v110 = v117 + 16;
                          v119 = v225;
                          *(_QWORD *)&v225 = i;
                          *((_QWORD *)&v225 + 1) = v117 + 16;
                          v226 = &v116[16 * v115];
                          v120 = (void *)v119;
                          if (*((_QWORD *)&v119 + 1) != (_QWORD)v119)
                          {
                            v121 = *((_QWORD *)&v119 + 1) - 16;
                            v122 = (void (***)(uint64_t))(*((_QWORD *)&v119 + 1) - 16);
                            do
                            {
                              v123 = *v122;
                              v122 -= 2;
                              (*v123)(v121);
                              v124 = v121 == (_QWORD)v120;
                              v121 = (uint64_t)v122;
                            }
                            while (!v124);
                          }
                          if (v120)
                            operator delete(v120);
                        }
                        else
                        {
                          *(_QWORD *)(*((_QWORD *)&v225 + 1) + 8) = v108;
                          v244.__r_.__value_.__l.__size_ = 0;
                          v110 = v109 + 2;
                          *v109 = &off_1E69A0F60;
                        }
                        *((_QWORD *)&v225 + 1) = v110;
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v244);
                        ++v107;
                      }
                      while (v107 != v106);
                      v107 = *(CFTypeRef **)buf;
                      v15 = v217;
                    }
                    if (v107)
                    {
                      *(_QWORD *)&buf[8] = v107;
                      operator delete(v107);
                    }
                    v215 = *((_QWORD *)&v225 + 1);
                    v125 = v225;
                    if ((_QWORD)v225 != *((_QWORD *)&v225 + 1))
                    {
                      while (1)
                      {
                        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)cf, *(CFTypeRef *)(v125 + 8));
                        cf[0] = &off_1E69A0F60;
                        OS::CF::String::AsStdString(&v244, (uint64_t)cf);
                        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v228, *(CFDictionaryRef *)(v218 + 112), (void *)cf[1]);
                        if (v228[1])
                          break;
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                        {
                          v139 = &v244;
                          if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v139 = (std::string *)v244.__r_.__value_.__r.__words[0];
                          *(_DWORD *)buf = 136315650;
                          *(_QWORD *)&buf[4] = "HALS_IOStreamDSP.cpp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 134;
                          *(_WORD *)&buf[18] = 2080;
                          *(_QWORD *)&buf[20] = v139;
                          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSP Property not valid: the value for key %s, in given StringToString substitution dictionary, is not a string.", buf, 0x1Cu);
                        }
LABEL_220:
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v228);
                        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v244.__r_.__value_.__l.__data_);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)cf);
                        v125 += 16;
                        if (v125 == v215)
                          goto LABEL_233;
                      }
                      OS::CF::String::AsStdString(&v227, (uint64_t)v228);
                      v126 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
                      v127 = v244.__r_.__value_.__r.__words[0];
                      if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v128 = &v227;
                      else
                        v128 = (std::string *)v227.__r_.__value_.__r.__words[0];
                      v129 = operator new(0x40uLL);
                      v130 = v129;
                      if (v126 >= 0)
                        v131 = &v244;
                      else
                        v131 = (std::string *)v127;
                      *(_QWORD *)buf = v129;
                      *(_QWORD *)&buf[8] = &v220;
                      buf[16] = 0;
                      v132 = (unsigned __int8 *)(v129 + 2);
                      *v129 = 0;
                      v129[1] = 0;
                      std::string::basic_string[abi:ne180100]<0>(v129 + 2, (char *)v131);
                      std::string::basic_string[abi:ne180100]<0>(v130 + 5, (char *)v128);
                      buf[16] = 1;
                      v130[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v132);
                      v133 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v132);
                      v130[1] = v133;
                      v134 = (int8x8_t)__p[1];
                      if (__p[1])
                      {
                        v135 = (void *)v133;
                        v136 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                        v136.i16[0] = vaddlv_u8(v136);
                        v137 = v136.u32[0];
                        if (v136.u32[0] > 1uLL)
                        {
                          v138 = v133;
                          if (__p[1] <= (void *)v133)
                            v138 = v133 % (unint64_t)__p[1];
                        }
                        else
                        {
                          v138 = ((unint64_t)__p[1] - 1) & v133;
                        }
                        v140 = (unsigned __int8 **)*((_QWORD *)__p[0] + v138);
                        if (v140)
                        {
                          for (j = *v140; j; j = *(unsigned __int8 **)j)
                          {
                            v142 = *((_QWORD *)j + 1);
                            if ((void *)v142 == v135)
                            {
                              if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(j + 16, v132))
                                goto LABEL_217;
                            }
                            else
                            {
                              if (v137 > 1)
                              {
                                if ((void *)v142 >= __p[1])
                                  v142 %= (unint64_t)__p[1];
                              }
                              else
                              {
                                v142 &= (unint64_t)__p[1] - 1;
                              }
                              if (v142 != v138)
                                break;
                            }
                          }
                        }
                      }
                      v143 = (float)(unint64_t)(*((_QWORD *)&v220 + 1) + 1);
                      if (!__p[1] || (float)(v221 * (float)(unint64_t)__p[1]) < v143)
                      {
                        v144 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
                        if (__p[1] < (void *)3)
                          v144 = 1;
                        v145 = v144 | (2 * (uint64_t)__p[1]);
                        v146 = vcvtps_u32_f32(v143 / v221);
                        if (v145 <= v146)
                          prime = (int8x8_t)v146;
                        else
                          prime = (int8x8_t)v145;
                        if (*(_QWORD *)&prime == 1)
                        {
                          prime = (int8x8_t)2;
                        }
                        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                        {
                          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                          v134 = (int8x8_t)__p[1];
                        }
                        if (*(_QWORD *)&prime > *(_QWORD *)&v134)
                          goto LABEL_329;
                        if (*(_QWORD *)&prime >= *(_QWORD *)&v134)
                          goto LABEL_203;
                        v154 = vcvtps_u32_f32((float)*((unint64_t *)&v220 + 1) / v221);
                        if (*(_QWORD *)&v134 < 3uLL
                          || (v155 = (uint8x8_t)vcnt_s8(v134), v155.i16[0] = vaddlv_u8(v155), v155.u32[0] > 1uLL))
                        {
                          v154 = std::__next_prime(v154);
                        }
                        else
                        {
                          v156 = 1 << -(char)__clz(v154 - 1);
                          if (v154 >= 2)
                            v154 = v156;
                        }
                        if (*(_QWORD *)&prime <= v154)
                          prime = (int8x8_t)v154;
                        if (*(_QWORD *)&prime >= *(_QWORD *)&v134)
                        {
                          v134 = (int8x8_t)__p[1];
                          goto LABEL_203;
                        }
                        if (prime)
                        {
LABEL_329:
                          if (*(_QWORD *)&prime >> 61)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v148 = operator new(8 * *(_QWORD *)&prime);
                          v149 = __p[0];
                          __p[0] = v148;
                          if (v149)
                            operator delete(v149);
                          v150 = 0;
                          __p[1] = (void *)prime;
                          do
                            *((_QWORD *)__p[0] + v150++) = 0;
                          while (*(_QWORD *)&prime != v150);
                          v151 = (_QWORD **)v220;
                          if ((_QWORD)v220)
                          {
                            v152 = *(_QWORD *)(v220 + 8);
                            v153 = (uint8x8_t)vcnt_s8(prime);
                            v153.i16[0] = vaddlv_u8(v153);
                            if (v153.u32[0] > 1uLL)
                            {
                              if (v152 >= *(_QWORD *)&prime)
                                v152 %= *(_QWORD *)&prime;
                            }
                            else
                            {
                              v152 &= *(_QWORD *)&prime - 1;
                            }
                            *((_QWORD *)__p[0] + v152) = &v220;
                            for (k = *v151; k; v152 = v158)
                            {
                              v158 = k[1];
                              if (v153.u32[0] > 1uLL)
                              {
                                if (v158 >= *(_QWORD *)&prime)
                                  v158 %= *(_QWORD *)&prime;
                              }
                              else
                              {
                                v158 &= *(_QWORD *)&prime - 1;
                              }
                              if (v158 != v152)
                              {
                                if (!*((_QWORD *)__p[0] + v158))
                                {
                                  *((_QWORD *)__p[0] + v158) = v151;
                                  goto LABEL_199;
                                }
                                *v151 = (_QWORD *)*k;
                                *k = **((_QWORD **)__p[0] + v158);
                                **((_QWORD **)__p[0] + v158) = k;
                                k = v151;
                              }
                              v158 = v152;
LABEL_199:
                              v151 = (_QWORD **)k;
                              k = (_QWORD *)*k;
                            }
                          }
                          v134 = prime;
                        }
                        else
                        {
                          v164 = __p[0];
                          __p[0] = 0;
                          if (v164)
                            operator delete(v164);
                          v134 = 0;
                          __p[1] = 0;
                        }
                      }
LABEL_203:
                      v159 = v130[1];
                      v160 = (uint8x8_t)vcnt_s8(v134);
                      v160.i16[0] = vaddlv_u8(v160);
                      if (v160.u32[0] > 1uLL)
                      {
                        if (v159 >= *(_QWORD *)&v134)
                          v159 %= *(_QWORD *)&v134;
                      }
                      else
                      {
                        v159 &= *(_QWORD *)&v134 - 1;
                      }
                      v161 = __p[0];
                      v162 = (_QWORD *)*((_QWORD *)__p[0] + v159);
                      if (v162)
                      {
                        *v130 = *v162;
                      }
                      else
                      {
                        *v130 = v220;
                        *(_QWORD *)&v220 = v130;
                        v161[v159] = &v220;
                        if (!*v130)
                          goto LABEL_216;
                        v163 = *(_QWORD *)(*v130 + 8);
                        if (v160.u32[0] > 1uLL)
                        {
                          if (v163 >= *(_QWORD *)&v134)
                            v163 %= *(_QWORD *)&v134;
                        }
                        else
                        {
                          v163 &= *(_QWORD *)&v134 - 1;
                        }
                        v162 = (char *)__p[0] + 8 * v163;
                      }
                      *v162 = v130;
LABEL_216:
                      ++*((_QWORD *)&v220 + 1);
                      *(_QWORD *)buf = 0;
LABEL_217:
                      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
                      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v227.__r_.__value_.__l.__data_);
                      v15 = v217;
                      goto LABEL_220;
                    }
LABEL_233:
                    *(_QWORD *)buf = &v225;
                    std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                  }
                  v225 = 0uLL;
                  HALS_System::GetInstance(&v227, 0, (uint64_t *)&v225);
                  *(_QWORD *)buf = MEMORY[0x1E0CFFC30] + 16;
                  *(_QWORD *)&buf[8] = 0;
                  MEMORY[0x1B5E4FF8C](&buf[16]);
                  v237 = 0;
                  v235 = 0u;
                  v236 = 0u;
                  v238 = 1;
                  v239 = 0;
                  v240 = 0;
                  v242 = 0;
                  v243 = 0;
                  v241 = 0;
                  memset(&v244, 0, sizeof(v244));
                  DSPGraph::Interpreter::compileText();
                  v165 = v228[0];
                  if (v228[0])
                  {
                    v166 = (_QWORD *)operator new();
                    v167 = v228[0];
                    *v166 = &off_1E697F7A0;
                    v166[1] = 0;
                    v166[2] = 0;
                    v166[3] = v167;
                  }
                  else
                  {
                    v166 = 0;
                  }
                  v228[0] = 0;
                  v168 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
                  *(_QWORD *)v15 = v165;
                  *((_QWORD *)v15 + 1) = v166;
                  if (v168)
                  {
                    p_shared_owners = (unint64_t *)&v168->__shared_owners_;
                    do
                      v170 = __ldaxr(p_shared_owners);
                    while (__stlxr(v170 - 1, p_shared_owners));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                      std::__shared_weak_count::__release_weak(v168);
                    }
                  }
                  v171 = v228[0];
                  v228[0] = 0;
                  if (v171)
                    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
                  cf[0] = &v244;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
                  DSPGraph::Graph::setSliceDuration();
                  v172 = *(const __CFDictionary **)(v218 + 32);
                  if (v172)
                    DSPGraph::Graph::setAUStrip(*(DSPGraph::Graph **)v15, v172);
                  v173 = *(const __CFDictionary **)(v218 + 48);
                  if (v173)
                    DSPGraph::Graph::setPropertyStrip(*(DSPGraph::Graph **)v15, v173);
                  v174 = *(const __CFArray **)(v218 + 56);
                  if (v174 && *(_QWORD *)v15)
                  {
                    if (*(_BYTE *)(*(_QWORD *)v15 + 762))
                    {
                      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(v244.__r_.__value_.__l.__data_) = 136315394;
                        *(std::string::size_type *)((char *)v244.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOStreamDSP.cpp";
                        WORD2(v244.__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&v244.__r_.__value_.__r.__words[1] + 6) = 213;
                        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetGraphInitializationProperties() should not be called for initialized graph", (uint8_t *)&v244, 0x12u);
                      }
                    }
                    else
                    {
                      v175 = CFArrayGetCount(*(CFArrayRef *)(v218 + 56));
                      v176 = *(const __CFArray **)(v218 + 56);
                      if (v176)
                        v177 = CFArrayGetCount(*(CFArrayRef *)(v218 + 56));
                      else
                        v177 = 0;
                      if (v175)
                      {
                        for (m = 0; v175 != m; ++m)
                        {
                          if (v174 == v176 && v177 == m)
                            break;
                          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)cf, v174, m);
                          v179 = (const __CFDictionary *)cf[0];
                          if (!cf[0])
                            goto LABEL_321;
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v244, "ID");
                          Value = (const __CFNumber *)CFDictionaryGetValue(v179, v244.__r_.__value_.__l.__data_);
                          if (v244.__r_.__value_.__r.__words[0])
                            CFRelease(v244.__r_.__value_.__l.__data_);
                          if (!Value)
                            goto LABEL_325;
                          v181 = applesauce::CF::convert_to<unsigned int,0>(Value);
                          v182 = (const __CFDictionary *)cf[0];
                          if (!cf[0])
                            goto LABEL_321;
                          v183 = v181;
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v244, "data");
                          v184 = CFDictionaryContainsKey(v182, v244.__r_.__value_.__l.__data_);
                          if (v244.__r_.__value_.__r.__words[0])
                            CFRelease(v244.__r_.__value_.__l.__data_);
                          if (v184)
                          {
                            v185 = (const __CFDictionary *)cf[0];
                            if (!cf[0])
                              goto LABEL_321;
                            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v244, "data");
                            v186 = CFDictionaryGetValue(v185, v244.__r_.__value_.__l.__data_);
                            if (v244.__r_.__value_.__r.__words[0])
                              CFRelease(v244.__r_.__value_.__l.__data_);
                            if (!v186)
                              goto LABEL_325;
                            CFRetain(v186);
                            applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v244, v186);
                            v187 = (const void *)v244.__r_.__value_.__r.__words[0];
                            if (!v244.__r_.__value_.__r.__words[0])
                              goto LABEL_321;
                            TypeID = CFDataGetTypeID();
                            if (TypeID != CFGetTypeID(v187))
                            {
                              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::runtime_error::runtime_error(exception, "Could not convert");
                              goto LABEL_326;
                            }
                            BytePtr = CFDataGetBytePtr((CFDataRef)v187);
                            Length = CFDataGetLength((CFDataRef)v187);
                            v191 = Length;
                            if (Length)
                            {
                              if (Length < 0)
                                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                              v192 = operator new(Length);
                              memmove(v192, BytePtr, v191);
                              HALS_IOStreamDSP::SetDSPProperty(v217, v183, v191, v192);
                              operator delete(v192);
                            }
                            else
                            {
                              HALS_IOStreamDSP::SetDSPProperty(v217, v183, 0, 0);
                            }
                            if (v244.__r_.__value_.__r.__words[0])
                              CFRelease(v244.__r_.__value_.__l.__data_);
                            v15 = v217;
                          }
                          else
                          {
                            v193 = (const __CFDictionary *)cf[0];
                            if (!cf[0])
                              goto LABEL_321;
                            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v244, "cfobject");
                            v194 = CFDictionaryContainsKey(v193, v244.__r_.__value_.__l.__data_);
                            v15 = v217;
                            if (v244.__r_.__value_.__r.__words[0])
                              CFRelease(v244.__r_.__value_.__l.__data_);
                            if (v194)
                            {
                              if (!cf[0])
                              {
LABEL_321:
                                v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v209, "Could not construct");
                                __cxa_throw(v209, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                              }
                              v195 = applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)cf[0], "cfobject");
                              if (!v195)
                              {
LABEL_325:
                                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(exception, "Could not find item");
LABEL_326:
                                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                              }
                              v196 = v195;
                              CFRetain(v195);
                              v244.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
                              HALS_IOStreamDSP::SetDSPProperty(v217, v183, 8, &v244);
                              CFRelease(v196);
                            }
                          }
                          if (cf[0])
                            CFRelease(cf[0]);
                        }
                      }
                    }
                  }
                  DSPGraph::Graph::configure(*(DSPGraph::Graph **)v15);
                  DSPGraph::Graph::initialize(*(DSPGraph::Graph **)v15);
                  v197 = operator new();
                  MEMORY[0x1B5E4FD10](v197, v15);
                  v198 = *((_QWORD *)v15 + 2);
                  *((_QWORD *)v15 + 2) = v197;
                  if (v198)
                    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
                  MEMORY[0x1B5E4FF80](buf);
                  size = (std::__shared_weak_count *)v227.__r_.__value_.__l.__size_;
                  LODWORD(v5) = v210;
                  if (v227.__r_.__value_.__l.__size_)
                  {
                    v200 = (unint64_t *)(v227.__r_.__value_.__l.__size_ + 8);
                    do
                      v201 = __ldaxr(v200);
                    while (__stlxr(v201 - 1, v200));
                    if (!v201)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
LABEL_299:
                  LODWORD(v7) = v212;
                  v202 = *(_OWORD *)(v211 + 96);
                  *(_OWORD *)(v211 + 40) = *(_OWORD *)(v211 + 80);
                  *(_OWORD *)(v211 + 56) = v202;
                  *(_QWORD *)(v211 + 72) = *(_QWORD *)(v211 + 112);
                  v203 = *(_DWORD *)(v218 + 64);
                  if (v203)
                  {
                    v204 = *(_DWORD *)(v211 + 52);
                    if ((v204 & 0x20) != 0)
                    {
                      v205 = 1;
                    }
                    else
                    {
                      v205 = *(_DWORD *)(v211 + 68);
                      if (!v205)
                      {
                        v206 = (*(_DWORD *)(v211 + 72) + 7) >> 3;
LABEL_305:
                        *(_DWORD *)(v211 + 68) = v203;
                        v207 = v206 * v203;
                        *(_DWORD *)(v211 + 60) = 1;
                        *(_DWORD *)(v211 + 64) = v207;
                        *(_DWORD *)(v211 + 52) = v204 & 0xFFFFFFDF;
                        *(_DWORD *)(v211 + 56) = v207;
                        LODWORD(v7) = v212;
                        goto LABEL_306;
                      }
                    }
                    v206 = *(_DWORD *)(v211 + 64) / v205;
                    goto LABEL_305;
                  }
LABEL_306:
                  *(_BYTE *)(*(_QWORD *)(v216[4] + 8) + 24) = v5 < v7;
                  return;
                }
                v103 = v89 - 0x3333333333333330 * ((uint64_t)(v216[8] - v216[7]) >> 3);
              }
              else
              {
                v92 = v88 - v91;
                v93 = *((_QWORD *)v15 + 23);
                if (v88 - v91 > (v93 - v90) >> 4)
                {
                  if (v88 >> 60)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v94 = v93 - v89;
                  if (v94 >> 3 > v88)
                    v88 = v94 >> 3;
                  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
                    v95 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v95 = v88;
                  v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v95);
                  v97 = &v96[16 * v91];
                  v99 = &v96[16 * v98];
                  bzero(v97, 16 * v92);
                  v100 = &v97[16 * v92];
                  v102 = (char *)*((_QWORD *)v15 + 21);
                  v101 = (char *)*((_QWORD *)v15 + 22);
                  if (v101 != v102)
                  {
                    do
                    {
                      *((_OWORD *)v97 - 1) = *((_OWORD *)v101 - 1);
                      v97 -= 16;
                      v101 -= 16;
                    }
                    while (v101 != v102);
                    v101 = (char *)*((_QWORD *)v15 + 21);
                  }
                  *((_QWORD *)v15 + 21) = v97;
                  *((_QWORD *)v15 + 22) = v100;
                  *((_QWORD *)v15 + 23) = v99;
                  if (v101)
                    operator delete(v101);
                  goto LABEL_106;
                }
                bzero(*((void **)v15 + 22), 16 * v92);
                v103 = v90 + 16 * v92;
              }
              *((_QWORD *)v15 + 22) = v103;
              goto LABEL_106;
            }
            bzero(*((void **)v15 + 10), 80 * ((80 * v74 - 80) / 0x50) + 80);
            v87 = v72 + 80 * ((80 * v74 - 80) / 0x50) + 80;
          }
          *((_QWORD *)v15 + 10) = v87;
          goto LABEL_89;
        }
        v65 = *(_DWORD **)v214;
        v66 = *(_DWORD *)(*(_QWORD *)v214 + 12);
        if ((v66 & 0x20) != 0)
        {
          v67 = 1;
        }
        else
        {
          v67 = v65[7];
          if (!v67)
          {
            v68 = (v65[8] + 7) >> 3;
LABEL_70:
            v65[7] = v64;
            v69 = v68 * v64;
            v65[5] = 1;
            v65[6] = v69;
            v65[3] = v66 & 0xFFFFFFDF;
            v65[4] = v69;
            v18 = v216;
            v19 = (__int128 *)v216[7];
            goto LABEL_71;
          }
        }
        v68 = v65[6] / v67;
        goto LABEL_70;
      }
      v50 = v5;
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v57 = *(std::__shared_weak_count **)&buf[8];
      v58 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v59 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      LODWORD(v5) = v50;
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        goto LABEL_299;
      v61 = pthread_self();
      v62 = pthread_mach_thread_np(v61);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v62;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOStreamDSP.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 152;
      _os_log_error_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DSPGraph ABI runtime/compile-time mismatch", buf, 0x18u);
    }
    else
    {
      v50 = v5;
      v51 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = *((_QWORD *)v15 + 2);
      *((_QWORD *)v15 + 2) = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v56 = *((_QWORD *)v15 + 3);
      v55 = (uint64_t *)((char *)v15 + 24);
      std::vector<HALS_IOStreamDSP::InputChannelData>::__base_destruct_at_end[abi:ne180100](v55, v56);
      std::vector<std::vector<std::byte>>::__clear[abi:ne180100](v55 + 15);
      v55[7] = v55[6];
      v55[4] = v55[3];
      v55[19] = v55[18];
    }
    LODWORD(v5) = v50;
    goto LABEL_299;
  }
}

void sub_1B5B58EBC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  const void *v3;

  if (a2)
  {
    v3 = *(const void **)(v2 - 144);
    if (v3)
      CFRelease(v3);
    JUMPOUT(0x1B5B58FA4);
  }
  _Unwind_Resume(a1);
}

void sub_1B5B58EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B5B58F10()
{
  uint64_t *v0;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v0);
  JUMPOUT(0x1B5B58FDCLL);
}

void sub_1B5B58F1C()
{
  JUMPOUT(0x1B5B58F48);
}

void sub_1B5B58F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a48);
  if (a43 < 0)
    operator delete(__p);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a44);
  if (*(char *)(v48 - 121) < 0)
    operator delete(*(void **)(v48 - 144));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a46);
  *(_QWORD *)(v48 - 144) = &a35;
  std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 144));
  JUMPOUT(0x1B5B58F88);
}

void sub_1B5B58F9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5B58FAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,ca::concurrent::details::service_thread ***a55)
{
  uint64_t *v55;

  if (a55)
  {
    HALB_CaptureFile::~HALB_CaptureFile(a55);
    MEMORY[0x1B5E50688]();
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](v55);
  JUMPOUT(0x1B5B58FDCLL);
}

_QWORD *__copy_helper_block_e8_56c64_ZTSNSt3__16vectorIN2CA17StreamDescriptionENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
}

void __destroy_helper_block_e8_56c64_ZTSNSt3__16vectorIN2CA17StreamDescriptionENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK14HALS_IOEngine214GetStartSampleEv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1304))(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN14HALS_IOEngine214SetStartSampleEjN4AMCP11Index_GroupIxNS0_9DirectionEEEjb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 1296))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 60), *(unsigned __int8 *)(a1 + 64));
}

uint64_t ___ZNK14HALS_IOEngine223HasAnyNonMixableFormatsEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = v1 + 48;
    do
    {
      v5 = v2;
      v6 = (uint64_t *)(v4 + 24 * v3);
      v7 = *v6;
      v8 = v6[1];
      if (v7 != v8)
      {
        v9 = v7;
        do
        {
          v10 = v7;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)v10 + 128) != 1819304813 || (*(_DWORD *)(*(_QWORD *)v10 + 132) & 0x40) != 0)
            {
              v12 = 1;
              goto LABEL_15;
            }
            v10 += 8;
          }
          while (v10 != v8);
          v9 += 8;
        }
        while (v9 != v8);
      }
      v2 = 1;
      v3 = 1;
    }
    while ((v5 & 1) == 0);
    v12 = 0;
LABEL_15:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v12;
  }
  return result;
}

uint64_t ___ZNK14HALS_IOEngine239CalculateBufferByteSizeForStreamAtIndexEbjj_block_invoke(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(result + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 56) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      v9 = 0;
    }
    else
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_DWORD **)(v3 + 8 * v2);
      v7 = v6[12];
      v8 = v6[14];
      v9 = v6[16] * *(_DWORD *)(result + 52);
      if (v7 != 1819304813)
        v9 = v8;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v9;
  }
  return result;
}

__n128 __Block_byref_object_copy__52_9507(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 ___ZNK14HALS_IOEngine233GetPhysicalFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
      v7 = *(_QWORD *)(v3 + 8 * v2);
      result = *(__n128 *)(v7 + 120);
      v9 = *(_OWORD *)(v7 + 136);
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 152);
      *(__n128 *)v6 = result;
      *(_OWORD *)(v6 + 16) = v9;
    }
  }
  return result;
}

__n128 ___ZNK14HALS_IOEngine232GetVirtualFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(a1 + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
      v7 = *(_QWORD *)(v3 + 8 * v2);
      result = *(__n128 *)(v7 + 40);
      v9 = *(_OWORD *)(v7 + 56);
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 72);
      *(__n128 *)v6 = result;
      *(_OWORD *)(v6 + 16) = v9;
    }
  }
  return result;
}

uint64_t ___ZNK14HALS_IOEngine221IsStreamAtIndexActiveEbj_block_invoke(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
  {
    v2 = *(unsigned int *)(result + 48);
    v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 52) + 48);
    v3 = *v4;
    v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      v6 = 0;
    }
    else
    {
      if (v5 <= v2)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v6 = *(_BYTE *)(*(_QWORD *)(v3 + 8 * v2) + 32) != 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v6;
  }
  return result;
}

void ___ZNK14HALS_IOEngine231GetNumberStreamsVisibleToClientEbj_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  int v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 768);
  if (v1)
  {
    if (*(_BYTE *)(a1 + 52))
    {
      v3 = *(_DWORD *)(a1 + 48);
      v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v1);
      v6 = (HALS_ObjectMap *)v4;
      if (!v4)
        goto LABEL_17;
      v7 = *(_DWORD *)(v4 + 20);
      if (v7 <= 1701078389)
      {
        v8 = v7 == 1633773415;
        v9 = 1633969526;
      }
      else
      {
        v8 = v7 == 1701078390 || v7 == 1701733488;
        v9 = 1919182198;
      }
      if (!v8 && v7 != v9)
      {
        v15 = *(_DWORD *)(v4 + 24);
        if (v7 == v15)
          goto LABEL_17;
        if (v15 <= 1701078389)
        {
          v16 = v15 == 1633773415;
          v17 = 1633969526;
        }
        else
        {
          v16 = v15 == 1701078390 || v15 == 1701733488;
          v17 = 1919182198;
        }
        if (!v16 && v15 != v17)
          goto LABEL_17;
      }
      if (!HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v4 + 440), v3))
      {
        v12 = (uint64_t *)v1[9];
        v13 = (uint64_t *)v1[10];
        if (v12 == v13)
        {
          LODWORD(v10) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            v14 = *v12++;
            if (!*(_BYTE *)(v14 + 21))
              LODWORD(v10) = v10 + 1;
          }
          while (v12 != v13);
        }
      }
      else
      {
LABEL_17:
        v10 = (v1[10] - v1[9]) >> 3;
      }
      HALS_ObjectMap::ReleaseObject(v6, v5);
    }
    else
    {
      v10 = (v1[7] - v1[6]) >> 3;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;
  }
}

void sub_1B5B59480(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine238TransitionContextFromCatchupToRealtimeEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 1272))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

uint64_t ___ZNK14HALS_IOEngine213IsClockStableEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 40);
  return result;
}

uint64_t ___ZNK14HALS_IOEngine217GetClockAlgorithmEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 36);
  return result;
}

uint64_t ___ZNK14HALS_IOEngine210GetLatencyEb_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1
                                                                                + 4
                                                                                * *(unsigned __int8 *)(result + 48)
                                                                                + 28);
  return result;
}

uint64_t ___ZNK14HALS_IOEngine222GetRingBufferFrameSizeEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 768);
  if (v1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 16);
  return result;
}

double ___ZNK14HALS_IOEngine220GetNominalSampleRateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 768);
  if (v1)
  {
    result = *(double *)(v1 + 8);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

__n128 __Block_byref_object_copy__9522(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__9523(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN14HALS_IOEngine219HogModeOwnerChangedEi_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 888))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

_QWORD *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  int64_t v8;
  _QWORD *result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
  result = *(_QWORD **)a6;
  if (v8 >= 1)
  {
    if (a5)
    {
      if (v8 >= (unint64_t)a5)
        v10 = a5;
      else
        v10 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
      v8 -= v10;
      v11 = (-1 << (a5 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5);
      *result = *result & ~v11 | *a4 & v11;
      *(_DWORD *)(a6 + 8) = (*(_DWORD *)(a6 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0)
      v12 = v8;
    else
      v12 = v8 + 63;
    v13 = v12 >> 6;
    result -= v12 >> 6;
    *(_QWORD *)a6 = result;
    v14 = &a4[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, &a4[-(v12 >> 6)], 8 * v13);
      result = *(_QWORD **)a6;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      v15 = -1 << (((_BYTE)v13 << 6) - v8);
      v16 = *(v14 - 1) & v15;
      v17 = *--result;
      *(_QWORD *)a6 = result;
      *result = v17 & ~v15 | v16;
      *(_DWORD *)(a6 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a6 + 8);
  return result;
}

uint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t result, uint64_t a2, unsigned int a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v6 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
  if (v6 <= 0)
  {
    v11 = *(unint64_t **)a6;
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
  }
  else
  {
    if (a5)
    {
      if (v6 >= (unint64_t)a5)
        v7 = a5;
      else
        v7 = a5 - (unint64_t)a3 + 8 * ((_QWORD)a4 - a2);
      v6 -= v7;
      v8 = (-1 << (a5 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5) & *a4;
      v9 = *(unsigned int *)(a6 + 8);
      if (v7 >= v9)
        v10 = *(unsigned int *)(a6 + 8);
      else
        v10 = v7;
      v11 = *(unint64_t **)a6;
      if (v10)
      {
        v12 = v8 >> (a5 - v9);
        if (v9 > a5)
          v12 = v8 << (v9 - a5);
        *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a6 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        v13 = *--v11;
        *(_QWORD *)a6 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a6 + 8) = v9;
        *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a5 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a6 + 8);
      v11 = *(unint64_t **)a6;
    }
    v14 = 64 - v9;
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      v16 = *v11;
      do
      {
        v17 = v6;
        v19 = *--a4;
        v18 = v19;
        *v11 = v16 & ~v15 | (v19 >> v14);
        v20 = *--v11;
        v16 = v20 & v15 | (v18 << v9);
        *v11 = v16;
        v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(_QWORD *)a6 = v11;
    }
    if (v6 >= 1)
    {
      v21 = *(a4 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9)
        v22 = v9;
      else
        v22 = v6;
      *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        v23 = *--v11;
        *(_QWORD *)a6 = v11;
        *(_DWORD *)(a6 + 8) = (v22 - v6) & 0x3F;
        *v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(_QWORD *)result = v11;
  *(_DWORD *)(result + 8) = v9;
  return result;
}

__n128 __Block_byref_object_copy__17(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK14HALS_IOEngine215CopyAllContextsERNSt3__16vectorIP14HALS_IOContextNS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 880))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void sub_1B5B59940(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN14HALS_IOEngine217AssessAllContextsEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 888))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  _QWORD v5[6];
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 888))(v2, *(_QWORD *)(a1[4] + 8) + 40);
  if (*(_DWORD *)(v2 + 760))
  {
    --*(_DWORD *)(v2 + 760);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315394;
    v7 = "HALS_IOEngine2.cpp";
    v8 = 1024;
    v9 = 1154;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::ResumeAllContexts: extra resume", (uint8_t *)&v6, 0x12u);
  }
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_13;
  v5[3] = &unk_1E698DF68;
  v5[4] = a1[4];
  v5[5] = v2;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v5);
  v3 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  v4 = atomic_load((unsigned __int8 *)(v2 + 416));
  if ((v4 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 417));
  dispatch_async(*(dispatch_queue_t *)(v2 + 384), v3);
}

uint64_t ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_13(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v2 = *(uint64_t **)(v1 + 40);
  if (v2 != *(uint64_t **)(v1 + 48))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    do
    {
      v5 = *v2++;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 96) + 200))(*(_QWORD *)(v5 + 96), *(unsigned int *)(v4 + 16));
    }
    while (v2 != *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 48));
  }
  return result;
}

void ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  _QWORD block[7];

  v2 = a1[6];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 888))(v2, *(_QWORD *)(a1[4] + 8) + 40);
  ++*(_DWORD *)(v2 + 760);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_2;
  block[3] = &unk_1E698DF18;
  block[4] = a1[4];
  block[5] = v2;
  block[6] = a1[7];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  v3 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  v4 = atomic_load((unsigned __int8 *)(v2 + 416));
  if ((v4 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 417));
  dispatch_async(*(dispatch_queue_t *)(v2 + 384), v3);
}

void sub_1B5B59C54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;

  v1 = *(_QWORD *)(a1[4] + 8);
  v2 = *(uint64_t **)(v1 + 40);
  if (v2 != *(uint64_t **)(v1 + 48))
  {
    v4 = a1[5];
    do
    {
      v5 = *v2;
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(*v2 + 96) + 192))(*(_QWORD *)(*v2 + 96), *(unsigned int *)(v4 + 16)))
      {
        v6 = a1[6];
        v7 = *(_DWORD *)(v5 + 16);
        v9 = *(_DWORD **)(v6 + 8);
        v8 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v9 >= v8)
        {
          v11 = *(_DWORD **)v6;
          v12 = ((uint64_t)v9 - *(_QWORD *)v6) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
            v11 = *(_DWORD **)v6;
            v9 = *(_DWORD **)(v6 + 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = (_DWORD *)(v15 + 4 * v12);
          *v17 = v7;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *(_QWORD *)v6 = v17;
          *(_QWORD *)(v6 + 8) = v10;
          *(_QWORD *)(v6 + 16) = v15 + 4 * v16;
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        *(_QWORD *)(v6 + 8) = v10;
      }
      ++v2;
    }
    while (v2 != *(uint64_t **)(*(_QWORD *)(a1[4] + 8) + 48));
  }
}

uint64_t ___ZN14HALS_IOEngine219UnregisterIOContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 920))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t ___ZN14HALS_IOEngine217RegisterIOContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 912))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void HALS_IOEngine2::HALS_IOEngine2(HALS_IOEngine2 *this, HALS_IODevice *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v7;
  HALB_Mutex **v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const __CFString *v15;
  unsigned int *v16;
  int Length;
  char *v18;
  size_t v19;
  HALB_Mutex *v20;
  AMCP::Utility::Dispatch_Queue *v21;
  int v22;
  char *v23;
  uint64_t v24;
  AMCP::Utility::Dispatch_Queue *v25;
  char *v26;
  char *v27;
  const BOOL *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *exception;
  _OWORD *v42;
  AMCP::Utility::Dispatch_Queue **v43;
  AMCP::Utility::Dispatch_Queue **v44;
  void *__dst[2];
  char v46;
  _QWORD v47[2];
  uint64_t v48;
  _QWORD v49[10];
  char v50;
  uint64_t v51;
  char v52[4];
  const __CFString *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  HALS_IOEngine::HALS_IOEngine(this, a2, a3, a4, a5);
  *(_QWORD *)v7 = off_1E698D988;
  *(_QWORD *)(v7 + 704) = a2;
  v8 = (HALB_Mutex **)(v7 + 712);
  v43 = (AMCP::Utility::Dispatch_Queue **)(v7 + 728);
  v44 = (AMCP::Utility::Dispatch_Queue **)(v7 + 720);
  *(_OWORD *)(v7 + 712) = 0u;
  *(_OWORD *)(v7 + 728) = 0u;
  *(_OWORD *)(v7 + 744) = 0u;
  *(_DWORD *)(v7 + 760) = 0;
  *(_QWORD *)(v7 + 1104) = 0;
  *(_OWORD *)(v7 + 1056) = 0u;
  *(_QWORD *)(v7 + 1069) = 0;
  v42 = (_OWORD *)(v7 + 1080);
  *(_OWORD *)(v7 + 1080) = 0u;
  *(_DWORD *)(v7 + 1096) = 0;
  *(_OWORD *)(v7 + 764) = 0u;
  *(_OWORD *)(v7 + 780) = 0u;
  *(_OWORD *)(v7 + 796) = 0u;
  *(_OWORD *)(v7 + 812) = 0u;
  *(_OWORD *)(v7 + 828) = 0u;
  *(_OWORD *)(v7 + 844) = 0u;
  *(_OWORD *)(v7 + 860) = 0u;
  *(_OWORD *)(v7 + 876) = 0u;
  *(_OWORD *)(v7 + 892) = 0u;
  *(_OWORD *)(v7 + 908) = 0u;
  *(_OWORD *)(v7 + 924) = 0u;
  *(_OWORD *)(v7 + 940) = 0u;
  *(_OWORD *)(v7 + 956) = 0u;
  *(_OWORD *)(v7 + 972) = 0u;
  *(_OWORD *)(v7 + 988) = 0u;
  *(_OWORD *)(v7 + 1004) = 0u;
  *(_OWORD *)(v7 + 1020) = 0u;
  *(_OWORD *)(v7 + 1036) = 0u;
  if (g_static_start_options != 1)
  {
    v9 = operator new(0x58uLL);
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = &off_1E698E7C8;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *v9 = &off_1E698E778;
    *((_OWORD *)v9 + 3) = 0u;
    v9[10] = 0;
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
      v10 = AudioIssueDetectorLibraryLoader(void)::libSym(1, v9 + 8);
    else
      v10 = 0;
    v9[7] = v10;
    *(_QWORD *)&v11 = v9 + 3;
    *((_QWORD *)&v11 + 1) = v9;
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    *((_OWORD *)this + 3) = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (const __CFString *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)a2 + 208))(a2);
  v53 = v15;
  v54 = 1;
  if (v15)
  {
    Length = CFStringGetLength(v15);
    v15 = v53;
  }
  else
  {
    Length = 0;
  }
  *(_DWORD *)v52 = 256;
  CACFString::GetCString(v15, (__CFString *)((char *)this + 796), v52, v16);
  v18 = (char *)operator new[]();
  v19 = (Length + 32);
  snprintf(v18, v19, "com.apple.audio.engine.%s", (const char *)this + 796);
  v20 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v20);
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](v8, v20);
  snprintf(v18, v19, "com.apple.audio.engine.event.%s", (const char *)this + 796);
  v21 = (AMCP::Utility::Dispatch_Queue *)operator new();
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)v21, v18);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v44, v21);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"IOEngine2.Activation ", 21);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v49);
  v22 = v58;
  v23 = *(char **)__p;
  v24 = operator new();
  v25 = (AMCP::Utility::Dispatch_Queue *)v24;
  if (v22 >= 0)
    v26 = __p;
  else
    v26 = v23;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v24, v26);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v43, v25);
  if (v58 < 0)
    operator delete(*(void **)__p);
  if (!*v43)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "HALS_IOEngine2.cpp";
      v56 = 1024;
      v57 = 1029;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOEngine2::HALS_IOEngine2: failed to create the stream activation queue", __p, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  std::stringbuf::str[abi:ne180100]((uint64_t)v49, (__int128 *)__p);
  if (v58 < 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"IOEngine2 IOC Serialization Queue ", 34);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v49);
  if (v46 >= 0)
    v27 = (char *)__dst;
  else
    v27 = (char *)__dst[0];
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)__p, v27);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 48, *(dispatch_object_t *)__p);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p);
  if (v46 < 0)
    operator delete(__dst[0]);
  if (AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v28))
  {
    v29 = operator new(0x58uLL);
    v29[1] = 0;
    v29[2] = 0;
    *v29 = &off_1E698E7F8;
    v29[3] = &off_1E697F5C0;
    *((_BYTE *)v29 + 32) = 0;
    *((_BYTE *)v29 + 40) = 0;
    v30 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 320))(this);
    v31 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 216))(v30);
    std::string::basic_string[abi:ne180100]<0>(v29 + 6, v31);
    v29[9] = this;
    v32 = *((_DWORD *)this + 4);
    v33 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(_QWORD *)this + 320))(this);
    v34 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 216))(v33);
    v35 = operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, v34);
    HALS_IOClock::HALS_IOClock(v35, 0, v32 + 0xFFFF, (__int128 *)__p);
    v29[10] = v35;
    if (v58 < 0)
      operator delete(*(void **)__p);
    *(_QWORD *)&v36 = v29 + 3;
    *((_QWORD *)&v36 + 1) = v29;
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 136);
    *v42 = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v47[0] = *MEMORY[0x1E0DE4F50];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v47 + *(_QWORD *)(v47[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v48 = v40;
  v49[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v50 < 0)
    operator delete((void *)v49[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&v51);
  MEMORY[0x1B5E50664](v18, 0x1000C8077774924);
  CACFString::~CACFString((CACFString *)&v53);
}

void sub_1B5B5A424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMCP::Utility::Dispatch_Queue **a12, AMCP::Utility::Dispatch_Queue **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t *v60;
  HALB_Mutex **v61;
  void **v62;
  std::__shared_weak_count *v63;
  void **v64;
  std::__shared_weak_count_vtbl *v66;
  void *v67;
  void *v68;
  uint64_t v69;

  v66 = (std::__shared_weak_count_vtbl *)*v64;
  if (*v64)
  {
    v63[3].__vftable = v66;
    operator delete(v66);
  }
  v67 = *v62;
  if (*v62)
  {
    v63[1].__shared_weak_owners_ = (uint64_t)v67;
    operator delete(v67);
  }
  std::__shared_weak_count::~__shared_weak_count(v63);
  operator delete(v68);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a11);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v60 + 98, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v60 + 97, 0);
  v69 = v60[96];
  v60[96] = 0;
  if (v69)
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v69);
  __p = v60 + 92;
  std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](a12, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](a13, 0);
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](v61, 0);
  HALS_IOEngine::~HALS_IOEngine((HALS_IOEngine *)v60);
  _Unwind_Resume(a1);
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698E7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E698E7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::__on_zero_shared(uint64_t a1)
{
  HALS_LegacyTimebase::~HALS_LegacyTimebase((HALS_LegacyTimebase *)(a1 + 24));
}

void HALS_IOEngine2::~HALS_IOEngine2(HALS_IOEngine2 *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_1E698D988;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1080);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 98, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 97, 0);
  v2 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v2)
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v2);
  v3 = (void **)((char *)this + 736);
  std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 91, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 90, 0);
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100]((HALB_Mutex **)this + 89, 0);
  HALS_IOEngine::~HALS_IOEngine(this);
}

void ___ZN14HALS_IOEngine239ClearOutputStreamsUsedOnlyByThisContextEj_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  std::vector<int>::size_type v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<int>::pointer v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::vector<int> __p;
  std::vector<int> v20;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[96];
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 40);
    v4 = *(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48);
    v5 = (v4 >> 3);
    std::vector<int>::vector(&v20, v5);
    std::vector<int>::vector(&__p, v5);
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      v6 = 0;
      v7 = (uint64_t *)v1[92];
      v8 = (uint64_t *)v1[93];
      do
      {
        if (v7 != v8)
        {
          begin = v20.__begin_;
          v10 = __p.__begin_;
          v11 = v7;
          do
          {
            v12 = *v11;
            v13 = *(_QWORD *)(*v11 + 64);
            if (v6 < v13)
            {
              if (v13 <= v6)
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              if ((*(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * (v6 >> 6)) & (1 << v6)) != 0)
              {
                if (*(_DWORD *)(*(_QWORD *)(v12 + 32) + 16) == v3)
                  v14 = v10;
                else
                  v14 = begin;
                ++v14[v6];
              }
            }
            ++v11;
          }
          while (v11 != v8);
        }
        ++v6;
      }
      while (v6 != v5);
      v15 = 0;
      do
      {
        if (__p.__begin_[v15] == 1 && !v20.__begin_[v15])
        {
          v16 = *(_QWORD *)(v1[96] + 48);
          if (v15 >= (*(_QWORD *)(v1[96] + 56) - v16) >> 3)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v17 = *(_QWORD *)(v16 + 8 * v15);
          v18 = *(void **)(v17 + 168);
          if (v18)
            bzero(v18, *(unsigned int *)(v17 + 176));
        }
        ++v15;
      }
      while (v5 != v15);
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
}

void sub_1B5B5A8F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v21;

  if (v21)
    operator delete(v21);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B5B5A9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList(char **this, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t **v21;
  uint64_t **v22;
  char **v23;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  v5 = (uint64_t **)(a2 + 48);
  v21 = (uint64_t **)(a2 + 96);
  v23 = this;
  do
  {
    v6 = *v5;
    v7 = v5[1];
    v22 = v5;
    while (v6 != v7)
    {
      v8 = *v6;
      if (!*(_DWORD *)(*v6 + 24))
      {
        v9 = *(_QWORD *)(v8 + 472);
        if (v9)
        {
          v10 = *(_DWORD *)(v8 + 36);
          v11 = *(_DWORD *)(v8 + 64) * v10;
          v12 = *(_DWORD *)(v8 + 16);
          if (v4 >= v3)
          {
            v13 = (v4 - v2) >> 5;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 59)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((v3 - v2) >> 4 > v14)
              v14 = (v3 - v2) >> 4;
            if ((unint64_t)(v3 - v2) >= 0x7FFFFFFFFFFFFFE0)
              v15 = 0x7FFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
            {
              if (v15 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v16 = (char *)operator new(32 * v15);
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[32 * v13];
            *(_DWORD *)v17 = v12;
            *((_QWORD *)v17 + 1) = v9;
            *((_DWORD *)v17 + 4) = 0;
            *((_DWORD *)v17 + 5) = v11;
            *((_DWORD *)v17 + 6) = v10;
            if (v4 == v2)
            {
              v19 = &v16[32 * v13];
            }
            else
            {
              v18 = &v16[32 * v13];
              do
              {
                v19 = v18 - 32;
                v20 = *((_OWORD *)v4 - 1);
                *((_OWORD *)v18 - 2) = *((_OWORD *)v4 - 2);
                *((_OWORD *)v18 - 1) = v20;
                v4 -= 32;
                v18 -= 32;
              }
              while (v4 != v2);
            }
            v3 = &v16[32 * v15];
            v4 = v17 + 32;
            *v23 = v19;
            v23[1] = v17 + 32;
            v23[2] = v3;
            if (v2)
              operator delete(v2);
            v2 = v19;
            this = v23;
          }
          else
          {
            *(_DWORD *)v4 = v12;
            *((_QWORD *)v4 + 1) = v9;
            *((_DWORD *)v4 + 4) = 0;
            *((_DWORD *)v4 + 5) = v11;
            *((_DWORD *)v4 + 6) = v10;
            v4 += 32;
          }
          this[1] = v4;
        }
      }
      ++v6;
    }
    v5 = v22 + 3;
  }
  while (v22 + 3 != v21);
  return this;
}

void sub_1B5B5AB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void HALB_InstrumentedEvent_RealtimeDuration::~HALB_InstrumentedEvent_RealtimeDuration(HALB_InstrumentedEvent_RealtimeDuration *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALB_InstrumentedEvent_RealtimeDuration::getEventID(HALB_InstrumentedEvent_RealtimeDuration *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t HALB_InstrumentedEvent_RealtimeDuration::getEventIndex(HALB_InstrumentedEvent_RealtimeDuration *this)
{
  return *((_QWORD *)this + 2);
}

void HALB_RealtimeDuration_Collection::enumSubDurations(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *a1;
    v3 = a1[1];
    if (*a1 != v3)
    {
      do
      {
        v5 = *v2;
        v6 = (std::__shared_weak_count *)v2[1];
        v19 = *v2;
        v20 = v6;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
          v18 = v6;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        else
        {
          v18 = 0;
        }
        v17 = v5;
        v10 = *(_QWORD *)(a2 + 24);
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v17);
        v11 = v18;
        if (v18)
        {
          v12 = (unint64_t *)&v18->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v14 = v20;
        if (v20)
        {
          v15 = (unint64_t *)&v20->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v2 += 2;
      }
      while (v2 != v3);
    }
  }
}

void sub_1B5B5ACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t HALS_AHPManager::Activate(HALS_AHPManager *this, HALS_Object *a2)
{
  uint64_t result;
  int v4;
  _DWORD *exception;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  HALS_Object::Activate(this, a2);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 47) + 168))(*((_QWORD *)this + 47), *((unsigned int *)this + 4));
  if ((_DWORD)result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    v4 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HALS_AHPPlugIn.cpp";
      v9 = 1024;
      v10 = 80;
      v11 = 1024;
      v12 = v4;
      v13 = 2080;
      v14 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::Initialize: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

void HALS_AHPManager::~HALS_AHPManager(HALS_AHPManager *this)
{
  HALS_AHPManager::~HALS_AHPManager(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E698EC08;
  v2 = (HALB_Mutex *)*((_QWORD *)this + 41);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1B5E50688]();
  }
  v3 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 42);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1B5E50688]();
  }
  v4 = (void *)*((_QWORD *)this + 54);
  if (v4)
  {
    *((_QWORD *)this + 55) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 51);
  if (v5)
  {
    *((_QWORD *)this + 52) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 48);
  if (v6)
  {
    *((_QWORD *)this + 49) = v6;
    operator delete(v6);
  }
  HALS_AHPPlugIn::~HALS_AHPPlugIn((HALS_AHPManager *)((char *)this + 344));
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_AHPManager *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_AHPManager::_Deactivate(HALS_AHPManager *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47));
  *((_DWORD *)this + 2) = 0;
  return result;
}

uint64_t HALS_AHPManager::GetMIGDispatchQueue(HALS_AHPManager *this)
{
  return *((_QWORD *)this + 42);
}

{
  return *((_QWORD *)this + 42);
}

BOOL HALS_AHPManager::HasProperty(HALS_AHPManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v5;
  int v6;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    v5 = mSelector == 1870098020 || mSelector == 1937007734;
    v6 = 1885956452;
  }
  else
  {
    v5 = mSelector == 1650682995 || mSelector == 1668047219;
    v6 = 1869638759;
  }
  if (v5 || mSelector == v6)
    return HALS_DeviceManager::HasProperty(this, a2, a3, a4);
  else
    return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 47) + 184))(*((_QWORD *)this + 47)) != 0;
}

uint64_t HALS_AHPManager::IsPropertySettable(HALS_AHPPlugIn **this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v8;
  int v9;
  _DWORD *exception;

  if (((*((uint64_t (**)(HALS_AHPPlugIn **))*this + 11))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    v8 = mSelector == 1870098020 || mSelector == 1937007734;
    v9 = 1885956452;
  }
  else
  {
    v8 = mSelector == 1650682995 || mSelector == 1668047219;
    v9 = 1869638759;
  }
  if (v8 || mSelector == v9)
    return HALS_DeviceManager::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  else
    return HALS_AHPPlugIn::ObjectIsPropertySettable(this[47], a2, a3);
}

uint64_t HALS_AHPManager::GetPropertyDataSize(HALS_AHPPlugIn **this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector;
  BOOL v13;
  int v14;
  _DWORD *exception;

  if (((*((uint64_t (**)(HALS_AHPPlugIn **, HALS_Client *, AudioObjectPropertyAddress *, HALS_Client *))*this
         + 11))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    v13 = mSelector == 1870098020 || mSelector == 1937007734;
    v14 = 1885956452;
  }
  else
  {
    v13 = mSelector == 1650682995 || mSelector == 1668047219;
    v14 = 1869638759;
  }
  if (v13 || mSelector == v14)
    return HALS_DeviceManager::GetPropertyDataSize((HALS_DeviceManager *)this, a2, a3, a4, a5, a6);
  else
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(this[47], (uint64_t)a2, a3, a4, a5);
}

void HALS_AHPManager::GetPropertyData(HALS_AHPPlugIn **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const __CFString **a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  BOOL v18;
  int v19;
  _DWORD *exception;

  if (((*((uint64_t (**)(HALS_AHPPlugIn **, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))*this + 11))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    v18 = mSelector == 1870098020 || mSelector == 1937007734;
    v19 = 1885956452;
  }
  else
  {
    v18 = mSelector == 1650682995 || mSelector == 1668047219;
    v19 = 1869638759;
  }
  if (v18 || mSelector == v19)
  {
    HALS_DeviceManager::GetPropertyData((HALS_DeviceManager *)this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *a5 = a4;
    HALS_AHPPlugIn::ObjectGetPropertyData(this[47], a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPManager::SetPropertyData(HALS_AHPPlugIn **this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  _DWORD *exception;

  if (((*((uint64_t (**)(HALS_AHPPlugIn **, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))*this
         + 12))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  return HALS_AHPPlugIn::ObjectSetPropertyData(this[47], a2, a3, a6, a7, a4, a5);
}

void HALS_AHPManager::_CopyDeviceList(HALS_AHPManager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  unsigned int *v2;
  unsigned int *i;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  unint64_t v8;
  HALS_ObjectMap **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  HALS_ObjectMap **v15;
  char *v16;
  char *v17;
  HALS_ObjectMap *v18;

  v2 = (unsigned int *)*((_QWORD *)this + 54);
  for (i = (unsigned int *)*((_QWORD *)this + 55); v2 != i; ++v2)
  {
    v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    v7 = v5;
    if (v5)
    {
      HALS_ObjectMap::RetainObject(v5, v6);
      v9 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((uint64_t)v9 - *(_QWORD *)a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v12 = v8 - *(_QWORD *)a2;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        else
          v6 = 0;
        v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
        *v15 = v7;
        v10 = v15 + 1;
        v17 = *(char **)a2;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if (v16 != *(char **)a2)
        {
          do
          {
            v18 = (HALS_ObjectMap *)*((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = *(char **)a2;
        }
        *(_QWORD *)a2 = v15;
        *((_QWORD *)a2 + 1) = v10;
        *((_QWORD *)a2 + 2) = v14 + 8 * (_QWORD)v6;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      *((_QWORD *)a2 + 1) = v10;
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1B5B5B474(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_AHPManager::CreateObject(HALS_AHPManager *this, HALS_Object *a2, HALS_ObjectMap *a3, HALS_Client *a4)
{
  HALS_AHPManager *v6;
  int v7;
  int v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  HALB_Mutex *v12;
  HALS_Object *v13;
  int v15;
  int v16;
  HALS_Object *v17;
  HALS_Object *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  const char *v24;
  _DWORD *exception;
  _QWORD v26[5];
  int v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 == 1)
  {
    HALS_ObjectMap::RetainObject(this, a2);
    v6 = this;
  }
  else
  {
    v6 = (HALS_AHPManager *)HALS_ObjectMap::CopyObjectByObjectID(a3);
  }
  if ((int)a2 <= 1701078389)
  {
    if ((_DWORD)a2 != 1633773415 && (_DWORD)a2 != 1633969526)
    {
      if ((_DWORD)a2 == 1634956402)
      {
        v7 = *((_DWORD *)v6 + 5);
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
          {
LABEL_26:
            v9 = operator new();
            HALS_Object::HALS_Object((HALS_Object *)v9, 1634956402, 1634956402, (uint64_t)v6, v18);
            *(_DWORD *)(v9 + 48) = *((_DWORD *)v6 + 4);
            *(_BYTE *)(v9 + 52) = 0;
            *(_DWORD *)(v9 + 56) = 0;
            *(_QWORD *)v9 = off_1E69784C0;
            *(_QWORD *)(v9 + 64) = (char *)this + 344;
            goto LABEL_16;
          }
          v8 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_26;
          v8 = 1919182198;
        }
        if (v7 == v8)
          goto LABEL_26;
        v19 = *((_DWORD *)v6 + 6);
        if (v7 != v19)
        {
          if (v19 <= 1701078389)
          {
            if (v19 == 1633773415)
              goto LABEL_26;
            v20 = 1633969526;
          }
          else
          {
            if (v19 == 1701078390 || v19 == 1701733488)
              goto LABEL_26;
            v20 = 1919182198;
          }
          if (v19 == v20)
            goto LABEL_26;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
LABEL_52:
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 560947818;
        }
        *(_DWORD *)buf = 136315394;
        v29 = "HALS_AHPManager.cpp";
        v30 = 1024;
        v31 = 257;
        v23 = MEMORY[0x1E0C81028];
        v24 = "%25s:%-5d  HALS_AHPManager::CreateObject: a stream needs to be owned by a device";
LABEL_51:
        _os_log_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
        goto LABEL_52;
      }
      goto LABEL_17;
    }
LABEL_15:
    v9 = operator new();
    HALS_Device::HALS_Device((HALS_Device *)v9, a2, (uint64_t)v6, (HALS_Object *)CFSTR("temporary"), v10);
    *(_QWORD *)v9 = off_1E69780F8;
    *(_QWORD *)(v9 + 1304) = (char *)this + 344;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1701078390 || (_DWORD)a2 == 1919182198 || (_DWORD)a2 == 1701733488)
    goto LABEL_15;
LABEL_17:
  if (HALB_Info::IsSubClass(a2, 1633907820))
  {
    v15 = *((_DWORD *)v6 + 5);
    if (v15 <= 1701078389)
    {
      if (v15 == 1633773415)
        goto LABEL_30;
      v16 = 1633969526;
    }
    else
    {
      if (v15 == 1701078390 || v15 == 1701733488)
        goto LABEL_30;
      v16 = 1919182198;
    }
    if (v15 != v16)
    {
      v21 = *((_DWORD *)v6 + 6);
      if (v15 != v21)
      {
        if (v21 <= 1701078389)
        {
          if (v21 == 1633773415)
            goto LABEL_30;
          v22 = 1633969526;
        }
        else
        {
          if (v21 == 1701078390 || v21 == 1701733488)
            goto LABEL_30;
          v22 = 1919182198;
        }
        if (v21 == v22)
          goto LABEL_30;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      *(_DWORD *)buf = 136315394;
      v29 = "HALS_AHPManager.cpp";
      v30 = 1024;
      v31 = 262;
      v23 = MEMORY[0x1E0C81028];
      v24 = "%25s:%-5d  HALS_AHPManager::CreateObject: a control needs to be owned by a device";
      goto LABEL_51;
    }
LABEL_30:
    v9 = operator new();
    HALS_Control::HALS_Control((HALS_Object *)v9, (uint64_t)v6, (int)a2, 0, (HALS_Object *)0x676C6F62, 0, 0);
    *(_QWORD *)v9 = off_1E69785B8;
    *(_QWORD *)(v9 + 72) = (char *)this + 344;
    goto LABEL_16;
  }
  v9 = operator new();
  HALS_Object::HALS_Object((HALS_Object *)v9, (int)a2, 0, (uint64_t)v6, v17);
  *(_QWORD *)v9 = off_1E697A4B0;
  *(_QWORD *)(v9 + 48) = (char *)this + 344;
LABEL_16:
  v11 = *(unsigned int *)(v9 + 16);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = ___ZN15HALS_AHPManager12CreateObjectEjjP11HALS_Client_block_invoke;
  v26[3] = &__block_descriptor_tmp_9567;
  v26[4] = this;
  v27 = v11;
  v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_AHPManager *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v26);
  HALS_ObjectMap::ReleaseObject(v6, v13);
  return v11;
}

void sub_1B5B5B9B4(_Unwind_Exception *a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_Object *v4;

  MEMORY[0x1B5E50688](v2, 0x10E1C40337F670ALL);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  _Unwind_Resume(a1);
}

void HALS_AHPManager::ObjectsPublishedAndDied(HALS_AHPManager *this, HALS_ObjectMap *a2, int a3, const unsigned int *a4, unsigned int a5, const unsigned int *a6, HALS_Client *a7)
{
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  std::vector<unsigned int>::pointer end;
  unsigned int *v37;
  std::vector<unsigned int>::pointer begin;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  BOOL v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  std::vector<unsigned int>::pointer v50;
  std::vector<unsigned int>::pointer v51;
  HALB_Mutex *v52;
  HALS_NotificationManager *v53;
  uint64_t v54;
  HALS_Object *v55;
  HALS_Object *v56;
  HALS_ObjectMap *v57;
  __int128 v61;
  _QWORD v62[6];
  void *__p;
  void *v64;
  uint64_t v65;
  const unsigned int *v66;
  int v67;
  HALB_Mutex *v68;
  HALB_Mutex **v69;
  uint64_t v70;
  char v71;
  std::vector<unsigned int> v72;
  AudioObjectPropertyAddress v73;

  v9 = this;
  if ((_DWORD)a2 == 1)
  {
    HALS_ObjectMap::RetainObject(this, a2);
    v10 = v9;
  }
  else
  {
    v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  }
  memset(&v72, 0, sizeof(v72));
  if (a5)
  {
    v56 = v9;
    v57 = v10;
    v11 = 0;
    v12 = a5;
    do
    {
      v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a6[v11]);
      v15 = (HALS_ObjectMap *)v13;
      if (v13)
      {
        v16 = *(_DWORD *)(v13 + 20);
        if (v16 <= 1701078389)
        {
          v17 = v16 == 1633773415;
          v18 = 1633969526;
        }
        else
        {
          v17 = v16 == 1701078390 || v16 == 1701733488;
          v18 = 1919182198;
        }
        v19 = v17 || v16 == v18;
        if (v19
          || (v46 = *(_DWORD *)(v13 + 24), v16 != v46)
          && (v46 <= 1701078389
            ? (v47 = v46 == 1633773415, v48 = 1633969526)
            : (v46 != 1701078390 ? (v47 = v46 == 1919182198) : (v47 = 1), v48 = 1701733488),
              !v47 ? (v49 = v46 == v48) : (v49 = 1),
              v49))
        {
          v20 = a6[v11];
          pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
          if (v20)
          {
            v68 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
            LODWORD(v69) = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
            v61 = 0u;
            if (HALS_ObjectMap::sObjectInfoList)
            {
              v22 = *(_QWORD *)HALS_ObjectMap::sObjectInfoList;
              v21 = *(_QWORD *)(HALS_ObjectMap::sObjectInfoList + 8);
              if (*(_QWORD *)HALS_ObjectMap::sObjectInfoList != v21)
              {
                v23 = 0;
                v24 = 0;
                v61 = 0uLL;
                do
                {
                  if (*(_DWORD *)(*(_QWORD *)(v22 + 8) + 28) == v20)
                  {
                    if ((unint64_t)v24 >= v23)
                    {
                      v26 = (void *)v61;
                      v27 = (uint64_t)((uint64_t)v24 - v61) >> 2;
                      v28 = v27 + 1;
                      if ((unint64_t)(v27 + 1) >> 62)
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if ((uint64_t)(v23 - v61) >> 1 > v28)
                        v28 = (uint64_t)(v23 - v61) >> 1;
                      if (v23 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                        v29 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v29 = v28;
                      if (v29)
                      {
                        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
                        v24 = (_DWORD *)*((_QWORD *)&v61 + 1);
                      }
                      else
                      {
                        v30 = 0;
                      }
                      v31 = (_DWORD *)(v29 + 4 * v27);
                      *v31 = *(_DWORD *)(v22 + 16);
                      v25 = v31 + 1;
                      while (v24 != (_DWORD *)v61)
                      {
                        v32 = *--v24;
                        *--v31 = v32;
                      }
                      v23 = v29 + 4 * v30;
                      *(_QWORD *)&v61 = v31;
                      if (v26)
                        operator delete(v26);
                    }
                    else
                    {
                      *v24 = *(_DWORD *)(v22 + 16);
                      v25 = v24 + 1;
                    }
                    *(_QWORD *)&v33 = v61;
                    *((_QWORD *)&v33 + 1) = v25;
                    v61 = v33;
                    v24 = v25;
                  }
                  v22 += 24;
                }
                while (v22 != v21);
              }
            }
            HALB_Mutex::Locker::~Locker(&v68);
            v34 = v61;
          }
          else
          {
            v34 = 0uLL;
          }
          v35 = (void *)v34;
          std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v72, v72.__end_, (char *)v34, *((char **)&v34 + 1), (uint64_t)(*((_QWORD *)&v34 + 1) - v34) >> 2);
          if (v35)
            operator delete(v35);
        }
        end = v72.__end_;
        if (v72.__end_ >= v72.__end_cap_.__value_)
        {
          begin = v72.__begin_;
          v39 = v72.__end_ - v72.__begin_;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v41 = (char *)v72.__end_cap_.__value_ - (char *)v72.__begin_;
          if (((char *)v72.__end_cap_.__value_ - (char *)v72.__begin_) >> 1 > v40)
            v40 = v41 >> 1;
          v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL;
          v43 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v42)
            v43 = v40;
          if (v43)
          {
            v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v43);
            begin = v72.__begin_;
            end = v72.__end_;
          }
          else
          {
            v14 = 0;
          }
          v44 = (unsigned int *)(v43 + 4 * v39);
          *v44 = a6[v11];
          v37 = v44 + 1;
          while (end != begin)
          {
            v45 = *--end;
            *--v44 = v45;
          }
          v72.__begin_ = v44;
          v72.__end_ = v37;
          v72.__end_cap_.__value_ = (unsigned int *)(v43 + 4 * (_QWORD)v14);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v72.__end_ = a6[v11];
          v37 = end + 1;
        }
        v72.__end_ = v37;
      }
      HALS_ObjectMap::ReleaseObject(v15, v14);
      ++v11;
    }
    while (v11 != v12);
    v50 = v72.__begin_;
    v51 = v72.__end_;
    v9 = v56;
    v10 = v57;
  }
  else
  {
    v51 = 0;
    v50 = 0;
  }
  v68 = 0;
  v69 = &v68;
  v70 = 0x2000000000;
  v71 = 0;
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 1174405120;
  v62[2] = ___ZN15HALS_AHPManager23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke;
  v62[3] = &unk_1E698ED60;
  v62[5] = v9;
  __p = 0;
  v64 = 0;
  v65 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v50, (uint64_t)v51, v51 - v50);
  v67 = a3;
  v62[4] = &v68;
  v66 = a4;
  v52 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(_QWORD *)v9 + 56))(v9);
  HALB_CommandGate::ExecuteCommand(v52, (uint64_t)v62);
  if (*((_BYTE *)v69 + 24))
  {
    v53 = (HALS_NotificationManager *)*((unsigned int *)v9 + 4);
    if (a7)
      v54 = *((unsigned int *)a7 + 4);
    else
      v54 = 0;
    *(_QWORD *)&v73.mSelector = 0x676C6F6264657623;
    v73.mElement = 0;
    HALS_Object::PropertiesChanged(v9, v53, v54, 1, &v73);
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v68, 8);
  if (v72.__begin_)
  {
    v72.__end_ = v72.__begin_;
    operator delete(v72.__begin_);
  }
  HALS_ObjectMap::ReleaseObject(v10, v55);
}

void sub_1B5B5BEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_ObjectMap *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  HALS_ObjectMap *v29;
  uint64_t v30;
  HALS_Object *v32;
  void *v33;
  HALS_ObjectMap *v34;

  v34 = v29;
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a29, 8);
  v33 = *(void **)(v30 - 128);
  if (v33)
  {
    *(_QWORD *)(v30 - 120) = v33;
    operator delete(v33);
  }
  HALS_ObjectMap::ReleaseObject(v34, v32);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_AHPManager23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke(uint64_t a1)
{
  __int32 *v2;
  uint64_t v3;
  __int32 *i;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  int64_t v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  int64_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  int64_t v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  HALS_Object *v20;
  uint64_t v21;
  HALS_ObjectMap *v22;
  __int32 *v23;
  __int32 *v24;
  __int32 *v25;
  int64_t v26;
  uint64_t v27;
  HALS_Object *v28;
  HALS_ObjectMap *v29;
  int v30;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  int v46;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(__int32 **)(a1 + 48);
  for (i = *(__int32 **)(a1 + 56); v2 != i; ++v2)
  {
    v5 = *(__int32 **)(v3 + 440);
    v6 = wmemchr(*(__int32 **)(v3 + 432), *v2, ((uint64_t)v5 - *(_QWORD *)(v3 + 432)) >> 2);
    if (v6)
      v5 = v6;
    v7 = *(__int32 **)(v3 + 440);
    if (v5 != v7)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v8 = (char *)v7 - (char *)(v5 + 1);
      if (v7 != v5 + 1)
        memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      *(_QWORD *)(v3 + 440) = (char *)v5 + v8;
    }
    v9 = *(__int32 **)(v3 + 416);
    v10 = wmemchr(*(__int32 **)(v3 + 408), *v2, ((uint64_t)v9 - *(_QWORD *)(v3 + 408)) >> 2);
    if (v10)
      v9 = v10;
    v11 = *(__int32 **)(v3 + 416);
    if (v9 != v11)
    {
      v12 = (char *)v11 - (char *)(v9 + 1);
      if (v11 != v9 + 1)
        memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
      *(_QWORD *)(v3 + 416) = (char *)v9 + v12;
    }
    v13 = *(__int32 **)(v3 + 392);
    v14 = wmemchr(*(__int32 **)(v3 + 384), *v2, ((uint64_t)v13 - *(_QWORD *)(v3 + 384)) >> 2);
    if (v14)
      v13 = v14;
    v15 = *(__int32 **)(v3 + 392);
    if (v13 != v15)
    {
      v16 = (char *)v15 - (char *)(v13 + 1);
      if (v15 != v13 + 1)
        memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
      *(_QWORD *)(v3 + 392) = (char *)v13 + v16;
    }
    v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    v19 = (HALS_ObjectMap *)v17;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      HALS_ObjectMap::ObjectIsDead(v19, v20);
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
  if (*(_DWORD *)(a1 + 80))
  {
    v21 = 0;
    while (1)
    {
      v22 = (HALS_ObjectMap *)*(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v21);
      v23 = *(__int32 **)(v3 + 416);
      v24 = wmemchr(*(__int32 **)(v3 + 408), *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v21), ((uint64_t)v23 - *(_QWORD *)(v3 + 408)) >> 2);
      if (v24)
        v23 = v24;
      v25 = *(__int32 **)(v3 + 416);
      if (v23 == v25)
        goto LABEL_63;
      v26 = (char *)v25 - (char *)(v23 + 1);
      if (v25 != v23 + 1)
        memmove(v23, v23 + 1, (char *)v25 - (char *)(v23 + 1));
      *(_QWORD *)(v3 + 416) = (char *)v23 + v26;
      v27 = HALS_ObjectMap::CopyObjectByObjectID(v22);
      v29 = (HALS_ObjectMap *)v27;
      if (v27)
        break;
LABEL_62:
      HALS_ObjectMap::ReleaseObject(v29, v28);
LABEL_63:
      if (++v21 >= (unint64_t)*(unsigned int *)(a1 + 80))
        return;
    }
    v30 = *(_DWORD *)(v27 + 20);
    if (v30 <= 1701078389)
    {
      if (v30 == 1633773415 || v30 == 1633969526)
        goto LABEL_45;
    }
    else if (v30 == 1701078390 || v30 == 1701733488 || v30 == 1919182198)
    {
      goto LABEL_45;
    }
    v46 = *(_DWORD *)(v27 + 24);
    if (v30 == v46)
    {
LABEL_61:
      (**(void (***)(HALS_ObjectMap *))v29)(v29);
      goto LABEL_62;
    }
    if (v46 <= 1701078389)
    {
      if (v46 != 1633773415 && v46 != 1633969526)
        goto LABEL_61;
    }
    else if (v46 != 1701078390 && v46 != 1919182198 && v46 != 1701733488)
    {
      goto LABEL_61;
    }
LABEL_45:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v35 = *(char **)(v3 + 440);
    v34 = *(_QWORD *)(v3 + 448);
    if ((unint64_t)v35 >= v34)
    {
      v37 = *(char **)(v3 + 432);
      v38 = (v35 - v37) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
      v42 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v41)
        v42 = v39;
      if (v42)
      {
        v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
        v37 = *(char **)(v3 + 432);
        v35 = *(char **)(v3 + 440);
      }
      else
      {
        v43 = 0;
      }
      v44 = (_DWORD *)(v42 + 4 * v38);
      *v44 = (_DWORD)v22;
      v36 = v44 + 1;
      while (v35 != v37)
      {
        v45 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *--v44 = v45;
      }
      *(_QWORD *)(v3 + 432) = v44;
      *(_QWORD *)(v3 + 440) = v36;
      *(_QWORD *)(v3 + 448) = v42 + 4 * v43;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v35 = (_DWORD)v22;
      v36 = v35 + 4;
    }
    *(_QWORD *)(v3 + 440) = v36;
    goto LABEL_61;
  }
}

void sub_1B5B5C320(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_AHPManager12CreateObjectEjjP11HALS_Client_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;

  v2 = *(_QWORD **)(a1 + 32);
  v4 = (char *)v2[49];
  v3 = v2[50];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)v2[48];
    v7 = (v4 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      goto LABEL_32;
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      v6 = (char *)v2[48];
      v4 = (char *)v2[49];
    }
    else
    {
      v12 = 0;
    }
    v13 = (_DWORD *)(v11 + 4 * v7);
    v14 = v11 + 4 * v12;
    *v13 = *(_DWORD *)(a1 + 40);
    v5 = v13 + 1;
    while (v4 != v6)
    {
      v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *--v13 = v15;
    }
    v2[48] = v13;
    v2[49] = v5;
    v2[50] = v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = *(_DWORD *)(a1 + 40);
    v5 = v4 + 4;
  }
  v2[49] = v5;
  v17 = (char *)v2[52];
  v16 = v2[53];
  if ((unint64_t)v17 < v16)
  {
    *(_DWORD *)v17 = *(_DWORD *)(a1 + 40);
    v18 = v17 + 4;
    goto LABEL_31;
  }
  v19 = (char *)v2[51];
  v20 = (v17 - v19) >> 2;
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62)
LABEL_32:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v22 = v16 - (_QWORD)v19;
  if (v22 >> 1 > v21)
    v21 = v22 >> 1;
  v10 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v10)
    v23 = v21;
  if (v23)
  {
    v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
    v19 = (char *)v2[51];
    v17 = (char *)v2[52];
  }
  else
  {
    v24 = 0;
  }
  v25 = (_DWORD *)(v23 + 4 * v20);
  v26 = v23 + 4 * v24;
  *v25 = *(_DWORD *)(a1 + 40);
  v18 = v25 + 1;
  while (v17 != v19)
  {
    v27 = *((_DWORD *)v17 - 1);
    v17 -= 4;
    *--v25 = v27;
  }
  v2[51] = v25;
  v2[52] = v18;
  v2[53] = v26;
  if (v19)
    operator delete(v19);
LABEL_31:
  v2[52] = v18;
}

void IOContextViewForIOPerformer::~IOContextViewForIOPerformer(IOContextViewForIOPerformer *this)
{
  JUMPOUT(0x1B5E50688);
}

double IOContextViewForIOPerformer::master_engine_actual_host_ticks_per_frame(IOContextViewForIOPerformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 1520) + 288);
  return *(double *)(v1 + 40 * *(unsigned int *)(v1 + 192) + 200);
}

double IOContextViewForIOPerformer::master_engine_nominal_host_ticks_per_frame(IOContextViewForIOPerformer *this)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 1520) + 288) + 112);
}

BOOL IOContextViewForIOPerformer::reference_stream_only_engine_state_is_running_and_anchored(IOContextViewForIOPerformer *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 1464));
  return v1 == 2;
}

float IOContextViewForIOPerformer::io_cycle_usage(IOContextViewForIOPerformer *this)
{
  return *(float *)(*((_QWORD *)this + 1) + 1328);
}

uint64_t IOContextViewForIOPerformer::io_cycle_counter(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 1304);
}

BOOL IOContextViewForIOPerformer::has_active_streams(IOContextViewForIOPerformer *this, int a2)
{
  return HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContextDescription *)(*((_QWORD *)this + 1) + 1496), a2) != 0;
}

uint64_t IOContextViewForIOPerformer::dsp_is_enabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (a2 & 0xFF00000000) == 0;
  if ((_DWORD)a2 == 1869968496)
    v3 = 1;
  if ((a2 & 0xFF00000000) == 0 || (_DWORD)a2 == 1768845428)
  {
    v4 = *(_QWORD *)(v2 + 1856) != 0;
    if (!v3)
      goto LABEL_6;
LABEL_8:
    v5 = *(_QWORD *)(v2 + 1888) != 0;
    return v5 | v4;
  }
  v4 = 0;
  if (v3)
    goto LABEL_8;
LABEL_6:
  v5 = 0;
  return v5 | v4;
}

uint64_t IOContextViewForIOPerformer::update_output_rate_scalar_for_taps(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v7;
  uint64_t v8;
  double v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  BOOL v16;

  v2 = *(_QWORD *)(this + 8);
  for (i = *(uint64_t **)(v2 + 1992); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 40))
    {
      v5 = i[3];
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16);
      v15 = v5 + 152;
      v7 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v5 + 152));
      v16 = v7;
      if (v7)
      {
        HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v13, v5, v6);
        v8 = v13;
        if (v13)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(v5 + 120));
          v9 = *(double *)(v5 + 144);
          os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 120));
          (*(void (**)(_QWORD, double, double))(**(_QWORD **)(v8 + 128) + 32))(*(_QWORD *)(v8 + 128), a2, v9);
        }
        v10 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      this = std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v15);
    }
  }
  return this;
}

uint64_t IOContextViewForIOPerformer::owner_object_id(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 16);
}

uint64_t IOContextViewForIOPerformer::owning_device_id(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 1512);
}

uint64_t IOContextViewForIOPerformer::mic_input_is_enabled(IOContextViewForIOPerformer *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 1376);
}

uint64_t IOContextViewForIOPerformer::tap_input_is_enabled(IOContextViewForIOPerformer *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 1377);
}

uint64_t IOContextViewForIOPerformer::context(IOContextViewForIOPerformer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t IOContextViewForIOPerformer::input_time(IOContextViewForIOPerformer *this)
{
  return *((_QWORD *)this + 1) + 1168;
}

uint64_t IOContextViewForIOPerformer::output_time(IOContextViewForIOPerformer *this)
{
  return *((_QWORD *)this + 1) + 1232;
}

uint64_t IOContextViewForIOPerformer::now_time(IOContextViewForIOPerformer *this)
{
  return *((_QWORD *)this + 1) + 1104;
}

uint64_t IOContextViewForIOPerformer::hosted_dsp(IOContextViewForIOPerformer *this)
{
  return *((_QWORD *)this + 1) + 2080;
}

uint64_t IOContextViewForIOPerformer::mute_state(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + a2 + 1378);
}

void HALS_IOContext_Legacy_Impl::~HALS_IOContext_Legacy_Impl(HALS_IOContext_Legacy_Impl *this)
{
  HALS_IOContext_Legacy_Impl::~HALS_IOContext_Legacy_Impl(this);
  JUMPOUT(0x1B5E50688);
}

{
  std::thread *v2;
  int AudioCaptureMode;
  void **v4;
  void *v5;
  HALS_IOContext_Legacy_Impl *v6;
  uint64_t v7;
  HALS_IOContext_Legacy_Impl *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = (std::thread *)((char *)this + 2016);
  if (*((_QWORD *)this + 252))
    std::thread::join((std::thread *)this + 252);
  AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(*((HALS_IOContext **)this + 3));
  HALS_IOContext_Legacy_Impl::EnableCaptureFiles((uint64_t)this, AudioCaptureMode);
  v4 = (void **)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v4)
    std::default_delete<HALS_IOContextHostedDSP>::operator()[abi:ne180100](v4);
  if (*((char *)this + 2079) < 0)
    operator delete(*((void **)this + 257));
  std::thread::~thread(v2);
  std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table((uint64_t)this + 1976);
  HALS_IOContextDescription::~HALS_IOContextDescription((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  v5 = (void *)*((_QWORD *)this + 179);
  if (v5)
  {
    *((_QWORD *)this + 180) = v5;
    operator delete(v5);
  }
  v6 = (HALS_IOContext_Legacy_Impl *)*((_QWORD *)this + 177);
  if (v6 == (HALS_IOContext_Legacy_Impl *)((char *)this + 1392))
  {
    v7 = 4;
    v6 = (HALS_IOContext_Legacy_Impl *)((char *)this + 1392);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_14:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1360);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 1344);
  v8 = (HALS_IOContext_Legacy_Impl *)*((_QWORD *)this + 136);
  if (v8 == (HALS_IOContext_Legacy_Impl *)((char *)this + 1064))
  {
    v9 = 4;
    v8 = (HALS_IOContext_Legacy_Impl *)((char *)this + 1064);
  }
  else
  {
    if (!v8)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_19:
  HALS_IOThread::~HALS_IOThread((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

double HALS_IOContext_Legacy_Impl::Initialize(HALS_IOContext_Legacy_Impl *this, int a2)
{
  double result;

  *((_DWORD *)this + 330) = a2;
  *(_QWORD *)&result = 0x200000001;
  *((_QWORD *)this + 246) = 0x200000001;
  return result;
}

void HALS_IOContext_Legacy_Impl::Deactivate(HALS_IOContext_Legacy_Impl *this)
{
  unint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  HALB_Mutex *v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  HALS_IOContext_Legacy_Impl *v11;
  _QWORD v12[6];
  void *__p;
  void **p_p;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[3];
  __int16 v19;
  _QWORD *v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  _QWORD block[5];

  v2 = (unint64_t *)((char *)this + 1472);
  if (*((_QWORD *)this + 185) || *v2)
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)&__p, v2);
    HALS_IOContext_Legacy_Impl::ResetEngineState_Off(this, (int **)&__p);
    if (__p)
      operator delete(__p);
  }
  __p = (char *)this + 328;
  LODWORD(p_p) = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HALB_IOThread::_WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  *((_BYTE *)this + 485) = 1;
  HALB_Guard::Locker::~Locker((HALB_Mutex **)&__p);
  __p = 0;
  p_p = &__p;
  v15 = 0x9802000000;
  v16 = __Block_byref_object_copy__9631;
  v17 = __Block_byref_object_dispose__9632;
  v3 = *((_QWORD *)this + 3);
  v4 = **(_DWORD **)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 16);
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v20 = v21;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = v4;
  v26 = v5;
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeactivateEv_block_invoke;
  v12[3] = &unk_1E698EE88;
  v12[4] = &__p;
  v12[5] = this;
  v7 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v12);
  HALS_MutationChangeSynchronizer::Wait((AMCP::Log::Scope_Registry **)p_p[5], (HALS_MutationChangeSynchronizer *)p_p[6]);
  HALS_IOContextDescription::SetToEmpty((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  v8 = *((_QWORD *)this + 168);
  v11 = this;
  v9 = atomic_load((unsigned __int8 *)(v8 + 32));
  if ((v9 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v8 + 33));
  v10 = *(NSObject **)v8;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN26HALS_IOContext_Legacy_Impl10DeactivateEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_97_9715;
  block[4] = &v11;
  dispatch_sync(v10, block);
  *((_DWORD *)this + 372) = 0;
  _Block_object_dispose(&__p, 8);
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v18);
}

void sub_1B5B5CA24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B5C8A0);
}

void sub_1B5B5CA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberStreams(HALS_IOContext_Legacy_Impl *this, int a2)
{
  return HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberInputStreamsOfType(uint64_t a1, int a2)
{
  if (a2 == 1)
    return *(unsigned int *)(a1 + 1716);
  if (a2)
    return 0;
  return HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1)
       - *(_DWORD *)(a1 + 1716);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberActiveStreams(HALS_IOContext_Legacy_Impl *this, int a2)
{
  return HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2);
}

uint64_t HALS_IOContext_Legacy_Impl::IsStreamEnabledAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  return HALS_IOContextDescription::IsStreamEnabledAtIndex((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2, a3);
}

uint64_t HALS_IOContext_Legacy_Impl::GetStreamLatencyAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2
    && (v3 = *((_QWORD *)this + 194), 0x21CFB2B78C13521DLL * ((*((_QWORD *)this + 195) - v3) >> 3) > (unint64_t)a3)
    && *(_DWORD *)(v3 + 424 * a3 + 108) == 1
    && (v4 = v3 + 424 * a3, *(_BYTE *)(v4 + 164)))
  {
    return *(unsigned int *)(v4 + 160);
  }
  else
  {
    return 0;
  }
}

double HALS_IOContext_Legacy_Impl::GetStreamInfoAtIndex(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  return HALS_IOContextDescription::GetStreamInfoAtIndex((_QWORD *)(a1 + 1496), a2, a3, a4);
}

uint64_t HALS_IOContext_Legacy_Impl::GetSimpleStreamUsage(int8x8_t **this)
{
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[203], 0, (uint64_t)&this[203][(unint64_t)this[204] >> 6], this[204] & 0x3F, 1);
  v3 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[200], 0, (uint64_t)&this[200][(unint64_t)this[201] >> 6], this[201] & 0x3F, 1);
  v4 = *((_DWORD *)this + 429);
  v5 = v2 == v4;
  if (!((v2 - v4) | v3))
  {
    v8 = v4 == 0;
    v9 = 3;
    goto LABEL_9;
  }
  if (v3)
    v6 = 1;
  else
    v6 = v2 == v4;
  if (!v6 && !v4)
    return 2;
  if (!v3)
    v5 = 0;
  if (v5 && !v4)
    return 1;
  if (!v6 && v4 != 0)
    return 4;
  if (v2 == v4 || !v3)
  {
    v8 = !v5 || v4 == 0;
    v9 = 5;
LABEL_9:
    if (v8)
      return 0;
    else
      return v9;
  }
  if (v5)
    v10 = 5;
  else
    v10 = 7;
  if (v4)
    return v10;
  else
    return 6;
}

BOOL HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(uint64_t a1, int a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  char v7;

  if (a2 == 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 1377);
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 1376);
LABEL_5:
    v4 = v3 != 0;
    goto LABEL_7;
  }
  v4 = 0;
LABEL_7:
  v5 = 1;
  if (HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1))
  {
    v6 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1624), 0, *(_QWORD *)(a1 + 1624) + 8 * (*(_QWORD *)(a1 + 1632) >> 6), *(_QWORD *)(a1 + 1632) & 0x3F, 1);
    v7 = !v4;
    if (!v6)
      v7 = 1;
    if ((v7 & 1) == 0)
      return *(_BYTE *)(a1 + 32) != 0;
  }
  return v5;
}

void HALS_IOContext_Legacy_Impl::SetProcessInputMuteState(HALS_IOContext_Legacy_Impl *this, char a2)
{
  HALB_Mutex *v2;
  _QWORD v3[5];
  char v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN26HALS_IOContext_Legacy_Impl24SetProcessInputMuteStateEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_38_9713;
  v3[4] = this;
  v4 = a2;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_IOContext_Legacy_Impl::ClockDeviceArrived(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v3;
  HALB_Mutex *v4;
  HALB_Mutex *v5;
  _QWORD v6[5];
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke;
  v7[3] = &unk_1E698F360;
  v7[4] = &v8;
  v7[5] = this;
  v7[6] = a2;
  v4 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  if (*((_BYTE *)v9 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v6[0] = v3;
    v6[1] = 0x40000000;
    v6[2] = ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_40_9712;
    v6[4] = this;
    v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1B5B5CE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::ClockDeviceDied(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;
  _QWORD v7[6];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke;
  v8[3] = &unk_1E698F3A8;
  v8[4] = &v9;
  v8[5] = this;
  v8[6] = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  if (*((_BYTE *)v10 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v7[0] = v4;
    v7[1] = 0x40000000;
    v7[2] = ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_42_9710;
    v7[4] = this;
    v7[5] = a2;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v9, 8);
}

void sub_1B5B5CF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::DeviceArrived(HALS_IOContext_Legacy_Impl *this, HALS_Device *a2)
{
  uint64_t v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;
  _QWORD v7[6];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke;
  v8[3] = &unk_1E698F3F0;
  v8[5] = this;
  v8[6] = a2;
  v8[4] = &v9;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  if (*((_BYTE *)v10 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v7[0] = v4;
    v7[1] = 0x40000000;
    v7[2] = ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_44_9708;
    v7[4] = this;
    v7[5] = a2;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 96) + 216))(*(_QWORD *)(*((_QWORD *)this + 3) + 96));
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v9, 8);
}

void sub_1B5B5D0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::DeviceDied(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;
  _QWORD v7[6];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke;
  v8[3] = &unk_1E698F438;
  v8[4] = &v9;
  v8[5] = this;
  v8[6] = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  if (*((_BYTE *)v10 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v7[0] = v4;
    v7[1] = 0x40000000;
    v7[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_46_9706;
    v7[4] = this;
    v7[5] = a2;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 96) + 216))(*(_QWORD *)(*((_QWORD *)this + 3) + 96));
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v9, 8);
}

void sub_1B5B5D1F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

unint64_t HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo(uint64_t a1, uint64_t *a2)
{
  int NumberStreams;
  uint64_t v5;
  int v6;
  _BOOL8 active;
  uint64_t v8;
  uint64_t *platform_behaviors;
  uint64_t v10;

  NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v6 = *(_DWORD *)(a1 + 1716);
  active = HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(a1, 0);
  v8 = *a2;
  if (*a2)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)active);
    v10 = (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
    if ((*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) < 0x100u)
      HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_ClientEntitlements *)(v8 + 288), CFSTR("com.apple.private.audio.suppress-mic-indicator"));
  }
  return (NumberStreams - v6) | (unint64_t)(v5 << 32);
}

uint64_t HALS_IOContext_Legacy_Impl::CreateTapInfo(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 1716);
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(a1, 1);
  return v1 | (v2 << 32);
}

uint64_t HALS_IOContext_Legacy_Impl::IsIORunning(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1300);
}

BOOL HALS_IOContext_Legacy_Impl::IsIORunningNotInCatchupMode(HALS_IOContext_Legacy_Impl *this)
{
  BOOL v1;

  if (*((_BYTE *)this + 1300))
    v1 = (*((_DWORD *)this + 346) - 5) >= 0xFFFFFFFD;
  else
    v1 = 1;
  return !v1;
}

BOOL HALS_IOContext_Legacy_Impl::IsIOThreadRunning(HALS_IOContext_Legacy_Impl *this)
{
  return *((_DWORD *)this + 118) != 1735552612 && *((_DWORD *)this + 118) != 1718185577;
}

BOOL HALS_IOContext_Legacy_Impl::HasThreadError(HALS_IOContext_Legacy_Impl *this)
{
  return *((_DWORD *)this + 264) != 0;
}

uint64_t HALS_IOContext_Legacy_Impl::PauseIO(HALS_IOContext_Legacy_Impl *this)
{
  HALB_IOThread *v2;
  HALB_Mutex *v3;
  unint64_t *v4;
  uint64_t v5;
  _DWORD *exception;
  HALB_IOThread *v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_IOContext_Legacy_Impl *)((char *)this + 312);
  __p[0] = (char *)this + 312;
  v3 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  LODWORD(__p[1]) = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  *((_BYTE *)this + 304) = 1;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)__p);
  os_unfair_recursive_lock_lock_with_options();
  kdebug_trace();
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  v8 = v2;
  v9 = HALB_Mutex::Lock(v3);
  if (*((_DWORD *)this + 324) == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 788;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::PauseIO: pause count at maximum", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (++*((_DWORD *)this + 324) == 1
    && ((v4 = (unint64_t *)((char *)this + 1472), *((_QWORD *)this + 185)) || *v4))
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)buf, v4);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v11 = *(_QWORD *)&buf[16];
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v8);
    HALS_IOContext_Legacy_Impl::ResetEngineState_Off(this, (int **)__p);
    v5 = 1;
  }
  else
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v8);
    v5 = 0;
  }
  HALB_IOThread::WaitForState(v2, 1735552612);
  if (__p[0])
    operator delete(__p[0]);
  kdebug_trace();
  os_unfair_recursive_lock_unlock();
  return v5;
}

void sub_1B5B5D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    if (__p)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B5D558);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ResumeIO(HALS_IOContext_Legacy_Impl *this)
{
  unint64_t *v3;
  int *v4;
  int v5;
  int v6;
  _DWORD *exception;
  __int128 v8;
  char *v9;
  int v10;
  uint8_t v11[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  _BYTE buf[32];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  kdebug_trace();
  v9 = (char *)this + 312;
  v10 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  if (*((_DWORD *)this + 324)
    && (--*((_DWORD *)this + 324), !*((_DWORD *)this + 324))
    && ((v3 = (unint64_t *)((char *)this + 1472), *((_QWORD *)this + 185)) || *v3))
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)buf, v3);
    v8 = *(_OWORD *)buf;
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
    v4 = (int *)v8;
    if ((_QWORD)v8 == *((_QWORD *)&v8 + 1))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 955;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_On: Unexpected state for prewarming", buf, 0x12u);
      }
    }
    else
    {
      v5 = *(_DWORD *)(*((_QWORD *)&v8 + 1) - 4);
      while (v4 != (int *)(*((_QWORD *)&v8 + 1) - 4))
        HALS_IOContext_Legacy_Impl::ChangeEngineState_On((uint64_t)this, *v4++);
      *((_DWORD *)this + 265) = v5;
    }
    HALS_IOContext_Legacy_Impl::StartIOThread((HALS_IOContext_Legacy_Impl *)&v9, (uint64_t)this);
    *(_DWORD *)buf = v10;
    *(_WORD *)&buf[4] = 1;
    *(_QWORD *)&buf[8] = 850045863;
    *(_OWORD *)&buf[16] = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    if (!(_BYTE)v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v6 = *((_DWORD *)this + 324);
        *(_DWORD *)v11 = 136315650;
        v12 = "HALS_IOContext_Legacy_Impl.cpp";
        v13 = 1024;
        v14 = 972;
        v15 = 1024;
        v16 = v6;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_On: IO is disabled (%d)", v11, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)buf);
    if ((_QWORD)v8)
      operator delete((void *)v8);
  }
  else
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
  }
  kdebug_trace();
  return os_unfair_recursive_lock_unlock();
}

void sub_1B5B5D990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)&a18);
    if ((_QWORD)a9)
      operator delete((void *)a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B5D760);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::ResumeAllIO(HALS_IOContext_Legacy_Impl *this)
{
  char *v2;
  int v3;

  v2 = (char *)this + 312;
  v3 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  while (*((_DWORD *)this + 324))
    --*((_DWORD *)this + 324);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v2);
}

void HALS_IOContext_Legacy_Impl::AssessIOBufferSize(HALS_IOContext_Legacy_Impl *this)
{
  HALB_Mutex *v2;
  const AudioObjectPropertyAddress *v3;
  uint64_t v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *(*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  void *__p[2];
  __int128 v12;

  v6 = 0;
  v7 = &v6;
  v8 = 0x4802000000;
  v9 = __Block_byref_object_copy__15_9629;
  v10 = __Block_byref_object_dispose__16_9630;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN26HALS_IOContext_Legacy_Impl18AssessIOBufferSizeEv_block_invoke;
  v5[3] = &unk_1E698EED8;
  v5[4] = &v6;
  v5[5] = this;
  v2 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  v3 = (const AudioObjectPropertyAddress *)v7[5];
  v4 = (v7[6] - (uint64_t)v3) >> 2;
  if (-1431655765 * (_DWORD)v4)
    HALS_Object::PropertiesChanged(*((HALS_Object **)this + 3), (HALS_NotificationManager *)*((unsigned int *)v7 + 16), **(unsigned int **)(*((_QWORD *)this + 3) + 64), 0xAAAAAAAAAAAAAAABLL * v4, v3);
  _Block_object_dispose(&v6, 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B5B5DB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t (***HALS_IOContext_Legacy_Impl::ClearOutputBuffers(HALS_IOContext_Legacy_Impl *this))()
{
  return HALS_IOContextDescription::ClearSharedBuffers((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), 0, *((_DWORD *)this + 330));
}

uint64_t (***HALS_IOContext_Legacy_Impl::ClearInputBuffers(HALS_IOContext_Legacy_Impl *this))()
{
  return HALS_IOContextDescription::ClearSharedBuffers((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), 1, *((_DWORD *)this + 330));
}

uint64_t (***HALS_IOContext_Legacy_Impl::ClearInactiveInputBuffers(HALS_IOContext_Legacy_Impl *this))()
{
  return HALS_IOContextDescription::ClearInactiveInputSharedBuffers((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), *((_DWORD *)this + 330));
}

BOOL HALS_IOContext_Legacy_Impl::AreClientBuffersEmpty(HALS_IOContext_Legacy_Impl *this)
{
  unsigned int v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  float v17;

  v1 = 0;
  v2 = *((unsigned int *)this + 330);
  v3 = *((_QWORD *)this + 197);
  v4 = (*((_QWORD *)this + 198) - v3) >> 5;
  while (1)
  {
    v5 = v1;
    if (v4 <= v1)
      break;
    v6 = *(uint64_t **)(v3 + 32 * v1 + 8);
    if (*(uint64_t **)(v3 + 32 * v5 + 16) != v6)
    {
      v7 = *v6;
      if (-1944890851 * ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + 32 * v5 + 8) + 8) - v7) >> 3)
        && v7 != 0)
      {
        if (!*(_DWORD *)(v7 + 108)
          || ((v9 = *(uint64_t **)(v7 + 112), *(uint64_t **)(v7 + 120) != v9) ? (v10 = v9 == 0) : (v10 = 1), v10))
        {
          v9 = (uint64_t *)(v7 + 408);
        }
        v11 = *v9;
        v12 = *(_QWORD *)(v11 + 8) ? *(unsigned int *)(v11 + 308) : 0;
        v13 = *(_QWORD *)(v7 + 56);
        if (v13 && (_DWORD)v2 != 0)
        {
          v15 = 0;
          v16 = v13 + v12;
          do
            v17 = *(float *)(v16 + 4 * v15++);
          while (v17 == 0.0 && v15 < v2);
          if (v17 != 0.0)
            break;
        }
      }
    }
    v1 = v5 + 1;
  }
  return v4 <= v5;
}

uint64_t HALS_IOContext_Legacy_Impl::GetServerIOStatusTimestamps(HALS_IOContext_Legacy_Impl *this)
{
  return (uint64_t)this + 1104;
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOBufferFrameSize(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 330);
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOBufferForStreamAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  return HALS_IOContextDescription::GetIOBufferForStreamAtIndex((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2, a3);
}

_QWORD *HALS_IOContext_Legacy_Impl::SetIORunningStateObserver(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = a1 + 1392;
  if ((_QWORD *)(a1 + 1392) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(a1 + 1416);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 1416) + 24))(*(_QWORD *)(a1 + 1416), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1416) + 32))(*(_QWORD *)(a1 + 1416));
        *(_QWORD *)(a1 + 1416) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, a1 + 1392);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, a1 + 1392);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 1416);
      }
      *(_QWORD *)(a1 + 1416) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(a1 + 1392, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1416) + 32))(*(_QWORD *)(a1 + 1416));
      *(_QWORD *)(a1 + 1416) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 1416);
      *(_QWORD *)(a1 + 1416) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1B5B5DE90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::GetIORunningState(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 346);
}

uint64_t HALS_IOContext_Legacy_Impl::SetIOIsRunning(uint64_t this)
{
  *(_BYTE *)(this + 1300) = 1;
  return this;
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v4 = a1 + 312;
  v5 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
}

void sub_1B5B5DF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithIOThreadUnlocker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v4 = a1 + 312;
  v5 = HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)&v4);
}

void sub_1B5B5DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithControlAndIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _opaque_pthread_t *v5;
  _opaque_pthread_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = a1 + 312;
  v5 = *(_opaque_pthread_t **)(a1 + 320);
  v6 = pthread_self();
  v7 = pthread_equal(v5, v6);
  if (!v7)
    os_unfair_recursive_lock_lock_with_options();
  v9 = v4;
  v10 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
  if (!v7)
    os_unfair_recursive_lock_unlock();
}

void sub_1B5B5E040(_Unwind_Exception *exception_object)
{
  int v1;

  if (!v1)
    os_unfair_recursive_lock_unlock();
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::InjectFailureStateForTest(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1380) = a2;
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::ThreadHasBeenStopped(HALS_IOContext_Legacy_Impl *this)
{
  return HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
}

_QWORD *HALS_IOContext_Legacy_Impl::UpdateIssueReportersOnEngines(HALS_IOContext_Legacy_Impl *this)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E69968C8;
  v4[1] = _Block_copy(&__block_literal_global_9698);
  v5 = v4;
  HALS_IOContext_Legacy_Impl::engine_apply<>((uint64_t)this, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1B5B5E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::CopyWorkIntervalPort(HALS_IOContext_Legacy_Impl *this)
{
  return HALS_IOThread::CopyWorkgroupIntervalPort((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
}

void HALS_IOContext_Legacy_Impl::LogState(HALS_IOContext_Legacy_Impl *this, __sFILE *__stream, int a3)
{
  int v6;
  HALB_Mutex *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  char v18;
  _QWORD v19[4];
  char v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = a3;
    do
    {
      fwrite("    ", 4uLL, 1uLL, __stream);
      --v6;
    }
    while (v6);
  }
  fprintf(__stream, "IO Context %u\n", *(_DWORD *)(*((_QWORD *)this + 3) + 16));
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  v19[3] = v20;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2000000000;
  v18 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK26HALS_IOContext_Legacy_Impl8LogStateEP7__sFILEj_block_invoke;
  v12[3] = &unk_1E698EEB0;
  v12[4] = v19;
  v12[5] = v17;
  v12[6] = &v13;
  v12[7] = this;
  v7 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v12);
  if (a3 == -1)
  {
    fprintf(__stream, "Client ID:      %u\n", *((_DWORD *)v14 + 6));
    fprintf(__stream, "IO Thread Name: %s\n", v20);
  }
  else
  {
    v8 = a3 + 1;
    do
    {
      fwrite("    ", 4uLL, 1uLL, __stream);
      --v8;
    }
    while (v8);
    fprintf(__stream, "Client ID:      %u\n", *((_DWORD *)v14 + 6));
    v9 = a3 + 1;
    do
    {
      fwrite("    ", 4uLL, 1uLL, __stream);
      --v9;
    }
    while (v9);
    fprintf(__stream, "IO Thread Name: %s\n", v20);
    v10 = a3 + 1;
    do
    {
      fwrite("    ", 4uLL, 1uLL, __stream);
      --v10;
    }
    while (v10);
  }
  if (*((_BYTE *)this + 1300))
    v11 = "yes";
  else
    v11 = "no";
  fprintf(__stream, "Is Running:     %s\n", v11);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);
}

void sub_1B5B5E3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::EnableMicInput(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1376) = a2;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::MicInputIsEnabled(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1376);
}

uint64_t HALS_IOContext_Legacy_Impl::EnableTapInput(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1377) = a2;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::TapInputIsEnabled(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1377);
}

uint64_t HALS_IOContext_Legacy_Impl::WaitForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  std::thread *v2;
  int v3;
  std::__thread_struct *v4;
  uint64_t v5;
  int v6;
  std::thread v8;
  uint64_t *v9;

  v2 = (std::thread *)((char *)this + 2016);
  if (*((_QWORD *)this + 252))
  {
    HALS_IOContext_Legacy_Impl::StopWaitingForTapStart(this);
    std::thread::join(v2);
  }
  atomic_store(1u, (unsigned __int8 *)this + 2024);
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  v4 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v4);
  v5 = operator new();
  *(_QWORD *)v5 = v4;
  *(_DWORD *)(v5 + 8) = v3;
  v9 = (uint64_t *)v5;
  v6 = pthread_create(&v8.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>, (void *)v5);
  if (v6)
  {
    std::__throw_system_error(v6, "thread constructor failed");
    __break(1u);
LABEL_7:
    std::terminate();
  }
  v9 = 0;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](&v9);
  if (v2->__t_)
    goto LABEL_7;
  v2->__t_ = v8.__t_;
  v8.__t_ = 0;
  std::thread::~thread(&v8);
  return 1;
}

uint64_t HALS_IOContext_Legacy_Impl::IsWaitingForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 2024);
  return v1 & 1;
}

uint64_t HALS_IOContext_Legacy_Impl::BlockStartOnTapStart(HALS_IOContext_Legacy_Impl *this)
{
  HALB_IOThread *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  const __CFDictionary *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int HasBeenStopped;
  HALB_IOThread *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  _BYTE v23[16];
  _QWORD v24[2];
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_IOContext_Legacy_Impl *)((char *)this + 312);
  HALB_IOThread::WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  v19 = v2;
  v20 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  *((_BYTE *)this + 484) = 0;
  while (1)
  {
    v3 = (const __CFDictionary *)*((_QWORD *)this + 188);
    if (v3)
      CFRetain(*((CFTypeRef *)this + 188));
    v24[0] = &off_1E69A0DE0;
    v24[1] = v3;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v23, v3, CFSTR("taps"));
    v22 = 0;
    v4 = (const __CFDictionary *)*((_QWORD *)this + 188);
    v27[0] = &off_1E69971B0;
    v27[1] = &v22;
    v28 = v27;
    v6 = for_all_taps(v4, (uint64_t)v27);
    v7 = v28;
    if (v28 == v27)
    {
      v7 = v27;
      v8 = 4;
    }
    else
    {
      if (!v28)
        goto LABEL_9;
      v8 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 8 * v8))(v7, v5);
LABEL_9:
    v9 = 0;
    v21 = 0;
    if (v6)
    {
      v10 = (const __CFDictionary *)*((_QWORD *)this + 188);
      v25[0] = &off_1E6997240;
      v25[1] = &v21;
      v26 = v25;
      v9 = for_all_taps(v10, (uint64_t)v25);
      v12 = v26;
      if (v26 == v25)
      {
        v12 = v25;
        v13 = 4;
        goto LABEL_14;
      }
      if (v26)
      {
        v13 = 5;
LABEL_14:
        (*(void (**)(_QWORD *, uint64_t))(*v12 + 8 * v13))(v12, v11);
      }
    }
    v14 = v22;
    v15 = v21;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v23);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
    if (v14 || v15 || !v9 || (HALB_IOThread::HasBeenStopped(v2) & 1) != 0)
      break;
    v16 = mach_absolute_time();
    HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(this, v16 + 239999);
  }
  HasBeenStopped = HALB_IOThread::HasBeenStopped(v2);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v19);
  return HasBeenStopped ^ 1u;
}

void sub_1B5B5E76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B5E730);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5B5E830()
{
  JUMPOUT(0x1B5B5E7ACLL);
}

uint64_t HALS_IOContext_Legacy_Impl::StopWaitingForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v2;
  char *v4;
  int v5;

  HALS_IOContext_Legacy_Impl::StopIOThread(this);
  v4 = (char *)this + 312;
  v5 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  v2 = HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) ^ 1;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
  return v2;
}

void sub_1B5B5E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::FinishWaitingForTapStart(uint64_t this)
{
  atomic_store(0, (unsigned __int8 *)(this + 2024));
  return this;
}

HALS_IOClock *HALS_IOContext_Legacy_Impl::GetCurrentTime(HALS_IOClock *this, AudioTimeStamp *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 190);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    this = *(HALS_IOClock **)(v2 + 288);
    if (this)
      return (HALS_IOClock *)HALS_IOClock::GetCurrentTime(this, a2);
  }
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::TranslateTime(uint64_t this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 1520);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      return HALS_IOClock::TranslateTime(*(_QWORD *)(v3 + 288), a2, a3);
  }
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(HALS_IOContext_Legacy_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, unsigned int a4)
{
  AMCP::Log::Scope_Registry *HasBeenDeactivated;
  int v9;
  AMCP::Log::Scope_Registry *NumberStreams;
  unint64_t v11;
  BOOL v12;
  HALS_ObjectMap *v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  int v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _BOOL4 v27;
  int v28;
  HALS_Object *v29;
  int v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  UInt64 mHostTime;
  AMCP::Log::Scope_Registry *v35;
  caulk::concurrent::messenger *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  void *exception;
  NSObject *v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  void *v58;
  _DWORD *v59;
  int v60;
  _DWORD *v61;
  _DWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t (**v65)();
  __int128 v66;
  uint64_t v67;
  void (**v68)(CAException *__hidden);
  int v69;
  void *__p;
  int v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  char *v78;
  int v79;
  _QWORD v80[3];
  _QWORD *v81;
  _BYTE buf[48];
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v78 = (char *)this + 312;
  v79 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HasBeenDeactivated = (AMCP::Log::Scope_Registry *)HALS_IOThread::HasBeenDeactivated((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
  if ((_DWORD)HasBeenDeactivated)
  {
    AMCP::Log::Scope_Registry::get(HasBeenDeactivated);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v51 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v52 = pthread_self();
      v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v53;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 350;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "mIOThread.HasBeenDeactivated() == true";
      _os_log_error_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO Thread since it has been deactivated", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
    exception = __cxa_allocate_exception(0x40uLL);
    v68 = &off_1E69A1B30;
    v69 = 1852797029;
    v71 = 1852797029;
    v74 = 0;
    v75 = 0;
    v76 = -1;
    __p = &off_1E699E510;
    v72 = &unk_1E699E538;
    v73 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&buf[32] = "virtual void HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(AudioDeviceIOProcID, Au"
                          "dioTimeStamp *, UInt32)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
    LODWORD(v83) = 350;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v65 = off_1E69A20A0;
    v66 = v63;
    v67 = v64;
    v63 = 0uLL;
    v64 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (a3)
    v9 = (a4 >> 3) & 1;
  else
    v9 = 0;
  if (v9 == 1)
  {
    NumberStreams = (AMCP::Log::Scope_Registry *)HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), 1);
    if (!(_DWORD)NumberStreams)
      goto LABEL_69;
    v11 = 0;
    v12 = 1;
    do
    {
      if (*((_QWORD *)this + 204) == v11)
        break;
      if (((*(_QWORD *)(*((_QWORD *)this + 203) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
        break;
      v12 = ++v11 < NumberStreams;
    }
    while (NumberStreams != v11);
    if (!v12)
    {
LABEL_69:
      AMCP::Log::Scope_Registry::get(NumberStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v55 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = pthread_self();
        v57 = pthread_mach_thread_np(v56);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v57;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 358;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "IsAnyInputStreamEnabled() == false";
        _os_log_error_impl(&dword_1B57BA000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO for catch up if input streams are disabled", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
      v58 = __cxa_allocate_exception(0x40uLL);
      v68 = &off_1E69A1B30;
      v69 = 1852797029;
      v71 = 1852797029;
      v74 = 0;
      v75 = 0;
      v76 = -1;
      __p = &off_1E699E510;
      v72 = &unk_1E699E538;
      v73 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(_QWORD *)&buf[32] = "virtual void HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(AudioDeviceIOProcID, "
                            "AudioTimeStamp *, UInt32)";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
      LODWORD(v83) = 358;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
      v65 = off_1E69A20A0;
      v66 = v63;
      v67 = v64;
      v63 = 0uLL;
      v64 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v65);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v58, (uint64_t)buf);
    }
  }
  v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
  v14 = *((_QWORD *)this + 190);
  v15 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v13 && v14)
  {
    if (!v15)
      goto LABEL_19;
    v16 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    v17 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v13 + 216))(v13);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 366;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v16;
    *(_WORD *)&buf[24] = 2082;
    *(_QWORD *)&buf[26] = v14 + 32;
    *(_WORD *)&buf[34] = 2082;
    *(_QWORD *)&buf[36] = v17;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: %d %{public}s (%{public}s):";
    v20 = 44;
  }
  else
  {
    if (!v15)
      goto LABEL_19;
    v21 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 370;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v21;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: %d:";
    v20 = 24;
  }
  _os_log_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
LABEL_19:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)&__p, *((_QWORD *)this + 184), *((_QWORD *)this + 185));
    if (SHIBYTE(v72) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v23 = *((_QWORD *)this + 3);
    v24 = *(_QWORD *)(v23 + 136);
    v25 = *(_QWORD *)(v23 + 112);
    v26 = "no";
    if (v25 && *(_BYTE *)(v25 + 32))
      v26 = "yes";
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a2;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = p_p;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = v24;
    LOWORD(v83) = 2082;
    *(_QWORD *)((char *)&v83 + 2) = v26;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  \t\t\t\tstarting ProcID %p state: %{public}s IOProc %p: %{public}s", buf, 0x3Au);
    if (SHIBYTE(v72) < 0)
      operator delete(__p);
  }
  HALS_IOContext_Legacy_Impl::Start_ActivateDSP((uint64_t **)this);
  kdebug_trace();
  v27 = a2 == 0;
  v28 = HALS_IOPrewarmManager::Start((_QWORD *)this + 184, v27);
  v30 = v28;
  if ((v28 - 1) >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 381;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: Start failed to change the prewarming state in a reasonable way", buf, 0x12u);
    }
  }
  else if (v28 == 2)
  {
    v31 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
    if (v31)
    {
      if (!*(_BYTE *)(v31 + 32))
        *(_BYTE *)(v31 + 32) = 1;
    }
  }
  v32 = *((_DWORD *)this + 372);
  if (*((_QWORD *)this + 185))
  {
    v33 = 1;
    if (v32)
      goto LABEL_48;
  }
  else
  {
    v33 = *((_QWORD *)this + 184) != 0;
    if (v32)
      goto LABEL_48;
  }
  if (v33)
  {
    if (v9)
    {
      mHostTime = a3->mHostTime;
      *((_QWORD *)this + 178) = mHostTime;
      *((_DWORD *)this + 346) = 1;
      v35 = (AMCP::Log::Scope_Registry *)*((_QWORD *)this + 177);
      if (v35)
      {
        *(_DWORD *)buf = 1;
        v35 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, _BYTE *))(*(_QWORD *)v35 + 48))(v35, buf);
      }
      AMCP::Log::Scope_Registry::get(v35);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v36 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v39 + 16) = 0;
      *(_BYTE *)(v39 + 20) = 0;
      *(_DWORD *)(v39 + 24) = v38;
      *(_QWORD *)(v39 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v39 + 40) = 3772;
      *(_QWORD *)(v39 + 48) = mHostTime;
      *(_QWORD *)v39 = &off_1E69917F0;
      *(_QWORD *)(v39 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v36, (caulk::concurrent::message *)v39);
      v40 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
      *((_DWORD *)this + 346) = 0;
      v49 = *((_QWORD *)this + 177);
      if (v49)
      {
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v49 + 48))(v49, buf);
      }
    }
    *((_DWORD *)this + 265) = v27;
    HALS_IOContext_Legacy_Impl::StartIOThread((HALS_IOContext_Legacy_Impl *)&__p, (uint64_t)this);
    *(_DWORD *)buf = v71;
    *(_WORD *)&buf[4] = 1;
    *(_QWORD *)&buf[8] = 850045863;
    memset(&buf[16], 0, 32);
    v83 = 0u;
    v84 = 0u;
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)buf);
    goto LABEL_60;
  }
LABEL_48:
  if (*((_DWORD *)this + 324))
    goto LABEL_60;
  v43 = HALB_IOThread::WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735354734);
  v44 = HALS_IOContext_Legacy_Impl::ChangeEngineState_On((uint64_t)this, v27);
  v45 = v44;
  if (v43 && v43 != 89)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 423;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v43;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: got a kernel error waiting for IO thread to run, Error: 0x%X", buf, 0x18u);
    }
    v62 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v62 = &off_1E69A1B30;
    v62[2] = v43;
  }
  v46 = *((_DWORD *)this + 264);
  if (v46)
  {
    LOBYTE(__p) = HIBYTE(*((_DWORD *)this + 264));
    BYTE1(__p) = BYTE2(v46);
    BYTE2(__p) = BYTE1(v46);
    *(_WORD *)((char *)&__p + 3) = v46;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 425;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v46;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = &__p;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID returned a thread error waiting for IO thread to run, Error: %d (%s)", buf, 0x22u);
    }
    v59 = __cxa_allocate_exception(0x10uLL);
    v60 = *((_DWORD *)this + 264);
    *(_QWORD *)v59 = &off_1E69A1B30;
    v59[2] = v60;
  }
  if (v44)
  {
    LOBYTE(__p) = HIBYTE(v44);
    BYTE1(__p) = BYTE2(v44);
    BYTE2(__p) = BYTE1(v44);
    *(_WORD *)((char *)&__p + 3) = v44;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 427;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v45;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = &__p;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: got an error from ChangeEngineState_On, possibly indicating a driver failure, Error: %d (%s)", buf, 0x22u);
    }
    v61 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v61 = &off_1E69A1B30;
    v61[2] = v45;
  }
  if (v30 == *((_DWORD *)this + 372))
    goto LABEL_60;
  buf[0] = 0;
  v80[0] = &off_1E698F850;
  v80[1] = HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper;
  v80[2] = buf;
  v81 = v80;
  HALS_IOContext_Legacy_Impl::engine_apply<>((uint64_t)this, (uint64_t)v80);
  v47 = v81;
  if (v81 == v80)
  {
    v48 = 4;
    v47 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_64;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_64:
  if (!buf[0])
  {
    *((_BYTE *)this + 1301) = 1;
    *((_DWORD *)this + 372) = v30;
    HALS_ObjectMap::ReleaseObject(v13, v29);
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v78);
    HALB_Guard::Notify((pthread_cond_t *)((char *)this + 328));
    return os_unfair_recursive_lock_unlock();
  }
LABEL_60:
  *((_DWORD *)this + 372) = v30;
  HALS_ObjectMap::ReleaseObject(v13, v29);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v78);
  return os_unfair_recursive_lock_unlock();
}

void sub_1B5B5F4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,std::exception a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  _DWORD *exception;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *(_DWORD *)(v37 + 1488) = HALS_IOPrewarmManager::Stop((_QWORD *)(v37 + 1472), *(_DWORD *)(v37 + 1060));
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5B5F678()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5B5F730);
}

void sub_1B5B5F688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,std::exception a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v33 - 176) = &unk_1E69A2000;
  v34 = *(_QWORD *)(v33 - 168);
  if (v34 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34))
    *(_QWORD *)(v33 - 168) = 0;
  std::exception::~exception((std::exception *)(v33 - 192));
  a23 = &unk_1E69A2000;
  std::exception::~exception(&a21);
  std::exception::~exception(&a19);
  if (v31)
    __cxa_free_exception(v32);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a31);
  JUMPOUT(0x1B5B5F730);
}

void sub_1B5B5F6E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5B5F6F0()
{
  JUMPOUT(0x1B5B5F6F8);
}

void HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(HALS_IOContext_Legacy_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  char *v4;
  _opaque_pthread_t *v5;
  _opaque_pthread_t *v6;
  int v7;
  HALS_ObjectMap *v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint32_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  HALS_Object *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _BOOL8 v30;
  char *v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  HALB_Mutex *v35;
  _DWORD *exception;
  char *v37;
  int v38;
  _BYTE buf[48];
  __int16 v40;
  const char *v41;
  void *__p[2];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 312;
  v5 = (_opaque_pthread_t *)*((_QWORD *)this + 40);
  v6 = pthread_self();
  v7 = pthread_equal(v5, v6);
  if (!v7)
    os_unfair_recursive_lock_lock_with_options();
  v37 = v4;
  v38 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
  v9 = *((_QWORD *)this + 190);
  v10 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v8 && v9)
  {
    if (!v10)
      goto LABEL_10;
    v11 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    v12 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v8 + 216))(v8);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 486;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v11;
    *(_WORD *)&buf[24] = 2082;
    *(_QWORD *)&buf[26] = v9 + 32;
    *(_WORD *)&buf[34] = 2082;
    *(_QWORD *)&buf[36] = v12;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: %d %{public}s (%{public}s):";
    v15 = 44;
  }
  else
  {
    if (!v10)
      goto LABEL_10;
    v16 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 490;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v16;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: %d:";
    v15 = 24;
  }
  _os_log_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
LABEL_10:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *((_QWORD *)this + 184), *((_QWORD *)this + 185));
    if (v43 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    v18 = *((_QWORD *)this + 3);
    v19 = *(_QWORD *)(v18 + 136);
    v20 = *(_QWORD *)(v18 + 112);
    v21 = "no";
    if (v20 && *(_BYTE *)(v20 + 32))
      v21 = "yes";
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 492;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a2;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v17;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = v19;
    v40 = 2082;
    v41 = v21;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: stopping %p state: %{public}s IOProc %p: %{public}s", buf, 0x3Au);
    if (v43 < 0)
      operator delete(__p[0]);
  }
  v22 = *((_QWORD *)this + 3);
  if (a2
    && *(_QWORD *)(v22 + 112)
    && *(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v22 + 136) != a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 497;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: failed to stop because the IOProcID wasn't nullptr or wasn't registered", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  kdebug_trace();
  v23 = HALS_IOPrewarmManager::Stop((_QWORD *)this + 184, a2 == 0);
  v27 = v23;
  if ((_DWORD)v23 != 2)
  {
    v28 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
    if (v28)
    {
      if (*(_BYTE *)(v28 + 32))
        *(_BYTE *)(v28 + 32) = 0;
    }
  }
  v29 = *((_DWORD *)this + 372);
  if (!*((_QWORD *)this + 185) && v29 && !*((_QWORD *)this + 184))
  {
    *((_DWORD *)this + 265) = a2 == 0;
    HALS_IOContext_Legacy_Impl::StopIOThread(this);
    v33 = 1;
    goto LABEL_45;
  }
  if (!*((_DWORD *)this + 324) && v23 | v29)
  {
    if (v7)
    {
      v30 = a2 == 0;
      v31 = (char *)this + 1064;
      *(_QWORD *)buf = &off_1E698F900;
      *(_QWORD *)&buf[8] = v30 | (v23 << 32);
      v32 = buf;
      *(_QWORD *)&buf[24] = buf;
      if ((char *)this + 1064 == buf)
      {
        v34 = 4;
LABEL_43:
        (*(void (**)(_BYTE *, HALS_Object *, uint64_t, uint64_t))(*(_QWORD *)v32 + 8 * v34))(v32, v24, v25, v26);
        goto LABEL_44;
      }
      if (*((char **)this + 136) == v31)
      {
        std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone((uint64_t)buf, __p);
        *(_QWORD *)&buf[24] = 0;
        (*(void (**)(char *, _BYTE *))(*(_QWORD *)v31 + 24))((char *)this + 1064, buf);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 136) + 32))(*((_QWORD *)this + 136));
        *((_QWORD *)this + 136) = 0;
        *(_QWORD *)&buf[24] = buf;
        (*((void (**)(void **, char *))__p[0] + 3))(__p, (char *)this + 1064);
        (*((void (**)(void **))__p[0] + 4))(__p);
        *((_QWORD *)this + 136) = v31;
        v32 = *(_BYTE **)&buf[24];
      }
      else
      {
        std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone((uint64_t)buf, (_QWORD *)this + 133);
        v32 = (_BYTE *)*((_QWORD *)this + 136);
        *(_QWORD *)&buf[24] = v32;
        *((_QWORD *)this + 136) = v31;
      }
      if (v32 == buf)
      {
        v34 = 4;
        v32 = buf;
        goto LABEL_43;
      }
      if (v32)
      {
        v34 = 5;
        goto LABEL_43;
      }
    }
    else
    {
      HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming((uint64_t)this, a2 == 0, v23);
    }
  }
LABEL_44:
  v33 = 0;
LABEL_45:
  *((_DWORD *)this + 372) = v27;
  HALS_ObjectMap::ReleaseObject(v8, v24);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v37);
  if (v33)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN26HALS_IOContext_Legacy_Impl18Stop_DeactivateDSPEv_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_64_9582;
    *(_QWORD *)&buf[32] = this;
    v35 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v35, (uint64_t)buf);
  }
  if (!v7)
    os_unfair_recursive_lock_unlock();
}

void sub_1B5B5FCC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_Legacy_Impl::PowerChanged(HALS_IOContext_Legacy_Impl *this, int a2)
{
  int v2;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *((_DWORD *)this + 333);
  *((_DWORD *)this + 333) = a2;
  if (v2 != a2)
  {
    v4 = *((_QWORD *)this + 3);
    if ((a2 & 0xFFFFFFFD) == 0)
    {
      *((_BYTE *)this + 1337) = 1;
      if (!a2)
      {
        HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(this);
        HALS_IOContext_Legacy_Impl::PauseIO(this);
LABEL_17:
        HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 328));
        return;
      }
LABEL_12:
      if (!v2)
        HALS_IOContext_Legacy_Impl::ResumeIO(this);
      if (*((_BYTE *)this + 1300))
      {
        if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 64) + 44))
          HALS_IOContext_Legacy_Impl::TakePowerAssertions(this);
      }
      goto LABEL_17;
    }
    if (a2 == 1)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 64) + 43);
    }
    else
    {
      if (a2 != 3)
      {
        v6 = 0;
        goto LABEL_11;
      }
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 64) + 42);
    }
    v6 = v5 == 0;
LABEL_11:
    *((_BYTE *)this + 1337) = v6;
    goto LABEL_12;
  }
}

BOOL HALS_IOContext_Legacy_Impl::PowerHintChanged(HALS_IOContext_Legacy_Impl *this, int a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  unsigned int DevicesDesiredIOBufferFrameSize;
  unsigned int v10;

  if (*((_BYTE *)this + 1325))
    return 0;
  if (a2 == 1)
    v4 = 4096;
  else
    v4 = 512;
  if (*((_BYTE *)this + 1324))
  {
    result = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 190);
    v6 = 13.23;
    if (v5 && *(_QWORD *)(v5 + 8))
      v6 = *(double *)(v5 + 768) * 0.0003;
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
    v8 = v7;
    DevicesDesiredIOBufferFrameSize = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(this, (HALS_IOEngineInfo *)v4);
    v10 = vcvtpd_u64_f64(v6);
    if (DevicesDesiredIOBufferFrameSize > v10)
      v10 = DevicesDesiredIOBufferFrameSize;
    if (v10 >= v8)
      v10 = v8;
    result = *((_DWORD *)this + 330) != v10;
    *((_DWORD *)this + 330) = v10;
  }
  *((_BYTE *)this + 1325) = 0;
  return result;
}

void sub_1B5B5FEC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B5FE20);
}

uint64_t (***HALS_IOContext_Legacy_Impl::SleepingIsAllowedChanged(uint64_t (***this)(), int a2))()
{
  uint64_t (*v2)();

  v2 = this[3][8];
  if (*((unsigned __int8 *)v2 + 44) != a2)
  {
    *((_BYTE *)v2 + 44) = a2;
    if (a2)
    {
      return HALS_IOContext_Legacy_Impl::ReleasePowerAssertions((HALS_IOContext_Legacy_Impl *)this);
    }
    else if (*((_BYTE *)this + 1300))
    {
      return (uint64_t (***)())HALS_IOContext_Legacy_Impl::TakePowerAssertions((HALS_IOContext_Legacy_Impl *)this);
    }
  }
  return this;
}

void sub_1B5B5FF14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *HALS_IOContext_Legacy_Impl::EnableCaptureFiles(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN26HALS_IOContext_Legacy_Impl18EnableCaptureFilesE17AudioCapturerMode_block_invoke;
  v5[3] = &__block_descriptor_tmp_30_9642;
  v6 = a2;
  v7[0] = &off_1E69968C8;
  v7[1] = _Block_copy(v5);
  v8 = v7;
  HALS_IOContext_Legacy_Impl::engine_apply<>(a1, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v4 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1B5B60000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::GetTransportState(HALS_IOContext_Legacy_Impl *this)
{
  int v1;

  v1 = *((_DWORD *)this + 372);
  if (v1 == 1)
    return 1;
  else
    return 2 * (v1 == 2);
}

uint64_t HALS_IOContext_Legacy_Impl::GetMuteState(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 1378);
}

void HALS_IOContext_Legacy_Impl::SetMuteState(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v6;
  int v7;

  v6 = a1 + 312;
  v7 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  *(_BYTE *)(a1 + a2 + 1378) = a3;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v6);
}

uint64_t HALS_IOContext_Legacy_Impl::SetComposition(HALS_IOContext_Legacy_Impl *this, CFDictionaryRef theDict)
{
  HALS_ObjectMap *v4;
  uint64_t v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  CFTypeRef v12;
  HALB_Mutex *v13;
  unsigned int **v14;
  HALB_Mutex *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 v19;
  __int32 *v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  HALS_Object *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  HALS_ObjectMap *v31;
  HALS_ObjectMap *v32;
  HALS_Object *v33;
  HALS_ObjectMap *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  const AudioObjectPropertyAddress *v39;
  uint64_t v40;
  uint64_t v41;
  HALS_Object *v42;
  HALS_Object *v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[8];
  _QWORD v50[3];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *(*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  _QWORD v56[3];
  __int16 v57;
  _QWORD *v58;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *(*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  __int128 __p;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  char v76[8];
  const __CFNumber *v77;
  void (**v78)(OS::CF::Dictionary *__hidden);
  CFTypeRef cf;
  _QWORD v80[6];
  __int32 *v81;
  __int32 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  __n128 (*v87)(_QWORD *, uint64_t);
  HALS_ObjectMap ***(*v88)(uint64_t, HALS_Object *);
  HALS_ObjectMap **v89[5];

  v89[3] = *(HALS_ObjectMap ***)MEMORY[0x1E0C80C00];
  if (theDict)
    CFRetain(theDict);
  v78 = &off_1E69A0DE0;
  cf = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v76, theDict, CFSTR("device id"));
  v4 = (HALS_ObjectMap *)OS::CF::Number::GetValue<unsigned int>(v77, 0);
  v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
  v6 = (HALS_ObjectMap *)v5;
  if (v5)
    v7 = *(_QWORD *)(v5 + 144);
  else
    v7 = 0x200000001;
  v72 = 0;
  v73 = &v72;
  v74 = 0x2000000000;
  v75 = 0;
  v65 = 0;
  v66 = &v65;
  v67 = 0x4802000000;
  v68 = __Block_byref_object_copy__15_9629;
  v69 = __Block_byref_object_dispose__16_9630;
  __p = 0u;
  v71 = 0u;
  v51 = 0;
  v52 = &v51;
  v53 = 0x9802000000;
  v54 = __Block_byref_object_copy__9631;
  v55 = __Block_byref_object_dispose__9632;
  v8 = *((_QWORD *)this + 3);
  v9 = **(_DWORD **)(v8 + 64);
  v10 = *(_DWORD *)(v8 + 16);
  v59[0] = 0;
  v59[1] = 0;
  v57 = 0;
  memset(v56, 0, sizeof(v56));
  v58 = v59;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = v9;
  v64 = v10;
  HALS_IOContext_Legacy_Impl::PauseIO(this);
  v11 = MEMORY[0x1E0C809B0];
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 1174405120;
  v49[2] = ___ZN26HALS_IOContext_Legacy_Impl14SetCompositionEPK14__CFDictionary_block_invoke;
  v49[3] = &unk_1E698F480;
  v49[7] = this;
  v50[0] = &off_1E69A0E58;
  v12 = cf;
  if (cf)
    CFRetain(cf);
  v50[0] = &off_1E69A0DE0;
  v50[1] = v12;
  v50[2] = v7;
  v49[4] = &v51;
  v49[5] = &v65;
  v49[6] = &v72;
  v13 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v49);
  HALS_MutationChangeSynchronizer::Wait((AMCP::Log::Scope_Registry **)v52[5], (HALS_MutationChangeSynchronizer *)v52[6]);
  v45 = 0;
  v46 = 0;
  HALS_System::GetInstance(&v47, 0, &v45);
  v14 = (unsigned int **)*((_QWORD *)this + 3);
  v84 = 0;
  v85 = &v84;
  v86 = 0x4002000000;
  v87 = __Block_byref_object_copy__138;
  v88 = __Block_byref_object_dispose__139;
  memset(v89, 0, 24);
  v80[0] = v11;
  v80[1] = 0x40000000;
  v80[2] = ___ZNK11HALS_System23UpdateTapsForNewContextEP14HALS_IOContext_block_invoke;
  v80[3] = &unk_1E697E300;
  v80[4] = &v84;
  v80[5] = v47;
  v15 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 56))(v47);
  HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v80);
  v17 = v85[5];
  v16 = v85[6];
  while (v17 != v16)
  {
    v18 = *(_QWORD *)v17;
    v19 = *v14[8];
    if (!*(_BYTE *)(*(_QWORD *)v17 + 81))
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v18 + 88), *v14[8]))goto LABEL_20;
LABEL_19:
      HALS_Tap::AddTapToContext((HALS_Tap *)v18, (HALS_IOContext *)v14);
      goto LABEL_20;
    }
    v81 = 0;
    v82 = 0;
    v83 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, *(const void **)(v18 + 208), *(_QWORD *)(v18 + 216), (uint64_t)(*(_QWORD *)(v18 + 216) - *(_QWORD *)(v18 + 208)) >> 2);
    v21 = v81;
    v20 = v82;
    v22 = wmemchr(v81, v19, v82 - v81);
    if (v22)
      v23 = v22;
    else
      v23 = v20;
    if (v21)
      operator delete(v21);
    if (v23 != v20)
      goto LABEL_19;
LABEL_20:
    v17 += 8;
  }
  _Block_object_dispose(&v84, 8);
  HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser(v89, v24);
  v25 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v46;
  if (v46)
  {
    v29 = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*((_QWORD *)this + 3) + 64));
  if (v31)
  {
    v32 = (HALS_ObjectMap *)*(unsigned int *)(*((_QWORD *)this + 3) + 16);
    v34 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v32);
    if (v34)
    {
      v35 = 0;
      v36 = 0;
      v84 = 1;
      do
      {
        v37 = v35;
        v38 = *((unsigned int *)&v84 + v36);
        if (HALS_Client::ShouldMuteContext(v31, *((_DWORD *)&v84 + v36), v32))
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)v34 + 12) + 544))(*((_QWORD **)v34 + 12), v38, 1);
        v35 = 1;
        v36 = 1;
      }
      while ((v37 & 1) == 0);
    }
    HALS_ObjectMap::ReleaseObject(v34, v33);
  }
  HALS_IOContext_Legacy_Impl::UpdatePowerAssertions((int8x8_t **)this);
  v39 = (const AudioObjectPropertyAddress *)v66[5];
  v40 = (v66[6] - (uint64_t)v39) >> 2;
  if (-1431655765 * (_DWORD)v40)
    HALS_Object::PropertiesChanged(*((HALS_Object **)this + 3), (HALS_NotificationManager *)*((unsigned int *)v66 + 16), **(unsigned int **)(*((_QWORD *)this + 3) + 64), 0xAAAAAAAAAAAAAAABLL * v40, v39);
  HALS_IOContext_Legacy_Impl::ResumeIO(this);
  v41 = *((unsigned int *)v73 + 6);
  HALS_ObjectMap::ReleaseObject(v31, v42);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v50);
  _Block_object_dispose(&v51, 8);
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v56);
  _Block_object_dispose(&v65, 8);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  _Block_object_dispose(&v72, 8);
  HALS_ObjectMap::ReleaseObject(v6, v43);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v76);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v78);
  return v41;
}

void sub_1B5B605E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OS::CF::UntypedObject *a9, HALS_MutationChangeSynchronizer *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

const void *HALS_IOContext_Legacy_Impl::GetComposition(HALS_IOContext_Legacy_Impl *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 188);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 188);
  }
  return result;
}

void HALS_IOContext_Legacy_Impl::GetBufferFrameSizeRange(HALS_IOContext_Legacy_Impl *this, AudioValueRange *a2, double a3)
{
  Float64 v4;
  double v5;
  uint64_t v6;
  double v7;

  if (*((_BYTE *)this + 1324))
  {
    LODWORD(a3) = *((_DWORD *)this + 330);
    v4 = (double)*(unint64_t *)&a3;
    a2->mMinimum = v4;
    LODWORD(v4) = *((_DWORD *)this + 330);
    v5 = (double)*(unint64_t *)&v4;
  }
  else
  {
    v6 = *((_QWORD *)this + 190);
    v7 = 13.23;
    if (v6 && *(_QWORD *)(v6 + 8))
      v7 = *(double *)(v6 + 768) * 0.0003;
    a2->mMinimum = ceil(v7);
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  }
  a2->mMaximum = v5;
}

void HALS_IOContext_Legacy_Impl::SetBufferFrameSize(HALS_IOContext_Legacy_Impl *this, int a2, char a3)
{
  HALB_Mutex *v5;
  uint64_t v6;
  HALS_NotificationManager *v7;
  uint64_t v8;
  _DWORD *exception;
  int v10;
  _QWORD v11[7];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  AudioObjectPropertyAddress v21;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN26HALS_IOContext_Legacy_Impl18SetBufferFrameSizeEjb_block_invoke;
  v11[3] = &unk_1E698F4B8;
  v11[5] = &v13;
  v11[6] = this;
  v12 = a2;
  v11[4] = &v17;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  if (*((_DWORD *)v14 + 6))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v10 = *((_DWORD *)v14 + 6);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v10;
  }
  if (*((_BYTE *)v18 + 24) && (a3 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = (HALS_NotificationManager *)*(unsigned int *)(v6 + 72);
    if (!(_DWORD)v7)
      v7 = (HALS_NotificationManager *)*(unsigned int *)(v6 + 16);
    v8 = **(unsigned int **)(v6 + 64);
    *(_QWORD *)&v21.mSelector = 0x676C6F626673697ALL;
    v21.mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v6, v7, v8, 1, &v21);
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1B5B608CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::SetIOCycleUsage(HALS_IOContext_Legacy_Impl *this, float a2)
{
  HALB_Mutex *v3;
  uint64_t v4;
  HALS_NotificationManager *v5;
  uint64_t v6;
  _DWORD *exception;
  int v8;
  _QWORD v9[7];
  float v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  AudioObjectPropertyAddress v19;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN26HALS_IOContext_Legacy_Impl15SetIOCycleUsageEf_block_invoke;
  v9[3] = &unk_1E698F4E0;
  v9[5] = &v11;
  v9[6] = this;
  v10 = a2;
  v9[4] = &v15;
  v3 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v9);
  if (*((_DWORD *)v12 + 6))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v8 = *((_DWORD *)v12 + 6);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v8;
  }
  if (*((_BYTE *)v16 + 24))
  {
    v4 = *((_QWORD *)this + 3);
    v5 = (HALS_NotificationManager *)*(unsigned int *)(v4 + 72);
    if (!(_DWORD)v5)
      v5 = (HALS_NotificationManager *)*(unsigned int *)(v4 + 16);
    v6 = **(unsigned int **)(v4 + 64);
    *(_QWORD *)&v19.mSelector = 0x676C6F626E637963;
    v19.mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v4, v5, v6, 1, &v19);
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_1B5B60A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

float HALS_IOContext_Legacy_Impl::GetIOCycleUsage(HALS_IOContext_Legacy_Impl *this)
{
  return *((float *)this + 332);
}

uint64_t HALS_IOContext_Legacy_Impl::GetMasterDevice(HALS_IOContext_Legacy_Impl *this)
{
  HALB_Mutex *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK26HALS_IOContext_Legacy_Impl15GetMasterDeviceEv_block_invoke;
  v4[3] = &unk_1E698F508;
  v4[4] = &v5;
  v4[5] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1B5B60AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::SetStreamUsage(_DWORD *a1, unsigned int *a2, unsigned int a3, int a4)
{
  unsigned int v8;
  HALS_IOContextDescription *v9;
  unsigned int NumberStreams;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *exception;
  _BYTE v17[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v17 = 136315394;
      *(_QWORD *)&v17[4] = "HALS_IOContext_Legacy_Impl.cpp";
      v18 = 1024;
      v19 = 4808;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::SetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", v17, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v8 = *a2;
  v9 = (HALS_IOContextDescription *)(a1 + 374);
  NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 374), a4);
  v11 = ((unint64_t)a3 + 0x3FFFFFFFCLL) >> 2;
  if (v8 < v11)
    LODWORD(v11) = v8;
  if (NumberStreams >= v11)
    v12 = v11;
  else
    v12 = NumberStreams;
  *(_QWORD *)v17 = a1 + 78;
  *(_DWORD *)&v17[8] = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 82));
  HALS_IOContextDescription::UnregisterBuffers(v9);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = a2 + 1;
    do
    {
      HALS_IOContextDescription::SetStreamIsEnabledAtIndex(v9, a4, v13, v14[v13] != 0);
      ++v13;
    }
    while (v12 != v13);
  }
  if ((a4 & 1) == 0)
    HALS_IOContextDescription::PushStreamUsageToEngines(v9, 1);
  HALS_IOContextDescription::PushStreamUsageToEngines(v9, a4);
  HALS_IOContextDescription::RegisterBuffers(v9);
  HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(a1, a4);
  HALS_IOContextDescription::ClearInactiveInputSharedBuffers(v9, a1[330]);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)v17);
  return 0;
}

void sub_1B5B60CE8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B60C14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::GetStreamUsage(uint64_t a1, unsigned int *a2, unsigned int a3, int a4)
{
  HALS_IOContextDescription *v7;
  unsigned int NumberStreams;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = (HALS_IOContextDescription *)(a1 + 1496);
  NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), a4);
  v9 = 4 * NumberStreams + 4;
  if (v9 > a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_IOContext_Legacy_Impl.cpp";
      v17 = 1024;
      v18 = 4873;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  *a2 = NumberStreams;
  if (NumberStreams)
  {
    v10 = 0;
    v11 = NumberStreams;
    v12 = a2 + 1;
    do
    {
      v12[v10] = HALS_IOContextDescription::IsStreamEnabledAtIndex(v7, a4, v10);
      ++v10;
    }
    while (v11 != v10);
  }
  return v9;
}

uint64_t HALS_IOContext_Legacy_Impl::SetIOProcStreamUsage(HALS_IOContext_Legacy_Impl *this, const AudioHardwareIOProcStreamUsage *a2, unsigned int a3, int a4)
{
  UInt32 mNumberStreams;
  HALS_IOContextDescription *v9;
  unsigned int NumberStreams;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UInt32 *mStreamIsOn;
  _DWORD *exception;
  _BYTE v17[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v17 = 136315394;
      *(_QWORD *)&v17[4] = "HALS_IOContext_Legacy_Impl.cpp";
      v18 = 1024;
      v19 = 4917;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::SetIOProcStreamUsage: bad property data size for kAudioDevicePropertyIOProcStreamUsage", v17, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  mNumberStreams = a2->mNumberStreams;
  v9 = (HALS_IOContext_Legacy_Impl *)((char *)this + 1496);
  NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a4);
  v11 = ((unint64_t)a3 + 0x3FFFFFFF4) >> 2;
  if (mNumberStreams < v11)
    LODWORD(v11) = mNumberStreams;
  if (NumberStreams >= v11)
    v12 = v11;
  else
    v12 = NumberStreams;
  *(_QWORD *)v17 = (char *)this + 312;
  *(_DWORD *)&v17[8] = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HALS_IOContextDescription::UnregisterBuffers(v9);
  if ((_DWORD)v12)
  {
    v13 = 0;
    mStreamIsOn = a2->mStreamIsOn;
    do
    {
      HALS_IOContextDescription::SetStreamIsEnabledAtIndex(v9, a4, v13, mStreamIsOn[v13] != 0);
      ++v13;
    }
    while (v12 != v13);
  }
  if ((a4 & 1) == 0)
    HALS_IOContextDescription::PushStreamUsageToEngines(v9, 1);
  HALS_IOContextDescription::PushStreamUsageToEngines(v9, a4);
  HALS_IOContextDescription::RegisterBuffers(v9);
  HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(this, a4);
  HALS_IOContextDescription::ClearInactiveInputSharedBuffers(v9, *((_DWORD *)this + 330));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)v17);
  return 0;
}

void sub_1B5B6108C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B60FB8);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::GetIOProcStreamUsage(HALS_IOContext_Legacy_Impl *this, AudioHardwareIOProcStreamUsage *a2, unsigned int *a3, char a4)
{
  HALB_Mutex *v5;
  _DWORD *exception;
  int v7;
  _QWORD v8[9];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK26HALS_IOContext_Legacy_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke;
  v8[3] = &unk_1E698F530;
  v9 = a4;
  v8[6] = this;
  v8[7] = a3;
  v8[8] = a2;
  v8[4] = &v14;
  v8[5] = &v10;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  if (*((_DWORD *)v11 + 6))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v7 = *((_DWORD *)v11 + 6);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v7;
  }
  *a3 = *((_DWORD *)v15 + 6);
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
}

void sub_1B5B61200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::SetIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this, os_workgroup_s *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  HALS_NotificationManager *v15;
  uint64_t v16;
  HALB_Mutex *v17;
  int v18;
  char v19[8];
  caulk::mach::details *v20;
  __int128 v21;
  _BYTE v22[25];
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[26];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  caulk::mach::os_workgroup_interval_managed::from_get((caulk::mach::os_workgroup_interval_managed *)v19, a2);
  v17 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  v18 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  v4 = caulk::mach::details::retain_os_object(v20, v3);
  v26 = v21;
  *(_OWORD *)v27 = *(_OWORD *)v22;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v22[9];
  v5 = MEMORY[0x1E0DDB768] + 16;
  v24 = MEMORY[0x1E0DDB768] + 16;
  v25 = v4;
  v27[25] = v23;
  v6 = operator new();
  *(_OWORD *)(v6 + 41) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  v7 = v25;
  *(_QWORD *)v6 = v5;
  *(_QWORD *)(v6 + 8) = v7;
  v25 = 0;
  caulk::mach::details::release_os_object(0, v8);
  v9 = *(_QWORD *)(v6 + 48);
  v11 = *(_OWORD *)(v6 + 16);
  v10 = *(_OWORD *)(v6 + 32);
  v12 = *(_OWORD *)v27;
  *(_OWORD *)(v6 + 16) = v26;
  *(_OWORD *)(v6 + 32) = v12;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)&v27[16];
  v26 = v11;
  *(_OWORD *)v27 = v10;
  *(_QWORD *)&v27[16] = v9;
  *(_WORD *)(v6 + 56) = *(_WORD *)&v27[24];
  *(_WORD *)&v27[24] = 0;
  v13 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = v6;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v24);
  HALB_Guard::Locker::~Locker(&v17);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v19);
  v14 = *((_QWORD *)this + 3);
  v15 = (HALS_NotificationManager *)*(unsigned int *)(v14 + 16);
  v16 = **(unsigned int **)(v14 + 64);
  v24 = 0x676C6F626F737767;
  LODWORD(v25) = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)v14, v15, v16, 1, (const AudioObjectPropertyAddress *)&v24);
}

void sub_1B5B61390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v1;
  _BYTE v3[8];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  HALS_IOThread::GetIOThreadOSWorkgroup((HALS_IOThread *)v3, (uint64_t)this + 312);
  v1 = v4;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v3);
  return v1;
}

uint64_t HALS_IOContext_Legacy_Impl::CopyIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this)
{
  void *v1;
  uint64_t v2;
  _BYTE v4[8];
  caulk::mach::details *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  HALS_IOThread::GetIOThreadOSWorkgroup((HALS_IOThread *)v4, (uint64_t)this + 312);
  v2 = caulk::mach::details::retain_os_object(v5, v1);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v4);
  return v2;
}

void HALS_IOContext_Legacy_Impl::SetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_Legacy_Impl *this, char a2)
{
  _DWORD *exception;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 1300))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "HALS_IOContext_Legacy_Impl.cpp";
      v5 = 1024;
      v6 = 5012;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::_SetPropertyData: can't set kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart while playing", (uint8_t *)&v3, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  *((_BYTE *)this + 1336) = a2;
  HALS_IOContext_Legacy_Impl::UpdatePowerAssertions((int8x8_t **)this);
}

uint64_t HALS_IOContext_Legacy_Impl::GetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1336);
}

uint64_t HALS_IOContext_Legacy_Impl::SetHandleOverloadWithCatchup(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1469) = a2;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::GetHandleOverloadWithCatchup(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1469);
}

void HALS_IOContext_Legacy_Impl::GetStreamInfo(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5)
{
  unsigned int v8;
  _QWORD *v9;
  unsigned int NumberStreams;
  unsigned int v11;
  unint64_t v12;

  v8 = a3 / 0x38;
  v9 = (_QWORD *)(a1 + 1496);
  NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), a5);
  if (NumberStreams >= v8)
    v11 = v8;
  else
    v11 = NumberStreams;
  *a4 = v11;
  if (v11)
  {
    v12 = 0;
    do
    {
      HALS_IOContextDescription::GetStreamInfoAtIndex(v9, a5, v12++, a2);
      a2 += 56;
    }
    while (v12 < *a4);
  }
}

double HALS_IOContext_Legacy_Impl::GetActualSampleRate(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  double v4;
  double v5;
  BOOL v6;

  v1 = *((_QWORD *)this + 190);
  result = 0.0;
  if (v1)
  {
    if (*((_BYTE *)this + 1300) && (v3 = *(_QWORD *)(v1 + 288)) != 0)
    {
      v4 = *(double *)(v3 + 40 * *(unsigned int *)(v3 + 192) + 200);
      v5 = 24000000.0 / v4;
      v6 = v4 == 0.0;
      result = 0.0;
      if (!v6)
        return v5;
    }
    else if (*(_QWORD *)(v1 + 8))
    {
      return *(double *)(v1 + 768);
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::GetSafetyOffset(HALS_IOContext_Legacy_Impl *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 190);
  if (v2 && *(_QWORD *)(v2 + 8))
    return (*(_DWORD *)(v2 + 4 * a2 + 320)
                        + *(_DWORD *)(v2 + 4 * a2 + 312)
                        + *(_DWORD *)(v2 + 4 * a2 + 336)
                        + *(_DWORD *)(v2 + 4 * a2 + 344));
  else
    return 0;
}

uint64_t HALS_IOContext_Legacy_Impl::GetOwningDeviceID(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 378);
}

void HALS_IOContext_Legacy_Impl::GetHostedDSPProcessorPropertySetInterface(HALS_IOContext_Legacy_Impl *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  HALB_Mutex *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[6];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  std::__shared_weak_count *v19;

  if (*((_QWORD *)this + 260))
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x3802000000;
    v16 = __Block_byref_object_copy__54;
    v17 = __Block_byref_object_dispose__55;
    v18 = 0;
    v19 = 0;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN26HALS_IOContext_Legacy_Impl41GetHostedDSPProcessorPropertySetInterfaceEj_block_invoke;
    v11[3] = &unk_1E698F558;
    v11[4] = &v13;
    v11[5] = this;
    v12 = a2;
    v4 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
    v5 = v14[6];
    *a3 = v14[5];
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    _Block_object_dispose(&v13, 8);
    v8 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1B5B617E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::AddTap(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unsigned __int8 v53;
  void *v54;
  NSObject *v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  uint64_t v58;
  int v59;
  std::vector<char>::value_type __x;
  uint8_t buf[8];
  _BYTE v62[10];
  __int16 v63;
  int v64;
  __int16 v65;
  const char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v55 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      v56 = pthread_self();
      v57 = pthread_mach_thread_np(v56);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v57;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "HALS_IOContext_Legacy_Impl.cpp";
      v63 = 1024;
      v64 = 5642;
      v65 = 2080;
      v66 = "tap.get() != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Invalid Tap", buf, 0x22u);
    }
    abort();
  }
  v58 = a1 + 312;
  v59 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  v8 = *a2;
  v9 = (char *)operator new(0x58uLL);
  v10 = (_QWORD *)(a1 + 1992);
  *(_QWORD *)buf = v9;
  *(_QWORD *)v62 = a1 + 1992;
  v62[8] = 0;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *((_QWORD *)v9 + 2) = v8;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)v9 + 2, 8uLL, &__x);
  v11 = (void **)(a1 + 1976);
  **((_DWORD **)v9 + 6) = 0;
  v9[72] = 0;
  v9[76] = 0;
  v62[8] = 1;
  v12 = *((_QWORD *)v9 + 2);
  v13 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
  v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v13 >> 47) ^ v13);
  v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  *((_QWORD *)v9 + 1) = v15;
  v16 = *(_QWORD *)(a1 + 1984);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = v15;
      if (v16 <= v15)
        v18 = v15 % v16;
    }
    else
    {
      v18 = (v16 - 1) & v15;
    }
    v19 = (_QWORD *)*((_QWORD *)*v11 + v18);
    if (v19)
    {
      for (i = (_QWORD *)*v19; i; i = (_QWORD *)*i)
      {
        v21 = i[1];
        if (v21 == v15)
        {
          if (i[2] == v12)
            goto LABEL_73;
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v21 >= v16)
              v21 %= v16;
          }
          else
          {
            v21 &= v16 - 1;
          }
          if (v21 != v18)
            break;
        }
      }
    }
  }
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 2000) + 1);
  v23 = *(float *)(a1 + 2008);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    v24 = 1;
    if (v16 >= 3)
      v24 = (v16 & (v16 - 1)) != 0;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v16 = *(_QWORD *)(a1 + 1984);
    }
    if (*(_QWORD *)&prime > v16)
      goto LABEL_104;
    if (*(_QWORD *)&prime >= v16)
      goto LABEL_59;
    v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2000) / *(float *)(a1 + 2008));
    if (v16 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
    {
      v34 = std::__next_prime(v34);
    }
    else
    {
      v36 = 1 << -(char)__clz(v34 - 1);
      if (v34 >= 2)
        v34 = v36;
    }
    if (*(_QWORD *)&prime <= v34)
      prime = (int8x8_t)v34;
    if (*(_QWORD *)&prime >= v16)
    {
      v16 = *(_QWORD *)(a1 + 1984);
      goto LABEL_59;
    }
    if (prime)
    {
LABEL_104:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = operator new(8 * *(_QWORD *)&prime);
      v29 = *v11;
      *v11 = v28;
      if (v29)
        operator delete(v29);
      v30 = 0;
      *(int8x8_t *)(a1 + 1984) = prime;
      do
        *((_QWORD *)*v11 + v30++) = 0;
      while (*(_QWORD *)&prime != v30);
      v31 = (_QWORD *)*v10;
      if (*v10)
      {
        v32 = v31[1];
        v33 = (uint8x8_t)vcnt_s8(prime);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        *((_QWORD *)*v11 + v32) = v10;
        v37 = (_QWORD *)*v31;
        if (*v31)
        {
          do
          {
            v38 = v37[1];
            if (v33.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            if (v38 != v32)
            {
              if (!*((_QWORD *)*v11 + v38))
              {
                *((_QWORD *)*v11 + v38) = v31;
                goto LABEL_55;
              }
              *v31 = *v37;
              *v37 = **((_QWORD **)*v11 + v38);
              **((_QWORD **)*v11 + v38) = v37;
              v37 = v31;
            }
            v38 = v32;
LABEL_55:
            v31 = v37;
            v37 = (_QWORD *)*v37;
            v32 = v38;
          }
          while (v37);
        }
      }
      v16 = (unint64_t)prime;
    }
    else
    {
      v54 = *v11;
      *v11 = 0;
      if (v54)
        operator delete(v54);
      v16 = 0;
      *(_QWORD *)(a1 + 1984) = 0;
    }
  }
LABEL_59:
  v39 = *((_QWORD *)v9 + 1);
  v40 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
  v40.i16[0] = vaddlv_u8(v40);
  if (v40.u32[0] > 1uLL)
  {
    if (v39 >= v16)
      v39 %= v16;
  }
  else
  {
    v39 &= v16 - 1;
  }
  v41 = *v11;
  v42 = (_QWORD *)*((_QWORD *)*v11 + v39);
  if (v42)
  {
    *(_QWORD *)v9 = *v42;
LABEL_71:
    *v42 = v9;
    goto LABEL_72;
  }
  *(_QWORD *)v9 = *v10;
  *v10 = v9;
  v41[v39] = v10;
  if (*(_QWORD *)v9)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    if (v40.u32[0] > 1uLL)
    {
      if (v43 >= v16)
        v43 %= v16;
    }
    else
    {
      v43 &= v16 - 1;
    }
    v42 = (char *)*v11 + 8 * v43;
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 2000);
  *(_QWORD *)buf = 0;
LABEL_73:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  v44 = *a2;
  v45 = std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>((_QWORD *)(a1 + 1976), *a2);
  if (!v45)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v46 = v45;
  v47 = a2[1];
  if (v47)
  {
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = (std::__shared_weak_count *)v45[4];
  v45[3] = v44;
  v45[4] = v47;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  *((_BYTE *)v46 + 40) = 1;
  if (a4)
  {
    *((_DWORD *)v46 + 18) = a3;
    *((_BYTE *)v46 + 76) = 1;
    *((_DWORD *)v46 + 20) = HIDWORD(a3);
  }
  if (*(_BYTE *)(a1 + 1300))
  {
    v53 = atomic_load((unsigned __int8 *)v46 + 42);
    if ((v53 & 1) == 0)
      HALS_IOContext_Legacy_Impl::StartTapOutput(a1, (uint64_t)(v46 + 3));
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v58);
}

void sub_1B5B61E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::RemoveTap(int8x8_t *a1, unint64_t *a2)
{
  int8x8_t *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  int8x8_t *v16;
  int v17;
  _QWORD v18[2];
  char v19;

  v16 = a1 + 39;
  v17 = HALB_Mutex::Lock((HALB_Mutex *)&a1[41]);
  v4 = a1 + 247;
  v5 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>(&a1[247], *a2);
  if (v5)
  {
    v6 = v5;
    if (a1[162].i8[4])
    {
      HALS_MultiTap::writer_stop(*((HALS_MultiTap **)v5 + 3), *(_DWORD *)(*(_QWORD *)&a1[3] + 16));
      atomic_store(0, v6 + 42);
      atomic_store(0, v6 + 41);
    }
    v7 = a1[248];
    v8 = *((_QWORD *)v6 + 1);
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(unsigned __int8 **)(*(_QWORD *)v4 + 8 * v8);
    do
    {
      v11 = (int8x8_t *)v10;
      v10 = *(unsigned __int8 **)v10;
    }
    while (v10 != v6);
    if (v11 == &a1[249])
      goto LABEL_21;
    v12 = (unint64_t)v11[1];
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
    }
    else
    {
      v12 &= *(_QWORD *)&v7 - 1;
    }
    if (v12 != v8)
    {
LABEL_21:
      if (!*(_QWORD *)v6)
        goto LABEL_22;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v8)
LABEL_22:
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v8) = 0;
    }
    v14 = *(int8x8_t *)v6;
    if (*(_QWORD *)v6)
    {
      v15 = *(_QWORD *)(*(_QWORD *)&v14 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v7)
          v15 %= *(_QWORD *)&v7;
      }
      else
      {
        v15 &= *(_QWORD *)&v7 - 1;
      }
      if (v15 != v8)
      {
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v15) = v11;
        v14 = *(int8x8_t *)v6;
      }
    }
    *v11 = v14;
    *(_QWORD *)v6 = 0;
    --*(_QWORD *)&a1[250];
    v18[0] = v6;
    v18[1] = a1 + 249;
    v19 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v16);
}

void HALS_IOContext_Legacy_Impl::notify_any_waiting_autostart_contexts(HALS_IOContext_Legacy_Impl *this)
{
  HALB_Guard::Notify((pthread_cond_t *)((char *)this + 328));
}

void HALS_IOContext_Legacy_Impl::notify_waiting_tap_consumers_that_producer_has_fully_started(HALS_IOContext_Legacy_Impl *this)
{
  if (!*((_BYTE *)this + 1300))
    HALB_Guard::Notify((pthread_cond_t *)((char *)this + 328));
}

uint64_t HALS_IOContext_Legacy_Impl::ShouldBlockStartOnTapStart(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1714);
}

uint64_t HALS_IOContext_Legacy_Impl::CountTapsForUnitTests(HALS_IOContext_Legacy_Impl *this)
{
  return *((_QWORD *)this + 250);
}

BOOL HALS_IOContext_Legacy_Impl::Start_ActivateDSP(uint64_t **this)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  int v8;
  void **v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  HALB_Mutex *v14;
  _BOOL8 v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  HALB_Mutex *v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  NSObject **v36;
  unsigned __int8 v37;
  NSObject *v38;
  _DWORD *v39;
  HALB_Mutex *v40;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  int v44;
  _QWORD v45[5];
  _QWORD v46[7];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  _QWORD v51[7];
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint8_t *v55;
  void *__p;
  void **p_p;
  uint64_t v58;
  int v59;
  uint8_t buf[8];
  __int128 v61;
  __int16 v62;
  int v63;
  __int16 v64;
  void **v65;
  _QWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)this[236] | (unint64_t)this[232])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = (std::__shared_weak_count *)v61;
    v3 = **(NSObject ***)buf;
    if ((_QWORD)v61)
    {
      v4 = (unint64_t *)(v61 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v8 = *((_DWORD *)this[3] + 4);
      HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes((HALS_IOContextDescription::HostedDSPDescription *)&__p, (uint64_t)(this + 219));
      v9 = v58 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v7;
      LOWORD(v61) = 2080;
      *(_QWORD *)((char *)&v61 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD5(v61) = 1024;
      HIDWORD(v61) = 5748;
      v62 = 1024;
      v63 = v8;
      v64 = 2080;
      v65 = v9;
      _os_log_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::Start_ActivateDSP [hal_dsp] (Context ID: %d) - HOSTED DSP ENABLED %s", buf, 0x28u);
      if (SHIBYTE(v58) < 0)
        operator delete(__p);
    }
    v10 = this[3];
    v11 = *(_DWORD *)v10[8];
    v12 = *((_DWORD *)v10 + 4);
    v66[0] = 0;
    v66[1] = 0;
    *(_QWORD *)buf = 0;
    v61 = 0uLL;
    v62 = 0;
    v65 = (void **)v66;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = v11;
    v71 = v12;
    __p = 0;
    p_p = &__p;
    v58 = 0x2000000000;
    v59 = 0;
    v52 = 0;
    v53 = &v52;
    v54 = 0x2000000000;
    v55 = buf;
    v13 = MEMORY[0x1E0C809B0];
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v51[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke;
    v51[3] = &unk_1E698F580;
    v51[5] = &v52;
    v51[6] = this;
    v51[4] = &__p;
    v14 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v10 + 56))(v10);
    HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v51);
    if (*((_DWORD *)p_p + 6))
    {
      v15 = 0;
LABEL_39:
      v45[0] = v13;
      v45[1] = 0x40000000;
      v45[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_2;
      v45[3] = &__block_descriptor_tmp_63_9591;
      v45[4] = this;
      v40 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*this[3] + 56))(this[3]);
      HALB_CommandGate::ExecuteCommand(v40, (uint64_t)v45);
      _Block_object_dispose(&v52, 8);
      _Block_object_dispose(&__p, 8);
      HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)buf);
      return v15;
    }
    HALS_MutationChangeSynchronizer::Wait(*(AMCP::Log::Scope_Registry ***)buf, (HALS_MutationChangeSynchronizer *)v61);
    v20 = *((_DWORD *)p_p + 6);
    v15 = v20 == 0;
    v21 = *(unsigned __int8 *)(v53[3] + 25) | v20;
    v22 = v21 == 0;
    if (v21)
    {
      if (!*(_BYTE *)(v53[3] + 25))
        goto LABEL_39;
    }
    else
    {
      v47 = 0;
      v48 = &v47;
      v49 = 0x2000000000;
      v50 = 0;
      v46[0] = v13;
      v46[1] = 0x40000000;
      v46[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_61;
      v46[3] = &unk_1E698F5A8;
      v46[4] = &v47;
      v46[5] = &v52;
      v46[6] = this;
      v23 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*this[3] + 56))(this[3]);
      HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v46);
      v24 = *((_DWORD *)v48 + 6);
      _Block_object_dispose(&v47, 8);
      if (v24 != 1685285985)
      {
        v15 = 1;
        goto LABEL_39;
      }
    }
    v25 = this[3];
    v26 = this[260];
    v28 = *v26;
    v27 = v26[1];
    if (v28 == v27)
    {
      v31 = 0;
    }
    else
    {
      v29 = v28 + 24;
      do
      {
        v30 = *(_DWORD *)(v29 - 24);
        v31 = v30 == 1768845428;
        v32 = v30 == 1768845428 || v29 == v27;
        v29 += 24;
      }
      while (!v32);
    }
    v33 = *(_DWORD *)v25[8];
    v34 = *((_DWORD *)this + 378);
    v35 = *((_DWORD *)v25 + 4);
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    v36 = (NSObject **)HALS_ObjectMap::sNormalPriorityQueue;
    v37 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
    if ((v37 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    v38 = *v36;
    v39 = (_DWORD *)operator new();
    *v39 = v33;
    v39[1] = v34;
    v39[2] = v35;
    *((_BYTE *)v39 + 12) = v22;
    *((_BYTE *)v39 + 13) = v31;
    dispatch_async_f(v38, v39, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &)::{lambda(void *)#1}::__invoke);
    goto LABEL_39;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v16 = (std::__shared_weak_count *)v61;
  v17 = **(NSObject ***)buf;
  if ((_QWORD)v61)
  {
    v18 = (unint64_t *)(v61 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v42 = pthread_self();
    v43 = pthread_mach_thread_np(v42);
    v44 = *((_DWORD *)this[3] + 4);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v43;
    LOWORD(v61) = 2080;
    *(_QWORD *)((char *)&v61 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD5(v61) = 1024;
    HIDWORD(v61) = 5742;
    v62 = 1024;
    v63 = v44;
    _os_log_debug_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::Start_ActivateDSP [hal_dsp] >>>> (Context ID: %d) - HOSTED DSP IS NOT ENABLED <<<<", buf, 0x1Eu);
  }
  return 0;
}

void sub_1B5B625A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::Stop_DeactivateDSP(HALS_IOContext_Legacy_Impl *this)
{
  HALB_Mutex *v1;
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN26HALS_IOContext_Legacy_Impl18Stop_DeactivateDSPEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_64_9582;
  v2[4] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

uint64_t HALS_IOContext_Legacy_Impl::HandleClientTimeout(uint64_t this, int a2)
{
  if (a2)
  {
    if (!*(_BYTE *)(this + 2032))
    {
      *(_BYTE *)(this + 2032) = 1;
      *(_QWORD *)(this + 2040) = *(unsigned int *)(this + 1304);
    }
  }
  else if (*(_BYTE *)(this + 2032))
  {
    *(_BYTE *)(this + 2032) = 0;
    *(_QWORD *)(this + 2048) = *(unsigned int *)(this + 1304);
  }
  return this;
}

void ___ZN26HALS_IOContext_Legacy_Impl18Stop_DeactivateDSPEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  v7 = v1 + 312;
  v8 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  v2 = *(uint64_t **)(v1 + 2080);
  v3 = *v2;
  v4 = v2[1];
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v5 + 304);
    if (v6)
    {
      v9 = *(_DWORD *)(v5 + 316);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v9);
    }
    v3 += 24;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v7);
}

void sub_1B5B62718(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B62708);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  uint64_t v35;
  int v36;
  void **v37;
  NSObject **buf;
  _BYTE buf_8[40];
  void *__p[2];
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  v35 = v2 + 312;
  v36 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  v3 = v2 + 1496;
  HALS_IOContextHostedDSP::Initialize(*(HALS_IOContextHostedDSP **)(v2 + 2080), (HALS_IOContextDescription *)(v2 + 1496), **(_DWORD **)(*(_QWORD *)(v2 + 24) + 64), *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16));
  v4 = *(_QWORD *)(v2 + 2080);
  v5 = *(_DWORD *)(v2 + 1320);
  v6 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
  v7 = HALS_IOContextHostedDSP::Negotiate_Internal(v4, v3, v5, (uint64_t)v6, 1);
  v8 = v7;
  if ((_DWORD)v7 == 1685287013)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)buf_8;
    v10 = *buf;
    if (*(_QWORD *)buf_8)
    {
      v11 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v32;
      *(_WORD *)buf_8 = 2080;
      *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 996;
      _os_log_debug_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Attempting to negotiate 'bypass' with hosted DSP.", (uint8_t *)&buf, 0x18u);
    }
    v13 = HALS_IOContextHostedDSP::Negotiate_Internal(v4, v3, v5, (uint64_t)v6, 5);
    buf = 0;
    memset(&buf_8[8], 0, 32);
    *(_QWORD *)buf_8 = &buf_8[8];
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    HALS_MutationChangeSynchronizer::SetItinerary(v6, (const MutationItinerary *)&buf);
    if (v13)
      v8 = v13;
    else
      v8 = 1685283449;
    if (__p[1])
    {
      *(void **)&v41 = __p[1];
      operator delete(__p[1]);
    }
    v37 = (void **)&buf_8[24];
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)&buf_8[8]);
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v8;
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)buf_8;
    v15 = *buf;
    if (*(_QWORD *)buf_8)
    {
      v16 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v7 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v7)
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v34;
      *(_WORD *)buf_8 = 2080;
      *(_QWORD *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5764;
      _os_log_debug_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - Negotiate ok.", (uint8_t *)&buf, 0x18u);
    }
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v18 == 1685283449)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v25 = *(std::__shared_weak_count **)buf_8;
    v26 = *buf;
    if (*(_QWORD *)buf_8)
    {
      v27 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      LODWORD(buf) = 67109891;
      HIDWORD(buf) = v30;
      *(_WORD *)buf_8 = 2080;
      *(_QWORD *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5771;
      *(_WORD *)&buf_8[16] = 2081;
      *(_QWORD *)&buf_8[18] = "[hal_dsp] Start DSP - Negotiated for BYPASS.";
      _os_log_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&buf, 0x22u);
    }
    goto LABEL_39;
  }
  if (v18 == 1685287789)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)buf_8;
    v20 = *buf;
    if (*(_QWORD *)buf_8)
    {
      v21 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v24;
      *(_WORD *)buf_8 = 2080;
      *(_QWORD *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5767;
      _os_log_debug_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - Negotiate OK, but same as previous request.", (uint8_t *)&buf, 0x18u);
    }
LABEL_39:
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v35);
}

void sub_1B5B62C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  _DWORD *v16;

  if (a2)
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
    v16 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8) + 24) = v16[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B62B30);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_61(_QWORD *a1)
{
  uint64_t v2;
  HALS_IOContextHostedDSP *v3;
  int v4;
  HALS_MutationChangeSynchronizer *v5;
  _QWORD *v6;
  int active;
  AMCP::Log::Scope_Registry *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  _BYTE v29[24];
  AMCP::Log::Scope_Registry *v30;
  _BYTE v31[24];
  AMCP::Log::Scope_Registry *v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  uint8_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  v25 = v2 + 312;
  v26 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  v3 = *(HALS_IOContextHostedDSP **)(v2 + 2080);
  v4 = *(_DWORD *)(v2 + 1320);
  v5 = *(HALS_MutationChangeSynchronizer **)(*(_QWORD *)(a1[5] + 8) + 24);
  v28 = 0;
  v27 = 0;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E6994338;
  v6[1] = &v28;
  v6[2] = &v27;
  *((_DWORD *)v6 + 6) = 1;
  *((_DWORD *)v6 + 8) = v4;
  v6[5] = v3;
  v32 = (AMCP::Log::Scope_Registry *)v6;
  active = HALS_IOContextDescription::ApplyToInput<>(v2 + 1496, (uint64_t)v31);
  v8 = v32;
  if (v32 == (AMCP::Log::Scope_Registry *)v31)
  {
    v9 = 4;
    v8 = (AMCP::Log::Scope_Registry *)v31;
    goto LABEL_5;
  }
  if (v32)
  {
    v9 = 5;
LABEL_5:
    v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 8 * v9))();
  }
  if (!v28 || !active)
  {
    v10 = operator new(0x30uLL);
    *v10 = &off_1E69943B8;
    v10[1] = &v28;
    v10[2] = &v27;
    *((_DWORD *)v10 + 6) = 1;
    v10[4] = v3;
    *((_DWORD *)v10 + 10) = v4;
    v30 = (AMCP::Log::Scope_Registry *)v10;
    *(_QWORD *)buf = &off_1E6996590;
    *(_QWORD *)v34 = v2 + 1496;
    active = HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(v2 + 1496, (uint64_t)v29, (uint64_t)buf);
    v8 = v30;
    if (v30 == (AMCP::Log::Scope_Registry *)v29)
    {
      v11 = 4;
      v8 = (AMCP::Log::Scope_Registry *)v29;
      goto LABEL_12;
    }
    if (v30)
    {
      v11 = 5;
LABEL_12:
      v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 8 * v11))();
    }
  }
  AMCP::Log::Scope_Registry::get(v8);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v12 = *(std::__shared_weak_count **)v34;
  v13 = **(NSObject ***)buf;
  if (*(_QWORD *)v34)
  {
    v14 = (unint64_t *)(*(_QWORD *)v34 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v16 = pthread_self();
    v17 = pthread_mach_thread_np(v16);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)v34 = 2080;
    *(_QWORD *)&v34[2] = "HALS_IOContextHostedDSP.cpp";
    v35 = 1024;
    v36 = 1340;
    LOWORD(v37) = 1024;
    *(_DWORD *)((char *)&v37 + 2) = v28;
    _os_log_debug_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] %d streams with DSP adapted.", buf, 0x1Eu);
    if (active)
      goto LABEL_20;
LABEL_24:
    if (!v27)
    {
      active = 0;
      goto LABEL_42;
    }
    v18 = *(_QWORD *)v3;
    v19 = *((_QWORD *)v3 + 1);
    if (*(_QWORD *)v3 == v19)
    {
LABEL_33:
      v22 = 0;
    }
    else
    {
      v20 = *(_QWORD *)v3;
      while (1)
      {
        if (*(_DWORD *)v20 == 1768845428)
        {
          v21 = *(_QWORD *)(v20 + 16);
          if (v21)
            break;
        }
        v20 += 24;
        if (v20 == v19)
        {
          while (1)
          {
            if (*(_DWORD *)v18 == 1869968496)
            {
              v21 = *(_QWORD *)(v18 + 16);
              if (v21)
                goto LABEL_35;
            }
            v18 += 24;
            if (v18 == v19)
              goto LABEL_33;
          }
        }
      }
LABEL_35:
      v22 = *(_DWORD *)(v21 + 312);
    }
    *(_DWORD *)(v2 + 1928) = v22;
    *(_BYTE *)(v2 + 1932) = 1;
    *(_QWORD *)buf = &off_1E69970A0;
    *(_DWORD *)v34 = v22;
    v37 = buf;
    HALS_IOContextDescription::DiscoverDSPStreams(v2 + 1496, (uint64_t)buf);
    v23 = v37;
    if (v37 == buf)
    {
      v24 = 4;
      v23 = buf;
    }
    else
    {
      if (!v37)
      {
LABEL_41:
        active = 1685285985;
        goto LABEL_42;
      }
      v24 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
    goto LABEL_41;
  }
  if (!active)
    goto LABEL_24;
LABEL_20:
  if (v5 && active == 1685287013)
  {
    HALS_IOContextHostedDSP::Remove_Internal(v3, (HALS_IOContextDescription *)(v2 + 1496), v4, v5);
    active = 1685287013;
  }
LABEL_42:
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = active;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v25);
}

void sub_1B5B63088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  char *v27;
  uint64_t v28;
  _DWORD *v29;

  if (!a2)
    _Unwind_Resume(exception_object);
  v27 = a24;
  if (a24 == &a21)
  {
    v28 = 4;
    v27 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_7;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_7:
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
  v29 = __cxa_begin_catch(exception_object);
  if (a2 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = v29[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 8) + 24) = 2003329396;
  __cxa_end_catch();
  JUMPOUT(0x1B5B6304CLL);
}

uint64_t applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &)::{lambda(void *)#1}::__invoke(AMCP::Log::Scope_Registry *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  HALS_Object *v6;
  HALS_Client *v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[8];
  _BYTE v24[10];
  __int16 v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v24;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v24)
  {
    v4 = (unint64_t *)(*(_QWORD *)v24 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v17 = pthread_self();
    v18 = pthread_mach_thread_np(v17);
    v19 = *((_DWORD *)a1 + 2);
    v20 = "config and latency";
    if (!*((_BYTE *)a1 + 12))
      v20 = "config";
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)v24 = 2080;
    *(_QWORD *)&v24[2] = "HALS_IOContext_Legacy_Impl.cpp";
    v25 = 1024;
    v26 = 5836;
    v27 = 1024;
    v28 = v19;
    v29 = 2080;
    v30 = v20;
    _os_log_debug_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - (%d) Refresh/notify client due to DSP-related %s change.", buf, 0x28u);
  }
  v7 = (HALS_Client *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)a1);
  if (v7)
  {
    v21 = 0;
    v22 = 0;
    HALS_System::GetInstance(buf, 0, &v21);
    v9 = HALS_System::CopyDeviceByObjectID(*(HALS_System **)buf, *((_DWORD *)a1 + 1), v7);
    v10 = *(std::__shared_weak_count **)v24;
    if (*(_QWORD *)v24)
    {
      v11 = (unint64_t *)(*(_QWORD *)v24 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    HALS_ObjectMap::ReleaseObject(v9, v8);
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
  return MEMORY[0x1B5E50688](a1, 0x1000C4099076E91);
}

void sub_1B5B633B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  v7 = v1 + 312;
  v8 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  v2 = *(uint64_t **)(v1 + 2080);
  v3 = *v2;
  v4 = v2[1];
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v5 + 272);
    if (v6)
    {
      v9 = *(_DWORD *)(v5 + 316);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v9);
    }
    v3 += 24;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v7);
}

void sub_1B5B634FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B634ECLL);
}

_QWORD *std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void HALS_IOContext_Legacy_Impl::StartTapOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  unsigned int NumberStreams;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  int64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  _OWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  HALS_Object *v128;
  HALS_ObjectMap *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  AMCP::Log::Scope_Registry *v136;
  std::__shared_weak_count *v137;
  NSObject *v138;
  unint64_t *v139;
  unint64_t v140;
  _opaque_pthread_t *v141;
  mach_port_t v142;
  int v143;
  _DWORD *exception;
  uint64_t v145;
  uint64_t v146;
  HALS_MultiChannelMixer *v147;
  HALS_ObjectMap *v148;
  uint64_t v149;
  char **v150;
  std::string v151;
  char v152;
  __int128 *v153;
  __int128 *v154;
  uint64_t v155;
  void *__p;
  char *v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  char v163;
  _BYTE v164[32];
  __int128 v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  uint8_t *v169;
  _BYTE v170[24];
  _BYTE *v171;
  uint8_t buf[8];
  __int128 v173;
  __int16 v174;
  int v175;
  _BYTE __x[48];
  char v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;

  v2 = a2;
  v180 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v157 = 0;
  v158 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v4 = a2 + 48;
  if (*(_BYTE *)(a2 + 52))
    v5 = *(_DWORD *)v4 == *(_DWORD *)(a1 + 1512);
  else
    v5 = 0;
  v152 = 0;
  v6 = *(_DWORD *)(a2 + 56);
  v171 = 0;
  v7 = operator new(0x30uLL);
  *v7 = &off_1E6991BB8;
  v7[1] = &__p;
  v7[2] = &v153;
  v7[3] = &v152;
  *((_DWORD *)v7 + 8) = *(_DWORD *)v4;
  *((_BYTE *)v7 + 36) = *(_BYTE *)(v4 + 4);
  *((_DWORD *)v7 + 10) = v6;
  *((_BYTE *)v7 + 44) = v5;
  v171 = v7;
  HALS_IOContextDescription::ApplyToOutput<>(a1 + 1496, (uint64_t)v170);
  v8 = v171;
  if (v171 == v170)
  {
    v9 = 4;
    v8 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_9:
  v10 = __p != v157 && v152 == 0;
  v11 = v10;
  *(_BYTE *)(v2 + 16) = v11;
  if (v10)
  {
    NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 0);
    v13 = (16 * NumberStreams) | 8;
    __x[0] = 0;
    v14 = *(unsigned int **)(v2 + 24);
    v15 = *(_QWORD *)(v2 + 32) - (_QWORD)v14;
    if (v13 <= v15)
    {
      if (v13 < v15)
        *(_QWORD *)(v2 + 32) = (char *)v14 + v13;
    }
    else
    {
      std::vector<char>::__append((std::vector<char> *)(v2 + 24), v13 - v15, __x);
      v14 = *(unsigned int **)(v2 + 24);
    }
    *v14 = NumberStreams;
    if (*(_BYTE *)(v2 + 52))
      v16 = 2;
    else
      v16 = (*(_BYTE *)(*(_QWORD *)v2 + 36) & 0x20) == 0 && *(_DWORD *)(*(_QWORD *)v2 + 52) != 1;
    v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 1512));
    v19 = (HALS_ObjectMap *)v17;
    if (v17)
    {
      v20 = *(_QWORD *)v2;
      v21 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 216))(v17);
      memset(&v151, 0, sizeof(v151));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v151, v153, v154, 0xAAAAAAAAAAAAAAABLL * (((char *)v154 - (char *)v153) >> 3));
      v162 = v20 + 152;
      v163 = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v20 + 152));
      v22 = 560947818;
      HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v160, v20, v21);
      if (!v160)
      {
        v149 = v2;
        v148 = v19;
        v23 = (char *)operator new(0x138uLL);
        *((_DWORD *)v23 + 6) = v21;
        v145 = v20;
        *(_OWORD *)(v23 + 8) = 0u;
        *((_QWORD *)v23 + 4) = 0;
        v150 = (char **)(v23 + 32);
        *(_QWORD *)v23 = &off_1E699B428;
        *(_OWORD *)(v23 + 40) = 0u;
        *((_DWORD *)v23 + 16) = v16;
        v147 = (HALS_MultiChannelMixer *)(v23 + 64);
        v23[56] = 1;
        *((_QWORD *)v23 + 9) = 0;
        v24 = v23 + 72;
        *((_OWORD *)v23 + 5) = 0u;
        v25 = *(_OWORD *)(v20 + 24);
        v26 = *(_OWORD *)(v20 + 40);
        *((_QWORD *)v23 + 16) = *(_QWORD *)(v20 + 56);
        *((_OWORD *)v23 + 6) = v25;
        *((_OWORD *)v23 + 7) = v26;
        *(_OWORD *)(v23 + 136) = 0u;
        MEMORY[0x1B5E4FD70]();
        v146 = v20 + 24;
        v27 = (char *)__p;
        v28 = v157;
        if (__p != v157)
        {
          do
          {
            v178 = 0uLL;
            v179 = 0;
            *(_DWORD *)__x = *(_DWORD *)v27;
            v29 = *((_QWORD *)v27 + 5);
            v30 = *(_OWORD *)(v27 + 24);
            *(_OWORD *)&__x[8] = *(_OWORD *)(v27 + 8);
            *(_OWORD *)&__x[24] = v30;
            *(_QWORD *)&__x[40] = v29;
            v177 = v27[48];
            v178 = 0uLL;
            v179 = 0;
            v173 = 0uLL;
            *(_QWORD *)buf = 0;
            v169 = buf;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
            *(_OWORD *)v164 = *(_OWORD *)__x;
            *(_OWORD *)&v164[16] = *(_OWORD *)&__x[16];
            v165 = *(_OWORD *)&__x[32];
            v166 = v177;
            v167 = v178;
            v168 = v179;
            v179 = 0;
            v178 = 0uLL;
            *(_QWORD *)buf = &v178;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            v32 = (_OWORD *)*((_QWORD *)v23 + 10);
            v31 = *((_QWORD *)v23 + 11);
            if ((unint64_t)v32 >= v31)
            {
              v37 = (_OWORD *)*v24;
              v38 = 0xCCCCCCCCCCCCCCCDLL * (v32 - v37) + 1;
              if (v38 > 0x333333333333333)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31 - (_QWORD)v37) >> 4);
              if (2 * v39 > v38)
                v38 = 2 * v39;
              if (v39 >= 0x199999999999999)
                v40 = 0x333333333333333;
              else
                v40 = v38;
              if (v40 > 0x333333333333333)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v41 = (char *)operator new(80 * v40);
              v42 = *(_OWORD *)&v164[16];
              v43 = &v41[16 * (v32 - v37)];
              *(_OWORD *)v43 = *(_OWORD *)v164;
              *((_OWORD *)v43 + 1) = v42;
              v44 = &v41[80 * v40];
              *((_OWORD *)v43 + 2) = v165;
              v43[48] = v166;
              *(_OWORD *)(v43 + 56) = v167;
              *((_QWORD *)v43 + 9) = v168;
              v168 = 0;
              v36 = v43 + 80;
              v167 = 0uLL;
              if (v32 == v37)
              {
                *((_QWORD *)v23 + 9) = v43;
                *((_QWORD *)v23 + 10) = v36;
                *((_QWORD *)v23 + 11) = v44;
              }
              else
              {
                do
                {
                  v45 = *(v32 - 5);
                  v46 = *(v32 - 4);
                  v47 = *(v32 - 3);
                  *(v43 - 32) = *((_BYTE *)v32 - 32);
                  *((_OWORD *)v43 - 4) = v46;
                  *((_OWORD *)v43 - 3) = v47;
                  *((_OWORD *)v43 - 5) = v45;
                  *((_QWORD *)v43 - 2) = 0;
                  *((_QWORD *)v43 - 1) = 0;
                  *((_QWORD *)v43 - 3) = 0;
                  *(_OWORD *)(v43 - 24) = *(_OWORD *)((char *)v32 - 24);
                  *((_QWORD *)v43 - 1) = *((_QWORD *)v32 - 1);
                  v43 -= 80;
                  *((_QWORD *)v32 - 3) = 0;
                  *((_QWORD *)v32 - 2) = 0;
                  *((_QWORD *)v32 - 1) = 0;
                  v32 -= 5;
                }
                while (v32 != v37);
                v48 = (_OWORD *)*((_QWORD *)v23 + 9);
                v32 = (_OWORD *)*((_QWORD *)v23 + 10);
                *((_QWORD *)v23 + 9) = v43;
                *((_QWORD *)v23 + 10) = v36;
                *((_QWORD *)v23 + 11) = v44;
                if (v32 != v48)
                {
                  do
                  {
                    *(_QWORD *)__x = (char *)v32 - 24;
                    std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                    v32 -= 5;
                  }
                  while (v32 != v48);
                  v32 = v48;
                }
              }
              v24 = v23 + 72;
              if (v32)
                operator delete(v32);
            }
            else
            {
              v33 = *(_OWORD *)v164;
              v34 = *(_OWORD *)&v164[16];
              v35 = v165;
              *((_BYTE *)v32 + 48) = v166;
              v32[1] = v34;
              v32[2] = v35;
              *v32 = v33;
              *((_QWORD *)v32 + 8) = 0;
              *((_QWORD *)v32 + 9) = 0;
              *((_QWORD *)v32 + 7) = 0;
              *(_OWORD *)((char *)v32 + 56) = v167;
              *((_QWORD *)v32 + 9) = v168;
              v167 = 0uLL;
              v168 = 0;
              v36 = v32 + 5;
            }
            *((_QWORD *)v23 + 10) = v36;
            *(_QWORD *)__x = &v167;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
            v27 += 56;
          }
          while (v27 != v28);
        }
        if (*((_QWORD *)v23 + 10) != *((_QWORD *)v23 + 9))
        {
          v49 = 0;
          v50 = 3;
          do
          {
            HALS_MultiChannelMixer::SetupGainTable(v147, v49);
            v51 = (_OWORD *)*v24;
            if (*(_DWORD *)v147 == 2 && LOBYTE(v51[v50]))
            {
              v52 = *((_QWORD *)v23 + 18) + 1;
              *((_QWORD *)v23 + 17) = v49;
              *((_QWORD *)v23 + 18) = v52;
            }
            ++v49;
            v50 += 5;
          }
          while (v49 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v23 + 10) - (_QWORD)v51) >> 4));
        }
        *(_OWORD *)(v23 + 152) = 0u;
        *(_OWORD *)(v23 + 168) = 0u;
        *(_OWORD *)(v23 + 184) = 0u;
        v53 = *(_OWORD *)v146;
        v54 = *(_OWORD *)(v146 + 16);
        *((_QWORD *)v23 + 29) = *(_QWORD *)(v146 + 32);
        *(_OWORD *)(v23 + 200) = v53;
        *(_OWORD *)(v23 + 216) = v54;
        *((_OWORD *)v23 + 15) = 0u;
        *((_OWORD *)v23 + 16) = 0u;
        *((_OWORD *)v23 + 17) = 0u;
        *((_OWORD *)v23 + 18) = 0u;
        *((_QWORD *)v23 + 38) = 0;
        v55 = (char *)__p;
        v56 = v157;
        if (__p == v157)
        {
          v57 = *((_QWORD *)v23 + 5);
        }
        else
        {
          v57 = *((_QWORD *)v23 + 5);
          do
          {
            *(_OWORD *)__x = *(_OWORD *)(v55 + 8);
            *(_OWORD *)&__x[16] = *(_OWORD *)(v55 + 24);
            *(_QWORD *)&__x[32] = *((_QWORD *)v55 + 5);
            v58 = *((_QWORD *)v23 + 6);
            if (v57 >= v58)
            {
              v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - (_QWORD)*v150) >> 3);
              v62 = v61 + 1;
              if (v61 + 1 > 0x666666666666666)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - (_QWORD)*v150) >> 3);
              if (2 * v63 > v62)
                v62 = 2 * v63;
              if (v63 >= 0x333333333333333)
                v64 = 0x666666666666666;
              else
                v64 = v62;
              if (v64)
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v64);
              else
                v65 = 0;
              v66 = v64 + 40 * v61;
              *(_OWORD *)v66 = *(_OWORD *)__x;
              *(_OWORD *)(v66 + 16) = *(_OWORD *)&__x[16];
              *(_QWORD *)(v66 + 32) = *(_QWORD *)&__x[32];
              v68 = (char *)*((_QWORD *)v23 + 4);
              v67 = (char *)*((_QWORD *)v23 + 5);
              v69 = v66;
              if (v67 != v68)
              {
                do
                {
                  v70 = *(_OWORD *)(v67 - 40);
                  v71 = *(_OWORD *)(v67 - 24);
                  *(_QWORD *)(v69 - 8) = *((_QWORD *)v67 - 1);
                  *(_OWORD *)(v69 - 24) = v71;
                  *(_OWORD *)(v69 - 40) = v70;
                  v69 -= 40;
                  v67 -= 40;
                }
                while (v67 != v68);
                v67 = *v150;
              }
              v57 = v66 + 40;
              *((_QWORD *)v23 + 4) = v69;
              *((_QWORD *)v23 + 5) = v66 + 40;
              *((_QWORD *)v23 + 6) = v64 + 40 * v65;
              if (v67)
                operator delete(v67);
            }
            else
            {
              v59 = *(_OWORD *)(v55 + 8);
              v60 = *(_OWORD *)(v55 + 24);
              *(_QWORD *)(v57 + 32) = *((_QWORD *)v55 + 5);
              *(_OWORD *)v57 = v59;
              *(_OWORD *)(v57 + 16) = v60;
              v57 += 40;
            }
            *((_QWORD *)v23 + 5) = v57;
            v55 += 56;
          }
          while (v55 != v56);
        }
        if (*v150 == (char *)v57)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__x = 136315394;
            *(_QWORD *)&__x[4] = "HALS_MultiTap.cpp";
            *(_WORD *)&__x[12] = 1024;
            *(_DWORD *)&__x[14] = 70;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap_Writer_State::HALS_MultiTap_Writer_State: A writer has to have at least 1 stream", __x, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 1852797029;
        }
        HALS_MultiTap_Writer_State::initialize((HALS_MultiTap_Writer_State *)(v23 + 24));
        *(_QWORD *)&v159 = v23 + 24;
        *((_QWORD *)&v159 + 1) = v23;
        os_unfair_lock_lock((os_unfair_lock_t)(v145 + 320));
        v72 = *(char **)(v145 + 328);
        v73 = *(char **)(v145 + 336);
        AMCP::Utility::Sorted_Vector<std::shared_ptr<HALS_MultiTap_Writer_State>,HALS_MultiTap_Writer_State_Ptr_Extract_Key,std::less<unsigned int>,std::allocator<std::shared_ptr<HALS_MultiTap_Writer_State>>>::find((_DWORD **)v72, (_DWORD **)v73, *(_DWORD *)v159);
        v75 = v74 - v72;
        v76 = (v74 - v72) >> 4;
        v77 = (unint64_t)&v72[(v74 - v72) & 0xFFFFFFFFFFFFFFF0];
        v78 = *(_QWORD *)(v145 + 344);
        if ((unint64_t)v73 >= v78)
        {
          v83 = ((v73 - v72) >> 4) + 1;
          if (v83 >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v84 = v74;
          v85 = v78 - (_QWORD)v72;
          if (v85 >> 3 > v83)
            v83 = v85 >> 3;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
            v86 = 0xFFFFFFFFFFFFFFFLL;
          else
            v86 = v83;
          *(_QWORD *)&v165 = v145 + 344;
          if (v86)
            v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v86);
          else
            v87 = 0;
          v91 = (_QWORD *)(v86 + 16 * v76);
          *(_QWORD *)v164 = v86;
          *(_QWORD *)&v164[8] = v91;
          *(_QWORD *)&v164[16] = v91;
          *(_QWORD *)&v164[24] = v86 + 16 * v87;
          if (v76 == v87)
          {
            if (v75 < 1)
            {
              if (v84 == v72)
                v103 = 1;
              else
                v103 = v75 >> 3;
              *(_QWORD *)&__x[32] = v145 + 344;
              v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v103);
              v106 = *(_QWORD *)&v164[8];
              v107 = *(_QWORD *)&v164[16] - *(_QWORD *)&v164[8];
              if (*(_QWORD *)&v164[16] == *(_QWORD *)&v164[8])
              {
                v112 = vdupq_n_s64(*(unint64_t *)&v164[8]);
                v109 = (unint64_t)&v104[16 * (v103 >> 2)];
              }
              else
              {
                v108 = v107 >> 4;
                v109 = (unint64_t)&v104[16 * (v103 >> 2) + (v107 & 0xFFFFFFFFFFFFFFF0)];
                v110 = 16 * v108;
                v111 = &v104[16 * (v103 >> 2)];
                do
                {
                  *(_OWORD *)v111 = *(_OWORD *)v106;
                  v111 += 16;
                  *(_QWORD *)v106 = 0;
                  *(_QWORD *)(v106 + 8) = 0;
                  v106 += 16;
                  v110 -= 16;
                }
                while (v110);
                v112 = *(int64x2_t *)&v164[8];
              }
              v113 = *(_QWORD *)v164;
              v114 = *(_QWORD *)&v164[24];
              *(_QWORD *)v164 = v104;
              *(_QWORD *)&v164[8] = &v104[16 * (v103 >> 2)];
              *(int64x2_t *)&__x[8] = v112;
              *(_QWORD *)&v164[16] = v109;
              *(_QWORD *)&v164[24] = &v104[16 * v105];
              *(_QWORD *)__x = v113;
              *(_QWORD *)&__x[24] = v114;
              std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)__x);
              v91 = *(_QWORD **)&v164[16];
            }
            else
            {
              v92 = v76 + 2;
              if (v76 >= -1)
                v92 = v76 + 1;
              v91 -= 2 * (v92 >> 1);
              *(_QWORD *)&v164[8] = v91;
              *(_QWORD *)&v164[16] = v91;
            }
          }
          *v91 = v159;
          v115 = *((_QWORD *)&v159 + 1);
          v91[1] = *((_QWORD *)&v159 + 1);
          v19 = v148;
          v2 = v149;
          if (v115)
          {
            v116 = (unint64_t *)(v115 + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
            v91 = *(_QWORD **)&v164[16];
          }
          v118 = v91 + 2;
          *(_QWORD *)&v164[16] = v118;
          v119 = *(_QWORD *)&v164[8];
          v120 = *(_QWORD **)(v145 + 328);
          if (v120 != (_QWORD *)v77)
          {
            v121 = (_QWORD *)v77;
            do
            {
              v122 = *((_OWORD *)v121 - 1);
              v121 -= 2;
              *(_OWORD *)(v119 - 16) = v122;
              v119 -= 16;
              *v121 = 0;
              v121[1] = 0;
            }
            while (v121 != v120);
            v118 = *(_OWORD **)&v164[16];
          }
          *(_QWORD *)&v164[8] = v119;
          v123 = *(_QWORD *)(v145 + 336);
          if (v123 != v77)
          {
            do
            {
              *v118++ = *(_OWORD *)v77;
              *(_QWORD *)v77 = 0;
              *(_QWORD *)(v77 + 8) = 0;
              v77 += 16;
            }
            while (v77 != v123);
            v119 = *(_QWORD *)&v164[8];
          }
          *(_QWORD *)&v164[8] = *(_QWORD *)(v145 + 328);
          *(_QWORD *)&v164[16] = v118;
          v124 = *(_OWORD *)(v145 + 336);
          *(_QWORD *)(v145 + 328) = v119;
          *(_QWORD *)(v145 + 336) = v118;
          v125 = *(_QWORD *)&v164[8];
          *(_QWORD *)(v145 + 344) = *(_QWORD *)&v164[24];
          *(_OWORD *)&v164[16] = v124;
          *(_QWORD *)v164 = v125;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v164);
        }
        else if ((char *)v77 == v73)
        {
          v88 = *((_QWORD *)&v159 + 1);
          *(_OWORD *)v73 = v159;
          v19 = v148;
          v2 = v149;
          if (v88)
          {
            v89 = (unint64_t *)(v88 + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          *(_QWORD *)(v145 + 336) = v73 + 16;
        }
        else
        {
          v79 = (char *)(v77 + 16);
          v80 = (uint64_t)(v73 - 16);
          v2 = v149;
          if ((unint64_t)v73 < 0x10)
          {
            v82 = v73;
          }
          else
          {
            v81 = v73 - 16;
            v82 = v73;
            do
            {
              *(_OWORD *)v82 = *(_OWORD *)v81;
              v82 += 16;
              *(_QWORD *)v81 = 0;
              *((_QWORD *)v81 + 1) = 0;
              v81 += 16;
            }
            while (v81 < v73);
          }
          *(_QWORD *)(v145 + 336) = v82;
          if (v73 != v79)
          {
            v93 = 16 * ((v73 - v79) >> 4);
            do
            {
              v80 = std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v80, (__int128 *)&v72[16 * v76 - 16 + v93])- 16;
              v93 -= 16;
            }
            while (v93);
          }
          v94 = &v159;
          if (v77 <= (unint64_t)&v159)
            v94 = &v159 + (*(_QWORD *)(v145 + 336) > (unint64_t)&v159);
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v19 = v148;
          if (v95)
          {
            v97 = (unint64_t *)(v95 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          *(_QWORD *)v77 = v96;
          v99 = &v72[16 * v76];
          v100 = (std::__shared_weak_count *)*((_QWORD *)v99 + 1);
          *((_QWORD *)v99 + 1) = v95;
          if (v100)
          {
            p_shared_owners = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(p_shared_owners);
            while (__stlxr(v102 - 1, p_shared_owners));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v145 + 320));
        kdebug_trace();
        HALS_MultiTap::start((os_unfair_lock_s *)v145);
        v126 = v145 + 488;
        while (1)
        {
          v126 = *(_QWORD *)v126;
          if (!v126)
            break;
          v127 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v126 + 16));
          v129 = (HALS_ObjectMap *)v127;
          if (v127)
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v127 + 96) + 752))(*(_QWORD *)(v127 + 96), *(unsigned int *)(v127 + 16));
          HALS_ObjectMap::ReleaseObject(v129, v128);
        }
        v130 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
        if (*((_QWORD *)&v159 + 1))
        {
          v131 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        v22 = 0;
      }
      v133 = v161;
      if (v161)
      {
        v134 = (unint64_t *)&v161->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v162);
      *(_QWORD *)buf = &v151;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v22)
      {
        AMCP::Log::Scope_Registry::get(v136);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v137 = (std::__shared_weak_count *)v173;
        v138 = **(NSObject ***)buf;
        if ((_QWORD)v173)
        {
          v139 = (unint64_t *)(v173 + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
        {
          v141 = pthread_self();
          v142 = pthread_mach_thread_np(v141);
          v143 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v142;
          LOWORD(v173) = 2080;
          *(_QWORD *)((char *)&v173 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD5(v173) = 1024;
          HIDWORD(v173) = 5427;
          v174 = 1024;
          v175 = v143;
          _os_log_error_impl(&dword_1B57BA000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to start an ActiveTap for context: %u:", buf, 0x1Eu);
        }
      }
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
  atomic_store(1u, (unsigned __int8 *)(v2 + 18));
  *(_QWORD *)buf = &v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p)
  {
    v157 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B5B6443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__int128 a52,uint64_t a53)
{
  os_unfair_lock_s *v53;
  uint64_t v54;
  AMCP::Log::Scope_Registry *v57;
  int v58;
  NSObject *v59;
  NSObject *v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;

  if (a2)
  {
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&a35);
    os_unfair_lock_unlock(v53);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
    v57 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v58 = *((_DWORD *)v57 + 66);
      AMCP::Log::Scope_Registry::get(v57);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v54 - 240), "com.apple.coreaudio", "AMCP");
      v59 = **(NSObject ***)(v54 - 240);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v54 - 240);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        v61 = pthread_self();
        v62 = pthread_mach_thread_np(v61);
        *(_DWORD *)(v54 - 240) = 67110146;
        *(_DWORD *)(v54 - 236) = v62;
        *(_WORD *)(v54 - 232) = 2080;
        *(_QWORD *)((char *)&a52 + 2) = "HALS_MultiTap.cpp";
        *(_WORD *)(v54 - 222) = 1024;
        *(_DWORD *)(v54 - 220) = 547;
        *(_WORD *)(v54 - 216) = 1024;
        *(_DWORD *)((char *)&a53 + 2) = a16;
        *(_WORD *)(v54 - 210) = 1024;
        *(_DWORD *)(v54 - 208) = v58;
        _os_log_error_impl(&dword_1B57BA000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start multi tap for object %u, error %d", (uint8_t *)(v54 - 240), 0x24u);
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v57);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v54 - 240), "com.apple.coreaudio", "AMCP");
      v60 = **(NSObject ***)(v54 - 240);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v54 - 240);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v63 = pthread_self();
        v64 = pthread_mach_thread_np(v63);
        *(_DWORD *)(v54 - 240) = 67109890;
        *(_DWORD *)(v54 - 236) = v64;
        *(_WORD *)(v54 - 232) = 2080;
        *(_QWORD *)((char *)&a52 + 2) = "HALS_MultiTap.cpp";
        *(_WORD *)(v54 - 222) = 1024;
        *(_DWORD *)(v54 - 220) = 552;
        *(_WORD *)(v54 - 216) = 1024;
        *(_DWORD *)((char *)&a53 + 2) = a16;
        _os_log_error_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start multi tap for object %u", (uint8_t *)(v54 - 240), 0x1Eu);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B641D8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToOutput<>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, a2);
  v3 = (uint64_t)v18;
  if (!v18)
    goto LABEL_4;
  if (v18 != v17)
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
LABEL_4:
    v14 = (_BYTE *)v3;
    goto LABEL_6;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v13);
LABEL_6:
  v16 = 0;
  v4 = operator new(0x28uLL);
  *v4 = &off_1E6996688;
  std::__function::__value_func<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v13);
  v16 = v4;
  v5 = VisitableVector<HALS_IOStackDescription>::apply<>((uint64_t *)(a1 + 80), v15);
  v6 = v16;
  if (v16 == v15)
  {
    v7 = 4;
    v6 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
    goto LABEL_20;
  }
  if (v18)
  {
    v11 = 5;
LABEL_20:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v5;
}

void sub_1B5B64A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6996688;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6996688;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6996688;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5B64C1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6996688;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EEclESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  int v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  v4 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v3 = (uint64_t *)(*(_QWORD *)a2 + 8);
  if (*(uint64_t **)(*(_QWORD *)a2 + 16) == v4
    || ((v5 = *v4,
         -1944890851 * ((unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8) - v5) >> 3))
      ? (v6 = v5 == 0)
      : (v6 = 1),
        v6))
  {
    v7 = 0;
  }
  else
  {
    if (!*(_DWORD *)(v5 + 108)
      || ((v8 = *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120) != v8) ? (v9 = v8 == 0) : (v9 = 1), v9))
    {
      v8 = v5 + 408;
    }
    v7 = *(_DWORD *)(*(_QWORD *)v8 + 308);
  }
  v14[0] = a2;
  v14[1] = v2;
  v15 = v7;
  v16[0] = &off_1E6996708;
  v16[1] = v14;
  v17 = v16;
  v10 = VisitableVector<HALS_IOStreamGroup>::apply<>(v3, v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_20;
  }
  if (v17)
  {
    v12 = 5;
LABEL_20:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_1B5B64DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS3_E13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS5_E13ItemWithIndexEE_NS_9allocatorISJ_EEFiSI_EE11target_typeEv()
{
  return &_ZTIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS3_E13ItemWithIndexEE_;
}

uint64_t VisitableVector<HALS_IOStreamGroup>::apply<>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v13);
    }
    else
    {
      v14 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v14 = 0;
  }
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_14:
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    while (1)
    {
      if ((v7 & 1) != 0)
        v6 = 0;
      else
        ++v6;
      v12[0] = v4;
      v12[1] = v6;
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      v8 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v12);
      if ((_DWORD)v8)
        break;
      v7 = 0;
      v4 += 24;
      if (v4 == v5)
        goto LABEL_14;
    }
  }
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_19;
  }
  if (v14)
  {
    v10 = 5;
LABEL_19:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_1B5B64F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6996708;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EE7__cloneEPNS0_6__baseISR_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6996708;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EEclESN_(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  __int128 *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v9 = *v3;
  v10 = *((_QWORD *)v3 + 2);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E6996788;
  *(_OWORD *)(v4 + 8) = v9;
  *((_QWORD *)v4 + 3) = v10;
  v12 = v4;
  v5 = VisitableVector<HALS_IOStreamInfo>::apply<>(v2, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_1B5B6510C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS3_E13ItemWithIndexEE_clESG_EUlRNSD_I18HALS_IOStreamGroupE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_I18HALS_IOStreamGroupE13ItemWithIndexEE_NS_9allocatorISO_EEFiSN_EE11target_typeEv()
{
  return &_ZTIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS3_E13ItemWithIndexEE_clESG_EUlRNSD_I18HALS_IOStreamGroupE13ItemWithIndexEE_;
}

void _ZNSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6996788;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6996788;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EEclESM_(uint64_t a1, uint64_t a2)
{
  return std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8), **(_QWORD **)(a1 + 8), *(_DWORD *)(a1 + 24), *(_DWORD *)(a2 + 8));
}

uint64_t _ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS3_E13ItemWithIndexEE_clESG_EUlRNSD_IS5_E13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS5_E13ItemWithIndexEE_clESI_EUlRNSF_IS7_E13ItemWithIndexEE_NS_9allocatorISN_EEFiSM_EE11target_typeEv()
{
  return &_ZTIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS3_E13ItemWithIndexEE_clESG_EUlRNSD_IS5_E13ItemWithIndexEE_;
}

uint64_t std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  int v6;
  int v7;
  int v8;

  v8 = a2;
  v6 = a5;
  v7 = a4;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *, int *))(*(_QWORD *)a1 + 48))(a1, &v8, a3, &v7, &v6);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6991BB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E6991BB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  int v8;
  __int128 v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int DeviceIDFromEngineID;
  BOOL v15;
  char v16;
  __int128 v17;
  std::__split_buffer<std::string>::pointer first;
  char **v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v43;
  std::__compressed_pair<std::string *> end_cap;
  std::__split_buffer<std::string> __v;

  v8 = *a5;
  if (*(_DWORD *)(a6 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, (uint64_t *)(a6 + 112));
  }
  else
  {
    v9 = *(_OWORD *)(a6 + 384);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)(a6 + 368);
    *(_OWORD *)&__v.__end_ = v9;
    __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(a6 + 400);
  }
  if (LODWORD(__v.__begin_) != 1819304813 || (BYTE4(__v.__begin_) & 0x40) != 0)
    **(_BYTE **)(a1 + 24) = 1;
  if (!*(_DWORD *)(a6 + 108) || (v11 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) == v11) || !v11)
    v11 = (uint64_t *)(a6 + 408);
  v12 = *v11;
  v13 = *(_QWORD *)(*v11 + 8);
  if (v13)
    DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v13 + 16));
  else
    DeviceIDFromEngineID = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 44))
    {
      v15 = *(_DWORD *)(a1 + 40) == v8;
      goto LABEL_21;
    }
    if (*(_DWORD *)(a1 + 32) == DeviceIDFromEngineID)
    {
      v15 = *(_DWORD *)(a1 + 40) == *(_DWORD *)(a6 + 12);
LABEL_21:
      v16 = v15;
      goto LABEL_25;
    }
  }
  v16 = 0;
LABEL_25:
  if (*(_DWORD *)(a6 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, (uint64_t *)(a6 + 112));
  }
  else
  {
    v17 = *(_OWORD *)(a6 + 384);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)(a6 + 368);
    *(_OWORD *)&__v.__end_ = v17;
    __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(a6 + 400);
  }
  first = __v.__first_;
  v43 = *(_OWORD *)&__v.__begin_;
  end_cap = __v.__end_cap_;
  if (*(double *)&__v.__first_ != 0.0)
  {
    v19 = *(char ***)(a1 + 8);
    v21 = v19[1];
    v20 = (unint64_t)v19[2];
    if ((unint64_t)v21 >= v20)
    {
      v23 = *v19;
      v24 = 0x6DB6DB6DB6DB6DB7 * ((v21 - *v19) >> 3);
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x492492492492492)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (_QWORD)v23) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x249249249249249)
        v27 = 0x492492492492492;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = (char *)operator new(56 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[56 * v24];
      *(_DWORD *)v29 = DeviceIDFromEngineID;
      *((_QWORD *)v29 + 1) = first;
      *((_OWORD *)v29 + 1) = v43;
      *((std::__compressed_pair<std::string *> *)v29 + 2) = end_cap;
      v29[48] = v16;
      v22 = v29 + 56;
      if (v21 != v23)
      {
        do
        {
          v30 = *(_OWORD *)(v21 - 56);
          v31 = *(_OWORD *)(v21 - 40);
          v32 = *(_OWORD *)(v21 - 24);
          *(v29 - 8) = *(v21 - 8);
          *(_OWORD *)(v29 - 24) = v32;
          *(_OWORD *)(v29 - 40) = v31;
          *(_OWORD *)(v29 - 56) = v30;
          v29 -= 56;
          v21 -= 56;
        }
        while (v21 != v23);
        v21 = *v19;
      }
      *v19 = v29;
      v19[1] = v22;
      v19[2] = &v28[56 * v27];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v21 = DeviceIDFromEngineID;
      *((_QWORD *)v21 + 1) = first;
      *((_OWORD *)v21 + 1) = v43;
      *((std::__compressed_pair<std::string *> *)v21 + 2) = end_cap;
      v21[48] = v16;
      v22 = v21 + 56;
    }
    v19[1] = v22;
    v33 = *(_QWORD *)(a1 + 16);
    v34 = *(_QWORD *)(v33 + 8);
    v35 = *(_QWORD *)(v33 + 16);
    if (v34 >= v35)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)v33) >> 3);
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)v33) >> 3);
      v39 = 2 * v38;
      if (2 * v38 <= v37 + 1)
        v39 = v37 + 1;
      if (v38 >= 0x555555555555555)
        v40 = 0xAAAAAAAAAAAAAAALL;
      else
        v40 = v39;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v33 + 16);
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v40);
      else
        v41 = 0;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v40;
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v40 + 24 * v37);
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = (std::string *)(v40 + 24 * v41);
      std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, (char *)(v12 + 32));
      ++__v.__end_;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v33, &__v);
      v36 = *(_QWORD *)(v33 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(v33 + 8), (char *)(v12 + 32));
      v36 = v34 + 24;
      *(_QWORD *)(v33 + 8) = v34 + 24;
    }
    *(_QWORD *)(v33 + 8) = v36;
  }
  return 0;
}

void sub_1B5B656C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::string> *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl14StartTapOutputERNS_9ActiveTapEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

__n128 __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__55(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN26HALS_IOContext_Legacy_Impl41GetHostedDSPProcessorPropertySetInterfaceEj_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 2080);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    v5 = *(_DWORD *)(a1 + 48);
    do
    {
      v6 = *(_QWORD *)(v3 + 16);
      if (*(_DWORD *)(v6 + 4) == v5 || *(_DWORD *)(v6 + 8) == v5)
      {
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v6 + 136) + 40))(&v13);
        if ((_QWORD)v13)
          goto LABEL_13;
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
        if (*((_QWORD *)&v13 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  v13 = 0uLL;
LABEL_13:
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v13);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(int8x8_t **this)
{
  int8x8_t *v2;
  _BOOL4 v3;
  int8x8_t *v4;
  int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  __int32 v10;
  CFTypeRef v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD v17[2];
  _BOOL4 v18;
  void (**v19)(OS::CF::String *__hidden);
  const __CFString *v20;
  char v21[8];
  CFTypeRef cf;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v21);
  if (!*((_BYTE *)this + 1713))
  {
    if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[203], 0, (uint64_t)&this[203][(unint64_t)this[204] >> 6], this[204] & 0x3F, 1))
    {
      v19 = &off_1E69A0F60;
      v20 = CFSTR("audio-in");
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, CFSTR("audio-in"));
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
    }
    if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[200], 0, (uint64_t)&this[200][(unint64_t)this[201] >> 6], this[201] & 0x3F, 1))
    {
      v19 = &off_1E69A0F60;
      v20 = CFSTR("audio-out");
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, CFSTR("audio-out"));
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
    }
    v2 = this[190];
    if (v2)
    {
      OS::CF::String::String((OS::CF::String *)&v19, (const char *)&v2[4]);
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, v20);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
    }
  }
  v3 = *((_BYTE *)this + 1336) == 0;
  v4 = this[3];
  v5 = *(_DWORD *)(*(_QWORD *)&v4[8] + 4);
  v6 = v5 <= 0;
  v7 = v5 > 0;
  v8 = v5 & 0xFFFFFF00;
  v9 = v5 & ~(v5 >> 31);
  v10 = v4[2].i32[0];
  if (v6)
    v8 = 0;
  LODWORD(v15) = v10;
  HIDWORD(v15) = v8 & 0xFFFFFF00 | v9;
  v16 = v7;
  v17[0] = &off_1E69A0E58;
  v11 = cf;
  if (cf)
    CFRetain(cf);
  v17[0] = &off_1E69960C8;
  v18 = v3;
  v24 = 0;
  v12 = operator new(0x30uLL);
  *v12 = &off_1E698FC08;
  v12[1] = v15;
  *((_BYTE *)v12 + 16) = v16;
  v17[1] = 0;
  v12[3] = &off_1E69960C8;
  v12[4] = v11;
  *((_DWORD *)v12 + 10) = v3;
  v24 = v12;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, v23);
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v14 = 5;
LABEL_17:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v21);
}

void sub_1B5B65A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = a1[170];
  v3 = (std::__shared_weak_count *)a1[171];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    v6 = a1[168];
    v19 = v2;
    v20 = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  else
  {
    v6 = a1[168];
    v19 = a1[170];
    v20 = 0;
  }
  v8 = v21;
  v9 = a2[3];
  if (!v9)
    goto LABEL_11;
  if ((_QWORD *)v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_11:
    v22 = (_QWORD *)v9;
    goto LABEL_13;
  }
  v22 = v21;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v21);
LABEL_13:
  v10 = atomic_load((unsigned __int8 *)(v6 + 32));
  if ((v10 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v6 + 33));
  v11 = *(NSObject **)v6;
  v12 = (_QWORD *)operator new();
  v13 = v20;
  *v12 = v19;
  v12[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (uint64_t)v22;
  if (!v22)
    goto LABEL_21;
  if (v22 != v21)
  {
    v16 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_21:
    v12[5] = v16;
    goto LABEL_23;
  }
  v12[5] = v12 + 2;
  (*(void (**)(_QWORD *))(v21[0] + 24))(v21);
LABEL_23:
  v18 = 0;
  dispatch_async_f(v11, v12, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100](&v18);
  if (v22 == v21)
  {
    v17 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_28;
    v17 = 5;
    v8 = v22;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_28:
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_1B5B65CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;

  if (a2)
  {
    v13 = *(std::__shared_weak_count **)(v11 + 8);
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v8 = a1;
  v9 = 0;
  v10 = 0;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v10 = std::__shared_weak_count::lock(v2);
    if (v10)
    {
      v9 = *a1;
      if (v9)
      {
        v3 = a1[5];
        if (!v3)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v9);
      }
    }
  }
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_1B5B65DA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B65D48);
}

void sub_1B5B65DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = *(_QWORD **)(v2 + 40);
  if (v3 == (_QWORD *)(v2 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(v2 + 16);
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  MEMORY[0x1B5E50688](v2, 0x1020C407A7143E5);
  return a1;
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698FC08;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 3));
  return a1;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698FC08;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 3));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E698FC08;
  v2[1] = v3;
  *((_BYTE *)v2 + 16) = *(_BYTE *)(a1 + 16);
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v2 + 3), *(CFTypeRef *)(a1 + 32));
  v2[3] = &off_1E69960C8;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

OS::CF::UntypedObject *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  OS::CF::UntypedObject *result;

  *(_QWORD *)a2 = &off_1E698FC08;
  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a2 + 24), *(CFTypeRef *)(a1 + 32));
  *(_QWORD *)(a2 + 24) = &off_1E69960C8;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::destroy(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 24));
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::destroy_deallocate(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 24));
  operator delete((void *)a1);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  IOPMAssertionID **v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  IOPMAssertionID *v10;
  CFStringRef v11;
  CFStringRef v12;
  IOPMAssertionID *v13;
  const __CFString *v14;
  CFStringRef v15;
  unint64_t *v16;
  unint64_t v17;
  void (**v18)(OS::CF::String *__hidden);
  CFStringRef v19;
  void (**v20)(OS::CF::String *__hidden);
  const __CFString *v21;
  void (**v22)(OS::CF::String *__hidden);
  CFStringRef v23;
  void (**v24)(OS::CF::String *__hidden);
  const __CFString *v25;

  v3 = *(IOPMAssertionID ***)a2;
  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 12);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(a1 + 40);
  v20 = &off_1E69A0F60;
  v18 = &off_1E69A0F60;
  v19 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.audio.context%d.preventuseridlesleep"), v6);
  v10 = (IOPMAssertionID *)operator new();
  v21 = 0;
  v22 = &off_1E69A0F60;
  v24 = &off_1E69A0F60;
  v25 = CFSTR("PreventUserIdleSystemSleep");
  v11 = v19;
  v19 = 0;
  v23 = v11;
  HALB_PowerAssertion::HALB_PowerAssertion((uint64_t)v10, (uint64_t)&v24, (uint64_t)&v22, v7, v8, v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v22);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v24);
  std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](v3, v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v20);
  v20 = &off_1E69A0F60;
  v21 = CFSTR("PreventUserIdleDisplaySleep");
  v12 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.audio.context%d.preventuseridledisplaysleep"), v6);
  v18 = &off_1E69A0F60;
  v19 = v12;
  v13 = (IOPMAssertionID *)operator new();
  v14 = v21;
  v21 = 0;
  v22 = &off_1E69A0F60;
  v24 = &off_1E69A0F60;
  v25 = v14;
  v15 = v19;
  v19 = 0;
  v23 = v15;
  HALB_PowerAssertion::HALB_PowerAssertion((uint64_t)v13, (uint64_t)&v24, (uint64_t)&v22, v7, v8, 1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v22);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v24);
  std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](v3 + 1, v13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v20);
  if (v2)
  {
    v16 = (unint64_t *)&v2->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B5B661D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va3);
  MEMORY[0x1B5E50688](v4, 0x10C0C40D06D8F89);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl21UpdatePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

IOPMAssertionID **std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](IOPMAssertionID **result, IOPMAssertionID *a2)
{
  IOPMAssertionID *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      IOPMAssertionRelease(*v2);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v2 + 8));
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v2 + 4));
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t ___ZNK26HALS_IOContext_Legacy_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke(uint64_t a1)
{
  HALS_IOContextDescription *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_IOContextDescription *)(*(_QWORD *)(a1 + 48) + 1496);
  result = HALS_IOContextDescription::GetNumberStreams(v2, *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 4 * result + 12;
  if (**(_DWORD **)(a1 + 56) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "HALS_IOContext_Legacy_Impl.cpp";
      v12 = 1024;
      v13 = 4970;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetIOProcStreamUsage: bad property data size for kAudioDevicePropertyIOProcStreamUsage", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v4 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v4 + 8) = result;
  if ((_DWORD)result)
  {
    v5 = 0;
    v6 = *(unsigned __int8 *)(a1 + 72);
    v7 = result;
    v8 = v4 + 12;
    do
    {
      result = HALS_IOContextDescription::IsStreamEnabledAtIndex(v2, v6 != 0, v5);
      *(_DWORD *)(v8 + 4 * v5++) = result;
    }
    while (v7 != v5);
  }
  return result;
}

void sub_1B5B66488(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  if (a2)
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      v5 = v4[2];
    else
      v5 = 2003329396;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v5;
    __cxa_end_catch();
    JUMPOUT(0x1B5B663B8);
  }
  _Unwind_Resume(a1);
}

_DWORD *HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(_DWORD *this, int a2)
{
  HALS_IOContext_Legacy_Impl *v2;
  uint64_t v3;

  if (this[118] != 1735552612)
  {
    v2 = (HALS_IOContext_Legacy_Impl *)this;
    if (this[118] != 1718185577)
    {
      v3 = 472;
      if (a2)
        v3 = 464;
      if (*(_QWORD *)&this[v3])
      {
        this = (_DWORD *)HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContextDescription *)(this + 374), a2);
        if ((_DWORD)this)
        {
          HALS_IOContext_Legacy_Impl::PauseIO(v2);
          return (_DWORD *)HALS_IOContext_Legacy_Impl::ResumeIO(v2);
        }
      }
    }
  }
  return this;
}

uint64_t ___ZNK26HALS_IOContext_Legacy_Impl15GetMasterDeviceEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 1520);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
      if (result)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = *(_DWORD *)(result + 16);
    }
  }
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl15SetIOCycleUsageEf_block_invoke(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  v5 = v2 + 312;
  v6 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  v3 = *(float *)(a1 + 56);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(float *)(v2 + 1328) != v3;
  *(float *)(v2 + 1328) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 80);
  if (v4)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 48))(v4, *(float *)(a1 + 56));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v5);
}

void sub_1B5B66630(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _DWORD *v12;

  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  v12 = __cxa_begin_catch(a1);
  if (a2 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 24) = v12[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 24) = 2003329396;
  __cxa_end_catch();
  JUMPOUT(0x1B5B6661CLL);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18SetBufferFrameSizeEjb_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;

  v1 = *(_QWORD *)(result + 48);
  *(_BYTE *)(v1 + 1325) = 1;
  if (!*(_BYTE *)(v1 + 1324))
  {
    v2 = result;
    v3 = *(_QWORD *)(v1 + 1520);
    v4 = 13.23;
    if (v3 && *(_QWORD *)(v3 + 8))
      v4 = *(double *)(v3 + 768) * 0.0003;
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContextDescription *)(v1 + 1496));
    v6 = v5;
    result = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)v1, (HALS_IOEngineInfo *)*(unsigned int *)(v2 + 56));
    v7 = vcvtpd_u64_f64(v4);
    if (result > v7)
      v7 = result;
    if (v7 >= v6)
      v7 = v6;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = *(_DWORD *)(v1 + 1320) != v7;
    *(_DWORD *)(v1 + 1320) = v7;
  }
  return result;
}

void sub_1B5B66738(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = v4[2];
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = 2003329396;
  __cxa_end_catch();
}

uint64_t HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(HALS_IOContext_Legacy_Impl *this, HALS_IOEngineInfo *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v4 = (unsigned int *)*((_QWORD *)this + 190);
  if (!v4
    || !HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper((HALS_IOContext_Legacy_Impl *)&v9, v4, a2))
  {
    v5 = operator new(0x20uLL);
    *v5 = &off_1E6991470;
    v5[1] = HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper;
    v5[2] = &v9;
    *((_DWORD *)v5 + 6) = (_DWORD)a2;
    v11 = v5;
    HALS_IOContext_Legacy_Impl::engine_apply<>((uint64_t)this, (uint64_t)v10);
    v6 = v11;
    if (v11 == v10)
    {
      v7 = 4;
      v6 = v10;
      goto LABEL_7;
    }
    if (v11)
    {
      v7 = 5;
LABEL_7:
      (*(void (**)(void))(*v6 + 8 * v7))();
    }
  }
  return v9;
}

void sub_1B5B66868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unsigned int *HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper(HALS_IOContext_Legacy_Impl *this, unsigned int *a2, HALS_IOEngineInfo *a3)
{
  unsigned int *result;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v9 = (int)a3;
  v7 = *(_QWORD *)"zsfcbolg";
  v8 = 0;
  result = (unsigned int *)*((_QWORD *)a2 + 1);
  if (result)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 320))(result);
    if (result)
    {
      v5 = result;
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)result + 88))(result, result[4], &v7, 0);
      if ((_DWORD)result)
      {
        v6 = 0;
        (*(void (**)(unsigned int *, _QWORD, uint64_t *, uint64_t, int *, HALS_IOContext_Legacy_Impl *, uint64_t, int *, _QWORD))(*(_QWORD *)v5 + 112))(v5, v5[4], &v7, 4, &v6, this, 4, &v9, 0);
        return (unsigned int *)*(unsigned int *)this;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (**v15)(FilterEngineInfoWithoutEngine *__hidden);
  _QWORD v16[2];
  _QWORD *v17[2];
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  v15 = &off_1E6992878;
  v20[0] = &off_1E698F7D0;
  v20[1] = v18;
  v21 = v20;
  v23 = v22;
  std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone((uint64_t)v20, v22);
  v3 = *(_QWORD **)(a1 + 1528);
  v4 = *(_QWORD **)(a1 + 1536);
  if (v3 == v4)
  {
LABEL_10:
    v7 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      if ((v6 & 1) != 0)
        v5 = 0;
      else
        v5 = (_QWORD *)((char *)v5 + 1);
      v17[0] = v3;
      v17[1] = v5;
      if ((((uint64_t (*)(uint64_t, _QWORD **))v15[2])((uint64_t)&v15, v17) & 1) == 0)
      {
        v16[0] = v3;
        v16[1] = v5;
        if (!v23)
          std::__throw_bad_function_call[abi:ne180100]();
        v7 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v23 + 48))(v23, v16);
        if ((_DWORD)v7)
          break;
      }
      v6 = 0;
      if (++v3 == v4)
        goto LABEL_10;
    }
  }
  v8 = v23;
  if (v23 == v22)
  {
    v9 = 4;
    v8 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
    goto LABEL_25;
  }
  if (v19)
  {
    v13 = 5;
LABEL_25:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v7;
}

void sub_1B5B66B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698F7D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698F7D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngineEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS2_10unique_ptrIS4_NS2_14default_deleteIS4_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6991470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991470;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRjR17HALS_IOEngineInfojEJNS_17reference_wrapperIjEERKNS_12placeholders4__phILi1EEES1_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

char *__Block_byref_object_copy__15_9629(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__16_9630(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *__Block_byref_object_copy__9631(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  result = (_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>((uint64_t)result, *(_QWORD **)(a2 + 72), (_QWORD *)(a2 + 80));
    std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(a1 + 96, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4));
    result = std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>((_QWORD *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
  }
  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 48))
    __assert_rtn("HALS_MutationChangeSynchronizer", "HALS_MutationChangeSynchronizer.cpp", 28, "that.mChangeList.empty()");
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD **)(a1 + 48);
  while (v6 != v5)
  {
    v7 = (_QWORD *)*--v6;
    result = v7;
    *v6 = 0;
    if (v7)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *(_QWORD *)(a1 + 48) = v5;
  return result;
}

void sub_1B5B66F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *(void **)(v2 + 120);
  if (v5)
  {
    *(_QWORD *)(v2 + 128) = v5;
    operator delete(v5);
  }
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*v3);
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__9632(uint64_t a1)
{
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)(a1 + 40));
}

void ___ZN26HALS_IOContext_Legacy_Impl14SetCompositionEPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  const __CFDictionary *v4;
  _QWORD *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  const BOOL *v18;
  DSP_Host_OffloadDictionary *v19;
  uint64_t v20;
  DSP_Host_OffloadDictionary *v21;
  const __CFDictionary *v22;
  const BOOL *v23;
  const BOOL *v24;
  unint64_t v25;
  CFTypeRef Mutable;
  CFTypeRef v27;
  AudioChannelLayout *v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  HALS_MutationChangeSynchronizer *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  AMCP::Log::Scope_Registry *v40;
  int v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  AMCP::Log::Scope_Registry *v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  std::__shared_weak_count *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;
  const char *v65;
  std::__shared_weak_count *v66;
  NSObject *v67;
  unint64_t *v68;
  unint64_t v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _opaque_pthread_t *v75;
  mach_port_t v76;
  const __CFDictionary *v77;
  int v78;
  int v79;
  const __CFArray *v80;
  unsigned int v81;
  unsigned int v82;
  CFTypeRef v83;
  char *EngineInfo;
  _QWORD *v85;
  uint8_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  HALS_ObjectMap *v97;
  const char *v98;
  HALS_Object *v99;
  uint64_t v100;
  void *v101;
  int v102;
  _DWORD *v103;
  void *v104;
  int v105;
  _DWORD *v106;
  int v107;
  const __CFDictionary *v108;
  _QWORD *v109;
  uint64_t v110;
  HALS_ObjectMap *v111;
  HALS_ObjectMap *v112;
  HALS_Object *v113;
  HALS_ObjectMap *v114;
  HALS_Object *v115;
  _opaque_pthread_t *v116;
  mach_port_t v117;
  std::runtime_error *exception;
  uint64_t v119;
  HALS_IOContextDescription *v120;
  uint64_t v121;
  int v122;
  std::vector<char>::value_type __x;
  CFTypeRef v124;
  CFDictionaryRef v125;
  _BYTE v126[8];
  CFTypeRef cf;
  _BYTE v128[8];
  CFDictionaryRef theDict;
  _BYTE v130[8];
  const __CFNumber *v131;
  void (**v132)(OS::CF::Dictionary *__hidden);
  CFDictionaryRef v133;
  CFTypeRef v134;
  uint8_t buf[32];
  uint64_t v136;
  _BYTE v137[40];
  _QWORD v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;

  v1 = a1;
  v151 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v121 = v2 + 312;
  v122 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  if (*(_BYTE *)(v2 + 1714))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16);
    v4 = *(const __CFDictionary **)(v2 + 1504);
    *(_QWORD *)v137 = &off_1E6997340;
    *(_DWORD *)&v137[8] = v3;
    *(_QWORD *)&v137[24] = v137;
    for_all_taps(v4, (uint64_t)v137);
    v5 = *(_QWORD **)&v137[24];
    if (*(_BYTE **)&v137[24] == v137)
    {
      v6 = 4;
      v5 = v137;
    }
    else
    {
      if (!*(_QWORD *)&v137[24])
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_7:
  v7 = *(const __CFDictionary **)(v1 + 72);
  v8 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  if (v7)
    CFRetain(*(CFTypeRef *)(v1 + 72));
  *(_QWORD *)buf = &off_1E69A0DE0;
  *(_QWORD *)&buf[8] = v7;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v2 + 1848));
  *(_QWORD *)(v2 + 1856) = 0;
  v9 = *(_QWORD *)(v2 + 1864);
  *(_QWORD *)(v2 + 1864) = 0;
  *(_QWORD *)(v2 + 1840) = v2 + 1848;
  *(_QWORD *)(v2 + 1848) = 0;
  if (v9)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v9);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v2 + 1880));
  *(_QWORD *)(v2 + 1872) = v2 + 1880;
  *(_QWORD *)(v2 + 1888) = 0;
  *(_QWORD *)(v2 + 1880) = 0;
  v10 = (_BYTE *)(v2 + 1896);
  if (*(_BYTE *)(v2 + 1920))
  {
    v11 = *(void **)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(v2 + 1904) = v11;
      operator delete(v11);
    }
    *(_BYTE *)(v2 + 1920) = 0;
  }
  if ((v12 & 1) == 0
  {
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::isAppleInternal = os_variant_has_internal_diagnostics();
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v132, *(CFDictionaryRef *)&buf[8], CFSTR("vocal isolation type"));
  if (v133)
  {
    *(_DWORD *)v137 = OS::CF::Number::GetValue<unsigned int>(v133, 0);
    v13 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v137);
    if (HIDWORD(v13))
      std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v13, v13);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v130, *(CFDictionaryRef *)&buf[8], CFSTR("voice activity detection enable"));
  if (v131)
  {
    if (OS::CF::Number::GetValue<unsigned int>(v131, 0))
    {
      *(_DWORD *)v137 = 6;
      v14 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v137);
      if (HIDWORD(v14))
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v14, v14);
    }
  }
  v15 = IsolatedUseCaseID_FromDescription(*(CFDictionaryRef *)&buf[8]);
  v17 = v15;
  if (HIDWORD(v15))
  {
    if ((_DWORD)v15)
    {
      *(_DWORD *)v137 = 7;
      v16 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v137);
      if (HIDWORD(v16))
      {
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v16, v16);
        *(_DWORD *)(v2 + 1832) = v17;
        *(_BYTE *)(v2 + 1836) = 1;
      }
    }
  }
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, (const BOOL *)v16) & 1) != 0
    || (AMCP::Feature_Flags::allow_adm_dsp_offloads(0, v18) & 1) != 0
    || g_static_start_options == 1)
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)v137, *(CFDictionaryRef *)&buf[8], CFSTR("device dsp offloads input"));
    if (*(_QWORD *)&v137[8])
    {
      v19 = (DSP_Host_OffloadDictionary *)operator new();
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      v20 = *(_QWORD *)(v2 + 1864);
      *(_QWORD *)(v2 + 1864) = v19;
      if (v20)
      {
        std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v20);
        v19 = *(DSP_Host_OffloadDictionary **)(v2 + 1864);
      }
      DSP_Host_OffloadDictionary::deep_copy_from(v19, *(const __CFString **)&v137[8]);
      v21 = *(DSP_Host_OffloadDictionary **)(v2 + 1864);
      v22 = (const __CFDictionary *)*((_QWORD *)v21 + 2);
      if (v22)
      {
        if (CFDictionaryGetCount(v22) && !DSP_Host_OffloadDictionary::has_all_id(v21))
        {
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v2 + 1840), 8u, 8);
          goto LABEL_42;
        }
        v21 = *(DSP_Host_OffloadDictionary **)(v2 + 1864);
        *(_QWORD *)(v2 + 1864) = 0;
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        *(_QWORD *)(v2 + 1864) = 0;
      }
      std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v21);
    }
LABEL_42:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v137);
  }
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, v23) & 1) != 0
    || AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v24))
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v128, *(CFDictionaryRef *)&buf[8], CFSTR("spatialization type"));
    if (theDict)
    {
      *(_DWORD *)v137 = OS::CF::Number::GetValue<unsigned int>(theDict, 0);
      v25 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v137);
      if (HIDWORD(v25))
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1872), v25, v25);
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)v126, *(CFDictionaryRef *)&buf[8], CFSTR("spatialization virtual channel layout"));
    if (cf)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v124 = Mutable;
      LOWORD(v125) = 257;
      v27 = cf;
      if (cf)
      {
        CFRetain(cf);
        Mutable = v124;
      }
      if (Mutable != v27)
      {
        if (Mutable)
          CFRelease(Mutable);
        v124 = v27;
        BYTE1(v125) = 0;
      }
      LOBYTE(v125) = 1;
      LODWORD(v134) = 0;
      CACFDictionary::GetUInt32((uint64_t)v27, CFSTR("number channels"), (unsigned int *)&v134);
      __x = 0;
      std::vector<char>::vector((std::vector<char> *)v137, 0x20uLL, &__x);
      v29 = *(_DWORD **)v137;
      **(_QWORD **)v137 = 0;
      v29[2] = 0;
      v30 = v134;
      if (v134 <= 1)
        v31 = 1;
      else
        v31 = v134;
      v32 = 20 * v31 + 12;
      __x = 0;
      if (v32 <= *(_QWORD *)&v137[8] - (_QWORD)v29)
      {
        if (v32 < *(_QWORD *)&v137[8] - (_QWORD)v29)
          *(_QWORD *)&v137[8] = (char *)v29 + v32;
      }
      else
      {
        std::vector<char>::__append((std::vector<char> *)v137, v32 - (*(_QWORD *)&v137[8] - (_QWORD)v29), &__x);
        v29 = *(_DWORD **)v137;
        v30 = v134;
      }
      *(_QWORD *)v29 = 0;
      v29[2] = v30;
      if (v30)
      {
        v33 = v30;
        v34 = v29 + 4;
        do
        {
          *((_DWORD *)v34 - 1) = -1;
          *v34 = 0;
          v34[1] = 0;
          v34 = (_QWORD *)((char *)v34 + 20);
          --v33;
        }
        while (v33);
        v29 = *(_DWORD **)v137;
      }
      HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&v124, (const CACFDictionary *)v29, v28);
      if (*(_BYTE *)(v2 + 1920))
      {
        if (v10 != v137)
          std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((_QWORD *)(v2 + 1896), *(char **)v137, *(char **)&v137[8], *(_QWORD *)&v137[8] - *(_QWORD *)v137);
      }
      else
      {
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v2 + 1904) = 0;
        *(_QWORD *)(v2 + 1912) = 0;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)(v2 + 1896), *(const void **)v137, *(uint64_t *)&v137[8], *(_QWORD *)&v137[8] - *(_QWORD *)v137);
        *(_BYTE *)(v2 + 1920) = 1;
      }
      if (*(_QWORD *)v137)
      {
        *(_QWORD *)&v137[8] = *(_QWORD *)v137;
        operator delete(*(void **)v137);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v124);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v126);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v128);
  }
  v120 = (HALS_IOContextDescription *)(v2 + 1496);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v130);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v132);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  if (!(*(_QWORD *)(v2 + 1888) | *(_QWORD *)(v2 + 1856)))
    goto LABEL_100;
  if (v7)
  {
    HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(v120);
    HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(v120, v7);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(v120, v7);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(v120, v7);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(v120);
    v36 = *(_QWORD *)(v2 + 1584);
    v37 = *(_QWORD *)(v2 + 1576);
    std::vector<BOOL>::resize(v2 + 1624, 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(v2 + 1560) - *(_QWORD *)(v2 + 1552)) >> 3), 1);
    std::vector<BOOL>::resize(v2 + 1600, (v36 - v37) >> 5, 1);
  }
  HALS_IOContextHostedDSP::Initialize(*(HALS_IOContextHostedDSP **)(v2 + 2080), v120, **(_DWORD **)(*(_QWORD *)(v2 + 24) + 64), *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16));
  v38 = *(_QWORD *)(v2 + 2080);
  v39 = *(_DWORD *)(v2 + 1320);
  memset(v137, 0, 26);
  *(_QWORD *)&v137[32] = v138;
  v138[0] = 0;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138[1] = 0;
  v142 = 0;
  v40 = (AMCP::Log::Scope_Registry *)HALS_IOContextHostedDSP::Negotiate_Internal(v38, (uint64_t)v120, v39, (uint64_t)v137, 3);
  v41 = (int)v40;
  if ((_DWORD)v40 == 1685287013)
  {
    v119 = v1;
    AMCP::Log::Scope_Registry::get(v40);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v42 = *(std::__shared_weak_count **)&buf[8];
    v43 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v1 = v119;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOContextHostedDSP.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1029;
      _os_log_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] Attempting to negotiate 'bypass' with hosted DSP.", buf, 0x18u);
    }
    v41 = HALS_IOContextHostedDSP::Negotiate_Internal(v38, (uint64_t)v120, v39, (uint64_t)v137, 7);
    if (!v41)
    {
      HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v137);
      goto LABEL_102;
    }
  }
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v137);
  if (v41 <= 1685286514)
  {
    if (!v41)
    {
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v137, "com.apple.coreaudio", "AMCP");
      v66 = *(std::__shared_weak_count **)&v137[8];
      v67 = **(NSObject ***)v137;
      if (*(_QWORD *)&v137[8])
      {
        v68 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        v70 = pthread_self();
        v71 = pthread_mach_thread_np(v70);
        *(_DWORD *)v137 = 67109634;
        *(_DWORD *)&v137[4] = v71;
        *(_WORD *)&v137[8] = 2080;
        *(_QWORD *)&v137[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&v137[18] = 1024;
        *(_DWORD *)&v137[20] = 4594;
        _os_log_debug_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Negotiate simulate ok, retaining DSP types in description.", v137, 0x18u);
      }
      goto LABEL_131;
    }
    if (v41 != 1685283449)
      goto LABEL_109;
LABEL_102:
    AMCP::Log::Scope_Registry::get(v48);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v137, "com.apple.coreaudio", "AMCP");
    v53 = *(std::__shared_weak_count **)&v137[8];
    v54 = **(NSObject ***)v137;
    if (*(_QWORD *)&v137[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      v57 = pthread_self();
      v58 = pthread_mach_thread_np(v57);
      *(_DWORD *)v137 = 67109634;
      *(_DWORD *)&v137[4] = v58;
      *(_WORD *)&v137[8] = 2080;
      *(_QWORD *)&v137[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v137[18] = 1024;
      *(_DWORD *)&v137[20] = 4588;
      _os_log_error_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Negotiate simulate failed, DSP will process in bypass, retaining DSP types in description.", v137, 0x18u);
    }
    goto LABEL_131;
  }
  if (v41 != 1685286515)
  {
    if (v41 != 1685287013)
    {
LABEL_109:
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v137, "com.apple.coreaudio", "AMCP");
      v59 = *(std::__shared_weak_count **)&v137[8];
      v60 = **(NSObject ***)v137;
      if (*(_QWORD *)&v137[8])
      {
        v61 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v63 = pthread_self();
        v64 = pthread_mach_thread_np(v63);
        *(_DWORD *)v137 = 67109634;
        *(_DWORD *)&v137[4] = v64;
        *(_WORD *)&v137[8] = 2080;
        *(_QWORD *)&v137[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&v137[18] = 1024;
        *(_DWORD *)&v137[20] = 4597;
        v65 = "%6u %32s:%-5d [hal_dsp] Negotiate simulate has other result, retaining DSP types in description.";
LABEL_130:
        _os_log_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_DEFAULT, v65, v137, 0x18u);
        goto LABEL_131;
      }
      goto LABEL_131;
    }
    AMCP::Log::Scope_Registry::get(v48);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v137, "com.apple.coreaudio", "AMCP");
    v49 = *(std::__shared_weak_count **)&v137[8];
    v50 = **(NSObject ***)v137;
    if (*(_QWORD *)&v137[8])
    {
      v51 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v116 = pthread_self();
      v117 = pthread_mach_thread_np(v116);
      *(_DWORD *)v137 = 67109634;
      *(_DWORD *)&v137[4] = v117;
      *(_WORD *)&v137[8] = 2080;
      *(_QWORD *)&v137[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v137[18] = 1024;
      *(_DWORD *)&v137[20] = 4583;
      _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Negotiate simulate failed, dropping DSP types from description.", v137, 0x18u);
    }
    HALS_IOContextDescription::HostedDSPDescription::ResetRequests((HALS_IOContextDescription::HostedDSPDescription *)(v2 + 1752));
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v2 + 1848));
    *(_QWORD *)(v2 + 1840) = v2 + 1848;
    *(_OWORD *)(v2 + 1848) = 0u;
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v2 + 1880));
    *(_QWORD *)(v2 + 1872) = v2 + 1880;
    *(_OWORD *)(v2 + 1880) = 0u;
LABEL_100:
    HALS_IOContextHostedDSP::Remove(*(HALS_IOContextHostedDSP **)(v2 + 2080), v120, *(_DWORD *)(v2 + 1320), **(_DWORD **)(*(_QWORD *)(v2 + 24) + 64), *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16), (HALS_MutationChangeSynchronizer *)(v8 + 40), v35);
    goto LABEL_131;
  }
  AMCP::Log::Scope_Registry::get(v48);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v137, "com.apple.coreaudio", "AMCP");
  v72 = *(std::__shared_weak_count **)&v137[8];
  v60 = **(NSObject ***)v137;
  if (*(_QWORD *)&v137[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&v137[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    v75 = pthread_self();
    v76 = pthread_mach_thread_np(v75);
    *(_DWORD *)v137 = 67109634;
    *(_DWORD *)&v137[4] = v76;
    *(_WORD *)&v137[8] = 2080;
    *(_QWORD *)&v137[10] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&v137[18] = 1024;
    *(_DWORD *)&v137[20] = 4591;
    v65 = "%6u %32s:%-5d [hal_dsp] Negotiate simulate, no streams to negotiate, retaining DSP types in description.";
    goto LABEL_130;
  }
LABEL_131:
  v77 = *(const __CFDictionary **)(v1 + 72);
  if (v77)
  {
    CFRetain(*(CFTypeRef *)(v1 + 72));
    v124 = &off_1E69A0DE0;
    v125 = v77;
    HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(v120);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v137, v125, CFSTR("device id"));
    v78 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&v137[8], 0);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v137);
    v79 = *(_DWORD *)(v2 + 1512);
    if (v79 && v78 != v79 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v137 = 136315394;
      *(_QWORD *)&v137[4] = "HALS_IOContextDescription.cpp";
      *(_WORD *)&v137[12] = 1024;
      *(_DWORD *)&v137[14] = 305;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation: the owning device is different", v137, 0x12u);
    }
    *(_DWORD *)(v2 + 1512) = v78;
    HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(v120, v77);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(v120, v77);
    CFRetain(v77);
    v132 = &off_1E69A0DE0;
    v133 = v77;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v130, v77, CFSTR("taps"));
    v80 = v131;
    if (v131)
    {
      v81 = 0;
      while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v80) > v81)
      {
        v82 = v81;
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v128, (uint64_t)v130, v81);
        if (theDict)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v126, theDict, CFSTR("uid"));
          v83 = cf;
          EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(v120, (char *)cf);
          v85 = EngineInfo;
          if (EngineInfo)
          {
            EngineInfo[297] = 1;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              if (!v83)
              {
                v134 = 0;
LABEL_198:
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              CFRetain(v83);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v134, v83);
              if (!v134)
                goto LABEL_198;
              applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v134);
              v86 = buf;
              if ((buf[23] & 0x80u) != 0)
                v86 = *(uint8_t **)buf;
              v87 = *(_DWORD *)(v2 + 1936);
              *(_DWORD *)v137 = 136315906;
              *(_QWORD *)&v137[4] = "HALS_IOContextDescription.cpp";
              *(_WORD *)&v137[12] = 1024;
              *(_DWORD *)&v137[14] = 833;
              *(_WORD *)&v137[18] = 2080;
              *(_QWORD *)&v137[20] = v86;
              *(_WORD *)&v137[28] = 1024;
              *(_DWORD *)&v137[30] = v87;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams: Turning on drift correction for tap: %s [IOC: %d]", v137, 0x22u);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if (v134)
                CFRelease(v134);
            }
            *(_QWORD *)((char *)v85 + 300) = 0x4000000000;
            v85[41] = 0;
            HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v137);
            v150 = v85;
            v137[8] = 1;
            *(_DWORD *)&v137[12] = 0;
            v88 = v85[1];
            if (v88)
            {
              v136 = 0;
              memset(buf, 0, sizeof(buf));
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v88 + 432))(v88, 1, 0, buf);
              v147 = *(_OWORD *)buf;
              v148 = *(_OWORD *)&buf[16];
              v149 = v136;
              if (HIDWORD(v142))
              {
                v143 = *(_OWORD *)buf;
                v144 = *(_OWORD *)&buf[16];
                v145 = v136;
                if (!v146)
                  v146 = 1;
              }
              LODWORD(v142) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v85[1] + 424))(v85[1], v137[8], *(unsigned int *)&v137[12]);
            }
            HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)(v2 + 1552), (HALS_IOStreamInfo *)v137);
            ++*(_DWORD *)(v2 + 1716);
            HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v137);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v126);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v128);
        v81 = v82 + 1;
        v80 = v131;
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v137, v133, CFSTR("tapautostart"));
      *(_BYTE *)(v2 + 1714) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)&v137[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v137);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v130);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v132);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(v120, v77);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(v120);
    CFRetain(v77);
    v89 = *(_QWORD *)(v2 + 1528);
    v90 = *(_QWORD *)(v2 + 1536);
    while (v89 != v90)
    {
      v91 = *(_QWORD *)(*(_QWORD *)v89 + 8);
      if (v91 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v91 + 296))(v91))
      {
        *(_BYTE *)(v2 + 1712) = 1;
        break;
      }
      v89 += 8;
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v137, v125, CFSTR("LDCM"));
    *(_BYTE *)(v2 + 1713) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)&v137[8]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v137);
    v93 = *(const void **)(v2 + 1504);
    if (v93)
      CFRelease(v93);
    *(_QWORD *)(v2 + 1504) = v77;
    v94 = *(_QWORD *)(v2 + 1584);
    v95 = *(_QWORD *)(v2 + 1576);
    std::vector<BOOL>::resize(v2 + 1624, 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(v2 + 1560) - *(_QWORD *)(v2 + 1552)) >> 3), 1);
    std::vector<BOOL>::resize(v2 + 1600, (v94 - v95) >> 5, 1);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v124);
  }
  else
  {
    HALS_IOContextDescription::SetToEmpty(v120);
    v92 = *(const void **)(v2 + 1504);
    if (v92)
      CFRelease(v92);
    *(_QWORD *)(v2 + 1504) = 0;
  }
  HALS_IOContextDescription::PushStreamUsageToEngines(v120, 0);
  HALS_IOContextDescription::PushStreamUsageToEngines(v120, 1);
  HALS_IOContextDescription::CalculateEngineSynchOffsets(v120);
  if (0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(v2 + 1560) - *(_QWORD *)(v2 + 1552)) >> 3) != *(_DWORD *)(v2 + 1632)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v137 = 136315394;
    *(_QWORD *)&v137[4] = "HALS_IOContextDescription.cpp";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 372;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", v137, 0x12u);
  }
  if (*(_DWORD *)(v2 + 1608) != (uint64_t)(*(_QWORD *)(v2 + 1584) - *(_QWORD *)(v2 + 1576)) >> 5
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v137 = 136315394;
    *(_QWORD *)&v137[4] = "HALS_IOContextDescription.cpp";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 373;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", v137, 0x12u);
  }
  *(_DWORD *)(v2 + 1968) = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v2 + 1972) = *(_DWORD *)(v1 + 84);
  HALS_IOContext_Legacy_Impl::AssessIOBufferSize((HALS_IOContext_Legacy_Impl *)v2, (CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 40));
  v96 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 1512));
  v97 = (HALS_ObjectMap *)v96;
  if (v96)
  {
    v98 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 216))(v96);
    snprintf(v137, 0x12CuLL, "audio IO: %s", v98);
    strlcpy((char *)(v2 + 492), v137, 0x40uLL);
  }
  else
  {
    strlcpy((char *)(v2 + 492), "audio IO thread", 0x40uLL);
  }
  HALS_ObjectMap::ReleaseObject(v97, v99);
  *(_BYTE *)(v2 + 1377) = 0;
  v100 = *(_QWORD *)(v2 + 24);
  v101 = *(void **)(v100 + 120);
  if (v101)
  {
    free(v101);
    v102 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v100 + 96) + 32))(*(_QWORD *)(v100 + 96), 1);
    v103 = malloc_type_calloc(1uLL, (16 * v102) | 8u, 0xC517D68uLL);
    if (v103)
      *v103 = v102;
    *(_QWORD *)(v100 + 120) = v103;
  }
  v104 = *(void **)(v100 + 128);
  if (v104)
  {
    free(v104);
    v105 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v100 + 96) + 32))(*(_QWORD *)(v100 + 96), 0);
    v106 = malloc_type_calloc(1uLL, (16 * v105) | 8u, 0xC517D68uLL);
    if (v106)
      *v106 = v105;
    *(_QWORD *)(v100 + 128) = v106;
  }
  if (*(_BYTE *)(v2 + 1714))
  {
    v107 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 16);
    v108 = *(const __CFDictionary **)(v2 + 1504);
    *(_QWORD *)v137 = &off_1E69972C0;
    *(_DWORD *)&v137[8] = v107;
    *(_QWORD *)&v137[24] = v137;
    for_all_taps(v108, (uint64_t)v137);
    v109 = *(_QWORD **)&v137[24];
    if (*(_BYTE **)&v137[24] == v137)
    {
      v110 = 4;
      v109 = v137;
    }
    else
    {
      if (!*(_QWORD *)&v137[24])
        goto LABEL_194;
      v110 = 5;
    }
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
LABEL_194:
  v111 = (HALS_ObjectMap *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 24) + 96) + 720))(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 96));
  v112 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v111);
  v114 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(_QWORD *)(v2 + 24) + 64));
  if (v112)
    *(_BYTE *)(v2 + 32) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *))(*(_QWORD *)v112 + 704))(v112, v114);
  HALS_ObjectMap::ReleaseObject(v114, v113);
  HALS_ObjectMap::ReleaseObject(v112, v115);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v121);
}

